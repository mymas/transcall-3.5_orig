#ifndef __ac_FIRST__usr_local_etc_transcallX453_5_1_libos_2_6_27__
#define __ac_FIRST__usr_local_etc_transcallX453_5_1_libos_2_6_27__
#define __ac_FIRST_FILE__usr_local_etc_transcallX453_5_1_libos_2_6_27_net_packet_af_packet_cxx__
#endif // __ac_FIRST__usr_local_etc_transcallX453_5_1_libos_2_6_27__
class Introspect;
class MyIntrospect;

#ifndef __ac_h_
#define __ac_h_
#ifdef __cplusplus
namespace AC {
  typedef const char* Type;
  enum JPType { CALL = 32768, EXECUTION = 65536, CONSTRUCTION = 131072, DESTRUCTION = 262144, GET = 33554432 };
  enum Protection { PROT_NONE, PROT_PRIVATE, PROT_PROTECTED, PROT_PUBLIC };
  enum Specifiers { SPEC_NONE = 0x0 , SPEC_STATIC = 0x1, SPEC_MUTABLE = 0x2, SPEC_VIRTUAL = 0x4 };
  struct Action {
    void **_args; void *_result; void *_target; void *_that; void *_fptr;
    void *_source;
    void (*_wrapper)(Action &);
    inline void trigger () { _wrapper (*this); }
  };
  struct AnyResultBuffer {};
  template <typename T> struct ResultBuffer : public AnyResultBuffer {
    struct { char _array[sizeof (T)]; } _data;
    ~ResultBuffer () { ((T&)_data).T::~T(); }
    operator T& () const { return (T&)_data; }
  };
  template <typename T, typename N> struct TL {
    typedef T type; typedef N next; enum { ARGS = next::ARGS + 1 };
  };
  struct TLE { enum { ARGS = 0 }; };
  template <typename T> struct Referred { typedef T type; };
  template <typename T> struct Referred<T &> { typedef T type; };
  template <typename TL, int I> struct Arg {
    typedef typename Arg<typename TL::next, I - 1>::Type Type;
    typedef typename Referred<Type>::type ReferredType;
  };
  template <typename TL> struct Arg<TL, 0> {
    typedef typename TL::type Type;
    typedef typename Referred<Type>::type ReferredType;
  };
  template <typename T> int ttest(...);
  template <typename T> char ttest(typename T::__TI const volatile *);
  template<typename T> struct HasTypeInfo {
    enum { RET=((sizeof(ttest<T>(0))==1)?1:0) };
  };
  template<typename T, int HAVE = HasTypeInfo<T>::RET> struct TypeInfo {
    enum { AVAILABLE = 0 };
  };
  template<typename T> struct TypeInfo<T, 1> : T::__TI {
    enum { AVAILABLE = 1 };
	 };
  template<typename T> struct RT {};
  template<typename T> RT<T> rt_deduce (const T&) { return RT<T>(); }
  struct Cnv { template<typename T> operator RT<T>() const { return RT<T>(); }};
  #define __AC_TYPEOF(expr) (1?AC::Cnv():AC::rt_deduce(expr))
  template <class Aspect, int Index>
  struct CFlow {
    static int &instance () {
      static int counter = 0;
      return counter;
    }
    CFlow () { instance ()++; }
    ~CFlow () { instance ()--; }
    static bool active () { return instance () > 0; }
  };
}
inline void * operator new (unsigned long int, AC::AnyResultBuffer *p) { return p; }
inline void operator delete (void *, AC::AnyResultBuffer *) { } // for VC++
#endif // __cplusplus
#endif // __ac_h_

#ifndef __ac_fwd_MyIntrospect__
#define __ac_fwd_MyIntrospect__
class MyIntrospect;
namespace AC {
  template <class JoinPoint>
  __attribute((always_inline)) inline void invoke_MyIntrospect_Introspect__a0_around (JoinPoint *tjp);
}
#endif

#ifndef __ac_need__usr_local_etc_transcallX453_5_1_libos_2_6_27_MyIntrospect_ah__
#define __ac_need__usr_local_etc_transcallX453_5_1_libos_2_6_27_MyIntrospect_ah__
#endif




extern "C" {


extern void g_pause(void);
extern void g_unpause(void);
extern void g_init(int domain_id);
extern void g_exit(void);
extern void *g_map(void *addr, unsigned long size);
extern void g_unmap(void *laddr);
extern void *g_proc_map(void *addr, unsigned long size, void *pgd);





}




extern int pid_max;
extern int ngroups_max;



struct seq_file;
struct dentry_operations;
struct dentry;
struct inode_operations;
struct nameidata;
struct super_operations;
struct kstatfs;
struct vfsmount;
struct statfs;

struct seq_file *seq_get(char *data, int size);
struct seq_file *seq_renew(struct seq_file *m);

char *dentry_op_dname(struct dentry_operations *op,
                      struct dentry *dentry, char *buffer, int buflen);
void *inode_op_follow_link(struct inode_operations *op,
                           struct dentry *dentry, struct nameidata *nd);
int super_op_statfs(struct super_operations *op,
                    struct dentry *dentry, struct kstatfs *buf);


struct vfsmount *lookup_vfsmount(struct vfsmount *mnt, struct dentry *dentry);
int get_stat(struct vfsmount *mnt, struct dentry *dentry,
             struct kstat *stat);
int get_statfs(struct vfsmount *mnt, struct dentry *dentry,
               struct statfs *buf);




int uptime_proc_show(struct seq_file *m, void *v);
int meminfo_proc_show(struct seq_file *m, void *v);
int filesystems_proc_show(struct seq_file *m, void *v);
int version_proc_show(struct seq_file *m, void *v);











enum {
 _false = 0,
 _true = 1
};
typedef struct {
 unsigned long fds_bits [(1024/(8 * sizeof(unsigned long)))];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;





typedef unsigned long __kernel_ino_t;
typedef unsigned int __kernel_mode_t;
typedef unsigned long __kernel_nlink_t;
typedef long __kernel_off_t;
typedef int __kernel_pid_t;
typedef int __kernel_ipc_pid_t;
typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;
typedef unsigned long __kernel_size_t;
typedef long __kernel_ssize_t;
typedef long __kernel_ptrdiff_t;
typedef long __kernel_time_t;
typedef long __kernel_suseconds_t;
typedef long __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef int __kernel_daddr_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;


typedef long long __kernel_loff_t;


typedef struct {
 int val[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __kernel_fsid_t;

typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;
typedef __kernel_uid_t __kernel_uid32_t;
typedef __kernel_gid_t __kernel_gid32_t;

typedef unsigned long __kernel_old_dev_t;




static inline void __FD_SET(unsigned long fd, __kernel_fd_set *fdsetp)
{
 unsigned long _tmp = fd / (8 * sizeof(unsigned long));
 unsigned long _rem = fd % (8 * sizeof(unsigned long));
 fdsetp->fds_bits[_tmp] |= (1UL<<_rem);
}


static inline void __FD_CLR(unsigned long fd, __kernel_fd_set *fdsetp)
{
 unsigned long _tmp = fd / (8 * sizeof(unsigned long));
 unsigned long _rem = fd % (8 * sizeof(unsigned long));
 fdsetp->fds_bits[_tmp] &= ~(1UL<<_rem);
}


static inline int __FD_ISSET(unsigned long fd, __const__ __kernel_fd_set *p)
{
 unsigned long _tmp = fd / (8 * sizeof(unsigned long));
 unsigned long _rem = fd % (8 * sizeof(unsigned long));
 return (p->fds_bits[_tmp] & (1UL<<_rem)) != 0;
}






static inline void __FD_ZERO(__kernel_fd_set *p)
{
 unsigned long *tmp = p->fds_bits;
 int i;

 if (__builtin_constant_p((1024/(8 * sizeof(unsigned long))))) {
  switch ((1024/(8 * sizeof(unsigned long)))) {
  case 32:
   tmp[ 0] = 0; tmp[ 1] = 0; tmp[ 2] = 0; tmp[ 3] = 0;
   tmp[ 4] = 0; tmp[ 5] = 0; tmp[ 6] = 0; tmp[ 7] = 0;
   tmp[ 8] = 0; tmp[ 9] = 0; tmp[10] = 0; tmp[11] = 0;
   tmp[12] = 0; tmp[13] = 0; tmp[14] = 0; tmp[15] = 0;
   tmp[16] = 0; tmp[17] = 0; tmp[18] = 0; tmp[19] = 0;
   tmp[20] = 0; tmp[21] = 0; tmp[22] = 0; tmp[23] = 0;
   tmp[24] = 0; tmp[25] = 0; tmp[26] = 0; tmp[27] = 0;
   tmp[28] = 0; tmp[29] = 0; tmp[30] = 0; tmp[31] = 0;
   return;
  case 16:
   tmp[ 0] = 0; tmp[ 1] = 0; tmp[ 2] = 0; tmp[ 3] = 0;
   tmp[ 4] = 0; tmp[ 5] = 0; tmp[ 6] = 0; tmp[ 7] = 0;
   tmp[ 8] = 0; tmp[ 9] = 0; tmp[10] = 0; tmp[11] = 0;
   tmp[12] = 0; tmp[13] = 0; tmp[14] = 0; tmp[15] = 0;
   return;
  case 8:
   tmp[ 0] = 0; tmp[ 1] = 0; tmp[ 2] = 0; tmp[ 3] = 0;
   tmp[ 4] = 0; tmp[ 5] = 0; tmp[ 6] = 0; tmp[ 7] = 0;
   return;
  case 4:
   tmp[ 0] = 0; tmp[ 1] = 0; tmp[ 2] = 0; tmp[ 3] = 0;
   return;
  }
 }
 i = (1024/(8 * sizeof(unsigned long)));
 while (i) {
  i--;
  *tmp = 0;
  tmp++;
 }
}



typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
typedef signed char s8;
typedef unsigned char u8;

typedef signed short s16;
typedef unsigned short u16;

typedef signed int s32;
typedef unsigned int u32;

typedef signed long long s64;
typedef unsigned long long u64;



typedef unsigned short umode_t;
typedef u64 dma64_addr_t;


typedef u64 dma_addr_t;



typedef __u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ino_t ino_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_nlink_t nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;






typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;



typedef __kernel_old_uid_t old_uid_t;
typedef __kernel_old_gid_t old_gid_t;
typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_time_t time_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef __u8 u_int8_t;
typedef __s8 int8_t;
typedef __u16 u_int16_t;
typedef __s16 int16_t;
typedef __u32 u_int32_t;
typedef __s32 int32_t;



typedef __u8 uint8_t;
typedef __u16 uint16_t;
typedef __u32 uint32_t;


typedef __u64 uint64_t;
typedef __u64 u_int64_t;
typedef __s64 int64_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;

typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;


typedef unsigned gfp_t;


typedef u64 resource_size_t;




struct ustat {
  template <typename, int = 0> struct __BYPASSustat {};
  template <typename, int> friend struct __BYPASSustat;
 __kernel_daddr_t f_tfree;
 __kernel_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





















struct timespec;
struct compat_timespec;




struct restart_block {
  template <typename, int = 0> struct __BYPASSrestart_block {};
  template <typename, int> friend struct __BYPASSrestart_block;
 long (*fn)(struct restart_block *);
 union {
  struct {
   unsigned long arg0, arg1, arg2, arg3;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} futex;

  struct {
   clockid_t index;
   struct timespec *rmtp;

   struct compat_timespec *compat_rmtp;

   u64 expires;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} nanosleep;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern long do_no_restart_syscall(struct restart_block *parm);













extern char * x86_cap_flags[8*32];
extern char * x86_power_flags[32];

struct alt_instr {
  template <typename, int = 0> struct __BYPASSalt_instr {};
  template <typename, int> friend struct __BYPASSalt_instr;
 u8 *instr;
 u8 *replacement;
 u8 cpuid;
 u8 instrlen;
 u8 replacementlen;
 u8 pad1;

 u32 pad2;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void alternative_instructions(void);
extern void apply_alternatives(struct alt_instr *start, struct alt_instr *end);

struct module;


extern void alternatives_smp_module_add(struct module *mod, char *name,
     void *locks, void *locks_end,
     void *text, void *text_end);
extern void alternatives_smp_module_del(struct module *mod);
extern void alternatives_smp_switch(int smp);
 unsigned char * *find_nop_table(void);
struct paravirt_patch_site;

void apply_paravirt(struct paravirt_patch_site *start,
      struct paravirt_patch_site *end);
extern void add_nops(void *insns, unsigned int len);
extern void *text_poke(void *addr, void *opcode, size_t len);
extern void *text_poke_early(void *addr, void *opcode, size_t len);
static inline void set_bit(unsigned int nr, unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "orb %1,%0"
   : "+m" (*( long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)(1 << ((nr) & 7)))
   : "memory");
 } else {
  asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "bts %1,%0"
   : "+m" (*( long *) (addr)) : "Ir" (nr) : "memory");
 }
}
static inline void __set_bit(int nr, unsigned long *addr)
{
 asm ("bts %1,%0" : "+m" (*( long *) (addr)) : "Ir" (nr) : "memory");
}
static inline void clear_bit(int nr, unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "andb %1,%0"
   : "+m" (*( long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)~(1 << ((nr) & 7))));
 } else {
  asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "btr %1,%0"
   : "+m" (*( long *) (addr))
   : "Ir" (nr));
 }
}
static inline void clear_bit_unlock(unsigned nr, unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");
 clear_bit(nr, addr);
}

static inline void __clear_bit(int nr, unsigned long *addr)
{
 asm ("btr %1,%0" : "+m" (*( long *) (addr)) : "Ir" (nr));
}
static inline void __clear_bit_unlock(unsigned nr, unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");
 __clear_bit(nr, addr);
}
static inline void __change_bit(int nr, unsigned long *addr)
{
 asm ("btc %1,%0" : "+m" (*( long *) (addr)) : "Ir" (nr));
}
static inline void change_bit(int nr, unsigned long *addr)
{
 asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "btc %1,%0" : "+m" (*( long *) (addr)) : "Ir" (nr));
}
static inline int test_and_set_bit(int nr, unsigned long *addr)
{
 int oldbit;

 asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "bts %2,%1\n\t"
       "sbb %0,%0" : "=r" (oldbit), "+m" (*( long *) (addr)) : "Ir" (nr) : "memory");

 return oldbit;
}
static inline int test_and_set_bit_lock(int nr, unsigned long *addr)
{
 return test_and_set_bit(nr, addr);
}
static inline int __test_and_set_bit(int nr, unsigned long *addr)
{
 int oldbit;

 asm("bts %2,%1\n\t"
     "sbb %0,%0"
     : "=r" (oldbit), "+m" (*( long *) (addr))
     : "Ir" (nr));
 return oldbit;
}
static inline int test_and_clear_bit(int nr, unsigned long *addr)
{
 int oldbit;

 asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "btr %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit), "+m" (*( long *) (addr)) : "Ir" (nr) : "memory");

 return oldbit;
}
static inline int __test_and_clear_bit(int nr, unsigned long *addr)
{
 int oldbit;

 asm ("btr %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit), "+m" (*( long *) (addr))
       : "Ir" (nr));
 return oldbit;
}


static inline int __test_and_change_bit(int nr, unsigned long *addr)
{
 int oldbit;

 asm ("btc %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit), "+m" (*( long *) (addr))
       : "Ir" (nr) : "memory");

 return oldbit;
}
static inline int test_and_change_bit(int nr, unsigned long *addr)
{
 int oldbit;

 asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "btc %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit), "+m" (*( long *) (addr)) : "Ir" (nr) : "memory");

 return oldbit;
}

static inline int constant_test_bit(int nr, unsigned long *addr)
{
 return ((1UL << (nr % 64)) &
  (((unsigned long *)addr)[nr / 64])) != 0;
}

static inline int variable_test_bit(int nr, unsigned long *addr)
{
 int oldbit;

 asm ("bt %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit)
       : "m" (*(unsigned long *)addr), "Ir" (nr));

 return oldbit;
}
static inline unsigned long __ffs(unsigned long word)
{
 asm("bsf %1,%0"
  : "=r" (word)
  : "rm" (word));
 return word;
}







static inline unsigned long ffz(unsigned long word)
{
 asm("bsf %1,%0"
  : "=r" (word)
  : "r" (~word));
 return word;
}







static inline unsigned long __fls(unsigned long word)
{
 asm("bsr %1,%0"
     : "=r" (word)
     : "rm" (word));
 return word;
}
static inline int ffs(int x)
{
 int r;

 asm("bsfl %1,%0\n\t"
     "cmovzl %2,%0"
     : "=r" (r) : "rm" (x), "r" (-1));






 return r + 1;
}
static inline int fls(int x)
{
 int r;

 asm("bsrl %1,%0\n\t"
     "cmovzl %2,%0"
     : "=&r" (r) : "rm" (x), "rm" (-1));






 return r + 1;
}




static inline void set_bit_string(unsigned long *bitmap,
  unsigned long i, int len)
{
 unsigned long end = i + len;
 while (i < end) {
  __set_bit(i, bitmap);
  i++;
 }
}



static inline int sched_find_first_bit( unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
}








extern unsigned int hweight32(unsigned int w);
extern unsigned int hweight16(unsigned int w);
extern unsigned int hweight8(unsigned int w);
extern unsigned long hweight64(__u64 w);



static inline int fls64(__u64 x)
{
 if (x == 0)
  return 0;
 return __fls(x) + 1;
}










static inline __attribute__((__const__)) __u64 ___arch__swab64(__u64 x)
{
 asm("bswapq %0"
     : "=r" (x)
     : "0" (x));
 return x;
}

static inline __attribute__((__const__)) __u32 ___arch__swab32(__u32 x)
{
 asm("bswapl %0"
     : "=r" (x)
     : "0" (x));
 return x;
}
static __inline__ __attribute__((__const__)) __u16 ___swab16(__u16 x)
{
 return x<<8 | x>>8;
}
static __inline__ __attribute__((__const__)) __u32 ___swab32(__u32 x)
{
 return x<<24 | x>>24 |
  (x & (__u32)0x0000ff00UL)<<8 |
  (x & (__u32)0x00ff0000UL)>>8;
}
static __inline__ __attribute__((__const__)) __u64 ___swab64(__u64 x)
{
 return x<<56 | x>>56 |
  (x & (__u64)0x000000000000ff00ULL)<<40 |
  (x & (__u64)0x0000000000ff0000ULL)<<24 |
  (x & (__u64)0x00000000ff000000ULL)<< 8 |
         (x & (__u64)0x000000ff00000000ULL)>> 8 |
  (x & (__u64)0x0000ff0000000000ULL)>>24 |
  (x & (__u64)0x00ff000000000000ULL)>>40;
}
static __inline__ __attribute__((__const__)) __u16 __fswab16(__u16 x)
{
 return ___swab16(x);
}
static __inline__ __u16 __swab16p( __u16 *x)
{
 return ___swab16(*(x));
}
static __inline__ void __swab16s(__u16 *addr)
{
 ((void)(*(addr) = ___swab16(*(addr))));
}

static __inline__ __attribute__((__const__)) __u32 __fswab32(__u32 x)
{
 return ___arch__swab32(x);
}
static __inline__ __u32 __swab32p( __u32 *x)
{
 return ___arch__swab32(*(x));
}
static __inline__ void __swab32s(__u32 *addr)
{
 ((void)(*(addr) = ___arch__swab32(*(addr))));
}


static __inline__ __attribute__((__const__)) __u64 __fswab64(__u64 x)
{





 return ___arch__swab64(x);

}
static __inline__ __u64 __swab64p( __u64 *x)
{
 return ___arch__swab64(*(x));
}
static __inline__ void __swab64s(__u64 *addr)
{
 ((void)(*(addr) = ___arch__swab64(*(addr))));
}
static inline __le64 __cpu_to_le64p( __u64 *p)
{
 return ( __le64)*p;
}
static inline __u64 __le64_to_cpup( __le64 *p)
{
 return ( __u64)*p;
}
static inline __le32 __cpu_to_le32p( __u32 *p)
{
 return ( __le32)*p;
}
static inline __u32 __le32_to_cpup( __le32 *p)
{
 return ( __u32)*p;
}
static inline __le16 __cpu_to_le16p( __u16 *p)
{
 return ( __le16)*p;
}
static inline __u16 __le16_to_cpup( __le16 *p)
{
 return ( __u16)*p;
}
static inline __be64 __cpu_to_be64p( __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __u64 __be64_to_cpup( __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __be32 __cpu_to_be32p( __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __u32 __be32_to_cpup( __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __be16 __cpu_to_be16p( __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __u16 __be16_to_cpup( __be16 *p)
{
 return __swab16p((__u16 *)p);
}
static inline void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}

static inline void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)__fswab16((__fswab16(( __u16)(__be16)(*var)) + val)));
}

static inline void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)__fswab32((__fswab32(( __u32)(__be32)(*var)) + val)));
}

static inline void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)__fswab64((__fswab64(( __u64)(__be64)(*var)) + val)));
}













static __inline__ int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static __inline__ int get_count_order(unsigned int count)
{
 int order;

 order = fls(count) - 1;
 if (count & (count - 1))
  order++;
 return order;
}

static inline unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? hweight32(w) : hweight64(w);
}






static inline __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << shift) | (word >> (32 - shift));
}






static inline __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> shift) | (word << (32 - shift));
}






static inline __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << shift) | (word >> (16 - shift));
}






static inline __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> shift) | (word << (16 - shift));
}






static inline __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << shift) | (word >> (8 - shift));
}






static inline __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> shift) | (word << (8 - shift));
}

static inline unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}
extern unsigned long find_first_bit( unsigned long *addr,
        unsigned long size);
extern unsigned long find_first_zero_bit( unsigned long *addr,
      unsigned long size);
extern unsigned long find_next_bit( unsigned long *addr,
       unsigned long size, unsigned long offset);
extern unsigned long find_next_zero_bit( unsigned long *addr,
     unsigned long size,
     unsigned long offset);



void clear_page(void *page);
void copy_page(void *to, void *from);


extern unsigned long max_pfn;
extern unsigned long phys_base;

extern unsigned long __phys_addr(unsigned long);





typedef unsigned long pteval_t;
typedef unsigned long pmdval_t;
typedef unsigned long pudval_t;
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;
typedef unsigned long phys_addr_t;

typedef struct page *pgtable_t;

typedef struct { pteval_t pte; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pte_t;



extern unsigned long init_memory_mapping(unsigned long start,
      unsigned long end);

extern void initmem_init(unsigned long start_pfn, unsigned long end_pfn);

extern void init_extra_mapping_uc(unsigned long phys, unsigned long size);
extern void init_extra_mapping_wb(unsigned long phys, unsigned long size);
typedef struct { pgdval_t pgd; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pgd_t;
typedef struct { pgprotval_t pgprot; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pgprot_t;

extern int page_is_ram(unsigned long pagenr);
extern int devmem_is_allowed(unsigned long pagenr);
extern void map_devmem(unsigned long pfn, unsigned long size,
         pgprot_t vma_prot);
extern void unmap_devmem(unsigned long pfn, unsigned long size,
    pgprot_t vma_prot);

extern unsigned long max_low_pfn_mapped;
extern unsigned long max_pfn_mapped;

struct page;

static inline void clear_user_page(void *page, unsigned long vaddr,
    struct page *pg)
{
 clear_page(page);
}

static inline void copy_user_page(void *to, void *from, unsigned long vaddr,
    struct page *topage)
{
 copy_page(to, from);
}





static inline pgd_t native_make_pgd(pgdval_t val)
{

        return ({ pgd_t var; var.pgd = val; var; });
}

static inline pgdval_t native_pgd_val(pgd_t pgd)
{
 return pgd.pgd;
}



typedef struct { pudval_t pud; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pud_t;

static inline pud_t native_make_pud(pmdval_t val)
{

        return ({ pud_t var; var.pud = val; var; });
}

static inline pudval_t native_pud_val(pud_t pud)
{
 return pud.pud;
}
typedef struct { pmdval_t pmd; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pmd_t;

static inline pmd_t native_make_pmd(pmdval_t val)
{

        return ({ pmd_t var; var.pmd = val; var; });
}

static inline pmdval_t native_pmd_val(pmd_t pmd)
{
 return pmd.pmd;
}
static inline pte_t native_make_pte(pteval_t val)
{

        return ({ pte_t var; var.pte = val; var; });
}

static inline pteval_t native_pte_val(pte_t pte)
{
 return pte.pte;
}

static inline pteval_t native_pte_flags(pte_t pte)
{
 return native_pte_val(pte) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(1ULL << 46) - 1))));
}











struct desc_struct {
  template <typename, int = 0> struct __BYPASSdesc_struct {};
  template <typename, int> friend struct __BYPASSdesc_struct;
 union {
  struct {
   unsigned int a;
   unsigned int b;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  struct {
   u16 limit0;
   u16 base0;
   unsigned base1: 8, type: 4, s: 1, dpl: 2, p: 1;
   unsigned limit: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

enum {
 GATE_INTERRUPT = 0xE,
 GATE_TRAP = 0xF,
 GATE_CALL = 0xC,
 GATE_TASK = 0x5,
};


struct gate_struct64 {
  template <typename, int = 0> struct __BYPASSgate_struct64 {};
  template <typename, int> friend struct __BYPASSgate_struct64;
 u16 offset_low;
 u16 segment;
 unsigned ist : 3, zero0 : 5, type : 5, dpl : 2, p : 1;
 u16 offset_middle;
 u32 offset_high;
 u32 zero1;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));





enum {
 DESC_TSS = 0x9,
 DESC_LDT = 0x2,
 DESCTYPE_S = 0x10,
};


struct ldttss_desc64 {
  template <typename, int = 0> struct __BYPASSldttss_desc64 {};
  template <typename, int> friend struct __BYPASSldttss_desc64;
 u16 limit0;
 u16 base0;
 unsigned base1 : 8, type : 5, dpl : 2, p : 1;
 unsigned limit1 : 4, zero0 : 3, g : 1, base2 : 8;
 u32 base3;
 u32 zero1;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));


typedef struct gate_struct64 gate_desc;
typedef struct ldttss_desc64 ldt_desc;
typedef struct ldttss_desc64 tss_desc;
struct desc_ptr {
  template <typename, int = 0> struct __BYPASSdesc_ptr {};
  template <typename, int> friend struct __BYPASSdesc_ptr;
 unsigned short size;
 unsigned long address;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed)) ;







typedef __builtin_va_list __gnuc_va_list;
typedef __gnuc_va_list va_list;








extern __attribute__((, noreturn))
int ____ilog2_NaN(void);
static inline __attribute__(())
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__(())
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}







static inline __attribute__(())
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}




static inline __attribute__(())
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}




static inline __attribute__(())
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}










struct ratelimit_state {
  template <typename, int = 0> struct __BYPASSratelimit_state {};
  template <typename, int> friend struct __BYPASSratelimit_state;
 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern int __ratelimit(struct ratelimit_state *rs);

static inline int ratelimit(void)
{
 static struct ratelimit_state rs = {(5 * 1000), 10,}
                             ;
 return __ratelimit(&rs);
}


extern char linux_banner[];
extern char linux_proc_banner[];
extern int console_printk[];






struct completion;
struct pt_regs;
struct user;


extern int _cond_resched(void);
  void __might_sleep(char *file, int line);
extern struct atomic_notifier_head panic_notifier_list;
extern long (*panic_blink)(long time);
 void panic( char * fmt, ...)
 __attribute__ ((noreturn, format (printf, 1, 2))) __attribute__((__cold__));
extern void oops_enter(void);
extern void oops_exit(void);
extern int oops_may_print(void);
 void do_exit(long error_code)
 __attribute__((noreturn));
 void complete_and_exit(struct completion *, long)
 __attribute__((noreturn));
extern unsigned long simple_strtoul( char *,char **,unsigned int);
extern long simple_strtol( char *,char **,unsigned int);
extern unsigned long long simple_strtoull( char *,char **,unsigned int);
extern long long simple_strtoll( char *,char **,unsigned int);
extern int strict_strtoul( char *, unsigned int, unsigned long *);
extern int strict_strtol( char *, unsigned int, long *);
extern int strict_strtoull( char *, unsigned int, unsigned long long *);
extern int strict_strtoll( char *, unsigned int, long long *);
extern int sprintf(char * buf, char * fmt, ...)
 __attribute__ ((format (printf, 2, 3)));
extern int vsprintf(char *buf, char *, va_list)
 __attribute__ ((format (printf, 2, 0)));
extern int snprintf(char * buf, size_t size, char * fmt, ...)
 __attribute__ ((format (printf, 3, 4)));
extern int vsnprintf(char *buf, size_t size, char *fmt, va_list args)
 __attribute__ ((format (printf, 3, 0)));
extern int scnprintf(char * buf, size_t size, char * fmt, ...)
 __attribute__ ((format (printf, 3, 4)));
extern int vscnprintf(char *buf, size_t size, char *fmt, va_list args)
 __attribute__ ((format (printf, 3, 0)));
extern char *kasprintf(gfp_t gfp, char *fmt, ...)
 __attribute__ ((format (printf, 2, 3)));
extern char *kvasprintf(gfp_t gfp, char *fmt, va_list args);

extern int sscanf( char *, char *, ...)
 __attribute__ ((format (scanf, 2, 3)));
extern int vsscanf( char *, char *, va_list)
 __attribute__ ((format (scanf, 2, 0)));

extern int get_option(char **str, int *pint);
extern char *get_options( char *str, int nints, int *ints);
extern unsigned long long memparse(char *ptr, char **retptr);

extern int core_kernel_text(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
struct pid;
extern struct pid *session_of_pgrp(struct pid *pgrp);


 int vprintk( char *fmt, va_list args)
 __attribute__ ((format (printf, 1, 0)));
 int printk( char * fmt, ...)
 __attribute__ ((format (printf, 1, 2))) __attribute__((__cold__));

extern struct ratelimit_state printk_ratelimit_state;
extern int printk_ratelimit(void);
extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);
extern void __attribute__((format(printf, 1, 2)))
 early_printk( char *fmt, ...);

unsigned long int_sqrt(unsigned long);

static inline void console_silent(void)
{
 (console_printk[0]) = 0;
}

static inline void console_verbose(void)
{
 if ((console_printk[0]))
  (console_printk[0]) = 15;
}

extern void bust_spinlocks(int yes);
extern void wake_up_klogd(void);
extern int oops_in_progress;
extern int panic_timeout;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int tainted;
extern char *print_tainted(void);
extern void add_taint(unsigned);
extern int root_mountflags;


extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
 SYSTEM_SUSPEND_DISK,
} system_state;
extern void dump_stack(void) __attribute__((__cold__));

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern void hex_dump_to_buffer( void *buf, size_t len,
    int rowsize, int groupsize,
    char *linebuf, size_t linebuflen, bool ascii);
extern void print_hex_dump( char *level, char *prefix_str,
    int prefix_type, int rowsize, int groupsize,
    void *buf, size_t len, bool ascii);
extern void print_hex_dump_bytes( char *prefix_str, int prefix_type,
   void *buf, size_t len);

extern char hex_asc[];



static inline char *pack_hex_byte(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}
struct sysinfo;
extern int do_sysinfo(struct sysinfo *info);




struct sysinfo {
  template <typename, int = 0> struct __BYPASSsysinfo {};
  template <typename, int> friend struct __BYPASSsysinfo;
 long uptime;
 unsigned long loads[3];
 unsigned long totalram;
 unsigned long freeram;
 unsigned long sharedram;
 unsigned long bufferram;
 unsigned long totalswap;
 unsigned long freeswap;
 unsigned short procs;
 unsigned short pad;
 unsigned long totalhigh;
 unsigned long freehigh;
 unsigned int mem_unit;
 char _f[20-2*sizeof(long)-sizeof(int)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







extern char *strndup_user( char *, long);







static inline __attribute__((always_inline)) void *__inline_memcpy(void *to, void *from, size_t n)
{
 unsigned long d0, d1, d2;
 asm ("rep ; movsl\n\t"
       "testb $2,%b4\n\t"
       "je 1f\n\t"
       "movsw\n"
       "1:\ttestb $1,%b4\n\t"
       "je 2f\n\t"
       "movsb\n"
       "2:"
       : "=&c" (d0), "=&D" (d1), "=&S" (d2)
       : "0" (n / 4), "q" (n), "1" ((long)to), "2" ((long)from)
       : "memory");
 return to;
}






extern void *memcpy(void *to, void *from, size_t len);
void *memset(void *s, int c, size_t n);


void *memmove(void *dest, void *src, size_t count);

int memcmp( void *cs, void *ct, size_t count);
size_t strlen( char *s);
char *strcpy(char *dest, char *src);
char *strcat(char *dest, char *src);
int strcmp( char *cs, char *ct);


extern char * strcpy(char *, char *);


extern char * strncpy(char *, char *, __kernel_size_t);


size_t strlcpy(char *, char *, size_t);


extern char * strcat(char *, char *);


extern char * strncat(char *, char *, __kernel_size_t);


extern size_t strlcat(char *, char *, __kernel_size_t);


extern int strcmp( char *, char *);


extern int strncmp( char *, char *,__kernel_size_t);


extern int strnicmp( char *, char *, __kernel_size_t);


extern int strcasecmp( char *s1, char *s2);


extern int strncasecmp( char *s1, char *s2, size_t n);


extern char * strchr( char *,int);


extern char * strnchr( char *, size_t, int);


extern char * strrchr( char *,int);

extern char * strstrip(char *);

extern char * strstr( char *, char *);


extern __kernel_size_t strlen( char *);


extern __kernel_size_t strnlen( char *,__kernel_size_t);


extern char * strpbrk( char *, char *);


extern char * strsep(char **, char *);


extern __kernel_size_t strspn( char *, char *);


extern __kernel_size_t strcspn( char *, char *);
extern void * memscan(void *,int,__kernel_size_t);


extern int memcmp( void *, void *,__kernel_size_t);


extern void * memchr( void *,int,__kernel_size_t);


extern char *kstrdup( char *s, gfp_t gfp);
extern char *kstrndup( char *s, size_t len, gfp_t gfp);
extern void *kmemdup( void *src, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq( char *s1, char *s2);

extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
   void *from, size_t available);
extern int __bitmap_empty( unsigned long *bitmap, int bits);
extern int __bitmap_full( unsigned long *bitmap, int bits);
extern int __bitmap_equal( unsigned long *bitmap1,
                 unsigned long *bitmap2, int bits);
extern void __bitmap_complement(unsigned long *dst, unsigned long *src,
   int bits);
extern void __bitmap_shift_right(unsigned long *dst,
                        unsigned long *src, int shift, int bits);
extern void __bitmap_shift_left(unsigned long *dst,
                        unsigned long *src, int shift, int bits);
extern void __bitmap_and(unsigned long *dst, unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern void __bitmap_or(unsigned long *dst, unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern void __bitmap_xor(unsigned long *dst, unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern void __bitmap_andnot(unsigned long *dst, unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern int __bitmap_intersects( unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern int __bitmap_subset( unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern int __bitmap_weight( unsigned long *bitmap, int bits);

extern int bitmap_scnprintf(char *buf, unsigned int len,
   unsigned long *src, int nbits);
extern int bitmap_scnprintf_len(unsigned int nr_bits);
extern int __bitmap_parse( char *buf, unsigned int buflen, int is_user,
   unsigned long *dst, int nbits);
extern int bitmap_parse_user( char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern int bitmap_scnlistprintf(char *buf, unsigned int len,
   unsigned long *src, int nbits);
extern int bitmap_parselist( char *buf, unsigned long *maskp,
   int nmaskbits);
extern void bitmap_remap(unsigned long *dst, unsigned long *src,
  unsigned long *old, unsigned long *_new, int bits);
extern int bitmap_bitremap(int oldbit,
  unsigned long *old, unsigned long *_new, int bits);
extern void bitmap_onto(unsigned long *dst, unsigned long *orig,
  unsigned long *relmap, int bits);
extern void bitmap_fold(unsigned long *dst, unsigned long *orig,
  int sz, int bits);
extern int bitmap_find_free_region(unsigned long *bitmap, int bits, int order);
extern void bitmap_release_region(unsigned long *bitmap, int pos, int order);
extern int bitmap_allocate_region(unsigned long *bitmap, int pos, int order);







static inline void bitmap_zero(unsigned long *dst, int nbits)
{
 if (nbits <= 64)
  *dst = 0UL;
 else {
  int len = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))) * sizeof(unsigned long);
  memset(dst, 0, len);
 }
}

static inline void bitmap_fill(unsigned long *dst, int nbits)
{
 size_t nlongs = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)));
 if (nlongs > 1) {
  int len = (nlongs - 1) * sizeof(unsigned long);
  memset(dst, 0xff, len);
 }
 dst[nlongs - 1] = ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL );
}

static inline void bitmap_copy(unsigned long *dst, unsigned long *src,
   int nbits)
{
 if (nbits <= 64)
  *dst = *src;
 else {
  int len = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))) * sizeof(unsigned long);
  memcpy(dst, src, len);
 }
}

static inline void bitmap_and(unsigned long *dst, unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if (nbits <= 64)
  *dst = *src1 & *src2;
 else
  __bitmap_and(dst, src1, src2, nbits);
}

static inline void bitmap_or(unsigned long *dst, unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if (nbits <= 64)
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline void bitmap_xor(unsigned long *dst, unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if (nbits <= 64)
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline void bitmap_andnot(unsigned long *dst, unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if (nbits <= 64)
  *dst = *src1 & ~(*src2);
 else
  __bitmap_andnot(dst, src1, src2, nbits);
}

static inline void bitmap_complement(unsigned long *dst, unsigned long *src,
   int nbits)
{
 if (nbits <= 64)
  *dst = ~(*src) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL );
 else
  __bitmap_complement(dst, src, nbits);
}

static inline int bitmap_equal( unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if (nbits <= 64)
  return ! ((*src1 ^ *src2) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL ));
 else
  return __bitmap_equal(src1, src2, nbits);
}

static inline int bitmap_intersects( unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if (nbits <= 64)
  return ((*src1 & *src2) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL )) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline int bitmap_subset( unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if (nbits <= 64)
  return ! ((*src1 & ~(*src2)) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL ));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline int bitmap_empty( unsigned long *src, int nbits)
{
 if (nbits <= 64)
  return ! (*src & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL ));
 else
  return __bitmap_empty(src, nbits);
}

static inline int bitmap_full( unsigned long *src, int nbits)
{
 if (nbits <= 64)
  return ! (~(*src) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL ));
 else
  return __bitmap_full(src, nbits);
}

static inline int bitmap_weight( unsigned long *src, int nbits)
{
 if (nbits <= 64)
  return hweight_long(*src & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL ));
 return __bitmap_weight(src, nbits);
}

static inline void bitmap_shift_right(unsigned long *dst,
   unsigned long *src, int n, int nbits)
{
 if (nbits <= 64)
  *dst = *src >> n;
 else
  __bitmap_shift_right(dst, src, n, nbits);
}

static inline void bitmap_shift_left(unsigned long *dst,
   unsigned long *src, int n, int nbits)
{
 if (nbits <= 64)
  *dst = (*src << n) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL );
 else
  __bitmap_shift_left(dst, src, n, nbits);
}

static inline int bitmap_parse( char *buf, unsigned int buflen,
   unsigned long *maskp, int nmaskbits)
{
 return __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
}

typedef struct _cpumask {
  template <typename, int = 0> struct __BYPASS_cpumask {};
  template <typename, int> friend struct __BYPASS_cpumask; unsigned long bits[(((64) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} cpumask_t;
extern cpumask_t _unused_cpumask_arg_;



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_9_0 {
  typedef TJP__ZN8_cpumask4bitsE_9_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_9(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_9_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpu_set(int cpu, cpumask_t *dstp)
{
 set_bit(cpu, __get__ZN8_cpumask4bitsE_9(dstp->bits));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_10_0 {
  typedef TJP__ZN8_cpumask4bitsE_10_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_10(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_10_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpu_clear(int cpu, cpumask_t *dstp)
{
 clear_bit(cpu, __get__ZN8_cpumask4bitsE_10(dstp->bits));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_11_0 {
  typedef TJP__ZN8_cpumask4bitsE_11_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_11(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_11_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_setall(cpumask_t *dstp, int nbits)
{
 bitmap_fill(__get__ZN8_cpumask4bitsE_11(dstp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_12_0 {
  typedef TJP__ZN8_cpumask4bitsE_12_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_12(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_12_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_clear(cpumask_t *dstp, int nbits)
{
 bitmap_zero(__get__ZN8_cpumask4bitsE_12(dstp->bits), nbits);
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_13_0 {
  typedef TJP__ZN8_cpumask4bitsE_13_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_13(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_13_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpu_test_and_set(int cpu, cpumask_t *addr)
{
 return test_and_set_bit(cpu, __get__ZN8_cpumask4bitsE_13(addr->bits));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_14_0 {
  typedef TJP__ZN8_cpumask4bitsE_14_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_14(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_14_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_15_0 {
  typedef TJP__ZN8_cpumask4bitsE_15_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_15(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_15_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_16_0 {
  typedef TJP__ZN8_cpumask4bitsE_16_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_16(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_16_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_and(cpumask_t *dstp, cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 bitmap_and(__get__ZN8_cpumask4bitsE_14(dstp->bits), __get__ZN8_cpumask4bitsE_15(src1p->bits), __get__ZN8_cpumask4bitsE_16(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_17_0 {
  typedef TJP__ZN8_cpumask4bitsE_17_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_17(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_17_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_18_0 {
  typedef TJP__ZN8_cpumask4bitsE_18_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_18(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_18_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_19_0 {
  typedef TJP__ZN8_cpumask4bitsE_19_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_19(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_19_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_or(cpumask_t *dstp, cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 bitmap_or(__get__ZN8_cpumask4bitsE_17(dstp->bits), __get__ZN8_cpumask4bitsE_18(src1p->bits), __get__ZN8_cpumask4bitsE_19(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_20_0 {
  typedef TJP__ZN8_cpumask4bitsE_20_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_20(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_20_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_21_0 {
  typedef TJP__ZN8_cpumask4bitsE_21_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_21(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_21_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_22_0 {
  typedef TJP__ZN8_cpumask4bitsE_22_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_22(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_22_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_xor(cpumask_t *dstp, cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 bitmap_xor(__get__ZN8_cpumask4bitsE_20(dstp->bits), __get__ZN8_cpumask4bitsE_21(src1p->bits), __get__ZN8_cpumask4bitsE_22(src2p->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_23_0 {
  typedef TJP__ZN8_cpumask4bitsE_23_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_23(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_23_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_24_0 {
  typedef TJP__ZN8_cpumask4bitsE_24_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_24(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_24_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_25_0 {
  typedef TJP__ZN8_cpumask4bitsE_25_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_25(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_25_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_andnot(cpumask_t *dstp, cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 bitmap_andnot(__get__ZN8_cpumask4bitsE_23(dstp->bits), __get__ZN8_cpumask4bitsE_24(src1p->bits), __get__ZN8_cpumask4bitsE_25(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_26_0 {
  typedef TJP__ZN8_cpumask4bitsE_26_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_26(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_26_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_27_0 {
  typedef TJP__ZN8_cpumask4bitsE_27_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_27(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_27_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_complement(cpumask_t *dstp,
     cpumask_t *srcp, int nbits)
{
 bitmap_complement(__get__ZN8_cpumask4bitsE_26(dstp->bits), __get__ZN8_cpumask4bitsE_27(srcp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_28_0 {
  typedef TJP__ZN8_cpumask4bitsE_28_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_28(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_28_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_29_0 {
  typedef TJP__ZN8_cpumask4bitsE_29_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_29(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_29_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_equal( cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 return bitmap_equal(__get__ZN8_cpumask4bitsE_28(src1p->bits), __get__ZN8_cpumask4bitsE_29(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_30_0 {
  typedef TJP__ZN8_cpumask4bitsE_30_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_30(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_30_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_31_0 {
  typedef TJP__ZN8_cpumask4bitsE_31_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_31(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_31_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_intersects( cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 return bitmap_intersects(__get__ZN8_cpumask4bitsE_30(src1p->bits), __get__ZN8_cpumask4bitsE_31(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_32_0 {
  typedef TJP__ZN8_cpumask4bitsE_32_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_32(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_32_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_33_0 {
  typedef TJP__ZN8_cpumask4bitsE_33_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_33(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_33_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_subset( cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 return bitmap_subset(__get__ZN8_cpumask4bitsE_32(src1p->bits), __get__ZN8_cpumask4bitsE_33(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_34_0 {
  typedef TJP__ZN8_cpumask4bitsE_34_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_34(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_34_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_empty( cpumask_t *srcp, int nbits)
{
 return bitmap_empty(__get__ZN8_cpumask4bitsE_34(srcp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_35_0 {
  typedef TJP__ZN8_cpumask4bitsE_35_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_35(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_35_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_full( cpumask_t *srcp, int nbits)
{
 return bitmap_full(__get__ZN8_cpumask4bitsE_35(srcp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_36_0 {
  typedef TJP__ZN8_cpumask4bitsE_36_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_36(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_36_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_weight( cpumask_t *srcp, int nbits)
{
 return bitmap_weight(__get__ZN8_cpumask4bitsE_36(srcp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_37_0 {
  typedef TJP__ZN8_cpumask4bitsE_37_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_37(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_37_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_38_0 {
  typedef TJP__ZN8_cpumask4bitsE_38_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_38(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_38_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_shift_right(cpumask_t *dstp,
     cpumask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(__get__ZN8_cpumask4bitsE_37(dstp->bits), __get__ZN8_cpumask4bitsE_38(srcp->bits), n, nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_39_0 {
  typedef TJP__ZN8_cpumask4bitsE_39_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_39(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_39_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_40_0 {
  typedef TJP__ZN8_cpumask4bitsE_40_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_40(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_40_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_shift_left(cpumask_t *dstp,
     cpumask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(__get__ZN8_cpumask4bitsE_39(dstp->bits), __get__ZN8_cpumask4bitsE_40(srcp->bits), n, nbits);
}
extern unsigned long
 cpu_bit_bitmap[64 +1][(((64) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];

static inline cpumask_t *get_cpu_mask(unsigned int cpu)
{
 unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ( cpumask_t *)p;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_42_0 {
  typedef TJP__ZN8_cpumask4bitsE_42_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_42(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_42_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpumask_scnprintf(char *buf, int len,
     cpumask_t *srcp, int nbits)
{
 return bitmap_scnprintf(buf, len, __get__ZN8_cpumask4bitsE_42(srcp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_43_0 {
  typedef TJP__ZN8_cpumask4bitsE_43_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_43(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_43_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpumask_parse_user( char *buf, int len,
     cpumask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, __get__ZN8_cpumask4bitsE_43(dstp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_44_0 {
  typedef TJP__ZN8_cpumask4bitsE_44_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_44(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_44_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpulist_scnprintf(char *buf, int len,
     cpumask_t *srcp, int nbits)
{
 return bitmap_scnlistprintf(buf, len, __get__ZN8_cpumask4bitsE_44(srcp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_45_0 {
  typedef TJP__ZN8_cpumask4bitsE_45_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_45(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_45_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpulist_parse( char *buf, cpumask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, __get__ZN8_cpumask4bitsE_45(dstp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_46_0 {
  typedef TJP__ZN8_cpumask4bitsE_46_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_46(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_46_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_47_0 {
  typedef TJP__ZN8_cpumask4bitsE_47_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_47(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_47_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpu_remap(int oldbit,
  cpumask_t *oldp, cpumask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, __get__ZN8_cpumask4bitsE_46(oldp->bits), __get__ZN8_cpumask4bitsE_47(newp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_48_0 {
  typedef TJP__ZN8_cpumask4bitsE_48_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_48(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_48_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_49_0 {
  typedef TJP__ZN8_cpumask4bitsE_49_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_49(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_49_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_50_0 {
  typedef TJP__ZN8_cpumask4bitsE_50_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_50(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_50_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_51_0 {
  typedef TJP__ZN8_cpumask4bitsE_51_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_51(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_51_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_remap(cpumask_t *dstp, cpumask_t *srcp,
  cpumask_t *oldp, cpumask_t *newp, int nbits)
{
 bitmap_remap(__get__ZN8_cpumask4bitsE_48(dstp->bits), __get__ZN8_cpumask4bitsE_49(srcp->bits), __get__ZN8_cpumask4bitsE_50(oldp->bits), __get__ZN8_cpumask4bitsE_51(newp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_52_0 {
  typedef TJP__ZN8_cpumask4bitsE_52_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_52(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_52_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_53_0 {
  typedef TJP__ZN8_cpumask4bitsE_53_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_53(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_53_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_54_0 {
  typedef TJP__ZN8_cpumask4bitsE_54_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_54(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_54_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_onto(cpumask_t *dstp, cpumask_t *origp,
  cpumask_t *relmapp, int nbits)
{
 bitmap_onto(__get__ZN8_cpumask4bitsE_52(dstp->bits), __get__ZN8_cpumask4bitsE_53(origp->bits), __get__ZN8_cpumask4bitsE_54(relmapp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_55_0 {
  typedef TJP__ZN8_cpumask4bitsE_55_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_55(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_55_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_56_0 {
  typedef TJP__ZN8_cpumask4bitsE_56_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_56(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_56_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_fold(cpumask_t *dstp, cpumask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(__get__ZN8_cpumask4bitsE_55(dstp->bits), __get__ZN8_cpumask4bitsE_56(origp->bits), sz, nbits);
}
extern int nr_cpu_ids;
int __first_cpu( cpumask_t *srcp);
int __next_cpu(int n, cpumask_t *srcp);
int __any_online_cpu( cpumask_t *mask);
extern cpumask_t cpu_possible_map;
extern cpumask_t cpu_online_map;
extern cpumask_t cpu_present_map;
extern cpumask_t cpu_active_map;
enum km_type {
 KM_BOUNCE_READ,
 KM_SKB_SUNRPC_DATA,
 KM_SKB_DATA_SOFTIRQ,
 KM_USER0,
 KM_USER1,
 KM_BIO_SRC_IRQ,
 KM_BIO_DST_IRQ,
 KM_PTE0,
 KM_PTE1,
 KM_IRQ0,
 KM_IRQ1,
 KM_SOFTIRQ0,
 KM_SOFTIRQ1,
 KM_TYPE_NR
};


struct page;
struct thread_struct;
struct desc_ptr;
struct tss_struct;
struct mm_struct;
struct desc_struct;


struct pv_info {
  template <typename, int = 0> struct __BYPASSpv_info {};
  template <typename, int> friend struct __BYPASSpv_info;
 unsigned int kernel_rpl;
 int shared_kernel_pmd;
 int paravirt_enabled;
 char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_init_ops {
  template <typename, int = 0> struct __BYPASSpv_init_ops {};
  template <typename, int> friend struct __BYPASSpv_init_ops;
 unsigned (*patch)(u8 type, u16 clobber, void *insnbuf,
     unsigned long addr, unsigned len);


 void (*arch_setup)(void);
 char *(*memory_setup)(void);
 void (*post_allocator_init)(void);


 void (*banner)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct pv_lazy_ops {
  template <typename, int = 0> struct __BYPASSpv_lazy_ops {};
  template <typename, int> friend struct __BYPASSpv_lazy_ops;

 void (*enter)(void);
 void (*leave)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_time_ops {
  template <typename, int = 0> struct __BYPASSpv_time_ops {};
  template <typename, int> friend struct __BYPASSpv_time_ops;
 void (*time_init)(void);


 unsigned long (*get_wallclock)(void);
 int (*set_wallclock)(unsigned long);

 unsigned long long (*sched_clock)(void);
 unsigned long (*get_tsc_khz)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_cpu_ops {
  template <typename, int = 0> struct __BYPASSpv_cpu_ops {};
  template <typename, int> friend struct __BYPASSpv_cpu_ops;

 unsigned long (*get_debugreg)(int regno);
 void (*set_debugreg)(int regno, unsigned long value);

 void (*clts)(void);

 unsigned long (*read_cr0)(void);
 void (*write_cr0)(unsigned long);

 unsigned long (*read_cr4_safe)(void);
 unsigned long (*read_cr4)(void);
 void (*write_cr4)(unsigned long);


 unsigned long (*read_cr8)(void);
 void (*write_cr8)(unsigned long);



 void (*load_tr_desc)(void);
 void (*load_gdt)( struct desc_ptr *);
 void (*load_idt)( struct desc_ptr *);
 void (*store_gdt)(struct desc_ptr *);
 void (*store_idt)(struct desc_ptr *);
 void (*set_ldt)( void *desc, unsigned entries);
 unsigned long (*store_tr)(void);
 void (*load_tls)(struct thread_struct *t, unsigned int cpu);

 void (*load_gs_index)(unsigned int idx);

 void (*write_ldt_entry)(struct desc_struct *ldt, int entrynum,
    void *desc);
 void (*write_gdt_entry)(struct desc_struct *,
    int entrynum, void *desc, int size);
 void (*write_idt_entry)(gate_desc *,
    int entrynum, gate_desc *gate);
 void (*load_sp0)(struct tss_struct *tss, struct thread_struct *t);

 void (*set_iopl_mask)(unsigned mask);

 void (*wbinvd)(void);
 void (*io_delay)(void);


 void (*cpuid)(unsigned int *eax, unsigned int *ebx,
        unsigned int *ecx, unsigned int *edx);



 u64 (*read_msr)(unsigned int msr, int *err);
 int (*write_msr)(unsigned int msr, unsigned low, unsigned high);

 u64 (*read_tsc)(void);
 u64 (*read_pmc)(int counter);
 unsigned long long (*read_tscp)(unsigned int *aux);







 void (*irq_enable_sysexit)(void);







 void (*usergs_sysret64)(void);







 void (*usergs_sysret32)(void);



 void (*iret)(void);

 void (*swapgs)(void);

 struct pv_lazy_ops lazy_mode;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_irq_ops {
  template <typename, int = 0> struct __BYPASSpv_irq_ops {};
  template <typename, int> friend struct __BYPASSpv_irq_ops;
 void (*init_IRQ)(void);







 unsigned long (*save_fl)(void);
 void (*restore_fl)(unsigned long);
 void (*irq_disable)(void);
 void (*irq_enable)(void);
 void (*safe_halt)(void);
 void (*halt)(void);


 void (*adjust_exception_frame)(void);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_apic_ops {
  template <typename, int = 0> struct __BYPASSpv_apic_ops {};
  template <typename, int> friend struct __BYPASSpv_apic_ops;





 void (*apic_write)(unsigned long reg, u32 v);
 u32 (*apic_read)(unsigned long reg);
 void (*setup_boot_clock)(void);
 void (*setup_secondary_clock)(void);

 void (*startup_ipi_hook)(int phys_apicid,
     unsigned long start_eip,
     unsigned long start_esp);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_mmu_ops {
  template <typename, int = 0> struct __BYPASSpv_mmu_ops {};
  template <typename, int> friend struct __BYPASSpv_mmu_ops;






 void (*pagetable_setup_start)(pgd_t *pgd_base);
 void (*pagetable_setup_done)(pgd_t *pgd_base);

 unsigned long (*read_cr2)(void);
 void (*write_cr2)(unsigned long);

 unsigned long (*read_cr3)(void);
 void (*write_cr3)(unsigned long);





 void (*activate_mm)(struct mm_struct *prev,
       struct mm_struct *next);
 void (*dup_mmap)(struct mm_struct *oldmm,
    struct mm_struct *mm);
 void (*exit_mmap)(struct mm_struct *mm);



 void (*flush_tlb_user)(void);
 void (*flush_tlb_kernel)(void);
 void (*flush_tlb_single)(unsigned long addr);
 void (*flush_tlb_others)( cpumask_t *cpus, struct mm_struct *mm,
     unsigned long va);


 int (*pgd_alloc)(struct mm_struct *mm);
 void (*pgd_free)(struct mm_struct *mm, pgd_t *pgd);





 void (*alloc_pte)(struct mm_struct *mm, u32 pfn);
 void (*alloc_pmd)(struct mm_struct *mm, u32 pfn);
 void (*alloc_pmd_clone)(u32 pfn, u32 clonepfn, u32 start, u32 count);
 void (*alloc_pud)(struct mm_struct *mm, u32 pfn);
 void (*release_pte)(u32 pfn);
 void (*release_pmd)(u32 pfn);
 void (*release_pud)(u32 pfn);


 void (*set_pte)(pte_t *ptep, pte_t pteval);
 void (*set_pte_at)(struct mm_struct *mm, unsigned long addr,
      pte_t *ptep, pte_t pteval);
 void (*set_pmd)(pmd_t *pmdp, pmd_t pmdval);
 void (*pte_update)(struct mm_struct *mm, unsigned long addr,
      pte_t *ptep);
 void (*pte_update_defer)(struct mm_struct *mm,
     unsigned long addr, pte_t *ptep);

 pte_t (*ptep_modify_prot_start)(struct mm_struct *mm, unsigned long addr,
     pte_t *ptep);
 void (*ptep_modify_prot_commit)(struct mm_struct *mm, unsigned long addr,
     pte_t *ptep, pte_t pte);

 pteval_t (*pte_val)(pte_t);
 pteval_t (*pte_flags)(pte_t);
 pte_t (*make_pte)(pteval_t pte);

 pgdval_t (*pgd_val)(pgd_t);
 pgd_t (*make_pgd)(pgdval_t pgd);
 void (*set_pud)(pud_t *pudp, pud_t pudval);

 pmdval_t (*pmd_val)(pmd_t);
 pmd_t (*make_pmd)(pmdval_t pmd);


 pudval_t (*pud_val)(pud_t);
 pud_t (*make_pud)(pudval_t pud);

 void (*set_pgd)(pgd_t *pudp, pgd_t pgdval);







 struct pv_lazy_ops lazy_mode;





 void (*set_fixmap)(unsigned idx,
      unsigned long phys, pgprot_t flags);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct raw_spinlock;
struct pv_lock_ops {
  template <typename, int = 0> struct __BYPASSpv_lock_ops {};
  template <typename, int> friend struct __BYPASSpv_lock_ops;
 int (*spin_is_locked)(struct raw_spinlock *lock);
 int (*spin_is_contended)(struct raw_spinlock *lock);
 void (*spin_lock)(struct raw_spinlock *lock);
 int (*spin_trylock)(struct raw_spinlock *lock);
 void (*spin_unlock)(struct raw_spinlock *lock);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct paravirt_patch_template {
  template <typename, int = 0> struct __BYPASSparavirt_patch_template {};
  template <typename, int> friend struct __BYPASSparavirt_patch_template;
 struct pv_init_ops pv_init_ops;
 struct pv_time_ops pv_time_ops;
 struct pv_cpu_ops pv_cpu_ops;
 struct pv_irq_ops pv_irq_ops;
 struct pv_apic_ops pv_apic_ops;
 struct pv_mmu_ops pv_mmu_ops;
 struct pv_lock_ops pv_lock_ops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct pv_info pv_info;
extern struct pv_init_ops pv_init_ops;
extern struct pv_time_ops pv_time_ops;
extern struct pv_cpu_ops pv_cpu_ops;
extern struct pv_irq_ops pv_irq_ops;
extern struct pv_apic_ops pv_apic_ops;
extern struct pv_mmu_ops pv_mmu_ops;
extern struct pv_lock_ops pv_lock_ops;
unsigned paravirt_patch_nop(void);
unsigned paravirt_patch_ignore(unsigned len);
unsigned paravirt_patch_call(void *insnbuf,
        void *target, u16 tgt_clobbers,
        unsigned long addr, u16 site_clobbers,
        unsigned len);
unsigned paravirt_patch_jmp(void *insnbuf, void *target,
       unsigned long addr, unsigned len);
unsigned paravirt_patch_default(u8 type, u16 clobbers, void *insnbuf,
    unsigned long addr, unsigned len);

unsigned paravirt_patch_insns(void *insnbuf, unsigned len,
         char *start, char *end);

unsigned native_patch(u8 type, u16 clobbers, void *ibuf,
        unsigned long addr, unsigned len);

int paravirt_disable_iospace(void);
static inline int paravirt_enabled(void)
{
 return pv_info.paravirt_enabled;
}

static inline void load_sp0(struct tss_struct *tss,
        struct thread_struct *thread)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.load_sp0); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.load_sp0) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.load_sp0), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(tss)), "1" ((unsigned long)(thread)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline unsigned long get_wallclock(void)
{
 return ({ unsigned long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_time_ops.get_wallclock); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_time_ops.get_wallclock) / sizeof(void *))), [paravirt_opptr] "m" (pv_time_ops.get_wallclock), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_time_ops.get_wallclock) / sizeof(void *))), [paravirt_opptr] "m" (pv_time_ops.get_wallclock), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)__eax; } __ret; });
}

static inline int set_wallclock(unsigned long nowtime)
{
 return ({ int __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_time_ops.set_wallclock); if (sizeof(int) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_time_ops.set_wallclock) / sizeof(void *))), [paravirt_opptr] "m" (pv_time_ops.set_wallclock), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(nowtime)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_time_ops.set_wallclock) / sizeof(void *))), [paravirt_opptr] "m" (pv_time_ops.set_wallclock), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(nowtime)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)__eax; } __ret; });
}

static inline void (*choose_time_init(void))(void)
{
 return pv_time_ops.time_init;
}


static inline void __cpuid(unsigned int *eax, unsigned int *ebx,
      unsigned int *ecx, unsigned int *edx)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.cpuid); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.cpuid) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.cpuid), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(eax)), "1"((unsigned long)(ebx)), "2"((unsigned long)(ecx)), "3"((unsigned long)(edx)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}




static inline unsigned long paravirt_get_debugreg(int reg)
{
 return ({ unsigned long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.get_debugreg); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.get_debugreg) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.get_debugreg), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(reg)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.get_debugreg) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.get_debugreg), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(reg)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)__eax; } __ret; });
}

static inline void set_debugreg(unsigned long val, int reg)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.set_debugreg); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.set_debugreg) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.set_debugreg), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(reg)), "1" ((unsigned long)(val)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void clts(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.clts); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.clts) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.clts), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline unsigned long read_cr0(void)
{
 return ({ unsigned long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.read_cr0); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_cr0) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_cr0), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_cr0) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_cr0), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)__eax; } __ret; });
}

static inline void write_cr0(unsigned long x)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.write_cr0); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.write_cr0) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.write_cr0), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(x)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline unsigned long read_cr2(void)
{
 return ({ unsigned long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.read_cr2); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.read_cr2) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.read_cr2), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.read_cr2) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.read_cr2), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)__eax; } __ret; });
}

static inline void write_cr2(unsigned long x)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.write_cr2); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.write_cr2) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.write_cr2), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(x)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline unsigned long read_cr3(void)
{
 return ({ unsigned long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.read_cr3); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.read_cr3) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.read_cr3), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.read_cr3) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.read_cr3), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)__eax; } __ret; });
}

static inline void write_cr3(unsigned long x)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.write_cr3); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.write_cr3) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.write_cr3), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(x)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline unsigned long read_cr4(void)
{
 return ({ unsigned long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.read_cr4); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_cr4) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_cr4), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_cr4) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_cr4), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)__eax; } __ret; });
}
static inline unsigned long read_cr4_safe(void)
{
 return ({ unsigned long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.read_cr4_safe); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_cr4_safe) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_cr4_safe), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_cr4_safe) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_cr4_safe), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)__eax; } __ret; });
}

static inline void write_cr4(unsigned long x)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.write_cr4); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.write_cr4) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.write_cr4), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(x)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline unsigned long read_cr8(void)
{
 return ({ unsigned long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.read_cr8); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_cr8) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_cr8), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_cr8) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_cr8), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)__eax; } __ret; });
}

static inline void write_cr8(unsigned long x)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.write_cr8); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.write_cr8) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.write_cr8), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(x)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline void raw_safe_halt(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_irq_ops.safe_halt); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_irq_ops.safe_halt) / sizeof(void *))), [paravirt_opptr] "m" (pv_irq_ops.safe_halt), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void halt(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_irq_ops.safe_halt); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_irq_ops.safe_halt) / sizeof(void *))), [paravirt_opptr] "m" (pv_irq_ops.safe_halt), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void wbinvd(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.wbinvd); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.wbinvd) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.wbinvd), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}



static inline u64 paravirt_read_msr(unsigned msr, int *err)
{
 return ({ u64 __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.read_msr); if (sizeof(u64) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_msr) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_msr), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(msr)), "1" ((unsigned long)(err)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_msr) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_msr), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(msr)), "1" ((unsigned long)(err)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)__eax; } __ret; });
}
static inline int paravirt_write_msr(unsigned msr, unsigned low, unsigned high)
{
 return ({ int __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.write_msr); if (sizeof(int) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.write_msr) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.write_msr), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(msr)), "1"((unsigned long)(low)), "2"((unsigned long)(high)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.write_msr) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.write_msr), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(msr)), "1"((unsigned long)(low)), "2"((unsigned long)(high)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)__eax; } __ret; });
}
static inline int rdmsrl_safe(unsigned msr, unsigned long long *p)
{
 int err;

 *p = paravirt_read_msr(msr, &err);
 return err;
}

static inline u64 paravirt_read_tsc(void)
{
 return ({ u64 __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.read_tsc); if (sizeof(u64) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_tsc) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_tsc), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_tsc) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_tsc), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)__eax; } __ret; });
}
static inline unsigned long long paravirt_sched_clock(void)
{
 return ({ unsigned long long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_time_ops.sched_clock); if (sizeof(unsigned long long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_time_ops.sched_clock) / sizeof(void *))), [paravirt_opptr] "m" (pv_time_ops.sched_clock), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_time_ops.sched_clock) / sizeof(void *))), [paravirt_opptr] "m" (pv_time_ops.sched_clock), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long long)__eax; } __ret; });
}


static inline unsigned long long paravirt_read_pmc(int counter)
{
 return ({ u64 __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.read_pmc); if (sizeof(u64) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_pmc) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_pmc), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(counter)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_pmc) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_pmc), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(counter)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)__eax; } __ret; });
}
static inline unsigned long long paravirt_rdtscp(unsigned int *aux)
{
 return ({ u64 __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.read_tscp); if (sizeof(u64) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_tscp) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_tscp), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(aux)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.read_tscp) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.read_tscp), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(aux)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (u64)__eax; } __ret; });
}
static inline void load_TR_desc(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.load_tr_desc); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.load_tr_desc) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.load_tr_desc), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void load_gdt( struct desc_ptr *dtr)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.load_gdt); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.load_gdt) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.load_gdt), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(dtr)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void load_idt( struct desc_ptr *dtr)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.load_idt); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.load_idt) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.load_idt), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(dtr)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void set_ldt( void *addr, unsigned entries)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.set_ldt); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.set_ldt) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.set_ldt), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(addr)), "1" ((unsigned long)(entries)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void store_gdt(struct desc_ptr *dtr)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.store_gdt); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.store_gdt) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.store_gdt), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(dtr)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void store_idt(struct desc_ptr *dtr)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.store_idt); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.store_idt) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.store_idt), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(dtr)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline unsigned long paravirt_store_tr(void)
{
 return ({ unsigned long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_cpu_ops.store_tr); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.store_tr) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.store_tr), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.store_tr) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.store_tr), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)__eax; } __ret; });
}

static inline void load_TLS(struct thread_struct *t, unsigned cpu)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.load_tls); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.load_tls) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.load_tls), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(t)), "1" ((unsigned long)(cpu)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline void load_gs_index(unsigned int gs)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.load_gs_index); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.load_gs_index) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.load_gs_index), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(gs)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline void write_ldt_entry(struct desc_struct *dt, int entry,
       void *desc)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.write_ldt_entry); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.write_ldt_entry) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.write_ldt_entry), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(dt)), "1"((unsigned long)(entry)), "2"((unsigned long)(desc)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void write_gdt_entry(struct desc_struct *dt, int entry,
       void *desc, int type)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.write_gdt_entry); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.write_gdt_entry) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.write_gdt_entry), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(dt)), "1"((unsigned long)(entry)), "2"((unsigned long)(desc)), "3"((unsigned long)(type)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void write_idt_entry(gate_desc *dt, int entry, gate_desc *g)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.write_idt_entry); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.write_idt_entry) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.write_idt_entry), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(dt)), "1"((unsigned long)(entry)), "2"((unsigned long)(g)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void set_iopl_mask(unsigned mask)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.set_iopl_mask); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.set_iopl_mask) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.set_iopl_mask), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mask)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline void slow_down_io(void)
{
 pv_cpu_ops.io_delay();





}





static inline void apic_write(unsigned long reg, u32 v)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_apic_ops.apic_write); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_apic_ops.apic_write) / sizeof(void *))), [paravirt_opptr] "m" (pv_apic_ops.apic_write), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(reg)), "1" ((unsigned long)(v)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline u32 apic_read(unsigned long reg)
{
 return ({ unsigned long __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_apic_ops.apic_read); if (sizeof(unsigned long) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_apic_ops.apic_read) / sizeof(void *))), [paravirt_opptr] "m" (pv_apic_ops.apic_read), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(reg)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_apic_ops.apic_read) / sizeof(void *))), [paravirt_opptr] "m" (pv_apic_ops.apic_read), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(reg)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (unsigned long)__eax; } __ret; });
}

static inline void setup_boot_clock(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_apic_ops.setup_boot_clock); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_apic_ops.setup_boot_clock) / sizeof(void *))), [paravirt_opptr] "m" (pv_apic_ops.setup_boot_clock), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void setup_secondary_clock(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_apic_ops.setup_secondary_clock); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_apic_ops.setup_secondary_clock) / sizeof(void *))), [paravirt_opptr] "m" (pv_apic_ops.setup_secondary_clock), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline void paravirt_post_allocator_init(void)
{
 if (pv_init_ops.post_allocator_init)
  (*pv_init_ops.post_allocator_init)();
}

static inline void paravirt_pagetable_setup_start(pgd_t *base)
{
 (*pv_mmu_ops.pagetable_setup_start)(base);
}

static inline void paravirt_pagetable_setup_done(pgd_t *base)
{
 (*pv_mmu_ops.pagetable_setup_done)(base);
}


static inline void startup_ipi_hook(int phys_apicid, unsigned long start_eip,
        unsigned long start_esp)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_apic_ops.startup_ipi_hook); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_apic_ops.startup_ipi_hook) / sizeof(void *))), [paravirt_opptr] "m" (pv_apic_ops.startup_ipi_hook), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(phys_apicid)), "1"((unsigned long)(start_eip)), "2"((unsigned long)(start_esp)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); })
                                        ;
}


static inline void paravirt_activate_mm(struct mm_struct *prev,
     struct mm_struct *next)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.activate_mm); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.activate_mm) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.activate_mm), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(prev)), "1" ((unsigned long)(next)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void arch_dup_mmap(struct mm_struct *oldmm,
     struct mm_struct *mm)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.dup_mmap); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.dup_mmap) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.dup_mmap), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(oldmm)), "1" ((unsigned long)(mm)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void arch_exit_mmap(struct mm_struct *mm)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.exit_mmap); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.exit_mmap) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.exit_mmap), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void __flush_tlb(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.flush_tlb_user); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.flush_tlb_user) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.flush_tlb_user), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void __flush_tlb_global(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.flush_tlb_kernel); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.flush_tlb_kernel) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.flush_tlb_kernel), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void __flush_tlb_single(unsigned long addr)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.flush_tlb_single); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.flush_tlb_single) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.flush_tlb_single), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(addr)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void flush_tlb_others(cpumask_t cpumask, struct mm_struct *mm,
        unsigned long va)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.flush_tlb_others); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.flush_tlb_others) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.flush_tlb_others), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(&cpumask)), "1"((unsigned long)(mm)), "2"((unsigned long)(va)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline int paravirt_pgd_alloc(struct mm_struct *mm)
{
 return ({ int __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pgd_alloc); if (sizeof(int) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pgd_alloc) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pgd_alloc), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pgd_alloc) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pgd_alloc), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)__eax; } __ret; });
}

static inline void paravirt_pgd_free(struct mm_struct *mm, pgd_t *pgd)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.pgd_free); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pgd_free) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pgd_free), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)), "1" ((unsigned long)(pgd)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void paravirt_alloc_pte(struct mm_struct *mm, unsigned pfn)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.alloc_pte); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.alloc_pte) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.alloc_pte), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)), "1" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void paravirt_release_pte(unsigned pfn)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.release_pte); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.release_pte) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.release_pte), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void paravirt_alloc_pmd(struct mm_struct *mm, unsigned pfn)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.alloc_pmd); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.alloc_pmd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.alloc_pmd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)), "1" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void paravirt_alloc_pmd_clone(unsigned pfn, unsigned clonepfn,
         unsigned start, unsigned count)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.alloc_pmd_clone); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.alloc_pmd_clone) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.alloc_pmd_clone), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pfn)), "1"((unsigned long)(clonepfn)), "2"((unsigned long)(start)), "3"((unsigned long)(count)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void paravirt_release_pmd(unsigned pfn)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.release_pmd); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.release_pmd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.release_pmd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void paravirt_alloc_pud(struct mm_struct *mm, unsigned pfn)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.alloc_pud); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.alloc_pud) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.alloc_pud), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)), "1" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void paravirt_release_pud(unsigned pfn)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.release_pud); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.release_pud) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.release_pud), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pfn)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}
static inline void pte_update(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.pte_update); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pte_update) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pte_update), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)), "1"((unsigned long)(addr)), "2"((unsigned long)(ptep)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void pte_update_defer(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.pte_update_defer); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pte_update_defer) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pte_update_defer), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)), "1"((unsigned long)(addr)), "2"((unsigned long)(ptep)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline pte_t __pte(pteval_t val)
{
 pteval_t ret;

 if (sizeof(pteval_t) > sizeof(long))
  ret = ({ pteval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.make_pte); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pte) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pte), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)), "1" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pte) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pte), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)), "1" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)__eax; } __ret; })

                         ;
 else
  ret = ({ pteval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.make_pte); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pte) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pte), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pte) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pte), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)__eax; } __ret; })

         ;


        return native_make_pte(ret);
}

static inline pteval_t pte_val(pte_t pte)
{
 pteval_t ret;

 if (sizeof(pteval_t) > sizeof(long))
  ret = ({ pteval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pte_val); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pte_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pte_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pte.pte)), "1" ((unsigned long)((u64)pte.pte >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pte_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pte_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pte.pte)), "1" ((unsigned long)((u64)pte.pte >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)__eax; } __ret; })
                                 ;
 else
  ret = ({ pteval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pte_val); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pte_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pte_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pte.pte)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pte_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pte_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pte.pte)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)__eax; } __ret; })
             ;

 return ret;
}

static inline pteval_t pte_flags(pte_t pte)
{
 pteval_t ret;

 if (sizeof(pteval_t) > sizeof(long))
  ret = ({ pteval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pte_flags); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pte_flags) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pte_flags), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pte.pte)), "1" ((unsigned long)((u64)pte.pte >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pte_flags) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pte_flags), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pte.pte)), "1" ((unsigned long)((u64)pte.pte >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)__eax; } __ret; })
                                 ;
 else
  ret = ({ pteval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pte_flags); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pte_flags) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pte_flags), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pte.pte)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pte_flags) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pte_flags), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pte.pte)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)__eax; } __ret; })
             ;




 return ret;
}

static inline pgd_t __pgd(pgdval_t val)
{
 pgdval_t ret;

 if (sizeof(pgdval_t) > sizeof(long))
  ret = ({ pgdval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.make_pgd); if (sizeof(pgdval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pgd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pgd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)), "1" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pgdval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pgd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pgd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)), "1" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pgdval_t)__eax; } __ret; })
                         ;
 else
  ret = ({ pgdval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.make_pgd); if (sizeof(pgdval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pgd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pgd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pgdval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pgd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pgd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pgdval_t)__eax; } __ret; })
         ;

 return (pgd_t) { ret };
}

static inline pgdval_t pgd_val(pgd_t pgd)
{
 pgdval_t ret;

 if (sizeof(pgdval_t) > sizeof(long))
  ret = ({ pgdval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pgd_val); if (sizeof(pgdval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pgd_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pgd_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pgd.pgd)), "1" ((unsigned long)((u64)pgd.pgd >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pgdval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pgd_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pgd_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pgd.pgd)), "1" ((unsigned long)((u64)pgd.pgd >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pgdval_t)__eax; } __ret; })
                                  ;
 else
  ret = ({ pgdval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pgd_val); if (sizeof(pgdval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pgd_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pgd_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pgd.pgd)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pgdval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pgd_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pgd_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pgd.pgd)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pgdval_t)__eax; } __ret; })
              ;

 return ret;
}


static inline pte_t ptep_modify_prot_start(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 pteval_t ret;

 ret = ({ pteval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.ptep_modify_prot_start); if (sizeof(pteval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.ptep_modify_prot_start) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.ptep_modify_prot_start), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)), "1"((unsigned long)(addr)), "2"((unsigned long)(ptep)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.ptep_modify_prot_start) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.ptep_modify_prot_start), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)), "1"((unsigned long)(addr)), "2"((unsigned long)(ptep)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pteval_t)__eax; } __ret; })
                   ;


        return native_make_pte(ret);
}

static inline void ptep_modify_prot_commit(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep, pte_t pte)
{
 if (sizeof(pteval_t) > sizeof(long))

  pv_mmu_ops.ptep_modify_prot_commit(mm, addr, ptep, pte);
 else
  ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.ptep_modify_prot_commit); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.ptep_modify_prot_commit) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.ptep_modify_prot_commit), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)), "1"((unsigned long)(addr)), "2"((unsigned long)(ptep)), "3"((unsigned long)(pte.pte)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); })
                               ;
}

static inline void set_pte(pte_t *ptep, pte_t pte)
{
 if (sizeof(pteval_t) > sizeof(long))
  ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.set_pte); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.set_pte) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.set_pte), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(ptep)), "1"((unsigned long)(pte.pte)), "2"((unsigned long)((u64)pte.pte >> 32)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); })
                                   ;
 else
  ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.set_pte); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.set_pte) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.set_pte), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(ptep)), "1" ((unsigned long)(pte.pte)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); })
               ;
}

static inline void set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep, pte_t pte)
{
 if (sizeof(pteval_t) > sizeof(long))

  pv_mmu_ops.set_pte_at(mm, addr, ptep, pte);
 else
  ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.set_pte_at); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.set_pte_at) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.set_pte_at), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(mm)), "1"((unsigned long)(addr)), "2"((unsigned long)(ptep)), "3"((unsigned long)(pte.pte)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void set_pmd(pmd_t *pmdp, pmd_t pmd)
{
 pmdval_t val = native_pmd_val(pmd);

 if (sizeof(pmdval_t) > sizeof(long))
  ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.set_pmd); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.set_pmd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.set_pmd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pmdp)), "1"((unsigned long)(val)), "2"((unsigned long)((u64)val >> 32)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
 else
  ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.set_pmd); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.set_pmd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.set_pmd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pmdp)), "1" ((unsigned long)(val)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}


static inline pmd_t __pmd(pmdval_t val)
{
 pmdval_t ret;

 if (sizeof(pmdval_t) > sizeof(long))
  ret = ({ pmdval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.make_pmd); if (sizeof(pmdval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pmd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pmd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)), "1" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pmdval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pmd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pmd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)), "1" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pmdval_t)__eax; } __ret; })
                         ;
 else
  ret = ({ pmdval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.make_pmd); if (sizeof(pmdval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pmd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pmd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pmdval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pmd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pmd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pmdval_t)__eax; } __ret; })
         ;

 return (pmd_t) { ret };
}

static inline pmdval_t pmd_val(pmd_t pmd)
{
 pmdval_t ret;

 if (sizeof(pmdval_t) > sizeof(long))
  ret = ({ pmdval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pmd_val); if (sizeof(pmdval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pmd_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pmd_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pmd.pmd)), "1" ((unsigned long)((u64)pmd.pmd >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pmdval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pmd_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pmd_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pmd.pmd)), "1" ((unsigned long)((u64)pmd.pmd >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pmdval_t)__eax; } __ret; })
                                  ;
 else
  ret = ({ pmdval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pmd_val); if (sizeof(pmdval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pmd_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pmd_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pmd.pmd)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pmdval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pmd_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pmd_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pmd.pmd)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pmdval_t)__eax; } __ret; })
              ;

 return ret;
}

static inline void set_pud(pud_t *pudp, pud_t pud)
{
 pudval_t val = native_pud_val(pud);

 if (sizeof(pudval_t) > sizeof(long))
  ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.set_pud); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.set_pud) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.set_pud), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pudp)), "1"((unsigned long)(val)), "2"((unsigned long)((u64)val >> 32)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); })
                           ;
 else
  ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.set_pud); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.set_pud) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.set_pud), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pudp)), "1" ((unsigned long)(val)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); })
           ;
}

static inline pud_t __pud(pudval_t val)
{
 pudval_t ret;

 if (sizeof(pudval_t) > sizeof(long))
  ret = ({ pudval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.make_pud); if (sizeof(pudval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pud) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pud), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)), "1" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pudval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pud) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pud), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)), "1" ((unsigned long)((u64)val >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pudval_t)__eax; } __ret; })
                         ;
 else
  ret = ({ pudval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.make_pud); if (sizeof(pudval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pud) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pud), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pudval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.make_pud) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.make_pud), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(val)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pudval_t)__eax; } __ret; })
         ;

 return (pud_t) { ret };
}

static inline pudval_t pud_val(pud_t pud)
{
 pudval_t ret;

 if (sizeof(pudval_t) > sizeof(long))
  ret = ({ pudval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pud_val); if (sizeof(pudval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pud_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pud_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pud.pud)), "1" ((unsigned long)((u64)pud.pud >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pudval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pud_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pud_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pud.pud)), "1" ((unsigned long)((u64)pud.pud >> 32)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pudval_t)__eax; } __ret; })
                                  ;
 else
  ret = ({ pudval_t __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_mmu_ops.pud_val); if (sizeof(pudval_t) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pud_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pud_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pud.pud)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pudval_t)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.pud_val) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.pud_val), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pud.pud)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (pudval_t)__eax; } __ret; })
              ;

 return ret;
}

static inline void set_pgd(pgd_t *pgdp, pgd_t pgd)
{
 pgdval_t val = native_pgd_val(pgd);

 if (sizeof(pgdval_t) > sizeof(long))
  ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.set_pgd); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.set_pgd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.set_pgd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pgdp)), "1"((unsigned long)(val)), "2"((unsigned long)((u64)val >> 32)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); })
                           ;
 else
  ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.set_pgd); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.set_pgd) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.set_pgd), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(pgdp)), "1" ((unsigned long)(val)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); })
           ;
}

static inline void pgd_clear(pgd_t *pgdp)
{
 set_pgd(pgdp, __pgd(0));
}

static inline void pud_clear(pud_t *pudp)
{
 set_pud(pudp, __pud(0));
}
static inline void set_pte_atomic(pte_t *ptep, pte_t pte)
{
 set_pte(ptep, pte);
}

static inline void set_pte_present(struct mm_struct *mm, unsigned long addr,
       pte_t *ptep, pte_t pte)
{
 set_pte(ptep, pte);
}

static inline void pte_clear(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 set_pte_at(mm, addr, ptep, __pte(0));
}

static inline void pmd_clear(pmd_t *pmdp)
{
 set_pmd(pmdp, __pmd(0));
}



enum paravirt_lazy_mode {
 PARAVIRT_LAZY_NONE,
 PARAVIRT_LAZY_MMU,
 PARAVIRT_LAZY_CPU,
};

enum paravirt_lazy_mode paravirt_get_lazy_mode(void);
void paravirt_enter_lazy_cpu(void);
void paravirt_leave_lazy_cpu(void);
void paravirt_enter_lazy_mmu(void);
void paravirt_leave_lazy_mmu(void);
void paravirt_leave_lazy(enum paravirt_lazy_mode mode);


static inline void arch_enter_lazy_cpu_mode(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.lazy_mode.enter); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.lazy_mode.enter) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.lazy_mode.enter), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void arch_leave_lazy_cpu_mode(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_cpu_ops.lazy_mode.leave); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_cpu_ops.lazy_mode.leave) / sizeof(void *))), [paravirt_opptr] "m" (pv_cpu_ops.lazy_mode.leave), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void arch_flush_lazy_cpu_mode(void)
{
 if (__builtin_expect(!!(paravirt_get_lazy_mode() == PARAVIRT_LAZY_CPU), 0)) {
  arch_leave_lazy_cpu_mode();
  arch_enter_lazy_cpu_mode();
 }
}



static inline void arch_enter_lazy_mmu_mode(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.lazy_mode.enter); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.lazy_mode.enter) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.lazy_mode.enter), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void arch_leave_lazy_mmu_mode(void)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_mmu_ops.lazy_mode.leave); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_mmu_ops.lazy_mode.leave) / sizeof(void *))), [paravirt_opptr] "m" (pv_mmu_ops.lazy_mode.leave), [paravirt_clobber] "i" (((1 << 9) - 1)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline void arch_flush_lazy_mmu_mode(void)
{
 if (__builtin_expect(!!(paravirt_get_lazy_mode() == PARAVIRT_LAZY_MMU), 0)) {
  arch_leave_lazy_mmu_mode();
  arch_enter_lazy_mmu_mode();
 }
}

static inline void __set_fixmap(unsigned idx,
    unsigned long phys, pgprot_t flags)
{
 pv_mmu_ops.set_fixmap(idx, phys, flags);
}

void _paravirt_nop(void);


void paravirt_use_bytelocks(void);



static inline int __raw_spin_is_locked(struct raw_spinlock *lock)
{
 return ({ int __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_lock_ops.spin_is_locked); if (sizeof(int) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_lock_ops.spin_is_locked) / sizeof(void *))), [paravirt_opptr] "m" (pv_lock_ops.spin_is_locked), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(lock)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_lock_ops.spin_is_locked) / sizeof(void *))), [paravirt_opptr] "m" (pv_lock_ops.spin_is_locked), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(lock)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)__eax; } __ret; });
}

static inline int __raw_spin_is_contended(struct raw_spinlock *lock)
{
 return ({ int __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_lock_ops.spin_is_contended); if (sizeof(int) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_lock_ops.spin_is_contended) / sizeof(void *))), [paravirt_opptr] "m" (pv_lock_ops.spin_is_contended), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(lock)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_lock_ops.spin_is_contended) / sizeof(void *))), [paravirt_opptr] "m" (pv_lock_ops.spin_is_contended), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(lock)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)__eax; } __ret; });
}

static inline __attribute__((always_inline)) void __raw_spin_lock(struct raw_spinlock *lock)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_lock_ops.spin_lock); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_lock_ops.spin_lock) / sizeof(void *))), [paravirt_opptr] "m" (pv_lock_ops.spin_lock), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(lock)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}

static inline __attribute__((always_inline)) int __raw_spin_trylock(struct raw_spinlock *lock)
{
 return ({ int __ret; unsigned long __edi, __esi, __edx, __ecx, __eax; ((void)pv_lock_ops.spin_trylock); if (sizeof(int) > sizeof(unsigned long)) { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_lock_ops.spin_trylock) / sizeof(void *))), [paravirt_opptr] "m" (pv_lock_ops.spin_trylock), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(lock)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)((((u64)__edx) << 32) | __eax); } else { asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx), "=a" (__eax) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_lock_ops.spin_trylock) / sizeof(void *))), [paravirt_opptr] "m" (pv_lock_ops.spin_trylock), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(lock)) : "memory", "cc" , "r8", "r9", "r10", "r11"); __ret = (int)__eax; } __ret; });
}

static inline __attribute__((always_inline)) void __raw_spin_unlock(struct raw_spinlock *lock)
{
 ({ unsigned long __edi, __esi, __edx, __ecx; ((void)pv_lock_ops.spin_unlock); asm ("" "771:\n\t" "call *%[paravirt_opptr];" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n" "" : "=D" (__edi), "=S" (__esi), "=d" (__edx), "=c" (__ecx) : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_lock_ops.spin_unlock) / sizeof(void *))), [paravirt_opptr] "m" (pv_lock_ops.spin_unlock), [paravirt_clobber] "i" (((1 << 9) - 1)), "0" ((unsigned long)(lock)) : "memory", "cc" , "rax", "r8", "r9", "r10", "r11"); });
}




struct paravirt_patch_site {
  template <typename, int = 0> struct __BYPASSparavirt_patch_site {};
  template <typename, int> friend struct __BYPASSparavirt_patch_site;
 u8 *instr;
 u8 instrtype;
 u8 len;
 u16 clobbers;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct paravirt_patch_site __parainstructions[],
 __parainstructions_end[];
static inline unsigned long __raw_local_save_flags(void)
{
 unsigned long f;

 asm ("771:\n\t" "pushq %%rdi;" "call *%[paravirt_opptr];" "popq %%rdi;" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n"


       : "=a"(f)
       : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_irq_ops.save_fl) / sizeof(void *))), [paravirt_opptr] "m" (pv_irq_ops.save_fl),
         [paravirt_clobber] "i" ((1 << 0))
       : "memory", "cc" , "r8", "r9", "r10", "r11", "rdi", "rcx" , "rdx", "rsi");
 return f;
}

static inline void raw_local_irq_restore(unsigned long f)
{
 asm ("771:\n\t" "pushq %%rdi;" "call *%[paravirt_opptr];" "popq %%rdi;" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n"


       : "=a"(f)
       : "D"(f),
         [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_irq_ops.restore_fl) / sizeof(void *))), [paravirt_opptr] "m" (pv_irq_ops.restore_fl),
         [paravirt_clobber] "i" ((1 << 0))
       : "memory", "cc" , "r8", "r9", "r10", "r11", "rcx" , "rdx", "rsi");
}

static inline void raw_local_irq_disable(void)
{
 asm ("771:\n\t" "pushq %%rdi;" "call *%[paravirt_opptr];" "popq %%rdi;" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n"


       :
       : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_irq_ops.irq_disable) / sizeof(void *))), [paravirt_opptr] "m" (pv_irq_ops.irq_disable),
         [paravirt_clobber] "i" ((1 << 0))
       : "memory", "eax", "cc" , "r8", "r9", "r10", "r11", "rcx" , "rdx", "rsi");
}

static inline void raw_local_irq_enable(void)
{
 asm ("771:\n\t" "pushq %%rdi;" "call *%[paravirt_opptr];" "popq %%rdi;" "\n" "772:\n" ".pushsection .parainstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " " 771b\n" "  .byte " "%c[paravirt_typenum]" "\n" "  .byte 772b-771b\n" "  .short " "%c[paravirt_clobber]" "\n" ".popsection\n"


       :
       : [paravirt_typenum] "i" ((((size_t) &((struct paravirt_patch_template *)0)->pv_irq_ops.irq_enable) / sizeof(void *))), [paravirt_opptr] "m" (pv_irq_ops.irq_enable),
         [paravirt_clobber] "i" ((1 << 0))
       : "memory", "eax", "cc" , "r8", "r9", "r10", "r11", "rcx" , "rdx", "rsi");
}

static inline unsigned long __raw_local_irq_save(void)
{
 unsigned long f;

 f = __raw_local_save_flags();
 raw_local_irq_disable();
 return f;
}
static __inline__ __attribute__((__const__)) int get_order(unsigned long size)
{
 int order;

 size = (size - 1) >> (12 - 1);
 order = -1;
 do {
  size >>= 1;
  order++;
 } while (size);
 return order;
}
struct task_struct;
struct exec_domain;





struct task_struct;
struct mm_struct;

struct vm86_regs {
  template <typename, int = 0> struct __BYPASSvm86_regs {};
  template <typename, int> friend struct __BYPASSvm86_regs;



 long ebx;
 long ecx;
 long edx;
 long esi;
 long edi;
 long ebp;
 long eax;
 long __null_ds;
 long __null_es;
 long __null_fs;
 long __null_gs;
 long orig_eax;
 long eip;
 unsigned short cs, __csh;
 long eflags;
 long esp;
 unsigned short ss, __ssh;



 unsigned short es, __esh;
 unsigned short ds, __dsh;
 unsigned short fs, __fsh;
 unsigned short gs, __gsh;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct revectored_struct {
  template <typename, int = 0> struct __BYPASSrevectored_struct {};
  template <typename, int> friend struct __BYPASSrevectored_struct;
 unsigned long __map[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct vm86_struct {
  template <typename, int = 0> struct __BYPASSvm86_struct {};
  template <typename, int> friend struct __BYPASSvm86_struct;
 struct vm86_regs regs;
 unsigned long flags;
 unsigned long screen_bitmap;
 unsigned long cpu_type;
 struct revectored_struct int_revectored;
 struct revectored_struct int21_revectored;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct vm86plus_info_struct {
  template <typename, int = 0> struct __BYPASSvm86plus_info_struct {};
  template <typename, int> friend struct __BYPASSvm86plus_info_struct;
 unsigned long force_return_for_pic:1;
 unsigned long vm86dbg_active:1;
 unsigned long vm86dbg_TFpendig:1;
 unsigned long unused:28;
 unsigned long is_vm86pus:1;
 unsigned char vm86dbg_intxxtab[32];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct vm86plus_struct {
  template <typename, int = 0> struct __BYPASSvm86plus_struct {};
  template <typename, int> friend struct __BYPASSvm86plus_struct;
 struct vm86_regs regs;
 unsigned long flags;
 unsigned long screen_bitmap;
 unsigned long cpu_type;
 struct revectored_struct int_revectored;
 struct revectored_struct int21_revectored;
 struct vm86plus_info_struct vm86plus;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct ptrace_bts_config {
  template <typename, int = 0> struct __BYPASSptrace_bts_config {};
  template <typename, int> friend struct __BYPASSptrace_bts_config;

 __u32 size;

 __u32 flags;

 __u32 signal;

 __u32 bts_size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);

extern initcall_t __con_initcall_start[], __con_initcall_end[];
extern initcall_t __security_initcall_start[], __security_initcall_end[];


extern int do_one_initcall(initcall_t fn);
extern char __attribute__ ((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);

extern void (*late_time_init)(void);
struct obs_kernel_param {
  template <typename, int = 0> struct __BYPASSobs_kernel_param {};
  template <typename, int> friend struct __BYPASSobs_kernel_param;
 char *str;
 int (*setup_func)(char *);
 int early;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) parse_early_param(void);

struct cpuinfo_x86;







enum bts_qualifier {
 BTS_INVALID = 0,
 BTS_BRANCH,
 BTS_TASK_ARRIVES,
 BTS_TASK_DEPARTS
};

struct bts_struct {
  template <typename, int = 0> struct __BYPASSbts_struct {};
  template <typename, int> friend struct __BYPASSbts_struct;
 u64 qualifier;
 union {

  struct {
   u64 from_ip;
   u64 to_ip;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lbr;


  u64 jiffies;
 } variant;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern int ds_allocate(void **, size_t);
extern int ds_free(void **);
extern int ds_get_bts_size(void *);
extern int ds_get_bts_end(void *);
extern int ds_get_bts_index(void *);
extern int ds_set_overflow(void *, int);
extern int ds_get_overflow(void *);
extern int ds_clear(void *);
extern int ds_read_bts(void *, int, struct bts_struct *);
extern int ds_write_bts(void *, struct bts_struct *);
extern unsigned long ds_debugctl_mask(void);
extern void __attribute__ ((__section__(".cpuinit.text"))) __attribute__((__cold__)) ds_init_intel(struct cpuinfo_x86 *c);
extern char early_idt_handlers[32][10];
struct pt_regs {
  template <typename, int = 0> struct __BYPASSpt_regs {};
  template <typename, int> friend struct __BYPASSpt_regs;
 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long bp;
 unsigned long bx;

 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long ax;
 unsigned long cx;
 unsigned long dx;
 unsigned long si;
 unsigned long di;
 unsigned long orig_ax;


 unsigned long ip;
 unsigned long cs;
 unsigned long flags;
 unsigned long sp;
 unsigned long ss;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct task_struct;

extern void ptrace_bts_take_timestamp(struct task_struct *, enum bts_qualifier);

extern unsigned long profile_pc(struct pt_regs *regs);

extern unsigned long
convert_ip_to_linear(struct task_struct *child, struct pt_regs *regs);





void signal_fault(struct pt_regs *regs, void *frame, char *where);



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2axE_434_0 {
  typedef TJP__ZN7pt_regs2axE_434_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2axE_434(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2axE_434_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long regs_return_value(struct pt_regs *regs)
{
 return __get__ZN7pt_regs2axE_434(&regs->ax);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2csE_435_0 {
  typedef TJP__ZN7pt_regs2csE_435_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2csE_435(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2csE_435_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int user_mode(struct pt_regs *regs)
{



 return !!(__get__ZN7pt_regs2csE_435(&regs->cs) & 3);

}

static inline int user_mode_vm(struct pt_regs *regs)
{




 return user_mode(regs);

}

static inline int v8086_mode(struct pt_regs *regs)
{



 return 0;

}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2spE_436_0 {
  typedef TJP__ZN7pt_regs2spE_436_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2spE_436(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2spE_436_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long kernel_trap_sp(struct pt_regs *regs)
{



 return __get__ZN7pt_regs2spE_436(&regs->sp);

}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2ipE_437_0 {
  typedef TJP__ZN7pt_regs2ipE_437_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2ipE_437(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2ipE_437_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long instruction_pointer(struct pt_regs *regs)
{
 return __get__ZN7pt_regs2ipE_437(&regs->ip);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2bpE_438_0 {
  typedef TJP__ZN7pt_regs2bpE_438_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2bpE_438(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2bpE_438_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long frame_pointer(struct pt_regs *regs)
{
 return __get__ZN7pt_regs2bpE_438(&regs->bp);
}





extern void user_enable_single_step(struct task_struct *);
extern void user_disable_single_step(struct task_struct *);

extern void user_enable_block_step(struct task_struct *);






struct user_desc;
extern int do_get_thread_area(struct task_struct *p, int idx,
         struct user_desc *info);
extern int do_set_thread_area(struct task_struct *p, int idx,
         struct user_desc *info, int can_allocate);
struct kernel_vm86_regs {
  template <typename, int = 0> struct __BYPASSkernel_vm86_regs {};
  template <typename, int> friend struct __BYPASSkernel_vm86_regs;



 struct pt_regs pt;



 unsigned short es, __esh;
 unsigned short ds, __dsh;
 unsigned short fs, __fsh;
 unsigned short gs, __gsh;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kernel_vm86_struct {
  template <typename, int = 0> struct __BYPASSkernel_vm86_struct {};
  template <typename, int> friend struct __BYPASSkernel_vm86_struct;
 struct kernel_vm86_regs regs;
 unsigned long flags;
 unsigned long screen_bitmap;
 unsigned long cpu_type;
 struct revectored_struct int_revectored;
 struct revectored_struct int21_revectored;
 struct vm86plus_info_struct vm86plus;
 struct pt_regs *regs32;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline int handle_vm86_trap(struct kernel_vm86_regs *a, long b, int c)
{
 return 0;
}







struct info {
  template <typename, int = 0> struct __BYPASSinfo {};
  template <typename, int> friend struct __BYPASSinfo;
 long ___orig_eip;
 long ___ebx;
 long ___ecx;
 long ___edx;
 long ___esi;
 long ___edi;
 long ___ebp;
 long ___eax;
 long ___ds;
 long ___es;
 long ___fs;
 long ___orig_eax;
 long ___eip;
 long ___cs;
 long ___eflags;
 long ___esp;
 long ___ss;
 long ___vm86_es;
 long ___vm86_ds;
 long ___vm86_fs;
 long ___vm86_gs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct _fpstate {
  template <typename, int = 0> struct __BYPASS_fpstate {};
  template <typename, int> friend struct __BYPASS_fpstate;
 __u16 cwd;
 __u16 swd;
 __u16 twd;

 __u16 fop;
 __u64 rip;
 __u64 rdp;
 __u32 mxcsr;
 __u32 mxcsr_mask;
 __u32 st_space[32];
 __u32 xmm_space[64];
 __u32 reserved2[24];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sigcontext {
  template <typename, int = 0> struct __BYPASSsigcontext {};
  template <typename, int> friend struct __BYPASSsigcontext;
 unsigned long r8;
 unsigned long r9;
 unsigned long r10;
 unsigned long r11;
 unsigned long r12;
 unsigned long r13;
 unsigned long r14;
 unsigned long r15;
 unsigned long di;
 unsigned long si;
 unsigned long bp;
 unsigned long bx;
 unsigned long dx;
 unsigned long ax;
 unsigned long cx;
 unsigned long sp;
 unsigned long ip;
 unsigned long flags;
 unsigned short cs;
 unsigned short gs;
 unsigned short fs;
 unsigned short __pad0;
 unsigned long err;
 unsigned long trapno;
 unsigned long oldmask;
 unsigned long cr2;
 struct _fpstate *fpstate;
 unsigned long reserved1[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern struct task_struct *get_current(void);










static inline void set_64bit( unsigned long *ptr, unsigned long val)
{
 *ptr = val;
}
static inline unsigned long __xchg(unsigned long x, void *ptr,
       int size)
{
 switch (size) {
 case 1:
  asm ("xchgb %b0,%1"
        : "=q" (x)
        : "m" (*(( long *)(ptr))), "0" (x)
        : "memory");
  break;
 case 2:
  asm ("xchgw %w0,%1"
        : "=r" (x)
        : "m" (*(( long *)(ptr))), "0" (x)
        : "memory");
  break;
 case 4:
  asm ("xchgl %k0,%1"
        : "=r" (x)
        : "m" (*(( long *)(ptr))), "0" (x)
        : "memory");
  break;
 case 8:
  asm ("xchgq %0,%1"
        : "=r" (x)
        : "m" (*(( long *)(ptr))), "0" (x)
        : "memory");
  break;
 }
 return x;
}
static inline unsigned long __cmpxchg( void *ptr, unsigned long old,
          unsigned long _new, int size)
{
 unsigned long prev;
 switch (size) {
 case 1:
  asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "cmpxchgb %b1,%2"
        : "=a"(prev)
        : "q"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 case 2:
  asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "cmpxchgw %w1,%2"
        : "=a"(prev)
        : "r"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 case 4:
  asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "cmpxchgl %k1,%2"
        : "=a"(prev)
        : "r"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 case 8:
  asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "cmpxchgq %1,%2"
        : "=a"(prev)
        : "r"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 }
 return old;
}






static inline unsigned long __sync_cmpxchg( void *ptr,
        unsigned long old,
        unsigned long _new, int size)
{
 unsigned long prev;
 switch (size) {
 case 1:
  asm ("lock; cmpxchgb %b1,%2"
        : "=a"(prev)
        : "q"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 case 2:
  asm ("lock; cmpxchgw %w1,%2"
        : "=a"(prev)
        : "r"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 case 4:
  asm ("lock; cmpxchgl %1,%2"
        : "=a"(prev)
        : "r"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 }
 return old;
}

static inline unsigned long __cmpxchg_local( void *ptr,
         unsigned long old,
         unsigned long _new, int size)
{
 unsigned long prev;
 switch (size) {
 case 1:
  asm ("cmpxchgb %b1,%2"
        : "=a"(prev)
        : "q"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 case 2:
  asm ("cmpxchgw %w1,%2"
        : "=a"(prev)
        : "r"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 case 4:
  asm ("cmpxchgl %k1,%2"
        : "=a"(prev)
        : "r"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 case 8:
  asm ("cmpxchgq %1,%2"
        : "=a"(prev)
        : "r"(_new), "m"(*(( long *)(ptr))), "0"(old)
        : "memory");
  return prev;
 }
 return old;
}


  extern void trace_softirqs_on(unsigned long ip);
  extern void trace_softirqs_off(unsigned long ip);
  extern void trace_hardirqs_on(void);
  extern void trace_hardirqs_off(void);
 extern void stop_critical_timings(void);
 extern void start_critical_timings(void);







static inline unsigned long native_save_fl(void)
{
 unsigned long flags;







 asm ("# __raw_save_flags\n\t"
       "pushf ; pop %0"
       : "=r" (flags)
       :
       : "memory");

 return flags;
}

static inline void native_restore_fl(unsigned long flags)
{
 asm ("push %0 ; popf"
       :
       :"g" (flags)
       :"memory", "cc");
}

static inline void native_irq_disable(void)
{
 asm ("cli": : :"memory");
}

static inline void native_irq_enable(void)
{
 asm ("sti": : :"memory");
}

static inline void native_safe_halt(void)
{
 asm ("sti; hlt": : :"memory");
}

static inline void native_halt(void)
{
 asm ("hlt": : :"memory");
}
static inline int raw_irqs_disabled_flags(unsigned long flags)
{
 return !(flags & 0x00000200);
}

static inline int raw_irqs_disabled(void)
{
 unsigned long flags = __raw_local_save_flags();

 return raw_irqs_disabled_flags(flags);
}







static inline void trace_hardirqs_fixup_flags(unsigned long flags)
{
 if (raw_irqs_disabled_flags(flags))
  trace_hardirqs_off();
 else
  trace_hardirqs_on();
}

static inline void trace_hardirqs_fixup(void)
{
 unsigned long flags = __raw_local_save_flags();

 trace_hardirqs_fixup_flags(flags);
}
extern void native_load_gs_index(unsigned);
static inline unsigned long get_limit(unsigned long segment)
{
 unsigned long __limit;
 asm("lsll %1,%0" : "=r" (__limit) : "r" (segment));
 return __limit + 1;
}

static inline void native_clts(void)
{
 asm ("clts");
}
static unsigned long __force_order;

static inline unsigned long native_read_cr0(void)
{
 unsigned long val;
 asm ("mov %%cr0,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline void native_write_cr0(unsigned long val)
{
 asm ("mov %0,%%cr0": : "r" (val), "m" (__force_order));
}

static inline unsigned long native_read_cr2(void)
{
 unsigned long val;
 asm ("mov %%cr2,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline void native_write_cr2(unsigned long val)
{
 asm ("mov %0,%%cr2": : "r" (val), "m" (__force_order));
}

static inline unsigned long native_read_cr3(void)
{
 unsigned long val;
 asm ("mov %%cr3,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline void native_write_cr3(unsigned long val)
{
 asm ("mov %0,%%cr3": : "r" (val), "m" (__force_order));
}

static inline unsigned long native_read_cr4(void)
{
 unsigned long val;
 asm ("mov %%cr4,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline unsigned long native_read_cr4_safe(void)
{
 unsigned long val;
 val = native_read_cr4();

 return val;
}

static inline void native_write_cr4(unsigned long val)
{
 asm ("mov %0,%%cr4": : "r" (val), "m" (__force_order));
}


static inline unsigned long native_read_cr8(void)
{
 unsigned long cr8;
 asm ("movq %%cr8,%0" : "=r" (cr8));
 return cr8;
}

static inline void native_write_cr8(unsigned long val)
{
 asm ("movq %0,%%cr8" :: "r" (val) : "memory");
}


static inline void native_wbinvd(void)
{
 asm ("wbinvd": : :"memory");
}
static inline void clflush( void *__p)
{
 asm ("clflush %0" : "+m" (*( char *)__p));
}



void disable_hlt(void);
void enable_hlt(void);

void cpu_idle_wait(void);

extern unsigned long arch_align_stack(unsigned long sp);
extern void free_init_pages(char *what, unsigned long begin, unsigned long end);

void default_idle(void);
static inline void rdtsc_barrier(void)
{
 asm ("661:\n\t" ".byte 0x66,0x66,0x90\n" "\n662:\n" ".section .altinstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661b\n" " " ".quad" " " "663f\n" "	 .byte %c0\n" "	 .byte 662b-661b\n" "	 .byte 664f-663f\n" ".previous\n" ".section .altinstr_replacement,\"ax\"\n" "663:\n\t" "mfence" "\n664:\n" ".previous" :: "i" ((3*32+17)) : "memory");
 asm ("661:\n\t" ".byte 0x66,0x66,0x90\n" "\n662:\n" ".section .altinstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661b\n" " " ".quad" " " "663f\n" "	 .byte %c0\n" "	 .byte 662b-661b\n" "	 .byte 664f-663f\n" ".previous\n" ".section .altinstr_replacement,\"ax\"\n" "663:\n\t" "lfence" "\n664:\n" ".previous" :: "i" ((3*32+18)) : "memory");
}










struct x8664_pda {
  template <typename, int = 0> struct __BYPASSx8664_pda {};
  template <typename, int> friend struct __BYPASSx8664_pda;
 struct task_struct *pcurrent;
 unsigned long data_offset;

 unsigned long kernelstack;
 unsigned long oldrsp;
 int irqcount;
 unsigned int cpunumber;





 char *irqstackptr;
 short nodenumber;
 short in_bootmem;
 unsigned int __softirq_pending;
 unsigned int __nmi_count;
 short mmu_state;
 short isidle;
 struct mm_struct *active_mm;
 unsigned apic_timer_irqs;
 unsigned irq0_irqs;
 unsigned irq_resched_count;
 unsigned irq_call_count;
 unsigned irq_tlb_count;
 unsigned irq_thermal_count;
 unsigned irq_threshold_count;
 unsigned irq_spurious_count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));

extern struct x8664_pda **_cpu_pda;
extern void pda_init(int);







extern void __bad_pda_field(void) __attribute__((noreturn));





extern struct x8664_pda _proxy_pda;







extern void setup_per_cpu_areas(void);

extern __typeof__(struct x8664_pda) per_cpu__pda;




static inline unsigned long long native_read_tscp(unsigned int *aux)
{
 unsigned long low, high;
 asm (".byte 0x0f,0x01,0xf9"
       : "=a" (low), "=d" (high), "=c" (*aux));
 return low | ((u64)high << 32);
}
static inline unsigned long long native_read_msr(unsigned int msr)
{
 unsigned low, high;

 asm ("rdmsr" : "=a" (low), "=d" (high) : "c" (msr));
 return ((low) | ((u64)(high) << 32));
}

static inline unsigned long long native_read_msr_safe(unsigned int msr,
            int *err)
{
 unsigned low, high;

 asm ("2: rdmsr ; xor %[err],%[err]\n"
       "1:\n\t"
       ".section .fixup,\"ax\"\n\t"
       "3:  mov %[fault],%[err] ; jmp 1b\n\t"
       ".previous\n\t"
       " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "2b" "," "3b" "\n" " .previous\n"
       : [err] "=r" (*err), "=a" (low), "=d" (high)
       : "c" (msr), [fault] "i" (-14));
 return ((low) | ((u64)(high) << 32));
}

static inline void native_write_msr(unsigned int msr,
        unsigned low, unsigned high)
{
 asm ("wrmsr" : : "c" (msr), "a"(low), "d" (high) : "memory");
}

static inline int native_write_msr_safe(unsigned int msr,
     unsigned low, unsigned high)
{
 int err;
 asm ("2: wrmsr ; xor %[err],%[err]\n"
       "1:\n\t"
       ".section .fixup,\"ax\"\n\t"
       "3:  mov %[fault],%[err] ; jmp 1b\n\t"
       ".previous\n\t"
       " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "2b" "," "3b" "\n" " .previous\n"
       : [err] "=a" (err)
       : "c" (msr), "0" (low), "d" (high),
         [fault] "i" (-14)
       : "memory");
 return err;
}

extern unsigned long long native_read_tsc(void);

static inline __attribute__((always_inline)) unsigned long long __native_read_tsc(void)
{
 unsigned low, high;

 rdtsc_barrier();
 asm ("rdtsc" : "=a" (low), "=d" (high));
 rdtsc_barrier();

 return ((low) | ((u64)(high) << 32));
}

static inline unsigned long long native_read_pmc(int counter)
{
 unsigned low, high;

 asm ("rdpmc" : "=a" (low), "=d" (high) : "c" (counter));
 return ((low) | ((u64)(high) << 32));
}
int rdmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 *l, u32 *h);
int wrmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h);
int rdmsr_safe_on_cpu(unsigned int cpu, u32 msr_no, u32 *l, u32 *h);
int wrmsr_safe_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h);



struct exec_domain;
struct pt_regs;

extern int register_exec_domain(struct exec_domain *);
extern int unregister_exec_domain(struct exec_domain *);
extern int __set_personality(unsigned long);
enum {
 ADDR_NO_RANDOMIZE = 0x0040000,
 FDPIC_FUNCPTRS = 0x0080000,


 MMAP_PAGE_ZERO = 0x0100000,
 ADDR_COMPAT_LAYOUT = 0x0200000,
 READ_IMPLIES_EXEC = 0x0400000,
 ADDR_LIMIT_32BIT = 0x0800000,
 SHORT_INODE = 0x1000000,
 WHOLE_SECONDS = 0x2000000,
 STICKY_TIMEOUTS = 0x4000000,
 ADDR_LIMIT_3GB = 0x8000000,
};
enum {
 PER_LINUX = 0x0000,
 PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
 PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
 PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
      WHOLE_SECONDS | SHORT_INODE,
 PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
 PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
 PER_BSD = 0x0006,
 PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
 PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_LINUX32 = 0x0008,
 PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
 PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
 PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
 PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
 PER_RISCOS = 0x000c,
 PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
 PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_OSF4 = 0x000f,
 PER_HPUX = 0x0010,
 PER_MASK = 0x00ff,
};
typedef void (*handler_t)(int, struct pt_regs *);

struct exec_domain {
  template <typename, int = 0> struct __BYPASSexec_domain {};
  template <typename, int> friend struct __BYPASSexec_domain;
 char *name;
 handler_t handler;
 unsigned char pers_low;
 unsigned char pers_high;
 unsigned long *signal_map;
 unsigned long *signal_invmap;
 struct map_segment *err_map;
 struct map_segment *socktype_map;
 struct map_segment *sockopt_map;
 struct map_segment *af_map;
 struct module *module;
 struct exec_domain *next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void *current_text_addr(void)
{
 void *pc;

 asm ("mov $1f, %0; 1:":"=r" (pc));

 return pc;
}
struct cpuinfo_x86 {
  template <typename, int = 0> struct __BYPASScpuinfo_x86 {};
  template <typename, int> friend struct __BYPASScpuinfo_x86;
 __u8 x86;
 __u8 x86_vendor;
 __u8 x86_model;
 __u8 x86_mask;
 int x86_tlbsize;
 __u8 x86_virt_bits;
 __u8 x86_phys_bits;

 __u8 x86_coreid_bits;

 __u32 extended_cpuid_level;


 int cpuid_level;
 __u32 x86_capability[8];
 char x86_vendor_id[16];
 char x86_model_id[64];

 int x86_cache_size;
 int x86_cache_alignment;
 int x86_power;
 unsigned long loops_per_jiffy;


 cpumask_t llc_shared_map;


 u16 x86_max_cores;
 u16 apicid;
 u16 initial_apicid;
 u16 x86_clflush_size;


 u16 booted_cores;

 u16 phys_proc_id;

 u16 cpu_core_id;

 u16 cpu_index;


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));
extern struct cpuinfo_x86 boot_cpu_data;
extern struct cpuinfo_x86 new_cpu_data;

extern struct tss_struct doublefault_tss;
extern __u32 cleared_cpu_caps[8];


extern __typeof__(struct cpuinfo_x86) per_cpu__cpu_info;







static inline int hlt_works(int cpu)
{



 return 1;

}



extern void cpu_detect(struct cpuinfo_x86 *c);

extern void early_cpu_init(void);
extern void identify_boot_cpu(void);
extern void identify_secondary_cpu(struct cpuinfo_x86 *);
extern void print_cpu_info(struct cpuinfo_x86 *);
extern void init_scattered_cpuid_features(struct cpuinfo_x86 *c);
extern unsigned int init_intel_cacheinfo(struct cpuinfo_x86 *c);
extern unsigned short num_cache_leaves;


extern void detect_ht(struct cpuinfo_x86 *c);




static inline void native_cpuid(unsigned int *eax, unsigned int *ebx,
    unsigned int *ecx, unsigned int *edx)
{

 asm("cpuid"
     : "=a" (*eax),
       "=b" (*ebx),
       "=c" (*ecx),
       "=d" (*edx)
     : "0" (*eax), "2" (*ecx));
}

static inline void load_cr3(pgd_t *pgdir)
{
 write_cr3(__phys_addr((unsigned long)(pgdir)));
}
struct x86_hw_tss {
  template <typename, int = 0> struct __BYPASSx86_hw_tss {};
  template <typename, int> friend struct __BYPASSx86_hw_tss;
 u32 reserved1;
 u64 sp0;
 u64 sp1;
 u64 sp2;
 u64 reserved2;
 u64 ist[7];
 u32 reserved3;
 u32 reserved4;
 u16 reserved5;
 u16 io_bitmap_base;


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed)) __attribute__((__aligned__((1 << (7)))));
struct tss_struct {
  template <typename, int = 0> struct __BYPASStss_struct {};
  template <typename, int> friend struct __BYPASStss_struct;



 struct x86_hw_tss x86_tss;







 unsigned long io_bitmap[((65536/8)/sizeof(long)) + 1];



 unsigned long io_bitmap_max;
 struct thread_struct *io_bitmap_owner;




 unsigned long stack[64];


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));

extern __typeof__(struct tss_struct) per_cpu__init_tss;




struct orig_ist {
  template <typename, int = 0> struct __BYPASSorig_ist {};
  template <typename, int> friend struct __BYPASSorig_ist;
 unsigned long ist[7];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct i387_fsave_struct {
  template <typename, int = 0> struct __BYPASSi387_fsave_struct {};
  template <typename, int> friend struct __BYPASSi387_fsave_struct;
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;


 u32 st_space[20];


 u32 status;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct i387_fxsave_struct {
  template <typename, int = 0> struct __BYPASSi387_fxsave_struct {};
  template <typename, int> friend struct __BYPASSi387_fxsave_struct;
 u16 cwd;
 u16 swd;
 u16 twd;
 u16 fop;
 union {
  struct {
   u64 rip;
   u64 rdp;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  struct {
   u32 fip;
   u32 fcs;
   u32 foo;
   u32 fos;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };
 u32 mxcsr;
 u32 mxcsr_mask;


 u32 st_space[32];


 u32 xmm_space[64];

 u32 padding[24];


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((aligned(16)));

struct i387_soft_struct {
  template <typename, int = 0> struct __BYPASSi387_soft_struct {};
  template <typename, int> friend struct __BYPASSi387_soft_struct;
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;

 u32 st_space[20];
 u8 ftop;
 u8 changed;
 u8 lookahead;
 u8 no_update;
 u8 rm;
 u8 alimit;
 struct info *info;
 u32 entry_eip;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

union thread_xstate {
 struct i387_fsave_struct fsave;
 struct i387_fxsave_struct fxsave;
 struct i387_soft_struct soft;
};


extern __typeof__(struct orig_ist) per_cpu__orig_ist;


extern void print_cpu_info(struct cpuinfo_x86 *);
extern unsigned int xstate_size;
extern void free_thread_xstate(struct task_struct *);
extern struct kmem_cache *task_xstate_cachep;
extern void init_scattered_cpuid_features(struct cpuinfo_x86 *c);
extern unsigned int init_intel_cacheinfo(struct cpuinfo_x86 *c);
extern unsigned short num_cache_leaves;

struct thread_struct {
  template <typename, int = 0> struct __BYPASSthread_struct {};
  template <typename, int> friend struct __BYPASSthread_struct;

 struct desc_struct tls_array[3];
 unsigned long sp0;
 unsigned long sp;



 unsigned long usersp;
 unsigned short es;
 unsigned short ds;
 unsigned short fsindex;
 unsigned short gsindex;

 unsigned long ip;
 unsigned long fs;
 unsigned long gs;

 unsigned long debugreg0;
 unsigned long debugreg1;
 unsigned long debugreg2;
 unsigned long debugreg3;
 unsigned long debugreg6;
 unsigned long debugreg7;

 unsigned long cr2;
 unsigned long trap_no;
 unsigned long error_code;

 union thread_xstate *xstate;
 unsigned long *io_bitmap_ptr;
 unsigned long iopl;

 unsigned io_bitmap_max;

 unsigned long debugctlmsr;


 unsigned long ds_area_msr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline unsigned long native_get_debugreg(int regno)
{
 unsigned long val = 0;

 switch (regno) {
 case 0:
  asm("mov %%db0, %0" :"=r" (val));
  break;
 case 1:
  asm("mov %%db1, %0" :"=r" (val));
  break;
 case 2:
  asm("mov %%db2, %0" :"=r" (val));
  break;
 case 3:
  asm("mov %%db3, %0" :"=r" (val));
  break;
 case 6:
  asm("mov %%db6, %0" :"=r" (val));
  break;
 case 7:
  asm("mov %%db7, %0" :"=r" (val));
  break;
 default:
  ;
 }
 return val;
}

static inline void native_set_debugreg(int regno, unsigned long value)
{
 switch (regno) {
 case 0:
  asm("mov %0, %%db0" ::"r" (value));
  break;
 case 1:
  asm("mov %0, %%db1" ::"r" (value));
  break;
 case 2:
  asm("mov %0, %%db2" ::"r" (value));
  break;
 case 3:
  asm("mov %0, %%db3" ::"r" (value));
  break;
 case 6:
  asm("mov %0, %%db6" ::"r" (value));
  break;
 case 7:
  asm("mov %0, %%db7" ::"r" (value));
  break;
 default:
  ;
 }
}




static inline void native_set_iopl_mask(unsigned mask)
{
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13thread_struct3sp0E_439_0 {
  typedef TJP__ZN13thread_struct3sp0E_439_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN13thread_struct3sp0E_439(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN13thread_struct3sp0E_439_0< unsigned long int , ::thread_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void
native_load_sp0(struct tss_struct *tss, struct thread_struct *thread)
{
 tss->x86_tss.sp0 = __get__ZN13thread_struct3sp0E_439(&thread->sp0);







}

static inline void native_swapgs(void)
{

 asm ("swapgs" ::: "memory");

}
extern unsigned long mmu_cr4_features;

static inline void set_in_cr4(unsigned long mask)
{
 unsigned cr4;

 mmu_cr4_features |= mask;
 cr4 = read_cr4();
 cr4 |= mask;
 write_cr4(cr4);
}

static inline void clear_in_cr4(unsigned long mask)
{
 unsigned cr4;

 mmu_cr4_features &= ~mask;
 cr4 = read_cr4();
 cr4 &= ~mask;
 write_cr4(cr4);
}

struct microcode_header {
  template <typename, int = 0> struct __BYPASSmicrocode_header {};
  template <typename, int> friend struct __BYPASSmicrocode_header;
 unsigned int hdrver;
 unsigned int rev;
 unsigned int date;
 unsigned int sig;
 unsigned int cksum;
 unsigned int ldrver;
 unsigned int pf;
 unsigned int datasize;
 unsigned int totalsize;
 unsigned int reserved[3];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct microcode {
  template <typename, int = 0> struct __BYPASSmicrocode {};
  template <typename, int> friend struct __BYPASSmicrocode;
 struct microcode_header hdr;
 unsigned int bits[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef struct microcode microcode_t;
typedef struct microcode_header microcode_header_t;


struct extended_signature {
  template <typename, int = 0> struct __BYPASSextended_signature {};
  template <typename, int> friend struct __BYPASSextended_signature;
 unsigned int sig;
 unsigned int pf;
 unsigned int cksum;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct extended_sigtable {
  template <typename, int = 0> struct __BYPASSextended_sigtable {};
  template <typename, int> friend struct __BYPASSextended_sigtable;
 unsigned int count;
 unsigned int cksum;
 unsigned int reserved[3];
 struct extended_signature sigs[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef struct {
 unsigned long seg;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} mm_segment_t;





extern int kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);


extern void release_thread(struct task_struct *);


extern void prepare_to_copy(struct task_struct *tsk);

unsigned long get_wchan(struct task_struct *p);






static inline void cpuid(unsigned int op,
    unsigned int *eax, unsigned int *ebx,
    unsigned int *ecx, unsigned int *edx)
{
 *eax = op;
 *ecx = 0;
 __cpuid(eax, ebx, ecx, edx);
}


static inline void cpuid_count(unsigned int op, int count,
          unsigned int *eax, unsigned int *ebx,
          unsigned int *ecx, unsigned int *edx)
{
 *eax = op;
 *ecx = count;
 __cpuid(eax, ebx, ecx, edx);
}




static inline unsigned int cpuid_eax(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return eax;
}

static inline unsigned int cpuid_ebx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return ebx;
}

static inline unsigned int cpuid_ecx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return ecx;
}

static inline unsigned int cpuid_edx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return edx;
}


static inline void rep_nop(void)
{
 asm ("rep; nop" ::: "memory");
}

static inline void cpu_relax(void)
{
 rep_nop();
}


static inline void sync_core(void)
{
 int tmp;

 asm ("cpuid" : "=a" (tmp) : "0" (1)
       : "ebx", "ecx", "edx", "memory");
}

static inline void __monitor( void *eax, unsigned long ecx,
        unsigned long edx)
{

 asm (".byte 0x0f, 0x01, 0xc8;"
       :: "a" (eax), "c" (ecx), "d"(edx));
}

static inline void __mwait(unsigned long eax, unsigned long ecx)
{

 asm (".byte 0x0f, 0x01, 0xc9;"
       :: "a" (eax), "c" (ecx));
}

static inline void __sti_mwait(unsigned long eax, unsigned long ecx)
{
 trace_hardirqs_on();

 asm ("sti; .byte 0x0f, 0x01, 0xc9;"
       :: "a" (eax), "c" (ecx));
}

extern void mwait_idle_with_hints(unsigned long eax, unsigned long ecx);

extern void select_idle_routine( struct cpuinfo_x86 *c);

extern unsigned long boot_option_idle_override;
extern unsigned long idle_halt;
extern unsigned long idle_nomwait;
static inline void wbinvd_halt(void)
{
 asm ("mfence":::"memory");

 if ((__builtin_constant_p((0*32+19)) && ( ((((0*32+19))>>5)==0 && (1UL<<(((0*32+19))&31) & ((1<<((0*32+ 0) & 31))|0|(1<<((0*32+ 5) & 31))|(1<<((0*32+ 6) & 31))| (1<<((0*32+ 8) & 31))|(1<<((0*32+13) & 31))|(1<<((0*32+24) & 31))|(1<<((0*32+15) & 31))| (1<<((0*32+25) & 31))|(1<<((0*32+26) & 31))))) || ((((0*32+19))>>5)==1 && (1UL<<(((0*32+19))&31) & ((1<<((1*32+29) & 31))|0))) || ((((0*32+19))>>5)==2 && (1UL<<(((0*32+19))&31) & 0)) || ((((0*32+19))>>5)==3 && (1UL<<(((0*32+19))&31) & ((1<<((3*32+20) & 31))))) || ((((0*32+19))>>5)==4 && (1UL<<(((0*32+19))&31) & 0)) || ((((0*32+19))>>5)==5 && (1UL<<(((0*32+19))&31) & 0)) || ((((0*32+19))>>5)==6 && (1UL<<(((0*32+19))&31) & 0)) || ((((0*32+19))>>5)==7 && (1UL<<(((0*32+19))&31) & 0)) ) ? 1 : (__builtin_constant_p(((0*32+19))) ? constant_test_bit(((0*32+19)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((0*32+19)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  asm ("cli; wbinvd; 1: hlt; jmp 1b" : : : "memory");
 else
  while (1)
   halt();
}

extern void enable_sep_cpu(void);
extern int sysenter_setup(void);


extern struct desc_ptr early_gdt_descr;

extern void cpu_set_gdt(int);
extern void switch_to_new_gdt(void);
extern void cpu_init(void);
extern void init_gdt(int cpu);

static inline void update_debugctlmsr(unsigned long debugctlmsr)
{




 do { paravirt_write_msr(0x000001d9, (u32)((u64)(debugctlmsr)), ((u64)(debugctlmsr))>>32); } while (0);
}





extern unsigned int machine_id;
extern unsigned int machine_submodel_id;
extern unsigned int BIOS_revision;


extern int bootloader_type;

extern char ignore_fpu_irq;
static inline void prefetch( void *x)
{
 asm ("661:\n\t" "prefetcht0 (%1)" "\n662:\n" ".section .altinstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661b\n" " " ".quad" " " "663f\n" "	 .byte %c0\n" "	 .byte 662b-661b\n" "	 .byte 664f-663f\n" ".previous\n" ".section .altinstr_replacement,\"ax\"\n" "663:\n\t" "prefetchnta (%1)" "\n664:\n" ".previous" :: "i" ((0*32+25)), "r" (x))


             ;
}






static inline void prefetchw( void *x)
{
 asm ("661:\n\t" "prefetcht0 (%1)" "\n662:\n" ".section .altinstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661b\n" " " ".quad" " " "663f\n" "	 .byte %c0\n" "	 .byte 662b-661b\n" "	 .byte 664f-663f\n" ".previous\n" ".section .altinstr_replacement,\"ax\"\n" "663:\n\t" "prefetchw (%1)" "\n664:\n" ".previous" :: "i" ((1*32+31)), "r" (x))


             ;
}

static inline void spin_lock_prefetch( void *x)
{
 prefetchw(x);
}
extern void start_thread(struct pt_regs *regs, unsigned long new_ip,
            unsigned long new_sp);
extern int get_tsc_mode(unsigned long adr);
extern int set_tsc_mode(unsigned int val);

struct thread_info {
  template <typename, int = 0> struct __BYPASSthread_info {};
  template <typename, int> friend struct __BYPASSthread_info;
 struct task_struct *task;
 struct exec_domain *exec_domain;
 unsigned long flags;
 __u32 status;
 __u32 cpu;
 int preempt_count;

 mm_segment_t addr_limit;
 struct restart_block restart_block;
 void *sysenter_return;







  friend class ::Introspect;
  friend class ::MyIntrospect;
};

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_442_0 {
  typedef TJP__proxy_pda_442_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_442(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_442_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_443_0 {
  typedef TJP__proxy_pda_443_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_443(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_443_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_444_0 {
  typedef TJP__proxy_pda_444_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_444(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_444_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}
static inline struct thread_info *current_thread_info(void)
{
 struct thread_info *ti;
 ti = (void *)(({ typeof(_proxy_pda.kernelstack) ret__; switch (sizeof(_proxy_pda.kernelstack)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->kernelstack)), "m" (__get__proxy_pda_442(&_proxy_pda).kernelstack)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->kernelstack)), "m" (__get__proxy_pda_443(&_proxy_pda).kernelstack)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->kernelstack)), "m" (__get__proxy_pda_444(&_proxy_pda).kernelstack)); break; default: __bad_pda_field(); } ret__; }) + (5*8) - (((1UL) << 12) << 1));
 return ti;
}


static inline struct thread_info *stack_thread_info(void)
{
 struct thread_info *ti;
 asm("andq %%rsp,%0; " : "=r" (ti) : "0" (~((((1UL) << 12) << 1) - 1)));
 return ti;
}
static inline void set_restore_sigmask(void)
{
 struct thread_info *ti = current_thread_info();
 ti->status |= 0x0008;
 set_bit(2, (unsigned long *)&ti->flags);
}



extern void arch_task_cache_init(void);
extern void free_thread_info(struct thread_info *ti);
extern int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src);
static inline void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return (__builtin_constant_p((flag)) ? constant_test_bit((flag), ((unsigned long *)&ti->flags)) : variable_test_bit((flag), ((unsigned long *)&ti->flags)));
}





static inline void prefetch_range(void *addr, size_t len)
{







}
struct list_head {
  template <typename, int = 0> struct __BYPASSlist_head {};
  template <typename, int> friend struct __BYPASSlist_head;
 struct list_head *next, *prev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






static inline void INIT_LIST_HEAD(struct list_head *list)
{
 list->next = list;
 list->prev = list;
}
extern void __list_add(struct list_head *_new,
         struct list_head *prev,
         struct list_head *next);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_445_0 {
  typedef TJP__ZN9list_head4nextE_445_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_445(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_445_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_add(struct list_head *_new, struct list_head *head)
{
 __list_add(_new, head, __get__ZN9list_head4nextE_445(&head->next));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_446_0 {
  typedef TJP__ZN9list_head4prevE_446_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_446(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_446_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_add_tail(struct list_head *_new, struct list_head *head)
{
 __list_add(_new, __get__ZN9list_head4prevE_446(&head->prev), head);
}
static inline void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 prev->next = next;
}
extern void list_del(struct list_head *entry);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_447_0 {
  typedef TJP__ZN9list_head4nextE_447_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_447(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_447_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_448_0 {
  typedef TJP__ZN9list_head4prevE_448_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_448(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_448_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_replace(struct list_head *old,
    struct list_head *_new)
{
 _new->next = __get__ZN9list_head4nextE_447(&old->next);
 _new->next->prev = _new;
 _new->prev = __get__ZN9list_head4prevE_448(&old->prev);
 _new->prev->next = _new;
}

static inline void list_replace_init(struct list_head *old,
     struct list_head *_new)
{
 list_replace(old, _new);
 INIT_LIST_HEAD(old);
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_449_0 {
  typedef TJP__ZN9list_head4prevE_449_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_449(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_449_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_450_0 {
  typedef TJP__ZN9list_head4nextE_450_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_450(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_450_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_del_init(struct list_head *entry)
{
 __list_del(__get__ZN9list_head4prevE_449(&entry->prev), __get__ZN9list_head4nextE_450(&entry->next));
 INIT_LIST_HEAD(entry);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_451_0 {
  typedef TJP__ZN9list_head4prevE_451_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_451(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_451_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_452_0 {
  typedef TJP__ZN9list_head4nextE_452_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_452(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_452_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_move(struct list_head *list, struct list_head *head)
{
 __list_del(__get__ZN9list_head4prevE_451(&list->prev), __get__ZN9list_head4nextE_452(&list->next));
 list_add(list, head);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_453_0 {
  typedef TJP__ZN9list_head4prevE_453_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_453(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_453_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_454_0 {
  typedef TJP__ZN9list_head4nextE_454_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_454(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_454_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del(__get__ZN9list_head4prevE_453(&list->prev), __get__ZN9list_head4nextE_454(&list->next));
 list_add_tail(list, head);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_455_0 {
  typedef TJP__ZN9list_head4nextE_455_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_455(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_455_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline int list_is_last( struct list_head *list,
    struct list_head *head)
{
 return __get__ZN9list_head4nextE_455(&list->next) == head;
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_456_0 {
  typedef TJP__ZN9list_head4nextE_456_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_456(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_456_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline int list_empty( struct list_head *head)
{
 return __get__ZN9list_head4nextE_456(&head->next) == head;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_457_0 {
  typedef TJP__ZN9list_head4nextE_457_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_457(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_457_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_458_0 {
  typedef TJP__ZN9list_head4prevE_458_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_458(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_458_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline int list_empty_careful( struct list_head *head)
{
 struct list_head *next = __get__ZN9list_head4nextE_457(&head->next);
 return (next == head) && (next == __get__ZN9list_head4prevE_458(&head->prev));
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_459_0 {
  typedef TJP__ZN9list_head4nextE_459_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_459(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_459_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_460_0 {
  typedef TJP__ZN9list_head4prevE_460_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_460(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_460_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline int list_is_singular( struct list_head *head)
{
 return !list_empty(head) && (__get__ZN9list_head4nextE_459(&head->next) == __get__ZN9list_head4prevE_460(&head->prev));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_461_0 {
  typedef TJP__ZN9list_head4nextE_461_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_461(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_461_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_462_0 {
  typedef TJP__ZN9list_head4nextE_462_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_462(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_462_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = __get__ZN9list_head4nextE_461(&entry->next);
 list->next = __get__ZN9list_head4nextE_462(&head->next);
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_463_0 {
  typedef TJP__ZN9list_head4nextE_463_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_463(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_463_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (__get__ZN9list_head4nextE_463(&head->next) != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_464_0 {
  typedef TJP__ZN9list_head4nextE_464_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_464(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_464_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_465_0 {
  typedef TJP__ZN9list_head4prevE_465_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_465(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_465_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void __list_splice( struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = __get__ZN9list_head4nextE_464(&list->next);
 struct list_head *last = __get__ZN9list_head4prevE_465(&list->prev);

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_466_0 {
  typedef TJP__ZN9list_head4nextE_466_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_466(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_466_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_splice( struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, __get__ZN9list_head4nextE_466(&head->next));
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_467_0 {
  typedef TJP__ZN9list_head4prevE_467_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_467(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_467_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, __get__ZN9list_head4prevE_467(&head->prev), head);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_468_0 {
  typedef TJP__ZN9list_head4nextE_468_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_468(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_468_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, __get__ZN9list_head4nextE_468(&head->next));
  INIT_LIST_HEAD(list);
 }
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_469_0 {
  typedef TJP__ZN9list_head4prevE_469_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_469(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_469_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, __get__ZN9list_head4prevE_469(&head->prev), head);
  INIT_LIST_HEAD(list);
 }
}
struct hlist_head {
  template <typename, int = 0> struct __BYPASShlist_head {};
  template <typename, int> friend struct __BYPASShlist_head;
 struct hlist_node *first;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct hlist_node {
  template <typename, int = 0> struct __BYPASShlist_node {};
  template <typename, int> friend struct __BYPASShlist_node;
 struct hlist_node *next, **pprev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = 0;
 h->pprev = 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node5pprevE_470_0 {
  typedef TJP__ZN10hlist_node5pprevE_470_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node ** __get__ZN10hlist_node5pprevE_470(hlist_node ** *source) {
  ::hlist_node **__result_buffer;
  typedef TJP__ZN10hlist_node5pprevE_470_0< ::hlist_node **, ::hlist_node , ::hlist_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node **&)__result_buffer;
}
static inline int hlist_unhashed( struct hlist_node *h)
{
 return !__get__ZN10hlist_node5pprevE_470(&h->pprev);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_471_0 {
  typedef TJP__ZN10hlist_head5firstE_471_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_471(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_471_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline int hlist_empty( struct hlist_head *h)
{
 return !__get__ZN10hlist_head5firstE_471(&h->first);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_472_0 {
  typedef TJP__ZN10hlist_node4nextE_472_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_472(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_472_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node5pprevE_473_0 {
  typedef TJP__ZN10hlist_node5pprevE_473_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node ** __get__ZN10hlist_node5pprevE_473(hlist_node ** *source) {
  ::hlist_node **__result_buffer;
  typedef TJP__ZN10hlist_node5pprevE_473_0< ::hlist_node **, ::hlist_node , ::hlist_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node **&)__result_buffer;
}
static inline void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = __get__ZN10hlist_node4nextE_472(&n->next);
 struct hlist_node **pprev = __get__ZN10hlist_node5pprevE_473(&n->pprev);
 *pprev = next;
 if (next)
  next->pprev = pprev;
}

static inline void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x00100100);
 n->pprev = ((void *) 0x00200200);
}

static inline void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_474_0 {
  typedef TJP__ZN10hlist_head5firstE_474_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_474(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_474_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = __get__ZN10hlist_head5firstE_474(&h->first);
 n->next = first;
 if (first)
  first->pprev = &n->next;
 h->first = n;
 n->pprev = &h->first;
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node5pprevE_475_0 {
  typedef TJP__ZN10hlist_node5pprevE_475_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node ** __get__ZN10hlist_node5pprevE_475(hlist_node ** *source) {
  ::hlist_node **__result_buffer;
  typedef TJP__ZN10hlist_node5pprevE_475_0< ::hlist_node **, ::hlist_node , ::hlist_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node **&)__result_buffer;
}
static inline void hlist_add_before(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = __get__ZN10hlist_node5pprevE_475(&next->pprev);
 n->next = next;
 next->pprev = &n->next;
 *(n->pprev) = n;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_476_0 {
  typedef TJP__ZN10hlist_node4nextE_476_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_476(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_476_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_477_0 {
  typedef TJP__ZN10hlist_node4nextE_477_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_477(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_477_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline void hlist_add_after(struct hlist_node *n,
     struct hlist_node *next)
{
 next->next = __get__ZN10hlist_node4nextE_476(&n->next);
 n->next = next;
 next->pprev = &n->next;

 if(__get__ZN10hlist_node4nextE_477(&next->next))
  next->next->pprev = &next->next;
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_478_0 {
  typedef TJP__ZN10hlist_head5firstE_478_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_478(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_478_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_479_0 {
  typedef TJP__ZN10hlist_head5firstE_479_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_479(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_479_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline void hlist_move_list(struct hlist_head *old,
       struct hlist_head *_new)
{
 _new->first = __get__ZN10hlist_head5firstE_478(&old->first);
 if (__get__ZN10hlist_head5firstE_479(&_new->first))
  _new->first->pprev = &_new->first;
 old->first = 0;
}
struct preempt_notifier;
struct preempt_ops {
  template <typename, int = 0> struct __BYPASSpreempt_ops {};
  template <typename, int> friend struct __BYPASSpreempt_ops;
 void (*sched_in)(struct preempt_notifier *notifier, int cpu);
 void (*sched_out)(struct preempt_notifier *notifier,
     struct task_struct *next);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct preempt_notifier {
  template <typename, int = 0> struct __BYPASSpreempt_notifier {};
  template <typename, int> friend struct __BYPASSpreempt_notifier;
 struct hlist_node link;
 struct preempt_ops *ops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void preempt_notifier_register(struct preempt_notifier *notifier);
void preempt_notifier_unregister(struct preempt_notifier *notifier);

static inline void preempt_notifier_init(struct preempt_notifier *notifier,
         struct preempt_ops *ops)
{
 INIT_HLIST_NODE(&notifier->link);
 notifier->ops = ops;
}







extern void local_bh_disable(void);
extern void __local_bh_enable(void);
extern void _local_bh_enable(void);
extern void local_bh_enable(void);
extern void local_bh_enable_ip(unsigned long ip);







typedef struct raw_spinlock {
  template <typename, int = 0> struct __BYPASSraw_spinlock {};
  template <typename, int> friend struct __BYPASSraw_spinlock;
 unsigned int slock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} raw_spinlock_t;



typedef struct {
 unsigned int lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} raw_rwlock_t;




struct task_struct;
struct lockdep_map;
static inline void lockdep_off(void)
{
}

static inline void lockdep_on(void)
{
}
struct lock_class_key {
  template <typename, int = 0> struct __BYPASSlock_class_key {};
  template <typename, int> friend struct __BYPASSlock_class_key; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void early_init_irq_lock_class(void);







extern void early_boot_irqs_off(void);
extern void early_boot_irqs_on(void);
extern void print_irqtrace_events(struct task_struct *curr);

typedef struct {
 raw_spinlock_t raw_lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} spinlock_t;



typedef struct {
 raw_rwlock_t raw_lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} rwlock_t;

extern int __attribute__((section(".spinlock.text"))) generic__raw_read_trylock(raw_rwlock_t *lock);















typedef struct _atomic {
  template <typename, int = 0> struct __BYPASS_atomic {};
  template <typename, int> friend struct __BYPASS_atomic;
 int counter;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} atomic_t;
static inline int atomic_sub_return(int i, atomic_t *v)
{
 return 1;
}






typedef struct _atomic64 {
  template <typename, int = 0> struct __BYPASS_atomic64 {};
  template <typename, int> friend struct __BYPASS_atomic64;
 long counter;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} atomic64_t;
static inline long atomic64_sub_return(long i, atomic64_t *v)
{
 return 1;
}
typedef atomic64_t atomic_long_t;




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_atomic647counterE_480_0 {
  typedef TJP__ZN9_atomic647counterE_480_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long int __get__ZN9_atomic647counterE_480(long int *source) {
  long int __result_buffer;
  typedef TJP__ZN9_atomic647counterE_480_0< long int , ::_atomic64 , long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (long int &)__result_buffer;
}
static inline long atomic_long_read(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)(__get__ZN9_atomic647counterE_480(&(v)->counter));
}

static inline void atomic_long_set(atomic_long_t *l, long i)
{
 atomic64_t *v = (atomic64_t *)l;

 ;
}

static inline void atomic_long_inc(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 ;
}

static inline void atomic_long_dec(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 ;
}

static inline void atomic_long_add(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 ;
}

static inline void atomic_long_sub(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 ;
}

static inline int atomic_long_sub_and_test(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return 1;
}

static inline int atomic_long_dec_and_test(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return 1;
}

static inline int atomic_long_inc_and_test(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return 1;
}

static inline int atomic_long_add_negative(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return 1;
}

static inline long atomic_long_add_return(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)1;
}

static inline long atomic_long_sub_return(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)atomic64_sub_return(i, v);
}

static inline long atomic_long_inc_return(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)(1);
}

static inline long atomic_long_dec_return(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)(atomic64_sub_return(1, (v)));
}

static inline long atomic_long_add_unless(atomic_long_t *l, long a, long u)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)1;
}
static inline int __ticket_spin_is_locked(raw_spinlock_t *lock)
{
 int tmp = (*( typeof(lock->slock) *)&(lock->slock));

 return (((tmp >> 8) & 0xff) != (tmp & 0xff));
}

static inline int __ticket_spin_is_contended(raw_spinlock_t *lock)
{
 int tmp = (*( typeof(lock->slock) *)&(lock->slock));

 return (((tmp >> 8) - tmp) & 0xff) > 1;
}

static inline __attribute__((always_inline)) void __ticket_spin_lock(raw_spinlock_t *lock)
{
 short inc = 0x0100;

 asm (
  ".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "xaddw %w0, %1\n"
  "1:\t"
  "cmpb %h0, %b0\n\t"
  "je 2f\n\t"
  "rep ; nop\n\t"
  "movb %1, %b0\n\t"

  "jmp 1b\n"
  "2:"
  : "+Q" (inc), "+m" (lock->slock)
  :
  : "memory", "cc");
}

static inline __attribute__((always_inline)) int __ticket_spin_trylock(raw_spinlock_t *lock)
{
 int tmp;
 short _new;

 asm ("movw %2,%w0\n\t"
       "cmpb %h0,%b0\n\t"
       "jne 1f\n\t"
       "movw %w0,%w1\n\t"
       "incb %h1\n\t"
       "lock ; cmpxchgw %w1,%2\n\t"
       "1:"
       "sete %b1\n\t"
       "movzbl %b1,%0\n\t"
       : "=&a" (tmp), "=Q" (_new), "+m" (lock->slock)
       :
       : "memory", "cc");

 return tmp;
}

static inline __attribute__((always_inline)) void __ticket_spin_unlock(raw_spinlock_t *lock)
{
 asm ( "incb %0"
       : "+m" (lock->slock)
       :
       : "memory", "cc");
}
struct __byte_spinlock {
  template <typename, int = 0> struct __BYPASS__byte_spinlock {};
  template <typename, int> friend struct __BYPASS__byte_spinlock;
 s8 lock;
 s8 spinners;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline int __byte_spin_is_locked(raw_spinlock_t *lock)
{
 struct __byte_spinlock *bl = (struct __byte_spinlock *)lock;
 return bl->lock != 0;
}

static inline int __byte_spin_is_contended(raw_spinlock_t *lock)
{
 struct __byte_spinlock *bl = (struct __byte_spinlock *)lock;
 return bl->spinners != 0;
}

static inline void __byte_spin_lock(raw_spinlock_t *lock)
{
 struct __byte_spinlock *bl = (struct __byte_spinlock *)lock;
 s8 val = 1;

 asm("1: xchgb %1, %0\n"
     "   test %1,%1\n"
     "   jz 3f\n"
     "   " ".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "incb %2\n"
     "2: rep;nop\n"
     "   cmpb $1, %0\n"
     "   je 2b\n"
     "   " ".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "decb %2\n"
     "   jmp 1b\n"
     "3:"
     : "+m" (bl->lock), "+q" (val), "+m" (bl->spinners): : "memory");
}

static inline int __byte_spin_trylock(raw_spinlock_t *lock)
{
 struct __byte_spinlock *bl = (struct __byte_spinlock *)lock;
 u8 old = 1;

 asm("xchgb %1,%0"
     : "+m" (bl->lock), "+q" (old) : : "memory");

 return old == 0;
}

static inline void __byte_spin_unlock(raw_spinlock_t *lock)
{
 struct __byte_spinlock *bl = (struct __byte_spinlock *)lock;
 ;
 bl->lock = 0;
}
static inline void __raw_spin_unlock_wait(raw_spinlock_t *lock)
{
 while (__raw_spin_is_locked(lock))
  cpu_relax();
}
static inline int __raw_read_can_lock(raw_rwlock_t *lock)
{
 return (int)(lock)->lock > 0;
}





static inline int __raw_write_can_lock(raw_rwlock_t *lock)
{
 return (lock)->lock == 0x01000000;
}

static inline void __raw_read_lock(raw_rwlock_t *rw)
{
 asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " " subl $1,(%0)\n\t"
       "jns 1f\n"
       "call __read_lock_failed\n\t"
       "1:\n"
       ::"D" (rw) : "memory");
}

static inline void __raw_write_lock(raw_rwlock_t *rw)
{
 asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " " subl %1,(%0)\n\t"
       "jz 1f\n"
       "call __write_lock_failed\n\t"
       "1:\n"
       ::"D" (rw), "i" (0x01000000) : "memory");
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_487_0 {
  typedef TJP__ZN7_atomic7counterE_487_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_487(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_487_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int __raw_read_trylock(raw_rwlock_t *lock)
{
 atomic_t *count = (atomic_t *)lock;

 ;
 if ((__get__ZN7_atomic7counterE_487(&(count)->counter)) >= 0)
  return 1;
 ;
 return 0;
}

static inline int __raw_write_trylock(raw_rwlock_t *lock)
{
 atomic_t *count = (atomic_t *)lock;

 if (1)
  return 1;
 ;
 return 0;
}

static inline void __raw_read_unlock(raw_rwlock_t *rw)
{
 asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "incl %0" :"+m" (rw->lock) : : "memory");
}

static inline void __raw_write_unlock(raw_rwlock_t *rw)
{
 asm (".section .smp_locks,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661f\n" ".previous\n" "661:\n\tlock; " "addl %1, %0"
       : "+m" (rw->lock) : "i" (0x01000000) : "memory");
}
int in_lock_functions(unsigned long addr);



void __attribute__((section(".spinlock.text"))) _spin_lock(spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _spin_lock_nested(spinlock_t *lock, int subclass)
       ;
void __attribute__((section(".spinlock.text"))) _spin_lock_nest_lock(spinlock_t *lock, struct lockdep_map *map)
       ;
void __attribute__((section(".spinlock.text"))) _read_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _write_lock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _spin_lock_bh(spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _read_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _write_lock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _spin_lock_irq(spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _read_lock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _write_lock_irq(rwlock_t *lock) ;
unsigned long __attribute__((section(".spinlock.text"))) _spin_lock_irqsave(spinlock_t *lock)
       ;
unsigned long __attribute__((section(".spinlock.text"))) _spin_lock_irqsave_nested(spinlock_t *lock, int subclass)
       ;
unsigned long __attribute__((section(".spinlock.text"))) _read_lock_irqsave(rwlock_t *lock)
       ;
unsigned long __attribute__((section(".spinlock.text"))) _write_lock_irqsave(rwlock_t *lock)
       ;
int __attribute__((section(".spinlock.text"))) _spin_trylock(spinlock_t *lock);
int __attribute__((section(".spinlock.text"))) _read_trylock(rwlock_t *lock);
int __attribute__((section(".spinlock.text"))) _write_trylock(rwlock_t *lock);
int __attribute__((section(".spinlock.text"))) _spin_trylock_bh(spinlock_t *lock);
void __attribute__((section(".spinlock.text"))) _spin_unlock(spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _read_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _write_unlock(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _spin_unlock_bh(spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _read_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _write_unlock_bh(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _spin_unlock_irq(spinlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _read_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _write_unlock_irq(rwlock_t *lock) ;
void __attribute__((section(".spinlock.text"))) _spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
       ;
void __attribute__((section(".spinlock.text"))) _read_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
       ;
void __attribute__((section(".spinlock.text"))) _write_unlock_irqrestore(rwlock_t *lock, unsigned long flags)
       ;
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);

typedef struct __wait_queue wait_queue_t;
typedef int (*wait_queue_func_t)(wait_queue_t *wait, unsigned mode, int sync, void *key);
int default_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key);

struct __wait_queue {
  template <typename, int = 0> struct __BYPASS__wait_queue {};
  template <typename, int> friend struct __BYPASS__wait_queue;
 unsigned int flags;

 void *_private;
 wait_queue_func_t func;
 struct list_head task_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct wait_bit_key {
  template <typename, int = 0> struct __BYPASSwait_bit_key {};
  template <typename, int> friend struct __BYPASSwait_bit_key;
 void *flags;
 int bit_nr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct wait_bit_queue {
  template <typename, int = 0> struct __BYPASSwait_bit_queue {};
  template <typename, int> friend struct __BYPASSwait_bit_queue;
 struct wait_bit_key key;
 wait_queue_t wait;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct __wait_queue_head {
  template <typename, int = 0> struct __BYPASS__wait_queue_head {};
  template <typename, int> friend struct __BYPASS__wait_queue_head;
 spinlock_t lock;
 struct list_head task_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct __wait_queue_head wait_queue_head_t;

struct task_struct;
extern void init_waitqueue_head(wait_queue_head_t *q);
static inline void init_waitqueue_entry(wait_queue_t *q, struct task_struct *p)
{
 q->flags = 0;
 q->_private = p;
 q->func = default_wake_function;
}

static inline void init_waitqueue_func_entry(wait_queue_t *q,
     wait_queue_func_t func)
{
 q->flags = 0;
 q->_private = 0;
 q->func = func;
}

static inline int waitqueue_active(wait_queue_head_t *q)
{
 return !list_empty(&q->task_list);
}
extern void add_wait_queue(wait_queue_head_t *q, wait_queue_t *wait);
extern void add_wait_queue_exclusive(wait_queue_head_t *q, wait_queue_t *wait);
extern void remove_wait_queue(wait_queue_head_t *q, wait_queue_t *wait);

static inline void __add_wait_queue(wait_queue_head_t *head, wait_queue_t *_new)
{
 list_add(&_new->task_list, &head->task_list);
}




static inline void __add_wait_queue_tail(wait_queue_head_t *head,
      wait_queue_t *_new)
{
 list_add_tail(&_new->task_list, &head->task_list);
}

static inline void __remove_wait_queue(wait_queue_head_t *head,
       wait_queue_t *old)
{
 list_del(&old->task_list);
}

void __wake_up_common(wait_queue_head_t *q, unsigned int mode,
   int nr_exclusive, int sync, void *key);
void __wake_up(wait_queue_head_t *q, unsigned int mode, int nr, void *key);
extern void __wake_up_locked(wait_queue_head_t *q, unsigned int mode);
extern void __wake_up_sync(wait_queue_head_t *q, unsigned int mode, int nr);
void __wake_up_bit(wait_queue_head_t *, void *, int);
int __wait_on_bit(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned);
int __wait_on_bit_lock(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned);
void wake_up_bit(void *, int);
int out_of_line_wait_on_bit(void *, int, int (*)(void *), unsigned);
int out_of_line_wait_on_bit_lock(void *, int, int (*)(void *), unsigned);
wait_queue_head_t *bit_waitqueue(void *, int);
static inline void add_wait_queue_exclusive_locked(wait_queue_head_t *q,
         wait_queue_t * wait)
{
 wait->flags |= 0x01;
 __add_wait_queue_tail(q, wait);
}




static inline void remove_wait_queue_locked(wait_queue_head_t *q,
         wait_queue_t * wait)
{
 __remove_wait_queue(q, wait);
}






extern void sleep_on(wait_queue_head_t *q);
extern long sleep_on_timeout(wait_queue_head_t *q,
          signed long timeout);
extern void interruptible_sleep_on(wait_queue_head_t *q);
extern long interruptible_sleep_on_timeout(wait_queue_head_t *q,
        signed long timeout);




void prepare_to_wait(wait_queue_head_t *q, wait_queue_t *wait, int state);
void prepare_to_wait_exclusive(wait_queue_head_t *q, wait_queue_t *wait, int state);
void finish_wait(wait_queue_head_t *q, wait_queue_t *wait);
void abort_exclusive_wait(wait_queue_head_t *q, wait_queue_t *wait,
   unsigned int mode, void *key);
int autoremove_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key);
int wake_bit_function(wait_queue_t *wait, unsigned mode, int sync, void *key);
static inline int wait_on_bit(void *word, int bit,
    int (*action)(void *), unsigned mode)
{
        if (!(__builtin_constant_p((bit)) ? constant_test_bit((bit), ((unsigned long *)word)) : variable_test_bit((bit), ((unsigned long *)word))))
  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
static inline int wait_on_bit_lock(void *word, int bit,
    int (*action)(void *), unsigned mode)
{
 if (!test_and_set_bit(bit, (unsigned long *)word))
  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}




typedef struct {
 unsigned sequence;
 spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} seqlock_t;
static inline void write_seqlock(seqlock_t *sl)
{
 ;
 ++sl->sequence;
 ;
}

static inline void write_sequnlock(seqlock_t *sl)
{
 ;
 sl->sequence++;
 ;
}

static inline int write_tryseqlock(seqlock_t *sl)
{
 int ret = 1;

 if (ret) {
  ++sl->sequence;
  ;
 }
 return ret;
}
typedef struct seqcount {
  template <typename, int = 0> struct __BYPASSseqcount {};
  template <typename, int> friend struct __BYPASSseqcount;
 unsigned sequence;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} seqcount_t;





static inline unsigned read_seqcount_begin( seqcount_t *s)
{
 unsigned ret;

repeat:
 ret = s->sequence;
 ;
 if (__builtin_expect(!!(ret & 1), 0)) {
  cpu_relax();
  goto repeat;
 }
 return ret;
}




static inline int read_seqcount_retry( seqcount_t *s, unsigned start)
{
 ;

 return s->sequence != start;
}






static inline void write_seqcount_begin(seqcount_t *s)
{
 s->sequence++;
 ;
}

static inline void write_seqcount_end(seqcount_t *s)
{
 ;
 s->sequence++;
}
typedef struct { unsigned long bits[((((1 << 9)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} nodemask_t;
extern nodemask_t _unused_nodemask_arg_;


static inline void __node_set(int node, nodemask_t *dstp)
{
 set_bit(node, dstp->bits);
}


static inline void __node_clear(int node, nodemask_t *dstp)
{
 clear_bit(node, dstp->bits);
}


static inline void __nodes_setall(nodemask_t *dstp, int nbits)
{
 bitmap_fill(dstp->bits, nbits);
}


static inline void __nodes_clear(nodemask_t *dstp, int nbits)
{
 bitmap_zero(dstp->bits, nbits);
}






static inline int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, addr->bits);
}



static inline void __nodes_and(nodemask_t *dstp, nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 bitmap_and(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline void __nodes_or(nodemask_t *dstp, nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 bitmap_or(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline void __nodes_xor(nodemask_t *dstp, nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 bitmap_xor(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline void __nodes_andnot(nodemask_t *dstp, nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 bitmap_andnot(dstp->bits, src1p->bits, src2p->bits, nbits);
}



static inline void __nodes_complement(nodemask_t *dstp,
     nodemask_t *srcp, int nbits)
{
 bitmap_complement(dstp->bits, srcp->bits, nbits);
}



static inline int __nodes_equal( nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 return bitmap_equal(src1p->bits, src2p->bits, nbits);
}



static inline int __nodes_intersects( nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 return bitmap_intersects(src1p->bits, src2p->bits, nbits);
}



static inline int __nodes_subset( nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 return bitmap_subset(src1p->bits, src2p->bits, nbits);
}


static inline int __nodes_empty( nodemask_t *srcp, int nbits)
{
 return bitmap_empty(srcp->bits, nbits);
}


static inline int __nodes_full( nodemask_t *srcp, int nbits)
{
 return bitmap_full(srcp->bits, nbits);
}


static inline int __nodes_weight( nodemask_t *srcp, int nbits)
{
 return bitmap_weight(srcp->bits, nbits);
}



static inline void __nodes_shift_right(nodemask_t *dstp,
     nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(dstp->bits, srcp->bits, n, nbits);
}



static inline void __nodes_shift_left(nodemask_t *dstp,
     nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(dstp->bits, srcp->bits, n, nbits);
}





static inline int __first_node( nodemask_t *srcp)
{
 return ({ int __min1 = ((1 << 9)); int __min2 = (find_first_bit(srcp->bits, (1 << 9))); __min1 < __min2 ? __min1: __min2; });
}


static inline int __next_node(int n, nodemask_t *srcp)
{
 return ({ int __min1 = ((1 << 9)); int __min2 = (find_next_bit(srcp->bits, (1 << 9), n+1)); __min1 < __min2 ? __min1: __min2; });
}
static inline int __first_unset_node( nodemask_t *maskp)
{
 return ({ int __min1 = ((1 << 9)); int __min2 = (find_first_zero_bit(maskp->bits, (1 << 9))); __min1 < __min2 ? __min1: __min2; })
                                                  ;
}
static inline int __nodemask_scnprintf(char *buf, int len,
     nodemask_t *srcp, int nbits)
{
 return bitmap_scnprintf(buf, len, srcp->bits, nbits);
}



static inline int __nodemask_parse_user( char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, dstp->bits, nbits);
}



static inline int __nodelist_scnprintf(char *buf, int len,
     nodemask_t *srcp, int nbits)
{
 return bitmap_scnlistprintf(buf, len, srcp->bits, nbits);
}


static inline int __nodelist_parse( char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, dstp->bits, nbits);
}



static inline int __node_remap(int oldbit,
  nodemask_t *oldp, nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, oldp->bits, newp->bits, nbits);
}



static inline void __nodes_remap(nodemask_t *dstp, nodemask_t *srcp,
  nodemask_t *oldp, nodemask_t *newp, int nbits)
{
 bitmap_remap(dstp->bits, srcp->bits, oldp->bits, newp->bits, nbits);
}



static inline void __nodes_onto(nodemask_t *dstp, nodemask_t *origp,
  nodemask_t *relmapp, int nbits)
{
 bitmap_onto(dstp->bits, origp->bits, relmapp->bits, nbits);
}



static inline void __nodes_fold(nodemask_t *dstp, nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(dstp->bits, origp->bits, sz, nbits);
}
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,

 N_CPU,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];


static inline int node_state(int node, enum node_states state)
{
 return (__builtin_constant_p(((node))) ? constant_test_bit(((node)), ((node_states[state]).bits)) : variable_test_bit(((node)), ((node_states[state]).bits)));
}

static inline void node_set_state(int node, enum node_states state)
{
 __node_set(node, &node_states[state]);
}

static inline void node_clear_state(int node, enum node_states state)
{
 __node_clear(node, &node_states[state]);
}

static inline int num_node_state(enum node_states state)
{
 return __nodes_weight(&(node_states[state]), (1 << 9));
}







extern int nr_node_ids;
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,

 NR_PAGEBLOCK_BITS
};
struct page;


unsigned long get_pageblock_flags_group(struct page *page,
     int start_bitidx, int end_bitidx);
void set_pageblock_flags_group(struct page *page, unsigned long flags,
     int start_bitidx, int end_bitidx);
extern int page_group_by_mobility_disabled;

static inline int get_pageblock_migratetype(struct page *page)
{
 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return 0;

 return get_pageblock_flags_group(page, PB_migrate, PB_migrate_end);
}

struct free_area {
  template <typename, int = 0> struct __BYPASSfree_area {};
  template <typename, int> friend struct __BYPASSfree_area;
 struct list_head free_list[5];
 unsigned long nr_free;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pglist_data;
struct zone_padding {
  template <typename, int = 0> struct __BYPASSzone_padding {};
  template <typename, int> friend struct __BYPASSzone_padding;
 char x[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(1 << ((7)))));





enum zone_stat_item {

 NR_FREE_PAGES,
 NR_INACTIVE,
 NR_ACTIVE,
 NR_ANON_PAGES,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,

 NR_SLAB_RECLAIMABLE,
 NR_SLAB_UNRECLAIMABLE,
 NR_PAGETABLE,
 NR_UNSTABLE_NFS,
 NR_BOUNCE,
 NR_VMSCAN_WRITE,
 NR_WRITEBACK_TEMP,

 NUMA_HIT,
 NUMA_MISS,
 NUMA_FOREIGN,
 NUMA_INTERLEAVE_HIT,
 NUMA_LOCAL,
 NUMA_OTHER,

 NR_VM_ZONE_STAT_ITEMS };

struct per_cpu_pages {
  template <typename, int = 0> struct __BYPASSper_cpu_pages {};
  template <typename, int> friend struct __BYPASSper_cpu_pages;
 int count;
 int high;
 int batch;
 struct list_head list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct per_cpu_pageset {
  template <typename, int = 0> struct __BYPASSper_cpu_pageset {};
  template <typename, int> friend struct __BYPASSper_cpu_pageset;
 struct per_cpu_pages pcp;

 s8 expire;


 s8 stat_threshold;
 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));
enum zone_type {
 ZONE_DMA,







 ZONE_DMA32,






 ZONE_NORMAL,
 ZONE_MOVABLE,
 __MAX_NR_ZONES
};
struct zone {
  template <typename, int = 0> struct __BYPASSzone {};
  template <typename, int> friend struct __BYPASSzone;

 unsigned long pages_min, pages_low, pages_high;
 unsigned long lowmem_reserve[4];


 int node;



 unsigned long min_unmapped_pages;
 unsigned long min_slab_pages;
 struct per_cpu_pageset *pageset[64];






 spinlock_t lock;




 struct free_area free_area[11];
 struct zone_padding _pad1_;


 spinlock_t lru_lock;
 struct list_head active_list;
 struct list_head inactive_list;
 unsigned long nr_scan_active;
 unsigned long nr_scan_inactive;
 unsigned long pages_scanned;
 unsigned long flags;


 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];
 int prev_priority;


 struct zone_padding _pad2_;
 wait_queue_head_t * wait_table;
 unsigned long wait_table_hash_nr_entries;
 unsigned long wait_table_bits;




 struct pglist_data *zone_pgdat;

 unsigned long zone_start_pfn;
 unsigned long spanned_pages;
 unsigned long present_pages;




 char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(1 << ((7)))));

typedef enum {
 ZONE_ALL_UNRECLAIMABLE,
 ZONE_RECLAIM_LOCKED,
 ZONE_OOM_LOCKED,
} zone_flags_t;

static inline void zone_set_flag(struct zone *zone, zone_flags_t flag)
{
 set_bit(flag, &zone->flags);
}

static inline int zone_test_and_set_flag(struct zone *zone, zone_flags_t flag)
{
 return test_and_set_bit(flag, &zone->flags);
}

static inline void zone_clear_flag(struct zone *zone, zone_flags_t flag)
{
 clear_bit(flag, &zone->flags);
}

static inline int zone_is_all_unreclaimable( struct zone *zone)
{
 return (__builtin_constant_p((ZONE_ALL_UNRECLAIMABLE)) ? constant_test_bit((ZONE_ALL_UNRECLAIMABLE), (&zone->flags)) : variable_test_bit((ZONE_ALL_UNRECLAIMABLE), (&zone->flags)));
}

static inline int zone_is_reclaim_locked( struct zone *zone)
{
 return (__builtin_constant_p((ZONE_RECLAIM_LOCKED)) ? constant_test_bit((ZONE_RECLAIM_LOCKED), (&zone->flags)) : variable_test_bit((ZONE_RECLAIM_LOCKED), (&zone->flags)));
}

static inline int zone_is_oom_locked( struct zone *zone)
{
 return (__builtin_constant_p((ZONE_OOM_LOCKED)) ? constant_test_bit((ZONE_OOM_LOCKED), (&zone->flags)) : variable_test_bit((ZONE_OOM_LOCKED), (&zone->flags)));
}
struct zonelist_cache {
  template <typename, int = 0> struct __BYPASSzonelist_cache {};
  template <typename, int> friend struct __BYPASSzonelist_cache;
 unsigned short z_to_n[((1 << 9) * 4)];
 unsigned long fullzones[(((((1 << 9) * 4)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
 unsigned long last_full_zap;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct zoneref {
  template <typename, int = 0> struct __BYPASSzoneref {};
  template <typename, int> friend struct __BYPASSzoneref;
 struct zone *zone;
 int zone_idx;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct zonelist {
  template <typename, int = 0> struct __BYPASSzonelist {};
  template <typename, int> friend struct __BYPASSzonelist;
 struct zonelist_cache *zlcache_ptr;
 struct zoneref _zonerefs[((1 << 9) * 4) + 1];

 struct zonelist_cache zlcache;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct node_active_region {
  template <typename, int = 0> struct __BYPASSnode_active_region {};
  template <typename, int> friend struct __BYPASSnode_active_region;
 unsigned long start_pfn;
 unsigned long end_pfn;
 int nid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern struct page *mem_map;
struct bootmem_data;
typedef struct pglist_data {
  template <typename, int = 0> struct __BYPASSpglist_data {};
  template <typename, int> friend struct __BYPASSpglist_data;
 struct zone node_zones[4];
 struct zonelist node_zonelists[2];
 int nr_zones;



 struct bootmem_data *bdata;
 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 wait_queue_head_t kswapd_wait;
 struct task_struct *kswapd;
 int kswapd_max_order;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} pg_data_t;




struct mutex {
  template <typename, int = 0> struct __BYPASSmutex {};
  template <typename, int> friend struct __BYPASSmutex;

 atomic_t count;
 spinlock_t wait_lock;
 struct list_head wait_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct mutex_waiter {
  template <typename, int = 0> struct __BYPASSmutex_waiter {};
  template <typename, int> friend struct __BYPASSmutex_waiter;
 struct list_head list;
 struct task_struct *task;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rw_semaphore;


struct rwsem_waiter;
struct rw_semaphore {
  template <typename, int = 0> struct __BYPASSrw_semaphore {};
  template <typename, int> friend struct __BYPASSrw_semaphore;
 __s32 activity;
 spinlock_t wait_lock;
 struct list_head wait_list;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void __init_rwsem(struct rw_semaphore *sem, char *name,
    struct lock_class_key *key);
extern void __down_read(struct rw_semaphore *sem);
extern int __down_read_trylock(struct rw_semaphore *sem);
extern void __down_write(struct rw_semaphore *sem);
extern void __down_write_nested(struct rw_semaphore *sem, int subclass);
extern int __down_write_trylock(struct rw_semaphore *sem);
extern void __up_read(struct rw_semaphore *sem);
extern void __up_write(struct rw_semaphore *sem);
extern void __downgrade_write(struct rw_semaphore *sem);

static inline int rwsem_is_locked(struct rw_semaphore *sem)
{
 return (sem->activity != 0);
}
struct srcu_struct_array {
  template <typename, int = 0> struct __BYPASSsrcu_struct_array {};
  template <typename, int> friend struct __BYPASSsrcu_struct_array;
 int c[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct srcu_struct {
  template <typename, int = 0> struct __BYPASSsrcu_struct {};
  template <typename, int> friend struct __BYPASSsrcu_struct;
 int completed;
 struct srcu_struct_array *per_cpu_ref;
 struct mutex mutex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







int init_srcu_struct(struct srcu_struct *sp);
void cleanup_srcu_struct(struct srcu_struct *sp);
int srcu_read_lock(struct srcu_struct *sp) ;
void srcu_read_unlock(struct srcu_struct *sp, int idx) ;
void synchronize_srcu(struct srcu_struct *sp);
long srcu_batches_completed(struct srcu_struct *sp);
struct notifier_block {
  template <typename, int = 0> struct __BYPASSnotifier_block {};
  template <typename, int> friend struct __BYPASSnotifier_block;
 int (*notifier_call)(struct notifier_block *, unsigned long, void *);
 struct notifier_block *next;
 int priority;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct atomic_notifier_head {
  template <typename, int = 0> struct __BYPASSatomic_notifier_head {};
  template <typename, int> friend struct __BYPASSatomic_notifier_head;
 spinlock_t lock;
 struct notifier_block *head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct blocking_notifier_head {
  template <typename, int = 0> struct __BYPASSblocking_notifier_head {};
  template <typename, int> friend struct __BYPASSblocking_notifier_head;
 struct rw_semaphore rwsem;
 struct notifier_block *head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct raw_notifier_head {
  template <typename, int = 0> struct __BYPASSraw_notifier_head {};
  template <typename, int> friend struct __BYPASSraw_notifier_head;
 struct notifier_block *head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct srcu_notifier_head {
  template <typename, int = 0> struct __BYPASSsrcu_notifier_head {};
  template <typename, int> friend struct __BYPASSsrcu_notifier_head;
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int blocking_notifier_chain_cond_register(
  struct blocking_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int __atomic_notifier_call_chain(struct atomic_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int __blocking_notifier_call_chain(struct blocking_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int __raw_notifier_call_chain(struct raw_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);
extern int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
static inline int notifier_from_errno(int err)
{
 return 0x8000 | (0x0001 - err);
}


static inline int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
extern struct blocking_notifier_head reboot_notifier_list;

struct page;
struct zone;
struct pglist_data;
struct mem_section;
static inline void pgdat_resize_lock(struct pglist_data *p, unsigned long *f) {}
static inline void pgdat_resize_unlock(struct pglist_data *p, unsigned long *f) {}
static inline void pgdat_resize_init(struct pglist_data *pgdat) {}

static inline unsigned zone_span_seqbegin(struct zone *zone)
{
 return 0;
}
static inline int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return 0;
}
static inline void zone_span_writelock(struct zone *zone) {}
static inline void zone_span_writeunlock(struct zone *zone) {}
static inline void zone_seqlock_init(struct zone *zone) {}

static inline int mhp_notimplemented( char *func)
{
 printk("<4>" "%s() called, with CONFIG_MEMORY_HOTPLUG disabled\n", func);
 dump_stack();
 return -38;
}

static inline void register_page_bootmem_info_node(struct pglist_data *pgdat)
{
}







extern int walk_memory_resource(unsigned long start_pfn,
   unsigned long nr_pages, void *arg,
   int (*func)(unsigned long, unsigned long, void *));






static inline int is_mem_section_removable(unsigned long pfn,
     unsigned long nr_pages)
{
 return 0;
}


extern int add_memory(int nid, u64 start, u64 size);
extern int arch_add_memory(int nid, u64 start, u64 size);
extern int remove_memory(u64 start, u64 size);
extern int sparse_add_one_section(struct zone *zone, unsigned long start_pfn,
        int nr_pages);
extern void sparse_remove_one_section(struct zone *zone, struct mem_section *ms);
extern struct page *sparse_decode_mem_map(unsigned long coded_mem_map,
       unsigned long pnum);

void get_zone_counts(unsigned long *active, unsigned long *inactive,
   unsigned long *free);
void build_all_zonelists(void);
void wakeup_kswapd(struct zone *zone, int order);
int zone_watermark_ok(struct zone *z, int order, unsigned long mark,
  int classzone_idx, int alloc_flags);
enum memmap_context {
 MEMMAP_EARLY,
 MEMMAP_HOTPLUG,
};
extern int init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size,
         enum memmap_context context);


void memory_present(int nid, unsigned long start, unsigned long end);
static inline int populated_zone(struct zone *zone)
{
 return (!!zone->present_pages);
}

extern int movable_zone;

static inline int zone_movable_is_highmem(void)
{



 return 0;

}

static inline int is_highmem_idx(enum zone_type idx)
{




 return 0;

}

static inline int is_normal_idx(enum zone_type idx)
{
 return (idx == ZONE_NORMAL);
}







static inline int is_highmem(struct zone *zone)
{






 return 0;

}

static inline int is_normal(struct zone *zone)
{
 return zone == zone->zone_pgdat->node_zones + ZONE_NORMAL;
}

static inline int is_dma32(struct zone *zone)
{

 return zone == zone->zone_pgdat->node_zones + ZONE_DMA32;



}

static inline int is_dma(struct zone *zone)
{

 return zone == zone->zone_pgdat->node_zones + ZONE_DMA;



}


struct ctl_table;
struct file;
int min_free_kbytes_sysctl_handler(struct ctl_table *, int, struct file *,
     void *, size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[4 -1];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, struct file *,
     void *, size_t *, loff_t *);
int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *, int, struct file *,
     void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
   struct file *, void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
   struct file *, void *, size_t *, loff_t *);

extern int numa_zonelist_order_handler(struct ctl_table *, int,
   struct file *, void *, size_t *, loff_t *);
extern char numa_zonelist_order[];


extern void cpu_idle(void);

struct call_single_data {
  template <typename, int = 0> struct __BYPASScall_single_data {};
  template <typename, int> friend struct __BYPASScall_single_data;
 struct list_head list;
 void (*func) (void *info);
 void *info;
 unsigned int flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};












struct intel_mp_floating {
  template <typename, int = 0> struct __BYPASSintel_mp_floating {};
  template <typename, int> friend struct __BYPASSintel_mp_floating;
 char mpf_signature[4];
 unsigned int mpf_physptr;
 unsigned char mpf_length;
 unsigned char mpf_specification;
 unsigned char mpf_checksum;
 unsigned char mpf_feature1;
 unsigned char mpf_feature2;
 unsigned char mpf_feature3;
 unsigned char mpf_feature4;
 unsigned char mpf_feature5;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct mp_config_table {
  template <typename, int = 0> struct __BYPASSmp_config_table {};
  template <typename, int> friend struct __BYPASSmp_config_table;
 char mpc_signature[4];
 unsigned short mpc_length;
 char mpc_spec;
 char mpc_checksum;
 char mpc_oem[8];
 char mpc_productid[12];
 unsigned int mpc_oemptr;
 unsigned short mpc_oemsize;
 unsigned short mpc_oemcount;
 unsigned int mpc_lapic;
 unsigned int reserved;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct mpc_config_processor {
  template <typename, int = 0> struct __BYPASSmpc_config_processor {};
  template <typename, int> friend struct __BYPASSmpc_config_processor;
 unsigned char mpc_type;
 unsigned char mpc_apicid;
 unsigned char mpc_apicver;
 unsigned char mpc_cpuflag;
 unsigned int mpc_cpufeature;
 unsigned int mpc_featureflag;
 unsigned int mpc_reserved[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct mpc_config_bus {
  template <typename, int = 0> struct __BYPASSmpc_config_bus {};
  template <typename, int> friend struct __BYPASSmpc_config_bus;
 unsigned char mpc_type;
 unsigned char mpc_busid;
 unsigned char mpc_bustype[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct mpc_config_ioapic {
  template <typename, int = 0> struct __BYPASSmpc_config_ioapic {};
  template <typename, int> friend struct __BYPASSmpc_config_ioapic;
 unsigned char mpc_type;
 unsigned char mpc_apicid;
 unsigned char mpc_apicver;
 unsigned char mpc_flags;
 unsigned int mpc_apicaddr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct mpc_config_intsrc {
  template <typename, int = 0> struct __BYPASSmpc_config_intsrc {};
  template <typename, int> friend struct __BYPASSmpc_config_intsrc;
 unsigned char mpc_type;
 unsigned char mpc_irqtype;
 unsigned short mpc_irqflag;
 unsigned char mpc_srcbus;
 unsigned char mpc_srcbusirq;
 unsigned char mpc_dstapic;
 unsigned char mpc_dstirq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum mp_irq_source_types {
 mp_INT = 0,
 mp_NMI = 1,
 mp_SMI = 2,
 mp_ExtINT = 3
};







struct mpc_config_lintsrc {
  template <typename, int = 0> struct __BYPASSmpc_config_lintsrc {};
  template <typename, int> friend struct __BYPASSmpc_config_lintsrc;
 unsigned char mpc_type;
 unsigned char mpc_irqtype;
 unsigned short mpc_irqflag;
 unsigned char mpc_srcbusid;
 unsigned char mpc_srcbusirq;
 unsigned char mpc_destapic;
 unsigned char mpc_destapiclint;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct mp_config_oemtable {
  template <typename, int = 0> struct __BYPASSmp_config_oemtable {};
  template <typename, int> friend struct __BYPASSmp_config_oemtable;
 char oem_signature[4];
 unsigned short oem_length;
 char oem_rev;
 char oem_checksum;
 char mpc_oem[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum mp_bustype {
 MP_BUS_ISA = 1,
 MP_BUS_EISA,
 MP_BUS_PCI,
 MP_BUS_MCA,
};
extern void early_find_smp_config(void);
extern void early_get_smp_config(void);





extern unsigned long mp_bus_not_pci[(((256) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];

extern unsigned int boot_cpu_physical_apicid;
extern unsigned int max_physical_apicid;
extern int smp_found_config;
extern int mpc_default_type;
extern unsigned long mp_lapic_addr;

extern void find_smp_config(void);
extern void get_smp_config(void);

extern void early_reserve_e820_mpc_new(void);




void __attribute__ ((__section__(".cpuinit.text"))) __attribute__((__cold__)) generic_processor_info(int apicid, int version);

extern void mp_register_ioapic(int id, u32 address, u32 gsi_base);
extern void mp_override_legacy_irq(u8 bus_irq, u8 polarity, u8 trigger,
       u32 gsi);
extern void mp_config_acpi_legacy_irqs(void);
extern int mp_register_gsi(u32 gsi, int edge_level, int active_high_low);

extern int mp_config_acpi_gsi(unsigned char number, unsigned int devfn, u8 pin,
    u32 gsi, int triggering, int polarity);
struct physid_mask {
  template <typename, int = 0> struct __BYPASSphysid_mask {};
  template <typename, int> friend struct __BYPASSphysid_mask;
 unsigned long mask[(((255) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef struct physid_mask physid_mask_t;
static inline void physid_set_mask_of_physid(int physid, physid_mask_t *map)
{
 bitmap_zero((*map).mask, 255);
 set_bit(physid, (*map).mask);
}




extern physid_mask_t phys_cpu_present_map;



extern void (*pm_idle)(void);
extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);





struct device;

typedef struct pm_message {
  template <typename, int = 0> struct __BYPASSpm_message {};
  template <typename, int> friend struct __BYPASSpm_message;
 int event;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} pm_message_t;
struct pm_ops {
  template <typename, int = 0> struct __BYPASSpm_ops {};
  template <typename, int> friend struct __BYPASSpm_ops;
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct pm_ext_ops {
  template <typename, int = 0> struct __BYPASSpm_ext_ops {};
  template <typename, int> friend struct __BYPASSpm_ext_ops;
 struct pm_ops base;
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum dpm_state {
 DPM_INVALID,
 DPM_ON,
 DPM_PREPARING,
 DPM_RESUMING,
 DPM_SUSPENDING,
 DPM_OFF,
 DPM_OFF_IRQ,
};

struct dev_pm_info {
  template <typename, int = 0> struct __BYPASSdev_pm_info {};
  template <typename, int> friend struct __BYPASSdev_pm_info;
 pm_message_t power_state;
 unsigned can_wakeup:1;
 unsigned should_wakeup:1;
 enum dpm_state status;

 struct list_head entry;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void device_pm_lock(void);
extern void device_power_up(pm_message_t state);
extern void device_resume(pm_message_t state);

extern void device_pm_unlock(void);
extern int device_power_down(pm_message_t state);
extern int device_suspend(pm_message_t state);
extern int device_prepare_suspend(pm_message_t state);

extern void __suspend_report_result( char *function, void *fn, int ret);
extern unsigned int pm_flags;
extern unsigned long loops_per_jiffy;

extern void __bad_udelay(void);
extern void __bad_ndelay(void);

extern void __udelay(unsigned long usecs);
extern void __ndelay(unsigned long nsecs);
extern void __const_udelay(unsigned long xloops);
extern void __delay(unsigned long loops);
void use_tsc_delay(void);
extern unsigned long lpj_fine;
void calibrate_delay(void);
void msleep(unsigned int msecs);
unsigned long msleep_interruptible(unsigned int msecs);

static inline void ssleep(unsigned int seconds)
{
 msleep(seconds * 1000);
}
















struct local_apic {
  template <typename, int = 0> struct __BYPASSlocal_apic {};
  template <typename, int> friend struct __BYPASSlocal_apic;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_01;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_02;

        struct {
  unsigned int __reserved_1 : 24,
   phys_apic_id : 4,
   __reserved_2 : 4;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} id;

       
 struct {
  unsigned int version : 8,
   __reserved_1 : 8,
   max_lvt : 8,
   __reserved_2 : 8;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} version;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_03;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_04;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_05;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_06;

        struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} tpr;

       
 struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} apr;

       
 struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ppr;

        struct {
  unsigned int eoi;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} eoi;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_07;

        struct {
  unsigned int __reserved_1 : 24,
   logical_dest : 8;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ldr;

        struct {
  unsigned int __reserved_1 : 28,
   model : 4;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} dfr;

        struct {
  unsigned int spurious_vector : 8,
   apic_enabled : 1,
   focus_cpu : 1,
   __reserved_2 : 22;
  unsigned int __reserved_3[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} svr;

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} isr [8];

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} tmr [8];

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} irr [8];

        union {
  struct {
   unsigned int send_cs_error : 1,
    receive_cs_error : 1,
    send_accept_error : 1,
    receive_accept_error : 1,
    __reserved_1 : 1,
    send_illegal_vector : 1,
    receive_illegal_vector : 1,
    illegal_register_address : 1,
    __reserved_2 : 24;
   unsigned int __reserved_3[3];
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} error_bits;
  struct {
   unsigned int errors;
   unsigned int __reserved_3[3];
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} all_errors;
 } esr;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_08;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_09;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_10;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_11;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_12;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_13;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_14;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   destination_mode : 1,
   delivery_status : 1,
   __reserved_1 : 1,
   level : 1,
   trigger : 1,
   __reserved_2 : 2,
   shorthand : 2,
   __reserved_3 : 12;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icr1;

        struct {
  union {
   unsigned int __reserved_1 : 24,
    phys_dest : 4,
    __reserved_2 : 4;
   unsigned int __reserved_3 : 24,
    logical_dest : 8;
  } dest;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icr2;

        struct {
  unsigned int vector : 8,
   __reserved_1 : 4,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   timer_mode : 1,
   __reserved_3 : 14;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_timer;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_thermal;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_pc;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   polarity : 1,
   remote_irr : 1,
   trigger : 1,
   mask : 1,
   __reserved_2 : 15;
  unsigned int __reserved_3[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_lint0;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   polarity : 1,
   remote_irr : 1,
   trigger : 1,
   mask : 1,
   __reserved_2 : 15;
  unsigned int __reserved_3[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_lint1;

        struct {
  unsigned int vector : 8,
   __reserved_1 : 4,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_error;

        struct {
  unsigned int initial_count;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} timer_icr;

       
 struct {
  unsigned int curr_count;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} timer_ccr;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_16;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_17;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_18;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_19;

        struct {
  unsigned int divisor : 4,
   __reserved_1 : 28;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} timer_dcr;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_20;


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed));

struct bootnode {
  template <typename, int = 0> struct __BYPASSbootnode {};
  template <typename, int> friend struct __BYPASSbootnode;
 u64 start;
 u64 end;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int compute_hash_shift(struct bootnode *nodes, int numblks,
         int *nodeids);



extern void numa_init_array(void);
extern int numa_off;

extern void srat_reserve_add_area(int nodeid);
extern int hotadd_percent;

extern s16 apicid_to_node[32768];

extern unsigned long numa_free_all_bootmem(void);
extern void setup_node_bootmem(int nodeid, unsigned long start,
          unsigned long end);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) init_cpu_to_node(void);
extern void __attribute__ ((__section__(".cpuinit.text"))) __attribute__((__cold__)) numa_set_node(int cpu, int node);
extern void __attribute__ ((__section__(".cpuinit.text"))) __attribute__((__cold__)) numa_clear_node(int cpu);
extern void __attribute__ ((__section__(".cpuinit.text"))) __attribute__((__cold__)) numa_add_cpu(int cpu);
extern void __attribute__ ((__section__(".cpuinit.text"))) __attribute__((__cold__)) numa_remove_cpu(int cpu);

typedef struct {
 void *ldt;

 rwlock_t ldtlock;

 int size;
 struct mutex lock;
 void *vdso;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} mm_context_t;


void leave_mm(int cpu);
int __acpi_acquire_global_lock(unsigned int *lock);
int __acpi_release_global_lock(unsigned int *lock);
extern int acpi_lapic;
extern int acpi_ioapic;
extern int acpi_noirq;
extern int acpi_strict;
extern int acpi_disabled;
extern int acpi_ht;
extern int acpi_pci_disabled;
extern int acpi_skip_timer_override;
extern int acpi_use_timer_override;

extern u8 acpi_sci_flags;
extern int acpi_sci_override_gsi;
void acpi_pic_sci_set_trigger(unsigned int, u16);

static inline void disable_acpi(void)
{
 acpi_disabled = 1;
 acpi_ht = 0;
 acpi_pci_disabled = 1;
 acpi_noirq = 1;
}




extern int acpi_gsi_to_irq(u32 gsi, unsigned int *irq);

static inline void acpi_noirq_set(void) { acpi_noirq = 1; }
static inline void acpi_disable_pci(void)
{
 acpi_pci_disabled = 1;
 acpi_noirq_set();
}
extern int acpi_irq_balance_set(char *str);


extern int acpi_save_state_mem(void);
extern void acpi_restore_state_mem(void);

extern unsigned long acpi_wakeup_address;


extern void acpi_reserve_bootmem(void);




static inline unsigned int acpi_processor_cstate_check(unsigned int max_cstate)
{






 if (boot_cpu_data.x86 == 0x0F &&
     boot_cpu_data.x86_vendor == 2 &&
     boot_cpu_data.x86_model <= 0x05 &&
     boot_cpu_data.x86_mask < 0x0A)
  return 1;
 else if ((__builtin_constant_p((3*32+21)) && ( ((((3*32+21))>>5)==0 && (1UL<<(((3*32+21))&31) & ((1<<((0*32+ 0) & 31))|0|(1<<((0*32+ 5) & 31))|(1<<((0*32+ 6) & 31))| (1<<((0*32+ 8) & 31))|(1<<((0*32+13) & 31))|(1<<((0*32+24) & 31))|(1<<((0*32+15) & 31))| (1<<((0*32+25) & 31))|(1<<((0*32+26) & 31))))) || ((((3*32+21))>>5)==1 && (1UL<<(((3*32+21))&31) & ((1<<((1*32+29) & 31))|0))) || ((((3*32+21))>>5)==2 && (1UL<<(((3*32+21))&31) & 0)) || ((((3*32+21))>>5)==3 && (1UL<<(((3*32+21))&31) & ((1<<((3*32+20) & 31))))) || ((((3*32+21))>>5)==4 && (1UL<<(((3*32+21))&31) & 0)) || ((((3*32+21))>>5)==5 && (1UL<<(((3*32+21))&31) & 0)) || ((((3*32+21))>>5)==6 && (1UL<<(((3*32+21))&31) & 0)) || ((((3*32+21))>>5)==7 && (1UL<<(((3*32+21))&31) & 0)) ) ? 1 : (__builtin_constant_p(((3*32+21))) ? constant_test_bit(((3*32+21)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((3*32+21)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return 1;
 else
  return max_cstate;
}
struct bootnode;


extern int acpi_numa;
extern int acpi_scan_nodes(unsigned long start, unsigned long end);

extern void acpi_fake_nodes( struct bootnode *fake_nodes,
       int num_nodes);





enum vsyscall_num {
 __NR_vgettimeofday,
 __NR_vtime,
 __NR_vgetcpu,
};
extern int __vgetcpu_mode;
extern unsigned long __jiffies;


extern int vgetcpu_mode;
extern struct timezone sys_tz;

extern void map_vsyscall(void);
extern u64 efi_call0(void *fp);
extern u64 efi_call1(void *fp, u64 arg1);
extern u64 efi_call2(void *fp, u64 arg1, u64 arg2);
extern u64 efi_call3(void *fp, u64 arg1, u64 arg2, u64 arg3);
extern u64 efi_call4(void *fp, u64 arg1, u64 arg2, u64 arg3, u64 arg4);
extern u64 efi_call5(void *fp, u64 arg1, u64 arg2, u64 arg3,
       u64 arg4, u64 arg5);
extern u64 efi_call6(void *fp, u64 arg1, u64 arg2, u64 arg3,
       u64 arg4, u64 arg5, u64 arg6);
extern void *efi_ioremap(unsigned long addr, unsigned long size);



extern void efi_reserve_early(void);
extern void efi_call_phys_prelog(void);
extern void efi_call_phys_epilog(void);
enum fixed_addresses {
 VSYSCALL_LAST_PAGE,
 VSYSCALL_FIRST_PAGE = VSYSCALL_LAST_PAGE
       + (((-2UL << 20)-(-10UL << 20)) >> 12) - 1,
 VSYSCALL_HPET,
 FIX_DBGP_BASE,
 FIX_EARLYCON_MEM_BASE,
 FIX_APIC_BASE,
 FIX_IO_APIC_BASE_0,
 FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + 128 - 1,
 FIX_EFI_IO_MAP_LAST_PAGE,
 FIX_EFI_IO_MAP_FIRST_PAGE = FIX_EFI_IO_MAP_LAST_PAGE
      + 100 - 1,

 FIX_PARAVIRT_BOOTMAP,


 FIX_ACPI_BEGIN,
 FIX_ACPI_END = FIX_ACPI_BEGIN + 4 - 1,


 FIX_OHCI1394_BASE,

 __end_of_permanent_fixed_addresses,
 FIX_BTMAP_END = __end_of_permanent_fixed_addresses + 512 -
   (__end_of_permanent_fixed_addresses & 511),
 FIX_BTMAP_BEGIN = FIX_BTMAP_END + 64*4 - 1,
 __end_of_fixed_addresses
};


extern int fixmaps_set;

void __native_set_fixmap(enum fixed_addresses idx, pte_t pte);
void native_set_fixmap(enum fixed_addresses idx,
         unsigned long phys, pgprot_t flags);
extern void __this_fixmap_does_not_exist(void);






static inline __attribute__((always_inline)) unsigned long fix_to_virt( unsigned int idx)
{
 if (idx >= __end_of_fixed_addresses)
  __this_fixmap_does_not_exist();

 return (((-2UL << 20)-((1UL) << 12)) - ((idx) << 12));
}

static inline unsigned long virt_to_fix( unsigned long vaddr)
{
 ;
 return ((((-2UL << 20)-((1UL) << 12)) - ((vaddr)&(~(((1UL) << 12)-1)))) >> 12);
}
extern void generic_apic_probe(void);



extern unsigned int apic_verbosity;
extern int local_apic_timer_c2_ok;

extern int ioapic_force;

extern int disable_apic;
extern int is_vsmp_box(void);

static inline void native_apic_write(unsigned long reg, u32 v)
{
 u32 *addr = ( u32 *)((fix_to_virt(FIX_APIC_BASE)) + reg);

 asm ("661:\n\t" "movl %0, %1" "\n662:\n" ".section .altinstructions,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "661b\n" " " ".quad" " " "663f\n" "	 .byte %c[feat]\n" "	 .byte 662b-661b\n" "	 .byte 664f-663f\n" ".previous\n" ".section .altinstr_replacement,\"ax\"\n" "663:\n\t" "xchgl %0, %1" "\n664:\n" ".previous" : "=r" (v), "=m" (*addr) : [feat] "i" ((3*32+19)), "0" (v), "m" (*addr))

                                           ;
}

static inline u32 native_apic_read(unsigned long reg)
{
 return *(( u32 *)((fix_to_virt(FIX_APIC_BASE)) + reg));
}

extern void apic_wait_icr_idle(void);
extern u32 safe_apic_wait_icr_idle(void);
extern int get_physical_broadcast(void);

static inline void ack_APIC_irq(void)
{
 apic_write(0xB0, 0);
}

extern int lapic_get_maxlvt(void);
extern void clear_local_APIC(void);
extern void connect_bsp_APIC(void);
extern void disconnect_bsp_APIC(int virt_wire_setup);
extern void disable_local_APIC(void);
extern void lapic_shutdown(void);
extern int verify_local_APIC(void);
extern void cache_APIC_registers(void);
extern void sync_Arb_IDs(void);
extern void init_bsp_APIC(void);
extern void setup_local_APIC(void);
extern void end_local_APIC_setup(void);
extern void init_apic_mappings(void);
extern void setup_boot_APIC_clock(void);
extern void setup_secondary_APIC_clock(void);
extern int APIC_init_uniprocessor(void);
extern void enable_NMI_through_LVT0(void);





extern void early_init_lapic_mapping(void);
extern int apic_is_clustered_box(void);







extern u8 setup_APIC_eilvt_mce(u8 vector, u8 msg_type, u8 mask);
extern u8 setup_APIC_eilvt_ibs(u8 vector, u8 msg_type, u8 mask);

union IO_APIC_reg_00 {
 u32 raw;
 struct {
  u32 __reserved_2 : 14,
   LTS : 1,
   delivery_type : 1,
   __reserved_1 : 8,
   ID : 8;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) bits;
};

union IO_APIC_reg_01 {
 u32 raw;
 struct {
  u32 version : 8,
   __reserved_2 : 7,
   PRQ : 1,
   entries : 8,
   __reserved_1 : 8;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) bits;
};

union IO_APIC_reg_02 {
 u32 raw;
 struct {
  u32 __reserved_2 : 24,
   arbitration : 4,
   __reserved_1 : 4;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) bits;
};

union IO_APIC_reg_03 {
 u32 raw;
 struct {
  u32 boot_DT : 1,
   __reserved_1 : 31;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) bits;
};

enum ioapic_irq_destination_types {
 dest_Fixed = 0,
 dest_LowestPrio = 1,
 dest_SMI = 2,
 dest__reserved_1 = 3,
 dest_NMI = 4,
 dest_INIT = 5,
 dest__reserved_2 = 6,
 dest_ExtINT = 7
};

struct IO_APIC_route_entry {
  template <typename, int = 0> struct __BYPASSIO_APIC_route_entry {};
  template <typename, int> friend struct __BYPASSIO_APIC_route_entry;
 __u32 vector : 8,
  delivery_mode : 3,



  dest_mode : 1,
  delivery_status : 1,
  polarity : 1,
  irr : 1,
  trigger : 1,
  mask : 1,
  __reserved_2 : 15;
 __u32 __reserved_3 : 24,
  dest : 8;



  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed));






extern int nr_ioapics;
extern int nr_ioapic_registers[128];







struct mp_config_ioapic {
  template <typename, int = 0> struct __BYPASSmp_config_ioapic {};
  template <typename, int> friend struct __BYPASSmp_config_ioapic;
 unsigned long mp_apicaddr;
 unsigned int mp_apicid;
 unsigned char mp_type;
 unsigned char mp_apicver;
 unsigned char mp_flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct mp_config_intsrc {
  template <typename, int = 0> struct __BYPASSmp_config_intsrc {};
  template <typename, int> friend struct __BYPASSmp_config_intsrc;
 unsigned int mp_dstapic;
 unsigned char mp_type;
 unsigned char mp_irqtype;
 unsigned short mp_irqflag;
 unsigned char mp_srcbus;
 unsigned char mp_srcbusirq;
 unsigned char mp_dstirq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern struct mp_config_ioapic mp_ioapics[128];


extern int mp_irq_entries;


extern struct mp_config_intsrc mp_irqs[(256 * 4)];


extern int mpc_default_type;


extern int sis_apic_bug;


extern int skip_ioapic_setup;


extern int timer_through_8259;

static inline void disable_ioapic_setup(void)
{
 skip_ioapic_setup = 1;
}
extern int io_apic_get_unique_id(int ioapic, int apic_id);
extern int io_apic_get_version(int ioapic);
extern int io_apic_get_redir_entries(int ioapic);
extern int io_apic_set_pci_routing(int ioapic, int pin, int irq,
       int edge_level, int active_high_low);


extern int (*ioapic_renumber_irq)(int ioapic, int irq);
extern void ioapic_init_mappings(void);





extern cpumask_t cpu_callout_map;
extern cpumask_t cpu_initialized;
extern cpumask_t cpu_callin_map;

extern void (*mtrr_hook)(void);
extern void zap_low_mappings(void);

extern int __attribute__ ((__section__(".cpuinit.text"))) __attribute__((__cold__)) get_local_pda(int cpu);

extern int smp_num_siblings;
extern unsigned int num_processors;
extern cpumask_t cpu_initialized;

extern __typeof__(cpumask_t) per_cpu__cpu_sibling_map;
extern __typeof__(cpumask_t) per_cpu__cpu_core_map;
extern __typeof__(u16) per_cpu__cpu_llc_id;

extern __typeof__(u16) per_cpu__x86_cpu_to_apicid; extern __typeof__(u16) *x86_cpu_to_apicid_early_ptr; extern __typeof__(u16) x86_cpu_to_apicid_early_map[];
extern __typeof__(u16) per_cpu__x86_bios_cpu_apicid; extern __typeof__(u16) *x86_bios_cpu_apicid_early_ptr; extern __typeof__(u16) x86_bios_cpu_apicid_early_map[];


extern struct _stack_start {
  template <typename, int = 0> struct __BYPASS_stack_start {};
  template <typename, int> friend struct __BYPASS_stack_start;
 void *sp;
 unsigned short ss;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} stack_start;

struct smp_ops {
  template <typename, int = 0> struct __BYPASSsmp_ops {};
  template <typename, int> friend struct __BYPASSsmp_ops;
 void (*smp_prepare_boot_cpu)(void);
 void (*smp_prepare_cpus)(unsigned max_cpus);
 int (*cpu_up)(unsigned cpu);
 void (*smp_cpus_done)(unsigned max_cpus);

 void (*smp_send_stop)(void);
 void (*smp_send_reschedule)(int cpu);

 void (*send_call_func_ipi)(cpumask_t mask);
 void (*send_call_func_single_ipi)(int cpu);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern void set_cpu_sibling_map(int cpu);





extern struct smp_ops smp_ops;

static inline void smp_send_stop(void)
{
 smp_ops.smp_send_stop();
}

static inline void smp_prepare_boot_cpu(void)
{
 smp_ops.smp_prepare_boot_cpu();
}

static inline void smp_prepare_cpus(unsigned int max_cpus)
{
 smp_ops.smp_prepare_cpus(max_cpus);
}

static inline void smp_cpus_done(unsigned int max_cpus)
{
 smp_ops.smp_cpus_done(max_cpus);
}

static inline int __cpu_up(unsigned int cpu)
{
 return smp_ops.cpu_up(cpu);
}

static inline void smp_send_reschedule(int cpu)
{
 smp_ops.smp_send_reschedule(cpu);
}

static inline void arch_send_call_function_single_ipi(int cpu)
{
 smp_ops.send_call_func_single_ipi(cpu);
}

static inline void arch_send_call_function_ipi(cpumask_t mask)
{
 smp_ops.send_call_func_ipi(mask);
}

void native_smp_prepare_boot_cpu(void);
void native_smp_prepare_cpus(unsigned int max_cpus);
void native_smp_cpus_done(unsigned int max_cpus);
int native_cpu_up(unsigned int cpunum);
void native_send_call_func_ipi(cpumask_t mask);
void native_send_call_func_single_ipi(int cpu);

extern int __cpu_disable(void);
extern void __cpu_die(unsigned int cpu);

void smp_store_cpu_info(int id);



static inline int num_booting_cpus(void)
{
 return __cpus_weight(&(cpu_callout_map), 64);
}



extern void prefill_possible_map(void);






extern unsigned disabled_cpus __attribute__ ((__section__(".cpuinit.data")));
static inline int logical_smp_processor_id(void)
{

 return (((*(u32 *)((fix_to_virt(FIX_APIC_BASE)) + 0xD0)) >> 24) & 0xFFu);
}







extern unsigned int read_apic_id(void);






static inline int hard_smp_processor_id(void)
{

 return (((read_apic_id())>>24)&0xFFu);
}
extern void cpu_uninit(void);
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum);




extern void smp_cpus_done(unsigned int max_cpus);




int smp_call_function(void(*func)(void *info), void *info, int wait);
int smp_call_function_mask(cpumask_t mask, void(*func)(void *info), void *info,
    int wait);
int smp_call_function_single(int cpuid, void (*func) (void *info), void *info,
    int wait);
void __smp_call_function_single(int cpuid, struct call_single_data *data);





void generic_smp_call_function_single_interrupt(void);
void generic_smp_call_function_interrupt(void);
void ipi_call_lock(void);
void ipi_call_unlock(void);
void ipi_call_lock_irq(void);
void ipi_call_unlock_irq(void);





int on_each_cpu(void (*func) (void *info), void *info, int wait);
void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
void smp_setup_processor_id(void);
extern cpumask_t *node_to_cpumask_map;


extern __typeof__(int) per_cpu__x86_cpu_to_node_map; extern __typeof__(int) *x86_cpu_to_node_map_early_ptr; extern __typeof__(int) x86_cpu_to_node_map_early_map[];

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9x8664_pda11data_offsetE_604_0 {
  typedef TJP__ZN9x8664_pda11data_offsetE_604_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9x8664_pda11data_offsetE_604(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9x8664_pda11data_offsetE_604_0< unsigned long int , ::x8664_pda , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__cpu_pda_605_0 {
  typedef TJP__cpu_pda_605_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda * __get__cpu_pda_605(x8664_pda * *source) {
  ::x8664_pda *__result_buffer;
  typedef TJP__cpu_pda_605_0< ::x8664_pda *, void *, ::x8664_pda * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__cpu_pda_606_0 {
  typedef TJP__cpu_pda_606_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return true;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda ** __get__cpu_pda_606(x8664_pda ** *source) {
  ::x8664_pda **__result_buffer;
  typedef TJP__cpu_pda_606_0< ::x8664_pda **, void *, ::x8664_pda ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda **&)__result_buffer;
}
static inline int cpu_to_node(int cpu)
{
 return (*({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((&per_cpu__x86_cpu_to_node_map))); (typeof((&per_cpu__x86_cpu_to_node_map))) (__ptr + ((((__get__ZN9x8664_pda11data_offsetE_604(&(__get__cpu_pda_605(&__get__cpu_pda_606(&_cpu_pda)[cpu]))->data_offset)))))); }));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9x8664_pda11data_offsetE_609_0 {
  typedef TJP__ZN9x8664_pda11data_offsetE_609_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9x8664_pda11data_offsetE_609(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9x8664_pda11data_offsetE_609_0< unsigned long int , ::x8664_pda , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__cpu_pda_610_0 {
  typedef TJP__cpu_pda_610_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda * __get__cpu_pda_610(x8664_pda * *source) {
  ::x8664_pda *__result_buffer;
  typedef TJP__cpu_pda_610_0< ::x8664_pda *, void *, ::x8664_pda * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__cpu_pda_611_0 {
  typedef TJP__cpu_pda_611_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return true;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda ** __get__cpu_pda_611(x8664_pda ** *source) {
  ::x8664_pda **__result_buffer;
  typedef TJP__cpu_pda_611_0< ::x8664_pda **, void *, ::x8664_pda ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda **&)__result_buffer;
}
static inline int early_cpu_to_node(int cpu)
{
 if ((x86_cpu_to_node_map_early_ptr))
  return (x86_cpu_to_node_map_early_ptr)[cpu];

 return (*({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((&per_cpu__x86_cpu_to_node_map))); (typeof((&per_cpu__x86_cpu_to_node_map))) (__ptr + ((((__get__ZN9x8664_pda11data_offsetE_609(&(__get__cpu_pda_610(&__get__cpu_pda_611(&_cpu_pda)[cpu]))->data_offset)))))); }));
}


static inline cpumask_t *_node_to_cpumask_ptr(int node)
{
 return &node_to_cpumask_map[node];
}


static inline cpumask_t node_to_cpumask(int node)
{
 return node_to_cpumask_map[node];
}
extern int __node_distance(int, int);



static inline int node_to_first_cpu(int node)
{
 cpumask_t *mask = _node_to_cpumask_ptr(node);
 return __first_cpu(&(*mask));
}


extern cpumask_t cpu_coregroup_map(int cpu);
static inline void arch_fix_phys_package_id(int num, u32 slot)
{
}

struct pci_bus;
void set_pci_bus_resources_arch_default(struct pci_bus *b);







extern int get_mp_bus_to_node(int busnum);
extern void set_mp_bus_to_node(int busnum, int node);
void arch_update_cpu_topology(void);



struct memnode {
  template <typename, int = 0> struct __BYPASSmemnode {};
  template <typename, int> friend struct __BYPASSmemnode;
 int shift;
 unsigned int mapsize;
 s16 *map;
 s16 embedded_map[64 - 8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));
extern struct memnode memnode;




extern struct pglist_data *node_data[];

static inline __attribute__((pure)) int phys_to_nid(unsigned long addr)
{
 unsigned nid;
 ;
 ;
 nid = memnode.map[addr >> memnode.shift];
 ;
 return nid;
}



extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
static inline struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline int zonelist_node_idx(struct zoneref *zoneref)
{


 return zoneref->zone->node;



}
struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes,
     struct zone **zone);
static inline struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes,
     struct zone **zone)
{
 return next_zones_zonelist(zonelist->_zonerefs, highest_zoneidx, nodes,
        zone);
}
struct page;
struct mem_section {
  template <typename, int = 0> struct __BYPASSmem_section {};
  template <typename, int> friend struct __BYPASSmem_section;
 unsigned long section_mem_map;


 unsigned long *pageblock_flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct mem_section *mem_section[((1UL << (44 - 27)) / (((1UL) << 12) / sizeof (struct mem_section)))];




static inline struct mem_section *__nr_to_section(unsigned long nr)
{
 if (!mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))])
  return 0;
 return &mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))][nr & ((((1UL) << 12) / sizeof (struct mem_section)) - 1)];
}
extern int __section_nr(struct mem_section* ms);
extern unsigned long usemap_size(void);
static inline struct page *__section_mem_map_addr(struct mem_section *section)
{
 unsigned long map = section->section_mem_map;
 map &= (~((1UL<<2)-1));
 return (struct page *)map;
}

static inline int present_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<0)));
}

static inline int present_section_nr(unsigned long nr)
{
 return present_section(__nr_to_section(nr));
}

static inline int valid_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<1)));
}

static inline int valid_section_nr(unsigned long nr)
{
 return valid_section(__nr_to_section(nr));
}

static inline struct mem_section *__pfn_to_section(unsigned long pfn)
{
 return __nr_to_section(((pfn) >> (27 - 12)));
}

static inline int pfn_valid(unsigned long pfn)
{
 if (((pfn) >> (27 - 12)) >= (1UL << (44 - 27)))
  return 0;
 return valid_section(__nr_to_section(((pfn) >> (27 - 12))));
}

static inline int pfn_present(unsigned long pfn)
{
 if (((pfn) >> (27 - 12)) >= (1UL << (44 - 27)))
  return 0;
 return present_section(__nr_to_section(((pfn) >> (27 - 12))));
}
void sparse_init(void);






bool early_pfn_in_nid(unsigned long pfn, int nid);
void memory_present(int nid, unsigned long start, unsigned long end);
unsigned long __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) node_memmap_size_bytes(int, unsigned long, unsigned long);



struct vm_area_struct;
static inline int allocflags_to_migratetype(gfp_t gfp_flags)
{
 ;

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return 0;


 return (((gfp_flags & (( gfp_t)0x100000u)) != 0) << 1) |
  ((gfp_flags & (( gfp_t)0x80000u)) != 0);
}

static inline enum zone_type gfp_zone(gfp_t flags)
{

 if (flags & (( gfp_t)0x01u))
  return ZONE_DMA;


 if (flags & (( gfp_t)0x04u))
  return ZONE_DMA32;

 if ((flags & ((( gfp_t)0x02u) | (( gfp_t)0x100000u))) ==
   ((( gfp_t)0x02u) | (( gfp_t)0x100000u)))
  return ZONE_MOVABLE;




 return ZONE_NORMAL;
}
static inline int gfp_zonelist(gfp_t flags)
{
 if (1 && __builtin_expect(!!(flags & (( gfp_t)0x40000u)), 0))
  return 1;

 return 0;
}
static inline struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (node_data[nid])->node_zonelists + gfp_zonelist(flags);
}


static inline void arch_free_page(struct page *page, int order) { }


static inline void arch_alloc_page(struct page *page, int order) { }


struct page *
__alloc_pages_internal(gfp_t gfp_mask, unsigned int order,
         struct zonelist *zonelist, nodemask_t *nodemask);

static inline struct page *
__alloc_pages(gfp_t gfp_mask, unsigned int order,
  struct zonelist *zonelist)
{
 return __alloc_pages_internal(gfp_mask, order, zonelist, 0);
}

static inline struct page *
__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,
  struct zonelist *zonelist, nodemask_t *nodemask)
{
 return __alloc_pages_internal(gfp_mask, order, zonelist, nodemask);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_638_0 {
  typedef TJP__proxy_pda_638_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_638(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_638_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_639_0 {
  typedef TJP__proxy_pda_639_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_639(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_639_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_640_0 {
  typedef TJP__proxy_pda_640_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_640(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_640_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}
static inline struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 if (__builtin_expect(!!(order >= 11), 0))
  return 0;


 if (nid < 0)
  nid = ({ typeof(_proxy_pda.nodenumber) ret__; switch (sizeof(_proxy_pda.nodenumber)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->nodenumber)), "m" (__get__proxy_pda_638(&_proxy_pda).nodenumber)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->nodenumber)), "m" (__get__proxy_pda_639(&_proxy_pda).nodenumber)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->nodenumber)), "m" (__get__proxy_pda_640(&_proxy_pda).nodenumber)); break; default: __bad_pda_field(); } ret__; });

 return __alloc_pages(gfp_mask, order, node_zonelist(nid, gfp_mask));
}


extern struct page *alloc_pages_current(gfp_t gfp_mask, unsigned order);

static inline struct page *
alloc_pages(gfp_t gfp_mask, unsigned int order)
{
 if (__builtin_expect(!!(order >= 11), 0))
  return 0;

 return alloc_pages_current(gfp_mask, order);
}
extern struct page *alloc_page_vma(gfp_t gfp_mask,
   struct vm_area_struct *vma, unsigned long addr);







extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
void free_pages_exact(void *virt, size_t size);







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);
extern void free_hot_page(struct page *page);
extern void free_cold_page(struct page *page);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(void);
void drain_local_pages(void *dummy);


struct rb_node
{
  template <typename, int = 0> struct __BYPASSrb_node {};
  template <typename, int> friend struct __BYPASSrb_node;
 unsigned long rb_parent_color;


 struct rb_node *rb_right;
 struct rb_node *rb_left;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((aligned(sizeof(long))));


struct rb_root
{
  template <typename, int = 0> struct __BYPASSrb_root {};
  template <typename, int> friend struct __BYPASSrb_root;
 struct rb_node *rb_node;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7rb_node15rb_parent_colorE_641_0 {
  typedef TJP__ZN7rb_node15rb_parent_colorE_641_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7rb_node15rb_parent_colorE_641(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7rb_node15rb_parent_colorE_641_0< unsigned long int , ::rb_node , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void rb_set_parent(struct rb_node *rb, struct rb_node *p)
{
 rb->rb_parent_color = (__get__ZN7rb_node15rb_parent_colorE_641(&rb->rb_parent_color) & 3) | (unsigned long)p;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7rb_node15rb_parent_colorE_642_0 {
  typedef TJP__ZN7rb_node15rb_parent_colorE_642_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7rb_node15rb_parent_colorE_642(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7rb_node15rb_parent_colorE_642_0< unsigned long int , ::rb_node , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void rb_set_color(struct rb_node *rb, int color)
{
 rb->rb_parent_color = (__get__ZN7rb_node15rb_parent_colorE_642(&rb->rb_parent_color) & ~1) | color;
}
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);


extern struct rb_node *rb_next(struct rb_node *);
extern struct rb_node *rb_prev(struct rb_node *);
extern struct rb_node *rb_first(struct rb_root *);
extern struct rb_node *rb_last(struct rb_root *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *_new,
       struct rb_root *root);

static inline void rb_link_node(struct rb_node * node, struct rb_node * parent,
    struct rb_node ** rb_link)
{
 node->rb_parent_color = (unsigned long )parent;
 node->rb_left = node->rb_right = 0;

 *rb_link = node;
}
struct raw_prio_tree_node {
  template <typename, int = 0> struct __BYPASSraw_prio_tree_node {};
  template <typename, int> friend struct __BYPASSraw_prio_tree_node;
 struct prio_tree_node *left;
 struct prio_tree_node *right;
 struct prio_tree_node *parent;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct prio_tree_node {
  template <typename, int = 0> struct __BYPASSprio_tree_node {};
  template <typename, int> friend struct __BYPASSprio_tree_node;
 struct prio_tree_node *left;
 struct prio_tree_node *right;
 struct prio_tree_node *parent;
 unsigned long start;
 unsigned long last;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct prio_tree_root {
  template <typename, int = 0> struct __BYPASSprio_tree_root {};
  template <typename, int> friend struct __BYPASSprio_tree_root;
 struct prio_tree_node *prio_tree_node;
 unsigned short index_bits;
 unsigned short raw;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct prio_tree_iter {
  template <typename, int = 0> struct __BYPASSprio_tree_iter {};
  template <typename, int> friend struct __BYPASSprio_tree_iter;
 struct prio_tree_node *cur;
 unsigned long mask;
 unsigned long value;
 int size_level;

 struct prio_tree_root *root;
 unsigned long r_index;
 unsigned long h_index;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void prio_tree_iter_init(struct prio_tree_iter *iter,
  struct prio_tree_root *root, unsigned long r_index, unsigned long h_index)
{
 iter->root = root;
 iter->r_index = r_index;
 iter->h_index = h_index;
 iter->cur = 0;
}
static inline int prio_tree_empty( struct prio_tree_root *root)
{
 return root->prio_tree_node == 0;
}

static inline int prio_tree_root( struct prio_tree_node *node)
{
 return node->parent == node;
}

static inline int prio_tree_left_empty( struct prio_tree_node *node)
{
 return node->left == node;
}

static inline int prio_tree_right_empty( struct prio_tree_node *node)
{
 return node->right == node;
}


struct prio_tree_node *prio_tree_replace(struct prio_tree_root *root,
                struct prio_tree_node *old, struct prio_tree_node *node);
struct prio_tree_node *prio_tree_insert(struct prio_tree_root *root,
                struct prio_tree_node *node);
void prio_tree_remove(struct prio_tree_root *root, struct prio_tree_node *node);
struct prio_tree_node *prio_tree_next(struct prio_tree_iter *iter);





struct task_struct;

extern int debug_locks;
extern int debug_locks_silent;




extern int debug_locks_off(void);
struct task_struct;
static inline void debug_show_all_locks(void)
{
}

static inline void __debug_show_held_locks(struct task_struct *task)
{
}

static inline void debug_show_held_locks(struct task_struct *task)
{
}

static inline void
debug_check_no_locks_freed( void *from, unsigned long len)
{
}

static inline void
debug_check_no_locks_held(struct task_struct *task)
{
}













struct completion {
  template <typename, int = 0> struct __BYPASScompletion {};
  template <typename, int> friend struct __BYPASScompletion;
 unsigned int done;
 wait_queue_head_t wait;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void init_completion(struct completion *x)
{
 x->done = 0;
 init_waitqueue_head(&x->wait);
}

extern void wait_for_completion(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_interruptible_timeout(
   struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);
struct address_space;


typedef atomic_long_t mm_counter_t;
struct page {
  template <typename, int = 0> struct __BYPASSpage {};
  template <typename, int> friend struct __BYPASSpage;
 unsigned long flags;

 atomic_t _count;
 union {
  atomic_t _mapcount;



  struct {
   u16 inuse;
   u16 objects;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };
 union {
     struct {
  unsigned long _private;






  struct address_space *mapping;






     
  friend class ::Introspect;
  friend class ::MyIntrospect;
};

     spinlock_t ptl;

     struct kmem_cache *slab;
     struct page *first_page;
 };
 union {
  unsigned long index;
  void *freelist;
 };
 struct list_head lru;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct vm_area_struct {
  template <typename, int = 0> struct __BYPASSvm_area_struct {};
  template <typename, int> friend struct __BYPASSvm_area_struct;
 struct mm_struct * vm_mm;
 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next;

 pgprot_t vm_page_prot;
 unsigned long vm_flags;

 struct rb_node vm_rb;







 union {
  struct {
   struct list_head list;
   void *parent;
   struct vm_area_struct *head;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} vm_set;

  struct raw_prio_tree_node prio_tree_node;
 } shared;







 struct list_head anon_vma_node;
 struct anon_vma *anon_vma;


 struct vm_operations_struct * vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 void * vm_private_data;
 unsigned long vm_truncate_count;





 struct mempolicy *vm_policy;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct core_thread {
  template <typename, int = 0> struct __BYPASScore_thread {};
  template <typename, int> friend struct __BYPASScore_thread;
 struct task_struct *task;
 struct core_thread *next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct core_state {
  template <typename, int = 0> struct __BYPASScore_state {};
  template <typename, int> friend struct __BYPASScore_state;
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct mm_struct {
  template <typename, int = 0> struct __BYPASSmm_struct {};
  template <typename, int> friend struct __BYPASSmm_struct;
 struct vm_area_struct * mmap;
 struct rb_root mm_rb;
 struct vm_area_struct * mmap_cache;
 unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);
 void (*unmap_area) (struct mm_struct *mm, unsigned long addr);
 unsigned long mmap_base;
 unsigned long task_size;
 unsigned long cached_hole_size;
 unsigned long free_area_cache;
 pgd_t * pgd;
 atomic_t mm_users;
 atomic_t mm_count;
 int map_count;
 struct rw_semaphore mmap_sem;
 spinlock_t page_table_lock;

 struct list_head mmlist;







 mm_counter_t _file_rss;
 mm_counter_t _anon_rss;

 unsigned long hiwater_rss;
 unsigned long hiwater_vm;

 unsigned long total_vm, locked_vm, shared_vm, exec_vm;
 unsigned long stack_vm, reserved_vm, def_flags, nr_ptes;
 unsigned long start_code, end_code, start_data, end_data;
 unsigned long start_brk, brk, start_stack;
 unsigned long arg_start, arg_end, env_start, env_end;

 unsigned long saved_auxv[(2*(2 + 18 + 1))];

 cpumask_t cpu_vm_mask;


 mm_context_t context;
 unsigned int faultstamp;
 unsigned int token_priority;
 unsigned int last_interval;

 unsigned long flags;

 struct core_state *core_state;


 rwlock_t ioctx_list_lock;
 struct kioctx *ioctx_list;
 struct file *exe_file;
 unsigned long num_exe_file_vmas;


 struct mmu_notifier_mm *mmu_notifier_mm;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct mempolicy;
struct anon_vma;
struct file_ra_state;
struct user_struct;
struct writeback_control;


extern unsigned long max_mapnr;


extern unsigned long num_physpages;
extern void * high_memory;
extern int page_cluster;


extern int sysctl_legacy_va_layout;




extern unsigned long mmap_min_addr;


extern unsigned long empty_zero_page[((1UL) << 12) / sizeof(unsigned long)];


extern spinlock_t pgd_lock;
extern struct list_head pgd_list;





static inline int pte_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 6);
}

static inline int pte_young(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 5);
}

static inline int pte_write(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 1);
}

static inline int pte_file(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 6);
}

static inline int pte_huge(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 7);
}

static inline int pte_global(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 8);
}

static inline int pte_exec(pte_t pte)
{
 return !(pte_flags(pte) & (((pteval_t)(1)) << 63));
}

static inline int pte_special(pte_t pte)
{
 return pte_val(pte) & (((pteval_t)(1)) << 9);
}

static inline int pmd_large(pmd_t pte)
{
 return (pmd_val(pte) & ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0))) ==
  ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0));
}

static inline pte_t pte_mkclean(pte_t pte)
{
 return __pte(pte_val(pte) & ~(((pteval_t)(1)) << 6));
}

static inline pte_t pte_mkold(pte_t pte)
{
 return __pte(pte_val(pte) & ~(((pteval_t)(1)) << 5));
}

static inline pte_t pte_wrprotect(pte_t pte)
{
 return __pte(pte_val(pte) & ~(((pteval_t)(1)) << 1));
}

static inline pte_t pte_mkexec(pte_t pte)
{
 return __pte(pte_val(pte) & ~(((pteval_t)(1)) << 63));
}

static inline pte_t pte_mkdirty(pte_t pte)
{
 return __pte(pte_val(pte) | (((pteval_t)(1)) << 6));
}

static inline pte_t pte_mkyoung(pte_t pte)
{
 return __pte(pte_val(pte) | (((pteval_t)(1)) << 5));
}

static inline pte_t pte_mkwrite(pte_t pte)
{
 return __pte(pte_val(pte) | (((pteval_t)(1)) << 1));
}

static inline pte_t pte_mkhuge(pte_t pte)
{
 return __pte(pte_val(pte) | (((pteval_t)(1)) << 7));
}

static inline pte_t pte_clrhuge(pte_t pte)
{
 return __pte(pte_val(pte) & ~(((pteval_t)(1)) << 7));
}

static inline pte_t pte_mkglobal(pte_t pte)
{
 return __pte(pte_val(pte) | (((pteval_t)(1)) << 8));
}

static inline pte_t pte_clrglobal(pte_t pte)
{
 return __pte(pte_val(pte) & ~(((pteval_t)(1)) << 8));
}

static inline pte_t pte_mkspecial(pte_t pte)
{
 return __pte(pte_val(pte) | (((pteval_t)(1)) << 9));
}

extern pteval_t __supported_pte_mask;

static inline pte_t pfn_pte(unsigned long page_nr, pgprot_t pgprot)
{
 return __pte((((phys_addr_t)page_nr << 12) |
        ((pgprot).pgprot)) & __supported_pte_mask);
}

static inline pmd_t pfn_pmd(unsigned long page_nr, pgprot_t pgprot)
{
 return __pmd((((phys_addr_t)page_nr << 12) |
        ((pgprot).pgprot)) & __supported_pte_mask);
}

static inline pte_t pte_modify(pte_t pte, pgprot_t newprot)
{
 pteval_t val = pte_val(pte);





 val &= (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(1ULL << 46) - 1))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6));
 val |= ((newprot).pgprot) & (~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(1ULL << 46) - 1))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6))) & __supported_pte_mask;

 return __pte(val);
}



static inline pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 pgprotval_t preservebits = ((oldprot).pgprot) & (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(1ULL << 46) - 1))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6));
 pgprotval_t addbits = ((newprot).pgprot);
 return ((pgprot_t) { (preservebits | addbits) } );
}







struct file;
pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
                              unsigned long size, pgprot_t vma_prot);
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
                              unsigned long size, pgprot_t *vma_prot);



void set_pte_vaddr(unsigned long vaddr, pte_t pte);





static inline void native_pagetable_setup_start(pgd_t *base) {}
static inline void native_pagetable_setup_done(pgd_t *base) {}
extern pud_t level3_kernel_pgt[512];
extern pud_t level3_ident_pgt[512];
extern pmd_t level2_kernel_pgt[512];
extern pmd_t level2_fixmap_pgt[512];
extern pmd_t level2_ident_pgt[512];
extern pgd_t init_level4_pgt[];



extern void paging_init(void);
struct mm_struct;

void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte);


static inline void native_pte_clear(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 *ptep = native_make_pte(0);
}

static inline void native_set_pte(pte_t *ptep, pte_t pte)
{
 *ptep = pte;
}

static inline void native_set_pte_atomic(pte_t *ptep, pte_t pte)
{
 native_set_pte(ptep, pte);
}

static inline pte_t native_ptep_get_and_clear(pte_t *xp)
{

 return native_make_pte(((__typeof__(*(&xp->pte)))__xchg((unsigned long)(0), (&xp->pte), sizeof(*(&xp->pte)))));







}

static inline void native_set_pmd(pmd_t *pmdp, pmd_t pmd)
{
 *pmdp = pmd;
}

static inline void native_pmd_clear(pmd_t *pmd)
{
 native_set_pmd(pmd, native_make_pmd(0));
}

static inline void native_set_pud(pud_t *pudp, pud_t pud)
{
 *pudp = pud;
}

static inline void native_pud_clear(pud_t *pud)
{
 native_set_pud(pud, native_make_pud(0));
}

static inline void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
{
 *pgdp = pgd;
}

static inline void native_pgd_clear(pgd_t *pgd)
{
 native_set_pgd(pgd, native_make_pgd(0));
}
static inline int pgd_bad(pgd_t pgd)
{
 return (pgd_val(pgd) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(1ULL << 46) - 1))) | (((pteval_t)(1)) << 2))) != ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6));
}

static inline int pud_bad(pud_t pud)
{
 return (pud_val(pud) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(1ULL << 46) - 1))) | (((pteval_t)(1)) << 2))) != ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6));
}

static inline int pmd_bad(pmd_t pmd)
{
 return (pmd_val(pmd) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(1ULL << 46) - 1))) | (((pteval_t)(1)) << 2))) != ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6));
}
static inline int pgd_large(pgd_t pgd) { return 0; }
static inline int pud_large(pud_t pte)
{
 return (pud_val(pte) & ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0))) ==
  ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0));
}
extern int direct_gbpages;
extern int kern_addr_valid(unsigned long addr);
extern void cleanup_highmap(void);
enum {
 PG_LEVEL_NONE,
 PG_LEVEL_4K,
 PG_LEVEL_2M,
 PG_LEVEL_1G,
 PG_LEVEL_NUM
};


extern void update_page_count(int level, unsigned long pages);
extern pte_t *lookup_address(unsigned long address, unsigned int *level);


static inline pte_t native_local_ptep_get_and_clear(pte_t *ptep)
{
 pte_t res = *ptep;


 native_pte_clear(0, 0, ptep);
 return res;
}

static inline void native_set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep , pte_t pte)
{
 native_set_pte(ptep, pte);
}
struct vm_area_struct;


extern int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty);


extern int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pte_t *ptep);


extern int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep);


static inline pte_t ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,
           pte_t *ptep)
{
 pte_t pte = native_ptep_get_and_clear(ptep);
 pte_update(mm, addr, ptep);
 return pte;
}


static inline pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long addr, pte_t *ptep,
         int full)
{
 pte_t pte;
 if (full) {




  pte = native_local_ptep_get_and_clear(ptep);
 } else {
  pte = ptep_get_and_clear(mm, addr, ptep);
 }
 return pte;
}


static inline void ptep_set_wrprotect(struct mm_struct *mm,
          unsigned long addr, pte_t *ptep)
{
 clear_bit(1, (unsigned long *)&ptep->pte);
 pte_update(mm, addr, ptep);
}
static inline void clone_pgd_range(pgd_t *dst, pgd_t *src, int count)
{
       memcpy(dst, src, count * sizeof(pgd_t));
}


void pgd_clear_bad(pgd_t *);
void pud_clear_bad(pud_t *);
void pmd_clear_bad(pmd_t *);

static inline int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if ((!pgd_val(*pgd)))
  return 1;
 if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline int pud_none_or_clear_bad(pud_t *pud)
{
 if ((!pud_val(*pud)))
  return 1;
 if (__builtin_expect(!!(pud_bad(*pud)), 0)) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}

static inline int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if ((!pmd_val((*pmd))))
  return 1;
 if (__builtin_expect(!!(pmd_bad(*pmd)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline pte_t __ptep_modify_prot_start(struct mm_struct *mm,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(mm, addr, ptep);
}

static inline void __ptep_modify_prot_commit(struct mm_struct *mm,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 set_pte_at(mm, addr, ptep, pte);
}
extern struct kmem_cache *vm_area_cachep;






struct vm_list_struct {
  template <typename, int = 0> struct __BYPASSvm_list_struct {};
  template <typename, int> friend struct __BYPASSvm_list_struct;
 struct vm_list_struct *next;
 struct vm_area_struct *vma;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern pgprot_t protection_map[16];
struct vm_fault {
  template <typename, int = 0> struct __BYPASSvm_fault {};
  template <typename, int> friend struct __BYPASSvm_fault;
 unsigned int flags;
 unsigned long pgoff;
 void *virtual_address;

 struct page *page;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct vm_operations_struct {
  template <typename, int = 0> struct __BYPASSvm_operations_struct {};
  template <typename, int> friend struct __BYPASSvm_operations_struct;
 void (*open)(struct vm_area_struct * area);
 void (*close)(struct vm_area_struct * area);
 int (*fault)(struct vm_area_struct *vma, struct vm_fault *vmf);



 int (*page_mkwrite)(struct vm_area_struct *vma, struct vm_fault *vmf);




 int (*access)(struct vm_area_struct *vma, unsigned long addr,
        void *buf, int len, int write);
 int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *_new);
 struct mempolicy *(*get_policy)(struct vm_area_struct *vma,
     unsigned long addr);
 int (*migrate)(struct vm_area_struct *vma, nodemask_t *from,
  nodemask_t *to, unsigned long flags);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct mmu_gather;
struct inode;
enum pageflags {
 PG_locked,
 PG_error,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_writeback,

 PG_head,
 PG_tail,



 PG_swapcache,
 PG_mappedtodisk,
 PG_reclaim,
 PG_buddy,



 __NR_PAGEFLAGS,


 PG_checked = PG_owner_priv_1,


 PG_pinned = PG_owner_priv_1,
 PG_savepinned = PG_dirty,


 PG_slob_page = PG_active,
 PG_slob_free = PG_private,


 PG_slub_frozen = PG_active,
 PG_slub_debug = PG_error,
};
struct page;

static inline int PageLocked(struct page *page) { return (__builtin_constant_p((PG_locked)) ? constant_test_bit((PG_locked), (&page->flags)) : variable_test_bit((PG_locked), (&page->flags))); }
static inline int PageError(struct page *page) { return (__builtin_constant_p((PG_error)) ? constant_test_bit((PG_error), (&page->flags)) : variable_test_bit((PG_error), (&page->flags))); } static inline void SetPageError(struct page *page) { set_bit(PG_error, &page->flags); } static inline void ClearPageError(struct page *page) { clear_bit(PG_error, &page->flags); }
static inline int PageReferenced(struct page *page) { return (__builtin_constant_p((PG_referenced)) ? constant_test_bit((PG_referenced), (&page->flags)) : variable_test_bit((PG_referenced), (&page->flags))); } static inline void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &page->flags); } static inline void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &page->flags); } static inline int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &page->flags); }
static inline int PageDirty(struct page *page) { return (__builtin_constant_p((PG_dirty)) ? constant_test_bit((PG_dirty), (&page->flags)) : variable_test_bit((PG_dirty), (&page->flags))); } static inline void SetPageDirty(struct page *page) { set_bit(PG_dirty, &page->flags); } static inline void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &page->flags); } static inline int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &page->flags); } static inline int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &page->flags); } static inline void __ClearPageDirty(struct page *page) { __clear_bit(PG_dirty, &page->flags); }
static inline int PageLRU(struct page *page) { return (__builtin_constant_p((PG_lru)) ? constant_test_bit((PG_lru), (&page->flags)) : variable_test_bit((PG_lru), (&page->flags))); } static inline void SetPageLRU(struct page *page) { set_bit(PG_lru, &page->flags); } static inline void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &page->flags); } static inline void __ClearPageLRU(struct page *page) { __clear_bit(PG_lru, &page->flags); }
static inline int PageActive(struct page *page) { return (__builtin_constant_p((PG_active)) ? constant_test_bit((PG_active), (&page->flags)) : variable_test_bit((PG_active), (&page->flags))); } static inline void SetPageActive(struct page *page) { set_bit(PG_active, &page->flags); } static inline void ClearPageActive(struct page *page) { clear_bit(PG_active, &page->flags); } static inline void __ClearPageActive(struct page *page) { __clear_bit(PG_active, &page->flags); }
static inline int PageSlab(struct page *page) { return (__builtin_constant_p((PG_slab)) ? constant_test_bit((PG_slab), (&page->flags)) : variable_test_bit((PG_slab), (&page->flags))); } static inline void __SetPageSlab(struct page *page) { __set_bit(PG_slab, &page->flags); } static inline void __ClearPageSlab(struct page *page) { __clear_bit(PG_slab, &page->flags); }
static inline int PageChecked(struct page *page) { return (__builtin_constant_p((PG_checked)) ? constant_test_bit((PG_checked), (&page->flags)) : variable_test_bit((PG_checked), (&page->flags))); } static inline void SetPageChecked(struct page *page) { set_bit(PG_checked, &page->flags); } static inline void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &page->flags); }
static inline int PagePinned(struct page *page) { return (__builtin_constant_p((PG_pinned)) ? constant_test_bit((PG_pinned), (&page->flags)) : variable_test_bit((PG_pinned), (&page->flags))); } static inline void SetPagePinned(struct page *page) { set_bit(PG_pinned, &page->flags); } static inline void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &page->flags); } static inline int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &page->flags); } static inline int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &page->flags); }
static inline int PageSavePinned(struct page *page) { return (__builtin_constant_p((PG_savepinned)) ? constant_test_bit((PG_savepinned), (&page->flags)) : variable_test_bit((PG_savepinned), (&page->flags))); } static inline void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &page->flags); } static inline void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &page->flags); };
static inline int PageReserved(struct page *page) { return (__builtin_constant_p((PG_reserved)) ? constant_test_bit((PG_reserved), (&page->flags)) : variable_test_bit((PG_reserved), (&page->flags))); } static inline void SetPageReserved(struct page *page) { set_bit(PG_reserved, &page->flags); } static inline void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &page->flags); } static inline void __ClearPageReserved(struct page *page) { __clear_bit(PG_reserved, &page->flags); }
       

static inline int PagePrivate(struct page *page) { return (__builtin_constant_p((PG_private)) ? constant_test_bit((PG_private), (&page->flags)) : variable_test_bit((PG_private), (&page->flags))); } static inline void SetPagePrivate(struct page *page) { set_bit(PG_private, &page->flags); } static inline void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &page->flags); } static inline void __ClearPagePrivate(struct page *page) { __clear_bit(PG_private, &page->flags); }
 static inline void __SetPagePrivate(struct page *page) { __set_bit(PG_private, &page->flags); }
       

static inline int PageSlobPage(struct page *page) { return (__builtin_constant_p((PG_slob_page)) ? constant_test_bit((PG_slob_page), (&page->flags)) : variable_test_bit((PG_slob_page), (&page->flags))); } static inline void __SetPageSlobPage(struct page *page) { __set_bit(PG_slob_page, &page->flags); } static inline void __ClearPageSlobPage(struct page *page) { __clear_bit(PG_slob_page, &page->flags); }
static inline int PageSlobFree(struct page *page) { return (__builtin_constant_p((PG_slob_free)) ? constant_test_bit((PG_slob_free), (&page->flags)) : variable_test_bit((PG_slob_free), (&page->flags))); } static inline void __SetPageSlobFree(struct page *page) { __set_bit(PG_slob_free, &page->flags); } static inline void __ClearPageSlobFree(struct page *page) { __clear_bit(PG_slob_free, &page->flags); }

static inline int PageSlubFrozen(struct page *page) { return (__builtin_constant_p((PG_slub_frozen)) ? constant_test_bit((PG_slub_frozen), (&page->flags)) : variable_test_bit((PG_slub_frozen), (&page->flags))); } static inline void __SetPageSlubFrozen(struct page *page) { __set_bit(PG_slub_frozen, &page->flags); } static inline void __ClearPageSlubFrozen(struct page *page) { __clear_bit(PG_slub_frozen, &page->flags); }
static inline int PageSlubDebug(struct page *page) { return (__builtin_constant_p((PG_slub_debug)) ? constant_test_bit((PG_slub_debug), (&page->flags)) : variable_test_bit((PG_slub_debug), (&page->flags))); } static inline void __SetPageSlubDebug(struct page *page) { __set_bit(PG_slub_debug, &page->flags); } static inline void __ClearPageSlubDebug(struct page *page) { __clear_bit(PG_slub_debug, &page->flags); }





static inline int PageWriteback(struct page *page) { return (__builtin_constant_p((PG_writeback)) ? constant_test_bit((PG_writeback), (&page->flags)) : variable_test_bit((PG_writeback), (&page->flags))); } static inline int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &page->flags); } static inline int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &page->flags); }
static inline int PageBuddy(struct page *page) { return (__builtin_constant_p((PG_buddy)) ? constant_test_bit((PG_buddy), (&page->flags)) : variable_test_bit((PG_buddy), (&page->flags))); } static inline void __SetPageBuddy(struct page *page) { __set_bit(PG_buddy, &page->flags); } static inline void __ClearPageBuddy(struct page *page) { __clear_bit(PG_buddy, &page->flags); }
static inline int PageMappedToDisk(struct page *page) { return (__builtin_constant_p((PG_mappedtodisk)) ? constant_test_bit((PG_mappedtodisk), (&page->flags)) : variable_test_bit((PG_mappedtodisk), (&page->flags))); } static inline void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &page->flags); } static inline void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &page->flags); }


static inline int PageReclaim(struct page *page) { return (__builtin_constant_p((PG_reclaim)) ? constant_test_bit((PG_reclaim), (&page->flags)) : variable_test_bit((PG_reclaim), (&page->flags))); } static inline void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &page->flags); } static inline void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &page->flags); } static inline int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &page->flags); }
static inline int PageReadahead(struct page *page) { return (__builtin_constant_p((PG_reclaim)) ? constant_test_bit((PG_reclaim), (&page->flags)) : variable_test_bit((PG_reclaim), (&page->flags))); } static inline void SetPageReadahead(struct page *page) { set_bit(PG_reclaim, &page->flags); } static inline void ClearPageReadahead(struct page *page) { clear_bit(PG_reclaim, &page->flags); }
static inline int PageHighMem(struct page *page) { return 0; }



static inline int PageSwapCache(struct page *page) { return (__builtin_constant_p((PG_swapcache)) ? constant_test_bit((PG_swapcache), (&page->flags)) : variable_test_bit((PG_swapcache), (&page->flags))); } static inline void SetPageSwapCache(struct page *page) { set_bit(PG_swapcache, &page->flags); } static inline void ClearPageSwapCache(struct page *page) { clear_bit(PG_swapcache, &page->flags); }







static inline int PageUncached(struct page *page) { return 0; }


static inline int PageUptodate(struct page *page)
{
 int ret = (__builtin_constant_p((PG_uptodate)) ? constant_test_bit((PG_uptodate), (&(page)->flags)) : variable_test_bit((PG_uptodate), (&(page)->flags)));
 if (ret)
  ;

 return ret;
}

static inline void __SetPageUptodate(struct page *page)
{
 ;
 __set_bit(PG_uptodate, &(page)->flags);
}

static inline void SetPageUptodate(struct page *page)
{
 ;
 set_bit(PG_uptodate, &(page)->flags);

}

static inline void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &page->flags); }

extern void cancel_dirty_page(struct page *page, unsigned int account_size);

int test_clear_page_writeback(struct page *page);
int test_set_page_writeback(struct page *page);

static inline void set_page_writeback(struct page *page)
{
 test_set_page_writeback(page);
}
static inline int PageHead(struct page *page) { return (__builtin_constant_p((PG_head)) ? constant_test_bit((PG_head), (&page->flags)) : variable_test_bit((PG_head), (&page->flags))); } static inline void __SetPageHead(struct page *page) { __set_bit(PG_head, &page->flags); } static inline void __ClearPageHead(struct page *page) { __clear_bit(PG_head, &page->flags); }
static inline int PageTail(struct page *page) { return (__builtin_constant_p((PG_tail)) ? constant_test_bit((PG_tail), (&page->flags)) : variable_test_bit((PG_tail), (&page->flags))); } static inline void __SetPageTail(struct page *page) { __set_bit(PG_tail, &page->flags); } static inline void __ClearPageTail(struct page *page) { __clear_bit(PG_tail, &page->flags); }

static inline int PageCompound(struct page *page)
{
 return page->flags & ((1L << PG_head) | (1L << PG_tail));

}
static inline int put_page_testzero(struct page *page)
{
 do { } while(0);
 return 1;
}





static inline int get_page_unless_zero(struct page *page)
{
 return 1;
}


struct page *vmalloc_to_page( void *addr);
unsigned long vmalloc_to_pfn( void *addr);







static inline int is_vmalloc_addr( void *x)
{

 unsigned long addr = (unsigned long)x;

 return addr >= (0xffffc20000000000UL) && addr < (0xffffe1ffffffffffUL);



}

static inline struct page *compound_head(struct page *page)
{
 if (__builtin_expect(!!(PageTail(page)), 0))
  return page->first_page;
 return page;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_795_0 {
  typedef TJP__ZN7_atomic7counterE_795_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_795(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_795_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int page_count(struct page *page)
{
 return (__get__ZN7_atomic7counterE_795(&(&compound_head(page)->_count)->counter));
}

static inline void get_page(struct page *page)
{
 page = compound_head(page);
 do { } while(0);
 ;
}

static inline struct page *virt_to_head_page( void *x)
{
 struct page *page = (((struct page *)(0xffffe20000000000UL)) + (__phys_addr((unsigned long)(x)) >> 12));
 return compound_head(page);
}





static inline void init_page_count(struct page *page)
{
 ;
}






void put_pages_list(struct list_head *pages);

void split_page(struct page *page, unsigned int order);






typedef void compound_page_dtor(struct page *);

static inline void set_compound_page_dtor(struct page *page,
      compound_page_dtor *dtor)
{
 page[1].lru.next = (void *)dtor;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_796_0 {
  typedef TJP__ZN9list_head4nextE_796_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_796(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_796_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline compound_page_dtor *get_compound_page_dtor(struct page *page)
{
 return (compound_page_dtor *)__get__ZN9list_head4nextE_796(&page[1].lru.next);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_798_0 {
  typedef TJP__ZN9list_head4prevE_798_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_798(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_798_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline int compound_order(struct page *page)
{
 if (!PageHead(page))
  return 0;
 return (unsigned long)__get__ZN9list_head4prevE_798(&page[1].lru.prev);
}

static inline void set_compound_order(struct page *page, unsigned long order)
{
 page[1].lru.prev = (void *)order;
}
static inline enum zone_type page_zonenum(struct page *page)
{
 return (page->flags >> (((((sizeof(unsigned long)*8) - 0) - 9) - 2) * (2 != 0))) & ((1UL << 2) - 1);
}
static inline int page_zone_id(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 9) < ((((sizeof(unsigned long)*8) - 0) - 9) - 2))? (((sizeof(unsigned long)*8) - 0) - 9) : ((((sizeof(unsigned long)*8) - 0) - 9) - 2)) * ((9 + 2) != 0))) & ((1UL << (9 + 2)) - 1);
}

static inline int zone_to_nid(struct zone *zone)
{

 return zone->node;



}




static inline int page_to_nid(struct page *page)
{
 return (page->flags >> ((((sizeof(unsigned long)*8) - 0) - 9) * (9 != 0))) & ((1UL << 9) - 1);
}


static inline struct zone *page_zone(struct page *page)
{
 return &(node_data[page_to_nid(page)])->node_zones[page_zonenum(page)];
}
static inline void set_page_zone(struct page *page, enum zone_type zone)
{
 page->flags &= ~(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 9) - 2) * (2 != 0)));
 page->flags |= (zone & ((1UL << 2) - 1)) << (((((sizeof(unsigned long)*8) - 0) - 9) - 2) * (2 != 0));
}

static inline void set_page_node(struct page *page, unsigned long node)
{
 page->flags &= ~(((1UL << 9) - 1) << ((((sizeof(unsigned long)*8) - 0) - 9) * (9 != 0)));
 page->flags |= (node & ((1UL << 9) - 1)) << ((((sizeof(unsigned long)*8) - 0) - 9) * (9 != 0));
}

static inline void set_page_section(struct page *page, unsigned long section)
{
 page->flags &= ~(((1UL << 0) - 1) << (((sizeof(unsigned long)*8) - 0) * (0 != 0)));
 page->flags |= (section & ((1UL << 0) - 1)) << (((sizeof(unsigned long)*8) - 0) * (0 != 0));
}

static inline void set_page_links(struct page *page, enum zone_type zone,
 unsigned long node, unsigned long pfn)
{
 set_page_zone(page, zone);
 set_page_node(page, node);
 set_page_section(page, ((pfn) >> (27 - 12)));
}





static inline unsigned long round_hint_to_min(unsigned long hint)
{
 hint &= (~(((1UL) << 12)-1));
 if (((void *)hint != 0) &&
     (hint < mmap_min_addr))
  return (((mmap_min_addr)+((typeof(mmap_min_addr))(((1UL) << 12))-1))&~((typeof(mmap_min_addr))(((1UL) << 12))-1));
 return hint;
}












void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) kmem_cache_init(void);
int slab_is_available(void);

struct kmem_cache *kmem_cache_create( char *, size_t, size_t,
   unsigned long,
   void (*)(void *));
void kmem_cache_destroy(struct kmem_cache *);
int kmem_cache_shrink(struct kmem_cache *);
void kmem_cache_free(struct kmem_cache *, void *);
unsigned int kmem_cache_size(struct kmem_cache *);
 char *kmem_cache_name(struct kmem_cache *);
int kmem_ptr_validate(struct kmem_cache *cachep, void *ptr);
void * __attribute__((warn_unused_result)) __krealloc( void *, size_t, gfp_t);
void * __attribute__((warn_unused_result)) krealloc( void *, size_t, gfp_t);
void kfree( void *);
size_t ksize( void *);















static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}
static inline u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}






static inline s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);

static inline __attribute__((always_inline)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}




struct timespec {
  template <typename, int = 0> struct __BYPASStimespec {};
  template <typename, int> friend struct __BYPASStimespec;
 time_t tv_sec;
 long tv_nsec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct timeval {
  template <typename, int = 0> struct __BYPASStimeval {};
  template <typename, int> friend struct __BYPASStimeval;
 time_t tv_sec;
 suseconds_t tv_usec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct timezone {
  template <typename, int = 0> struct __BYPASStimezone {};
  template <typename, int> friend struct __BYPASStimezone;
 int tz_minuteswest;
 int tz_dsttime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline int timespec_equal( struct timespec *a,
                                 struct timespec *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline int timespec_compare( struct timespec *lhs, struct timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

static inline int timeval_compare( struct timeval *lhs, struct timeval *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_usec - rhs->tv_usec;
}

extern unsigned long mktime( unsigned int year, unsigned int mon,
       unsigned int day, unsigned int hour,
       unsigned int min, unsigned int sec);

extern void set_normalized_timespec(struct timespec *ts, time_t sec, long nsec);




static inline struct timespec timespec_sub(struct timespec lhs,
      struct timespec rhs)
{
 struct timespec ts_delta;
 set_normalized_timespec(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}







extern struct timespec xtime;
extern struct timespec wall_to_monotonic;
extern seqlock_t xtime_lock;

extern unsigned long read_persistent_clock(void);
extern int update_persistent_clock(struct timespec now);
extern int no_sync_cmos_clock __attribute__((__section__(".data.read_mostly")));
void timekeeping_init(void);
extern int timekeeping_suspended;

unsigned long get_seconds(void);
struct timespec current_kernel_time(void);




extern void do_gettimeofday(struct timeval *tv);
extern int do_settimeofday(struct timespec *tv);
extern int do_sys_settimeofday(struct timespec *tv, struct timezone *tz);

extern long do_utimes(int dfd, char *filename, struct timespec *times, int flags);
struct itimerval;
extern int do_setitimer(int which, struct itimerval *value,
   struct itimerval *ovalue);
extern unsigned int alarm_setitimer(unsigned int seconds);
extern int do_getitimer(int which, struct itimerval *value);
extern void getnstimeofday(struct timespec *tv);
extern void getboottime(struct timespec *ts);
extern void monotonic_to_bootbased(struct timespec *ts);

extern struct timespec timespec_trunc(struct timespec t, unsigned gran);
extern int timekeeping_valid_for_hres(void);
extern void update_wall_time(void);
extern void update_xtime_cache(u64 nsec);
static inline s64 timespec_to_ns( struct timespec *ts)
{
 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}
static inline s64 timeval_to_ns( struct timeval *tv)
{
 return ((s64) tv->tv_sec * 1000000000L) +
  tv->tv_usec * 1000L;
}







extern struct timespec ns_to_timespec( s64 nsec);







extern struct timeval ns_to_timeval( s64 nsec);
static inline __attribute__((always_inline)) void timespec_add_ns(struct timespec *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}
struct itimerspec {
  template <typename, int = 0> struct __BYPASSitimerspec {};
  template <typename, int> friend struct __BYPASSitimerspec;
 struct timespec it_interval;
 struct timespec it_value;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct itimerval {
  template <typename, int = 0> struct __BYPASSitimerval {};
  template <typename, int> friend struct __BYPASSitimerval;
 struct timeval it_interval;
 struct timeval it_value;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct timex {
  template <typename, int = 0> struct __BYPASStimex {};
  template <typename, int> friend struct __BYPASStimex;
 unsigned int modes;
 long offset;
 long freq;
 long maxerror;
 long esterror;
 int status;
 long constant;
 long precision;
 long tolerance;


 struct timeval time;
 long tick;

 long ppsfreq;
 long jitter;
 int shift;
 long stabil;
 long jitcnt;
 long calcnt;
 long errcnt;
 long stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





typedef unsigned long long cycles_t;

extern unsigned int cpu_khz;
extern unsigned int tsc_khz;

extern void disable_TSC(void);

static inline cycles_t get_cycles(void)
{
 unsigned long long ret = 0;





 (ret = paravirt_read_tsc());

 return ret;
}

static inline __attribute__((always_inline)) cycles_t vget_cycles(void)
{
 return (cycles_t)__native_read_tsc();
}

extern void tsc_init(void);
extern void mark_tsc_unstable(char *reason);
extern int unsynchronized_tsc(void);
int check_tsc_unstable(void);





extern void check_tsc_sync_source(int cpu);
extern void check_tsc_sync_target(void);

extern int notsc_setup(char *);






extern unsigned long tick_usec;
extern unsigned long tick_nsec;
extern int tickadj;




extern int time_status;
extern long time_maxerror;
extern long time_esterror;

extern long time_adjust;

extern void ntp_init(void);
extern void ntp_clear(void);





static inline int ntp_synced(void)
{
 return !(time_status & 0x0040);
}
extern u64 tick_length;

extern void second_overflow(void);
extern void update_ntp_one_tick(void);
extern int do_adjtimex(struct timex *);




int read_current_timer(unsigned long *timer_val);
extern u64 __attribute__((section(".data"))) jiffies_64;
extern unsigned long __attribute__((section(".data"))) jiffies;





template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_834_0 {
  typedef TJP_jiffies_834_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_834(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_834_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline u64 get_jiffies_64(void)
{
 return (u64)__get_jiffies_834(&jiffies);
}
extern unsigned long preset_lpj;
extern unsigned int jiffies_to_msecs( unsigned long j);
extern unsigned int jiffies_to_usecs( unsigned long j);
extern unsigned long msecs_to_jiffies( unsigned int m);
extern unsigned long usecs_to_jiffies( unsigned int u);
extern unsigned long timespec_to_jiffies( struct timespec *value);
extern void jiffies_to_timespec( unsigned long jiffies,
    struct timespec *value);
extern unsigned long timeval_to_jiffies( struct timeval *value);
extern void jiffies_to_timeval( unsigned long jiffies,
          struct timeval *value);
extern clock_t jiffies_to_clock_t(long x);
extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
union ktime {
 s64 tv64;
};

typedef union ktime ktime_t;
static inline ktime_t ktime_set( long secs, unsigned long nsecs)
{

 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))

                return ({ ktime_t var; var.tv64 = ((s64)~((u64)1 << 63)); var; });





 return ({ ktime_t var; var.tv64 = (s64)secs * 1000000000L + (s64)nsecs; var; });



}
static inline ktime_t timespec_to_ktime(struct timespec ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline ktime_t timeval_to_ktime(struct timeval tv)
{
 return ktime_set(tv.tv_sec, tv.tv_usec * 1000L);
}
static inline int ktime_equal( ktime_t cmp1, ktime_t cmp2)
{
 return cmp1.tv64 == cmp2.tv64;
}

static inline s64 ktime_to_us( ktime_t kt)
{
 struct timeval tv = ns_to_timeval((kt).tv64);
 return (s64) tv.tv_sec * 1000000L + tv.tv_usec;
}

static inline s64 ktime_us_delta( ktime_t later, ktime_t earlier)
{
       return ktime_to_us(({ ({ ktime_t var; var.tv64 = (later).tv64 - (earlier).tv64; var; }); }));
}

static inline ktime_t ktime_add_us( ktime_t kt, u64 usec)
{
 return ({ ({ ktime_t var; var.tv64 = (kt).tv64 + (usec * 1000); var; }); });
}

static inline ktime_t ktime_sub_us( ktime_t kt, u64 usec)
{
 return ({ ({ ktime_t var; var.tv64 = (kt).tv64 - (usec * 1000); var; }); });
}

extern ktime_t ktime_add_safe( ktime_t lhs, ktime_t rhs);
extern void ktime_get_ts(struct timespec *ts);




static inline ktime_t ns_to_ktime(u64 ns)
{

        static ktime_t ktime_zero = { 0 };



 return ({ ({ ktime_t var; var.tv64 = (ktime_zero).tv64 + (ns); var; }); });
}







enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
struct debug_obj {
  template <typename, int = 0> struct __BYPASSdebug_obj {};
  template <typename, int> friend struct __BYPASSdebug_obj;
 struct hlist_node node;
 enum debug_obj_state state;
 void *object;
 struct debug_obj_descr *descr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct debug_obj_descr {
  template <typename, int = 0> struct __BYPASSdebug_obj_descr {};
  template <typename, int> friend struct __BYPASSdebug_obj_descr;
 char *name;

 int (*fixup_init) (void *addr, enum debug_obj_state state);
 int (*fixup_activate) (void *addr, enum debug_obj_state state);
 int (*fixup_destroy) (void *addr, enum debug_obj_state state);
 int (*fixup_free) (void *addr, enum debug_obj_state state);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void
debug_object_init (void *addr, struct debug_obj_descr *descr) { }
static inline void
debug_object_init_on_stack(void *addr, struct debug_obj_descr *descr) { }
static inline void
debug_object_activate (void *addr, struct debug_obj_descr *descr) { }
static inline void
debug_object_deactivate(void *addr, struct debug_obj_descr *descr) { }
static inline void
debug_object_destroy (void *addr, struct debug_obj_descr *descr) { }
static inline void
debug_object_free (void *addr, struct debug_obj_descr *descr) { }

static inline void debug_objects_early_init(void) { }
static inline void debug_objects_mem_init(void) { }





static inline void
debug_check_no_obj_freed( void *address, unsigned long size) { }

struct hrtimer_clock_base;
struct hrtimer_cpu_base;




enum hrtimer_mode {
 HRTIMER_MODE_ABS,
 HRTIMER_MODE_REL,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
enum hrtimer_cb_mode {
 HRTIMER_CB_SOFTIRQ,
 HRTIMER_CB_IRQSAFE,
 HRTIMER_CB_IRQSAFE_NO_RESTART,
 HRTIMER_CB_IRQSAFE_PERCPU,
 HRTIMER_CB_IRQSAFE_UNLOCKED,
};
struct hrtimer {
  template <typename, int = 0> struct __BYPASShrtimer {};
  template <typename, int> friend struct __BYPASShrtimer;
 struct rb_node node;
 ktime_t expires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 unsigned long state;
 enum hrtimer_cb_mode cb_mode;
 struct list_head cb_entry;

 void *start_site;
 char start_comm[16];
 int start_pid;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct hrtimer_sleeper {
  template <typename, int = 0> struct __BYPASShrtimer_sleeper {};
  template <typename, int> friend struct __BYPASShrtimer_sleeper;
 struct hrtimer timer;
 struct task_struct *task;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct hrtimer_clock_base {
  template <typename, int = 0> struct __BYPASShrtimer_clock_base {};
  template <typename, int> friend struct __BYPASShrtimer_clock_base;
 struct hrtimer_cpu_base *cpu_base;
 clockid_t index;
 struct rb_root active;
 struct rb_node *first;
 ktime_t resolution;
 ktime_t (*get_time)(void);
 ktime_t (*get_softirq_time)(void);
 ktime_t softirq_time;

 ktime_t offset;
 int (*reprogram)(struct hrtimer *t,
          struct hrtimer_clock_base *b,
          ktime_t n);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct hrtimer_cpu_base {
  template <typename, int = 0> struct __BYPASShrtimer_cpu_base {};
  template <typename, int> friend struct __BYPASShrtimer_cpu_base;
 spinlock_t lock;
 struct hrtimer_clock_base clock_base[2];
 struct list_head cb_pending;

 ktime_t expires_next;
 int hres_active;
 unsigned long nr_events;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct clock_event_device;

extern void clock_was_set(void);
extern void hres_timers_resume(void);
extern void hrtimer_interrupt(struct clock_event_device *dev);




static inline ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}

static inline int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return timer->base->cpu_base->hres_active;
}
extern ktime_t ktime_get(void);
extern ktime_t ktime_get_real(void);




extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);







static inline void hrtimer_init_on_stack(struct hrtimer *timer,
      clockid_t which_clock,
      enum hrtimer_mode mode)
{
 hrtimer_init(timer, which_clock, mode);
}
static inline void destroy_hrtimer_on_stack(struct hrtimer *timer) { }



extern int hrtimer_start(struct hrtimer *timer, ktime_t tim,
    enum hrtimer_mode mode);
extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline int hrtimer_restart(struct hrtimer *timer)
{
 return hrtimer_start(timer, timer->expires, HRTIMER_MODE_ABS);
}


extern ktime_t hrtimer_get_remaining( struct hrtimer *timer);
extern int hrtimer_get_res( clockid_t which_clock, struct timespec *tp);

extern ktime_t hrtimer_get_next_event(void);





static inline int hrtimer_active( struct hrtimer *timer)
{
 return timer->state != 0x00;
}




static inline int hrtimer_is_queued(struct hrtimer *timer)
{
 return timer->state &
  (0x01 | 0x04);
}





static inline int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->state & 0x02;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);


static inline u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}


extern long hrtimer_nanosleep(struct timespec *rqtp,
         struct timespec *rmtp,
         enum hrtimer_mode mode,
         clockid_t clockid);
extern long hrtimer_nanosleep_restart(struct restart_block *restart_block);

extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl,
     struct task_struct *tsk);


extern void hrtimer_run_queues(void);
extern void hrtimer_run_pending(void);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) hrtimers_init(void);
extern void sysrq_timer_list_show(void);






extern void timer_stats_update_stats(void *timer, pid_t pid, void *startf,
         void *timerf, char *comm,
         unsigned int timer_flag);

static inline void timer_stats_account_hrtimer(struct hrtimer *timer)
{
 timer_stats_update_stats(timer, timer->start_pid, timer->start_site,
     timer->function, timer->start_comm, 0);
}

extern void __timer_stats_hrtimer_set_start_info(struct hrtimer *timer,
       void *addr);

static inline void timer_stats_hrtimer_set_start_info(struct hrtimer *timer)
{
 __timer_stats_hrtimer_set_start_info(timer, __builtin_return_address(0));
}

static inline void timer_stats_hrtimer_clear_start_info(struct hrtimer *timer)
{
 timer->start_site = 0;
}

struct tvec_base;

struct timer_list {
  template <typename, int = 0> struct __BYPASStimer_list {};
  template <typename, int> friend struct __BYPASStimer_list;
 struct list_head entry;
 unsigned long expires;

 void (*function)(unsigned long);
 unsigned long data;

 struct tvec_base *base;

 void *start_site;
 char start_comm[16];
 int start_pid;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct tvec_base boot_tvec_bases;
void init_timer(struct timer_list *timer);
void init_timer_deferrable(struct timer_list *timer);





static inline void destroy_timer_on_stack(struct timer_list *timer) { }
static inline void init_timer_on_stack(struct timer_list *timer)
{
 init_timer(timer);
}


static inline void setup_timer(struct timer_list * timer,
    void (*function)(unsigned long),
    unsigned long data)
{
 timer->function = function;
 timer->data = data;
 init_timer(timer);
}

static inline void setup_timer_on_stack(struct timer_list *timer,
     void (*function)(unsigned long),
     unsigned long data)
{
 timer->function = function;
 timer->data = data;
 init_timer_on_stack(timer);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_865_0 {
  typedef TJP__ZN9list_head4nextE_865_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_865(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_865_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10timer_list5entryE_866_0 {
  typedef TJP__ZN10timer_list5entryE_866_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head __get__ZN10timer_list5entryE_866(list_head *source) {
  AC::ResultBuffer< ::list_head  > __result_buffer;
  typedef TJP__ZN10timer_list5entryE_866_0< ::list_head , ::timer_list , ::list_head  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head &)__result_buffer;
}
static inline int timer_pending( struct timer_list * timer)
{
 return __get__ZN9list_head4nextE_865(&__get__ZN10timer_list5entryE_866(&timer->entry).next) != 0;
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int __mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern unsigned long next_timer_interrupt(void);





extern unsigned long get_next_timer_interrupt(unsigned long now);
extern void init_timer_stats(void);

extern void timer_stats_update_stats(void *timer, pid_t pid, void *startf,
         void *timerf, char *comm,
         unsigned int timer_flag);

extern void __timer_stats_timer_set_start_info(struct timer_list *timer,
            void *addr);

static inline void timer_stats_timer_set_start_info(struct timer_list *timer)
{
 __timer_stats_timer_set_start_info(timer, __builtin_return_address(0));
}

static inline void timer_stats_timer_clear_start_info(struct timer_list *timer)
{
 timer->start_site = 0;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10timer_list7expiresE_867_0 {
  typedef TJP__ZN10timer_list7expiresE_867_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10timer_list7expiresE_867(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10timer_list7expiresE_867_0< unsigned long int , ::timer_list , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void add_timer(struct timer_list *timer)
{
 ;
 __mod_timer(timer, __get__ZN10timer_list7expiresE_867(&timer->expires));
}


  extern int try_to_del_timer_sync(struct timer_list *timer);
  extern int del_timer_sync(struct timer_list *timer);







extern void init_timers(void);
extern void run_local_timers(void);
struct hrtimer;
extern enum hrtimer_restart it_real_fn(struct hrtimer *);

unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);




struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);







struct work_struct {
  template <typename, int = 0> struct __BYPASSwork_struct {};
  template <typename, int> friend struct __BYPASSwork_struct;
 atomic_long_t data;



 struct list_head entry;
 work_func_t func;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct delayed_work {
  template <typename, int = 0> struct __BYPASSdelayed_work {};
  template <typename, int> friend struct __BYPASSdelayed_work;
 struct work_struct work;
 struct timer_list timer;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct execute_work {
  template <typename, int = 0> struct __BYPASSexecute_work {};
  template <typename, int> friend struct __BYPASSexecute_work;
 struct work_struct work;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct workqueue_struct *
__create_workqueue_key( char *name, int singlethread,
         int freezeable, struct lock_class_key *key,
         char *lock_name);
extern void destroy_workqueue(struct workqueue_struct *wq);

extern int queue_work(struct workqueue_struct *wq, struct work_struct *work);
extern int queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern int queue_delayed_work(struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern int queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void flush_scheduled_work(void);

extern int schedule_work(struct work_struct *work);
extern int schedule_work_on(int cpu, struct work_struct *work);
extern int schedule_delayed_work(struct delayed_work *work, unsigned long delay);
extern int schedule_delayed_work_on(int cpu, struct delayed_work *work,
     unsigned long delay);
extern int schedule_on_each_cpu(work_func_t func);
extern int current_is_keventd(void);
extern int keventd_up(void);

extern void init_workqueues(void);
int execute_in_process_context(work_func_t fn, struct execute_work *);

extern int flush_work(struct work_struct *work);

extern int cancel_work_sync(struct work_struct *work);







static inline int cancel_delayed_work(struct delayed_work *work)
{
 int ret;

 ret = del_timer_sync(&work->timer);
 if (ret)
  clear_bit(0, ((unsigned long *)(&(&work->work)->data)));
 return ret;
}

extern int cancel_delayed_work_sync(struct delayed_work *work);


static inline
void cancel_rearming_delayed_workqueue(struct workqueue_struct *wq,
     struct delayed_work *work)
{
 cancel_delayed_work_sync(work);
}


static inline
void cancel_rearming_delayed_work(struct delayed_work *work)
{
 cancel_delayed_work_sync(work);
}

struct kobject;
struct module;





struct attribute {
  template <typename, int = 0> struct __BYPASSattribute {};
  template <typename, int> friend struct __BYPASSattribute;
 char *name;
 struct module *owner;
 mode_t mode;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct attribute_group {
  template <typename, int = 0> struct __BYPASSattribute_group {};
  template <typename, int> friend struct __BYPASSattribute_group;
 char *name;
 mode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 struct attribute **attrs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct vm_area_struct;

struct bin_attribute {
  template <typename, int = 0> struct __BYPASSbin_attribute {};
  template <typename, int> friend struct __BYPASSbin_attribute;
 struct attribute attr;
 size_t size;
 void *_private;
 ssize_t (*read)(struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sysfs_ops {
  template <typename, int = 0> struct __BYPASSsysfs_ops {};
  template <typename, int> friend struct __BYPASSsysfs_ops;
 ssize_t (*show)(struct kobject *, struct attribute *,char *);
 ssize_t (*store)(struct kobject *,struct attribute *, char *, size_t);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



int sysfs_schedule_callback(struct kobject *kobj, void (*func)(void *),
       void *data, struct module *owner);

int __attribute__((warn_unused_result)) sysfs_create_dir(struct kobject *kobj);
void sysfs_remove_dir(struct kobject *kobj);
int __attribute__((warn_unused_result)) sysfs_rename_dir(struct kobject *kobj, char *new_name);
int __attribute__((warn_unused_result)) sysfs_move_dir(struct kobject *kobj,
    struct kobject *new_parent_kobj);

int __attribute__((warn_unused_result)) sysfs_create_file(struct kobject *kobj,
       struct attribute *attr);
int __attribute__((warn_unused_result)) sysfs_chmod_file(struct kobject *kobj, struct attribute *attr,
      mode_t mode);
void sysfs_remove_file(struct kobject *kobj, struct attribute *attr);

int __attribute__((warn_unused_result)) sysfs_create_bin_file(struct kobject *kobj,
           struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj, struct bin_attribute *attr);

int __attribute__((warn_unused_result)) sysfs_create_link(struct kobject *kobj, struct kobject *target,
       char *name);
int __attribute__((warn_unused_result)) sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       char *name);
void sysfs_remove_link(struct kobject *kobj, char *name);

int __attribute__((warn_unused_result)) sysfs_create_group(struct kobject *kobj,
        struct attribute_group *grp);
int sysfs_update_group(struct kobject *kobj,
         struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   struct attribute_group *grp);
int sysfs_add_file_to_group(struct kobject *kobj,
   struct attribute *attr, char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   struct attribute *attr, char *group);

void sysfs_notify(struct kobject *kobj, char *dir, char *attr);

extern int __attribute__((warn_unused_result)) sysfs_init(void);



struct kref {
  template <typename, int = 0> struct __BYPASSkref {};
  template <typename, int> friend struct __BYPASSkref;
 atomic_t refcount;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void kref_set(struct kref *kref, int num);
void kref_init(struct kref *kref);
void kref_get(struct kref *kref);
int kref_put(struct kref *kref, void (*release) (struct kref *kref));








extern char uevent_helper[];


extern u64 uevent_seqnum;
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_MAX
};

struct kobject {
  template <typename, int = 0> struct __BYPASSkobject {};
  template <typename, int> friend struct __BYPASSkobject;
 char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct sysfs_dirent *sd;
 struct kref kref;
 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int kobject_set_name(struct kobject *kobj, char *name, ...)
       __attribute__((format(printf, 2, 3)));

static inline char *kobject_name( struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern int __attribute__((warn_unused_result)) kobject_add(struct kobject *kobj,
        struct kobject *parent,
        char *fmt, ...);
extern int __attribute__((warn_unused_result)) kobject_init_and_add(struct kobject *kobj,
          struct kobj_type *ktype,
          struct kobject *parent,
          char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * __attribute__((warn_unused_result)) kobject_create(void);
extern struct kobject * __attribute__((warn_unused_result)) kobject_create_and_add( char *name,
      struct kobject *parent);

extern int __attribute__((warn_unused_result)) kobject_rename(struct kobject *, char *new_name);
extern int __attribute__((warn_unused_result)) kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);

struct kobj_type {
  template <typename, int = 0> struct __BYPASSkobj_type {};
  template <typename, int> friend struct __BYPASSkobj_type;
 void (*release)(struct kobject *kobj);
 struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kobj_uevent_env {
  template <typename, int = 0> struct __BYPASSkobj_uevent_env {};
  template <typename, int> friend struct __BYPASSkobj_uevent_env;
 char *envp[32];
 int envp_idx;
 char buf[2048];
 int buflen;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kset_uevent_ops {
  template <typename, int = 0> struct __BYPASSkset_uevent_ops {};
  template <typename, int> friend struct __BYPASSkset_uevent_ops;
 int (*filter)(struct kset *kset, struct kobject *kobj);
 char *(*name)(struct kset *kset, struct kobject *kobj);
 int (*uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kobj_attribute {
  template <typename, int = 0> struct __BYPASSkobj_attribute {};
  template <typename, int> friend struct __BYPASSkobj_attribute;
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    char *buf, size_t count);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct sysfs_ops kobj_sysfs_ops;
struct kset {
  template <typename, int = 0> struct __BYPASSkset {};
  template <typename, int> friend struct __BYPASSkset;
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 struct kset_uevent_ops *uevent_ops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void kset_init(struct kset *kset);
extern int __attribute__((warn_unused_result)) kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * __attribute__((warn_unused_result)) kset_create_and_add( char *name,
      struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ typeof( ((struct kset *)0)->kobj ) *__mptr = (kobj); (struct kset *)( (char *)__mptr - ((size_t) &((struct kset *)0)->kobj) );}) : 0;
}

static inline struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : 0;
}

static inline void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;


int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);

int add_uevent_var(struct kobj_uevent_env *env, char *format, ...)
 __attribute__((format (printf, 2, 3)));

int kobject_action_type( char *buf, size_t count,
   enum kobject_action *type);

enum stat_item {
 ALLOC_FASTPATH,
 ALLOC_SLOWPATH,
 FREE_FASTPATH,
 FREE_SLOWPATH,
 FREE_FROZEN,
 FREE_ADD_PARTIAL,
 FREE_REMOVE_PARTIAL,
 ALLOC_FROM_PARTIAL,
 ALLOC_SLAB,
 ALLOC_REFILL,
 FREE_SLAB,
 CPUSLAB_FLUSH,
 DEACTIVATE_FULL,
 DEACTIVATE_EMPTY,
 DEACTIVATE_TO_HEAD,
 DEACTIVATE_TO_TAIL,
 DEACTIVATE_REMOTE_FREES,
 ORDER_FALLBACK,
 NR_SLUB_STAT_ITEMS };

struct kmem_cache_cpu {
  template <typename, int = 0> struct __BYPASSkmem_cache_cpu {};
  template <typename, int> friend struct __BYPASSkmem_cache_cpu;
 void **freelist;
 struct page *page;
 int node;
 unsigned int offset;
 unsigned int objsize;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kmem_cache_node {
  template <typename, int = 0> struct __BYPASSkmem_cache_node {};
  template <typename, int> friend struct __BYPASSkmem_cache_node;
 spinlock_t list_lock;
 unsigned long nr_partial;
 unsigned long min_partial;
 struct list_head partial;

 atomic_long_t nr_slabs;
 atomic_long_t total_objects;
 struct list_head full;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct kmem_cache_order_objects {
  template <typename, int = 0> struct __BYPASSkmem_cache_order_objects {};
  template <typename, int> friend struct __BYPASSkmem_cache_order_objects;
 unsigned long x;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct kmem_cache {
  template <typename, int = 0> struct __BYPASSkmem_cache {};
  template <typename, int> friend struct __BYPASSkmem_cache;

 unsigned long flags;
 int size;
 int objsize;
 int offset;
 struct kmem_cache_order_objects oo;





 struct kmem_cache_node local_node;


 struct kmem_cache_order_objects max;
 struct kmem_cache_order_objects min;
 gfp_t allocflags;
 int refcount;
 void (*ctor)(void *);
 int inuse;
 int align;
 char *name;
 struct list_head list;

 struct kobject kobj;






 int remote_node_defrag_ratio;
 struct kmem_cache_node *node[(1 << 9)];


 struct kmem_cache_cpu *cpu_slab[64];




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct kmem_cache kmalloc_caches[12 + 1];





static inline __attribute__((always_inline)) int kmalloc_index(size_t size)
{
 if (!size)
  return 0;

 if (size <= 8)
  return ( __builtin_constant_p(8) ? ( (8) < 1 ? ____ilog2_NaN() : (8) & (1ULL << 63) ? 63 : (8) & (1ULL << 62) ? 62 : (8) & (1ULL << 61) ? 61 : (8) & (1ULL << 60) ? 60 : (8) & (1ULL << 59) ? 59 : (8) & (1ULL << 58) ? 58 : (8) & (1ULL << 57) ? 57 : (8) & (1ULL << 56) ? 56 : (8) & (1ULL << 55) ? 55 : (8) & (1ULL << 54) ? 54 : (8) & (1ULL << 53) ? 53 : (8) & (1ULL << 52) ? 52 : (8) & (1ULL << 51) ? 51 : (8) & (1ULL << 50) ? 50 : (8) & (1ULL << 49) ? 49 : (8) & (1ULL << 48) ? 48 : (8) & (1ULL << 47) ? 47 : (8) & (1ULL << 46) ? 46 : (8) & (1ULL << 45) ? 45 : (8) & (1ULL << 44) ? 44 : (8) & (1ULL << 43) ? 43 : (8) & (1ULL << 42) ? 42 : (8) & (1ULL << 41) ? 41 : (8) & (1ULL << 40) ? 40 : (8) & (1ULL << 39) ? 39 : (8) & (1ULL << 38) ? 38 : (8) & (1ULL << 37) ? 37 : (8) & (1ULL << 36) ? 36 : (8) & (1ULL << 35) ? 35 : (8) & (1ULL << 34) ? 34 : (8) & (1ULL << 33) ? 33 : (8) & (1ULL << 32) ? 32 : (8) & (1ULL << 31) ? 31 : (8) & (1ULL << 30) ? 30 : (8) & (1ULL << 29) ? 29 : (8) & (1ULL << 28) ? 28 : (8) & (1ULL << 27) ? 27 : (8) & (1ULL << 26) ? 26 : (8) & (1ULL << 25) ? 25 : (8) & (1ULL << 24) ? 24 : (8) & (1ULL << 23) ? 23 : (8) & (1ULL << 22) ? 22 : (8) & (1ULL << 21) ? 21 : (8) & (1ULL << 20) ? 20 : (8) & (1ULL << 19) ? 19 : (8) & (1ULL << 18) ? 18 : (8) & (1ULL << 17) ? 17 : (8) & (1ULL << 16) ? 16 : (8) & (1ULL << 15) ? 15 : (8) & (1ULL << 14) ? 14 : (8) & (1ULL << 13) ? 13 : (8) & (1ULL << 12) ? 12 : (8) & (1ULL << 11) ? 11 : (8) & (1ULL << 10) ? 10 : (8) & (1ULL << 9) ? 9 : (8) & (1ULL << 8) ? 8 : (8) & (1ULL << 7) ? 7 : (8) & (1ULL << 6) ? 6 : (8) & (1ULL << 5) ? 5 : (8) & (1ULL << 4) ? 4 : (8) & (1ULL << 3) ? 3 : (8) & (1ULL << 2) ? 2 : (8) & (1ULL << 1) ? 1 : (8) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(8) <= 4) ? __ilog2_u32(8) : __ilog2_u64(8) );


 if (size > 64 && size <= 96)
  return 1;
 if (size > 128 && size <= 192)
  return 2;

 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;




 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 return -1;
}







static inline __attribute__((always_inline)) struct kmem_cache *kmalloc_slab(size_t size)
{
 int index = kmalloc_index(size);

 if (index == 0)
  return 0;

 return &kmalloc_caches[index];
}
void *kmem_cache_alloc(struct kmem_cache *, gfp_t);
void *__kmalloc(size_t size, gfp_t flags);

static inline __attribute__((always_inline)) void *kmalloc_large(size_t size, gfp_t flags)
{
 return (void *)__get_free_pages(flags | (( gfp_t)0x4000u), get_order(size));
}


extern void *kmalloc(size_t size, gfp_t flags);
void *__kmalloc_node(size_t size, gfp_t flags, int node);
void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t flags, int node);

static inline __attribute__((always_inline)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{
 if (__builtin_constant_p(size) &&
  size <= ((1UL) << 12) && !(flags & (( gfp_t)0x01u))) {
   struct kmem_cache *s = kmalloc_slab(size);

  if (!s)
   return ((void *)16);

  return kmem_cache_alloc_node(s, flags, node);
 }
 return __kmalloc_node(size, flags, node);
}
static inline void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 if (size != 0 && n > (~0UL) / size)
  return 0;
 return __kmalloc(n * size, flags | (( gfp_t)0x8000u));
}
extern void *__kmalloc_track_caller(size_t, gfp_t, void*);
extern void *__kmalloc_node_track_caller(size_t, gfp_t, int, void *);
static inline void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x8000u));
}






static inline void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x8000u));
}







static inline void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x8000u), node);
}


extern struct seq_operations slabinfo_op;
ssize_t slabinfo_write(struct file *, char *, size_t, loff_t *);
struct percpu_data {
  template <typename, int = 0> struct __BYPASSpercpu_data {};
  template <typename, int> friend struct __BYPASSpercpu_data;
 void *ptrs[1];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void *__percpu_alloc_mask(size_t size, gfp_t gfp, cpumask_t *mask);
extern void percpu_free(void *__pdata);

enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,
  PGALLOC_DMA, PGALLOC_DMA32, PGALLOC_NORMAL , PGALLOC_MOVABLE,
  PGFREE, PGACTIVATE, PGDEACTIVATE,
  PGFAULT, PGMAJFAULT,
  PGREFILL_DMA, PGREFILL_DMA32, PGREFILL_NORMAL , PGREFILL_MOVABLE,
  PGSTEAL_DMA, PGSTEAL_DMA32, PGSTEAL_NORMAL , PGSTEAL_MOVABLE,
  PGSCAN_KSWAPD_DMA, PGSCAN_KSWAPD_DMA32, PGSCAN_KSWAPD_NORMAL , PGSCAN_KSWAPD_MOVABLE,
  PGSCAN_DIRECT_DMA, PGSCAN_DIRECT_DMA32, PGSCAN_DIRECT_NORMAL , PGSCAN_DIRECT_MOVABLE,
  PGINODESTEAL, SLABS_SCANNED, KSWAPD_STEAL, KSWAPD_INODESTEAL,
  PAGEOUTRUN, ALLOCSTALL, PGROTATED,

  HTLB_BUDDY_PGALLOC, HTLB_BUDDY_PGALLOC_FAIL,

  NR_VM_EVENT_ITEMS
};

extern struct seq_operations fragmentation_op;
extern struct seq_operations pagetypeinfo_op;
extern struct seq_operations zoneinfo_op;
extern struct seq_operations vmstat_op;
extern int sysctl_stat_interval;
struct vm_event_state {
  template <typename, int = 0> struct __BYPASSvm_event_state {};
  template <typename, int> friend struct __BYPASSvm_event_state;
 unsigned long event[NR_VM_EVENT_ITEMS];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern __typeof__(struct vm_event_state) per_cpu__vm_event_states;

static inline void __count_vm_event(enum vm_event_item item)
{
 (*({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((&per_cpu__vm_event_states))); (typeof((&per_cpu__vm_event_states))) (__ptr + ((({ typeof(_proxy_pda.data_offset) ret__; switch (sizeof(_proxy_pda.data_offset)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; default: __bad_pda_field(); } ret__; })))); })).event[item]++;
}

static inline void count_vm_event(enum vm_event_item item)
{
 (*({ extern int simple_identifier_vm_event_states(void); do { } while (0); &(*({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((&per_cpu__vm_event_states))); (typeof((&per_cpu__vm_event_states))) (__ptr + ((({ typeof(_proxy_pda.data_offset) ret__; switch (sizeof(_proxy_pda.data_offset)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; default: __bad_pda_field(); } ret__; })))); })); })).event[item]++;
 do { } while (0);
}

static inline void __count_vm_events(enum vm_event_item item, long delta)
{
 (*({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((&per_cpu__vm_event_states))); (typeof((&per_cpu__vm_event_states))) (__ptr + ((({ typeof(_proxy_pda.data_offset) ret__; switch (sizeof(_proxy_pda.data_offset)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; default: __bad_pda_field(); } ret__; })))); })).event[item] += delta;
}

static inline void count_vm_events(enum vm_event_item item, long delta)
{
 (*({ extern int simple_identifier_vm_event_states(void); do { } while (0); &(*({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((&per_cpu__vm_event_states))); (typeof((&per_cpu__vm_event_states))) (__ptr + ((({ typeof(_proxy_pda.data_offset) ret__; switch (sizeof(_proxy_pda.data_offset)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (_proxy_pda.data_offset)); break; default: __bad_pda_field(); } ret__; })))); })); })).event[item] += delta;
 do { } while (0);
}

extern void all_vm_events(unsigned long *);

extern void vm_events_fold_cpu(int cpu);
extern atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];


template <typename TResult, typename TThat, typename TTarget> struct TJP_vm_stat_872_0 {
  typedef TJP_vm_stat_872_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline _atomic64 __get_vm_stat_872(_atomic64 *source) {
  AC::ResultBuffer< ::atomic_long_t  > __result_buffer;
  typedef TJP_vm_stat_872_0< ::atomic_long_t , void *, ::atomic_long_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::atomic_long_t &)__result_buffer;
}
static inline void zone_page_state_add(long x, struct zone *zone,
     enum zone_stat_item item)
{
 atomic_long_add(x, &zone->vm_stat[item]);
 atomic_long_add(x, &__get_vm_stat_872(&vm_stat[item]));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP_vm_stat_873_0 {
  typedef TJP_vm_stat_873_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline _atomic64 __get_vm_stat_873(_atomic64 *source) {
  AC::ResultBuffer< ::atomic_long_t  > __result_buffer;
  typedef TJP_vm_stat_873_0< ::atomic_long_t , void *, ::atomic_long_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::atomic_long_t &)__result_buffer;
}
static inline unsigned long global_page_state(enum zone_stat_item item)
{
 long x = atomic_long_read(&__get_vm_stat_873(&vm_stat[item]));

 if (x < 0)
  x = 0;

 return x;
}

static inline unsigned long zone_page_state(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}







static inline unsigned long node_page_state(int node,
     enum zone_stat_item item)
{
 struct zone *zones = (node_data[node])->node_zones;

 return

  zone_page_state(&zones[ZONE_DMA], item) +


  zone_page_state(&zones[ZONE_DMA32], item) +




  zone_page_state(&zones[ZONE_NORMAL], item) +
  zone_page_state(&zones[ZONE_MOVABLE], item);
}

extern void zone_statistics(struct zone *, struct zone *);
static inline void zap_zone_vm_stats(struct zone *zone)
{
 memset(zone->vm_stat, 0, sizeof(zone->vm_stat));
}

extern void inc_zone_state(struct zone *, enum zone_stat_item);


void __mod_zone_page_state(struct zone *, enum zone_stat_item item, int);
void __inc_zone_page_state(struct page *, enum zone_stat_item);
void __dec_zone_page_state(struct page *, enum zone_stat_item);

void mod_zone_page_state(struct zone *, enum zone_stat_item, int);
void inc_zone_page_state(struct page *, enum zone_stat_item);
void dec_zone_page_state(struct page *, enum zone_stat_item);

extern void inc_zone_state(struct zone *, enum zone_stat_item);
extern void __inc_zone_state(struct zone *, enum zone_stat_item);
extern void dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_zone_state(struct zone *, enum zone_stat_item);

void refresh_cpu_vm_stats(int);

static inline __attribute__((always_inline)) void *lowmem_page_address(struct page *page)
{
 return ((void *)((unsigned long)(((page) - ((struct page *)(0xffffe20000000000UL))) << 12)+((unsigned long)(0xffff880000000000UL))));
}
extern struct address_space swapper_space;
static inline struct address_space *page_mapping(struct page *page)
{
 struct address_space *mapping = page->mapping;

 do { } while(0);

 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  mapping = &swapper_space;
 else

 if (__builtin_expect(!!((unsigned long)mapping & 1), 0))
  mapping = 0;
 return mapping;
}

static inline int PageAnon(struct page *page)
{
 return ((unsigned long)page->mapping & 1) != 0;
}





static inline unsigned long page_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return ((page)->_private);
 return page->index;
}






static inline void reset_page_mapcount(struct page *page)
{
 ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_886_0 {
  typedef TJP__ZN7_atomic7counterE_886_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_886(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_886_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int page_mapcount(struct page *page)
{
 return (__get__ZN7_atomic7counterE_886(&(&(page)->_mapcount)->counter)) + 1;
}





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_887_0 {
  typedef TJP__ZN7_atomic7counterE_887_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_887(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_887_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int page_mapped(struct page *page)
{
 return (__get__ZN7_atomic7counterE_887(&(&(page)->_mapcount)->counter)) >= 0;
}
extern void show_free_areas(void);


int shmem_lock(struct file *file, int lock, struct user_struct *user);







struct file *shmem_file_setup(char *name, loff_t size, unsigned long flags);

int shmem_zero_setup(struct vm_area_struct *);
extern int can_do_mlock(void);
extern int user_shm_lock(size_t, struct user_struct *);
extern void user_shm_unlock(size_t, struct user_struct *);




struct zap_details {
  template <typename, int = 0> struct __BYPASSzap_details {};
  template <typename, int> friend struct __BYPASSzap_details;
 struct vm_area_struct *nonlinear_vma;
 struct address_space *check_mapping;
 unsigned long first_index;
 unsigned long last_index;
 spinlock_t *i_mmap_lock;
 unsigned long truncate_count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,
  pte_t pte);

int zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
  unsigned long size);
unsigned long zap_page_range(struct vm_area_struct *vma, unsigned long address,
  unsigned long size, struct zap_details *);
unsigned long unmap_vmas(struct mmu_gather **tlb,
  struct vm_area_struct *start_vma, unsigned long start_addr,
  unsigned long end_addr, unsigned long *nr_accounted,
  struct zap_details *);
struct mm_walk {
  template <typename, int = 0> struct __BYPASSmm_walk {};
  template <typename, int> friend struct __BYPASSmm_walk;
 int (*pgd_entry)(pgd_t *, unsigned long, unsigned long, struct mm_walk *);
 int (*pud_entry)(pud_t *, unsigned long, unsigned long, struct mm_walk *);
 int (*pmd_entry)(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
 int (*pte_entry)(pte_t *, unsigned long, unsigned long, struct mm_walk *);
 int (*pte_hole)(unsigned long, unsigned long, struct mm_walk *);
 struct mm_struct *mm;
 void *_private;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int walk_page_range(unsigned long addr, unsigned long end,
  struct mm_walk *walk);
void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  unsigned long end, unsigned long floor, unsigned long ceiling);
int copy_page_range(struct mm_struct *dst, struct mm_struct *src,
   struct vm_area_struct *vma);
void unmap_mapping_range(struct address_space *mapping,
  loff_t holebegin, loff_t holelen, int even_cows);
int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,
   void *buf, int len, int write);

static inline void unmap_shared_mapping_range(struct address_space *mapping,
  loff_t holebegin, loff_t holelen)
{
 unmap_mapping_range(mapping, holebegin, holelen, 0);
}

extern int vmtruncate(struct inode * inode, loff_t offset);
extern int vmtruncate_range(struct inode * inode, loff_t offset, loff_t end);


extern int handle_mm_fault(struct mm_struct *mm, struct vm_area_struct *vma,
   unsigned long address, int write_access);
extern int make_pages_present(unsigned long addr, unsigned long end);
extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write);

int get_user_pages(struct task_struct *tsk, struct mm_struct *mm, unsigned long start,
  int len, int write, int force, struct page **pages, struct vm_area_struct **vmas);

extern int try_to_release_page(struct page * page, gfp_t gfp_mask);
extern void do_invalidatepage(struct page *page, unsigned long offset);

int __set_page_dirty_nobuffers(struct page *page);
int __set_page_dirty_no_writeback(struct page *page);
int redirty_page_for_writepage(struct writeback_control *wbc,
    struct page *page);
int set_page_dirty(struct page *page);
int set_page_dirty_lock(struct page *page);
int clear_page_dirty_for_io(struct page *page);

extern unsigned long move_page_tables(struct vm_area_struct *vma,
  unsigned long old_addr, struct vm_area_struct *new_vma,
  unsigned long new_addr, unsigned long len);
extern unsigned long do_mremap(unsigned long addr,
          unsigned long old_len, unsigned long new_len,
          unsigned long flags, unsigned long new_addr);
extern int mprotect_fixup(struct vm_area_struct *vma,
     struct vm_area_struct **pprev, unsigned long start,
     unsigned long end, unsigned long newflags);
int get_user_pages_fast(unsigned long start, int nr_pages, int write,
   struct page **pages);
struct shrinker {
  template <typename, int = 0> struct __BYPASSshrinker {};
  template <typename, int> friend struct __BYPASSshrinker;
 int (*shrink)(int nr_to_scan, gfp_t gfp_mask);
 int seeks;


 struct list_head list;
 long nr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void register_shrinker(struct shrinker *);
extern void unregister_shrinker(struct shrinker *);

int vma_wants_writenotify(struct vm_area_struct *vma);

extern pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr, spinlock_t **ptl);
int __pud_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address);
int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);


int __pte_alloc(struct mm_struct *mm, pmd_t *pmd, unsigned long address);
int __pte_alloc_kernel(pmd_t *pmd, unsigned long address);






static inline pud_t *pud_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address)
{
 return (__builtin_expect(!!((!pgd_val(*pgd))), 0) && __pud_alloc(mm, pgd, address))?
  0: ((pud_t *)((unsigned long)((void *)((unsigned long)((unsigned long)pgd_val((*(pgd))) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(1ULL << 46) - 1))))+((unsigned long)(0xffff880000000000UL))))) + ((((address)) >> 30) & (512 - 1)));
}

static inline pmd_t *pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
{
 return (__builtin_expect(!!((!pud_val(*pud))), 0) && __pmd_alloc(mm, pud, address))?
  0: ((pmd_t *)((unsigned long)((void *)((unsigned long)(pud_val((*(pud))) & (((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)(1ULL << 46) - 1)))+((unsigned long)(0xffff880000000000UL))))) + (((address) >> 21) & (512 - 1)));
}
static inline void pgtable_page_ctor(struct page *page)
{
 do { ; } while (0);
 inc_zone_page_state(page, NR_PAGETABLE);
}

static inline void pgtable_page_dtor(struct page *page)
{
 ((page)->mapping = 0);
 dec_zone_page_state(page, NR_PAGETABLE);
}
extern void free_area_init(unsigned long * zones_size);
extern void free_area_init_node(int nid, unsigned long * zones_size,
  unsigned long zone_start_pfn, unsigned long *zholes_size);
extern void free_area_init_nodes(unsigned long *max_zone_pfn);
extern void add_active_range(unsigned int nid, unsigned long start_pfn,
     unsigned long end_pfn);
extern void remove_active_range(unsigned int nid, unsigned long start_pfn,
     unsigned long end_pfn);
extern void push_node_boundaries(unsigned int nid, unsigned long start_pfn,
     unsigned long end_pfn);
extern void remove_all_active_ranges(void);
extern unsigned long absent_pages_in_range(unsigned long start_pfn,
      unsigned long end_pfn);
extern void get_pfn_range_for_nid(unsigned int nid,
   unsigned long *start_pfn, unsigned long *end_pfn);
extern unsigned long find_min_pfn_with_active_regions(void);
extern void free_bootmem_with_active_regions(int nid,
      unsigned long max_low_pfn);
typedef int (*work_fn_t)(unsigned long, unsigned long, void *);
extern void work_with_active_regions(int nid, work_fn_t work_fn, void *data);
extern void sparse_memory_present_with_active_regions(int nid);
extern int __attribute__ ((__section__(".meminit.text"))) __attribute__((__cold__)) early_pfn_to_nid(unsigned long pfn);


extern int __attribute__ ((__section__(".meminit.text"))) __attribute__((__cold__)) __early_pfn_to_nid(unsigned long pfn);



extern void set_dma_reserve(unsigned long new_dma_reserve);
extern void memmap_init_zone(unsigned long, int, unsigned long,
    unsigned long, enum memmap_context);
extern void setup_per_zone_pages_min(void);
extern void mem_init(void);
extern void show_mem(void);
extern void si_meminfo(struct sysinfo * val);
extern void si_meminfo_node(struct sysinfo *val, int nid);
extern int after_bootmem;


extern void setup_per_cpu_pageset(void);





void vma_prio_tree_add(struct vm_area_struct *, struct vm_area_struct *old);
void vma_prio_tree_insert(struct vm_area_struct *, struct prio_tree_root *);
void vma_prio_tree_remove(struct vm_area_struct *, struct prio_tree_root *);
struct vm_area_struct *vma_prio_tree_next(struct vm_area_struct *vma,
 struct prio_tree_iter *iter);





static inline void vma_nonlinear_insert(struct vm_area_struct *vma,
     struct list_head *list)
{
 vma->shared.vm_set.parent = 0;
 list_add_tail(&vma->shared.vm_set.list, list);
}


extern int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin);
extern void vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert);
extern struct vm_area_struct *vma_merge(struct mm_struct *,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *, struct file *, unsigned long,
 struct mempolicy *);
extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
extern int split_vma(struct mm_struct *,
 struct vm_area_struct *, unsigned long addr, int new_below);
extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 struct rb_node **, struct rb_node *);
extern void unlink_file_vma(struct vm_area_struct *);
extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 unsigned long addr, unsigned long len, unsigned long pgoff);
extern void exit_mmap(struct mm_struct *);

extern int mm_take_all_locks(struct mm_struct *mm);
extern void mm_drop_all_locks(struct mm_struct *mm);



extern void added_exe_file_vma(struct mm_struct *mm);
extern void removed_exe_file_vma(struct mm_struct *mm);
extern int may_expand_vm(struct mm_struct *mm, unsigned long npages);
extern int install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags, struct page **pages);

extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

extern unsigned long do_mmap_pgoff(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot,
 unsigned long flag, unsigned long pgoff);
extern unsigned long mmap_region(struct file *file, unsigned long addr,
 unsigned long len, unsigned long flags,
 unsigned int vm_flags, unsigned long pgoff,
 int accountable);

static inline unsigned long do_mmap(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot,
 unsigned long flag, unsigned long offset)
{
 unsigned long ret = -22;
 if ((offset + (((len)+((typeof(len))(((1UL) << 12))-1))&~((typeof(len))(((1UL) << 12))-1))) < offset)
  goto out;
 if (!(offset & ~(~(((1UL) << 12)-1))))
  ret = do_mmap_pgoff(file, addr, len, prot, flag, offset >> 12);
out:
 return ret;
}

extern int do_munmap(struct mm_struct *, unsigned long, size_t);

extern unsigned long do_brk(unsigned long, unsigned long);


extern unsigned long page_unuse(struct page *);
extern void truncate_inode_pages(struct address_space *, loff_t);
extern void truncate_inode_pages_range(struct address_space *,
           loff_t lstart, loff_t lend);


extern int filemap_fault(struct vm_area_struct *, struct vm_fault *);


int write_one_page(struct page *page, int wait);





int do_page_cache_readahead(struct address_space *mapping, struct file *filp,
   unsigned long offset, unsigned long nr_to_read);
int force_page_cache_readahead(struct address_space *mapping, struct file *filp,
   unsigned long offset, unsigned long nr_to_read);

void page_cache_sync_readahead(struct address_space *mapping,
          struct file_ra_state *ra,
          struct file *filp,
          unsigned long offset,
          unsigned long size);

void page_cache_async_readahead(struct address_space *mapping,
    struct file_ra_state *ra,
    struct file *filp,
    struct page *pg,
    unsigned long offset,
    unsigned long size);

unsigned long max_sane_readahead(unsigned long nr);


extern int expand_stack(struct vm_area_struct *vma, unsigned long address);



extern int expand_stack_downwards(struct vm_area_struct *vma,
      unsigned long address);


extern struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr);
extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
          struct vm_area_struct **pprev);




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_startE_890_0 {
  typedef TJP__ZN14vm_area_struct8vm_startE_890_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_startE_890(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_startE_890_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, unsigned long start_addr, unsigned long end_addr)
{
 struct vm_area_struct * vma = find_vma(mm,start_addr);

 if (vma && end_addr <= __get__ZN14vm_area_struct8vm_startE_890(&vma->vm_start))
  vma = 0;
 return vma;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct6vm_endE_891_0 {
  typedef TJP__ZN14vm_area_struct6vm_endE_891_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct6vm_endE_891(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct6vm_endE_891_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_startE_892_0 {
  typedef TJP__ZN14vm_area_struct8vm_startE_892_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_startE_892(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_startE_892_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long vma_pages(struct vm_area_struct *vma)
{
 return (__get__ZN14vm_area_struct6vm_endE_891(&vma->vm_end) - __get__ZN14vm_area_struct8vm_startE_892(&vma->vm_start)) >> 12;
}

pgprot_t vm_get_page_prot(unsigned long vm_flags);
struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
   unsigned long pfn, unsigned long size, pgprot_t);
int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
int vm_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
int vm_insert_mixed(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);

struct page *follow_page(struct vm_area_struct *, unsigned long address,
   unsigned int foll_flags);





typedef int (*pte_fn_t)(pte_t *pte, pgtable_t token, unsigned long addr,
   void *data);
extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
          unsigned long size, pte_fn_t fn, void *data);


void vm_stat_account(struct mm_struct *, unsigned long, struct file *, long);
static inline void
kernel_map_pages(struct page *page, int numpages, int enable) {}
static inline void enable_debug_pagealloc(void)
{
}

static inline bool kernel_page_present(struct page *page) { return _true; }



extern struct vm_area_struct *get_gate_vma(struct task_struct *tsk);

int in_gate_area_no_task(unsigned long addr);
int in_gate_area(struct task_struct *task, unsigned long addr);





int drop_caches_sysctl_handler(struct ctl_table *, int, struct file *,
     void *, size_t *, loff_t *);
unsigned long shrink_slab(unsigned long scanned, gfp_t gfp_mask,
   unsigned long lru_pages);




extern int randomize_va_space;


 char * arch_vma_name(struct vm_area_struct *vma);
void print_vma_addr(char *prefix, unsigned long rip);

struct page *sparse_mem_map_populate(unsigned long pnum, int nid);
pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
pud_t *vmemmap_pud_populate(pgd_t *pgd, unsigned long addr, int node);
pmd_t *vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node);
pte_t *vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node);
void *vmemmap_alloc_block(unsigned long size, int node);
void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
int vmemmap_populate_basepages(struct page *start_page,
      unsigned long pages, int node);
int vmemmap_populate(struct page *start_page, unsigned long pages, int node);
void vmemmap_populate_print_last(void);
struct task_struct;
typedef struct __user_cap_header_struct {
  template <typename, int = 0> struct __BYPASS__user_cap_header_struct {};
  template <typename, int> friend struct __BYPASS__user_cap_header_struct;
 __u32 version;
 int pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
  template <typename, int = 0> struct __BYPASS__user_cap_data_struct {};
  template <typename, int> friend struct __BYPASS__user_cap_data_struct;
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} *cap_user_data_t;
struct vfs_cap_data {
  template <typename, int = 0> struct __BYPASSvfs_cap_data {};
  template <typename, int> friend struct __BYPASSvfs_cap_data;
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} data[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct kernel_cap_struct {
  template <typename, int = 0> struct __BYPASSkernel_cap_struct {};
  template <typename, int> friend struct __BYPASSkernel_cap_struct;
 __u32 cap[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} kernel_cap_t;

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_894_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_894_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_894(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_894_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_895_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_895_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_895(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_895_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline kernel_cap_t cap_combine( kernel_cap_t a,
           kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = __get__ZN17kernel_cap_struct3capE_894(a.cap)[__capi] | __get__ZN17kernel_cap_struct3capE_895(b.cap)[__capi]; } } while (0);
 return dest;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_896_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_896_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_896(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_896_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_897_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_897_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_897(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_897_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline kernel_cap_t cap_intersect( kernel_cap_t a,
      kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = __get__ZN17kernel_cap_struct3capE_896(a.cap)[__capi] & __get__ZN17kernel_cap_struct3capE_897(b.cap)[__capi]; } } while (0);
 return dest;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_898_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_898_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_898(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_898_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_899_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_899_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_899(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_899_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline kernel_cap_t cap_drop( kernel_cap_t a,
        kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = __get__ZN17kernel_cap_struct3capE_898(a.cap)[__capi] &~ __get__ZN17kernel_cap_struct3capE_899(drop.cap)[__capi]; } } while (0);
 return dest;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_900_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_900_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_900(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_900_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline kernel_cap_t cap_invert( kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ __get__ZN17kernel_cap_struct3capE_900(c.cap)[__capi]; } } while (0);
 return dest;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_901_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_901_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_901(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_901_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline int cap_isclear( kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (__get__ZN17kernel_cap_struct3capE_901(a.cap)[__capi] != 0)
   return 0;
 }
 return 1;
}

static inline int cap_issubset( kernel_cap_t a, kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_902_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_902_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_902(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_902_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline int cap_is_fs_cap(int cap)
{
 kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return !!((1 << ((cap) & 31)) & __get__ZN17kernel_cap_struct3capE_902(__cap_fs_set.cap)[((cap) >> 5)]);
}

static inline kernel_cap_t cap_drop_fs_set( kernel_cap_t a)
{
 kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline kernel_cap_t cap_raise_fs_set( kernel_cap_t a,
         kernel_cap_t permitted)
{
 kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline kernel_cap_t cap_drop_nfsd_set( kernel_cap_t a)
{
 kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline kernel_cap_t cap_raise_nfsd_set( kernel_cap_t a,
           kernel_cap_t permitted)
{
 kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}

extern kernel_cap_t __cap_empty_set;
extern kernel_cap_t __cap_full_set;
extern kernel_cap_t __cap_init_eff_set;

kernel_cap_t cap_set_effective( kernel_cap_t pE_new);
extern int capable(int cap);



struct flock {
  template <typename, int = 0> struct __BYPASSflock {};
  template <typename, int> friend struct __BYPASSflock;
 short l_type;
 short l_whence;
 off_t l_start;
 off_t l_len;
 pid_t l_pid;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct __kernel_sockaddr_storage {
  template <typename, int = 0> struct __BYPASS__kernel_sockaddr_storage {};
  template <typename, int> friend struct __BYPASS__kernel_sockaddr_storage;
 unsigned short ss_family;

 char __data[128 - sizeof(unsigned short)];



  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((aligned((__alignof__ (struct sockaddr *)))));






struct iovec
{
  template <typename, int = 0> struct __BYPASSiovec {};
  template <typename, int> friend struct __BYPASSiovec;
 void *iov_base;
 __kernel_size_t iov_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct kvec {
  template <typename, int = 0> struct __BYPASSkvec {};
  template <typename, int> friend struct __BYPASSkvec;
 void *iov_base;
 size_t iov_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline size_t iov_length( struct iovec *iov, unsigned long nr_segs)
{
 unsigned long seg;
 size_t ret = 0;

 for (seg = 0; seg < nr_segs; seg++)
  ret += iov[seg].iov_len;
 return ret;
}

unsigned long iov_shorten(struct iovec *iov, unsigned long nr_segs, size_t to);




struct seq_file;
extern void socket_seq_show(struct seq_file *seq);


typedef unsigned short sa_family_t;





struct sockaddr {
  template <typename, int = 0> struct __BYPASSsockaddr {};
  template <typename, int> friend struct __BYPASSsockaddr;
 sa_family_t sa_family;
 char sa_data[14];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct linger {
  template <typename, int = 0> struct __BYPASSlinger {};
  template <typename, int> friend struct __BYPASSlinger;
 int l_onoff;
 int l_linger;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct msghdr {
  template <typename, int = 0> struct __BYPASSmsghdr {};
  template <typename, int> friend struct __BYPASSmsghdr;
 void * msg_name;
 int msg_namelen;
 struct iovec * msg_iov;
 __kernel_size_t msg_iovlen;
 void * msg_control;
 __kernel_size_t msg_controllen;
 unsigned msg_flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct cmsghdr {
  template <typename, int = 0> struct __BYPASScmsghdr {};
  template <typename, int> friend struct __BYPASScmsghdr;
 __kernel_size_t cmsg_len;
        int cmsg_level;
        int cmsg_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline struct cmsghdr * __cmsg_nxthdr(void *__ctl, __kernel_size_t __size,
            struct cmsghdr *__cmsg)
{
 struct cmsghdr * __ptr;

 __ptr = (struct cmsghdr*)(((unsigned char *) __cmsg) + ( ((__cmsg->cmsg_len)+sizeof(long)-1) & ~(sizeof(long)-1) ));
 if ((unsigned long)((char*)(__ptr+1) - (char *) __ctl) > __size)
  return (struct cmsghdr *)0;

 return __ptr;
}

static inline struct cmsghdr * cmsg_nxthdr (struct msghdr *__msg, struct cmsghdr *__cmsg)
{
 return __cmsg_nxthdr(__msg->msg_control, __msg->msg_controllen, __cmsg);
}







struct ucred {
  template <typename, int = 0> struct __BYPASSucred {};
  template <typename, int> friend struct __BYPASSucred;
 __u32 pid;
 __u32 uid;
 __u32 gid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern int memcpy_fromiovec(unsigned char *kdata, struct iovec *iov, int len);
extern int memcpy_fromiovecend(unsigned char *kdata, struct iovec *iov,
    int offset, int len);
extern int csum_partial_copy_fromiovecend(unsigned char *kdata,
       struct iovec *iov,
       int offset,
       unsigned int len, __wsum *csump);

extern int verify_iovec(struct msghdr *m, struct iovec *iov, struct sockaddr *address, int mode);
extern int memcpy_toiovec(struct iovec *v, unsigned char *kdata, int len);
extern int move_addr_to_user(struct sockaddr *kaddr, int klen, void *uaddr, int *ulen);
extern int move_addr_to_kernel(void *uaddr, int ulen, struct sockaddr *kaddr);
extern int put_cmsg(struct msghdr*, int level, int type, int len, void *data);
enum {
  IPPROTO_IP = 0,
  IPPROTO_ICMP = 1,
  IPPROTO_IGMP = 2,
  IPPROTO_IPIP = 4,
  IPPROTO_TCP = 6,
  IPPROTO_EGP = 8,
  IPPROTO_PUP = 12,
  IPPROTO_UDP = 17,
  IPPROTO_IDP = 22,
  IPPROTO_DCCP = 33,
  IPPROTO_RSVP = 46,
  IPPROTO_GRE = 47,

  IPPROTO_IPV6 = 41,

  IPPROTO_ESP = 50,
  IPPROTO_AH = 51,
  IPPROTO_BEETPH = 94,
  IPPROTO_PIM = 103,

  IPPROTO_COMP = 108,
  IPPROTO_SCTP = 132,
  IPPROTO_UDPLITE = 136,

  IPPROTO_RAW = 255,
  IPPROTO_MAX
};



struct in_addr {
  template <typename, int = 0> struct __BYPASSin_addr {};
  template <typename, int> friend struct __BYPASSin_addr;
 __be32 s_addr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ip_mreq
{
  template <typename, int = 0> struct __BYPASSip_mreq {};
  template <typename, int> friend struct __BYPASSip_mreq;
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_mreqn
{
  template <typename, int = 0> struct __BYPASSip_mreqn {};
  template <typename, int> friend struct __BYPASSip_mreqn;
 struct in_addr imr_multiaddr;
 struct in_addr imr_address;
 int imr_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_mreq_source {
  template <typename, int = 0> struct __BYPASSip_mreq_source {};
  template <typename, int> friend struct __BYPASSip_mreq_source;
 __be32 imr_multiaddr;
 __be32 imr_interface;
 __be32 imr_sourceaddr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_msfilter {
  template <typename, int = 0> struct __BYPASSip_msfilter {};
  template <typename, int> friend struct __BYPASSip_msfilter;
 __be32 imsf_multiaddr;
 __be32 imsf_interface;
 __u32 imsf_fmode;
 __u32 imsf_numsrc;
 __be32 imsf_slist[1];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct group_req
{
  template <typename, int = 0> struct __BYPASSgroup_req {};
  template <typename, int> friend struct __BYPASSgroup_req;
 __u32 gr_interface;
 struct __kernel_sockaddr_storage gr_group;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct group_source_req
{
  template <typename, int = 0> struct __BYPASSgroup_source_req {};
  template <typename, int> friend struct __BYPASSgroup_source_req;
 __u32 gsr_interface;
 struct __kernel_sockaddr_storage gsr_group;
 struct __kernel_sockaddr_storage gsr_source;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct group_filter
{
  template <typename, int = 0> struct __BYPASSgroup_filter {};
  template <typename, int> friend struct __BYPASSgroup_filter;
 __u32 gf_interface;
 struct __kernel_sockaddr_storage gf_group;
 __u32 gf_fmode;
 __u32 gf_numsrc;
 struct __kernel_sockaddr_storage gf_slist[1];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct in_pktinfo
{
  template <typename, int = 0> struct __BYPASSin_pktinfo {};
  template <typename, int> friend struct __BYPASSin_pktinfo;
 int ipi_ifindex;
 struct in_addr ipi_spec_dst;
 struct in_addr ipi_addr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct sockaddr_in {
  template <typename, int = 0> struct __BYPASSsockaddr_in {};
  template <typename, int> friend struct __BYPASSsockaddr_in;
  sa_family_t sin_family;
  __be16 sin_port;
  struct in_addr sin_addr;


  unsigned char __pad[16 - sizeof(short int) -
   sizeof(unsigned short int) - sizeof(struct in_addr)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline bool ipv4_is_loopback(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xff000000)))) == (( __be32)__fswab32((0x7f000000)));
}

static inline bool ipv4_is_multicast(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xf0000000)))) == (( __be32)__fswab32((0xe0000000)));
}

static inline bool ipv4_is_local_multicast(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xffffff00)))) == (( __be32)__fswab32((0xe0000000)));
}

static inline bool ipv4_is_lbcast(__be32 addr)
{

 return addr == (( __be32)__fswab32((((unsigned long int) 0xffffffff))));
}

static inline bool ipv4_is_zeronet(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xff000000)))) == (( __be32)__fswab32((0x00000000)));
}



static inline bool ipv4_is_private_10(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xff000000)))) == (( __be32)__fswab32((0x0a000000)));
}

static inline bool ipv4_is_private_172(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xfff00000)))) == (( __be32)__fswab32((0xac100000)));
}

static inline bool ipv4_is_private_192(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xffff0000)))) == (( __be32)__fswab32((0xc0a80000)));
}

static inline bool ipv4_is_linklocal_169(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xffff0000)))) == (( __be32)__fswab32((0xa9fe0000)));
}

static inline bool ipv4_is_anycast_6to4(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xffffff00)))) == (( __be32)__fswab32((0xc0586300)));
}

static inline bool ipv4_is_test_192(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xffffff00)))) == (( __be32)__fswab32((0xc0000200)));
}

static inline bool ipv4_is_test_198(__be32 addr)
{
 return (addr & (( __be32)__fswab32((0xfffe0000)))) == (( __be32)__fswab32((0xc6120000)));
}
extern __be32 in_aton( char *str);
extern int in4_pton( char *src, int srclen, u8 *dst, int delim, char **end);
extern int in6_pton( char *src, int srclen, u8 *dst, int delim, char **end);
typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} sync_serial_settings;

typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
 unsigned int slot_map;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} te1_settings;

typedef struct {
 unsigned short encoding;
 unsigned short parity;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} raw_hdlc_proto;

typedef struct {
 unsigned int t391;
 unsigned int t392;
 unsigned int n391;
 unsigned int n392;
 unsigned int n393;
 unsigned short lmi;
 unsigned short dce;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fr_proto;

typedef struct {
 unsigned int dlci;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fr_proto_pvc;

typedef struct {
 unsigned int dlci;
 char master[16];

  friend class ::Introspect;
  friend class ::MyIntrospect;
}fr_proto_pvc_info;

typedef struct {
    unsigned int interval;
    unsigned int timeout;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} cisco_proto;
enum {
 IF_OPER_UNKNOWN,
 IF_OPER_NOTPRESENT,
 IF_OPER_DOWN,
 IF_OPER_LOWERLAYERDOWN,
 IF_OPER_TESTING,
 IF_OPER_DORMANT,
 IF_OPER_UP,
};


enum {
 IF_LINK_MODE_DEFAULT,
 IF_LINK_MODE_DORMANT,
};
struct ifmap
{
  template <typename, int = 0> struct __BYPASSifmap {};
  template <typename, int> friend struct __BYPASSifmap;
 unsigned long mem_start;
 unsigned long mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct if_settings
{
  template <typename, int = 0> struct __BYPASSif_settings {};
  template <typename, int> friend struct __BYPASSif_settings;
 unsigned int type;
 unsigned int size;
 union {

  raw_hdlc_proto *raw_hdlc;
  cisco_proto *cisco;
  fr_proto *fr;
  fr_proto_pvc *fr_pvc;
  fr_proto_pvc_info *fr_pvc_info;


  sync_serial_settings *sync;
  te1_settings *te1;
 } ifs_ifsu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ifreq
{
  template <typename, int = 0> struct __BYPASSifreq {};
  template <typename, int> friend struct __BYPASSifreq;

 union
 {
  char ifrn_name[16];
 } ifr_ifrn;

 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  int ifru_ivalue;
  int ifru_mtu;
  struct ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  void * ifru_data;
  struct if_settings ifru_settings;
 } ifr_ifru;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ifconf
{
  template <typename, int = 0> struct __BYPASSifconf {};
  template <typename, int> friend struct __BYPASSifconf;
 int ifc_len;
 union
 {
  char *ifcu_buf;
  struct ifreq *ifcu_req;
 } ifc_ifcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethhdr {
  template <typename, int = 0> struct __BYPASSethhdr {};
  template <typename, int> friend struct __BYPASSethhdr;
 unsigned char h_dest[6];
 unsigned char h_source[6];
 __be16 h_proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));




typedef enum {
 SS_FREE = 0,
 SS_UNCONNECTED,
 SS_CONNECTING,
 SS_CONNECTED,
 SS_DISCONNECTING
} socket_state;








extern unsigned int __invalid_size_argument_for_IOC;
struct rand_pool_info {
  template <typename, int = 0> struct __BYPASSrand_pool_info {};
  template <typename, int> friend struct __BYPASSrand_pool_info;
 int entropy_count;
 int buf_size;
 __u32 buf[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern void rand_initialize_irq(int irq);

extern void add_input_randomness(unsigned int type, unsigned int code,
     unsigned int value);
extern void add_interrupt_randomness(int irq);

extern void get_random_bytes(void *buf, int nbytes);
void generate_random_uuid(unsigned char uuid_out[16]);

extern __u32 secure_ip_id(__be32 daddr);
extern u32 secure_ipv4_port_ephemeral(__be32 saddr, __be32 daddr, __be16 dport);
extern u32 secure_ipv6_port_ephemeral( __be32 *saddr, __be32 *daddr,
          __be16 dport);
extern __u32 secure_tcp_sequence_number(__be32 saddr, __be32 daddr,
     __be16 sport, __be16 dport);
extern __u32 secure_tcpv6_sequence_number(__be32 *saddr, __be32 *daddr,
       __be16 sport, __be16 dport);
extern u64 secure_dccp_sequence_number(__be32 saddr, __be32 daddr,
           __be16 sport, __be16 dport);


extern struct file_operations random_fops, urandom_fops;


unsigned int get_random_int(void);
unsigned long randomize_range(unsigned long start, unsigned long end, unsigned long len);

u32 random32(void);
void srandom32(u32 seed);



struct poll_table_struct;
struct pipe_inode_info;
struct inode;
struct net;
enum sock_type {
 SOCK_STREAM = 1,
 SOCK_DGRAM = 2,
 SOCK_RAW = 3,
 SOCK_RDM = 4,
 SOCK_SEQPACKET = 5,
 SOCK_DCCP = 6,
 SOCK_PACKET = 10,
};
enum sock_shutdown_cmd {
 SHUT_RD = 0,
 SHUT_WR = 1,
 SHUT_RDWR = 2,
};
struct socket {
  template <typename, int = 0> struct __BYPASSsocket {};
  template <typename, int> friend struct __BYPASSsocket;
 socket_state state;
 short type;
 unsigned long flags;
 struct proto_ops *ops;
 struct fasync_struct *fasync_list;
 struct file *file;
 struct sock *sk;
 wait_queue_head_t wait;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct vm_area_struct;
struct page;
struct kiocb;
struct sockaddr;
struct msghdr;
struct module;

struct proto_ops {
  template <typename, int = 0> struct __BYPASSproto_ops {};
  template <typename, int> friend struct __BYPASSproto_ops;
 int family;
 struct module *owner;
 int (*release) (struct socket *sock);
 int (*bind) (struct socket *sock,
          struct sockaddr *myaddr,
          int sockaddr_len);
 int (*connect) (struct socket *sock,
          struct sockaddr *vaddr,
          int sockaddr_len, int flags);
 int (*socketpair)(struct socket *sock1,
          struct socket *sock2);
 int (*accept) (struct socket *sock,
          struct socket *newsock, int flags);
 int (*getname) (struct socket *sock,
          struct sockaddr *addr,
          int *sockaddr_len, int peer);
 unsigned int (*poll) (struct file *file, struct socket *sock,
          struct poll_table_struct *wait);
 int (*ioctl) (struct socket *sock, unsigned int cmd,
          unsigned long arg);
 int (*compat_ioctl) (struct socket *sock, unsigned int cmd,
          unsigned long arg);
 int (*listen) (struct socket *sock, int len);
 int (*shutdown) (struct socket *sock, int flags);
 int (*setsockopt)(struct socket *sock, int level,
          int optname, char *optval, int optlen);
 int (*getsockopt)(struct socket *sock, int level,
          int optname, char *optval, int *optlen);
 int (*compat_setsockopt)(struct socket *sock, int level,
          int optname, char *optval, int optlen);
 int (*compat_getsockopt)(struct socket *sock, int level,
          int optname, char *optval, int *optlen);
 int (*sendmsg) (struct kiocb *iocb, struct socket *sock,
          struct msghdr *m, size_t total_len);
 int (*recvmsg) (struct kiocb *iocb, struct socket *sock,
          struct msghdr *m, size_t total_len,
          int flags);
 int (*mmap) (struct file *file, struct socket *sock,
          struct vm_area_struct * vma);
 ssize_t (*sendpage) (struct socket *sock, struct page *page,
          int offset, size_t size, int flags);
 ssize_t (*splice_read)(struct socket *sock, loff_t *ppos,
           struct pipe_inode_info *pipe, size_t len, unsigned int flags);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct net_proto_family {
  template <typename, int = 0> struct __BYPASSnet_proto_family {};
  template <typename, int> friend struct __BYPASSnet_proto_family;
 int family;
 int (*create)(struct net *net, struct socket *sock, int protocol);
 struct module *owner;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct iovec;
struct kvec;

enum {
 SOCK_WAKE_IO,
 SOCK_WAKE_WAITD,
 SOCK_WAKE_SPACE,
 SOCK_WAKE_URG,
};

extern int sock_wake_async(struct socket *sk, int how, int band);
extern int sock_register( struct net_proto_family *fam);
extern void sock_unregister(int family);
extern int sock_create(int family, int type, int proto,
     struct socket **res);
extern int sock_create_kern(int family, int type, int proto,
          struct socket **res);
extern int sock_create_lite(int family, int type, int proto,
          struct socket **res);
extern void sock_release(struct socket *sock);
extern int sock_sendmsg(struct socket *sock, struct msghdr *msg,
      size_t len);
extern int sock_recvmsg(struct socket *sock, struct msghdr *msg,
      size_t size, int flags);
extern int sock_map_fd(struct socket *sock, int flags);
extern struct socket *sockfd_lookup(int fd, int *err);

extern int net_ratelimit(void);
extern long do_accept(int fd, struct sockaddr *upeer_sockaddr,
          int *upeer_addrlen, int flags);




extern int kernel_sendmsg(struct socket *sock, struct msghdr *msg,
        struct kvec *vec, size_t num, size_t len);
extern int kernel_recvmsg(struct socket *sock, struct msghdr *msg,
        struct kvec *vec, size_t num,
        size_t len, int flags);

extern int kernel_bind(struct socket *sock, struct sockaddr *addr,
         int addrlen);
extern int kernel_listen(struct socket *sock, int backlog);
extern int kernel_accept(struct socket *sock, struct socket **newsock,
    int flags);
extern int kernel_connect(struct socket *sock, struct sockaddr *addr,
     int addrlen, int flags);
extern int kernel_getsockname(struct socket *sock, struct sockaddr *addr,
         int *addrlen);
extern int kernel_getpeername(struct socket *sock, struct sockaddr *addr,
         int *addrlen);
extern int kernel_getsockopt(struct socket *sock, int level, int optname,
        char *optval, int *optlen);
extern int kernel_setsockopt(struct socket *sock, int level, int optname,
        char *optval, int optlen);
extern int kernel_sendpage(struct socket *sock, struct page *page, int offset,
      size_t size, int flags);
extern int kernel_sock_ioctl(struct socket *sock, int cmd, unsigned long arg);
extern int kernel_sock_shutdown(struct socket *sock,
    enum sock_shutdown_cmd how);
struct file;
struct completion;






struct __sysctl_args {
  template <typename, int = 0> struct __BYPASS__sysctl_args {};
  template <typename, int> friend struct __BYPASS__sysctl_args;
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 __NET_IPV4_CONF_MAX
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT=1
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
 __NET_NEIGH_MAX
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};


enum {
 NET_IRDA_DISCOVERY=1,
 NET_IRDA_DEVNAME=2,
 NET_IRDA_DEBUG=3,
 NET_IRDA_FAST_POLL=4,
 NET_IRDA_DISCOVERY_SLOTS=5,
 NET_IRDA_DISCOVERY_TIMEOUT=6,
 NET_IRDA_SLOT_TIMEOUT=7,
 NET_IRDA_MAX_BAUD_RATE=8,
 NET_IRDA_MIN_TX_TURN_TIME=9,
 NET_IRDA_MAX_TX_DATA_SIZE=10,
 NET_IRDA_MAX_TX_WINDOW=11,
 NET_IRDA_MAX_NOREPLY_TIME=12,
 NET_IRDA_WARN_NOREPLY_TIME=13,
 NET_IRDA_LAP_KEEPALIVE_TIME=14,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};





struct ctl_table;
struct nsproxy;
struct ctl_table_root;

struct ctl_table_set {
  template <typename, int = 0> struct __BYPASSctl_table_set {};
  template <typename, int> friend struct __BYPASSctl_table_set;
 struct list_head list;
 struct ctl_table_set *parent;
 int (*is_seen)(struct ctl_table_set *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_set *parent,
 int (*is_seen)(struct ctl_table_set *));

struct ctl_table_header;

extern void sysctl_head_get(struct ctl_table_header *);
extern void sysctl_head_put(struct ctl_table_header *);
extern int sysctl_is_seen(struct ctl_table_header *);
extern struct ctl_table_header *sysctl_head_grab(struct ctl_table_header *);
extern struct ctl_table_header *sysctl_head_next(struct ctl_table_header *prev);
extern struct ctl_table_header *__sysctl_head_next(struct nsproxy *namespaces,
      struct ctl_table_header *prev);
extern void sysctl_head_finish(struct ctl_table_header *prev);
extern int sysctl_perm(struct ctl_table_root *root,
  struct ctl_table *table, int op);

typedef struct ctl_table ctl_table;

typedef int ctl_handler (struct ctl_table *table, int *name, int nlen,
    void *oldval, size_t *oldlenp,
    void *newval, size_t newlen);

typedef int proc_handler (struct ctl_table *ctl, int write, struct file * filp,
     void *buffer, size_t *lenp, loff_t *ppos);

extern int proc_dostring(struct ctl_table *, int, struct file *,
    void *, size_t *, loff_t *);
extern int proc_dointvec(struct ctl_table *, int, struct file *,
    void *, size_t *, loff_t *);
extern int proc_dointvec_minmax(struct ctl_table *, int, struct file *,
    void *, size_t *, loff_t *);
extern int proc_dointvec_jiffies(struct ctl_table *, int, struct file *,
     void *, size_t *, loff_t *);
extern int proc_dointvec_userhz_jiffies(struct ctl_table *, int, struct file *,
     void *, size_t *, loff_t *);
extern int proc_dointvec_ms_jiffies(struct ctl_table *, int, struct file *,
        void *, size_t *, loff_t *);
extern int proc_doulongvec_minmax(struct ctl_table *, int, struct file *,
      void *, size_t *, loff_t *);
extern int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int,
          struct file *, void *, size_t *, loff_t *);

extern int do_sysctl (int *name, int nlen,
        void *oldval, size_t *oldlenp,
        void *newval, size_t newlen);

extern ctl_handler sysctl_data;
extern ctl_handler sysctl_string;
extern ctl_handler sysctl_intvec;
extern ctl_handler sysctl_jiffies;
extern ctl_handler sysctl_ms_jiffies;
struct ctl_table
{
  template <typename, int = 0> struct __BYPASSctl_table {};
  template <typename, int> friend struct __BYPASSctl_table;
 int ctl_name;
 char *procname;
 void *data;
 int maxlen;
 mode_t mode;
 struct ctl_table *child;
 struct ctl_table *parent;
 proc_handler *proc_handler;
 ctl_handler *strategy;
 void *extra1;
 void *extra2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ctl_table_root {
  template <typename, int = 0> struct __BYPASSctl_table_root {};
  template <typename, int> friend struct __BYPASSctl_table_root;
 struct list_head root_list;
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root,
        struct nsproxy *namespaces);
 int (*permissions)(struct ctl_table_root *root,
   struct nsproxy *namespaces, struct ctl_table *table);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct ctl_table_header
{
  template <typename, int = 0> struct __BYPASSctl_table_header {};
  template <typename, int> friend struct __BYPASSctl_table_header;
 struct ctl_table *ctl_table;
 struct list_head ctl_entry;
 int used;
 int count;
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_table *attached_by;
 struct ctl_table *attached_to;
 struct ctl_table_header *parent;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ctl_path {
  template <typename, int = 0> struct __BYPASSctl_path {};
  template <typename, int> friend struct __BYPASSctl_path;
 char *procname;
 int ctl_name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void register_sysctl_root(struct ctl_table_root *root);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_root *root, struct nsproxy *namespaces,
 struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths( struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);
int sysctl_check_table(struct nsproxy *namespaces, struct ctl_table *table);
extern struct ratelimit_state net_ratelimit_state;











struct stat {
  template <typename, int = 0> struct __BYPASSstat {};
  template <typename, int> friend struct __BYPASSstat;
 unsigned long st_dev;
 unsigned long st_ino;
 unsigned long st_nlink;

 unsigned int st_mode;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned int __pad0;
 unsigned long st_rdev;
 long st_size;
 long st_blksize;
 long st_blocks;

 unsigned long st_atime;
 unsigned long st_atime_nsec;
 unsigned long st_mtime;
 unsigned long st_mtime_nsec;
 unsigned long st_ctime;
 unsigned long st_ctime_nsec;
 long __unused[3];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct __old_kernel_stat {
  template <typename, int = 0> struct __BYPASS__old_kernel_stat {};
  template <typename, int> friend struct __BYPASS__old_kernel_stat;
 unsigned short st_dev;
 unsigned short st_ino;
 unsigned short st_mode;
 unsigned short st_nlink;
 unsigned short st_uid;
 unsigned short st_gid;
 unsigned short st_rdev;






 unsigned int st_size;
 unsigned int st_atime;
 unsigned int st_mtime;
 unsigned int st_ctime;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct kstat {
  template <typename, int = 0> struct __BYPASSkstat {};
  template <typename, int> friend struct __BYPASSkstat;
 u64 ino;
 dev_t dev;
 umode_t mode;
 unsigned int nlink;
 uid_t uid;
 gid_t gid;
 dev_t rdev;
 loff_t size;
 struct timespec atime;
 struct timespec mtime;
 struct timespec ctime;
 unsigned long blksize;
 unsigned long long blocks;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern int request_module( char * name, ...) __attribute__ ((format (printf, 1, 2)));







struct key;
struct file;
struct subprocess_info;


struct subprocess_info *call_usermodehelper_setup(char *path, char **argv,
        char **envp, gfp_t gfp_mask);


void call_usermodehelper_setkeys(struct subprocess_info *info,
     struct key *session_keyring);
int call_usermodehelper_stdinpipe(struct subprocess_info *sub_info,
      struct file **filp);
void call_usermodehelper_setcleanup(struct subprocess_info *info,
        void (*cleanup)(char **argv, char **envp));

enum umh_wait {
 UMH_NO_WAIT = -1,
 UMH_WAIT_EXEC = 0,
 UMH_WAIT_PROC = 1,
};


int call_usermodehelper_exec(struct subprocess_info *info, enum umh_wait wait);



void call_usermodehelper_freeinfo(struct subprocess_info *info);

static inline int
call_usermodehelper(char *path, char **argv, char **envp, enum umh_wait wait)
{
 struct subprocess_info *info;
 gfp_t gfp_mask = (wait == UMH_NO_WAIT) ? ((( gfp_t)0x20u)) : ((( gfp_t)0x10u) | (( gfp_t)0x40u) | (( gfp_t)0x80u));

 info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
 if (info == 0)
  return -12;
 return call_usermodehelper_exec(info, wait);
}

static inline int
call_usermodehelper_keys(char *path, char **argv, char **envp,
    struct key *session_keyring, enum umh_wait wait)
{
 struct subprocess_info *info;
 gfp_t gfp_mask = (wait == UMH_NO_WAIT) ? ((( gfp_t)0x20u)) : ((( gfp_t)0x10u) | (( gfp_t)0x40u) | (( gfp_t)0x80u));

 info = call_usermodehelper_setup(path, argv, envp, gfp_mask);
 if (info == 0)
  return -12;

 call_usermodehelper_setkeys(info, session_keyring);
 return call_usermodehelper_exec(info, wait);
}

extern void usermodehelper_init(void);

struct file;
extern int call_usermodehelper_pipe(char *path, char *argv[], char *envp[],
        struct file **filp);








struct user_i387_struct {
  template <typename, int = 0> struct __BYPASSuser_i387_struct {};
  template <typename, int> friend struct __BYPASSuser_i387_struct;
 unsigned short cwd;
 unsigned short swd;
 unsigned short twd;

 unsigned short fop;
 __u64 rip;
 __u64 rdp;
 __u32 mxcsr;
 __u32 mxcsr_mask;
 __u32 st_space[32];
 __u32 xmm_space[64];
 __u32 padding[24];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct user_regs_struct {
  template <typename, int = 0> struct __BYPASSuser_regs_struct {};
  template <typename, int> friend struct __BYPASSuser_regs_struct;
 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long bp;
 unsigned long bx;
 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long ax;
 unsigned long cx;
 unsigned long dx;
 unsigned long si;
 unsigned long di;
 unsigned long orig_ax;
 unsigned long ip;
 unsigned long cs;
 unsigned long flags;
 unsigned long sp;
 unsigned long ss;
 unsigned long fs_base;
 unsigned long gs_base;
 unsigned long ds;
 unsigned long es;
 unsigned long fs;
 unsigned long gs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct user {
  template <typename, int = 0> struct __BYPASSuser {};
  template <typename, int> friend struct __BYPASSuser;


  struct user_regs_struct regs;

  int u_fpvalid;

  int pad0;
  struct user_i387_struct i387;

  unsigned long int u_tsize;
  unsigned long int u_dsize;
  unsigned long int u_ssize;
  unsigned long start_code;
  unsigned long start_stack;



  long int signal;
  int reserved;
  int pad1;
  unsigned long u_ar0;

  struct user_i387_struct *u_fpstate;
  unsigned long magic;
  char u_comm[32];
  unsigned long u_debugreg[8];
  unsigned long error_code;
  unsigned long fault_address;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


typedef unsigned long elf_greg_t;


typedef elf_greg_t elf_gregset_t[(sizeof(struct user_regs_struct) / sizeof(elf_greg_t))];

typedef struct user_i387_struct elf_fpregset_t;




extern char VDSO64_PRELINK[];
extern char VDSO32_PRELINK[];
extern void* __kernel_sigreturn;
extern void* __kernel_rt_sigreturn;





extern char vdso32_int80_start, vdso32_int80_end;
extern char vdso32_syscall_start, vdso32_syscall_end;
extern char vdso32_sysenter_start, vdso32_sysenter_end;

extern unsigned int vdso_enabled;
static inline void start_ia32_thread(struct pt_regs *regs, u32 ip, u32 sp)
{
 asm ("movl %0,%%fs" :: "r" (0));
 asm ("movl %0,%%es; movl %0,%%ds" : : "r" ((5* 8 + 3)));
 load_gs_index(0);
 regs->ip = ip;
 regs->sp = sp;
 regs->flags = 0x00000200;
 regs->cs = (4 * 8 + 3);
 regs->ss = (5* 8 + 3);
}

static inline void elf_common_init(struct thread_struct *t,
       struct pt_regs *regs, u16 ds)
{
 regs->ax = regs->bx = regs->cx = regs->dx = 0;
 regs->si = regs->di = regs->bp = 0;
 regs->r8 = regs->r9 = regs->r10 = regs->r11 = 0;
 regs->r12 = regs->r13 = regs->r14 = regs->r15 = 0;
 t->fs = t->gs = 0;
 t->fsindex = t->gsindex = 0;
 t->ds = t->es = ds;
}
extern void set_personality_64bit(void);
extern unsigned int sysctl_vsyscall32;
extern int force_personality32;
struct task_struct;
struct linux_binprm;


extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int executable_stack);

extern int syscall32_setup_pages(struct linux_binprm *, int exstack);


extern unsigned long arch_randomize_brk(struct mm_struct *mm);


struct file;
typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
typedef struct dynamic{
  template <typename, int = 0> struct __BYPASSdynamic {};
  template <typename, int> friend struct __BYPASSdynamic;
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Dyn;
typedef struct elf32_rel {
  template <typename, int = 0> struct __BYPASSelf32_rel {};
  template <typename, int> friend struct __BYPASSelf32_rel;
  Elf32_Addr r_offset;
  Elf32_Word r_info;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Rel;

typedef struct elf64_rel {
  template <typename, int = 0> struct __BYPASSelf64_rel {};
  template <typename, int> friend struct __BYPASSelf64_rel;
  Elf64_Addr r_offset;
  Elf64_Xword r_info;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Rel;

typedef struct elf32_rela{
  template <typename, int = 0> struct __BYPASSelf32_rela {};
  template <typename, int> friend struct __BYPASSelf32_rela;
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Rela;

typedef struct elf64_rela {
  template <typename, int = 0> struct __BYPASSelf64_rela {};
  template <typename, int> friend struct __BYPASSelf64_rela;
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Rela;

typedef struct elf32_sym{
  template <typename, int = 0> struct __BYPASSelf32_sym {};
  template <typename, int> friend struct __BYPASSelf32_sym;
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Sym;

typedef struct elf64_sym {
  template <typename, int = 0> struct __BYPASSelf64_sym {};
  template <typename, int> friend struct __BYPASSelf64_sym;
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Sym;




typedef struct elf32_hdr{
  template <typename, int = 0> struct __BYPASSelf32_hdr {};
  template <typename, int> friend struct __BYPASSelf32_hdr;
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  template <typename, int = 0> struct __BYPASSelf64_hdr {};
  template <typename, int> friend struct __BYPASSelf64_hdr;
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  template <typename, int = 0> struct __BYPASSelf32_phdr {};
  template <typename, int> friend struct __BYPASSelf32_phdr;
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Phdr;

typedef struct elf64_phdr {
  template <typename, int = 0> struct __BYPASSelf64_phdr {};
  template <typename, int> friend struct __BYPASSelf64_phdr;
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Phdr;
typedef struct {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Shdr;

typedef struct elf64_shdr {
  template <typename, int = 0> struct __BYPASSelf64_shdr {};
  template <typename, int> friend struct __BYPASSelf64_shdr;
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Shdr;
typedef struct elf32_note {
  template <typename, int = 0> struct __BYPASSelf32_note {};
  template <typename, int> friend struct __BYPASSelf32_note;
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Nhdr;


typedef struct elf64_note {
  template <typename, int = 0> struct __BYPASSelf64_note {};
  template <typename, int> friend struct __BYPASSelf64_note;
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Nhdr;
extern Elf64_Dyn _DYNAMIC [];
static inline int elf_coredump_extra_notes_size(void) { return 0; }
static inline int elf_coredump_extra_notes_write(struct file *file,
   loff_t *foffset) { return 0; }


struct kernel_param;


typedef int (*param_set_fn)( char *val, struct kernel_param *kp);

typedef int (*param_get_fn)(char *buffer, struct kernel_param *kp);

struct kernel_param {
  template <typename, int = 0> struct __BYPASSkernel_param {};
  template <typename, int> friend struct __BYPASSkernel_param;
 char *name;
 unsigned int perm;
 param_set_fn set;
 param_get_fn get;
 union {
  void *arg;
  struct kparam_string *str;
  struct kparam_array *arr;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct kparam_string {
  template <typename, int = 0> struct __BYPASSkparam_string {};
  template <typename, int> friend struct __BYPASSkparam_string;
 unsigned int maxlen;
 char *string;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct kparam_array
{
  template <typename, int = 0> struct __BYPASSkparam_array {};
  template <typename, int> friend struct __BYPASSkparam_array;
 unsigned int max;
 unsigned int *num;
 param_set_fn set;
 param_get_fn get;
 unsigned int elemsize;
 void *elem;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern int parse_args( char *name,
        char *args,
        struct kernel_param *params,
        unsigned num,
        int (*unknown)(char *param, char *val));







extern int param_set_byte( char *val, struct kernel_param *kp);
extern int param_get_byte(char *buffer, struct kernel_param *kp);


extern int param_set_short( char *val, struct kernel_param *kp);
extern int param_get_short(char *buffer, struct kernel_param *kp);


extern int param_set_ushort( char *val, struct kernel_param *kp);
extern int param_get_ushort(char *buffer, struct kernel_param *kp);


extern int param_set_int( char *val, struct kernel_param *kp);
extern int param_get_int(char *buffer, struct kernel_param *kp);


extern int param_set_uint( char *val, struct kernel_param *kp);
extern int param_get_uint(char *buffer, struct kernel_param *kp);


extern int param_set_long( char *val, struct kernel_param *kp);
extern int param_get_long(char *buffer, struct kernel_param *kp);


extern int param_set_ulong( char *val, struct kernel_param *kp);
extern int param_get_ulong(char *buffer, struct kernel_param *kp);


extern int param_set_charp( char *val, struct kernel_param *kp);
extern int param_get_charp(char *buffer, struct kernel_param *kp);


extern int param_set_bool( char *val, struct kernel_param *kp);
extern int param_get_bool(char *buffer, struct kernel_param *kp);


extern int param_set_invbool( char *val, struct kernel_param *kp);
extern int param_get_invbool(char *buffer, struct kernel_param *kp);
extern int param_array_set( char *val, struct kernel_param *kp);
extern int param_array_get(char *buffer, struct kernel_param *kp);

extern int param_set_copystring( char *val, struct kernel_param *kp);
extern int param_get_string(char *buffer, struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);
struct module;
struct marker;
typedef void marker_probe_func(void *probe_private, void *call_private,
  char *fmt, va_list *args);

struct marker_probe_closure {
  template <typename, int = 0> struct __BYPASSmarker_probe_closure {};
  template <typename, int> friend struct __BYPASSmarker_probe_closure;
 marker_probe_func *func;
 void *probe_private;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct marker {
  template <typename, int = 0> struct __BYPASSmarker {};
  template <typename, int> friend struct __BYPASSmarker;
 char *name;
 char *format;


 char state;
 char ptype;

 void (*call)( struct marker *mdata, void *call_private, ...);
 struct marker_probe_closure single;
 struct marker_probe_closure *multi;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((aligned(8)));
extern void marker_update_probe_range(struct marker *begin,
 struct marker *end);
static inline void __attribute__((format(printf,1,2))) ___mark_check_format( char *fmt, ...)
{
}







extern marker_probe_func __mark_empty_function;

extern void marker_probe_cb( struct marker *mdata,
 void *call_private, ...);
extern void marker_probe_cb_noarg( struct marker *mdata,
 void *call_private, ...);





extern int marker_probe_register( char *name, char *format,
    marker_probe_func *probe, void *probe_private);




extern int marker_probe_unregister( char *name,
 marker_probe_func *probe, void *probe_private);



extern int marker_probe_unregister_private_data(marker_probe_func *probe,
 void *probe_private);

extern void *marker_get_private_data( char *name, marker_probe_func *probe,
 int num);








typedef struct {
 atomic_long_t a;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} local_t;






static inline void local_inc(local_t *l)
{
 asm (" " "incq" " " "%0"
       : "+m" (l->a.counter));
}

static inline void local_dec(local_t *l)
{
 asm (" " "decq" " " "%0"
       : "+m" (l->a.counter));
}

static inline void local_add(long i, local_t *l)
{
 asm (" " "addq" " " "%1,%0"
       : "+m" (l->a.counter)
       : "ir" (i));
}

static inline void local_sub(long i, local_t *l)
{
 asm (" " "subq" " " "%1,%0"
       : "+m" (l->a.counter)
       : "ir" (i));
}
static inline int local_sub_and_test(long i, local_t *l)
{
 unsigned char c;

 asm (" " "subq" " " "%2,%0; sete %1"
       : "+m" (l->a.counter), "=qm" (c)
       : "ir" (i) : "memory");
 return c;
}
static inline int local_dec_and_test(local_t *l)
{
 unsigned char c;

 asm (" " "decq" " " "%0; sete %1"
       : "+m" (l->a.counter), "=qm" (c)
       : : "memory");
 return c != 0;
}
static inline int local_inc_and_test(local_t *l)
{
 unsigned char c;

 asm (" " "incq" " " "%0; sete %1"
       : "+m" (l->a.counter), "=qm" (c)
       : : "memory");
 return c != 0;
}
static inline int local_add_negative(long i, local_t *l)
{
 unsigned char c;

 asm (" " "addq" " " "%2,%0; sets %1"
       : "+m" (l->a.counter), "=qm" (c)
       : "ir" (i) : "memory");
 return c;
}
static inline long local_add_return(long i, local_t *l)
{
 long __i;






 __i = i;
 asm (" " "xaddq" " " "%0, %1;"
       : "+r" (i), "+m" (l->a.counter)
       : : "memory");
 return i + __i;
}

static inline long local_sub_return(long i, local_t *l)
{
 return local_add_return(-i, l);
}





struct mod_arch_specific {
  template <typename, int = 0> struct __BYPASSmod_arch_specific {};
  template <typename, int> friend struct __BYPASSmod_arch_specific;
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct kernel_symbol
{
  template <typename, int = 0> struct __BYPASSkernel_symbol {};
  template <typename, int> friend struct __BYPASSkernel_symbol;
 unsigned long value;
 char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct modversion_info
{
  template <typename, int = 0> struct __BYPASSmodversion_info {};
  template <typename, int> friend struct __BYPASSmodversion_info;
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct module;

struct module_attribute {
  template <typename, int = 0> struct __BYPASSmodule_attribute {};
  template <typename, int> friend struct __BYPASSmodule_attribute;
        struct attribute attr;
        ssize_t (*show)(struct module_attribute *, struct module *, char *);
        ssize_t (*store)(struct module_attribute *, struct module *,
    char *, size_t count);
 void (*setup)(struct module *, char *);
 int (*test)(struct module *);
 void (*free)(struct module *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct module_kobject
{
  template <typename, int = 0> struct __BYPASSmodule_kobject {};
  template <typename, int> friend struct __BYPASSmodule_kobject;
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern int init_module(void);
extern void cleanup_module(void);


struct exception_table_entry;

 struct exception_table_entry *
search_extable( struct exception_table_entry *first,
        struct exception_table_entry *last,
        unsigned long value);
void sort_extable(struct exception_table_entry *start,
    struct exception_table_entry *finish);
void sort_main_extable(void);
 struct exception_table_entry *search_exception_tables(unsigned long add);

struct notifier_block;




void *__symbol_get( char *symbol);
void *__symbol_get_gpl( char *symbol);
struct module_ref
{
  template <typename, int = 0> struct __BYPASSmodule_ref {};
  template <typename, int> friend struct __BYPASSmodule_ref;
 local_t count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));

enum module_state
{
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
};

struct module
{
  template <typename, int = 0> struct __BYPASSmodule {};
  template <typename, int> friend struct __BYPASSmodule;
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];


 struct module_kobject mkobj;
 struct module_param_attrs *param_attrs;
 struct module_attribute *modinfo_attrs;
 char *version;
 char *srcversion;
 struct kobject *holders_dir;


 struct kernel_symbol *syms;
 unsigned long *crcs;
 unsigned int num_syms;


 unsigned int num_gpl_syms;
 struct kernel_symbol *gpl_syms;
 unsigned long *gpl_crcs;



 struct kernel_symbol *unused_syms;
 unsigned long *unused_crcs;
 unsigned int num_unused_syms;


 unsigned int num_unused_gpl_syms;
 struct kernel_symbol *unused_gpl_syms;
 unsigned long *unused_gpl_crcs;



 struct kernel_symbol *gpl_future_syms;
 unsigned long *gpl_future_crcs;
 unsigned int num_gpl_future_syms;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 void *module_init;


 void *module_core;


 unsigned int init_size, core_size;


 unsigned int init_text_size, core_text_size;


 void *unwind_info;


 struct mod_arch_specific arch;

 unsigned int taints;



 unsigned num_bugs;
 struct list_head bug_list;
 struct bug_entry *bug_table;




 Elf64_Sym *symtab;
 unsigned int num_symtab;
 char *strtab;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;



 void *percpu;



 char *args;

 struct marker *markers;
 unsigned int num_markers;




 struct list_head modules_which_use_me;


 struct task_struct *waiter;


 void (*exit)(void);


 struct module_ref ref[64];



  friend class ::Introspect;
  friend class ::MyIntrospect;
};








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6module5stateE_918_0 {
  typedef TJP__ZN6module5stateE_918_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline module_state __get__ZN6module5stateE_918(module_state *source) {
  ::module_state __result_buffer;
  typedef TJP__ZN6module5stateE_918_0< ::module_state , ::module , ::module_state  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::module_state &)__result_buffer;
}
static inline int module_is_live(struct module *mod)
{
 return __get__ZN6module5stateE_918(&mod->state) != MODULE_STATE_GOING;
}


struct module *module_text_address(unsigned long addr);
struct module *__module_text_address(unsigned long addr);
int is_module_address(unsigned long addr);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name( char *name);

extern void __module_put_and_exit(struct module *mod, long code)
 __attribute__((noreturn));



unsigned int module_refcount(struct module *mod);
void __symbol_put( char *symbol);

void symbol_put_addr(void *addr);



static inline void __module_get(struct module *module)
{
 if (module) {
  local_inc(&module->ref[({ do { } while (0); ({ typeof(_proxy_pda.cpunumber) ret__; switch (sizeof(_proxy_pda.cpunumber)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (_proxy_pda.cpunumber)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (_proxy_pda.cpunumber)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (_proxy_pda.cpunumber)); break; default: __bad_pda_field(); } ret__; }); })].count);
  do { } while (0);
 }
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_920_0 {
  typedef TJP__proxy_pda_920_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_920(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_920_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_921_0 {
  typedef TJP__proxy_pda_921_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_921(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_921_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_922_0 {
  typedef TJP__proxy_pda_922_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_922(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_922_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}
static inline int try_module_get(struct module *module)
{
 int ret = 1;

 if (module) {
  unsigned int cpu = ({ do { } while (0); ({ typeof(_proxy_pda.cpunumber) ret__; switch (sizeof(_proxy_pda.cpunumber)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_920(&_proxy_pda).cpunumber)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_921(&_proxy_pda).cpunumber)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_922(&_proxy_pda).cpunumber)); break; default: __bad_pda_field(); } ret__; }); });
  if (__builtin_expect(!!(module_is_live(module)), 1))
   local_inc(&module->ref[cpu].count);
  else
   ret = 0;
  do { } while (0);
 }
 return ret;
}

extern void module_put(struct module *module);
 char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);


 struct exception_table_entry *search_module_extables(unsigned long addr);

int register_module_notifier(struct notifier_block * nb);
int unregister_module_notifier(struct notifier_block * nb);

extern void print_modules(void);

extern void module_update_markers(void);
struct device_driver;

struct module;

extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;

int mod_sysfs_init(struct module *mod);
int mod_sysfs_setup(struct module *mod,
      struct kernel_param *kparam,
      unsigned int num_params);
int module_add_modinfo_attrs(struct module *mod);
void module_remove_modinfo_attrs(struct module *mod);





static inline void *ERR_PTR(long error)
{
 return (void *) error;
}

static inline long PTR_ERR( void *ptr)
{
 return (long) ptr;
}

static inline long IS_ERR( void *ptr)
{
 return __builtin_expect(!!(((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
static inline void *ERR_CAST( void *ptr)
{

 return (void *) ptr;
}


struct ts_config;
struct ts_state
{
  template <typename, int = 0> struct __BYPASSts_state {};
  template <typename, int> friend struct __BYPASSts_state;
 unsigned int offset;
 char cb[40];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ts_ops
{
  template <typename, int = 0> struct __BYPASSts_ops {};
  template <typename, int> friend struct __BYPASSts_ops;
 char *name;
 struct ts_config * (*init)( void *, unsigned int, gfp_t, int);
 unsigned int (*find)(struct ts_config *,
     struct ts_state *);
 void (*destroy)(struct ts_config *);
 void * (*get_pattern)(struct ts_config *);
 unsigned int (*get_pattern_len)(struct ts_config *);
 struct module *owner;
 struct list_head list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ts_config
{
  template <typename, int = 0> struct __BYPASSts_config {};
  template <typename, int> friend struct __BYPASSts_config;
 struct ts_ops *ops;
 int flags;
 unsigned int (*get_next_block)(unsigned int consumed,
        u8 **dst,
        struct ts_config *conf,
        struct ts_state *state);
 void (*finish)(struct ts_config *conf,
       struct ts_state *state);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline unsigned int textsearch_next(struct ts_config *conf,
        struct ts_state *state)
{
 unsigned int ret = conf->ops->find(conf, state);

 if (conf->finish)
  conf->finish(conf, state);

 return ret;
}
static inline unsigned int textsearch_find(struct ts_config *conf,
        struct ts_state *state)
{
 state->offset = 0;
 return textsearch_next(conf, state);
}





static inline void *textsearch_get_pattern(struct ts_config *conf)
{
 return conf->ops->get_pattern(conf);
}





static inline unsigned int textsearch_get_pattern_len(struct ts_config *conf)
{
 return conf->ops->get_pattern_len(conf);
}

extern int textsearch_register(struct ts_ops *);
extern int textsearch_unregister(struct ts_ops *);
extern struct ts_config *textsearch_prepare( char *, void *,
         unsigned int, gfp_t, int);
extern void textsearch_destroy(struct ts_config *conf);
extern unsigned int textsearch_find_continuous(struct ts_config *,
            struct ts_state *,
            void *, unsigned int);





static inline struct ts_config *alloc_ts_config(size_t payload,
      gfp_t gfp_mask)
{
 struct ts_config *conf;

 conf = kzalloc((((sizeof(*conf)) + 8 -1) & ~(8 -1)) + payload, gfp_mask);
 if (conf == 0)
  return ERR_PTR(-12);

 return conf;
}

static inline void *ts_config_priv(struct ts_config *conf)
{
 return ((u8 *) conf + (((sizeof(struct ts_config)) + 8 -1) & ~(8 -1)));
}
struct exception_table_entry {
  template <typename, int = 0> struct __BYPASSexception_table_entry {};
  template <typename, int> friend struct __BYPASSexception_table_entry;
 unsigned long insn, fixup;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int fixup_exception(struct pt_regs *regs);
extern int __get_user_1(void);
extern int __get_user_2(void);
extern int __get_user_4(void);
extern int __get_user_8(void);
extern int __get_user_bad(void);
extern void __put_user_bad(void);





extern void __put_user_1(void);
extern void __put_user_2(void);
extern void __put_user_4(void);
extern void __put_user_8(void);
struct __large_struct {
  template <typename, int = 0> struct __BYPASS__large_struct {};
  template <typename, int> friend struct __BYPASS__large_struct; unsigned long buf[100]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
__attribute__((warn_unused_result)) unsigned long
copy_user_generic(void *to, void *from, unsigned len);

__attribute__((warn_unused_result)) unsigned long
copy_to_user(void *to, void *from, unsigned len);
__attribute__((warn_unused_result)) unsigned long
copy_from_user(void *to, void *from, unsigned len);
__attribute__((warn_unused_result)) unsigned long
copy_in_user(void *to, void *from, unsigned len);

static inline __attribute__((always_inline)) __attribute__((warn_unused_result))
int __copy_from_user(void *dst, void *src, unsigned size)
{
 int ret = 0;
 if (!__builtin_constant_p(size))
  return copy_user_generic(dst, ( void *)src, size);
 switch (size) {
 case 1:asm ("1:	mov""b"" %2,%""b""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""b"" %""b""1,%""b""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=q"(*(u8 *)dst) : "m" ((*(struct __large_struct *)((u8 *)src))), "i" (1), "0" (ret))
                                ;
  return ret;
 case 2:asm ("1:	mov""w"" %2,%""w""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""w"" %""w""1,%""w""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=r"(*(u16 *)dst) : "m" ((*(struct __large_struct *)((u16 *)src))), "i" (2), "0" (ret))
                                ;
  return ret;
 case 4:asm ("1:	mov""l"" %2,%""k""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""l"" %""k""1,%""k""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=r"(*(u32 *)dst) : "m" ((*(struct __large_struct *)((u32 *)src))), "i" (4), "0" (ret))
                                ;
  return ret;
 case 8:asm ("1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (8), "0" (ret))
                               ;
  return ret;
 case 10:
  asm ("1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (16), "0" (ret))
                                 ;
  if (__builtin_expect(!!(ret), 0))
   return ret;
  asm ("1:	mov""w"" %2,%""w""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""w"" %""w""1,%""w""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=r"(*(u16 *)(8 + (char *)dst)) : "m" ((*(struct __large_struct *)((u16 *)(8 + (char *)src)))), "i" (2), "0" (ret))

                                 ;
  return ret;
 case 16:
  asm ("1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (16), "0" (ret))
                                 ;
  if (__builtin_expect(!!(ret), 0))
   return ret;
  asm ("1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=r"(*(u64 *)(8 + (char *)dst)) : "m" ((*(struct __large_struct *)((u64 *)(8 + (char *)src)))), "i" (8), "0" (ret))

                                ;
  return ret;
 default:
  return copy_user_generic(dst, ( void *)src, size);
 }
}

static inline __attribute__((always_inline)) __attribute__((warn_unused_result))
int __copy_to_user(void *dst, void *src, unsigned size)
{
 int ret = 0;
 if (!__builtin_constant_p(size))
  return copy_user_generic(( void *)dst, src, size);
 switch (size) {
 case 1:asm ("1:	mov""b"" %""b""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "iq"(*(u8 *)src), "m" ((*(struct __large_struct *)((u8 *)dst))), "i" (1), "0" (ret))
                                ;
  return ret;
 case 2:asm ("1:	mov""w"" %""w""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "ir"(*(u16 *)src), "m" ((*(struct __large_struct *)((u16 *)dst))), "i" (2), "0" (ret))
                                ;
  return ret;
 case 4:asm ("1:	mov""l"" %""k""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "ir"(*(u32 *)src), "m" ((*(struct __large_struct *)((u32 *)dst))), "i" (4), "0" (ret))
                                ;
  return ret;
 case 8:asm ("1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "ir"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (8), "0" (ret))
                               ;
  return ret;
 case 10:
  asm ("1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "ir"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (10), "0" (ret))
                                 ;
  if (__builtin_expect(!!(ret), 0))
   return ret;
  asm("":::"memory");
  asm ("1:	mov""w"" %""w""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "ir"(4[(u16 *)src]), "m" ((*(struct __large_struct *)(4 + (u16 *)dst))), "i" (2), "0" (ret))
                                 ;
  return ret;
 case 16:
  asm ("1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "ir"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (16), "0" (ret))
                                 ;
  if (__builtin_expect(!!(ret), 0))
   return ret;
  asm("":::"memory");
  asm ("1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "ir"(1[(u64 *)src]), "m" ((*(struct __large_struct *)(1 + (u64 *)dst))), "i" (8), "0" (ret))
                                ;
  return ret;
 default:
  return copy_user_generic(( void *)dst, src, size);
 }
}

static inline __attribute__((always_inline)) __attribute__((warn_unused_result))
int __copy_in_user(void *dst, void *src, unsigned size)
{
 int ret = 0;
 if (!__builtin_constant_p(size))
  return copy_user_generic(( void *)dst,
      ( void *)src, size);
 switch (size) {
 case 1: {
  u8 tmp;
  asm ("1:	mov""b"" %2,%""b""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""b"" %""b""1,%""b""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=q"(tmp) : "m" ((*(struct __large_struct *)((u8 *)src))), "i" (1), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm ("1:	mov""b"" %""b""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "iq"(tmp), "m" ((*(struct __large_struct *)((u8 *)dst))), "i" (1), "0" (ret))
                                  ;
  return ret;
 }
 case 2: {
  u16 tmp;
  asm ("1:	mov""w"" %2,%""w""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""w"" %""w""1,%""w""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=r"(tmp) : "m" ((*(struct __large_struct *)((u16 *)src))), "i" (2), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm ("1:	mov""w"" %""w""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "ir"(tmp), "m" ((*(struct __large_struct *)((u16 *)dst))), "i" (2), "0" (ret))
                                  ;
  return ret;
 }

 case 4: {
  u32 tmp;
  asm ("1:	mov""l"" %2,%""k""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""l"" %""k""1,%""k""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=r"(tmp) : "m" ((*(struct __large_struct *)((u32 *)src))), "i" (4), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm ("1:	mov""l"" %""k""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "ir"(tmp), "m" ((*(struct __large_struct *)((u32 *)dst))), "i" (4), "0" (ret))
                                  ;
  return ret;
 }
 case 8: {
  u64 tmp;
  asm ("1:	mov""q"" %2,%""""1\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r" (ret), "=r"(tmp) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (8), "0" (ret))
                                ;
  if (__builtin_expect(!!(!ret), 1))
   asm ("1:	mov""q"" %""""1,%2\n" "2:\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .section __ex_table,\"a\"\n" " " ".balign 8" " " "\n" " " ".quad" " " "1b" "," "3b" "\n" " .previous\n" : "=r"(ret) : "ir"(tmp), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (8), "0" (ret))
                                 ;
  return ret;
 }
 default:
  return copy_user_generic(( void *)dst,
      ( void *)src, size);
 }
}

__attribute__((warn_unused_result)) long
strncpy_from_user(char *dst, char *src, long count);
__attribute__((warn_unused_result)) long
__strncpy_from_user(char *dst, char *src, long count);
__attribute__((warn_unused_result)) long strnlen_user( char *str, long n);
__attribute__((warn_unused_result)) long __strnlen_user( char *str, long n);
__attribute__((warn_unused_result)) long strlen_user( char *str);
__attribute__((warn_unused_result)) unsigned long clear_user(void *mem, unsigned long len);
__attribute__((warn_unused_result)) unsigned long __clear_user(void *mem, unsigned long len);

__attribute__((warn_unused_result)) long __copy_from_user_inatomic(void *dst, void *src,
         unsigned size);

static __attribute__((warn_unused_result)) inline __attribute__((always_inline)) int
__copy_to_user_inatomic(void *dst, void *src, unsigned size)
{
 return copy_user_generic(( void *)dst, src, size);
}

extern long __copy_user_nocache(void *dst, void *src,
    unsigned size, int zerorest);

static inline int __copy_from_user_nocache(void *dst, void *src,
        unsigned size)
{
 do { __might_sleep("../../libos/2.6.27/include/asm/uaccess_64.h", 188); _cond_resched(); } while (0);
 return __copy_user_nocache(dst, src, size, 1);
}

static inline int __copy_from_user_inatomic_nocache(void *dst,
          void *src,
          unsigned size)
{
 return __copy_user_nocache(dst, src, size, 0);
}

unsigned long
copy_user_handle_tail(char *to, char *from, unsigned len, unsigned zerorest);



static inline __sum16 csum_fold(__wsum sum)
{
 asm("  addl %1,%0\n"
     "  adcl $0xffff,%0"
     : "=r" (sum)
     : "r" (( u32)sum << 16),
       "0" (( u32)sum & 0xffff0000));
 return ( __sum16)(~( u32)sum >> 16);
}
static inline __sum16 ip_fast_csum( void *iph, unsigned int ihl)
{
 unsigned int sum;

 asm("  movl (%1), %0\n"
     "  subl $4, %2\n"
     "  jbe 2f\n"
     "  addl 4(%1), %0\n"
     "  adcl 8(%1), %0\n"
     "  adcl 12(%1), %0\n"
     "1: adcl 16(%1), %0\n"
     "  lea 4(%1), %1\n"
     "  decl %2\n"
     "  jne	1b\n"
     "  adcl $0, %0\n"
     "  movl %0, %2\n"
     "  shrl $16, %0\n"
     "  addw %w2, %w0\n"
     "  adcl $0, %0\n"
     "  notl %0\n"
     "2:"



     : "=r" (sum), "=r" (iph), "=r" (ihl)
     : "1" (iph), "2" (ihl)
     : "memory");
 return ( __sum16)sum;
}
static inline __wsum
csum_tcpudp_nofold(__be32 saddr, __be32 daddr, unsigned short len,
     unsigned short proto, __wsum sum)
{
 asm("  addl %1, %0\n"
     "  adcl %2, %0\n"
     "  adcl %3, %0\n"
     "  adcl $0, %0\n"
     : "=r" (sum)
     : "g" (daddr), "g" (saddr),
       "g" ((len + proto)<<8), "0" (sum));
 return sum;
}
static inline __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr,
     unsigned short len,
     unsigned short proto, __wsum sum)
{
 return csum_fold(csum_tcpudp_nofold(saddr, daddr, len, proto, sum));
}
extern __wsum csum_partial( void *buff, int len, __wsum sum);






extern __wsum csum_partial_copy_generic( void *src, void *dst,
     int len, __wsum sum,
     int *src_err_ptr, int *dst_err_ptr);


extern __wsum csum_partial_copy_from_user( void *src, void *dst,
       int len, __wsum isum, int *errp);
extern __wsum csum_partial_copy_to_user( void *src, void *dst,
     int len, __wsum isum, int *errp);
extern __wsum csum_partial_copy_nocheck( void *src, void *dst,
     int len, __wsum sum);
extern __sum16 ip_compute_csum( void *buff, int len);
struct in6_addr;


extern __sum16
csum_ipv6_magic( struct in6_addr *saddr, struct in6_addr *daddr,
  __u32 len, unsigned short proto, __wsum sum);

static inline unsigned add32_with_carry(unsigned a, unsigned b)
{
 asm("addl %2,%0\n\t"
     "adcl $0,%0"
     : "=r" (a)
     : "0" (a), "r" (b));
 return a;
}
static inline __wsum csum_add(__wsum csum, __wsum addend)
{
 u32 res = ( u32)csum;
 res += ( u32)addend;
 return ( __wsum)(res + (res < ( u32)addend));
}

static inline __wsum csum_sub(__wsum csum, __wsum addend)
{
 return csum_add(csum, ~addend);
}

static inline __wsum
csum_block_add(__wsum csum, __wsum csum2, int offset)
{
 u32 sum = ( u32)csum2;
 if (offset&1)
  sum = ((sum&0xFF00FF)<<8)+((sum>>8)&0xFF00FF);
 return csum_add(csum, ( __wsum)sum);
}

static inline __wsum
csum_block_sub(__wsum csum, __wsum csum2, int offset)
{
 u32 sum = ( u32)csum2;
 if (offset&1)
  sum = ((sum&0xFF00FF)<<8)+((sum>>8)&0xFF00FF);
 return csum_sub(csum, ( __wsum)sum);
}

static inline __wsum csum_unfold(__sum16 n)
{
 return ( __wsum)n;
}



static inline void csum_replace4(__sum16 *sum, __be32 from, __be32 to)
{
 __be32 diff[] = { ~from, to };

 *sum = csum_fold(csum_partial((char *)diff, sizeof(diff), ~csum_unfold(*sum)));
}

static inline void csum_replace2(__sum16 *sum, __be16 from, __be16 to)
{
 csum_replace4(sum, ( __be32)from, ( __be32)to);
}

struct sk_buff;
extern void inet_proto_csum_replace4(__sum16 *sum, struct sk_buff *skb,
         __be32 from, __be32 to, int pseudohdr);

static inline void inet_proto_csum_replace2(__sum16 *sum, struct sk_buff *skb,
         __be16 from, __be16 to,
         int pseudohdr)
{
 inet_proto_csum_replace4(sum, skb, ( __be32)from,
     ( __be32)to, pseudohdr);
}
struct rcu_head {
  template <typename, int = 0> struct __BYPASSrcu_head {};
  template <typename, int> friend struct __BYPASSrcu_head;
 struct rcu_head *next;
 void (*func)(struct rcu_head *head);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct rcu_ctrlblk {
  template <typename, int = 0> struct __BYPASSrcu_ctrlblk {};
  template <typename, int> friend struct __BYPASSrcu_ctrlblk;
 long cur;
 long completed;
 int next_pending;

 int signaled;

 spinlock_t lock __attribute__((__aligned__(1 << ((7)))));
 cpumask_t cpumask;


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(1 << ((7)))));


static inline int rcu_batch_before(long a, long b)
{
 return (a - b) < 0;
}


static inline int rcu_batch_after(long a, long b)
{
 return (a - b) > 0;
}






struct rcu_data {
  template <typename, int = 0> struct __BYPASSrcu_data {};
  template <typename, int> friend struct __BYPASSrcu_data;

 long quiescbatch;
 int passed_quiesc;
 int qs_pending;


 long batch;
 struct rcu_head *nxtlist;
 struct rcu_head **nxttail;
 long qlen;
 struct rcu_head *curlist;
 struct rcu_head **curtail;
 struct rcu_head *donelist;
 struct rcu_head **donetail;
 long blimit;
 int cpu;
 struct rcu_head barrier;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern __typeof__(struct rcu_data) per_cpu__rcu_data;
extern __typeof__(struct rcu_data) per_cpu__rcu_bh_data;








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9x8664_pda11data_offsetE_931_0 {
  typedef TJP__ZN9x8664_pda11data_offsetE_931_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9x8664_pda11data_offsetE_931(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9x8664_pda11data_offsetE_931_0< unsigned long int , ::x8664_pda , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__cpu_pda_932_0 {
  typedef TJP__cpu_pda_932_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda * __get__cpu_pda_932(x8664_pda * *source) {
  ::x8664_pda *__result_buffer;
  typedef TJP__cpu_pda_932_0< ::x8664_pda *, void *, ::x8664_pda * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__cpu_pda_933_0 {
  typedef TJP__cpu_pda_933_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return true;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda ** __get__cpu_pda_933(x8664_pda ** *source) {
  ::x8664_pda **__result_buffer;
  typedef TJP__cpu_pda_933_0< ::x8664_pda **, void *, ::x8664_pda ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda **&)__result_buffer;
}
static inline void rcu_qsctr_inc(int cpu)
{
 struct rcu_data *rdp = &(*({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((&per_cpu__rcu_data))); (typeof((&per_cpu__rcu_data))) (__ptr + ((((__get__ZN9x8664_pda11data_offsetE_931(&(__get__cpu_pda_932(&__get__cpu_pda_933(&_cpu_pda)[cpu]))->data_offset)))))); }));
 rdp->passed_quiesc = 1;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9x8664_pda11data_offsetE_934_0 {
  typedef TJP__ZN9x8664_pda11data_offsetE_934_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9x8664_pda11data_offsetE_934(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9x8664_pda11data_offsetE_934_0< unsigned long int , ::x8664_pda , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__cpu_pda_935_0 {
  typedef TJP__cpu_pda_935_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda * __get__cpu_pda_935(x8664_pda * *source) {
  ::x8664_pda *__result_buffer;
  typedef TJP__cpu_pda_935_0< ::x8664_pda *, void *, ::x8664_pda * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__cpu_pda_936_0 {
  typedef TJP__cpu_pda_936_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return true;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda ** __get__cpu_pda_936(x8664_pda ** *source) {
  ::x8664_pda **__result_buffer;
  typedef TJP__cpu_pda_936_0< ::x8664_pda **, void *, ::x8664_pda ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda **&)__result_buffer;
}
static inline void rcu_bh_qsctr_inc(int cpu)
{
 struct rcu_data *rdp = &(*({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((&per_cpu__rcu_bh_data))); (typeof((&per_cpu__rcu_bh_data))) (__ptr + ((((__get__ZN9x8664_pda11data_offsetE_934(&(__get__cpu_pda_935(&__get__cpu_pda_936(&_cpu_pda)[cpu]))->data_offset)))))); }));
 rdp->passed_quiesc = 1;
}

extern int rcu_pending(int cpu);
extern int rcu_needs_cpu(int cpu);
extern void __rcu_init(void);

extern void rcu_check_callbacks(int cpu, int user);
extern void rcu_restart_cpu(int cpu);

extern long rcu_batches_completed(void);
extern long rcu_batches_completed_bh(void);
struct rcu_synchronize {
  template <typename, int = 0> struct __BYPASSrcu_synchronize {};
  template <typename, int> friend struct __BYPASSrcu_synchronize;
 struct rcu_head head;
 struct completion completion;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void wakeme_after_rcu(struct rcu_head *head);
extern void call_rcu(struct rcu_head *head,
         void (*func)(struct rcu_head *head));
extern void call_rcu_bh(struct rcu_head *head,
   void (*func)(struct rcu_head *head));


extern void synchronize_rcu(void);
extern void rcu_barrier(void);
extern void rcu_barrier_bh(void);
extern void rcu_barrier_sched(void);


extern void rcu_init(void);
extern int rcu_needs_cpu(int cpu);
struct resource {
  template <typename, int = 0> struct __BYPASSresource {};
  template <typename, int> friend struct __BYPASSresource;
 resource_size_t start;
 resource_size_t end;
 char *name;
 unsigned long flags;
 struct resource *parent, *sibling, *child;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct resource_list {
  template <typename, int = 0> struct __BYPASSresource_list {};
  template <typename, int> friend struct __BYPASSresource_list;
 struct resource_list *next;
 struct resource *res;
 struct pci_dev *dev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern int request_resource(struct resource *root, struct resource *_new);
extern int release_resource(struct resource *_new);
extern int insert_resource(struct resource *parent, struct resource *_new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *_new);
extern int allocate_resource(struct resource *root, struct resource *_new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        void (*alignf)(void *, struct resource *,
         resource_size_t, resource_size_t),
        void *alignf_data);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline resource_size_t resource_size(struct resource *res)
{
 return res->end - res->start + 1;
}






extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n, char *name);






extern int __check_region(struct resource *, resource_size_t, resource_size_t);
extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);

static inline int check_region(resource_size_t s,
      resource_size_t n)
{
 return __check_region(&ioport_resource, s, n);
}


struct device;





extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);

struct klist_node;
struct klist {
  template <typename, int = 0> struct __BYPASSklist {};
  template <typename, int> friend struct __BYPASSklist;
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
  template <typename, int = 0> struct __BYPASSklist_node {};
  template <typename, int> friend struct __BYPASSklist_node;
 struct klist *n_klist;
 struct list_head n_node;
 struct kref n_ref;
 struct completion n_removed;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_after(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
  template <typename, int = 0> struct __BYPASSklist_iter {};
  template <typename, int> friend struct __BYPASSklist_iter;
 struct klist *i_klist;
 struct list_head *i_head;
 struct klist_node *i_cur;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);






struct semaphore {
  template <typename, int = 0> struct __BYPASSsemaphore {};
  template <typename, int> friend struct __BYPASSsemaphore;
 spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void sema_init(struct semaphore *sem, int val)
{





}




extern void down(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_interruptible(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_killable(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_trylock(struct semaphore *sem);
extern int __attribute__((warn_unused_result)) down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);



struct dev_archdata {
  template <typename, int = 0> struct __BYPASSdev_archdata {};
  template <typename, int> friend struct __BYPASSdev_archdata;

 void *acpi_handle;


struct dma_mapping_ops *dma_ops;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct device;
struct device_driver;
struct driver_private;
struct _class;
struct class_private;
struct bus_type;
struct bus_type_private;

struct bus_attribute {
  template <typename, int = 0> struct __BYPASSbus_attribute {};
  template <typename, int> friend struct __BYPASSbus_attribute;
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, char *buf, size_t count);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern int __attribute__((warn_unused_result)) bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);

struct bus_type {
  template <typename, int = 0> struct __BYPASSbus_type {};
  template <typename, int> friend struct __BYPASSbus_type;
 char *name;
 struct bus_attribute *bus_attrs;
 struct device_attribute *dev_attrs;
 struct driver_attribute *drv_attrs;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 int (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*suspend_late)(struct device *dev, pm_message_t state);
 int (*resume_early)(struct device *dev);
 int (*resume)(struct device *dev);

 struct pm_ext_ops *pm;

 struct bus_type_private *p;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int __attribute__((warn_unused_result)) bus_register(struct bus_type *bus);
extern void bus_unregister(struct bus_type *bus);

extern int __attribute__((warn_unused_result)) bus_rescan_devices(struct bus_type *bus);



int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          void *data,
          int (*match)(struct device *dev, void *data));
struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           char *name);

int __attribute__((warn_unused_result)) bus_for_each_drv(struct bus_type *bus,
      struct device_driver *start, void *data,
      int (*fn)(struct device_driver *, void *));







struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);

struct device_driver {
  template <typename, int = 0> struct __BYPASSdevice_driver {};
  template <typename, int> friend struct __BYPASSdevice_driver;
 char *name;
 struct bus_type *bus;

 struct module *owner;
 char *mod_name;

 int (*probe) (struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 struct attribute_group **groups;

 struct pm_ops *pm;

 struct driver_private *p;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern int __attribute__((warn_unused_result)) driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *get_driver(struct device_driver *drv);
extern void put_driver(struct device_driver *drv);
extern struct device_driver *driver_find( char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);



struct driver_attribute {
  template <typename, int = 0> struct __BYPASSdriver_attribute {};
  template <typename, int> friend struct __BYPASSdriver_attribute;
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, char *buf,
    size_t count);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern int __attribute__((warn_unused_result)) driver_create_file(struct device_driver *driver,
        struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          struct driver_attribute *attr);

extern int __attribute__((warn_unused_result)) driver_add_kobj(struct device_driver *drv,
     struct kobject *kobj,
     char *fmt, ...);

extern int __attribute__((warn_unused_result)) driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, void *data,
      int (*match)(struct device *dev, void *data));




struct _class {
  template <typename, int = 0> struct __BYPASS_class {};
  template <typename, int> friend struct __BYPASS_class;
 char *name;
 struct module *owner;

 struct class_attribute *class_attrs;
 struct device_attribute *dev_attrs;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);

 void (*class_release)(struct _class *_class);
 void (*dev_release)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 struct pm_ops *pm;
 struct class_private *p;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __attribute__((warn_unused_result)) __class_register(struct _class *_class,
      struct lock_class_key *key);
extern void class_unregister(struct _class *_class);
extern int class_for_each_device(struct _class *_class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct _class *_class,
     struct device *start, void *data,
     int (*match)(struct device *, void *));

struct class_attribute {
  template <typename, int = 0> struct __BYPASSclass_attribute {};
  template <typename, int> friend struct __BYPASSclass_attribute;
 struct attribute attr;
 ssize_t (*show)(struct _class *_class, char *buf);
 ssize_t (*store)(struct _class *_class, char *buf, size_t count);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern int __attribute__((warn_unused_result)) class_create_file(struct _class *_class,
       struct class_attribute *attr);
extern void class_remove_file(struct _class *_class,
         struct class_attribute *attr);

struct class_interface {
  template <typename, int = 0> struct __BYPASSclass_interface {};
  template <typename, int> friend struct __BYPASSclass_interface;
 struct list_head node;
 struct _class *_class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int __attribute__((warn_unused_result)) class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct _class * __attribute__((warn_unused_result)) __class_create(struct module *owner,
        char *name,
        struct lock_class_key *key);
extern void class_destroy(struct _class *cls);
struct device_type {
  template <typename, int = 0> struct __BYPASSdevice_type {};
  template <typename, int> friend struct __BYPASSdevice_type;
 char *name;
 struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 void (*release)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 struct pm_ops *pm;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct device_attribute {
  template <typename, int = 0> struct __BYPASSdevice_attribute {};
  template <typename, int> friend struct __BYPASSdevice_attribute;
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    char *buf, size_t count);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern int __attribute__((warn_unused_result)) device_create_file(struct device *device,
        struct device_attribute *entry);
extern void device_remove_file(struct device *dev,
          struct device_attribute *attr);
extern int __attribute__((warn_unused_result)) device_create_bin_file(struct device *dev,
            struct bin_attribute *attr);
extern void device_remove_bin_file(struct device *dev,
       struct bin_attribute *attr);
extern int device_schedule_callback_owner(struct device *dev,
  void (*func)(struct device *dev), struct module *owner);






typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);


extern void *__devres_alloc(dr_release_t release, size_t size, gfp_t gfp,
        char *name);





extern void devres_free(void *res);
extern void devres_add(struct device *dev, void *res);
extern void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
extern void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
extern void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
extern int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


extern void * __attribute__((warn_unused_result)) devres_open_group(struct device *dev, void *id,
          gfp_t gfp);
extern void devres_close_group(struct device *dev, void *id);
extern void devres_remove_group(struct device *dev, void *id);
extern int devres_release_group(struct device *dev, void *id);


extern void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp);
extern void devm_kfree(struct device *dev, void *p);

struct device_dma_parameters {
  template <typename, int = 0> struct __BYPASSdevice_dma_parameters {};
  template <typename, int> friend struct __BYPASSdevice_dma_parameters;




 unsigned int max_segment_size;
 unsigned long segment_boundary_mask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct device {
  template <typename, int = 0> struct __BYPASSdevice {};
  template <typename, int> friend struct __BYPASSdevice;
 struct klist klist_children;
 struct klist_node knode_parent;
 struct klist_node knode_driver;
 struct klist_node knode_bus;
 struct device *parent;

 struct kobject kobj;
 char bus_id[20];
 char *init_name;
 struct device_type *type;
 unsigned uevent_suppress:1;

 struct semaphore sem;



 struct bus_type *bus;
 struct device_driver *driver;

 void *driver_data;
 void *platform_data;

 struct dev_pm_info power;


 int numa_node;

 u64 *dma_mask;
 u64 coherent_dma_mask;





 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;

 struct dma_coherent_mem *dma_mem;


 struct dev_archdata archdata;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct list_head node;
 struct _class *_class;
 dev_t devt;
 struct attribute_group **groups;

 void (*release)(struct device *dev);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


static inline void device_init_wakeup(struct device *dev, int val)
{
 dev->power.can_wakeup = dev->power.should_wakeup = !!val;
}

static inline void device_set_wakeup_capable(struct device *dev, int val)
{
 dev->power.can_wakeup = !!val;
}

static inline int device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline void device_set_wakeup_enable(struct device *dev, int val)
{
 dev->power.should_wakeup = !!val;
}

static inline int device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && dev->power.should_wakeup;
}

static inline char *dev_name( struct device *dev)
{

 return dev->bus_id;
}

extern int dev_set_name(struct device *dev, char *name, ...)
   __attribute__((format(printf, 2, 3)));


static inline int dev_to_node(struct device *dev)
{
 return dev->numa_node;
}
static inline void set_dev_node(struct device *dev, int node)
{
 dev->numa_node = node;
}
static inline void *dev_get_drvdata(struct device *dev)
{
 return dev->driver_data;
}

static inline void dev_set_drvdata(struct device *dev, void *data)
{
 dev->driver_data = data;
}

static inline int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

void driver_init(void);




extern int __attribute__((warn_unused_result)) device_register(struct device *dev);
extern void device_unregister(struct device *dev);
extern void device_initialize(struct device *dev);
extern int __attribute__((warn_unused_result)) device_add(struct device *dev);
extern void device_del(struct device *dev);
extern int device_for_each_child(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern struct device *device_find_child(struct device *dev, void *data,
    int (*match)(struct device *dev, void *data));
extern int device_rename(struct device *dev, char *new_name);
extern int device_move(struct device *dev, struct device *new_parent);





extern int __attribute__((warn_unused_result)) device_bind_driver(struct device *dev);
extern void device_release_driver(struct device *dev);
extern int __attribute__((warn_unused_result)) device_attach(struct device *dev);
extern int __attribute__((warn_unused_result)) driver_attach(struct device_driver *drv);
extern int __attribute__((warn_unused_result)) device_reprobe(struct device *dev);




extern struct device *device_create_vargs(struct _class *cls,
       struct device *parent,
       dev_t devt,
       void *drvdata,
       char *fmt,
       va_list vargs);
extern struct device *device_create(struct _class *cls, struct device *parent,
        dev_t devt, void *drvdata,
        char *fmt, ...)
        __attribute__((format(printf, 5, 6)));

extern void device_destroy(struct _class *cls, dev_t devt);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






extern struct device *get_device(struct device *dev);
extern void put_device(struct device *dev);



extern void device_shutdown(void);


extern void sysdev_shutdown(void);


extern char *dev_driver_string( struct device *dev);




enum dma_data_direction {
 DMA_BIDIRECTIONAL = 0,
 DMA_TO_DEVICE = 1,
 DMA_FROM_DEVICE = 2,
 DMA_NONE = 3,
};
static inline int valid_dma_direction(int dma_direction)
{
 return ((dma_direction == DMA_BIDIRECTIONAL) ||
  (dma_direction == DMA_TO_DEVICE) ||
  (dma_direction == DMA_FROM_DEVICE));
}

static inline int is_device_dma_capable(struct device *dev)
{
 return dev->dma_mask != 0 && *dev->dma_mask != 0x0ULL;
}











struct scatterlist {
  template <typename, int = 0> struct __BYPASSscatterlist {};
  template <typename, int> friend struct __BYPASSscatterlist;



 unsigned long page_link;
 unsigned int offset;
 unsigned int length;
 dma_addr_t dma_address;
 unsigned int dma_length;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern void early_ioremap_init(void);
extern void early_ioremap_clear(void);
extern void early_ioremap_reset(void);
extern void *early_ioremap(unsigned long offset, unsigned long size);
extern void early_iounmap(void *addr, unsigned long size);
extern void *fix_ioremap(unsigned idx, unsigned long phys);
static inline unsigned char readb( void *addr) { unsigned char ret; asm ("mov" "b" " %1,%0":"=q" (ret) :"m" (*( unsigned char *)addr) :"memory"); return ret; }
static inline unsigned short readw( void *addr) { unsigned short ret; asm ("mov" "w" " %1,%0":"=r" (ret) :"m" (*( unsigned short *)addr) :"memory"); return ret; }
static inline unsigned int readl( void *addr) { unsigned int ret; asm ("mov" "l" " %1,%0":"=r" (ret) :"m" (*( unsigned int *)addr) :"memory"); return ret; }

static inline unsigned char __readb( void *addr) { unsigned char ret; asm ("mov" "b" " %1,%0":"=q" (ret) :"m" (*( unsigned char *)addr) ); return ret; }
static inline unsigned short __readw( void *addr) { unsigned short ret; asm ("mov" "w" " %1,%0":"=r" (ret) :"m" (*( unsigned short *)addr) ); return ret; }
static inline unsigned int __readl( void *addr) { unsigned int ret; asm ("mov" "l" " %1,%0":"=r" (ret) :"m" (*( unsigned int *)addr) ); return ret; }

static inline void writeb(unsigned char val, void *addr) { asm ("mov" "b" " %0,%1": :"q" (val), "m" (*( unsigned char *)addr) :"memory"); }
static inline void writew(unsigned short val, void *addr) { asm ("mov" "w" " %0,%1": :"r" (val), "m" (*( unsigned short *)addr) :"memory"); }
static inline void writel(unsigned int val, void *addr) { asm ("mov" "l" " %0,%1": :"r" (val), "m" (*( unsigned int *)addr) :"memory"); }

static inline void __writeb(unsigned char val, void *addr) { asm ("mov" "b" " %0,%1": :"q" (val), "m" (*( unsigned char *)addr) ); }
static inline void __writew(unsigned short val, void *addr) { asm ("mov" "w" " %0,%1": :"r" (val), "m" (*( unsigned short *)addr) ); }
static inline void __writel(unsigned int val, void *addr) { asm ("mov" "l" " %0,%1": :"r" (val), "m" (*( unsigned int *)addr) ); }
static inline unsigned long readq( void *addr) { unsigned long ret; asm ("mov" "q" " %1,%0":"=r" (ret) :"m" (*( unsigned long *)addr) :"memory"); return ret; }
static inline unsigned long __readq( void *addr) { unsigned long ret; asm ("mov" "q" " %1,%0":"=r" (ret) :"m" (*( unsigned long *)addr) ); return ret; }
static inline void writeq(unsigned long val, void *addr) { asm ("mov" "q" " %0,%1": :"r" (val), "m" (*( unsigned long *)addr) :"memory"); }
static inline void __writeq(unsigned long val, void *addr) { asm ("mov" "q" " %0,%1": :"r" (val), "m" (*( unsigned long *)addr) ); }
extern void native_io_delay(void);

extern int io_delay_type;
extern void io_delay_init(void);
static inline unsigned char inb(unsigned short port) { unsigned char _v; asm ("in" "b" " %" "w" "1,%" "" "0" : "=a" (_v) : "Nd" (port)); return _v; } static inline unsigned char inb_p(unsigned short port) { unsigned char _v; asm ("in" "b" " %" "w" "1,%" "" "0" : "=a" (_v) : "Nd" (port)); slow_down_io(); return _v; }


static inline unsigned short inw(unsigned short port) { unsigned short _v; asm ("in" "w" " %" "w" "1,%" "" "0" : "=a" (_v) : "Nd" (port)); return _v; } static inline unsigned short inw_p(unsigned short port) { unsigned short _v; asm ("in" "w" " %" "w" "1,%" "" "0" : "=a" (_v) : "Nd" (port)); slow_down_io(); return _v; }


static inline unsigned int inl(unsigned short port) { unsigned int _v; asm ("in" "l" " %" "w" "1,%" "" "0" : "=a" (_v) : "Nd" (port)); return _v; } static inline unsigned int inl_p(unsigned short port) { unsigned int _v; asm ("in" "l" " %" "w" "1,%" "" "0" : "=a" (_v) : "Nd" (port)); slow_down_io(); return _v; }


static inline void outb(unsigned char value, unsigned short port) { asm ("out" "b" " %" "b" "0,%" "w" "1" : : "a" (value), "Nd" (port)); } static inline void outb_p(unsigned char value, unsigned short port) { asm ("out" "b" " %" "b" "0,%" "w" "1" : : "a" (value), "Nd" (port)); slow_down_io(); }
static inline void outw(unsigned short value, unsigned short port) { asm ("out" "w" " %" "w" "0,%" "w" "1" : : "a" (value), "Nd" (port)); } static inline void outw_p(unsigned short value, unsigned short port) { asm ("out" "w" " %" "w" "0,%" "w" "1" : : "a" (value), "Nd" (port)); slow_down_io(); }
static inline void outl(unsigned int value, unsigned short port) { asm ("out" "l" " %" "0,%" "w" "1" : : "a" (value), "Nd" (port)); } static inline void outl_p(unsigned int value, unsigned short port) { asm ("out" "l" " %" "0,%" "w" "1" : : "a" (value), "Nd" (port)); slow_down_io(); }

static inline void insb(unsigned short port, void *addr, unsigned long count) { asm ("rep ; ins" "b" : "=D" (addr), "=c" (count) : "d" (port), "0" (addr), "1" (count)); }
static inline void insw(unsigned short port, void *addr, unsigned long count) { asm ("rep ; ins" "w" : "=D" (addr), "=c" (count) : "d" (port), "0" (addr), "1" (count)); }
static inline void insl(unsigned short port, void *addr, unsigned long count) { asm ("rep ; ins" "l" : "=D" (addr), "=c" (count) : "d" (port), "0" (addr), "1" (count)); }

static inline void outsb(unsigned short port, void *addr, unsigned long count) { asm ("rep ; outs" "b" : "=S" (addr), "=c" (count) : "d" (port), "0" (addr), "1" (count)); }
static inline void outsw(unsigned short port, void *addr, unsigned long count) { asm ("rep ; outs" "w" : "=S" (addr), "=c" (count) : "d" (port), "0" (addr), "1" (count)); }
static inline void outsl(unsigned short port, void *addr, unsigned long count) { asm ("rep ; outs" "l" : "=S" (addr), "=c" (count) : "d" (port), "0" (addr), "1" (count)); }











struct vm_area_struct;
struct vm_struct {
  template <typename, int = 0> struct __BYPASSvm_struct {};
  template <typename, int> friend struct __BYPASSvm_struct;

 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;
 unsigned int nr_pages;
 unsigned long phys_addr;
 void *caller;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern void *vmalloc(unsigned long size);
extern void *vmalloc_user(unsigned long size);
extern void *vmalloc_node(unsigned long size, int node);
extern void *vmalloc_exec(unsigned long size);
extern void *vmalloc_32(unsigned long size);
extern void *vmalloc_32_user(unsigned long size);
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot);
extern void *__vmalloc_area(struct vm_struct *area, gfp_t gfp_mask,
    pgprot_t prot);
extern void vfree( void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
extern void vunmap( void *addr);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
void vmalloc_sync_all(void);






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9vm_struct4sizeE_955_0 {
  typedef TJP__ZN9vm_struct4sizeE_955_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9vm_struct4sizeE_955(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9vm_struct4sizeE_955_0< unsigned long int , ::vm_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline size_t get_vm_area_size( struct vm_struct *area)
{

 return __get__ZN9vm_struct4sizeE_955(&area->size) - ((1UL) << 12);
}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, void *caller);
extern struct vm_struct *__get_vm_area(unsigned long size, unsigned long flags,
     unsigned long start, unsigned long end);
extern struct vm_struct *get_vm_area_node(unsigned long size,
       unsigned long flags, int node,
       gfp_t gfp_mask);
extern struct vm_struct *remove_vm_area( void *addr);

extern int map_vm_area(struct vm_struct *area, pgprot_t prot,
   struct page ***pages);
extern void unmap_kernel_range(unsigned long addr, unsigned long size);


extern struct vm_struct *alloc_vm_area(size_t size);
extern void free_vm_area(struct vm_struct *area);




extern rwlock_t vmlist_lock;
extern struct vm_struct *vmlist;

extern struct seq_operations vmalloc_op;






static inline unsigned long virt_to_phys( void *address)
{
 return __phys_addr((unsigned long)(address));
}

static inline void *phys_to_virt(unsigned long address)
{
 return ((void *)((unsigned long)(address)+((unsigned long)(0xffff880000000000UL))));
}







extern unsigned int ioread8(void *);
extern unsigned int ioread16(void *);
extern unsigned int ioread16be(void *);
extern unsigned int ioread32(void *);
extern unsigned int ioread32be(void *);

extern void iowrite8(u8, void *);
extern void iowrite16(u16, void *);
extern void iowrite16be(u16, void *);
extern void iowrite32(u32, void *);
extern void iowrite32be(u32, void *);
extern void ioread8_rep(void *port, void *buf, unsigned long count);
extern void ioread16_rep(void *port, void *buf, unsigned long count);
extern void ioread32_rep(void *port, void *buf, unsigned long count);

extern void iowrite8_rep(void *port, void *buf, unsigned long count);
extern void iowrite16_rep(void *port, void *buf, unsigned long count);
extern void iowrite32_rep(void *port, void *buf, unsigned long count);


extern void *ioport_map(unsigned long port, unsigned int nr);
extern void ioport_unmap(void *);






struct pci_dev;
extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);
extern void pci_iounmap(struct pci_dev *dev, void *);

extern void *early_ioremap(unsigned long addr, unsigned long size);
extern void early_iounmap(void *addr, unsigned long size);






extern void *ioremap_nocache(resource_size_t offset, unsigned long size);
extern void *ioremap_cache(resource_size_t offset, unsigned long size);
extern void *ioremap_prot(resource_size_t offset, unsigned long size,
    unsigned long prot_val);




static inline void *ioremap(resource_size_t offset, unsigned long size)
{
 return ioremap_nocache(offset, size);
}

extern void iounmap( void *addr);

extern void *fix_ioremap(unsigned idx, unsigned long phys);
void __memcpy_fromio(void *, unsigned long, unsigned);
void __memcpy_toio(unsigned long, void *, unsigned);

static inline void memcpy_fromio(void *to, void *from,
     unsigned len)
{
 __memcpy_fromio(to, (unsigned long)from, len);
}

static inline void memcpy_toio( void *to, void *from,
          unsigned len)
{
 __memcpy_toio((unsigned long)to, from, len);
}

void memset_io( void *a, int b, size_t c);
extern int iommu_bio_merge;


extern void *xlate_dev_mem_ptr(unsigned long phys);
extern void unxlate_dev_mem_ptr(unsigned long phys, void *addr);

extern int ioremap_change_attr(unsigned long vaddr, unsigned long size,
    unsigned long prot_val);
extern void *ioremap_wc(unsigned long offset, unsigned long size);






extern void early_ioremap_init(void);
extern void early_ioremap_clear(void);
extern void early_ioremap_reset(void);
extern void *early_ioremap(unsigned long offset, unsigned long size);
extern void early_iounmap(void *addr, unsigned long size);
extern void *fix_ioremap(unsigned idx, unsigned long phys);

struct sg_table {
  template <typename, int = 0> struct __BYPASSsg_table {};
  template <typename, int> friend struct __BYPASSsg_table;
 struct scatterlist *sgl;
 unsigned int nents;
 unsigned int orig_nents;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void sg_assign_page(struct scatterlist *sg, struct page *page)
{
 unsigned long page_link = sg->page_link & 0x3;





 ;




 sg->page_link = page_link | (unsigned long) page;
}
static inline void sg_set_page(struct scatterlist *sg, struct page *page,
          unsigned int len, unsigned int offset)
{
 sg_assign_page(sg, page);
 sg->offset = offset;
 sg->length = len;
}

static inline struct page *sg_page(struct scatterlist *sg)
{




 return (struct page *)((sg)->page_link & ~0x3);
}
static inline void sg_set_buf(struct scatterlist *sg, void *buf,
         unsigned int buflen)
{
 sg_set_page(sg, (((struct page *)(0xffffe20000000000UL)) + (__phys_addr((unsigned long)(buf)) >> 12)), buflen, ((unsigned long)(buf) & ~(~(((1UL) << 12)-1))));
}
static inline void sg_chain(struct scatterlist *prv, unsigned int prv_nents,
       struct scatterlist *sgl)
{







 prv[prv_nents - 1].offset = 0;
 prv[prv_nents - 1].length = 0;





 prv[prv_nents - 1].page_link = ((unsigned long) sgl | 0x01) & ~0x02;
}
static inline void sg_mark_end(struct scatterlist *sg)
{






 sg->page_link |= 0x02;
 sg->page_link &= ~0x01;
}
static inline dma_addr_t sg_phys(struct scatterlist *sg)
{
 return ((dma_addr_t)((sg_page(sg)) - ((struct page *)(0xffffe20000000000UL))) << 12) + sg->offset;
}
static inline void *sg_virt(struct scatterlist *sg)
{
 return lowmem_page_address(sg_page(sg)) + sg->offset;
}

struct scatterlist *sg_next(struct scatterlist *);
struct scatterlist *sg_last(struct scatterlist *s, unsigned int);
void sg_init_table(struct scatterlist *, unsigned int);
void sg_init_one(struct scatterlist *, void *, unsigned int);

typedef struct scatterlist *(sg_alloc_fn)(unsigned int, gfp_t);
typedef void (sg_free_fn)(struct scatterlist *, unsigned int);

void __sg_free_table(struct sg_table *, unsigned int, sg_free_fn *);
void sg_free_table(struct sg_table *);
int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int, gfp_t,
       sg_alloc_fn *);
int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);

size_t sg_copy_from_buffer(struct scatterlist *sgl, unsigned int nents,
      void *buf, size_t buflen);
size_t sg_copy_to_buffer(struct scatterlist *sgl, unsigned int nents,
    void *buf, size_t buflen);
struct sg_mapping_iter {
  template <typename, int = 0> struct __BYPASSsg_mapping_iter {};
  template <typename, int> friend struct __BYPASSsg_mapping_iter;

 struct page *page;
 void *addr;
 size_t length;
 size_t consumed;


 struct scatterlist *__sg;
 unsigned int __nents;
 unsigned int __offset;
 unsigned int __flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void sg_miter_start(struct sg_mapping_iter *miter, struct scatterlist *sgl,
      unsigned int nents, unsigned int flags);
bool sg_miter_next(struct sg_mapping_iter *miter);
void sg_miter_stop(struct sg_mapping_iter *miter);







extern dma_addr_t swiotlb_map_single(struct device *hwdev, void *ptr,
         size_t size, int dir);
extern void *swiotlb_alloc_coherent(struct device *hwdev, size_t size,
        dma_addr_t *dma_handle, gfp_t flags);
extern void swiotlb_unmap_single(struct device *hwdev, dma_addr_t dev_addr,
     size_t size, int dir);
extern void swiotlb_sync_single_for_cpu(struct device *hwdev,
     dma_addr_t dev_addr,
     size_t size, int dir);
extern void swiotlb_sync_single_for_device(struct device *hwdev,
        dma_addr_t dev_addr,
        size_t size, int dir);
extern void swiotlb_sync_single_range_for_cpu(struct device *hwdev,
           dma_addr_t dev_addr,
           unsigned long offset,
           size_t size, int dir);
extern void swiotlb_sync_single_range_for_device(struct device *hwdev,
       dma_addr_t dev_addr,
       unsigned long offset,
       size_t size, int dir);
extern void swiotlb_sync_sg_for_cpu(struct device *hwdev,
        struct scatterlist *sg, int nelems,
        int dir);
extern void swiotlb_sync_sg_for_device(struct device *hwdev,
           struct scatterlist *sg, int nelems,
           int dir);
extern int swiotlb_map_sg(struct device *hwdev, struct scatterlist *sg,
     int nents, int direction);
extern void swiotlb_unmap_sg(struct device *hwdev, struct scatterlist *sg,
        int nents, int direction);
extern int swiotlb_dma_mapping_error(struct device *hwdev, dma_addr_t dma_addr);
extern void swiotlb_free_coherent(struct device *hwdev, size_t size,
      void *vaddr, dma_addr_t dma_handle);
extern int swiotlb_dma_supported(struct device *hwdev, u64 mask);
extern void swiotlb_init(void);

extern int swiotlb_force;


extern int swiotlb;
extern void pci_swiotlb_init(void);







static inline void dma_mark_clean(void *addr, size_t size) {}

extern dma_addr_t bad_dma_address;
extern int iommu_merge;
extern struct device fallback_dev;
extern int panic_on_overflow;
extern int force_iommu;

struct dma_mapping_ops {
  template <typename, int = 0> struct __BYPASSdma_mapping_ops {};
  template <typename, int> friend struct __BYPASSdma_mapping_ops;
 int (*mapping_error)(struct device *dev,
      dma_addr_t dma_addr);
 void* (*alloc_coherent)(struct device *dev, size_t size,
    dma_addr_t *dma_handle, gfp_t gfp);
 void (*free_coherent)(struct device *dev, size_t size,
    void *vaddr, dma_addr_t dma_handle);
 dma_addr_t (*map_single)(struct device *hwdev, phys_addr_t ptr,
    size_t size, int direction);

 dma_addr_t (*map_simple)(struct device *hwdev, phys_addr_t ptr,
    size_t size, int direction);
 void (*unmap_single)(struct device *dev, dma_addr_t addr,
    size_t size, int direction);
 void (*sync_single_for_cpu)(struct device *hwdev,
    dma_addr_t dma_handle, size_t size,
    int direction);
 void (*sync_single_for_device)(struct device *hwdev,
    dma_addr_t dma_handle, size_t size,
    int direction);
 void (*sync_single_range_for_cpu)(struct device *hwdev,
    dma_addr_t dma_handle, unsigned long offset,
    size_t size, int direction);
 void (*sync_single_range_for_device)(struct device *hwdev,
    dma_addr_t dma_handle, unsigned long offset,
    size_t size, int direction);
 void (*sync_sg_for_cpu)(struct device *hwdev,
    struct scatterlist *sg, int nelems,
    int direction);
 void (*sync_sg_for_device)(struct device *hwdev,
    struct scatterlist *sg, int nelems,
    int direction);
 int (*map_sg)(struct device *hwdev, struct scatterlist *sg,
    int nents, int direction);
 void (*unmap_sg)(struct device *hwdev,
    struct scatterlist *sg, int nents,
    int direction);
 int (*dma_supported)(struct device *hwdev, u64 mask);
 int is_phys;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct dma_mapping_ops *dma_ops;

static inline struct dma_mapping_ops *get_dma_ops(struct device *dev)
{



 if (__builtin_expect(!!(!dev), 0) || !dev->archdata.dma_ops)
  return dma_ops;
 else
  return dev->archdata.dma_ops;

}


static inline int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{



 struct dma_mapping_ops *ops = get_dma_ops(dev);
 if (ops->mapping_error)
  return ops->mapping_error(dev, dma_addr);

 return (dma_addr == bad_dma_address);

}




void *dma_alloc_coherent(struct device *dev, size_t size,
      dma_addr_t *dma_handle, gfp_t flag);

void dma_free_coherent(struct device *dev, size_t size,
    void *vaddr, dma_addr_t dma_handle);


extern int dma_supported(struct device *hwdev, u64 mask);
extern int dma_set_mask(struct device *dev, u64 mask);

static inline dma_addr_t
dma_map_single(struct device *hwdev, void *ptr, size_t size,
        int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(hwdev);

 ;
 return ops->map_single(hwdev, virt_to_phys(ptr), size, direction);
}

static inline void
dma_unmap_single(struct device *dev, dma_addr_t addr, size_t size,
   int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(dev);

 ;
 if (ops->unmap_single)
  ops->unmap_single(dev, addr, size, direction);
}

static inline int
dma_map_sg(struct device *hwdev, struct scatterlist *sg,
    int nents, int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(hwdev);

 ;
 return ops->map_sg(hwdev, sg, nents, direction);
}

static inline void
dma_unmap_sg(struct device *hwdev, struct scatterlist *sg, int nents,
      int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(hwdev);

 ;
 if (ops->unmap_sg)
  ops->unmap_sg(hwdev, sg, nents, direction);
}

static inline void
dma_sync_single_for_cpu(struct device *hwdev, dma_addr_t dma_handle,
   size_t size, int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(hwdev);

 ;
 if (ops->sync_single_for_cpu)
  ops->sync_single_for_cpu(hwdev, dma_handle, size, direction);
 ;
}

static inline void
dma_sync_single_for_device(struct device *hwdev, dma_addr_t dma_handle,
      size_t size, int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(hwdev);

 ;
 if (ops->sync_single_for_device)
  ops->sync_single_for_device(hwdev, dma_handle, size, direction);
 ;
}

static inline void
dma_sync_single_range_for_cpu(struct device *hwdev, dma_addr_t dma_handle,
         unsigned long offset, size_t size, int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(hwdev);

 ;
 if (ops->sync_single_range_for_cpu)
  ops->sync_single_range_for_cpu(hwdev, dma_handle, offset,
            size, direction);
 ;
}

static inline void
dma_sync_single_range_for_device(struct device *hwdev, dma_addr_t dma_handle,
     unsigned long offset, size_t size,
     int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(hwdev);

 ;
 if (ops->sync_single_range_for_device)
  ops->sync_single_range_for_device(hwdev, dma_handle,
        offset, size, direction);
 ;
}

static inline void
dma_sync_sg_for_cpu(struct device *hwdev, struct scatterlist *sg,
      int nelems, int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(hwdev);

 ;
 if (ops->sync_sg_for_cpu)
  ops->sync_sg_for_cpu(hwdev, sg, nelems, direction);
 ;
}

static inline void
dma_sync_sg_for_device(struct device *hwdev, struct scatterlist *sg,
         int nelems, int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(hwdev);

 ;
 if (ops->sync_sg_for_device)
  ops->sync_sg_for_device(hwdev, sg, nelems, direction);

 ;
}

static inline dma_addr_t dma_map_page(struct device *dev, struct page *page,
          size_t offset, size_t size,
          int direction)
{
 struct dma_mapping_ops *ops = get_dma_ops(dev);

 ;
 return ops->map_single(dev, ((dma_addr_t)((page) - ((struct page *)(0xffffe20000000000UL))) << 12) + offset,
          size, direction);
}

static inline void dma_unmap_page(struct device *dev, dma_addr_t addr,
      size_t size, int direction)
{
 dma_unmap_single(dev, addr, size, direction);
}

static inline void
dma_cache_sync(struct device *dev, void *vaddr, size_t size,
 enum dma_data_direction dir)
{
 ;
}

static inline int dma_get_cache_alignment(void)
{


 return boot_cpu_data.x86_clflush_size;
}



extern u64 dma_get_required_mask(struct device *dev);

static inline unsigned int dma_get_max_seg_size(struct device *dev)
{
 return dev->dma_parms ? dev->dma_parms->max_segment_size : 65536;
}

static inline unsigned int dma_set_max_seg_size(struct device *dev,
      unsigned int size)
{
 if (dev->dma_parms) {
  dev->dma_parms->max_segment_size = size;
  return 0;
 } else
  return -5;
}

static inline unsigned long dma_get_seg_boundary(struct device *dev)
{
 return dev->dma_parms ?
  dev->dma_parms->segment_boundary_mask : 0xffffffff;
}

static inline int dma_set_seg_boundary(struct device *dev, unsigned long mask)
{
 if (dev->dma_parms) {
  dev->dma_parms->segment_boundary_mask = mask;
  return 0;
 } else
  return -5;
}
static inline int
dma_declare_coherent_memory(struct device *dev, dma_addr_t bus_addr,
       dma_addr_t device_addr, size_t size, int flags)
{
 return 0;
}

static inline void
dma_release_declared_memory(struct device *dev)
{
}

static inline void *
dma_mark_declared_memory_occupied(struct device *dev,
      dma_addr_t device_addr, size_t size)
{
 return ERR_PTR(-16);
}





extern void *dmam_alloc_coherent(struct device *dev, size_t size,
     dma_addr_t *dma_handle, gfp_t gfp);
extern void dmam_free_coherent(struct device *dev, size_t size, void *vaddr,
          dma_addr_t dma_handle);
extern void *dmam_alloc_noncoherent(struct device *dev, size_t size,
        dma_addr_t *dma_handle, gfp_t gfp);
extern void dmam_free_noncoherent(struct device *dev, size_t size, void *vaddr,
      dma_addr_t dma_handle);






static inline int dmam_declare_coherent_memory(struct device *dev,
    dma_addr_t bus_addr, dma_addr_t device_addr,
    size_t size, gfp_t gfp)
{
 return 0;
}

static inline void dmam_release_declared_memory(struct device *dev)
{
}



struct dma_attrs;
enum dma_state {
 DMA_RESOURCE_SUSPEND,
 DMA_RESOURCE_RESUME,
 DMA_RESOURCE_AVAILABLE,
 DMA_RESOURCE_REMOVED,
};







enum dma_state_client {
 DMA_ACK,
 DMA_DUP,
 DMA_NAK,
};






typedef s32 dma_cookie_t;
enum dma_status {
 DMA_SUCCESS,
 DMA_IN_PROGRESS,
 DMA_ERROR,
};




enum dma_transaction_type {
 DMA_MEMCPY,
 DMA_XOR,
 DMA_PQ_XOR,
 DMA_DUAL_XOR,
 DMA_PQ_UPDATE,
 DMA_ZERO_SUM,
 DMA_PQ_ZERO_SUM,
 DMA_MEMSET,
 DMA_MEMCPY_CRC32C,
 DMA_INTERRUPT,
 DMA_SLAVE,
};
enum dma_slave_width {
 DMA_SLAVE_WIDTH_8BIT,
 DMA_SLAVE_WIDTH_16BIT,
 DMA_SLAVE_WIDTH_32BIT,
};
enum dma_ctrl_flags {
 DMA_PREP_INTERRUPT = (1 << 0),
 DMA_CTRL_ACK = (1 << 1),
 DMA_COMPL_SKIP_SRC_UNMAP = (1 << 2),
 DMA_COMPL_SKIP_DEST_UNMAP = (1 << 3),
};





typedef struct { unsigned long bits[((((DMA_SLAVE + 1)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} dma_cap_mask_t;
struct dma_slave {
  template <typename, int = 0> struct __BYPASSdma_slave {};
  template <typename, int> friend struct __BYPASSdma_slave;
 struct device *dev;
 struct device *dma_dev;
 dma_addr_t tx_reg;
 dma_addr_t rx_reg;
 enum dma_slave_width reg_width;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dma_chan_percpu {
  template <typename, int = 0> struct __BYPASSdma_chan_percpu {};
  template <typename, int> friend struct __BYPASSdma_chan_percpu;
 local_t refcount;

 unsigned long memcpy_count;
 unsigned long bytes_transferred;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dma_chan {
  template <typename, int = 0> struct __BYPASSdma_chan {};
  template <typename, int> friend struct __BYPASSdma_chan;
 struct dma_device *device;
 dma_cookie_t cookie;


 int chan_id;
 struct device dev;

 struct kref refcount;
 int slow_ref;
 struct rcu_head rcu;

 struct list_head device_node;
 struct dma_chan_percpu *local;
 int client_count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



void dma_chan_cleanup(struct kref *kref);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11percpu_data4ptrsE_1000_0 {
  typedef TJP__ZN11percpu_data4ptrsE_1000_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11percpu_data4ptrsE_1000(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11percpu_data4ptrsE_1000_0< void *, ::percpu_data , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1001_0 {
  typedef TJP__proxy_pda_1001_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1001(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1001_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1002_0 {
  typedef TJP__proxy_pda_1002_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1002(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1002_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1003_0 {
  typedef TJP__proxy_pda_1003_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1003(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1003_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}
static inline void dma_chan_get(struct dma_chan *chan)
{
 if (__builtin_expect(!!(chan->slow_ref), 0))
  kref_get(&chan->refcount);
 else {
  local_inc(&(({ struct percpu_data *__p = (struct percpu_data *)~(unsigned long)((chan->local)); (__typeof__((chan->local)))__get__ZN11percpu_data4ptrsE_1000(&__p->ptrs[((({ do { } while (0); ({ typeof(_proxy_pda.cpunumber) ret__; switch (sizeof(_proxy_pda.cpunumber)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1001(&_proxy_pda).cpunumber)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1002(&_proxy_pda).cpunumber)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1003(&_proxy_pda).cpunumber)); break; default: __bad_pda_field(); } ret__; }); })))]); })->refcount));
  do { } while (0);
 }
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11percpu_data4ptrsE_1007_0 {
  typedef TJP__ZN11percpu_data4ptrsE_1007_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11percpu_data4ptrsE_1007(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11percpu_data4ptrsE_1007_0< void *, ::percpu_data , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1008_0 {
  typedef TJP__proxy_pda_1008_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1008(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1008_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1009_0 {
  typedef TJP__proxy_pda_1009_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1009(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1009_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1010_0 {
  typedef TJP__proxy_pda_1010_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1010(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1010_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}
static inline void dma_chan_put(struct dma_chan *chan)
{
 if (__builtin_expect(!!(chan->slow_ref), 0))
  kref_put(&chan->refcount, dma_chan_cleanup);
 else {
  local_dec(&(({ struct percpu_data *__p = (struct percpu_data *)~(unsigned long)((chan->local)); (__typeof__((chan->local)))__get__ZN11percpu_data4ptrsE_1007(&__p->ptrs[((({ do { } while (0); ({ typeof(_proxy_pda.cpunumber) ret__; switch (sizeof(_proxy_pda.cpunumber)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1008(&_proxy_pda).cpunumber)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1009(&_proxy_pda).cpunumber)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1010(&_proxy_pda).cpunumber)); break; default: __bad_pda_field(); } ret__; }); })))]); })->refcount));
  do { } while (0);
 }
}
struct dma_client;
typedef enum dma_state_client (*dma_event_callback) (struct dma_client *client,
  struct dma_chan *chan, enum dma_state state);
struct dma_client {
  template <typename, int = 0> struct __BYPASSdma_client {};
  template <typename, int> friend struct __BYPASSdma_client;
 dma_event_callback event_callback;
 dma_cap_mask_t cap_mask;
 struct dma_slave *slave;
 struct list_head global_node;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef void (*dma_async_tx_callback)(void *dma_async_param);
struct dma_async_tx_descriptor {
  template <typename, int = 0> struct __BYPASSdma_async_tx_descriptor {};
  template <typename, int> friend struct __BYPASSdma_async_tx_descriptor;
 dma_cookie_t cookie;
 enum dma_ctrl_flags flags;
 dma_addr_t phys;
 struct list_head tx_list;
 struct dma_chan *chan;
 dma_cookie_t (*tx_submit)(struct dma_async_tx_descriptor *tx);
 dma_async_tx_callback callback;
 void *callback_param;
 struct dma_async_tx_descriptor *next;
 struct dma_async_tx_descriptor *parent;
 spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dma_device {
  template <typename, int = 0> struct __BYPASSdma_device {};
  template <typename, int> friend struct __BYPASSdma_device;

 unsigned int chancnt;
 struct list_head channels;
 struct list_head global_node;
 dma_cap_mask_t cap_mask;
 int max_xor;

 struct kref refcount;
 struct completion done;

 int dev_id;
 struct device *dev;

 int (*device_alloc_chan_resources)(struct dma_chan *chan,
   struct dma_client *client);
 void (*device_free_chan_resources)(struct dma_chan *chan);

 struct dma_async_tx_descriptor *(*device_prep_dma_memcpy)(
  struct dma_chan *chan, dma_addr_t dest, dma_addr_t src,
  size_t len, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_xor)(
  struct dma_chan *chan, dma_addr_t dest, dma_addr_t *src,
  unsigned int src_cnt, size_t len, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_zero_sum)(
  struct dma_chan *chan, dma_addr_t *src, unsigned int src_cnt,
  size_t len, u32 *result, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_memset)(
  struct dma_chan *chan, dma_addr_t dest, int value, size_t len,
  unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_interrupt)(
  struct dma_chan *chan, unsigned long flags);

 struct dma_async_tx_descriptor *(*device_prep_slave_sg)(
  struct dma_chan *chan, struct scatterlist *sgl,
  unsigned int sg_len, enum dma_data_direction direction,
  unsigned long flags);
 void (*device_terminate_all)(struct dma_chan *chan);

 enum dma_status (*device_is_tx_complete)(struct dma_chan *chan,
   dma_cookie_t cookie, dma_cookie_t *last,
   dma_cookie_t *used);
 void (*device_issue_pending)(struct dma_chan *chan);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



void dma_async_client_register(struct dma_client *client);
void dma_async_client_unregister(struct dma_client *client);
void dma_async_client_chan_request(struct dma_client *client);
dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan,
 void *dest, void *src, size_t len);
dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,
 struct page *page, unsigned int offset, void *kdata, size_t len);
dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,
 struct page *dest_pg, unsigned int dest_off, struct page *src_pg,
 unsigned int src_off, size_t len);
void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,
 struct dma_chan *chan);

static inline void async_tx_ack(struct dma_async_tx_descriptor *tx)
{
 tx->flags |= DMA_CTRL_ACK;
}

static inline bool async_tx_test_ack(struct dma_async_tx_descriptor *tx)
{
 return (tx->flags & DMA_CTRL_ACK) == DMA_CTRL_ACK;
}


static inline int __first_dma_cap( dma_cap_mask_t *srcp)
{
 return ({ int __min1 = ((DMA_SLAVE + 1)); int __min2 = (find_first_bit(srcp->bits, (DMA_SLAVE + 1))); __min1 < __min2 ? __min1: __min2; })
                                              ;
}


static inline int __next_dma_cap(int n, dma_cap_mask_t *srcp)
{
 return ({ int __min1 = ((DMA_SLAVE + 1)); int __min2 = (find_next_bit(srcp->bits, (DMA_SLAVE + 1), n+1)); __min1 < __min2 ? __min1: __min2; })
                                                  ;
}


static inline void
__dma_cap_set(enum dma_transaction_type tx_type, dma_cap_mask_t *dstp)
{
 set_bit(tx_type, dstp->bits);
}


static inline int
__dma_has_cap(enum dma_transaction_type tx_type, dma_cap_mask_t *srcp)
{
 return (__builtin_constant_p((tx_type)) ? constant_test_bit((tx_type), (srcp->bits)) : variable_test_bit((tx_type), (srcp->bits)));
}
static inline void dma_async_issue_pending(struct dma_chan *chan)
{
 chan->device->device_issue_pending(chan);
}
static inline enum dma_status dma_async_is_tx_complete(struct dma_chan *chan,
 dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)
{
 return chan->device->device_is_tx_complete(chan, cookie, last, used);
}
static inline enum dma_status dma_async_is_complete(dma_cookie_t cookie,
   dma_cookie_t last_complete, dma_cookie_t last_used)
{
 if (last_complete <= last_used) {
  if ((cookie <= last_complete) || (cookie > last_used))
   return DMA_SUCCESS;
 } else {
  if ((cookie <= last_complete) && (cookie > last_used))
   return DMA_SUCCESS;
 }
 return DMA_IN_PROGRESS;
}

enum dma_status dma_sync_wait(struct dma_chan *chan, dma_cookie_t cookie);



int dma_async_device_register(struct dma_device *device);
void dma_async_device_unregister(struct dma_device *device);



struct dma_page_list {
  template <typename, int = 0> struct __BYPASSdma_page_list {};
  template <typename, int> friend struct __BYPASSdma_page_list;
 char *base_address;
 int nr_pages;
 struct page **pages;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dma_pinned_list {
  template <typename, int = 0> struct __BYPASSdma_pinned_list {};
  template <typename, int> friend struct __BYPASSdma_pinned_list;
 int nr_iovecs;
 struct dma_page_list page_list[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dma_pinned_list *dma_pin_iovec_pages(struct iovec *iov, size_t len);
void dma_unpin_iovec_pages(struct dma_pinned_list* pinned_list);

dma_cookie_t dma_memcpy_to_iovec(struct dma_chan *chan, struct iovec *iov,
 struct dma_pinned_list *pinned_list, unsigned char *kdata, size_t len);
dma_cookie_t dma_memcpy_pg_to_iovec(struct dma_chan *chan, struct iovec *iov,
 struct dma_pinned_list *pinned_list, struct page *page,
 unsigned int offset, size_t len);
struct net_device;
struct scatterlist;
struct pipe_inode_info;


struct nf_conntrack {
  template <typename, int = 0> struct __BYPASSnf_conntrack {};
  template <typename, int> friend struct __BYPASSnf_conntrack;
 atomic_t use;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct nf_bridge_info {
  template <typename, int = 0> struct __BYPASSnf_bridge_info {};
  template <typename, int> friend struct __BYPASSnf_bridge_info;
 atomic_t use;
 struct net_device *physindev;
 struct net_device *physoutdev;
 unsigned int mask;
 unsigned long data[32 / sizeof(unsigned long)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sk_buff_head {
  template <typename, int = 0> struct __BYPASSsk_buff_head {};
  template <typename, int> friend struct __BYPASSsk_buff_head;

 struct sk_buff *next;
 struct sk_buff *prev;

 __u32 qlen;
 spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sk_buff;




typedef struct skb_frag_struct skb_frag_t;

struct skb_frag_struct {
  template <typename, int = 0> struct __BYPASSskb_frag_struct {};
  template <typename, int> friend struct __BYPASSskb_frag_struct;
 struct page *page;
 __u32 page_offset;
 __u32 size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct skb_shared_info {
  template <typename, int = 0> struct __BYPASSskb_shared_info {};
  template <typename, int> friend struct __BYPASSskb_shared_info;
 atomic_t dataref;
 unsigned short nr_frags;
 unsigned short gso_size;

 unsigned short gso_segs;
 unsigned short gso_type;
 __be32 ip6_frag_id;
 struct sk_buff *frag_list;
 skb_frag_t frags[(65536/((1UL) << 12) + 2)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 SKB_FCLONE_UNAVAILABLE,
 SKB_FCLONE_ORIG,
 SKB_FCLONE_CLONE,
};

enum {
 SKB_GSO_TCPV4 = 1 << 0,
 SKB_GSO_UDP = 1 << 1,


 SKB_GSO_DODGY = 1 << 2,


 SKB_GSO_TCP_ECN = 1 << 3,

 SKB_GSO_TCPV6 = 1 << 4,
};






typedef unsigned int sk_buff_data_t;
struct sk_buff {
  template <typename, int = 0> struct __BYPASSsk_buff {};
  template <typename, int> friend struct __BYPASSsk_buff;

 struct sk_buff *next;
 struct sk_buff *prev;

 struct sock *sk;
 ktime_t tstamp;
 struct net_device *dev;

 union {
  struct dst_entry *dst;
  struct rtable *rtable;
 };
 struct sec_path *sp;







 char cb[48];

 unsigned int len,
    data_len;
 __u16 mac_len,
    hdr_len;
 union {
  __wsum csum;
  struct {
   __u16 csum_start;
   __u16 csum_offset;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };
 __u32 priority;
 __u8 local_df:1,
    cloned:1,
    ip_summed:2,
    nohdr:1,
    nfctinfo:3;
 __u8 pkt_type:3,
    fclone:2,
    ipvs_property:1,
    peeked:1,
    nf_trace:1;
 __be16 protocol;

 void (*destructor)(struct sk_buff *skb);

 struct nf_conntrack *nfct;
 struct sk_buff *nfct_reasm;


 struct nf_bridge_info *nf_bridge;


 int iif;
 __u16 queue_mapping;

 __u16 tc_index;

 __u16 tc_verd;



 __u8 ndisc_nodetype:2;


 __u8 do_not_encrypt:1;




 dma_cookie_t dma_cookie;


 __u32 secmark;


 __u32 mark;

 __u16 vlan_tci;

 sk_buff_data_t transport_header;
 sk_buff_data_t network_header;
 sk_buff_data_t mac_header;

 sk_buff_data_t tail;
 sk_buff_data_t end;
 unsigned char *head,
    *data;
 unsigned int truesize;
 atomic_t users;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void kfree_skb(struct sk_buff *skb);
extern void __kfree_skb(struct sk_buff *skb);
extern struct sk_buff *__alloc_skb(unsigned int size,
       gfp_t priority, int fclone, int node);
static inline struct sk_buff *alloc_skb(unsigned int size,
     gfp_t priority)
{
 return __alloc_skb(size, priority, 0, -1);
}

static inline struct sk_buff *alloc_skb_fclone(unsigned int size,
            gfp_t priority)
{
 return __alloc_skb(size, priority, 1, -1);
}

extern struct sk_buff *skb_morph(struct sk_buff *dst, struct sk_buff *src);
extern struct sk_buff *skb_clone(struct sk_buff *skb,
     gfp_t priority);
extern struct sk_buff *skb_copy( struct sk_buff *skb,
    gfp_t priority);
extern struct sk_buff *pskb_copy(struct sk_buff *skb,
     gfp_t gfp_mask);
extern int pskb_expand_head(struct sk_buff *skb,
     int nhead, int ntail,
     gfp_t gfp_mask);
extern struct sk_buff *skb_realloc_headroom(struct sk_buff *skb,
         unsigned int headroom);
extern struct sk_buff *skb_copy_expand( struct sk_buff *skb,
           int newheadroom, int newtailroom,
           gfp_t priority);
extern int skb_to_sgvec(struct sk_buff *skb,
        struct scatterlist *sg, int offset,
        int len);
extern int skb_cow_data(struct sk_buff *skb, int tailbits,
        struct sk_buff **trailer);
extern int skb_pad(struct sk_buff *skb, int pad);

extern void skb_over_panic(struct sk_buff *skb, int len,
         void *here);
extern void skb_under_panic(struct sk_buff *skb, int len,
          void *here);

extern int skb_append_datato_frags(struct sock *sk, struct sk_buff *skb,
   int getfrag(void *from, char *to, int offset,
   int len,int odd, struct sk_buff *skb),
   void *from, int length);

struct skb_seq_state
{
  template <typename, int = 0> struct __BYPASSskb_seq_state {};
  template <typename, int> friend struct __BYPASSskb_seq_state;
 __u32 lower_offset;
 __u32 upper_offset;
 __u32 frag_idx;
 __u32 stepped_offset;
 struct sk_buff *root_skb;
 struct sk_buff *cur_skb;
 __u8 *frag_data;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void skb_prepare_seq_read(struct sk_buff *skb,
        unsigned int from, unsigned int to,
        struct skb_seq_state *st);
extern unsigned int skb_seq_read(unsigned int consumed, u8 **data,
       struct skb_seq_state *st);
extern void skb_abort_seq_read(struct skb_seq_state *st);

extern unsigned int skb_find_text(struct sk_buff *skb, unsigned int from,
        unsigned int to, struct ts_config *config,
        struct ts_state *state);


static inline unsigned char *skb_end_pointer( struct sk_buff *skb)
{
 return skb->head + skb->end;
}
static inline int skb_queue_empty( struct sk_buff_head *list)
{
 return list->next == (struct sk_buff *)list;
}
static inline struct sk_buff *skb_get(struct sk_buff *skb)
{
 ;
 return skb;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_1035_0 {
  typedef TJP__ZN7_atomic7counterE_1035_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_1035(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_1035_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int skb_cloned( struct sk_buff *skb)
{
 return skb->cloned &&
        ((__get__ZN7_atomic7counterE_1035(&(&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter)) & ((1 << 16) - 1)) != 1;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_1037_0 {
  typedef TJP__ZN7_atomic7counterE_1037_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_1037(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_1037_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int skb_header_cloned( struct sk_buff *skb)
{
 int dataref;

 if (!skb->cloned)
  return 0;

 dataref = (__get__ZN7_atomic7counterE_1037(&(&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref)->counter));
 dataref = (dataref & ((1 << 16) - 1)) - (dataref >> 16);
 return dataref != 1;
}
static inline void skb_header_release(struct sk_buff *skb)
{
 ;
 skb->nohdr = 1;
 ;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_1038_0 {
  typedef TJP__ZN7_atomic7counterE_1038_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_1038(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_1038_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int skb_shared( struct sk_buff *skb)
{
 return (__get__ZN7_atomic7counterE_1038(&(&skb->users)->counter)) != 1;
}
static inline struct sk_buff *skb_share_check(struct sk_buff *skb,
           gfp_t pri)
{
 do { if (pri & (( gfp_t)0x10u)) do { __might_sleep("../../libos/2.6.27/include/linux/skbuff.h", 546); _cond_resched(); } while (0); } while (0);
 if (skb_shared(skb)) {
  struct sk_buff *nskb = skb_clone(skb, pri);
  kfree_skb(skb);
  skb = nskb;
 }
 return skb;
}
static inline struct sk_buff *skb_unshare(struct sk_buff *skb,
       gfp_t pri)
{
 do { if (pri & (( gfp_t)0x10u)) do { __might_sleep("../../libos/2.6.27/include/linux/skbuff.h", 578); _cond_resched(); } while (0); } while (0);
 if (skb_cloned(skb)) {
  struct sk_buff *nskb = skb_copy(skb, pri);
  kfree_skb(skb);
  skb = nskb;
 }
 return skb;
}
static inline struct sk_buff *skb_peek(struct sk_buff_head *list_)
{
 struct sk_buff *list = ((struct sk_buff *)list_)->next;
 if (list == (struct sk_buff *)list_)
  list = 0;
 return list;
}
static inline struct sk_buff *skb_peek_tail(struct sk_buff_head *list_)
{
 struct sk_buff *list = ((struct sk_buff *)list_)->prev;
 if (list == (struct sk_buff *)list_)
  list = 0;
 return list;
}







static inline __u32 skb_queue_len( struct sk_buff_head *list_)
{
 return list_->qlen;
}
static inline void skb_queue_head_init(struct sk_buff_head *list)
{
 ;
 list->prev = list->next = (struct sk_buff *)list;
 list->qlen = 0;
}

static inline void skb_queue_head_init_class(struct sk_buff_head *list,
  struct lock_class_key *_class)
{
 skb_queue_head_init(list);
 do { (void)(_class); } while (0);
}







extern void skb_insert(struct sk_buff *old, struct sk_buff *newsk, struct sk_buff_head *list);
static inline void __skb_insert(struct sk_buff *newsk,
    struct sk_buff *prev, struct sk_buff *next,
    struct sk_buff_head *list)
{
 newsk->next = next;
 newsk->prev = prev;
 next->prev = prev->next = newsk;
 list->qlen++;
}
static inline void __skb_queue_after(struct sk_buff_head *list,
         struct sk_buff *prev,
         struct sk_buff *newsk)
{
 __skb_insert(newsk, prev, prev->next, list);
}

extern void skb_append(struct sk_buff *old, struct sk_buff *newsk,
         struct sk_buff_head *list);

static inline void __skb_queue_before(struct sk_buff_head *list,
          struct sk_buff *next,
          struct sk_buff *newsk)
{
 __skb_insert(newsk, next->prev, next, list);
}
extern void skb_queue_head(struct sk_buff_head *list, struct sk_buff *newsk);
static inline void __skb_queue_head(struct sk_buff_head *list,
        struct sk_buff *newsk)
{
 __skb_queue_after(list, (struct sk_buff *)list, newsk);
}
extern void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk);
static inline void __skb_queue_tail(struct sk_buff_head *list,
       struct sk_buff *newsk)
{
 __skb_queue_before(list, (struct sk_buff *)list, newsk);
}





extern void skb_unlink(struct sk_buff *skb, struct sk_buff_head *list);
static inline void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
 struct sk_buff *next, *prev;

 list->qlen--;
 next = skb->next;
 prev = skb->prev;
 skb->next = skb->prev = 0;
 next->prev = prev;
 prev->next = next;
}
extern struct sk_buff *skb_dequeue(struct sk_buff_head *list);
static inline struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
 struct sk_buff *skb = skb_peek(list);
 if (skb)
  __skb_unlink(skb, list);
 return skb;
}
extern struct sk_buff *skb_dequeue_tail(struct sk_buff_head *list);
static inline struct sk_buff *__skb_dequeue_tail(struct sk_buff_head *list)
{
 struct sk_buff *skb = skb_peek_tail(list);
 if (skb)
  __skb_unlink(skb, list);
 return skb;
}


static inline int skb_is_nonlinear( struct sk_buff *skb)
{
 return skb->data_len;
}

static inline unsigned int skb_headlen( struct sk_buff *skb)
{
 return skb->len - skb->data_len;
}

static inline int skb_pagelen( struct sk_buff *skb)
{
 int i, len = 0;

 for (i = (int)((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags - 1; i >= 0; i--)
  len += ((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i].size;
 return len + skb_headlen(skb);
}

static inline void skb_fill_page_desc(struct sk_buff *skb, int i,
          struct page *page, int off, int size)
{
 skb_frag_t *frag = &((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i];

 frag->page = page;
 frag->page_offset = off;
 frag->size = size;
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags = i + 1;
}






static inline unsigned char *skb_tail_pointer( struct sk_buff *skb)
{
 return skb->head + skb->tail;
}

static inline void skb_reset_tail_pointer(struct sk_buff *skb)
{
 skb->tail = skb->data - skb->head;
}

static inline void skb_set_tail_pointer(struct sk_buff *skb, int offset)
{
 skb_reset_tail_pointer(skb);
 skb->tail += offset;
}
extern unsigned char *skb_put(struct sk_buff *skb, unsigned int len);
static inline unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
{
 unsigned char *tmp = skb_tail_pointer(skb);
 ;
 skb->tail += len;
 skb->len += len;
 return tmp;
}

extern unsigned char *skb_push(struct sk_buff *skb, unsigned int len);
static inline unsigned char *__skb_push(struct sk_buff *skb, unsigned int len)
{
 skb->data -= len;
 skb->len += len;
 return skb->data;
}

extern unsigned char *skb_pull(struct sk_buff *skb, unsigned int len);
static inline unsigned char *__skb_pull(struct sk_buff *skb, unsigned int len)
{
 skb->len -= len;
 ;
 return skb->data += len;
}

extern unsigned char *__pskb_pull_tail(struct sk_buff *skb, int delta);

static inline unsigned char *__pskb_pull(struct sk_buff *skb, unsigned int len)
{
 if (len > skb_headlen(skb) &&
     !__pskb_pull_tail(skb, len - skb_headlen(skb)))
  return 0;
 skb->len -= len;
 return skb->data += len;
}

static inline unsigned char *pskb_pull(struct sk_buff *skb, unsigned int len)
{
 return __builtin_expect(!!(len > skb->len), 0) ? 0 : __pskb_pull(skb, len);
}

static inline int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(len <= skb_headlen(skb)), 1))
  return 1;
 if (__builtin_expect(!!(len > skb->len), 0))
  return 0;
 return __pskb_pull_tail(skb, len - skb_headlen(skb)) != 0;
}







static inline unsigned int skb_headroom( struct sk_buff *skb)
{
 return skb->data - skb->head;
}







static inline int skb_tailroom( struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) ? 0 : skb->end - skb->tail;
}
static inline void skb_reserve(struct sk_buff *skb, int len)
{
 skb->data += len;
 skb->tail += len;
}


static inline unsigned char *skb_transport_header( struct sk_buff *skb)
{
 return skb->head + skb->transport_header;
}

static inline void skb_reset_transport_header(struct sk_buff *skb)
{
 skb->transport_header = skb->data - skb->head;
}

static inline void skb_set_transport_header(struct sk_buff *skb,
         int offset)
{
 skb_reset_transport_header(skb);
 skb->transport_header += offset;
}

static inline unsigned char *skb_network_header( struct sk_buff *skb)
{
 return skb->head + skb->network_header;
}

static inline void skb_reset_network_header(struct sk_buff *skb)
{
 skb->network_header = skb->data - skb->head;
}

static inline void skb_set_network_header(struct sk_buff *skb, int offset)
{
 skb_reset_network_header(skb);
 skb->network_header += offset;
}

static inline unsigned char *skb_mac_header( struct sk_buff *skb)
{
 return skb->head + skb->mac_header;
}

static inline int skb_mac_header_was_set( struct sk_buff *skb)
{
 return skb->mac_header != ~0U;
}

static inline void skb_reset_mac_header(struct sk_buff *skb)
{
 skb->mac_header = skb->data - skb->head;
}

static inline void skb_set_mac_header(struct sk_buff *skb, int offset)
{
 skb_reset_mac_header(skb);
 skb->mac_header += offset;
}
static inline int skb_transport_offset( struct sk_buff *skb)
{
 return skb_transport_header(skb) - skb->data;
}

static inline u32 skb_network_header_len( struct sk_buff *skb)
{
 return skb->transport_header - skb->network_header;
}

static inline int skb_network_offset( struct sk_buff *skb)
{
 return skb_network_header(skb) - skb->data;
}
extern int ___pskb_trim(struct sk_buff *skb, unsigned int len);

static inline void __skb_trim(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(skb->data_len), 0)) {
  ;
  return;
 }
 skb->len = len;
 skb_set_tail_pointer(skb, len);
}

extern void skb_trim(struct sk_buff *skb, unsigned int len);

static inline int __pskb_trim(struct sk_buff *skb, unsigned int len)
{
 if (skb->data_len)
  return ___pskb_trim(skb, len);
 __skb_trim(skb, len);
 return 0;
}

static inline int pskb_trim(struct sk_buff *skb, unsigned int len)
{
 return (len < skb->len) ? __pskb_trim(skb, len) : 0;
}
static inline void pskb_trim_unique(struct sk_buff *skb, unsigned int len)
{
 int err = pskb_trim(skb, len);
 ;
}
static inline void skb_orphan(struct sk_buff *skb)
{
 if (skb->destructor)
  skb->destructor(skb);
 skb->destructor = 0;
 skb->sk = 0;
}
extern void skb_queue_purge(struct sk_buff_head *list);
static inline void __skb_queue_purge(struct sk_buff_head *list)
{
 struct sk_buff *skb;
 while ((skb = __skb_dequeue(list)) != 0)
  kfree_skb(skb);
}
static inline struct sk_buff *__dev_alloc_skb(unsigned int length,
           gfp_t gfp_mask)
{
 struct sk_buff *skb = alloc_skb(length + 16, gfp_mask);
 if (__builtin_expect(!!(skb), 1))
  skb_reserve(skb, 16);
 return skb;
}

extern struct sk_buff *dev_alloc_skb(unsigned int length);

extern struct sk_buff *__netdev_alloc_skb(struct net_device *dev,
  unsigned int length, gfp_t gfp_mask);
static inline struct sk_buff *netdev_alloc_skb(struct net_device *dev,
  unsigned int length)
{
 return __netdev_alloc_skb(dev, length, ((( gfp_t)0x20u)));
}
static inline int skb_clone_writable(struct sk_buff *skb, unsigned int len)
{
 return !skb_header_cloned(skb) &&
        skb_headroom(skb) + len <= skb->hdr_len;
}

static inline int __skb_cow(struct sk_buff *skb, unsigned int headroom,
       int cloned)
{
 int delta = 0;

 if (headroom < 16)
  headroom = 16;
 if (headroom > skb_headroom(skb))
  delta = headroom - skb_headroom(skb);

 if (delta || cloned)
  return pskb_expand_head(skb, (((delta)+((typeof(delta))(16)-1))&~((typeof(delta))(16)-1)), 0,
     ((( gfp_t)0x20u)));
 return 0;
}
static inline int skb_cow(struct sk_buff *skb, unsigned int headroom)
{
 return __skb_cow(skb, headroom, skb_cloned(skb));
}
static inline int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
 return __skb_cow(skb, headroom, skb_header_cloned(skb));
}
static inline int skb_padto(struct sk_buff *skb, unsigned int len)
{
 unsigned int size = skb->len;
 if (__builtin_expect(!!(size >= len), 1))
  return 0;
 return skb_pad(skb, len - size);
}

static inline int skb_add_data(struct sk_buff *skb,
          char *from, int copy)
{
 int off = skb->len;

 if (skb->ip_summed == 0) {
  int err = 0;
  __wsum csum = csum_partial_copy_from_user(from, skb_put(skb, copy),
           copy, 0, &err);
  if (!err) {
   skb->csum = csum_block_add(skb->csum, csum, off);
   return 0;
  }
 } else if (!copy_from_user(skb_put(skb, copy), from, copy))
  return 0;

 __skb_trim(skb, off);
 return -14;
}

static inline int skb_can_coalesce(struct sk_buff *skb, int i,
       struct page *page, int off)
{
 if (i) {
  struct skb_frag_struct *frag = &((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i - 1];

  return page == frag->page &&
         off == frag->page_offset + frag->size;
 }
 return 0;
}

static inline int __skb_linearize(struct sk_buff *skb)
{
 return __pskb_pull_tail(skb, skb->data_len) ? 0 : -12;
}
static inline int skb_linearize(struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) ? __skb_linearize(skb) : 0;
}
static inline int skb_linearize_cow(struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) || skb_cloned(skb) ?
        __skb_linearize(skb) : 0;
}
static inline void skb_postpull_rcsum(struct sk_buff *skb,
          void *start, unsigned int len)
{
 if (skb->ip_summed == 2)
  skb->csum = csum_sub(skb->csum, csum_partial(start, len, 0));
}

unsigned char *skb_pull_rcsum(struct sk_buff *skb, unsigned int len);
static inline int pskb_trim_rcsum(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(len >= skb->len), 1))
  return 0;
 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
 return __pskb_trim(skb, len);
}
extern struct sk_buff *__skb_recv_datagram(struct sock *sk, unsigned flags,
        int *peeked, int *err);
extern struct sk_buff *skb_recv_datagram(struct sock *sk, unsigned flags,
      int noblock, int *err);
extern unsigned int datagram_poll(struct file *file, struct socket *sock,
         struct poll_table_struct *wait);
extern int skb_copy_datagram_iovec( struct sk_buff *from,
            int offset, struct iovec *to,
            int size);
extern int skb_copy_and_csum_datagram_iovec(struct sk_buff *skb,
       int hlen,
       struct iovec *iov);
extern int skb_copy_datagram_from_iovec(struct sk_buff *skb,
          int offset,
          struct iovec *from,
          int len);
extern void skb_free_datagram(struct sock *sk, struct sk_buff *skb);
extern int skb_kill_datagram(struct sock *sk, struct sk_buff *skb,
      unsigned int flags);
extern __wsum skb_checksum( struct sk_buff *skb, int offset,
        int len, __wsum csum);
extern int skb_copy_bits( struct sk_buff *skb, int offset,
         void *to, int len);
extern int skb_store_bits(struct sk_buff *skb, int offset,
          void *from, int len);
extern __wsum skb_copy_and_csum_bits( struct sk_buff *skb,
           int offset, u8 *to, int len,
           __wsum csum);
extern int skb_splice_bits(struct sk_buff *skb,
      unsigned int offset,
      struct pipe_inode_info *pipe,
      unsigned int len,
      unsigned int flags);
extern void skb_copy_and_csum_dev( struct sk_buff *skb, u8 *to);
extern void skb_split(struct sk_buff *skb,
     struct sk_buff *skb1, u32 len);

extern struct sk_buff *skb_segment(struct sk_buff *skb, int features);

static inline void *skb_header_pointer( struct sk_buff *skb, int offset,
           int len, void *buffer)
{
 int hlen = skb_headlen(skb);

 if (hlen - offset >= len)
  return skb->data + offset;

 if (skb_copy_bits(skb, offset, buffer, len) < 0)
  return 0;

 return buffer;
}

static inline void skb_copy_from_linear_data( struct sk_buff *skb,
          void *to,
          unsigned int len)
{
 memcpy(to, skb->data, len);
}

static inline void skb_copy_from_linear_data_offset( struct sk_buff *skb,
          int offset, void *to,
          unsigned int len)
{
 memcpy(to, skb->data + offset, len);
}

static inline void skb_copy_to_linear_data(struct sk_buff *skb,
        void *from,
        unsigned int len)
{
 memcpy(skb->data, from, len);
}

static inline void skb_copy_to_linear_data_offset(struct sk_buff *skb,
        int offset,
        void *from,
        unsigned int len)
{
 memcpy(skb->data + offset, from, len);
}

extern void skb_init(void);
static inline void skb_get_timestamp( struct sk_buff *skb, struct timeval *stamp)
{
 *stamp = ns_to_timeval((skb->tstamp).tv64);
}

static inline void __net_timestamp(struct sk_buff *skb)
{
 skb->tstamp = ktime_get_real();
}

static inline ktime_t net_timedelta(ktime_t t)
{
 return ({ ({ ktime_t var; var.tv64 = (ktime_get_real()).tv64 - (t).tv64; var; }); });
}

static inline ktime_t net_invalid_timestamp(void)
{
 return ktime_set(0, 0);
}

extern __sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len);
extern __sum16 __skb_checksum_complete(struct sk_buff *skb);

static inline int skb_csum_unnecessary( struct sk_buff *skb)
{
 return skb->ip_summed & 1;
}
static inline __sum16 skb_checksum_complete(struct sk_buff *skb)
{
 return skb_csum_unnecessary(skb) ?
        0 : __skb_checksum_complete(skb);
}


extern void nf_conntrack_destroy(struct nf_conntrack *nfct);
static inline void nf_conntrack_put(struct nf_conntrack *nfct)
{
 if (nfct && 1)
  nf_conntrack_destroy(nfct);
}
static inline void nf_conntrack_get(struct nf_conntrack *nfct)
{
 if (nfct)
  ;
}
static inline void nf_conntrack_get_reasm(struct sk_buff *skb)
{
 if (skb)
  ;
}
static inline void nf_conntrack_put_reasm(struct sk_buff *skb)
{
 if (skb)
  kfree_skb(skb);
}


static inline void nf_bridge_put(struct nf_bridge_info *nf_bridge)
{
 if (nf_bridge && 1)
  kfree(nf_bridge);
}
static inline void nf_bridge_get(struct nf_bridge_info *nf_bridge)
{
 if (nf_bridge)
  ;
}

static inline void nf_reset(struct sk_buff *skb)
{

 nf_conntrack_put(skb->nfct);
 skb->nfct = 0;
 nf_conntrack_put_reasm(skb->nfct_reasm);
 skb->nfct_reasm = 0;


 nf_bridge_put(skb->nf_bridge);
 skb->nf_bridge = 0;

}


static inline void __nf_copy(struct sk_buff *dst, struct sk_buff *src)
{

 dst->nfct = src->nfct;
 nf_conntrack_get(src->nfct);
 dst->nfctinfo = src->nfctinfo;
 dst->nfct_reasm = src->nfct_reasm;
 nf_conntrack_get_reasm(src->nfct_reasm);


 dst->nf_bridge = src->nf_bridge;
 nf_bridge_get(src->nf_bridge);

}

static inline void nf_copy(struct sk_buff *dst, struct sk_buff *src)
{

 nf_conntrack_put(dst->nfct);
 nf_conntrack_put_reasm(dst->nfct_reasm);


 nf_bridge_put(dst->nf_bridge);

 __nf_copy(dst, src);
}


static inline void skb_copy_secmark(struct sk_buff *to, struct sk_buff *from)
{
 to->secmark = from->secmark;
}

static inline void skb_init_secmark(struct sk_buff *skb)
{
 skb->secmark = 0;
}
static inline void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
{
 skb->queue_mapping = queue_mapping;
}

static inline u16 skb_get_queue_mapping(struct sk_buff *skb)
{
 return skb->queue_mapping;
}

static inline void skb_copy_queue_mapping(struct sk_buff *to, struct sk_buff *from)
{
 to->queue_mapping = from->queue_mapping;
}

static inline int skb_is_gso( struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_size;
}

static inline int skb_is_gso_v6( struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type & SKB_GSO_TCPV6;
}

extern void __skb_warn_lro_forwarding( struct sk_buff *skb);

static inline bool skb_warn_if_lro( struct sk_buff *skb)
{


 struct skb_shared_info *shinfo = ((struct skb_shared_info *)(skb_end_pointer(skb)));
 if (shinfo->gso_size != 0 && __builtin_expect(!!(shinfo->gso_type == 0), 0)) {
  __skb_warn_lro_forwarding(skb);
  return _true;
 }
 return _false;
}

static inline void skb_forward_csum(struct sk_buff *skb)
{

 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
}

bool skb_partial_csum_set(struct sk_buff *skb, u16 start, u16 off);

static inline struct ethhdr *eth_hdr( struct sk_buff *skb)
{
 return (struct ethhdr *)skb_mac_header(skb);
}

int eth_header_parse( struct sk_buff *skb, unsigned char *haddr);


extern struct ctl_table ether_table[];


extern ssize_t sysfs_format_mac(char *buf, unsigned char *addr, int len);




extern char *print_mac(char *buf, unsigned char *addr);





struct sockaddr_pkt
{
  template <typename, int = 0> struct __BYPASSsockaddr_pkt {};
  template <typename, int> friend struct __BYPASSsockaddr_pkt;
 unsigned short spkt_family;
 unsigned char spkt_device[14];
 __be16 spkt_protocol;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sockaddr_ll
{
  template <typename, int = 0> struct __BYPASSsockaddr_ll {};
  template <typename, int> friend struct __BYPASSsockaddr_ll;
 unsigned short sll_family;
 __be16 sll_protocol;
 int sll_ifindex;
 unsigned short sll_hatype;
 unsigned char sll_pkttype;
 unsigned char sll_halen;
 unsigned char sll_addr[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct tpacket_stats
{
  template <typename, int = 0> struct __BYPASStpacket_stats {};
  template <typename, int> friend struct __BYPASStpacket_stats;
 unsigned int tp_packets;
 unsigned int tp_drops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tpacket_auxdata
{
  template <typename, int = 0> struct __BYPASStpacket_auxdata {};
  template <typename, int> friend struct __BYPASStpacket_auxdata;
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u16 tp_vlan_tci;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tpacket_hdr
{
  template <typename, int = 0> struct __BYPASStpacket_hdr {};
  template <typename, int> friend struct __BYPASStpacket_hdr;
 unsigned long tp_status;





 unsigned int tp_len;
 unsigned int tp_snaplen;
 unsigned short tp_mac;
 unsigned short tp_net;
 unsigned int tp_sec;
 unsigned int tp_usec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct tpacket2_hdr
{
  template <typename, int = 0> struct __BYPASStpacket2_hdr {};
  template <typename, int> friend struct __BYPASStpacket2_hdr;
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u16 tp_vlan_tci;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum tpacket_versions
{
 TPACKET_V1,
 TPACKET_V2,
};
struct tpacket_req
{
  template <typename, int = 0> struct __BYPASStpacket_req {};
  template <typename, int> friend struct __BYPASStpacket_req;
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct packet_mreq
{
  template <typename, int = 0> struct __BYPASSpacket_mreq {};
  template <typename, int> friend struct __BYPASSpacket_mreq;
 int mr_ifindex;
 unsigned short mr_type;
 unsigned short mr_alen;
 unsigned char mr_address[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
















struct ctl_table_header;
struct prot_inuse;

struct netns_core {
  template <typename, int = 0> struct __BYPASSnetns_core {};
  template <typename, int> friend struct __BYPASSnetns_core;

 struct ctl_table_header *sysctl_hdr;

 int sysctl_somaxconn;

 struct prot_inuse *inuse;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum
{
 IPSTATS_MIB_NUM = 0,
 IPSTATS_MIB_INRECEIVES,
 IPSTATS_MIB_INHDRERRORS,
 IPSTATS_MIB_INTOOBIGERRORS,
 IPSTATS_MIB_INNOROUTES,
 IPSTATS_MIB_INADDRERRORS,
 IPSTATS_MIB_INUNKNOWNPROTOS,
 IPSTATS_MIB_INTRUNCATEDPKTS,
 IPSTATS_MIB_INDISCARDS,
 IPSTATS_MIB_INDELIVERS,
 IPSTATS_MIB_OUTFORWDATAGRAMS,
 IPSTATS_MIB_OUTREQUESTS,
 IPSTATS_MIB_OUTDISCARDS,
 IPSTATS_MIB_OUTNOROUTES,
 IPSTATS_MIB_REASMTIMEOUT,
 IPSTATS_MIB_REASMREQDS,
 IPSTATS_MIB_REASMOKS,
 IPSTATS_MIB_REASMFAILS,
 IPSTATS_MIB_FRAGOKS,
 IPSTATS_MIB_FRAGFAILS,
 IPSTATS_MIB_FRAGCREATES,
 IPSTATS_MIB_INMCASTPKTS,
 IPSTATS_MIB_OUTMCASTPKTS,
 IPSTATS_MIB_INBCASTPKTS,
 IPSTATS_MIB_OUTBCASTPKTS,
 __IPSTATS_MIB_MAX
};






enum
{
 ICMP_MIB_NUM = 0,
 ICMP_MIB_INMSGS,
 ICMP_MIB_INERRORS,
 ICMP_MIB_INDESTUNREACHS,
 ICMP_MIB_INTIMEEXCDS,
 ICMP_MIB_INPARMPROBS,
 ICMP_MIB_INSRCQUENCHS,
 ICMP_MIB_INREDIRECTS,
 ICMP_MIB_INECHOS,
 ICMP_MIB_INECHOREPS,
 ICMP_MIB_INTIMESTAMPS,
 ICMP_MIB_INTIMESTAMPREPS,
 ICMP_MIB_INADDRMASKS,
 ICMP_MIB_INADDRMASKREPS,
 ICMP_MIB_OUTMSGS,
 ICMP_MIB_OUTERRORS,
 ICMP_MIB_OUTDESTUNREACHS,
 ICMP_MIB_OUTTIMEEXCDS,
 ICMP_MIB_OUTPARMPROBS,
 ICMP_MIB_OUTSRCQUENCHS,
 ICMP_MIB_OUTREDIRECTS,
 ICMP_MIB_OUTECHOS,
 ICMP_MIB_OUTECHOREPS,
 ICMP_MIB_OUTTIMESTAMPS,
 ICMP_MIB_OUTTIMESTAMPREPS,
 ICMP_MIB_OUTADDRMASKS,
 ICMP_MIB_OUTADDRMASKREPS,
 __ICMP_MIB_MAX
};







enum
{
 ICMP6_MIB_NUM = 0,
 ICMP6_MIB_INMSGS,
 ICMP6_MIB_INERRORS,
 ICMP6_MIB_OUTMSGS,
 __ICMP6_MIB_MAX
};
enum
{
 TCP_MIB_NUM = 0,
 TCP_MIB_RTOALGORITHM,
 TCP_MIB_RTOMIN,
 TCP_MIB_RTOMAX,
 TCP_MIB_MAXCONN,
 TCP_MIB_ACTIVEOPENS,
 TCP_MIB_PASSIVEOPENS,
 TCP_MIB_ATTEMPTFAILS,
 TCP_MIB_ESTABRESETS,
 TCP_MIB_CURRESTAB,
 TCP_MIB_INSEGS,
 TCP_MIB_OUTSEGS,
 TCP_MIB_RETRANSSEGS,
 TCP_MIB_INERRS,
 TCP_MIB_OUTRSTS,
 __TCP_MIB_MAX
};






enum
{
 UDP_MIB_NUM = 0,
 UDP_MIB_INDATAGRAMS,
 UDP_MIB_NOPORTS,
 UDP_MIB_INERRORS,
 UDP_MIB_OUTDATAGRAMS,
 UDP_MIB_RCVBUFERRORS,
 UDP_MIB_SNDBUFERRORS,
 __UDP_MIB_MAX
};


enum
{
 LINUX_MIB_NUM = 0,
 LINUX_MIB_SYNCOOKIESSENT,
 LINUX_MIB_SYNCOOKIESRECV,
 LINUX_MIB_SYNCOOKIESFAILED,
 LINUX_MIB_EMBRYONICRSTS,
 LINUX_MIB_PRUNECALLED,
 LINUX_MIB_RCVPRUNED,
 LINUX_MIB_OFOPRUNED,
 LINUX_MIB_OUTOFWINDOWICMPS,
 LINUX_MIB_LOCKDROPPEDICMPS,
 LINUX_MIB_ARPFILTER,
 LINUX_MIB_TIMEWAITED,
 LINUX_MIB_TIMEWAITRECYCLED,
 LINUX_MIB_TIMEWAITKILLED,
 LINUX_MIB_PAWSPASSIVEREJECTED,
 LINUX_MIB_PAWSACTIVEREJECTED,
 LINUX_MIB_PAWSESTABREJECTED,
 LINUX_MIB_DELAYEDACKS,
 LINUX_MIB_DELAYEDACKLOCKED,
 LINUX_MIB_DELAYEDACKLOST,
 LINUX_MIB_LISTENOVERFLOWS,
 LINUX_MIB_LISTENDROPS,
 LINUX_MIB_TCPPREQUEUED,
 LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG,
 LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE,
 LINUX_MIB_TCPPREQUEUEDROPPED,
 LINUX_MIB_TCPHPHITS,
 LINUX_MIB_TCPHPHITSTOUSER,
 LINUX_MIB_TCPPUREACKS,
 LINUX_MIB_TCPHPACKS,
 LINUX_MIB_TCPRENORECOVERY,
 LINUX_MIB_TCPSACKRECOVERY,
 LINUX_MIB_TCPSACKRENEGING,
 LINUX_MIB_TCPFACKREORDER,
 LINUX_MIB_TCPSACKREORDER,
 LINUX_MIB_TCPRENOREORDER,
 LINUX_MIB_TCPTSREORDER,
 LINUX_MIB_TCPFULLUNDO,
 LINUX_MIB_TCPPARTIALUNDO,
 LINUX_MIB_TCPDSACKUNDO,
 LINUX_MIB_TCPLOSSUNDO,
 LINUX_MIB_TCPLOSS,
 LINUX_MIB_TCPLOSTRETRANSMIT,
 LINUX_MIB_TCPRENOFAILURES,
 LINUX_MIB_TCPSACKFAILURES,
 LINUX_MIB_TCPLOSSFAILURES,
 LINUX_MIB_TCPFASTRETRANS,
 LINUX_MIB_TCPFORWARDRETRANS,
 LINUX_MIB_TCPSLOWSTARTRETRANS,
 LINUX_MIB_TCPTIMEOUTS,
 LINUX_MIB_TCPRENORECOVERYFAIL,
 LINUX_MIB_TCPSACKRECOVERYFAIL,
 LINUX_MIB_TCPSCHEDULERFAILED,
 LINUX_MIB_TCPRCVCOLLAPSED,
 LINUX_MIB_TCPDSACKOLDSENT,
 LINUX_MIB_TCPDSACKOFOSENT,
 LINUX_MIB_TCPDSACKRECV,
 LINUX_MIB_TCPDSACKOFORECV,
 LINUX_MIB_TCPABORTONSYN,
 LINUX_MIB_TCPABORTONDATA,
 LINUX_MIB_TCPABORTONCLOSE,
 LINUX_MIB_TCPABORTONMEMORY,
 LINUX_MIB_TCPABORTONTIMEOUT,
 LINUX_MIB_TCPABORTONLINGER,
 LINUX_MIB_TCPABORTFAILED,
 LINUX_MIB_TCPMEMORYPRESSURES,
 LINUX_MIB_TCPSACKDISCARD,
 LINUX_MIB_TCPDSACKIGNOREDOLD,
 LINUX_MIB_TCPDSACKIGNOREDNOUNDO,
 LINUX_MIB_TCPSPURIOUSRTOS,
 LINUX_MIB_TCPMD5NOTFOUND,
 LINUX_MIB_TCPMD5UNEXPECTED,
 __LINUX_MIB_MAX
};


enum
{
 LINUX_MIB_XFRMNUM = 0,
 LINUX_MIB_XFRMINERROR,
 LINUX_MIB_XFRMINBUFFERERROR,
 LINUX_MIB_XFRMINHDRERROR,
 LINUX_MIB_XFRMINNOSTATES,
 LINUX_MIB_XFRMINSTATEPROTOERROR,
 LINUX_MIB_XFRMINSTATEMODEERROR,
 LINUX_MIB_XFRMINSTATESEQERROR,
 LINUX_MIB_XFRMINSTATEEXPIRED,
 LINUX_MIB_XFRMINSTATEMISMATCH,
 LINUX_MIB_XFRMINSTATEINVALID,
 LINUX_MIB_XFRMINTMPLMISMATCH,
 LINUX_MIB_XFRMINNOPOLS,
 LINUX_MIB_XFRMINPOLBLOCK,
 LINUX_MIB_XFRMINPOLERROR,
 LINUX_MIB_XFRMOUTERROR,
 LINUX_MIB_XFRMOUTBUNDLEGENERROR,
 LINUX_MIB_XFRMOUTBUNDLECHECKERROR,
 LINUX_MIB_XFRMOUTNOSTATES,
 LINUX_MIB_XFRMOUTSTATEPROTOERROR,
 LINUX_MIB_XFRMOUTSTATEMODEERROR,
 LINUX_MIB_XFRMOUTSTATESEQERROR,
 LINUX_MIB_XFRMOUTSTATEEXPIRED,
 LINUX_MIB_XFRMOUTPOLBLOCK,
 LINUX_MIB_XFRMOUTPOLDEAD,
 LINUX_MIB_XFRMOUTPOLERROR,
 __LINUX_MIB_XFRMMAX
};
struct snmp_mib {
  template <typename, int = 0> struct __BYPASSsnmp_mib {};
  template <typename, int> friend struct __BYPASSsnmp_mib;
 char *name;
 int entry;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ipstats_mib {
  template <typename, int = 0> struct __BYPASSipstats_mib {};
  template <typename, int> friend struct __BYPASSipstats_mib;
 unsigned long mibs[__IPSTATS_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));





struct icmp_mib {
  template <typename, int = 0> struct __BYPASSicmp_mib {};
  template <typename, int> friend struct __BYPASSicmp_mib;
 unsigned long mibs[(__ICMP_MIB_MAX + 1)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));


struct icmpmsg_mib {
  template <typename, int = 0> struct __BYPASSicmpmsg_mib {};
  template <typename, int> friend struct __BYPASSicmpmsg_mib;
 unsigned long mibs[512];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));



struct icmpv6_mib {
  template <typename, int = 0> struct __BYPASSicmpv6_mib {};
  template <typename, int> friend struct __BYPASSicmpv6_mib;
 unsigned long mibs[__ICMP6_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));


struct icmpv6msg_mib {
  template <typename, int = 0> struct __BYPASSicmpv6msg_mib {};
  template <typename, int> friend struct __BYPASSicmpv6msg_mib;
 unsigned long mibs[512];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));




struct tcp_mib {
  template <typename, int = 0> struct __BYPASStcp_mib {};
  template <typename, int> friend struct __BYPASStcp_mib;
 unsigned long mibs[__TCP_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));



struct udp_mib {
  template <typename, int = 0> struct __BYPASSudp_mib {};
  template <typename, int> friend struct __BYPASSudp_mib;
 unsigned long mibs[__UDP_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));



struct linux_mib {
  template <typename, int = 0> struct __BYPASSlinux_mib {};
  template <typename, int> friend struct __BYPASSlinux_mib;
 unsigned long mibs[__LINUX_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct linux_xfrm_mib {
  template <typename, int = 0> struct __BYPASSlinux_xfrm_mib {};
  template <typename, int> friend struct __BYPASSlinux_xfrm_mib;
 unsigned long mibs[__LINUX_MIB_XFRMMAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netns_mib {
  template <typename, int = 0> struct __BYPASSnetns_mib {};
  template <typename, int> friend struct __BYPASSnetns_mib;
 __typeof__(struct tcp_mib) *tcp_statistics[2];
 __typeof__(struct ipstats_mib) *ip_statistics[2];
 __typeof__(struct linux_mib) *net_statistics[2];
 __typeof__(struct udp_mib) *udp_statistics[2];
 __typeof__(struct udp_mib) *udplite_statistics[2];
 __typeof__(struct icmp_mib) *icmp_statistics[2];
 __typeof__(struct icmpmsg_mib) *icmpmsg_statistics[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct ctl_table_header;
struct netns_unix {
  template <typename, int = 0> struct __BYPASSnetns_unix {};
  template <typename, int> friend struct __BYPASSnetns_unix;
 int sysctl_max_dgram_qlen;
 struct ctl_table_header *ctl;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct netns_packet {
  template <typename, int = 0> struct __BYPASSnetns_packet {};
  template <typename, int> friend struct __BYPASSnetns_packet;
 rwlock_t sklist_lock;
 struct hlist_head sklist;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};










struct netns_frags {
  template <typename, int = 0> struct __BYPASSnetns_frags {};
  template <typename, int> friend struct __BYPASSnetns_frags;
 int nqueues;
 atomic_t mem;
 struct list_head lru_list;


 int timeout;
 int high_thresh;
 int low_thresh;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inet_frag_queue {
  template <typename, int = 0> struct __BYPASSinet_frag_queue {};
  template <typename, int> friend struct __BYPASSinet_frag_queue;
 struct hlist_node list;
 struct netns_frags *net;
 struct list_head lru_list;
 spinlock_t lock;
 atomic_t refcnt;
 struct timer_list timer;
 struct sk_buff *fragments;
 ktime_t stamp;
 int len;
 int meat;
 __u8 last_in;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct inet_frags {
  template <typename, int = 0> struct __BYPASSinet_frags {};
  template <typename, int> friend struct __BYPASSinet_frags;
 struct hlist_head hash[64];
 rwlock_t lock;
 u32 rnd;
 int qsize;
 int secret_interval;
 struct timer_list secret_timer;

 unsigned int (*hashfn)(struct inet_frag_queue *);
 void (*constructor)(struct inet_frag_queue *q,
      void *arg);
 void (*destructor)(struct inet_frag_queue *);
 void (*skb_free)(struct sk_buff *);
 int (*match)(struct inet_frag_queue *q,
      void *arg);
 void (*frag_expire)(unsigned long data);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void inet_frags_init(struct inet_frags *);
void inet_frags_fini(struct inet_frags *);

void inet_frags_init_net(struct netns_frags *nf);
void inet_frags_exit_net(struct netns_frags *nf, struct inet_frags *f);

void inet_frag_kill(struct inet_frag_queue *q, struct inet_frags *f);
void inet_frag_destroy(struct inet_frag_queue *q,
    struct inet_frags *f, int *work);
int inet_frag_evictor(struct netns_frags *nf, struct inet_frags *f);
struct inet_frag_queue *inet_frag_find(struct netns_frags *nf,
  struct inet_frags *f, void *key, unsigned int hash);

static inline void inet_frag_put(struct inet_frag_queue *q, struct inet_frags *f)
{
 if (1)
  inet_frag_destroy(q, f, 0);
}

struct ctl_table_header;
struct ipv4_devconf;
struct fib_rules_ops;
struct hlist_head;
struct sock;

struct netns_ipv4 {
  template <typename, int = 0> struct __BYPASSnetns_ipv4 {};
  template <typename, int> friend struct __BYPASSnetns_ipv4;

 struct ctl_table_header *forw_hdr;
 struct ctl_table_header *frags_hdr;
 struct ctl_table_header *ipv4_hdr;
 struct ctl_table_header *route_hdr;

 struct ipv4_devconf *devconf_all;
 struct ipv4_devconf *devconf_dflt;

 struct fib_rules_ops *rules_ops;

 struct hlist_head *fib_table_hash;
 struct sock *fibnl;

 struct sock **icmp_sk;
 struct sock *tcp_sock;

 struct netns_frags frags;

 struct xt_table *iptable_filter;
 struct xt_table *iptable_mangle;
 struct xt_table *iptable_raw;
 struct xt_table *arptable_filter;
 struct xt_table *iptable_security;


 int sysctl_icmp_echo_ignore_all;
 int sysctl_icmp_echo_ignore_broadcasts;
 int sysctl_icmp_ignore_bogus_error_responses;
 int sysctl_icmp_ratelimit;
 int sysctl_icmp_ratemask;
 int sysctl_icmp_errors_use_inbound_ifaddr;

 struct timer_list rt_secret_timer;
 atomic_t rt_genid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ctl_table_header;

struct netns_sysctl_ipv6 {
  template <typename, int = 0> struct __BYPASSnetns_sysctl_ipv6 {};
  template <typename, int> friend struct __BYPASSnetns_sysctl_ipv6;

 struct ctl_table_header *table;
 struct ctl_table_header *frags_hdr;

 int bindv6only;
 int flush_delay;
 int ip6_rt_max_size;
 int ip6_rt_gc_min_interval;
 int ip6_rt_gc_timeout;
 int ip6_rt_gc_interval;
 int ip6_rt_gc_elasticity;
 int ip6_rt_mtu_expires;
 int ip6_rt_min_advmss;
 int icmpv6_time;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netns_ipv6 {
  template <typename, int = 0> struct __BYPASSnetns_ipv6 {};
  template <typename, int> friend struct __BYPASSnetns_ipv6;
 struct netns_sysctl_ipv6 sysctl;
 struct ipv6_devconf *devconf_all;
 struct ipv6_devconf *devconf_dflt;
 struct netns_frags frags;

 struct xt_table *ip6table_filter;
 struct xt_table *ip6table_mangle;
 struct xt_table *ip6table_raw;
 struct xt_table *ip6table_security;

 struct rt6_info *ip6_null_entry;
 struct rt6_statistics *rt6_stats;
 struct timer_list ip6_fib_timer;
 struct hlist_head *fib_table_hash;
 struct fib6_table *fib6_main_tbl;
 struct dst_ops *ip6_dst_ops;
 unsigned int ip6_rt_gc_expire;
 unsigned long ip6_rt_last_gc;

 struct rt6_info *ip6_prohibit_entry;
 struct rt6_info *ip6_blk_hole_entry;
 struct fib6_table *fib6_local_tbl;
 struct fib_rules_ops *fib6_rules_ops;

 struct sock **icmp_sk;
 struct sock *ndisc_sk;
 struct sock *tcp_sk;
 struct sock *igmp_sk;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct sock;

struct netns_dccp {
  template <typename, int = 0> struct __BYPASSnetns_dccp {};
  template <typename, int> friend struct __BYPASSnetns_dccp;
 struct sock *v4_ctl_sk;
 struct sock *v6_ctl_sk;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct netns_xt {
  template <typename, int = 0> struct __BYPASSnetns_xt {};
  template <typename, int> friend struct __BYPASSnetns_xt;
 struct list_head tables[35];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct proc_dir_entry;
struct net_device;
struct sock;
struct ctl_table_header;
struct net_generic;

struct net {
  template <typename, int = 0> struct __BYPASSnet {};
  template <typename, int> friend struct __BYPASSnet;
 atomic_t count;







 struct list_head list;
 struct work_struct work;

 struct proc_dir_entry *proc_net;
 struct proc_dir_entry *proc_net_stat;


 struct ctl_table_set sysctls;


 struct net_device *loopback_dev;

 struct list_head dev_base_head;
 struct hlist_head *dev_name_head;
 struct hlist_head *dev_index_head;


 struct list_head rules_ops;
 spinlock_t rules_mod_lock;

 struct sock *rtnl;

 struct netns_core core;
 struct netns_mib mib;
 struct netns_packet packet;
 struct netns_unix unx;
 struct netns_ipv4 ipv4;

 struct netns_ipv6 ipv6;


 struct netns_dccp dccp;


 struct netns_xt xt;

 struct net_generic *gen;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct seq_operations;
struct file;
struct path;
struct inode;
struct dentry;

struct seq_file {
  template <typename, int = 0> struct __BYPASSseq_file {};
  template <typename, int> friend struct __BYPASSseq_file;
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 loff_t index;
 loff_t read_pos;
 u64 version;
 struct mutex lock;
 struct seq_operations *op;
 void *_private;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct seq_operations {
  template <typename, int = 0> struct __BYPASSseq_operations {};
  template <typename, int> friend struct __BYPASSseq_operations;
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



int seq_open(struct file *, struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_escape(struct seq_file *, char *, char *);
int seq_putc(struct seq_file *m, char c);
int seq_puts(struct seq_file *m, char *s);

int seq_printf(struct seq_file *, char *, ...)
 __attribute__ ((format (printf,2,3)));

int seq_path(struct seq_file *, struct path *, char *);
int seq_dentry(struct seq_file *, struct dentry *, char *);
int seq_path_root(struct seq_file *m, struct path *path, struct path *root,
    char *esc);
int seq_bitmap(struct seq_file *m, unsigned long *bits, unsigned int nr_bits);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8_cpumask4bitsE_1134_0 {
  typedef TJP__ZN8_cpumask4bitsE_1134_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN8_cpumask4bitsE_1134(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN8_cpumask4bitsE_1134_0< unsigned long int *, ::_cpumask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int seq_cpumask(struct seq_file *m, cpumask_t *mask)
{
 return seq_bitmap(m, __get__ZN8_cpumask4bitsE_1134(mask->bits), 64);
}

static inline int seq_nodemask(struct seq_file *m, nodemask_t *mask)
{
 return seq_bitmap(m, mask->bits, (1 << 9));
}

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, struct seq_operations *, int);
int seq_open_private(struct file *, struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);







extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);

struct net;
extern struct net init_net;

struct seq_net_private {
  template <typename, int = 0> struct __BYPASSseq_net_private {};
  template <typename, int> friend struct __BYPASSseq_net_private;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int seq_open_net(struct inode *, struct file *,
   struct seq_operations *, int);
int single_open_net(struct inode *, struct file *file,
  int (*show)(struct seq_file *, void *));
int seq_release_net(struct inode *, struct file *);
int single_release_net(struct inode *, struct file *);
static inline struct net *seq_file_net(struct seq_file *seq)
{



 return &init_net;

}


extern struct net init_net;




extern struct net *copy_net_ns(unsigned long flags, struct net *net_ns);
extern struct list_head net_namespace_list;
static inline int net_alive(struct net *net)
{
 return 1;
}

static inline struct net *get_net(struct net *net)
{
 return net;
}

static inline void put_net(struct net *net)
{
}

static inline struct net *maybe_get_net(struct net *net)
{
 return net;
}

static inline
int net_eq( struct net *net1, struct net *net2)
{
 return 1;
}
static inline struct net *hold_net(struct net *net)
{
 return net;
}

static inline void release_net(struct net *net)
{
}
struct pernet_operations {
  template <typename, int = 0> struct __BYPASSpernet_operations {};
  template <typename, int> friend struct __BYPASSpernet_operations;
 struct list_head list;
 int (*init)(struct net *net);
 void (*exit)(struct net *net);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int register_pernet_subsys(struct pernet_operations *);
extern void unregister_pernet_subsys(struct pernet_operations *);
extern int register_pernet_device(struct pernet_operations *);
extern void unregister_pernet_device(struct pernet_operations *);
extern int register_pernet_gen_device(int *id, struct pernet_operations *);
extern void unregister_pernet_gen_device(int id, struct pernet_operations *);

struct ctl_path;
struct ctl_table;
struct ctl_table_header;

extern struct ctl_table_header *register_net_sysctl_table(struct net *net,
 struct ctl_path *path, struct ctl_table *table);
extern struct ctl_table_header *register_net_sysctl_rotable(
 struct ctl_path *path, struct ctl_table *table);
extern void unregister_net_sysctl_table(struct ctl_table_header *header);

struct vlan_group;
struct ethtool_ops;
struct netpoll_info;

struct wireless_dev;
struct net_device_stats
{
  template <typename, int = 0> struct __BYPASSnet_device_stats {};
  template <typename, int> friend struct __BYPASSnet_device_stats;
 unsigned long rx_packets;
 unsigned long tx_packets;
 unsigned long rx_bytes;
 unsigned long tx_bytes;
 unsigned long rx_errors;
 unsigned long tx_errors;
 unsigned long rx_dropped;
 unsigned long tx_dropped;
 unsigned long multicast;
 unsigned long collisions;


 unsigned long rx_length_errors;
 unsigned long rx_over_errors;
 unsigned long rx_crc_errors;
 unsigned long rx_frame_errors;
 unsigned long rx_fifo_errors;
 unsigned long rx_missed_errors;


 unsigned long tx_aborted_errors;
 unsigned long tx_carrier_errors;
 unsigned long tx_fifo_errors;
 unsigned long tx_heartbeat_errors;
 unsigned long tx_window_errors;


 unsigned long rx_compressed;
 unsigned long tx_compressed;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum {
        IF_PORT_UNKNOWN = 0,
        IF_PORT_10BASE2,
        IF_PORT_10BASET,
        IF_PORT_AUI,
        IF_PORT_100BASET,
        IF_PORT_100BASETX,
        IF_PORT_100BASEFX
};






struct neighbour;
struct neigh_parms;
struct sk_buff;

struct netif_rx_stats
{
  template <typename, int = 0> struct __BYPASSnetif_rx_stats {};
  template <typename, int> friend struct __BYPASSnetif_rx_stats;
 unsigned total;
 unsigned dropped;
 unsigned time_squeeze;
 unsigned cpu_collision;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern __typeof__(struct netif_rx_stats) per_cpu__netdev_rx_stat;

struct dev_addr_list
{
  template <typename, int = 0> struct __BYPASSdev_addr_list {};
  template <typename, int> friend struct __BYPASSdev_addr_list;
 struct dev_addr_list *next;
 u8 da_addr[32];
 u8 da_addrlen;
 u8 da_synced;
 int da_users;
 int da_gusers;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct hh_cache
{
  template <typename, int = 0> struct __BYPASShh_cache {};
  template <typename, int> friend struct __BYPASShh_cache;
 struct hh_cache *hh_next;
 atomic_t hh_refcnt;






 __be16 hh_type __attribute__((__aligned__((1 << (7)))));




 u16 hh_len;
 int (*hh_output)(struct sk_buff *skb);
 seqlock_t hh_lock;







 unsigned long hh_data[(((128)+(16 -1))&~(16 - 1)) / sizeof(long)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct header_ops {
  template <typename, int = 0> struct __BYPASSheader_ops {};
  template <typename, int> friend struct __BYPASSheader_ops;
 int (*create) (struct sk_buff *skb, struct net_device *dev,
      unsigned short type, void *daddr,
      void *saddr, unsigned len);
 int (*parse)( struct sk_buff *skb, unsigned char *haddr);
 int (*rebuild)(struct sk_buff *skb);

 int (*cache)( struct neighbour *neigh, struct hh_cache *hh);
 void (*cache_update)(struct hh_cache *hh,
    struct net_device *dev,
    unsigned char *haddr);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






enum netdev_state_t
{
 __LINK_STATE_START,
 __LINK_STATE_PRESENT,
 __LINK_STATE_NOCARRIER,
 __LINK_STATE_LINKWATCH_PENDING,
 __LINK_STATE_DORMANT,
};






struct netdev_boot_setup {
  template <typename, int = 0> struct __BYPASSnetdev_boot_setup {};
  template <typename, int> friend struct __BYPASSnetdev_boot_setup;
 char name[16];
 struct ifmap map;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) netdev_boot_setup(char *str);




struct napi_struct {
  template <typename, int = 0> struct __BYPASSnapi_struct {};
  template <typename, int> friend struct __BYPASSnapi_struct;






 struct list_head poll_list;

 unsigned long state;
 int weight;
 int (*poll)(struct napi_struct *, int);

 spinlock_t poll_lock;
 int poll_owner;
 struct net_device *dev;
 struct list_head dev_list;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum
{
 NAPI_STATE_SCHED,
 NAPI_STATE_DISABLE,
};

extern void __napi_schedule(struct napi_struct *n);

static inline int napi_disable_pending(struct napi_struct *n)
{
 return (__builtin_constant_p((NAPI_STATE_DISABLE)) ? constant_test_bit((NAPI_STATE_DISABLE), (&n->state)) : variable_test_bit((NAPI_STATE_DISABLE), (&n->state)));
}
static inline int napi_schedule_prep(struct napi_struct *n)
{
 return !napi_disable_pending(n) &&
  !test_and_set_bit(NAPI_STATE_SCHED, &n->state);
}
static inline void napi_schedule(struct napi_struct *n)
{
 if (napi_schedule_prep(n))
  __napi_schedule(n);
}


static inline int napi_reschedule(struct napi_struct *napi)
{
 if (napi_schedule_prep(napi)) {
  __napi_schedule(napi);
  return 1;
 }
 return 0;
}







static inline void __napi_complete(struct napi_struct *n)
{
 ;
 list_del(&n->poll_list);
 __asm__ __volatile__("": : :"memory");
 clear_bit(NAPI_STATE_SCHED, &n->state);
}

static inline void napi_complete(struct napi_struct *n)
{
 unsigned long flags;

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { (flags) = __raw_local_irq_save(); } while (0); trace_hardirqs_off(); } while (0);
 __napi_complete(n);
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); if (raw_irqs_disabled_flags(flags)) { raw_local_irq_restore(flags); trace_hardirqs_off(); } else { trace_hardirqs_on(); raw_local_irq_restore(flags); } } while (0);
}
static inline void napi_disable(struct napi_struct *n)
{
 set_bit(NAPI_STATE_DISABLE, &n->state);
 while (test_and_set_bit(NAPI_STATE_SCHED, &n->state))
  msleep(1);
 clear_bit(NAPI_STATE_DISABLE, &n->state);
}
static inline void napi_enable(struct napi_struct *n)
{
 ;
 __asm__ __volatile__("": : :"memory");
 clear_bit(NAPI_STATE_SCHED, &n->state);
}
static inline void napi_synchronize( struct napi_struct *n)
{
 while ((__builtin_constant_p((NAPI_STATE_SCHED)) ? constant_test_bit((NAPI_STATE_SCHED), (&n->state)) : variable_test_bit((NAPI_STATE_SCHED), (&n->state))))
  msleep(1);
}




enum netdev_queue_state_t
{
 __QUEUE_STATE_XOFF,
 __QUEUE_STATE_FROZEN,
};

struct netdev_queue {
  template <typename, int = 0> struct __BYPASSnetdev_queue {};
  template <typename, int> friend struct __BYPASSnetdev_queue;
 struct net_device *dev;
 struct Qdisc *qdisc;
 unsigned long state;
 spinlock_t _xmit_lock;
 int xmit_lock_owner;
 struct Qdisc *qdisc_sleeping;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (7)))));
struct net_device
{
  template <typename, int = 0> struct __BYPASSnet_device {};
  template <typename, int> friend struct __BYPASSnet_device;






 char name[16];

 struct hlist_node name_hlist;





 unsigned long mem_end;
 unsigned long mem_start;
 unsigned long base_addr;
 unsigned int irq;






 unsigned char if_port;
 unsigned char dma;

 unsigned long state;

 struct list_head dev_list;

 struct list_head napi_list;



 int (*init)(struct net_device *dev);




 unsigned long features;
 int ifindex;
 int iflink;


 struct net_device_stats* (*get_stats)(struct net_device *dev);
 struct net_device_stats stats;




 struct iw_handler_def * wireless_handlers;

 struct iw_public_data * wireless_data;

 struct ethtool_ops *ethtool_ops;


 struct header_ops *header_ops;
 unsigned int flags;
 unsigned short gflags;
        unsigned short priv_flags;
 unsigned short padded;

 unsigned char operstate;
 unsigned char link_mode;

 unsigned mtu;
 unsigned short type;
 unsigned short hard_header_len;





 unsigned short needed_headroom;
 unsigned short needed_tailroom;

 struct net_device *master;




 unsigned char perm_addr[32];
 unsigned char addr_len;
 unsigned short dev_id;

 spinlock_t addr_list_lock;
 struct dev_addr_list *uc_list;
 int uc_count;
 int uc_promisc;
 struct dev_addr_list *mc_list;
 int mc_count;
 unsigned int promiscuity;
 unsigned int allmulti;




 void *atalk_ptr;
 void *ip_ptr;
 void *dn_ptr;
 void *ip6_ptr;
 void *ec_ptr;
 void *ax25_ptr;
 struct wireless_dev *ieee80211_ptr;





 unsigned long last_rx;

 unsigned char dev_addr[32];


 unsigned char broadcast[32];

 struct netdev_queue rx_queue;

 struct netdev_queue *_tx __attribute__((__aligned__((1 << (7)))));


 unsigned int num_tx_queues;


 unsigned int real_num_tx_queues;

 unsigned long tx_queue_len;
 spinlock_t tx_global_lock;



 void *priv;
 int (*hard_start_xmit) (struct sk_buff *skb,
          struct net_device *dev);

 unsigned long trans_start;

 int watchdog_timeo;
 struct timer_list watchdog_timer;





 atomic_t refcnt __attribute__((__aligned__((1 << (7)))));


 struct list_head todo_list;

 struct hlist_node index_hlist;

 struct net_device *link_watch_next;


 enum { NETREG_UNINITIALIZED=0,
        NETREG_REGISTERED,
        NETREG_UNREGISTERING,
        NETREG_UNREGISTERED,
        NETREG_RELEASED,
 } reg_state;


 void (*uninit)(struct net_device *dev);

 void (*destructor)(struct net_device *dev);


 int (*open)(struct net_device *dev);
 int (*stop)(struct net_device *dev);


 void (*change_rx_flags)(struct net_device *dev,
         int flags);

 void (*set_rx_mode)(struct net_device *dev);

 void (*set_multicast_list)(struct net_device *dev);

 int (*set_mac_address)(struct net_device *dev,
         void *addr);

 int (*validate_addr)(struct net_device *dev);

 int (*do_ioctl)(struct net_device *dev,
         struct ifreq *ifr, int cmd);

 int (*set_config)(struct net_device *dev,
           struct ifmap *map);

 int (*change_mtu)(struct net_device *dev, int new_mtu);


 void (*tx_timeout) (struct net_device *dev);

 void (*vlan_rx_register)(struct net_device *dev,
          struct vlan_group *grp);
 void (*vlan_rx_add_vid)(struct net_device *dev,
         unsigned short vid);
 void (*vlan_rx_kill_vid)(struct net_device *dev,
          unsigned short vid);

 int (*neigh_setup)(struct net_device *dev, struct neigh_parms *);

 struct netpoll_info *npinfo;


 void (*poll_controller)(struct net_device *dev);


 u16 (*select_queue)(struct net_device *dev,
      struct sk_buff *skb);







 void *ml_priv;


 struct net_bridge_port *br_port;

 struct macvlan_port *macvlan_port;

 struct garp_port *garp_port;


 struct device dev;

 struct attribute_group *sysfs_groups[3];


 struct rtnl_link_ops *rtnl_link_ops;


 unsigned long vlan_features;



 unsigned int gso_max_size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device3_txE_1148_0 {
  typedef TJP__ZN10net_device3_txE_1148_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netdev_queue __get__ZN10net_device3_txE_1148(netdev_queue *source) {
  AC::ResultBuffer< ::netdev_queue  > __result_buffer;
  typedef TJP__ZN10net_device3_txE_1148_0< ::netdev_queue , ::net_device , ::netdev_queue  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_queue &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device3_txE_1149_0 {
  typedef TJP__ZN10net_device3_txE_1149_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return true;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netdev_queue * __get__ZN10net_device3_txE_1149(netdev_queue * *source) {
  ::netdev_queue *__result_buffer;
  typedef TJP__ZN10net_device3_txE_1149_0< ::netdev_queue *, ::net_device , ::netdev_queue * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_queue *&)__result_buffer;
}
static inline
struct netdev_queue *netdev_get_tx_queue( struct net_device *dev,
      unsigned int index)
{
 return &__get__ZN10net_device3_txE_1148(&__get__ZN10net_device3_txE_1149(&dev->_tx)[index]);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_1150_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_1150_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_1150(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_1150_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device3_txE_1151_0 {
  typedef TJP__ZN10net_device3_txE_1151_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netdev_queue __get__ZN10net_device3_txE_1151(netdev_queue *source) {
  AC::ResultBuffer< ::netdev_queue  > __result_buffer;
  typedef TJP__ZN10net_device3_txE_1151_0< ::netdev_queue , ::net_device , ::netdev_queue  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_queue &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device3_txE_1152_0 {
  typedef TJP__ZN10net_device3_txE_1152_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return true;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netdev_queue * __get__ZN10net_device3_txE_1152(netdev_queue * *source) {
  ::netdev_queue *__result_buffer;
  typedef TJP__ZN10net_device3_txE_1152_0< ::netdev_queue *, ::net_device , ::netdev_queue * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_queue *&)__result_buffer;
}
static inline void netdev_for_each_tx_queue(struct net_device *dev,
         void (*f)(struct net_device *,
            struct netdev_queue *,
            void *),
         void *arg)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_1150(&dev->num_tx_queues); i++)
  f(dev, &__get__ZN10net_device3_txE_1151(&__get__ZN10net_device3_txE_1152(&dev->_tx)[i]), arg);
}




static inline
struct net *dev_net( struct net_device *dev)
{



 return &init_net;

}

static inline
void dev_net_set(struct net_device *dev, struct net *net)
{




}







static inline void *netdev_priv( struct net_device *dev)
{
 return (char *)dev + ((sizeof(struct net_device)
          + (32 - 1))
         & ~(32 - 1));
}
static inline void netif_napi_add(struct net_device *dev,
      struct napi_struct *napi,
      int (*poll)(struct napi_struct *, int),
      int weight)
{
 INIT_LIST_HEAD(&napi->poll_list);
 napi->poll = poll;
 napi->weight = weight;

 napi->dev = dev;
 list_add(&napi->dev_list, &dev->napi_list);
 ;
 napi->poll_owner = -1;

 set_bit(NAPI_STATE_SCHED, &napi->state);
}







static inline void netif_napi_del(struct napi_struct *napi)
{

 list_del(&napi->dev_list);

}

struct packet_type {
  template <typename, int = 0> struct __BYPASSpacket_type {};
  template <typename, int> friend struct __BYPASSpacket_type;
 __be16 type;
 struct net_device *dev;
 int (*func) (struct sk_buff *,
      struct net_device *,
      struct packet_type *,
      struct net_device *);
 struct sk_buff *(*gso_segment)(struct sk_buff *skb,
      int features);
 int (*gso_send_check)(struct sk_buff *skb);
 void *af_packet_priv;
 struct list_head list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef int irqreturn_t;








struct sched_param {
  template <typename, int = 0> struct __BYPASSsched_param {};
  template <typename, int> friend struct __BYPASSsched_param;
 int sched_priority;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






typedef unsigned long cputime_t;
typedef u64 cputime64_t;





struct ipc_perm
{
  template <typename, int = 0> struct __BYPASSipc_perm {};
  template <typename, int> friend struct __BYPASSipc_perm;
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ipc64_perm {
  template <typename, int = 0> struct __BYPASSipc64_perm {};
  template <typename, int> friend struct __BYPASSipc64_perm;
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;
 unsigned short __pad1;
 unsigned short seq;
 unsigned short __pad2;
 unsigned long __unused1;
 unsigned long __unused2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ipc_kludge {
  template <typename, int = 0> struct __BYPASSipc_kludge {};
  template <typename, int> friend struct __BYPASSipc_kludge;
 struct msgbuf *msgp;
 long msgtyp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct kern_ipc_perm
{
  template <typename, int = 0> struct __BYPASSkern_ipc_perm {};
  template <typename, int> friend struct __BYPASSkern_ipc_perm;
 spinlock_t lock;
 int deleted;
 int id;
 key_t key;
 uid_t uid;
 gid_t gid;
 uid_t cuid;
 gid_t cgid;
 mode_t mode;
 unsigned long seq;
 void *security;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct semid_ds {
  template <typename, int = 0> struct __BYPASSsemid_ds {};
  template <typename, int> friend struct __BYPASSsemid_ds;
 struct ipc_perm sem_perm;
 __kernel_time_t sem_otime;
 __kernel_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct semid64_ds {
  template <typename, int = 0> struct __BYPASSsemid64_ds {};
  template <typename, int> friend struct __BYPASSsemid64_ds;
 struct ipc64_perm sem_perm;
 __kernel_time_t sem_otime;
 unsigned long __unused1;
 __kernel_time_t sem_ctime;
 unsigned long __unused2;
 unsigned long sem_nsems;
 unsigned long __unused3;
 unsigned long __unused4;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sembuf {
  template <typename, int = 0> struct __BYPASSsembuf {};
  template <typename, int> friend struct __BYPASSsembuf;
 unsigned short sem_num;
 short sem_op;
 short sem_flg;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
  template <typename, int = 0> struct __BYPASSseminfo {};
  template <typename, int> friend struct __BYPASSseminfo;
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct task_struct;


struct sem {
  template <typename, int = 0> struct __BYPASSsem {};
  template <typename, int> friend struct __BYPASSsem;
 int semval;
 int sempid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sem_array {
  template <typename, int = 0> struct __BYPASSsem_array {};
  template <typename, int> friend struct __BYPASSsem_array;
 struct kern_ipc_perm sem_perm;
 time_t sem_otime;
 time_t sem_ctime;
 struct sem *sem_base;
 struct list_head sem_pending;
 struct list_head list_id;
 unsigned long sem_nsems;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sem_queue {
  template <typename, int = 0> struct __BYPASSsem_queue {};
  template <typename, int> friend struct __BYPASSsem_queue;
 struct list_head list;
 struct task_struct *sleeper;
 struct sem_undo *undo;
 int pid;
 int status;
 struct sembuf *sops;
 int nsops;
 int alter;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct sem_undo {
  template <typename, int = 0> struct __BYPASSsem_undo {};
  template <typename, int> friend struct __BYPASSsem_undo;
 struct list_head list_proc;

 struct rcu_head rcu;
 struct sem_undo_list *ulp;
 struct list_head list_id;
 int semid;
 short * semadj;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct sem_undo_list {
  template <typename, int = 0> struct __BYPASSsem_undo_list {};
  template <typename, int> friend struct __BYPASSsem_undo_list;
 atomic_t refcnt;
 spinlock_t lock;
 struct list_head list_proc;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sysv_sem {
  template <typename, int = 0> struct __BYPASSsysv_sem {};
  template <typename, int> friend struct __BYPASSsysv_sem;
 struct sem_undo_list *undo_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



extern int copy_semundo(unsigned long clone_flags, struct task_struct *tsk);
extern void exit_sem(struct task_struct *tsk);



struct siginfo;
typedef unsigned long old_sigset_t;

typedef struct {
 unsigned long sig[(64 / 64)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} sigset_t;
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
struct sigaction {
  template <typename, int = 0> struct __BYPASSsigaction {};
  template <typename, int> friend struct __BYPASSsigaction;
 __sighandler_t sa_handler;
 unsigned long sa_flags;
 __sigrestore_t sa_restorer;
 sigset_t sa_mask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct k_sigaction {
  template <typename, int = 0> struct __BYPASSk_sigaction {};
  template <typename, int> friend struct __BYPASSk_sigaction;
 struct sigaction sa;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



typedef struct sigaltstack {
  template <typename, int = 0> struct __BYPASSsigaltstack {};
  template <typename, int> friend struct __BYPASSsigaltstack;
 void *ss_sp;
 int ss_flags;
 size_t ss_size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} stack_t;













typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
typedef struct siginfo {
  template <typename, int = 0> struct __BYPASSsiginfo {};
  template <typename, int> friend struct __BYPASSsiginfo;
 int si_signo;
 int si_errno;
 int si_code;

 union {
  int _pad[((128 - (4 * sizeof(int))) / sizeof(int))];


  struct {
   pid_t _pid;
   uid_t _uid;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _kill;


  struct {
   timer_t _tid;
   int _overrun;
   char _pad[sizeof( uid_t) - sizeof(int)];
   sigval_t _sigval;
   int _sys_private;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _timer;


  struct {
   pid_t _pid;
   uid_t _uid;
   sigval_t _sigval;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _rt;


  struct {
   pid_t _pid;
   uid_t _uid;
   int _status;
   clock_t _utime;
   clock_t _stime;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigchld;


  struct {
   void *_addr;



  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigfault;


  struct {
   long _band;
   int _fd;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigpoll;
 } _sifields;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} siginfo_t;
typedef struct sigevent {
  template <typename, int = 0> struct __BYPASSsigevent {};
  template <typename, int> friend struct __BYPASSsigevent;
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigev_thread;
 } _sigev_un;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} sigevent_t;







struct siginfo;
void do_schedule_next_timer(struct siginfo *info);





static inline void copy_siginfo(struct siginfo *to, struct siginfo *from)
{
 if (from->si_code < 0)
  memcpy(to, from, sizeof(*to));
 else

  memcpy(to, from, (4 * sizeof(int)) + sizeof(from->_sifields._sigchld));
}



extern int copy_siginfo_to_user(struct siginfo *to, struct siginfo *from);
struct sigqueue {
  template <typename, int = 0> struct __BYPASSsigqueue {};
  template <typename, int> friend struct __BYPASSsigqueue;
 struct list_head list;
 int flags;
 siginfo_t info;
 struct user_struct *user;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct sigpending {
  template <typename, int = 0> struct __BYPASSsigpending {};
  template <typename, int> friend struct __BYPASSsigpending;
 struct list_head list;
 sigset_t signal;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void sigaddset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] |= 1UL << sig;
 else
  set->sig[sig / 64] |= 1UL << (sig % 64);
}

static inline void sigdelset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] &= ~(1UL << sig);
 else
  set->sig[sig / 64] &= ~(1UL << (sig % 64));
}

static inline int sigismember(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  return 1 & (set->sig[0] >> sig);
 else
  return 1 & (set->sig[sig / 64] >> (sig % 64));
}

static inline int sigfindinword(unsigned long word)
{
 return ffz(~word);
}



static inline int sigisemptyset(sigset_t *set)
{
 extern void _NSIG_WORDS_is_unsupported_size(void);
 switch ((64 / 64)) {
 case 4:
  return (set->sig[3] | set->sig[2] |
   set->sig[1] | set->sig[0]) == 0;
 case 2:
  return (set->sig[1] | set->sig[0]) == 0;
 case 1:
  return set->sig[0] == 0;
 default:
  _NSIG_WORDS_is_unsupported_size();
  return 0;
 }
}
static inline void sigorsets(sigset_t *r, sigset_t *a, sigset_t *b) { extern void _NSIG_WORDS_is_unsupported_size(void); unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) | (b3)); r->sig[2] = ((a2) | (b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) | (b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) | (b0)); break; default: _NSIG_WORDS_is_unsupported_size(); } }


static inline void sigandsets(sigset_t *r, sigset_t *a, sigset_t *b) { extern void _NSIG_WORDS_is_unsupported_size(void); unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & (b3)); r->sig[2] = ((a2) & (b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & (b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & (b0)); break; default: _NSIG_WORDS_is_unsupported_size(); } }


static inline void signandsets(sigset_t *r, sigset_t *a, sigset_t *b) { extern void _NSIG_WORDS_is_unsupported_size(void); unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & ~(b3)); r->sig[2] = ((a2) & ~(b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & ~(b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & ~(b0)); break; default: _NSIG_WORDS_is_unsupported_size(); } }
static inline void signotset(sigset_t *set) { extern void _NSIG_WORDS_is_unsupported_size(void); switch ((64 / 64)) { case 4: set->sig[3] = (~(set->sig[3])); set->sig[2] = (~(set->sig[2])); case 2: set->sig[1] = (~(set->sig[1])); case 1: set->sig[0] = (~(set->sig[0])); break; default: _NSIG_WORDS_is_unsupported_size(); } }




static inline void sigemptyset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, 0, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = 0;
 case 1: set->sig[0] = 0;
  break;
 }
}

static inline void sigfillset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, -1, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = -1;
 case 1: set->sig[0] = -1;
  break;
 }
}



static inline void sigaddsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] |= mask;
}

static inline void sigdelsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] &= ~mask;
}

static inline int sigtestsetmask(sigset_t *set, unsigned long mask)
{
 return (set->sig[0] & mask) != 0;
}

static inline void siginitset(sigset_t *set, unsigned long mask)
{
 set->sig[0] = mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], 0, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = 0;
 case 1: ;
 }
}

static inline void siginitsetinv(sigset_t *set, unsigned long mask)
{
 set->sig[0] = ~mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], -1, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = -1;
 case 1: ;
 }
}



static inline void init_sigpending(struct sigpending *sig)
{
 sigemptyset(&sig->signal);
 INIT_LIST_HEAD(&sig->list);
}

extern void flush_sigqueue(struct sigpending *queue);


static inline int valid_signal(unsigned long sig)
{
 return sig <= 64 ? 1 : 0;
}

extern int next_signal(struct sigpending *pending, sigset_t *mask);
extern int group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p);
extern int __group_send_sig_info(int, struct siginfo *, struct task_struct *);
extern long do_sigpending(void *, unsigned long);
extern int sigprocmask(int, sigset_t *, sigset_t *);
extern int show_unhandled_signals;

struct pt_regs;
extern int get_signal_to_deliver(siginfo_t *info, struct k_sigaction *return_ka, struct pt_regs *regs, void *cookie);
extern void exit_signals(struct task_struct *tsk);

extern struct kmem_cache *sighand_cachep;

int unhandled_signal(struct task_struct *tsk, int sig);
void signals_init(void);






struct dentry;
struct vfsmount;

struct path {
  template <typename, int = 0> struct __BYPASSpath {};
  template <typename, int> friend struct __BYPASSpath;
 struct vfsmount *mnt;
 struct dentry *dentry;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct fs_struct {
  template <typename, int = 0> struct __BYPASSfs_struct {};
  template <typename, int> friend struct __BYPASSfs_struct;
 atomic_t count;
 rwlock_t lock;
 int umask;
 struct path root, pwd;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







extern struct kmem_cache *fs_cachep;

extern void exit_fs(struct task_struct *);
extern void set_fs_root(struct fs_struct *, struct path *);
extern void set_fs_pwd(struct fs_struct *, struct path *);
extern struct fs_struct *copy_fs_struct(struct fs_struct *);
extern void put_fs_struct(struct fs_struct *);







enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX
};
struct upid {
  template <typename, int = 0> struct __BYPASSupid {};
  template <typename, int> friend struct __BYPASSupid;

 int nr;
 struct pid_namespace *ns;
 struct hlist_node pid_chain;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pid
{
  template <typename, int = 0> struct __BYPASSpid {};
  template <typename, int> friend struct __BYPASSpid;
 atomic_t count;
 unsigned int level;

 struct hlist_head tasks[PIDTYPE_MAX];
 struct rcu_head rcu;
 struct upid numbers[1];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct pid init_struct_pid;

struct pid_link
{
  template <typename, int = 0> struct __BYPASSpid_link {};
  template <typename, int> friend struct __BYPASSpid_link;
 struct hlist_node node;
 struct pid *pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct pid *get_pid(struct pid *pid)
{
 if (pid)
  ;
 return pid;
}






extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);





extern void attach_pid(struct task_struct *task, enum pid_type type,
   struct pid *pid);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void transfer_pid(struct task_struct *old, struct task_struct *_new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);
int next_pidmap(struct pid_namespace *pid_ns, int last);

extern struct pid *alloc_pid(struct pid_namespace *ns);
extern void free_pid(struct pid *pid);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4upid2nsE_1195_0 {
  typedef TJP__ZN4upid2nsE_1195_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_namespace * __get__ZN4upid2nsE_1195(pid_namespace * *source) {
  ::pid_namespace *__result_buffer;
  typedef TJP__ZN4upid2nsE_1195_0< ::pid_namespace *, ::upid , ::pid_namespace * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_namespace *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3pid7numbersE_1196_0 {
  typedef TJP__ZN3pid7numbersE_1196_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline upid __get__ZN3pid7numbersE_1196(upid *source) {
  AC::ResultBuffer< ::upid  > __result_buffer;
  typedef TJP__ZN3pid7numbersE_1196_0< ::upid , ::pid , ::upid  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::upid &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3pid5levelE_1197_0 {
  typedef TJP__ZN3pid5levelE_1197_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN3pid5levelE_1197(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN3pid5levelE_1197_0< unsigned int , ::pid , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = 0;
 if (pid)
  ns = __get__ZN4upid2nsE_1195(&__get__ZN3pid7numbersE_1196(&pid->numbers[__get__ZN3pid5levelE_1197(&pid->level)]).ns);
 return ns;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4upid2nrE_1198_0 {
  typedef TJP__ZN4upid2nrE_1198_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4upid2nrE_1198(int *source) {
  int __result_buffer;
  typedef TJP__ZN4upid2nrE_1198_0< int , ::upid , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3pid7numbersE_1199_0 {
  typedef TJP__ZN3pid7numbersE_1199_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline upid __get__ZN3pid7numbersE_1199(upid *source) {
  AC::ResultBuffer< ::upid  > __result_buffer;
  typedef TJP__ZN3pid7numbersE_1199_0< ::upid , ::pid , ::upid  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::upid &)__result_buffer;
}
static inline pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = __get__ZN4upid2nrE_1198(&__get__ZN3pid7numbersE_1199(&pid->numbers[0]).nr);
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);


struct percpu_counter {
  template <typename, int = 0> struct __BYPASSpercpu_counter {};
  template <typename, int> friend struct __BYPASSpercpu_counter;
 spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







int percpu_counter_init(struct percpu_counter *fbc, s64 amount);
int percpu_counter_init_irq(struct percpu_counter *fbc, s64 amount);
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void __percpu_counter_add(struct percpu_counter *fbc, s64 amount, s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc, int set);

static inline void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 __percpu_counter_add(fbc, amount, (64*2));
}

static inline s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc, 0);
 return ret < 0 ? 0 : ret;
}

static inline s64 percpu_counter_sum_and_set(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc, 1);
}


static inline s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc, 0);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14percpu_counter5countE_1200_0 {
  typedef TJP__ZN14percpu_counter5countE_1200_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN14percpu_counter5countE_1200(long long int *source) {
  ::s64 __result_buffer;
  typedef TJP__ZN14percpu_counter5countE_1200_0< ::s64 , ::percpu_counter , ::s64  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::s64 &)__result_buffer;
}
static inline s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return __get__ZN14percpu_counter5countE_1200(&fbc->count);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14percpu_counter5countE_1201_0 {
  typedef TJP__ZN14percpu_counter5countE_1201_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN14percpu_counter5countE_1201(long long int *source) {
  ::s64 __result_buffer;
  typedef TJP__ZN14percpu_counter5countE_1201_0< ::s64 , ::percpu_counter , ::s64  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::s64 &)__result_buffer;
}
static inline s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{
 s64 ret = __get__ZN14percpu_counter5countE_1201(&fbc->count);

 __asm__ __volatile__("": : :"memory");
 if (ret >= 0)
  return ret;
 return 1;
}
static inline void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}



struct prop_global {
  template <typename, int = 0> struct __BYPASSprop_global {};
  template <typename, int> friend struct __BYPASSprop_global;





 int shift;






 struct percpu_counter events;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct prop_descriptor {
  template <typename, int = 0> struct __BYPASSprop_descriptor {};
  template <typename, int> friend struct __BYPASSprop_descriptor;
 int index;
 struct prop_global pg[2];
 struct mutex mutex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int prop_descriptor_init(struct prop_descriptor *pd, int shift);
void prop_change_shift(struct prop_descriptor *pd, int new_shift);





struct prop_local_percpu {
  template <typename, int = 0> struct __BYPASSprop_local_percpu {};
  template <typename, int> friend struct __BYPASSprop_local_percpu;



 struct percpu_counter events;




 int shift;
 unsigned long period;
 spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int prop_local_init_percpu(struct prop_local_percpu *pl);
void prop_local_destroy_percpu(struct prop_local_percpu *pl);
void __prop_inc_percpu(struct prop_descriptor *pd, struct prop_local_percpu *pl);
void prop_fraction_percpu(struct prop_descriptor *pd, struct prop_local_percpu *pl,
  long *numerator, long *denominator);

static inline
void prop_inc_percpu(struct prop_descriptor *pd, struct prop_local_percpu *pl)
{
 unsigned long flags;

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { (flags) = __raw_local_irq_save(); } while (0); trace_hardirqs_off(); } while (0);
 __prop_inc_percpu(pd, pl);
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); if (raw_irqs_disabled_flags(flags)) { raw_local_irq_restore(flags); trace_hardirqs_off(); } else { trace_hardirqs_on(); raw_local_irq_restore(flags); } } while (0);
}
void __prop_inc_percpu_max(struct prop_descriptor *pd,
      struct prop_local_percpu *pl, long frac);






struct prop_local_single {
  template <typename, int = 0> struct __BYPASSprop_local_single {};
  template <typename, int> friend struct __BYPASSprop_local_single;



 unsigned long events;





 int shift;
 unsigned long period;
 spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





int prop_local_init_single(struct prop_local_single *pl);
void prop_local_destroy_single(struct prop_local_single *pl);
void __prop_inc_single(struct prop_descriptor *pd, struct prop_local_single *pl);
void prop_fraction_single(struct prop_descriptor *pd, struct prop_local_single *pl,
  long *numerator, long *denominator);

static inline
void prop_inc_single(struct prop_descriptor *pd, struct prop_local_single *pl)
{
 unsigned long flags;

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { (flags) = __raw_local_irq_save(); } while (0); trace_hardirqs_off(); } while (0);
 __prop_inc_single(pd, pl);
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); if (raw_irqs_disabled_flags(flags)) { raw_local_irq_restore(flags); trace_hardirqs_off(); } else { trace_hardirqs_on(); raw_local_irq_restore(flags); } } while (0);
}
























































































































































































































































































































































































































































































































































































































































































typedef struct { int mode; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} seccomp_t;

extern void __secure_computing(int);
static inline void secure_computing(int this_syscall)
{
 if (__builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 8)), 0))
  __secure_computing(this_syscall);
}

extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long);

struct plist_head {
  template <typename, int = 0> struct __BYPASSplist_head {};
  template <typename, int> friend struct __BYPASSplist_head;
 struct list_head prio_list;
 struct list_head node_list;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct plist_node {
  template <typename, int = 0> struct __BYPASSplist_node {};
  template <typename, int> friend struct __BYPASSplist_node;
 int prio;
 struct plist_head plist;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void
plist_head_init(struct plist_head *head, spinlock_t *lock)
{
 INIT_LIST_HEAD(&head->prio_list);
 INIT_LIST_HEAD(&head->node_list);



}






static inline void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 plist_head_init(&node->plist, 0);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);
static inline int plist_head_empty( struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline int plist_node_empty( struct plist_node *node)
{
 return plist_head_empty(&node->plist);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1202_0 {
  typedef TJP__ZN9list_head4nextE_1202_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1202(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1202_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline struct plist_node* plist_first( struct plist_head *head)
{
 return ({ typeof( ((struct plist_node *)0)->plist.node_list ) *__mptr = (__get__ZN9list_head4nextE_1202(&head->node_list.next)); (struct plist_node *)( (char *)__mptr - ((size_t) &((struct plist_node *)0)->plist.node_list) );})
                                        ;
}
struct rt_mutex {
  template <typename, int = 0> struct __BYPASSrt_mutex {};
  template <typename, int> friend struct __BYPASSrt_mutex;
 spinlock_t wait_lock;
 struct plist_head wait_list;
 struct task_struct *owner;







  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rt_mutex_waiter;
struct hrtimer_sleeper;






 static inline int rt_mutex_debug_check_no_locks_freed( void *from,
             unsigned long len)
 {
 return 0;
 }
static inline int rt_mutex_is_locked(struct rt_mutex *lock)
{
 return lock->owner != 0;
}

extern void __rt_mutex_init(struct rt_mutex *lock, char *name);
extern void rt_mutex_destroy(struct rt_mutex *lock);

extern void rt_mutex_lock(struct rt_mutex *lock);
extern int rt_mutex_lock_interruptible(struct rt_mutex *lock,
      int detect_deadlock);
extern int rt_mutex_timed_lock(struct rt_mutex *lock,
     struct hrtimer_sleeper *timeout,
     int detect_deadlock);

extern int rt_mutex_trylock(struct rt_mutex *lock);

extern void rt_mutex_unlock(struct rt_mutex *lock);








struct task_struct;
struct rusage {
  template <typename, int = 0> struct __BYPASSrusage {};
  template <typename, int> friend struct __BYPASSrusage;
 struct timeval ru_utime;
 struct timeval ru_stime;
 long ru_maxrss;
 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rlimit {
  template <typename, int = 0> struct __BYPASSrlimit {};
  template <typename, int> friend struct __BYPASSrlimit;
 unsigned long rlim_cur;
 unsigned long rlim_max;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int getrusage(struct task_struct *p, int who, struct rusage *ru);


struct task_io_accounting {
  template <typename, int = 0> struct __BYPASStask_io_accounting {};
  template <typename, int> friend struct __BYPASStask_io_accounting;


 u64 rchar;

 u64 wchar;

 u64 syscr;

 u64 syscw;







 u64 read_bytes;





 u64 write_bytes;
 u64 cancelled_write_bytes;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct latency_record {
  template <typename, int = 0> struct __BYPASSlatency_record {};
  template <typename, int> friend struct __BYPASSlatency_record;
 unsigned long backtrace[12];
 unsigned int count;
 unsigned long time;
 unsigned long max;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct task_struct;

void account_scheduler_latency(struct task_struct *task, int usecs, int inter);

void clear_all_latency_tracing(struct task_struct *p);



struct mem_cgroup;
struct exec_domain;
struct futex_pi_state;
struct robust_list_head;
struct bio;
extern unsigned long avenrun[];
extern unsigned long total_forks;
extern int nr_threads;
extern __typeof__(unsigned long) per_cpu__process_counts;
extern int nr_processes(void);
extern unsigned long nr_running(void);
extern unsigned long nr_uninterruptible(void);
extern unsigned long nr_active(void);
extern unsigned long nr_iowait(void);

struct seq_file;
struct cfs_rq;
struct task_group;

extern void proc_sched_show_task(struct task_struct *p, struct seq_file *m);
extern void proc_sched_set_task(struct task_struct *p);
extern void
print_cfs_rq(struct seq_file *m, int cpu, struct cfs_rq *cfs_rq);
extern unsigned long long time_sync_thresh;
extern rwlock_t tasklist_lock;
extern spinlock_t mmlist_lock;

struct task_struct;

extern void sched_init(void);
extern void sched_init_smp(void);
extern void schedule_tail(struct task_struct *prev);
extern void init_idle(struct task_struct *idle, int cpu);
extern void init_idle_bootup_task(struct task_struct *idle);

extern int runqueue_is_locked(void);

extern cpumask_t nohz_cpu_mask;

extern int select_nohz_load_balancer(int cpu);







extern unsigned long rt_needs_cpu(int cpu);




extern void show_state_filter(unsigned long state_filter);

static inline void show_state(void)
{
 show_state_filter(0);
}

extern void show_regs(struct pt_regs *);






extern void show_stack(struct task_struct *task, unsigned long *sp);

void io_schedule(void);
long io_schedule_timeout(long timeout);

extern void cpu_init (void);
extern void trap_init(void);
extern void account_process_tick(struct task_struct *task, int user);
extern void update_process_times(int user);
extern void scheduler_tick(void);
extern void hrtick_resched(void);

extern void sched_show_task(struct task_struct *p);


extern void softlockup_tick(void);
extern void touch_softlockup_watchdog(void);
extern void touch_all_softlockup_watchdogs(void);
extern unsigned int softlockup_panic;
extern unsigned long sysctl_hung_task_check_count;
extern unsigned long sysctl_hung_task_timeout_secs;
extern unsigned long sysctl_hung_task_warnings;
extern int softlockup_thresh;
extern char __sched_text_start[], __sched_text_end[];


extern int in_sched_functions(unsigned long addr);


extern signed long schedule_timeout(signed long timeout);
extern signed long schedule_timeout_interruptible(signed long timeout);
extern signed long schedule_timeout_killable(signed long timeout);
extern signed long schedule_timeout_uninterruptible(signed long timeout);
 void schedule(void);

struct nsproxy;
struct user_namespace;




extern int sysctl_max_map_count;






typedef unsigned long aio_context_t;

enum {
 IOCB_CMD_PREAD = 0,
 IOCB_CMD_PWRITE = 1,
 IOCB_CMD_FSYNC = 2,
 IOCB_CMD_FDSYNC = 3,




 IOCB_CMD_NOOP = 6,
 IOCB_CMD_PREADV = 7,
 IOCB_CMD_PWRITEV = 8,
};
struct io_event {
  template <typename, int = 0> struct __BYPASSio_event {};
  template <typename, int> friend struct __BYPASSio_event;
 __u64 data;
 __u64 obj;
 __s64 res;
 __s64 res2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iocb {
  template <typename, int = 0> struct __BYPASSiocb {};
  template <typename, int> friend struct __BYPASSiocb;

 __u64 aio_data;
 __u32 aio_key, aio_reserved1;



 __u16 aio_lio_opcode;
 __s16 aio_reqprio;
 __u32 aio_fildes;

 __u64 aio_buf;
 __u64 aio_nbytes;
 __s64 aio_offset;


 __u64 aio_reserved2;


 __u32 aio_flags;





 __u32 aio_resfd;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct kioctx;
struct kiocb {
  template <typename, int = 0> struct __BYPASSkiocb {};
  template <typename, int> friend struct __BYPASSkiocb;
 struct list_head ki_run_list;
 unsigned long ki_flags;
 int ki_users;
 unsigned ki_key;

 struct file *ki_filp;
 struct kioctx *ki_ctx;
 int (*ki_cancel)(struct kiocb *, struct io_event *);
 ssize_t (*ki_retry)(struct kiocb *);
 void (*ki_dtor)(struct kiocb *);

 union {
  void *user;
  struct task_struct *tsk;
 } ki_obj;

 __u64 ki_user_data;
 wait_queue_t ki_wait;
 loff_t ki_pos;

 void *_private;

 unsigned short ki_opcode;
 size_t ki_nbytes;
 char *ki_buf;
 size_t ki_left;
 struct iovec ki_inline_vec;
  struct iovec *ki_iovec;
  unsigned long ki_nr_segs;
  unsigned long ki_cur_seg;

 struct list_head ki_list;






 struct file *ki_eventfd;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct aio_ring {
  template <typename, int = 0> struct __BYPASSaio_ring {};
  template <typename, int> friend struct __BYPASSaio_ring;
 unsigned id;
 unsigned nr;
 unsigned head;
 unsigned tail;

 unsigned magic;
 unsigned compat_features;
 unsigned incompat_features;
 unsigned header_length;


 struct io_event io_events[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct aio_ring_info {
  template <typename, int = 0> struct __BYPASSaio_ring_info {};
  template <typename, int> friend struct __BYPASSaio_ring_info;
 unsigned long mmap_base;
 unsigned long mmap_size;

 struct page **ring_pages;
 spinlock_t ring_lock;
 long nr_pages;

 unsigned nr, tail;

 struct page *internal_pages[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kioctx {
  template <typename, int = 0> struct __BYPASSkioctx {};
  template <typename, int> friend struct __BYPASSkioctx;
 atomic_t users;
 int dead;
 struct mm_struct *mm;


 unsigned long user_id;
 struct kioctx *next;

 wait_queue_head_t wait;

 spinlock_t ctx_lock;

 int reqs_active;
 struct list_head active_reqs;
 struct list_head run_list;


 unsigned max_reqs;

 struct aio_ring_info ring_info;

 struct delayed_work wq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern unsigned aio_max_size;

extern ssize_t wait_on_sync_kiocb(struct kiocb *iocb);
extern int aio_put_req(struct kiocb *iocb);
extern void kick_iocb(struct kiocb *iocb);
extern int aio_complete(struct kiocb *iocb, long res, long res2);
struct mm_struct;
extern void exit_aio(struct mm_struct *mm);





static inline struct kiocb *list_kiocb(struct list_head *h)
{
 return ({ typeof( ((struct kiocb *)0)->ki_list ) *__mptr = (h); (struct kiocb *)( (char *)__mptr - ((size_t) &((struct kiocb *)0)->ki_list) );});
}


extern unsigned long aio_nr;
extern unsigned long aio_max_nr;

extern unsigned long
arch_get_unmapped_area(struct file *, unsigned long, unsigned long,
         unsigned long, unsigned long);
extern unsigned long
arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,
     unsigned long len, unsigned long pgoff,
     unsigned long flags);
extern void arch_unmap_area(struct mm_struct *, unsigned long);
extern void arch_unmap_area_topdown(struct mm_struct *, unsigned long);
extern void set_dumpable(struct mm_struct *mm, int value);
extern int get_dumpable(struct mm_struct *mm);
struct sighand_struct {
  template <typename, int = 0> struct __BYPASSsighand_struct {};
  template <typename, int> friend struct __BYPASSsighand_struct;
 atomic_t count;
 struct k_sigaction action[64];
 spinlock_t siglock;
 wait_queue_head_t signalfd_wqh;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pacct_struct {
  template <typename, int = 0> struct __BYPASSpacct_struct {};
  template <typename, int> friend struct __BYPASSpacct_struct;
 int ac_flag;
 long ac_exitcode;
 unsigned long ac_mem;
 cputime_t ac_utime, ac_stime;
 unsigned long ac_minflt, ac_majflt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct signal_struct {
  template <typename, int = 0> struct __BYPASSsignal_struct {};
  template <typename, int> friend struct __BYPASSsignal_struct;
 atomic_t count;
 atomic_t live;

 wait_queue_head_t wait_chldexit;


 struct task_struct *curr_target;


 struct sigpending shared_pending;


 int group_exit_code;





 struct task_struct *group_exit_task;
 int notify_count;


 int group_stop_count;
 unsigned int flags;


 struct list_head posix_timers;


 struct hrtimer real_timer;
 struct pid *leader_pid;
 ktime_t it_real_incr;


 cputime_t it_prof_expires, it_virt_expires;
 cputime_t it_prof_incr, it_virt_incr;
 union {
  pid_t pgrp ;
  pid_t __pgrp;
 };

 struct pid *tty_old_pgrp;

 union {
  pid_t session ;
  pid_t __session;
 };


 int leader;

 struct tty_struct *tty;







 cputime_t utime, stime, cutime, cstime;
 cputime_t gtime;
 cputime_t cgtime;
 unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw;
 unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 unsigned long inblock, oublock, cinblock, coublock;
 struct task_io_accounting ioac;







 unsigned long long sum_sched_runtime;
 struct rlimit rlim[16];

 struct list_head cpu_timers[3];




 struct key *session_keyring;
 struct key *process_keyring;


 struct pacct_struct pacct;


 struct taskstats *stats;


 unsigned audit_tty;
 struct tty_audit_buf *tty_audit_buf;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13signal_struct5flagsE_1205_0 {
  typedef TJP__ZN13signal_struct5flagsE_1205_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN13signal_struct5flagsE_1205(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN13signal_struct5flagsE_1205_0< unsigned int , ::signal_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13signal_struct15group_exit_taskE_1206_0 {
  typedef TJP__ZN13signal_struct15group_exit_taskE_1206_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN13signal_struct15group_exit_taskE_1206(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN13signal_struct15group_exit_taskE_1206_0< ::task_struct *, ::signal_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline int signal_group_exit( struct signal_struct *sig)
{
 return (__get__ZN13signal_struct5flagsE_1205(&sig->flags) & 0x00000008) ||
  (__get__ZN13signal_struct15group_exit_taskE_1206(&sig->group_exit_task) != 0);
}




struct user_struct {
  template <typename, int = 0> struct __BYPASSuser_struct {};
  template <typename, int> friend struct __BYPASSuser_struct;
 atomic_t __count;
 atomic_t processes;
 atomic_t files;
 atomic_t sigpending;

 atomic_t inotify_watches;
 atomic_t inotify_devs;


 atomic_t epoll_watches;



 unsigned long mq_bytes;

 unsigned long locked_shm;


 struct key *uid_keyring;
 struct key *session_keyring;



 struct hlist_node uidhash_node;
 uid_t uid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(uid_t);

extern struct user_struct root_user;


struct backing_dev_info;
struct reclaim_state;


struct sched_info {
  template <typename, int = 0> struct __BYPASSsched_info {};
  template <typename, int> friend struct __BYPASSsched_info;

 unsigned long pcount;
 unsigned long long cpu_time,
      run_delay;


 unsigned long long last_arrival,
      last_queued;


 unsigned int bkl_count;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};



extern struct file_operations proc_schedstat_operations;



struct task_delay_info {
  template <typename, int = 0> struct __BYPASStask_delay_info {};
  template <typename, int> friend struct __BYPASStask_delay_info;
 spinlock_t lock;
 unsigned int flags;
 struct timespec blkio_start, blkio_end;
 u64 blkio_delay;
 u64 swapin_delay;
 u32 blkio_count;

 u32 swapin_count;


 struct timespec freepages_start, freepages_end;
 u64 freepages_delay;
 u32 freepages_count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


static inline int sched_info_on(void)
{

 return 1;






}

enum cpu_idle_type {
 CPU_IDLE,
 CPU_NOT_IDLE,
 CPU_NEWLY_IDLE,
 CPU_MAX_IDLE_TYPES
};
struct sched_group {
  template <typename, int = 0> struct __BYPASSsched_group {};
  template <typename, int> friend struct __BYPASSsched_group;
 struct sched_group *next;
 cpumask_t cpumask;






 unsigned int __cpu_power;




 u32 reciprocal_cpu_power;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum sched_domain_level {
 SD_LV_NONE = 0,
 SD_LV_SIBLING,
 SD_LV_MC,
 SD_LV_CPU,
 SD_LV_NODE,
 SD_LV_ALLNODES,
 SD_LV_MAX
};

struct sched_domain_attr {
  template <typename, int = 0> struct __BYPASSsched_domain_attr {};
  template <typename, int> friend struct __BYPASSsched_domain_attr;
 int relax_domain_level;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct sched_domain {
  template <typename, int = 0> struct __BYPASSsched_domain {};
  template <typename, int> friend struct __BYPASSsched_domain;

 struct sched_domain *parent;
 struct sched_domain *child;
 struct sched_group *groups;
 cpumask_t span;
 unsigned long min_interval;
 unsigned long max_interval;
 unsigned int busy_factor;
 unsigned int imbalance_pct;
 unsigned int cache_nice_tries;
 unsigned int busy_idx;
 unsigned int idle_idx;
 unsigned int newidle_idx;
 unsigned int wake_idx;
 unsigned int forkexec_idx;
 int flags;
 enum sched_domain_level level;


 unsigned long last_balance;
 unsigned int balance_interval;
 unsigned int nr_balance_failed;

 u64 last_update;



 unsigned int lb_count[CPU_MAX_IDLE_TYPES];
 unsigned int lb_failed[CPU_MAX_IDLE_TYPES];
 unsigned int lb_balanced[CPU_MAX_IDLE_TYPES];
 unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES];
 unsigned int lb_gained[CPU_MAX_IDLE_TYPES];
 unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES];
 unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES];
 unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES];


 unsigned int alb_count;
 unsigned int alb_failed;
 unsigned int alb_pushed;


 unsigned int sbe_count;
 unsigned int sbe_balanced;
 unsigned int sbe_pushed;


 unsigned int sbf_count;
 unsigned int sbf_balanced;
 unsigned int sbf_pushed;


 unsigned int ttwu_wake_remote;
 unsigned int ttwu_move_affine;
 unsigned int ttwu_move_balance;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void partition_sched_domains(int ndoms_new, cpumask_t *doms_new,
        struct sched_domain_attr *dattr_new);
extern int arch_reinit_sched_domains(void);
struct io_context;


struct group_info {
  template <typename, int = 0> struct __BYPASSgroup_info {};
  template <typename, int> friend struct __BYPASSgroup_info;
 int ngroups;
 atomic_t usage;
 gid_t small_block[32];
 int nblocks;
 gid_t *blocks[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct group_info *groups_alloc(int gidsetsize);





extern int set_current_groups(struct group_info *group_info);
extern int groups_search(struct group_info *group_info, gid_t grp);







static inline void prefetch_stack(struct task_struct *t) { }


struct audit_context;
struct mempolicy;
struct pipe_inode_info;
struct uts_namespace;

struct rq;
struct sched_domain;

struct sched_class {
  template <typename, int = 0> struct __BYPASSsched_class {};
  template <typename, int> friend struct __BYPASSsched_class;
 struct sched_class *next;

 void (*enqueue_task) (struct rq *rq, struct task_struct *p, int wakeup);
 void (*dequeue_task) (struct rq *rq, struct task_struct *p, int sleep);
 void (*yield_task) (struct rq *rq);
 int (*select_task_rq)(struct task_struct *p, int sync);

 void (*check_preempt_curr) (struct rq *rq, struct task_struct *p);

 struct task_struct * (*pick_next_task) (struct rq *rq);
 void (*put_prev_task) (struct rq *rq, struct task_struct *p);


 unsigned long (*load_balance) (struct rq *this_rq, int this_cpu,
   struct rq *busiest, unsigned long max_load_move,
   struct sched_domain *sd, enum cpu_idle_type idle,
   int *all_pinned, int *this_best_prio);

 int (*move_one_task) (struct rq *this_rq, int this_cpu,
         struct rq *busiest, struct sched_domain *sd,
         enum cpu_idle_type idle);
 void (*pre_schedule) (struct rq *this_rq, struct task_struct *task);
 void (*post_schedule) (struct rq *this_rq);
 void (*task_wake_up) (struct rq *this_rq, struct task_struct *task);


 void (*set_curr_task) (struct rq *rq);
 void (*task_tick) (struct rq *rq, struct task_struct *p, int queued);
 void (*task_new) (struct rq *rq, struct task_struct *p);
 void (*set_cpus_allowed)(struct task_struct *p,
     cpumask_t *newmask);

 void (*rq_online)(struct rq *rq);
 void (*rq_offline)(struct rq *rq);

 void (*switched_from) (struct rq *this_rq, struct task_struct *task,
          int running);
 void (*switched_to) (struct rq *this_rq, struct task_struct *task,
        int running);
 void (*prio_changed) (struct rq *this_rq, struct task_struct *task,
        int oldprio, int running);


 void (*moved_group) (struct task_struct *p);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct load_weight {
  template <typename, int = 0> struct __BYPASSload_weight {};
  template <typename, int> friend struct __BYPASSload_weight;
 unsigned long weight, inv_weight;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct sched_entity {
  template <typename, int = 0> struct __BYPASSsched_entity {};
  template <typename, int> friend struct __BYPASSsched_entity;
 struct load_weight load;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 last_wakeup;
 u64 avg_overlap;


 u64 wait_start;
 u64 wait_max;
 u64 wait_count;
 u64 wait_sum;

 u64 sleep_start;
 u64 sleep_max;
 s64 sum_sleep_runtime;

 u64 block_start;
 u64 block_max;
 u64 exec_max;
 u64 slice_max;

 u64 nr_migrations;
 u64 nr_migrations_cold;
 u64 nr_failed_migrations_affine;
 u64 nr_failed_migrations_running;
 u64 nr_failed_migrations_hot;
 u64 nr_forced_migrations;
 u64 nr_forced2_migrations;

 u64 nr_wakeups;
 u64 nr_wakeups_sync;
 u64 nr_wakeups_migrate;
 u64 nr_wakeups_local;
 u64 nr_wakeups_remote;
 u64 nr_wakeups_affine;
 u64 nr_wakeups_affine_attempts;
 u64 nr_wakeups_passive;
 u64 nr_wakeups_idle;



 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sched_rt_entity {
  template <typename, int = 0> struct __BYPASSsched_rt_entity {};
  template <typename, int> friend struct __BYPASSsched_rt_entity;
 struct list_head run_list;
 unsigned int time_slice;
 unsigned long timeout;
 int nr_cpus_allowed;

 struct sched_rt_entity *back;

 struct sched_rt_entity *parent;

 struct rt_rq *rt_rq;

 struct rt_rq *my_q;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct task_struct {
  template <typename, int = 0> struct __BYPASStask_struct {};
  template <typename, int> friend struct __BYPASStask_struct;
 long state;
 void *stack;
 atomic_t usage;
 unsigned int flags;
 unsigned int ptrace;

 int lock_depth;







 int prio, static_prio, normal_prio;
 unsigned int rt_priority;
 struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;



 struct hlist_head preempt_notifiers;
 unsigned char fpu_counter;
 s8 oomkilladj;

 unsigned int btrace_seq;


 unsigned int policy;
 cpumask_t cpus_allowed;







 struct sched_info sched_info;


 struct list_head tasks;

 struct mm_struct *mm, *active_mm;


 struct linux_binfmt *binfmt;
 int exit_state;
 int exit_code, exit_signal;
 int pdeath_signal;

 unsigned int personality;
 unsigned did_exec:1;
 pid_t pid;
 pid_t tgid;
 struct task_struct *real_parent;
 struct task_struct *parent;



 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;






 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid_link pids[PIDTYPE_MAX];
 struct list_head thread_group;

 struct completion *vfork_done;
 int *set_child_tid;
 int *clear_child_tid;

 cputime_t utime, stime, utimescaled, stimescaled;
 cputime_t gtime;
 cputime_t prev_utime, prev_stime;
 unsigned long nvcsw, nivcsw;
 struct timespec start_time;
 struct timespec real_start_time;

 unsigned long min_flt, maj_flt;

   cputime_t it_prof_expires, it_virt_expires;
 unsigned long long it_sched_expires;
 struct list_head cpu_timers[3];


 uid_t uid,euid,suid,fsuid;
 gid_t gid,egid,sgid,fsgid;
 struct group_info *group_info;
 kernel_cap_t cap_effective, cap_inheritable, cap_permitted, cap_bset;
 struct user_struct *user;
 unsigned securebits;

 unsigned char jit_keyring;
 struct key *request_key_auth;
 struct key *thread_keyring;

 char comm[16];




 int link_count, total_link_count;


 struct sysv_sem sysvsem;



 unsigned long last_switch_timestamp;
 unsigned long last_switch_count;


 struct thread_struct thread;

 struct fs_struct *fs;

 struct files_struct *files;

 struct nsproxy *nsproxy;

 struct signal_struct *signal;
 struct sighand_struct *sighand;

 sigset_t blocked, real_blocked;
 sigset_t saved_sigmask;
 struct sigpending pending;

 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 int (*notifier)(void *priv);
 void *notifier_data;
 sigset_t *notifier_mask;

 void *security;

 struct audit_context *audit_context;

 uid_t loginuid;
 unsigned int sessionid;

 seccomp_t seccomp;


    u32 parent_exec_id;
    u32 self_exec_id;

 spinlock_t alloc_lock;


 spinlock_t pi_lock;



 struct plist_head pi_waiters;

 struct rt_mutex_waiter *pi_blocked_on;







 unsigned int irq_events;
 int hardirqs_enabled;
 unsigned long hardirq_enable_ip;
 unsigned int hardirq_enable_event;
 unsigned long hardirq_disable_ip;
 unsigned int hardirq_disable_event;
 int softirqs_enabled;
 unsigned long softirq_disable_ip;
 unsigned int softirq_disable_event;
 unsigned long softirq_enable_ip;
 unsigned int softirq_enable_event;
 int hardirq_context;
 int softirq_context;
 void *journal_info;


 struct bio *bio_list, **bio_tail;


 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;

 unsigned long ptrace_message;
 siginfo_t *last_siginfo;
 struct task_io_accounting ioac;

 u64 acct_rss_mem1;
 u64 acct_vm_mem1;
 cputime_t acct_timexpd;


 nodemask_t mems_allowed;
 int cpuset_mems_generation;
 int cpuset_mem_spread_rotor;



 struct css_set *cgroups;

 struct list_head cg_list;


 struct robust_list_head *robust_list;

 struct compat_robust_list_head *compat_robust_list;

 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;


 struct mempolicy *mempolicy;
 short il_next;

 atomic_t fs_excl;
 struct rcu_head rcu;

 struct list_head *scm_work_list;




 struct pipe_inode_info *splice_pipe;

 struct task_delay_info *delays;




 struct prop_local_single dirties;

 int latency_record_count;
 struct latency_record latency_record[32];


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline int rt_prio(int prio)
{
 if (__builtin_expect(!!(prio < 100), 0))
  return 1;
 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4prioE_1207_0 {
  typedef TJP__ZN11task_struct4prioE_1207_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct4prioE_1207(int *source) {
  int __result_buffer;
  typedef TJP__ZN11task_struct4prioE_1207_0< int , ::task_struct , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int rt_task(struct task_struct *p)
{
 return rt_prio(__get__ZN11task_struct4prioE_1207(&p->prio));
}

static inline void set_task_session(struct task_struct *tsk, pid_t session)
{
 tsk->signal->__session = session;
}

static inline void set_task_pgrp(struct task_struct *tsk, pid_t pgrp)
{
 tsk->signal->__pgrp = pgrp;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4pidsE_1209_0 {
  typedef TJP__ZN11task_struct4pidsE_1209_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_link __get__ZN11task_struct4pidsE_1209(pid_link *source) {
  AC::ResultBuffer< ::pid_link  > __result_buffer;
  typedef TJP__ZN11task_struct4pidsE_1209_0< ::pid_link , ::task_struct , ::pid_link  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_link &)__result_buffer;
}
static inline struct pid *task_pid(struct task_struct *task)
{
 return __get__ZN11task_struct4pidsE_1209(&task->pids[PIDTYPE_PID]).pid;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4pidsE_1212_0 {
  typedef TJP__ZN11task_struct4pidsE_1212_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_link __get__ZN11task_struct4pidsE_1212(pid_link *source) {
  AC::ResultBuffer< ::pid_link  > __result_buffer;
  typedef TJP__ZN11task_struct4pidsE_1212_0< ::pid_link , ::task_struct , ::pid_link  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_link &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct12group_leaderE_1213_0 {
  typedef TJP__ZN11task_struct12group_leaderE_1213_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct12group_leaderE_1213(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct12group_leaderE_1213_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline struct pid *task_tgid(struct task_struct *task)
{
 return __get__ZN11task_struct4pidsE_1212(&__get__ZN11task_struct12group_leaderE_1213(&task->group_leader)->pids[PIDTYPE_PID]).pid;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4pidsE_1216_0 {
  typedef TJP__ZN11task_struct4pidsE_1216_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_link __get__ZN11task_struct4pidsE_1216(pid_link *source) {
  AC::ResultBuffer< ::pid_link  > __result_buffer;
  typedef TJP__ZN11task_struct4pidsE_1216_0< ::pid_link , ::task_struct , ::pid_link  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_link &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct12group_leaderE_1217_0 {
  typedef TJP__ZN11task_struct12group_leaderE_1217_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct12group_leaderE_1217(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct12group_leaderE_1217_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline struct pid *task_pgrp(struct task_struct *task)
{
 return __get__ZN11task_struct4pidsE_1216(&__get__ZN11task_struct12group_leaderE_1217(&task->group_leader)->pids[PIDTYPE_PGID]).pid;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4pidsE_1220_0 {
  typedef TJP__ZN11task_struct4pidsE_1220_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_link __get__ZN11task_struct4pidsE_1220(pid_link *source) {
  AC::ResultBuffer< ::pid_link  > __result_buffer;
  typedef TJP__ZN11task_struct4pidsE_1220_0< ::pid_link , ::task_struct , ::pid_link  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_link &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct12group_leaderE_1221_0 {
  typedef TJP__ZN11task_struct12group_leaderE_1221_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct12group_leaderE_1221(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct12group_leaderE_1221_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline struct pid *task_session(struct task_struct *task)
{
 return __get__ZN11task_struct4pidsE_1220(&__get__ZN11task_struct12group_leaderE_1221(&task->group_leader)->pids[PIDTYPE_SID]).pid;
}

struct pid_namespace;

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct3pidE_1223_0 {
  typedef TJP__ZN11task_struct3pidE_1223_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct3pidE_1223(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct3pidE_1223_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}
static inline pid_t task_pid_nr(struct task_struct *tsk)
{
 return __get__ZN11task_struct3pidE_1223(&tsk->pid);
}

pid_t task_pid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns);

static inline pid_t task_pid_vnr(struct task_struct *tsk)
{
 return pid_vnr(task_pid(tsk));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4tgidE_1224_0 {
  typedef TJP__ZN11task_struct4tgidE_1224_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct4tgidE_1224(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct4tgidE_1224_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}
static inline pid_t task_tgid_nr(struct task_struct *tsk)
{
 return __get__ZN11task_struct4tgidE_1224(&tsk->tgid);
}

pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns);

static inline pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return pid_vnr(task_tgid(tsk));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6signalE_1226_0 {
  typedef TJP__ZN11task_struct6signalE_1226_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline signal_struct * __get__ZN11task_struct6signalE_1226(signal_struct * *source) {
  ::signal_struct *__result_buffer;
  typedef TJP__ZN11task_struct6signalE_1226_0< ::signal_struct *, ::task_struct , ::signal_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::signal_struct *&)__result_buffer;
}
static inline pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return __get__ZN11task_struct6signalE_1226(&tsk->signal)->__pgrp;
}

pid_t task_pgrp_nr_ns(struct task_struct *tsk, struct pid_namespace *ns);

static inline pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return pid_vnr(task_pgrp(tsk));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6signalE_1228_0 {
  typedef TJP__ZN11task_struct6signalE_1228_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline signal_struct * __get__ZN11task_struct6signalE_1228(signal_struct * *source) {
  ::signal_struct *__result_buffer;
  typedef TJP__ZN11task_struct6signalE_1228_0< ::signal_struct *, ::task_struct , ::signal_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::signal_struct *&)__result_buffer;
}
static inline pid_t task_session_nr(struct task_struct *tsk)
{
 return __get__ZN11task_struct6signalE_1228(&tsk->signal)->__session;
}

pid_t task_session_nr_ns(struct task_struct *tsk, struct pid_namespace *ns);

static inline pid_t task_session_vnr(struct task_struct *tsk)
{
 return pid_vnr(task_session(tsk));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4pidsE_1230_0 {
  typedef TJP__ZN11task_struct4pidsE_1230_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_link __get__ZN11task_struct4pidsE_1230(pid_link *source) {
  AC::ResultBuffer< ::pid_link  > __result_buffer;
  typedef TJP__ZN11task_struct4pidsE_1230_0< ::pid_link , ::task_struct , ::pid_link  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_link &)__result_buffer;
}
static inline int pid_alive(struct task_struct *p)
{
 return __get__ZN11task_struct4pidsE_1230(&p->pids[PIDTYPE_PID]).pid != 0;
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct3pidE_1232_0 {
  typedef TJP__ZN11task_struct3pidE_1232_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct3pidE_1232(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct3pidE_1232_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}
static inline int is_global_init(struct task_struct *tsk)
{
 return __get__ZN11task_struct3pidE_1232(&tsk->pid) == 1;
}





extern int is_container_init(struct task_struct *tsk);

extern struct pid *cad_pid;

extern void free_task(struct task_struct *tsk);


extern void __put_task_struct(struct task_struct *t);

static inline void put_task_struct(struct task_struct *t)
{




}

extern cputime_t task_utime(struct task_struct *p);
extern cputime_t task_stime(struct task_struct *p);
extern cputime_t task_gtime(struct task_struct *p);
extern int set_cpus_allowed_ptr(struct task_struct *p,
    cpumask_t *new_mask);
static inline int set_cpus_allowed(struct task_struct *p, cpumask_t new_mask)
{
 return set_cpus_allowed_ptr(p, &new_mask);
}

extern unsigned long long sched_clock(void);

extern void sched_clock_init(void);
extern u64 sched_clock_cpu(int cpu);
extern void sched_clock_tick(void);
extern void sched_clock_idle_sleep_event(void);
extern void sched_clock_idle_wakeup_event(u64 delta_ns);






extern unsigned long long cpu_clock(int cpu);

extern unsigned long long
task_sched_runtime(struct task_struct *task);



extern void sched_exec(void);




extern void sched_clock_idle_sleep_event(void);
extern void sched_clock_idle_wakeup_event(u64 delta_ns);


extern void idle_task_exit(void);




extern void sched_idle_next(void);


extern void wake_up_idle_cpu(int cpu);





extern unsigned int sysctl_sched_latency;
extern unsigned int sysctl_sched_min_granularity;
extern unsigned int sysctl_sched_wakeup_granularity;
extern unsigned int sysctl_sched_child_runs_first;
extern unsigned int sysctl_sched_features;
extern unsigned int sysctl_sched_migration_cost;
extern unsigned int sysctl_sched_nr_migrate;
extern unsigned int sysctl_sched_shares_ratelimit;

int sched_nr_latency_handler(struct ctl_table *table, int write,
  struct file *file, void *buffer, size_t *length,
  loff_t *ppos);

extern unsigned int sysctl_sched_rt_period;
extern int sysctl_sched_rt_runtime;

int sched_rt_handler(struct ctl_table *table, int write,
  struct file *filp, void *buffer, size_t *lenp,
  loff_t *ppos);

extern unsigned int sysctl_sched_compat_yield;


extern int rt_mutex_getprio(struct task_struct *p);
extern void rt_mutex_setprio(struct task_struct *p, int prio);
extern void rt_mutex_adjust_pi(struct task_struct *p);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio( struct task_struct *p);
extern int task_nice( struct task_struct *p);
extern int can_nice( struct task_struct *p, int nice);
extern int task_curr( struct task_struct *p);
extern int idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int, struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int,
          struct sched_param *);
extern struct task_struct *idle_task(int cpu);
extern struct task_struct *curr_task(int cpu);
extern void set_curr_task(int cpu, struct task_struct *p);

void yield(void);




extern struct exec_domain default_exec_domain;

union thread_union {
 struct thread_info thread_info;
 unsigned long stack[(((1UL) << 12) << 1)/sizeof(long)];
};


static inline int kstack_end(void *addr)
{



 return !(((unsigned long)addr+sizeof(void*)-1) & ((((1UL) << 12) << 1)-sizeof(void*)));
}


extern union thread_union init_thread_union;
extern struct task_struct init_task;

extern struct mm_struct init_mm;

extern struct pid_namespace init_pid_ns;
extern struct task_struct *find_task_by_pid_type_ns(int type, int pid,
  struct pid_namespace *ns);

extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr,
  struct pid_namespace *ns);

extern void __set_special_pids(struct pid *pid);


extern struct user_struct * alloc_uid(struct user_namespace *, uid_t);
static inline struct user_struct *get_uid(struct user_struct *u)
{
 ;
 return u;
}
extern void free_uid(struct user_struct *);
extern void switch_uid(struct user_struct *);
extern void release_uids(struct user_namespace *ns);



extern void do_timer(unsigned long ticks);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk,
    unsigned long clone_flags);

 extern void kick_process(struct task_struct *tsk);



extern void sched_fork(struct task_struct *p, int clone_flags);
extern void sched_dead(struct task_struct *p);

extern int in_group_p(gid_t);
extern int in_egroup_p(gid_t);

extern void proc_caches_init(void);
extern void flush_signals(struct task_struct *);
extern void ignore_signals(struct task_struct *);
extern void flush_signal_handlers(struct task_struct *, int force_default);
extern int dequeue_signal(struct task_struct *tsk, sigset_t *mask, siginfo_t *info);

static inline int dequeue_signal_lock(struct task_struct *tsk, sigset_t *mask, siginfo_t *info)
{
 unsigned long flags;
 int ret;

 ;
 ret = dequeue_signal(tsk, mask, info);
 ;

 return ret;
}

extern void block_all_signals(int (*notifier)(void *priv), void *priv,
         sigset_t *mask);
extern void unblock_all_signals(void);
extern void release_task(struct task_struct * p);
extern int send_sig_info(int, struct siginfo *, struct task_struct *);
extern int force_sigsegv(int, struct task_struct *);
extern int force_sig_info(int, struct siginfo *, struct task_struct *);
extern int __kill_pgrp_info(int sig, struct siginfo *info, struct pid *pgrp);
extern int kill_pid_info(int sig, struct siginfo *info, struct pid *pid);
extern int kill_pid_info_as_uid(int, struct siginfo *, struct pid *, uid_t, uid_t, u32);
extern int kill_pgrp(struct pid *pid, int sig, int priv);
extern int kill_pid(struct pid *pid, int sig, int priv);
extern int kill_proc_info(int, struct siginfo *, pid_t);
extern int do_notify_parent(struct task_struct *, int);
extern void force_sig(int, struct task_struct *);
extern void force_sig_specific(int, struct task_struct *);
extern int send_sig(int, struct task_struct *, int);
extern void zap_other_threads(struct task_struct *p);
extern struct sigqueue *sigqueue_alloc(void);
extern void sigqueue_free(struct sigqueue *);
extern int send_sigqueue(struct sigqueue *, struct task_struct *, int group);
extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);
extern int do_sigaltstack( stack_t *, stack_t *, unsigned long);

static inline int kill_cad_pid(int sig, int priv)
{
 return kill_pid(cad_pid, sig, priv);
}






static inline int is_si_special( struct siginfo *info)
{
 return info <= ((struct siginfo *) 2);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct9sas_ss_spE_1234_0 {
  typedef TJP__ZN11task_struct9sas_ss_spE_1234_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct9sas_ss_spE_1234(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN11task_struct9sas_ss_spE_1234_0< unsigned long int , ::task_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct11sas_ss_sizeE_1235_0 {
  typedef TJP__ZN11task_struct11sas_ss_sizeE_1235_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct11sas_ss_sizeE_1235(unsigned long int *source) {
  ::size_t __result_buffer;
  typedef TJP__ZN11task_struct11sas_ss_sizeE_1235_0< ::size_t , ::task_struct , ::size_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::size_t &)__result_buffer;
}
static inline int on_sig_stack(unsigned long sp)
{
 return (sp - __get__ZN11task_struct9sas_ss_spE_1234(&get_current()->sas_ss_sp) < __get__ZN11task_struct11sas_ss_sizeE_1235(&get_current()->sas_ss_size));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct11sas_ss_sizeE_1236_0 {
  typedef TJP__ZN11task_struct11sas_ss_sizeE_1236_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct11sas_ss_sizeE_1236(unsigned long int *source) {
  ::size_t __result_buffer;
  typedef TJP__ZN11task_struct11sas_ss_sizeE_1236_0< ::size_t , ::task_struct , ::size_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::size_t &)__result_buffer;
}
static inline int sas_ss_flags(unsigned long sp)
{
 return (__get__ZN11task_struct11sas_ss_sizeE_1236(&get_current()->sas_ss_size) == 0 ? 2
  : on_sig_stack(sp) ? 1 : 0);
}




extern struct mm_struct * mm_alloc(void);


extern void __mmdrop(struct mm_struct *);
static inline void mmdrop(struct mm_struct * mm)
{
 if (__builtin_expect(!!(1), 0))
  __mmdrop(mm);
}


extern void mmput(struct mm_struct *);

extern struct mm_struct *get_task_mm(struct task_struct *task);

extern void mm_release(struct task_struct *, struct mm_struct *);

extern struct mm_struct *dup_mm(struct task_struct *tsk);

extern int copy_thread(int, unsigned long, unsigned long, unsigned long, struct task_struct *, struct pt_regs *);
extern void flush_thread(void);
extern void exit_thread(void);

extern void exit_files(struct task_struct *);
extern void __cleanup_signal(struct signal_struct *);
extern void __cleanup_sighand(struct sighand_struct *);

extern void exit_itimers(struct signal_struct *);
extern void flush_itimer_signals(void);

extern void do_group_exit(int);

extern void daemonize( char *, ...);
extern int allow_signal(int);
extern int disallow_signal(int);

extern int do_execve(char *, char * *, char * *, struct pt_regs *);
extern long do_fork(unsigned long, unsigned long, struct pt_regs *, unsigned long, int *, int *);
struct task_struct *fork_idle(int);

extern void set_task_comm(struct task_struct *tsk, char *from);
extern char *get_task_comm(char *to, struct task_struct *tsk);


extern unsigned long wait_task_inactive(struct task_struct *, long match_state);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct3pidE_1237_0 {
  typedef TJP__ZN11task_struct3pidE_1237_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct3pidE_1237(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct3pidE_1237_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4tgidE_1238_0 {
  typedef TJP__ZN11task_struct4tgidE_1238_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct4tgidE_1238(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct4tgidE_1238_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}
static inline int has_group_leader_pid(struct task_struct *p)
{
 return __get__ZN11task_struct3pidE_1237(&p->pid) == __get__ZN11task_struct4tgidE_1238(&p->tgid);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4tgidE_1239_0 {
  typedef TJP__ZN11task_struct4tgidE_1239_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct4tgidE_1239(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct4tgidE_1239_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4tgidE_1240_0 {
  typedef TJP__ZN11task_struct4tgidE_1240_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct4tgidE_1240(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct4tgidE_1240_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}
static inline
int same_thread_group(struct task_struct *p1, struct task_struct *p2)
{
 return __get__ZN11task_struct4tgidE_1239(&p1->tgid) == __get__ZN11task_struct4tgidE_1240(&p2->tgid);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1241_0 {
  typedef TJP__ZN9list_head4nextE_1241_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1241(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1241_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct12thread_groupE_1242_0 {
  typedef TJP__ZN11task_struct12thread_groupE_1242_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head __get__ZN11task_struct12thread_groupE_1242(list_head *source) {
  AC::ResultBuffer< ::list_head  > __result_buffer;
  typedef TJP__ZN11task_struct12thread_groupE_1242_0< ::list_head , ::task_struct , ::list_head  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head &)__result_buffer;
}
static inline struct task_struct *next_thread( struct task_struct *p)
{
 return ({ typeof( ((struct task_struct *)0)->thread_group ) *__mptr = ((__get__ZN9list_head4nextE_1241(&__get__ZN11task_struct12thread_groupE_1242(&p->thread_group).next))); (struct task_struct *)( (char *)__mptr - ((size_t) &((struct task_struct *)0)->thread_group) );})
                                      ;
}

static inline int thread_group_empty(struct task_struct *p)
{
 return list_empty(&p->thread_group);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1243_0 {
  typedef TJP__ZN11task_struct5stackE_1243_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1243(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1243_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline void setup_thread_stack(struct task_struct *p, struct task_struct *org)
{
 *((struct thread_info *)(p)->stack) = *((struct thread_info *)__get__ZN11task_struct5stackE_1243(&(org)->stack));
 ((struct thread_info *)(p)->stack)->task = p;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1244_0 {
  typedef TJP__ZN11task_struct5stackE_1244_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1244(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1244_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline unsigned long *end_of_stack(struct task_struct *p)
{
 return (unsigned long *)(((struct thread_info *)__get__ZN11task_struct5stackE_1244(&(p)->stack)) + 1);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1245_0 {
  typedef TJP__ZN11task_struct5stackE_1245_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1245(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1245_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline int object_is_on_stack(void *obj)
{
 void *stack = (__get__ZN11task_struct5stackE_1245(&(get_current())->stack));

 return (obj >= stack) && (obj < (stack + (((1UL) << 12) << 1)));
}

extern void thread_info_cache_init(void);





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1246_0 {
  typedef TJP__ZN11task_struct5stackE_1246_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1246(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1246_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(((struct thread_info *)__get__ZN11task_struct5stackE_1246(&(tsk)->stack)), flag);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1247_0 {
  typedef TJP__ZN11task_struct5stackE_1247_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1247(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1247_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(((struct thread_info *)__get__ZN11task_struct5stackE_1247(&(tsk)->stack)), flag);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1248_0 {
  typedef TJP__ZN11task_struct5stackE_1248_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1248(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1248_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(((struct thread_info *)__get__ZN11task_struct5stackE_1248(&(tsk)->stack)), flag);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1249_0 {
  typedef TJP__ZN11task_struct5stackE_1249_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1249(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1249_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(((struct thread_info *)__get__ZN11task_struct5stackE_1249(&(tsk)->stack)), flag);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1250_0 {
  typedef TJP__ZN11task_struct5stackE_1250_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1250(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1250_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(((struct thread_info *)__get__ZN11task_struct5stackE_1250(&(tsk)->stack)), flag);
}

static inline void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,3);
}

static inline void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,3);
}

static inline int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,3)), 0);
}

static inline int signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(test_tsk_thread_flag(p,2)), 0);
}

extern int __fatal_signal_pending(struct task_struct *p);

static inline int fatal_signal_pending(struct task_struct *p)
{
 return signal_pending(p) && __fatal_signal_pending(p);
}

static inline int signal_pending_state(long state, struct task_struct *p)
{
 if (!(state & (1 | 128)))
  return 0;
 if (!signal_pending(p))
  return 0;

 return (state & 1) || __fatal_signal_pending(p);
}

static inline int need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 3)), 0);
}
extern int _cond_resched(void);






static inline int cond_resched(void)
{



 return 0;

}

extern int cond_resched_lock(spinlock_t * lock);
extern int cond_resched_softirq(void);
static inline int cond_resched_bkl(void)
{
 return _cond_resched();
}






static inline int spin_needbreak(spinlock_t *lock)
{



 return 0;

}







extern void recalc_sigpending_and_wake(struct task_struct *t);
extern void recalc_sigpending(void);

extern void signal_wake_up(struct task_struct *t, int resume_stopped);







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11thread_info3cpuE_1251_0 {
  typedef TJP__ZN11thread_info3cpuE_1251_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11thread_info3cpuE_1251(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN11thread_info3cpuE_1251_0< ::__u32 , ::thread_info , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1252_0 {
  typedef TJP__ZN11task_struct5stackE_1252_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1252(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1252_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline unsigned int task_cpu( struct task_struct *p)
{
 return __get__ZN11thread_info3cpuE_1251(&((struct thread_info *)__get__ZN11task_struct5stackE_1252(&(p)->stack))->cpu);
}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
extern void arch_pick_mmap_layout(struct mm_struct *mm);


extern void
__trace_special(void *__tr, void *__data,
  unsigned long arg1, unsigned long arg2, unsigned long arg3);
extern long sched_setaffinity(pid_t pid, cpumask_t *new_mask);
extern long sched_getaffinity(pid_t pid, cpumask_t *mask);

extern int sched_mc_power_savings, sched_smt_power_savings;

extern void normalize_rt_tasks(void);



extern struct task_group init_task_group;




extern struct task_group *sched_create_group(struct task_group *parent);
extern void sched_destroy_group(struct task_group *tg);
extern void sched_move_task(struct task_struct *tsk);

extern int sched_group_set_shares(struct task_group *tg, unsigned long shares);
extern unsigned long sched_group_shares(struct task_group *tg);


extern int sched_group_set_rt_runtime(struct task_group *tg,
          long rt_runtime_us);
extern long sched_group_rt_runtime(struct task_group *tg);
extern int sched_group_set_rt_period(struct task_group *tg,
          long rt_period_us);
extern long sched_group_rt_period(struct task_group *tg);




static inline void add_rchar(struct task_struct *tsk, ssize_t amt)
{
 tsk->ioac.rchar += amt;
}

static inline void add_wchar(struct task_struct *tsk, ssize_t amt)
{
 tsk->ioac.wchar += amt;
}

static inline void inc_syscr(struct task_struct *tsk)
{
 tsk->ioac.syscr++;
}

static inline void inc_syscw(struct task_struct *tsk)
{
 tsk->ioac.syscw++;
}
static inline void mm_update_next_owner(struct mm_struct *mm)
{
}

static inline void mm_init_owner(struct mm_struct *mm, struct task_struct *p)
{
}



extern int __attribute__((section(".spinlock.text"))) __reacquire_kernel_lock(void);
extern void __attribute__((section(".spinlock.text"))) __release_kernel_lock(void);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct10lock_depthE_1253_0 {
  typedef TJP__ZN11task_struct10lock_depthE_1253_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct10lock_depthE_1253(int *source) {
  int __result_buffer;
  typedef TJP__ZN11task_struct10lock_depthE_1253_0< int , ::task_struct , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int reacquire_kernel_lock(struct task_struct *task)
{
 if (__builtin_expect(!!(__get__ZN11task_struct10lock_depthE_1253(&task->lock_depth) >= 0), 0))
  return __reacquire_kernel_lock();
 return 0;
}

extern void __attribute__((section(".spinlock.text"))) lock_kernel(void) ;
extern void __attribute__((section(".spinlock.text"))) unlock_kernel(void) ;







static inline void cycle_kernel_lock(void)
{
 lock_kernel();
 unlock_kernel();
}









static inline int irq_canonicalize(int irq)
{
 return ((irq == 2) ? 9 : irq);
}
extern void fixup_irqs(cpumask_t map);


extern unsigned int do_IRQ(struct pt_regs *regs);
extern void init_IRQ(void);
extern void native_init_IRQ(void);


extern unsigned long used_vectors[(((256) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];




extern __typeof__(struct pt_regs *) per_cpu____irq_regs;


template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1254_0 {
  typedef TJP__proxy_pda_1254_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1254(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1254_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1255_0 {
  typedef TJP__proxy_pda_1255_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1255(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1255_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1256_0 {
  typedef TJP__proxy_pda_1256_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1256(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1256_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}
static inline struct pt_regs *get_irq_regs(void)
{
 return (*({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((&per_cpu____irq_regs))); (typeof((&per_cpu____irq_regs))) (__ptr + ((({ typeof(_proxy_pda.data_offset) ret__; switch (sizeof(_proxy_pda.data_offset)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (__get__proxy_pda_1254(&_proxy_pda).data_offset)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (__get__proxy_pda_1255(&_proxy_pda).data_offset)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (__get__proxy_pda_1256(&_proxy_pda).data_offset)); break; default: __bad_pda_field(); } ret__; })))); }));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1257_0 {
  typedef TJP__proxy_pda_1257_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1257(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1257_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1258_0 {
  typedef TJP__proxy_pda_1258_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1258(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1258_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1259_0 {
  typedef TJP__proxy_pda_1259_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1259(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1259_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}
static inline struct pt_regs *set_irq_regs(struct pt_regs *new_regs)
{
 struct pt_regs *old_regs, **pp_regs = &(*({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((&per_cpu____irq_regs))); (typeof((&per_cpu____irq_regs))) (__ptr + ((({ typeof(_proxy_pda.data_offset) ret__; switch (sizeof(_proxy_pda.data_offset)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (__get__proxy_pda_1257(&_proxy_pda).data_offset)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (__get__proxy_pda_1258(&_proxy_pda).data_offset)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->data_offset)), "m" (__get__proxy_pda_1259(&_proxy_pda).data_offset)); break; default: __bad_pda_field(); } ret__; })))); }));

 old_regs = *pp_regs;
 *pp_regs = new_regs;
 return old_regs;
}

struct irq_desc;
typedef void (*irq_flow_handler_t)(unsigned int irq,
         struct irq_desc *desc);
struct proc_dir_entry;
struct msi_desc;
struct irq_chip {
  template <typename, int = 0> struct __BYPASSirq_chip {};
  template <typename, int> friend struct __BYPASSirq_chip;
 char *name;
 unsigned int (*startup)(unsigned int irq);
 void (*shutdown)(unsigned int irq);
 void (*enable)(unsigned int irq);
 void (*disable)(unsigned int irq);

 void (*ack)(unsigned int irq);
 void (*mask)(unsigned int irq);
 void (*mask_ack)(unsigned int irq);
 void (*unmask)(unsigned int irq);
 void (*eoi)(unsigned int irq);

 void (*end)(unsigned int irq);
 void (*set_affinity)(unsigned int irq, cpumask_t dest);
 int (*retrigger)(unsigned int irq);
 int (*set_type)(unsigned int irq, unsigned int flow_type);
 int (*set_wake)(unsigned int irq, unsigned int on);
 char *_typename;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct irq_desc {
  template <typename, int = 0> struct __BYPASSirq_desc {};
  template <typename, int> friend struct __BYPASSirq_desc;
 irq_flow_handler_t handle_irq;
 struct irq_chip *chip;
 struct msi_desc *msi_desc;
 void *handler_data;
 void *chip_data;
 struct irqaction *action;
 unsigned int status;

 unsigned int depth;
 unsigned int wake_depth;
 unsigned int irq_count;
 unsigned int irqs_unhandled;
 unsigned long last_unhandled;
 spinlock_t lock;

 cpumask_t affinity;
 unsigned int cpu;


 cpumask_t pending_mask;


 struct proc_dir_entry *dir;

 char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(1 << ((7)))));

extern struct irq_desc irq_desc[(256 + (32 * 64))];





typedef struct irq_chip hw_irq_controller;

typedef struct irq_desc irq_desc_t;










struct proc_dir_entry;
struct pt_regs;
struct notifier_block;


void create_prof_cpu_mask(struct proc_dir_entry *de);






enum profile_type {
 PROFILE_TASK_EXIT,
 PROFILE_MUNMAP
};



extern int prof_on __attribute__((__section__(".data.read_mostly")));


void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) profile_init(void);
void profile_tick(int type);




void profile_hits(int type, void *ip, unsigned int nr_hits);




static inline void profile_hit(int type, void *ip)
{



 if (__builtin_expect(!!(prof_on == type), 0))
  profile_hits(type, ip, 1);
}

struct task_struct;
struct mm_struct;


void profile_task_exit(struct task_struct * task);




int profile_handoff_task(struct task_struct * task);


void profile_munmap(unsigned long addr);

int task_handoff_register(struct notifier_block * n);
int task_handoff_unregister(struct notifier_block * n);

int profile_event_register(enum profile_type, struct notifier_block * n);
int profile_event_unregister(enum profile_type, struct notifier_block * n);

int register_timer_hook(int (*hook)(struct pt_regs *));
void unregister_timer_hook(int (*hook)(struct pt_regs *));

struct pt_regs;








extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char _end[];
extern char __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __initdata_begin[], __initdata_end[];
extern char __start_rodata[], __end_rodata[];




extern void apic_timer_interrupt(void);
extern void error_interrupt(void);
extern void spurious_interrupt(void);
extern void thermal_interrupt(void);
extern void reschedule_interrupt(void);

extern void invalidate_interrupt(void);
extern void invalidate_interrupt0(void);
extern void invalidate_interrupt1(void);
extern void invalidate_interrupt2(void);
extern void invalidate_interrupt3(void);
extern void invalidate_interrupt4(void);
extern void invalidate_interrupt5(void);
extern void invalidate_interrupt6(void);
extern void invalidate_interrupt7(void);

extern void irq_move_cleanup_interrupt(void);
extern void threshold_interrupt(void);

extern void call_function_interrupt(void);
extern void call_function_single_interrupt(void);


extern void disable_8259A_irq(unsigned int irq);
extern void enable_8259A_irq(unsigned int irq);
extern int i8259A_irq_pending(unsigned int irq);
extern void make_8259A_irq(unsigned int irq);
extern void init_8259A(int aeoi);



extern unsigned long io_apic_irqs;

extern void init_VISWS_APIC_irqs(void);
extern void setup_IO_APIC(void);
extern void disable_IO_APIC(void);
extern void print_IO_APIC(void);
extern int IO_APIC_get_PCI_irq_vector(int bus, int slot, int fn);
extern void setup_ioapic_dest(void);


extern void enable_IO_APIC(void);



extern void send_IPI_self(int vector);
extern void send_IPI(int dest, int vector);


extern atomic_t irq_err_count;
extern atomic_t irq_mis_count;


extern void eisa_set_level_irq(unsigned int irq);


extern void vic_cpi_interrupt(void);
extern void vic_sys_interrupt(void);
extern void vic_cmn_interrupt(void);
extern void qic_timer_interrupt(void);
extern void qic_invalidate_interrupt(void);
extern void qic_reschedule_interrupt(void);
extern void qic_enable_irq_interrupt(void);
extern void qic_call_function_interrupt(void);




typedef int vector_irq_t[256];
extern __typeof__(vector_irq_t) per_cpu__vector_irq;



extern void lock_vector_lock(void);
extern void unlock_vector_lock(void);
extern void __setup_vector_irq(int cpu);

extern int setup_irq(unsigned int irq, struct irqaction *_new);
void set_pending_irq(unsigned int irq, cpumask_t mask);
void move_native_irq(int irq);
void move_masked_irq(int irq);
static inline void set_balance_irq_affinity(unsigned int irq, cpumask_t mask)
{
}


extern int no_irq_affinity;

static inline int irq_balancing_disabled(unsigned int irq)
{
 return irq_desc[irq].status & 0x00400000;
}


extern int handle_IRQ_event(unsigned int irq, struct irqaction *action);





extern void handle_level_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_fasteoi_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_edge_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_simple_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_percpu_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_bad_irq(unsigned int irq, struct irq_desc *desc);





extern unsigned int __do_IRQ(unsigned int irq);
static inline void generic_handle_irq(unsigned int irq)
{
 struct irq_desc *desc = irq_desc + irq;




 if (__builtin_expect(!!(desc->handle_irq), 1))
  desc->handle_irq(irq, desc);
 else
  __do_IRQ(irq);

}


extern void note_interrupt(unsigned int irq, struct irq_desc *desc,
      int action_ret);


void check_irq_resend(struct irq_desc *desc, unsigned int irq);


extern int noirqdebug_setup(char *str);


extern int can_request_irq(unsigned int irq, unsigned long irqflags);


extern struct irq_chip no_irq_chip;
extern struct irq_chip dummy_irq_chip;

extern void
set_irq_chip_and_handler(unsigned int irq, struct irq_chip *chip,
    irq_flow_handler_t handle);
extern void
set_irq_chip_and_handler_name(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle, char *name);

extern void
__set_irq_handler(unsigned int irq, irq_flow_handler_t handle, int is_chained,
    char *name);


static inline void __set_irq_handler_unlocked(int irq,
           irq_flow_handler_t handler)
{
 irq_desc[irq].handle_irq = handler;
}




static inline void
set_irq_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __set_irq_handler(irq, handle, 0, 0);
}






static inline void
set_irq_chained_handler(unsigned int irq,
   irq_flow_handler_t handle)
{
 __set_irq_handler(irq, handle, 1, 0);
}

extern void set_irq_noprobe(unsigned int irq);
extern void set_irq_probe(unsigned int irq);


extern int create_irq(void);
extern void destroy_irq(unsigned int irq);


static inline int irq_has_action(unsigned int irq)
{
 struct irq_desc *desc = irq_desc + irq;
 return desc->action != 0;
}


extern void dynamic_irq_init(unsigned int irq);
extern void dynamic_irq_cleanup(unsigned int irq);


extern int set_irq_chip(unsigned int irq, struct irq_chip *chip);
extern int set_irq_data(unsigned int irq, void *data);
extern int set_irq_chip_data(unsigned int irq, void *data);
extern int set_irq_type(unsigned int irq, unsigned int type);
extern int set_irq_msi(unsigned int irq, struct msi_desc *entry);
extern void ack_bad_irq(unsigned int irq);


extern u64 arch_irq_stat_cpu(unsigned int cpu);


extern u64 arch_irq_stat(void);
extern void synchronize_irq(unsigned int irq);




struct task_struct;


static inline void account_system_vtime(struct task_struct *tsk)
{
}
extern void irq_enter(void);
extern void irq_exit(void);


typedef irqreturn_t (*irq_handler_t)(int, void *);

struct irqaction {
  template <typename, int = 0> struct __BYPASSirqaction {};
  template <typename, int> friend struct __BYPASSirqaction;
 irq_handler_t handler;
 unsigned long flags;
 cpumask_t mask;
 char *name;
 void *dev_id;
 struct irqaction *next;
 int irq;
 struct proc_dir_entry *dir;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern irqreturn_t no_action(int cpl, void *dev_id);
extern int __attribute__((warn_unused_result)) request_irq(unsigned int, irq_handler_t handler,
         unsigned long, char *, void *);
extern void free_irq(unsigned int, void *);

struct device;

extern int __attribute__((warn_unused_result)) devm_request_irq(struct device *dev, unsigned int irq,
       irq_handler_t handler, unsigned long irqflags,
       char *devname, void *dev_id);
extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
extern void disable_irq_nosync(unsigned int irq);
extern void disable_irq(unsigned int irq);
extern void enable_irq(unsigned int irq);



extern cpumask_t irq_default_affinity;

extern int irq_set_affinity(unsigned int irq, cpumask_t cpumask);
extern int irq_can_set_affinity(unsigned int irq);
extern int irq_select_affinity(unsigned int irq);
static inline void disable_irq_nosync_lockdep(unsigned int irq)
{
 disable_irq_nosync(irq);



}

static inline void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
{
 disable_irq_nosync(irq);



}

static inline void disable_irq_lockdep(unsigned int irq)
{
 disable_irq(irq);



}

static inline void enable_irq_lockdep(unsigned int irq)
{



 enable_irq(irq);
}

static inline void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
{



 enable_irq(irq);
}


extern int set_irq_wake(unsigned int irq, unsigned int on);

static inline int enable_irq_wake(unsigned int irq)
{
 return set_irq_wake(irq, 1);
}

static inline int disable_irq_wake(unsigned int irq)
{
 return set_irq_wake(irq, 0);
}
enum
{
 HI_SOFTIRQ=0,
 TIMER_SOFTIRQ,
 NET_TX_SOFTIRQ,
 NET_RX_SOFTIRQ,
 BLOCK_SOFTIRQ,
 TASKLET_SOFTIRQ,
 SCHED_SOFTIRQ,

 HRTIMER_SOFTIRQ,

 RCU_SOFTIRQ,
};





struct softirq_action
{
  template <typename, int = 0> struct __BYPASSsoftirq_action {};
  template <typename, int> friend struct __BYPASSsoftirq_action;
 void (*action)(struct softirq_action *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

 void do_softirq(void);
 void __do_softirq(void);
extern void open_softirq(int nr, void (*action)(struct softirq_action *));
extern void softirq_init(void);

extern void raise_softirq_irqoff(unsigned int nr);
extern void raise_softirq(unsigned int nr);
struct tasklet_struct
{
  template <typename, int = 0> struct __BYPASStasklet_struct {};
  template <typename, int> friend struct __BYPASStasklet_struct;
 struct tasklet_struct *next;
 unsigned long state;
 atomic_t count;
 void (*func)(unsigned long);
 unsigned long data;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum
{
 TASKLET_STATE_SCHED,
 TASKLET_STATE_RUN
};


static inline int tasklet_trylock(struct tasklet_struct *t)
{
 return !test_and_set_bit(TASKLET_STATE_RUN, &(t)->state);
}

static inline void tasklet_unlock(struct tasklet_struct *t)
{
 __asm__ __volatile__("": : :"memory");
 clear_bit(TASKLET_STATE_RUN, &(t)->state);
}

static inline void tasklet_unlock_wait(struct tasklet_struct *t)
{
 while ((__builtin_constant_p((TASKLET_STATE_RUN)) ? constant_test_bit((TASKLET_STATE_RUN), (&(t)->state)) : variable_test_bit((TASKLET_STATE_RUN), (&(t)->state)))) { __asm__ __volatile__("": : :"memory"); }
}






extern void __tasklet_schedule(struct tasklet_struct *t);

static inline void tasklet_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_schedule(t);
}

extern void __tasklet_hi_schedule(struct tasklet_struct *t);

static inline void tasklet_hi_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule(t);
}


static inline void tasklet_disable_nosync(struct tasklet_struct *t)
{
 ;
 __asm__ __volatile__("": : :"memory");
}

static inline void tasklet_disable(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_wait(t);
 ;
}

static inline void tasklet_enable(struct tasklet_struct *t)
{
 __asm__ __volatile__("": : :"memory");
 ;
}

static inline void tasklet_hi_enable(struct tasklet_struct *t)
{
 __asm__ __volatile__("": : :"memory");
 ;
}

extern void tasklet_kill(struct tasklet_struct *t);
extern void tasklet_kill_immediate(struct tasklet_struct *t, unsigned int cpu);
extern void tasklet_init(struct tasklet_struct *t,
    void (*func)(unsigned long), unsigned long data);
extern unsigned long probe_irq_on(void);
extern int probe_irq_off(unsigned long);
extern unsigned int probe_irq_mask(unsigned long);




extern void init_irq_proc(void);






int show_interrupts(struct seq_file *p, void *v);


extern rwlock_t dev_base_lock;

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1275_0 {
  typedef TJP__ZN9list_head4nextE_1275_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1275(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1275_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8dev_listE_1276_0 {
  typedef TJP__ZN10net_device8dev_listE_1276_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head __get__ZN10net_device8dev_listE_1276(list_head *source) {
  AC::ResultBuffer< ::list_head  > __result_buffer;
  typedef TJP__ZN10net_device8dev_listE_1276_0< ::list_head , ::net_device , ::list_head  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head &)__result_buffer;
}
static inline struct net_device *next_net_device(struct net_device *dev)
{
 struct list_head *lh;
 struct net *net;

 net = dev_net(dev);
 lh = __get__ZN9list_head4nextE_1275(&__get__ZN10net_device8dev_listE_1276(&dev->dev_list).next);
 return lh == &net->dev_base_head ? 0 : ({ typeof( ((struct net_device *)0)->dev_list ) *__mptr = (lh); (struct net_device *)( (char *)__mptr - ((size_t) &((struct net_device *)0)->dev_list) );});
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1277_0 {
  typedef TJP__ZN9list_head4nextE_1277_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1277(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1277_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net13dev_base_headE_1278_0 {
  typedef TJP__ZN3net13dev_base_headE_1278_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head __get__ZN3net13dev_base_headE_1278(list_head *source) {
  AC::ResultBuffer< ::list_head  > __result_buffer;
  typedef TJP__ZN3net13dev_base_headE_1278_0< ::list_head , ::net , ::list_head  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head &)__result_buffer;
}
static inline struct net_device *first_net_device(struct net *net)
{
 return list_empty(&net->dev_base_head) ? 0 :
  ({ typeof( ((struct net_device *)0)->dev_list ) *__mptr = (__get__ZN9list_head4nextE_1277(&__get__ZN3net13dev_base_headE_1278(&net->dev_base_head).next)); (struct net_device *)( (char *)__mptr - ((size_t) &((struct net_device *)0)->dev_list) );});
}

extern int netdev_boot_setup_check(struct net_device *dev);
extern unsigned long netdev_boot_base( char *prefix, int unit);
extern struct net_device *dev_getbyhwaddr(struct net *net, unsigned short type, char *hwaddr);
extern struct net_device *dev_getfirstbyhwtype(struct net *net, unsigned short type);
extern struct net_device *__dev_getfirstbyhwtype(struct net *net, unsigned short type);
extern void dev_add_pack(struct packet_type *pt);
extern void dev_remove_pack(struct packet_type *pt);
extern void __dev_remove_pack(struct packet_type *pt);

extern struct net_device *dev_get_by_flags(struct net *net, unsigned short flags,
        unsigned short mask);
extern struct net_device *dev_get_by_name(struct net *net, char *name);
extern struct net_device *__dev_get_by_name(struct net *net, char *name);
extern int dev_alloc_name(struct net_device *dev, char *name);
extern int dev_open(struct net_device *dev);
extern int dev_close(struct net_device *dev);
extern void dev_disable_lro(struct net_device *dev);
extern int dev_queue_xmit(struct sk_buff *skb);
extern int register_netdevice(struct net_device *dev);
extern void unregister_netdevice(struct net_device *dev);
extern void free_netdev(struct net_device *dev);
extern void synchronize_net(void);
extern int register_netdevice_notifier(struct notifier_block *nb);
extern int unregister_netdevice_notifier(struct notifier_block *nb);
extern int call_netdevice_notifiers(unsigned long val, struct net_device *dev);
extern struct net_device *dev_get_by_index(struct net *net, int ifindex);
extern struct net_device *__dev_get_by_index(struct net *net, int ifindex);
extern int dev_restart(struct net_device *dev);

extern int netpoll_trap(void);



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_1279_0 {
  typedef TJP__ZN10net_device10header_opsE_1279_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_1279(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_1279_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_1281_0 {
  typedef TJP__ZN10net_device10header_opsE_1281_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_1281(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_1281_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_1283_0 {
  typedef TJP__ZN10net_device10header_opsE_1283_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_1283(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_1283_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}
static inline int dev_hard_header(struct sk_buff *skb, struct net_device *dev,
      unsigned short type,
      void *daddr, void *saddr,
      unsigned len)
{
 if (!__get__ZN10net_device10header_opsE_1279(&dev->header_ops) || !__get__ZN10net_device10header_opsE_1281(&dev->header_ops)->create)
  return 0;

 return __get__ZN10net_device10header_opsE_1283(&dev->header_ops)->create(skb, dev, type, daddr, saddr, len);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_1285_0 {
  typedef TJP__ZN10net_device10header_opsE_1285_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_1285(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_1285_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_1287_0 {
  typedef TJP__ZN10net_device10header_opsE_1287_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_1287(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_1287_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_1289_0 {
  typedef TJP__ZN10net_device10header_opsE_1289_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_1289(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_1289_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}
static inline int dev_parse_header( struct sk_buff *skb,
       unsigned char *haddr)
{
 struct net_device *dev = skb->dev;

 if (!__get__ZN10net_device10header_opsE_1285(&dev->header_ops) || !__get__ZN10net_device10header_opsE_1287(&dev->header_ops)->parse)
  return 0;
 return __get__ZN10net_device10header_opsE_1289(&dev->header_ops)->parse(skb, haddr);
}

typedef int gifconf_func_t(struct net_device * dev, char * bufptr, int len);
extern int register_gifconf(unsigned int family, gifconf_func_t * gifconf);
static inline int unregister_gifconf(unsigned int family)
{
 return register_gifconf(family, 0);
}





struct softnet_data
{
  template <typename, int = 0> struct __BYPASSsoftnet_data {};
  template <typename, int> friend struct __BYPASSsoftnet_data;
 struct Qdisc *output_queue;
 struct sk_buff_head input_pkt_queue;
 struct list_head poll_list;
 struct sk_buff *completion_queue;

 struct napi_struct backlog;

 struct dma_chan *net_dma;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern __typeof__(struct softnet_data) per_cpu__softnet_data;



extern void __netif_schedule(struct Qdisc *q);

static inline void netif_schedule_queue(struct netdev_queue *txq)
{
 if (!(__builtin_constant_p((__QUEUE_STATE_XOFF)) ? constant_test_bit((__QUEUE_STATE_XOFF), (&txq->state)) : variable_test_bit((__QUEUE_STATE_XOFF), (&txq->state))))
  __netif_schedule(txq->qdisc);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_1294_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_1294_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_1294(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_1294_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_schedule_all(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_1294(&dev->num_tx_queues); i++)
  netif_schedule_queue(netdev_get_tx_queue(dev, i));
}

static inline void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
 clear_bit(__QUEUE_STATE_XOFF, &dev_queue->state);
}







static inline void netif_start_queue(struct net_device *dev)
{
 netif_tx_start_queue(netdev_get_tx_queue(dev, 0));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_1296_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_1296_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_1296(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_1296_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_start_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_1296(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_start_queue(txq);
 }
}

static inline void netif_tx_wake_queue(struct netdev_queue *dev_queue)
{

 if (netpoll_trap()) {
  clear_bit(__QUEUE_STATE_XOFF, &dev_queue->state);
  return;
 }

 if (test_and_clear_bit(__QUEUE_STATE_XOFF, &dev_queue->state))
  __netif_schedule(dev_queue->qdisc);
}
static inline void netif_wake_queue(struct net_device *dev)
{
 netif_tx_wake_queue(netdev_get_tx_queue(dev, 0));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_1300_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_1300_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_1300(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_1300_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_wake_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_1300(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_wake_queue(txq);
 }
}

static inline void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
 set_bit(__QUEUE_STATE_XOFF, &dev_queue->state);
}
static inline void netif_stop_queue(struct net_device *dev)
{
 netif_tx_stop_queue(netdev_get_tx_queue(dev, 0));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_1302_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_1302_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_1302(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_1302_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_stop_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_1302(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_stop_queue(txq);
 }
}

static inline int netif_tx_queue_stopped( struct netdev_queue *dev_queue)
{
 return (__builtin_constant_p((__QUEUE_STATE_XOFF)) ? constant_test_bit((__QUEUE_STATE_XOFF), (&dev_queue->state)) : variable_test_bit((__QUEUE_STATE_XOFF), (&dev_queue->state)));
}







static inline int netif_queue_stopped( struct net_device *dev)
{
 return netif_tx_queue_stopped(netdev_get_tx_queue(dev, 0));
}

static inline int netif_tx_queue_frozen( struct netdev_queue *dev_queue)
{
 return (__builtin_constant_p((__QUEUE_STATE_FROZEN)) ? constant_test_bit((__QUEUE_STATE_FROZEN), (&dev_queue->state)) : variable_test_bit((__QUEUE_STATE_FROZEN), (&dev_queue->state)));
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_1309_0 {
  typedef TJP__ZN10net_device5stateE_1309_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_1309(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_1309_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int netif_running( struct net_device *dev)
{


        unsigned long state = __get__ZN10net_device5stateE_1309(&dev->state);
        return (__builtin_constant_p((__LINK_STATE_START)) ? constant_test_bit((__LINK_STATE_START), (&state)) : variable_test_bit((__LINK_STATE_START), (&state)));



}
static inline void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);
 clear_bit(__QUEUE_STATE_XOFF, &txq->state);
}
static inline void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 if (netpoll_trap())
  return;

 set_bit(__QUEUE_STATE_XOFF, &txq->state);
}
static inline int __netif_subqueue_stopped( struct net_device *dev,
      u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);
 return (__builtin_constant_p((__QUEUE_STATE_XOFF)) ? constant_test_bit((__QUEUE_STATE_XOFF), (&txq->state)) : variable_test_bit((__QUEUE_STATE_XOFF), (&txq->state)));
}

static inline int netif_subqueue_stopped( struct net_device *dev,
      struct sk_buff *skb)
{
 return __netif_subqueue_stopped(dev, skb_get_queue_mapping(skb));
}
static inline void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 if (netpoll_trap())
  return;

 if (test_and_clear_bit(__QUEUE_STATE_XOFF, &txq->state))
  __netif_schedule(txq->qdisc);
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_1320_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_1320_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_1320(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_1320_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int netif_is_multiqueue( struct net_device *dev)
{
 return (__get__ZN10net_device13num_tx_queuesE_1320(&dev->num_tx_queues) > 1);
}





extern void dev_kfree_skb_irq(struct sk_buff *skb);





extern void dev_kfree_skb_any(struct sk_buff *skb);


extern int netif_rx(struct sk_buff *skb);
extern int netif_rx_ni(struct sk_buff *skb);

extern int netif_receive_skb(struct sk_buff *skb);
extern void netif_nit_deliver(struct sk_buff *skb);
extern int dev_valid_name( char *name);
extern int dev_ioctl(struct net *net, unsigned int cmd, void *);
extern int dev_ethtool(struct net *net, struct ifreq *);
extern unsigned dev_get_flags( struct net_device *);
extern int dev_change_flags(struct net_device *, unsigned);
extern int dev_change_name(struct net_device *, char *);
extern int dev_change_net_namespace(struct net_device *,
       struct net *, char *);
extern int dev_set_mtu(struct net_device *, int);
extern int dev_set_mac_address(struct net_device *,
         struct sockaddr *);
extern int dev_hard_start_xmit(struct sk_buff *skb,
         struct net_device *dev,
         struct netdev_queue *txq);

extern int netdev_budget;


extern void netdev_run_todo(void);







static inline void dev_put(struct net_device *dev)
{
 ;
}







static inline void dev_hold(struct net_device *dev)
{
 ;
}
extern void linkwatch_fire_event(struct net_device *dev);








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_1321_0 {
  typedef TJP__ZN10net_device5stateE_1321_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_1321(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_1321_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int netif_carrier_ok( struct net_device *dev)
{

        unsigned long state = __get__ZN10net_device5stateE_1321(&dev->state);
 return !(__builtin_constant_p((__LINK_STATE_NOCARRIER)) ? constant_test_bit((__LINK_STATE_NOCARRIER), (&state)) : variable_test_bit((__LINK_STATE_NOCARRIER), (&state)));



}

extern void __netdev_watchdog_up(struct net_device *dev);

extern void netif_carrier_on(struct net_device *dev);

extern void netif_carrier_off(struct net_device *dev);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_1325_0 {
  typedef TJP__ZN10net_device5stateE_1325_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_1325(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_1325_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void netif_dormant_on(struct net_device *dev)
{

        unsigned long state = __get__ZN10net_device5stateE_1325(&dev->state);
 if (!test_and_set_bit(__LINK_STATE_DORMANT, &state))
  linkwatch_fire_event(dev);




}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_1327_0 {
  typedef TJP__ZN10net_device5stateE_1327_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_1327(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_1327_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void netif_dormant_off(struct net_device *dev)
{

        unsigned long state = __get__ZN10net_device5stateE_1327(&dev->state);
 if (test_and_clear_bit(__LINK_STATE_DORMANT, &state))
  linkwatch_fire_event(dev);




}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_1329_0 {
  typedef TJP__ZN10net_device5stateE_1329_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_1329(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_1329_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int netif_dormant( struct net_device *dev)
{

        unsigned long state = __get__ZN10net_device5stateE_1329(&dev->state);
 return (__builtin_constant_p((__LINK_STATE_DORMANT)) ? constant_test_bit((__LINK_STATE_DORMANT), (&state)) : variable_test_bit((__LINK_STATE_DORMANT), (&state)));



}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device9operstateE_1333_0 {
  typedef TJP__ZN10net_device9operstateE_1333_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device9operstateE_1333(unsigned char *source) {
  unsigned char __result_buffer;
  typedef TJP__ZN10net_device9operstateE_1333_0< unsigned char , ::net_device , unsigned char  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device9operstateE_1335_0 {
  typedef TJP__ZN10net_device9operstateE_1335_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device9operstateE_1335(unsigned char *source) {
  unsigned char __result_buffer;
  typedef TJP__ZN10net_device9operstateE_1335_0< unsigned char , ::net_device , unsigned char  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char &)__result_buffer;
}
static inline int netif_oper_up( struct net_device *dev) {
 return (__get__ZN10net_device9operstateE_1333(&dev->operstate) == IF_OPER_UP ||
  __get__ZN10net_device9operstateE_1335(&dev->operstate) == IF_OPER_UNKNOWN );
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_1337_0 {
  typedef TJP__ZN10net_device5stateE_1337_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_1337(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_1337_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int netif_device_present(struct net_device *dev)
{
        unsigned long state = __get__ZN10net_device5stateE_1337(&dev->state);
 return (__builtin_constant_p((__LINK_STATE_PRESENT)) ? constant_test_bit((__LINK_STATE_PRESENT), (&state)) : variable_test_bit((__LINK_STATE_PRESENT), (&state)));
}

extern void netif_device_detach(struct net_device *dev);

extern void netif_device_attach(struct net_device *dev);






enum {
 NETIF_MSG_DRV = 0x0001,
 NETIF_MSG_PROBE = 0x0002,
 NETIF_MSG_LINK = 0x0004,
 NETIF_MSG_TIMER = 0x0008,
 NETIF_MSG_IFDOWN = 0x0010,
 NETIF_MSG_IFUP = 0x0020,
 NETIF_MSG_RX_ERR = 0x0040,
 NETIF_MSG_TX_ERR = 0x0080,
 NETIF_MSG_TX_QUEUED = 0x0100,
 NETIF_MSG_INTR = 0x0200,
 NETIF_MSG_TX_DONE = 0x0400,
 NETIF_MSG_RX_STATUS = 0x0800,
 NETIF_MSG_PKTDATA = 0x1000,
 NETIF_MSG_HW = 0x2000,
 NETIF_MSG_WOL = 0x4000,
};
static inline u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{

 if (debug_value < 0 || debug_value >= (sizeof(u32) * 8))
  return default_msg_enable_bits;
 if (debug_value == 0)
  return 0;

 return (1 << debug_value) - 1;
}


static inline int netif_rx_schedule_prep(struct net_device *dev,
      struct napi_struct *napi)
{
 return napi_schedule_prep(napi);
}




static inline void __netif_rx_schedule(struct net_device *dev,
           struct napi_struct *napi)
{
 __napi_schedule(napi);
}



static inline void netif_rx_schedule(struct net_device *dev,
         struct napi_struct *napi)
{
 if (netif_rx_schedule_prep(dev, napi))
  __netif_rx_schedule(dev, napi);
}


static inline int netif_rx_reschedule(struct net_device *dev,
          struct napi_struct *napi)
{
 if (napi_schedule_prep(napi)) {
  __netif_rx_schedule(dev, napi);
  return 1;
 }
 return 0;
}




static inline void __netif_rx_complete(struct net_device *dev,
           struct napi_struct *napi)
{
 __napi_complete(napi);
}






static inline void netif_rx_complete(struct net_device *dev,
         struct napi_struct *napi)
{
 unsigned long flags;

 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); do { (flags) = __raw_local_irq_save(); } while (0); trace_hardirqs_off(); } while (0);
 __netif_rx_complete(dev, napi);
 do { ({ unsigned long __dummy; typeof(flags) __dummy2; (void)(&__dummy == &__dummy2); 1; }); if (raw_irqs_disabled_flags(flags)) { raw_local_irq_restore(flags); trace_hardirqs_off(); } else { trace_hardirqs_on(); raw_local_irq_restore(flags); } } while (0);
}

static inline void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
 ;
 txq->xmit_lock_owner = cpu;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1341_0 {
  typedef TJP__proxy_pda_1341_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1341(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1341_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1342_0 {
  typedef TJP__proxy_pda_1342_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1342(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1342_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1343_0 {
  typedef TJP__proxy_pda_1343_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1343(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1343_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}
static inline void __netif_tx_lock_bh(struct netdev_queue *txq)
{
 ;
 txq->xmit_lock_owner = ({ typeof(_proxy_pda.cpunumber) ret__; switch (sizeof(_proxy_pda.cpunumber)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1341(&_proxy_pda).cpunumber)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1342(&_proxy_pda).cpunumber)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1343(&_proxy_pda).cpunumber)); break; default: __bad_pda_field(); } ret__; });
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1344_0 {
  typedef TJP__proxy_pda_1344_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1344(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1344_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1345_0 {
  typedef TJP__proxy_pda_1345_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1345(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1345_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1346_0 {
  typedef TJP__proxy_pda_1346_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1346(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1346_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}
static inline int __netif_tx_trylock(struct netdev_queue *txq)
{
 int ok = 1;
 if (__builtin_expect(!!(ok), 1))
  txq->xmit_lock_owner = ({ typeof(_proxy_pda.cpunumber) ret__; switch (sizeof(_proxy_pda.cpunumber)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1344(&_proxy_pda).cpunumber)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1345(&_proxy_pda).cpunumber)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1346(&_proxy_pda).cpunumber)); break; default: __bad_pda_field(); } ret__; });
 return ok;
}

static inline void __netif_tx_unlock(struct netdev_queue *txq)
{
 txq->xmit_lock_owner = -1;
 ;
}

static inline void __netif_tx_unlock_bh(struct netdev_queue *txq)
{
 txq->xmit_lock_owner = -1;
 ;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1347_0 {
  typedef TJP__proxy_pda_1347_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1347(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1347_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1348_0 {
  typedef TJP__proxy_pda_1348_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1348(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1348_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1349_0 {
  typedef TJP__proxy_pda_1349_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1349(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1349_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_1350_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_1350_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_1350(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_1350_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_lock(struct net_device *dev)
{
 unsigned int i;
 int cpu;

 ;
 cpu = ({ typeof(_proxy_pda.cpunumber) ret__; switch (sizeof(_proxy_pda.cpunumber)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1347(&_proxy_pda).cpunumber)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1348(&_proxy_pda).cpunumber)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1349(&_proxy_pda).cpunumber)); break; default: __bad_pda_field(); } ret__; });
 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_1350(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);







  __netif_tx_lock(txq, cpu);
  set_bit(__QUEUE_STATE_FROZEN, &txq->state);
  __netif_tx_unlock(txq);
 }
}

static inline void netif_tx_lock_bh(struct net_device *dev)
{
 local_bh_disable();
 netif_tx_lock(dev);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_1352_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_1352_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_1352(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_1352_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_unlock(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_1352(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);





  clear_bit(__QUEUE_STATE_FROZEN, &txq->state);
  if (!(__builtin_constant_p((__QUEUE_STATE_XOFF)) ? constant_test_bit((__QUEUE_STATE_XOFF), (&txq->state)) : variable_test_bit((__QUEUE_STATE_XOFF), (&txq->state))))
   __netif_schedule(txq->qdisc);
 }
 ;
}

static inline void netif_tx_unlock_bh(struct net_device *dev)
{
 netif_tx_unlock(dev);
 local_bh_enable();
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1358_0 {
  typedef TJP__proxy_pda_1358_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1358(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1358_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1359_0 {
  typedef TJP__proxy_pda_1359_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1359(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1359_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__proxy_pda_1360_0 {
  typedef TJP__proxy_pda_1360_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline x8664_pda __get__proxy_pda_1360(x8664_pda *source) {
  AC::ResultBuffer< ::x8664_pda  > __result_buffer;
  typedef TJP__proxy_pda_1360_0< ::x8664_pda , void *, ::x8664_pda  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::x8664_pda &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_1361_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_1361_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_1361(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_1361_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_disable(struct net_device *dev)
{
 unsigned int i;
 int cpu;

 local_bh_disable();
 cpu = ({ typeof(_proxy_pda.cpunumber) ret__; switch (sizeof(_proxy_pda.cpunumber)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1358(&_proxy_pda).cpunumber)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1359(&_proxy_pda).cpunumber)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->cpunumber)), "m" (__get__proxy_pda_1360(&_proxy_pda).cpunumber)); break; default: __bad_pda_field(); } ret__; });
 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_1361(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);

  __netif_tx_lock(txq, cpu);
  netif_tx_stop_queue(txq);
  __netif_tx_unlock(txq);
 }
 local_bh_enable();
}

static inline void netif_addr_lock(struct net_device *dev)
{
 ;
}

static inline void netif_addr_lock_bh(struct net_device *dev)
{
 ;
}

static inline void netif_addr_unlock(struct net_device *dev)
{
 ;
}

static inline void netif_addr_unlock_bh(struct net_device *dev)
{
 ;
}



extern void ether_setup(struct net_device *dev);


extern struct net_device *alloc_netdev_mq(int sizeof_priv, char *name,
           void (*setup)(struct net_device *),
           unsigned int queue_count);


extern int register_netdev(struct net_device *dev);
extern void unregister_netdev(struct net_device *dev);

extern void dev_set_rx_mode(struct net_device *dev);
extern void __dev_set_rx_mode(struct net_device *dev);
extern int dev_unicast_delete(struct net_device *dev, void *addr, int alen);
extern int dev_unicast_add(struct net_device *dev, void *addr, int alen);
extern int dev_unicast_sync(struct net_device *to, struct net_device *from);
extern void dev_unicast_unsync(struct net_device *to, struct net_device *from);
extern int dev_mc_delete(struct net_device *dev, void *addr, int alen, int all);
extern int dev_mc_add(struct net_device *dev, void *addr, int alen, int newonly);
extern int dev_mc_sync(struct net_device *to, struct net_device *from);
extern void dev_mc_unsync(struct net_device *to, struct net_device *from);
extern int __dev_addr_delete(struct dev_addr_list **list, int *count, void *addr, int alen, int all);
extern int __dev_addr_add(struct dev_addr_list **list, int *count, void *addr, int alen, int newonly);
extern int __dev_addr_sync(struct dev_addr_list **to, int *to_count, struct dev_addr_list **from, int *from_count);
extern void __dev_addr_unsync(struct dev_addr_list **to, int *to_count, struct dev_addr_list **from, int *from_count);
extern int dev_set_promiscuity(struct net_device *dev, int inc);
extern int dev_set_allmulti(struct net_device *dev, int inc);
extern void netdev_state_change(struct net_device *dev);
extern void netdev_bonding_change(struct net_device *dev);
extern void netdev_features_change(struct net_device *dev);

extern void dev_load(struct net *net, char *name);
extern void dev_mcast_init(void);
extern int netdev_max_backlog;
extern int weight_p;
extern int netdev_set_master(struct net_device *dev, struct net_device *master);
extern int skb_checksum_help(struct sk_buff *skb);
extern struct sk_buff *skb_gso_segment(struct sk_buff *skb, int features);

extern void netdev_rx_csum_fault(struct net_device *dev);






extern void net_enable_timestamp(void);
extern void net_disable_timestamp(void);


extern void *dev_seq_start(struct seq_file *seq, loff_t *pos);
extern void *dev_seq_next(struct seq_file *seq, void *v, loff_t *pos);
extern void dev_seq_stop(struct seq_file *seq, void *v);


extern int netdev_class_create_file(struct class_attribute *class_attr);
extern void netdev_class_remove_file(struct class_attribute *class_attr);

extern char *netdev_drivername(struct net_device *dev, char *buffer, int len);

extern void linkwatch_run_queue(void);

extern int netdev_compute_features(unsigned long all, unsigned long one);

static inline int net_gso_ok(int features, int gso_type)
{
 int feature = gso_type << 16;
 return (features & feature) == feature;
}

static inline int skb_gso_ok(struct sk_buff *skb, int features)
{
 return net_gso_ok(features, ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8featuresE_1363_0 {
  typedef TJP__ZN10net_device8featuresE_1363_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device8featuresE_1363(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device8featuresE_1363_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int netif_needs_gso(struct net_device *dev, struct sk_buff *skb)
{
 return skb_is_gso(skb) &&
        (!skb_gso_ok(skb, __get__ZN10net_device8featuresE_1363(&dev->features)) ||
  __builtin_expect(!!(skb->ip_summed != 3), 0));
}

static inline void netif_set_gso_max_size(struct net_device *dev,
       unsigned int size)
{
 dev->gso_max_size = size;
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device6masterE_1366_0 {
  typedef TJP__ZN10net_device6masterE_1366_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline net_device * __get__ZN10net_device6masterE_1366(net_device * *source) {
  ::net_device *__result_buffer;
  typedef TJP__ZN10net_device6masterE_1366_0< ::net_device *, ::net_device , ::net_device * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::net_device *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10priv_flagsE_1367_0 {
  typedef TJP__ZN10net_device10priv_flagsE_1367_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN10net_device10priv_flagsE_1367(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN10net_device10priv_flagsE_1367_0< unsigned short int , ::net_device , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10priv_flagsE_1368_0 {
  typedef TJP__ZN10net_device10priv_flagsE_1368_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN10net_device10priv_flagsE_1368(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN10net_device10priv_flagsE_1368_0< unsigned short int , ::net_device , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10priv_flagsE_1370_0 {
  typedef TJP__ZN10net_device10priv_flagsE_1370_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN10net_device10priv_flagsE_1370(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN10net_device10priv_flagsE_1370_0< unsigned short int , ::net_device , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10priv_flagsE_1373_0 {
  typedef TJP__ZN10net_device10priv_flagsE_1373_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN10net_device10priv_flagsE_1373(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN10net_device10priv_flagsE_1373_0< unsigned short int , ::net_device , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}
static inline int skb_bond_should_drop(struct sk_buff *skb)
{
 struct net_device *dev = skb->dev;
 struct net_device *master = __get__ZN10net_device6masterE_1366(&dev->master);

 if (master &&
     (__get__ZN10net_device10priv_flagsE_1367(&dev->priv_flags) & 0x4)) {
  if ((__get__ZN10net_device10priv_flagsE_1368(&dev->priv_flags) & 0x40) &&
      skb->protocol == (( __be16)((__u16)( (((__u16)((0x0806)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0806)) & (__u16)0xff00U) >> 8) ))))
   return 0;

  if (__get__ZN10net_device10priv_flagsE_1370(&master->priv_flags) & 0x10) {
   if (skb->pkt_type != 1 &&
       skb->pkt_type != 2)
    return 0;
  }
  if (__get__ZN10net_device10priv_flagsE_1373(&master->priv_flags) & 0x8 &&
      skb->protocol == (( __be16)((__u16)( (((__u16)((0x8809)) & (__u16)0x00ffU) << 8) | (((__u16)((0x8809)) & (__u16)0xff00U) >> 8) ))))
   return 0;

  return 1;
 }
 return 0;
}

struct iw_param
{
  template <typename, int = 0> struct __BYPASSiw_param {};
  template <typename, int> friend struct __BYPASSiw_param;
  __s32 value;
  __u8 fixed;
  __u8 disabled;
  __u16 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct iw_point
{
  template <typename, int = 0> struct __BYPASSiw_point {};
  template <typename, int> friend struct __BYPASSiw_point;
  void *pointer;
  __u16 length;
  __u16 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};










struct user_i387_ia32_struct {
  template <typename, int = 0> struct __BYPASSuser_i387_ia32_struct {};
  template <typename, int> friend struct __BYPASSuser_i387_ia32_struct;
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;
 u32 st_space[20];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct user32_fxsr_struct {
  template <typename, int = 0> struct __BYPASSuser32_fxsr_struct {};
  template <typename, int> friend struct __BYPASSuser32_fxsr_struct;
 unsigned short cwd;
 unsigned short swd;
 unsigned short twd;
 unsigned short fop;
 int fip;
 int fcs;
 int foo;
 int fos;
 int mxcsr;
 int reserved;
 int st_space[32];
 int xmm_space[32];
 int padding[56];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct user_regs_struct32 {
  template <typename, int = 0> struct __BYPASSuser_regs_struct32 {};
  template <typename, int> friend struct __BYPASSuser_regs_struct32;
 __u32 ebx, ecx, edx, esi, edi, ebp, eax;
 unsigned short ds, __ds, es, __es;
 unsigned short fs, __fs, gs, __gs;
 __u32 orig_eax, eip;
 unsigned short cs, __cs;
 __u32 eflags, esp;
 unsigned short ss, __ss;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct user32 {
  template <typename, int = 0> struct __BYPASSuser32 {};
  template <typename, int> friend struct __BYPASSuser32;
  struct user_regs_struct32 regs;
  int u_fpvalid;

  struct user_i387_ia32_struct i387;

  __u32 u_tsize;
  __u32 u_dsize;
  __u32 u_ssize;
  __u32 start_code;
  __u32 start_stack;



  __u32 signal;
  int reserved;
  __u32 u_ar0;

  __u32 u_fpstate;
  __u32 magic;
  char u_comm[32];
  int u_debugreg[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



typedef u32 compat_size_t;
typedef s32 compat_ssize_t;
typedef s32 compat_time_t;
typedef s32 compat_clock_t;
typedef s32 compat_pid_t;
typedef u16 __compat_uid_t;
typedef u16 __compat_gid_t;
typedef u32 __compat_uid32_t;
typedef u32 __compat_gid32_t;
typedef u16 compat_mode_t;
typedef u32 compat_ino_t;
typedef u16 compat_dev_t;
typedef s32 compat_off_t;
typedef s64 compat_loff_t;
typedef u16 compat_nlink_t;
typedef u16 compat_ipc_pid_t;
typedef s32 compat_daddr_t;
typedef u32 compat_caddr_t;
typedef __kernel_fsid_t compat_fsid_t;
typedef s32 compat_timer_t;
typedef s32 compat_key_t;

typedef s32 compat_int_t;
typedef s32 compat_long_t;
typedef s64 __attribute__((aligned(4))) compat_s64;
typedef u32 compat_uint_t;
typedef u32 compat_ulong_t;
typedef u64 __attribute__((aligned(4))) compat_u64;

struct compat_timespec {
  template <typename, int = 0> struct __BYPASScompat_timespec {};
  template <typename, int> friend struct __BYPASScompat_timespec;
 compat_time_t tv_sec;
 s32 tv_nsec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_timeval {
  template <typename, int = 0> struct __BYPASScompat_timeval {};
  template <typename, int> friend struct __BYPASScompat_timeval;
 compat_time_t tv_sec;
 s32 tv_usec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_stat {
  template <typename, int = 0> struct __BYPASScompat_stat {};
  template <typename, int> friend struct __BYPASScompat_stat;
 compat_dev_t st_dev;
 u16 __pad1;
 compat_ino_t st_ino;
 compat_mode_t st_mode;
 compat_nlink_t st_nlink;
 __compat_uid_t st_uid;
 __compat_gid_t st_gid;
 compat_dev_t st_rdev;
 u16 __pad2;
 u32 st_size;
 u32 st_blksize;
 u32 st_blocks;
 u32 st_atime;
 u32 st_atime_nsec;
 u32 st_mtime;
 u32 st_mtime_nsec;
 u32 st_ctime;
 u32 st_ctime_nsec;
 u32 __unused4;
 u32 __unused5;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_flock {
  template <typename, int = 0> struct __BYPASScompat_flock {};
  template <typename, int> friend struct __BYPASScompat_flock;
 short l_type;
 short l_whence;
 compat_off_t l_start;
 compat_off_t l_len;
 compat_pid_t l_pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct compat_flock64 {
  template <typename, int = 0> struct __BYPASScompat_flock64 {};
  template <typename, int> friend struct __BYPASScompat_flock64;
 short l_type;
 short l_whence;
 compat_loff_t l_start;
 compat_loff_t l_len;
 compat_pid_t l_pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

struct compat_statfs {
  template <typename, int = 0> struct __BYPASScompat_statfs {};
  template <typename, int> friend struct __BYPASScompat_statfs;
 int f_type;
 int f_bsize;
 int f_blocks;
 int f_bfree;
 int f_bavail;
 int f_files;
 int f_ffree;
 compat_fsid_t f_fsid;
 int f_namelen;
 int f_frsize;
 int f_spare[5];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




typedef u32 compat_old_sigset_t;




typedef u32 compat_sigset_word;




struct compat_ipc64_perm {
  template <typename, int = 0> struct __BYPASScompat_ipc64_perm {};
  template <typename, int> friend struct __BYPASScompat_ipc64_perm;
 compat_key_t key;
 __compat_uid32_t uid;
 __compat_gid32_t gid;
 __compat_uid32_t cuid;
 __compat_gid32_t cgid;
 unsigned short mode;
 unsigned short __pad1;
 unsigned short seq;
 unsigned short __pad2;
 compat_ulong_t unused1;
 compat_ulong_t unused2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_semid64_ds {
  template <typename, int = 0> struct __BYPASScompat_semid64_ds {};
  template <typename, int> friend struct __BYPASScompat_semid64_ds;
 struct compat_ipc64_perm sem_perm;
 compat_time_t sem_otime;
 compat_ulong_t __unused1;
 compat_time_t sem_ctime;
 compat_ulong_t __unused2;
 compat_ulong_t sem_nsems;
 compat_ulong_t __unused3;
 compat_ulong_t __unused4;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_msqid64_ds {
  template <typename, int = 0> struct __BYPASScompat_msqid64_ds {};
  template <typename, int> friend struct __BYPASScompat_msqid64_ds;
 struct compat_ipc64_perm msg_perm;
 compat_time_t msg_stime;
 compat_ulong_t __unused1;
 compat_time_t msg_rtime;
 compat_ulong_t __unused2;
 compat_time_t msg_ctime;
 compat_ulong_t __unused3;
 compat_ulong_t msg_cbytes;
 compat_ulong_t msg_qnum;
 compat_ulong_t msg_qbytes;
 compat_pid_t msg_lspid;
 compat_pid_t msg_lrpid;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_shmid64_ds {
  template <typename, int = 0> struct __BYPASScompat_shmid64_ds {};
  template <typename, int> friend struct __BYPASScompat_shmid64_ds;
 struct compat_ipc64_perm shm_perm;
 compat_size_t shm_segsz;
 compat_time_t shm_atime;
 compat_ulong_t __unused1;
 compat_time_t shm_dtime;
 compat_ulong_t __unused2;
 compat_time_t shm_ctime;
 compat_ulong_t __unused3;
 compat_pid_t shm_cpid;
 compat_pid_t shm_lpid;
 compat_ulong_t shm_nattch;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




typedef struct user_regs_struct32 compat_elf_gregset_t;







typedef u32 compat_uptr_t;

static inline void *compat_ptr(compat_uptr_t uptr)
{
 return (void *)(unsigned long)uptr;
}

static inline compat_uptr_t ptr_to_compat(void *uptr)
{
 return (u32)(unsigned long)uptr;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13thread_struct3sp0E_1375_0 {
  typedef TJP__ZN13thread_struct3sp0E_1375_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN13thread_struct3sp0E_1375(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN13thread_struct3sp0E_1375_0< unsigned long int , ::thread_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6threadE_1376_0 {
  typedef TJP__ZN11task_struct6threadE_1376_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline thread_struct __get__ZN11task_struct6threadE_1376(thread_struct *source) {
  AC::ResultBuffer< ::thread_struct  > __result_buffer;
  typedef TJP__ZN11task_struct6threadE_1376_0< ::thread_struct , ::task_struct , ::thread_struct  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::thread_struct &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2spE_1377_0 {
  typedef TJP__ZN7pt_regs2spE_1377_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2spE_1377(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2spE_1377_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void *compat_alloc_user_space(long len)
{
 struct pt_regs *regs = ((struct pt_regs *)__get__ZN13thread_struct3sp0E_1375(&__get__ZN11task_struct6threadE_1376(&(get_current())->thread).sp0) - 1);
 return (void *)__get__ZN7pt_regs2spE_1377(&regs->sp) - len;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11thread_info6statusE_1378_0 {
  typedef TJP__ZN11thread_info6statusE_1378_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11thread_info6statusE_1378(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN11thread_info6statusE_1378_0< ::__u32 , ::thread_info , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}
static inline int is_compat_task(void)
{
 return __get__ZN11thread_info6statusE_1378(&current_thread_info()->status) & 0x0002;
}






typedef __compat_uid32_t compat_uid_t;
typedef __compat_gid32_t compat_gid_t;

struct rusage;

struct compat_itimerspec {
  template <typename, int = 0> struct __BYPASScompat_itimerspec {};
  template <typename, int> friend struct __BYPASScompat_itimerspec;
 struct compat_timespec it_interval;
 struct compat_timespec it_value;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_utimbuf {
  template <typename, int = 0> struct __BYPASScompat_utimbuf {};
  template <typename, int> friend struct __BYPASScompat_utimbuf;
 compat_time_t actime;
 compat_time_t modtime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_itimerval {
  template <typename, int = 0> struct __BYPASScompat_itimerval {};
  template <typename, int> friend struct __BYPASScompat_itimerval;
 struct compat_timeval it_interval;
 struct compat_timeval it_value;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_tms {
  template <typename, int = 0> struct __BYPASScompat_tms {};
  template <typename, int> friend struct __BYPASScompat_tms;
 compat_clock_t tms_utime;
 compat_clock_t tms_stime;
 compat_clock_t tms_cutime;
 compat_clock_t tms_cstime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_timex {
  template <typename, int = 0> struct __BYPASScompat_timex {};
  template <typename, int> friend struct __BYPASScompat_timex;
 compat_uint_t modes;
 compat_long_t offset;
 compat_long_t freq;
 compat_long_t maxerror;
 compat_long_t esterror;
 compat_int_t status;
 compat_long_t constant;
 compat_long_t precision;
 compat_long_t tolerance;
 struct compat_timeval time;
 compat_long_t tick;
 compat_long_t ppsfreq;
 compat_long_t jitter;
 compat_int_t shift;
 compat_long_t stabil;
 compat_long_t jitcnt;
 compat_long_t calcnt;
 compat_long_t errcnt;
 compat_long_t stbcnt;
 compat_int_t tai;

 compat_int_t :32; compat_int_t :32; compat_int_t :32; compat_int_t :32;
 compat_int_t :32; compat_int_t :32; compat_int_t :32; compat_int_t :32;
 compat_int_t :32; compat_int_t :32; compat_int_t :32;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



typedef struct {
 compat_sigset_word sig[(64 / 32)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} compat_sigset_t;

extern int cp_compat_stat(struct kstat *, struct compat_stat *);
extern int get_compat_timespec(struct timespec *, struct compat_timespec *);
extern int put_compat_timespec( struct timespec *, struct compat_timespec *);

struct compat_iovec {
  template <typename, int = 0> struct __BYPASScompat_iovec {};
  template <typename, int> friend struct __BYPASScompat_iovec;
 compat_uptr_t iov_base;
 compat_size_t iov_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_rlimit {
  template <typename, int = 0> struct __BYPASScompat_rlimit {};
  template <typename, int> friend struct __BYPASScompat_rlimit;
 compat_ulong_t rlim_cur;
 compat_ulong_t rlim_max;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_rusage {
  template <typename, int = 0> struct __BYPASScompat_rusage {};
  template <typename, int> friend struct __BYPASScompat_rusage;
 struct compat_timeval ru_utime;
 struct compat_timeval ru_stime;
 compat_long_t ru_maxrss;
 compat_long_t ru_ixrss;
 compat_long_t ru_idrss;
 compat_long_t ru_isrss;
 compat_long_t ru_minflt;
 compat_long_t ru_majflt;
 compat_long_t ru_nswap;
 compat_long_t ru_inblock;
 compat_long_t ru_oublock;
 compat_long_t ru_msgsnd;
 compat_long_t ru_msgrcv;
 compat_long_t ru_nsignals;
 compat_long_t ru_nvcsw;
 compat_long_t ru_nivcsw;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int put_compat_rusage( struct rusage *, struct compat_rusage *);

struct compat_siginfo;

extern long compat_sys_waitid(int, compat_pid_t,
  struct compat_siginfo *, int,
  struct compat_rusage *);

struct compat_dirent {
  template <typename, int = 0> struct __BYPASScompat_dirent {};
  template <typename, int> friend struct __BYPASScompat_dirent;
 u32 d_ino;
 compat_off_t d_off;
 u16 d_reclen;
 char d_name[256];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef union compat_sigval {
 compat_int_t sival_int;
 compat_uptr_t sival_ptr;
} compat_sigval_t;



typedef struct compat_sigevent {
  template <typename, int = 0> struct __BYPASScompat_sigevent {};
  template <typename, int> friend struct __BYPASScompat_sigevent;
 compat_sigval_t sigev_value;
 compat_int_t sigev_signo;
 compat_int_t sigev_notify;
 union {
  compat_int_t _pad[((64/sizeof(int)) - 3)];
  compat_int_t _tid;

  struct {
   compat_uptr_t _function;
   compat_uptr_t _attribute;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigev_thread;
 } _sigev_un;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} compat_sigevent_t;

struct compat_robust_list {
  template <typename, int = 0> struct __BYPASScompat_robust_list {};
  template <typename, int> friend struct __BYPASScompat_robust_list;
 compat_uptr_t next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_robust_list_head {
  template <typename, int = 0> struct __BYPASScompat_robust_list_head {};
  template <typename, int> friend struct __BYPASScompat_robust_list_head;
 struct compat_robust_list list;
 compat_long_t futex_offset;
 compat_uptr_t list_op_pending;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void compat_exit_robust_list(struct task_struct *curr);

 long
compat_sys_set_robust_list(struct compat_robust_list_head *head,
      compat_size_t len);
 long
compat_sys_get_robust_list(int pid, compat_uptr_t *head_ptr,
      compat_size_t *len_ptr);

long compat_sys_semctl(int first, int second, int third, void *uptr);
long compat_sys_msgsnd(int first, int second, int third, void *uptr);
long compat_sys_msgrcv(int first, int second, int msgtyp, int third,
  int version, void *uptr);
long compat_sys_msgctl(int first, int second, void *uptr);
long compat_sys_shmat(int first, int second, compat_uptr_t third, int version,
  void *uptr);
long compat_sys_shmctl(int first, int second, void *uptr);
long compat_sys_semtimedop(int semid, struct sembuf *tsems,
  unsigned nsems, struct compat_timespec *timeout);
 long compat_sys_keyctl(u32 option,
         u32 arg2, u32 arg3, u32 arg4, u32 arg5);

 ssize_t compat_sys_readv(unsigned long fd,
  struct compat_iovec *vec, unsigned long vlen);
 ssize_t compat_sys_writev(unsigned long fd,
  struct compat_iovec *vec, unsigned long vlen);

int compat_do_execve(char * filename, compat_uptr_t *argv,
         compat_uptr_t *envp, struct pt_regs * regs);

 long compat_sys_select(int n, compat_ulong_t *inp,
  compat_ulong_t *outp, compat_ulong_t *exp,
  struct compat_timeval *tvp);

 long compat_sys_wait4(compat_pid_t pid,
     compat_uint_t *stat_addr, int options,
     struct compat_rusage *ru);






long compat_get_bitmap(unsigned long *mask, compat_ulong_t *umask,
         unsigned long bitmap_size);
long compat_put_bitmap(compat_ulong_t *umask, unsigned long *mask,
         unsigned long bitmap_size);
int copy_siginfo_from_user32(siginfo_t *to, struct compat_siginfo *from);
int copy_siginfo_to_user32(struct compat_siginfo *to, siginfo_t *from);
int get_compat_sigevent(struct sigevent *event,
  struct compat_sigevent *u_event);

static inline int compat_timeval_compare(struct compat_timeval *lhs,
     struct compat_timeval *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_usec - rhs->tv_usec;
}

static inline int compat_timespec_compare(struct compat_timespec *lhs,
     struct compat_timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern int get_compat_itimerspec(struct itimerspec *dst,
     struct compat_itimerspec *src);
extern int put_compat_itimerspec(struct compat_itimerspec *dst,
     struct itimerspec *src);

 long compat_sys_adjtimex(struct compat_timex *utp);

extern int compat_printk( char *fmt, ...);
extern void sigset_from_compat(sigset_t *set, compat_sigset_t *compat);

 long compat_sys_migrate_pages(compat_pid_t pid,
  compat_ulong_t maxnode, compat_ulong_t *old_nodes,
  compat_ulong_t *new_nodes);

extern int compat_ptrace_request(struct task_struct *child,
     compat_long_t request,
     compat_ulong_t addr, compat_ulong_t data);


extern long compat_arch_ptrace(struct task_struct *child, compat_long_t request,
          compat_ulong_t addr, compat_ulong_t data);
 long compat_sys_ptrace(compat_long_t request, compat_long_t pid,
      compat_long_t addr, compat_long_t data);





struct epoll_event;

 long compat_sys_epoll_pwait(int epfd,
   struct epoll_event *events,
   int maxevents, int timeout,
   compat_sigset_t *sigmask,
   compat_size_t sigsetsize);

 long compat_sys_utimensat(unsigned int dfd, char *filename,
    struct compat_timespec *t, int flags);

 long compat_sys_signalfd(int ufd,
    compat_sigset_t *sigmask,
                                compat_size_t sigsetsize);
 long compat_sys_timerfd_settime(int ufd, int flags,
       struct compat_itimerspec *utmr,
       struct compat_itimerspec *otmr);
 long compat_sys_timerfd_gettime(int ufd,
       struct compat_itimerspec *otmr);

 long compat_sys_move_pages(pid_t pid, unsigned long nr_page,
          __u32 *pages,
          int *nodes,
          int *status,
          int flags);
 long compat_sys_futimesat(unsigned int dfd, char *filename,
         struct compat_timeval *t);
 long compat_sys_newfstatat(unsigned int dfd, char * filename,
          struct compat_stat *statbuf,
          int flag);
 long compat_sys_openat(unsigned int dfd, char *filename,
      int flags, int mode);

struct compat_iw_point {
  template <typename, int = 0> struct __BYPASScompat_iw_point {};
  template <typename, int> friend struct __BYPASScompat_iw_point;
 compat_caddr_t pointer;
 __u16 length;
 __u16 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_freq
{
  template <typename, int = 0> struct __BYPASSiw_freq {};
  template <typename, int> friend struct __BYPASSiw_freq;
 __s32 m;
 __s16 e;
 __u8 i;
 __u8 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct iw_quality
{
  template <typename, int = 0> struct __BYPASSiw_quality {};
  template <typename, int> friend struct __BYPASSiw_quality;
 __u8 qual;

 __u8 level;
 __u8 noise;
 __u8 updated;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_discarded
{
  template <typename, int = 0> struct __BYPASSiw_discarded {};
  template <typename, int> friend struct __BYPASSiw_discarded;
 __u32 nwid;
 __u32 code;
 __u32 fragment;
 __u32 retries;
 __u32 misc;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct iw_missed
{
  template <typename, int = 0> struct __BYPASSiw_missed {};
  template <typename, int> friend struct __BYPASSiw_missed;
 __u32 beacon;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct iw_thrspy
{
  template <typename, int = 0> struct __BYPASSiw_thrspy {};
  template <typename, int> friend struct __BYPASSiw_thrspy;
 struct sockaddr addr;
 struct iw_quality qual;
 struct iw_quality low;
 struct iw_quality high;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_scan_req
{
  template <typename, int = 0> struct __BYPASSiw_scan_req {};
  template <typename, int> friend struct __BYPASSiw_scan_req;
 __u8 scan_type;
 __u8 essid_len;
 __u8 num_channels;

 __u8 flags;


 struct sockaddr bssid;
 __u8 essid[32];
 __u32 min_channel_time;
 __u32 max_channel_time;

 struct iw_freq channel_list[32];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_encode_ext
{
  template <typename, int = 0> struct __BYPASSiw_encode_ext {};
  template <typename, int> friend struct __BYPASSiw_encode_ext;
 __u32 ext_flags;
 __u8 tx_seq[8];
 __u8 rx_seq[8];
 struct sockaddr addr;


 __u16 alg;
 __u16 key_len;
 __u8 key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct iw_mlme
{
  template <typename, int = 0> struct __BYPASSiw_mlme {};
  template <typename, int> friend struct __BYPASSiw_mlme;
 __u16 cmd;
 __u16 reason_code;
 struct sockaddr addr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_pmksa
{
  template <typename, int = 0> struct __BYPASSiw_pmksa {};
  template <typename, int> friend struct __BYPASSiw_pmksa;
 __u32 cmd;
 struct sockaddr bssid;
 __u8 pmkid[16];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct iw_michaelmicfailure
{
  template <typename, int = 0> struct __BYPASSiw_michaelmicfailure {};
  template <typename, int> friend struct __BYPASSiw_michaelmicfailure;
 __u32 flags;
 struct sockaddr src_addr;
 __u8 tsc[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct iw_pmkid_cand
{
  template <typename, int = 0> struct __BYPASSiw_pmkid_cand {};
  template <typename, int> friend struct __BYPASSiw_pmkid_cand;
 __u32 flags;
 __u32 index;

 struct sockaddr bssid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct iw_statistics
{
  template <typename, int = 0> struct __BYPASSiw_statistics {};
  template <typename, int> friend struct __BYPASSiw_statistics;
 __u16 status;


 struct iw_quality qual;

 struct iw_discarded discard;
 struct iw_missed miss;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
union iwreq_data
{

 char name[16];



 struct iw_point essid;
 struct iw_param nwid;
 struct iw_freq freq;



 struct iw_param sens;
 struct iw_param bitrate;
 struct iw_param txpower;
 struct iw_param rts;
 struct iw_param frag;
 __u32 mode;
 struct iw_param retry;

 struct iw_point encoding;
 struct iw_param power;
 struct iw_quality qual;

 struct sockaddr ap_addr;
 struct sockaddr addr;

 struct iw_param param;
 struct iw_point data;
};







struct iwreq
{
  template <typename, int = 0> struct __BYPASSiwreq {};
  template <typename, int> friend struct __BYPASSiwreq;
 union
 {
  char ifrn_name[16];
 } ifr_ifrn;


 union iwreq_data u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_range
{
  template <typename, int = 0> struct __BYPASSiw_range {};
  template <typename, int> friend struct __BYPASSiw_range;

 __u32 throughput;
 __u32 min_nwid;
 __u32 max_nwid;


 __u16 old_num_channels;
 __u8 old_num_frequency;


 __u8 scan_capa;


 __u32 event_capa[6];


 __s32 sensitivity;






 struct iw_quality max_qual;
 struct iw_quality avg_qual;


 __u8 num_bitrates;
 __s32 bitrate[32];


 __s32 min_rts;
 __s32 max_rts;


 __s32 min_frag;
 __s32 max_frag;


 __s32 min_pmp;
 __s32 max_pmp;
 __s32 min_pmt;
 __s32 max_pmt;
 __u16 pmp_flags;
 __u16 pmt_flags;
 __u16 pm_capa;


 __u16 encoding_size[8];
 __u8 num_encoding_sizes;
 __u8 max_encoding_tokens;

 __u8 encoding_login_index;


 __u16 txpower_capa;
 __u8 num_txpower;
 __s32 txpower[8];


 __u8 we_version_compiled;
 __u8 we_version_source;


 __u16 retry_capa;
 __u16 retry_flags;
 __u16 r_time_flags;
 __s32 min_retry;
 __s32 max_retry;
 __s32 min_r_time;
 __s32 max_r_time;


 __u16 num_channels;
 __u8 num_frequency;
 struct iw_freq freq[32];



 __u32 enc_capa;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct iw_priv_args
{
  template <typename, int = 0> struct __BYPASSiw_priv_args {};
  template <typename, int> friend struct __BYPASSiw_priv_args;
 __u32 cmd;
 __u16 set_args;
 __u16 get_args;
 char name[16];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_event
{
  template <typename, int = 0> struct __BYPASSiw_event {};
  template <typename, int> friend struct __BYPASSiw_event;
 __u16 len;
 __u16 cmd;
 union iwreq_data u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct __compat_iw_event {
  template <typename, int = 0> struct __BYPASS__compat_iw_event {};
  template <typename, int> friend struct __BYPASS__compat_iw_event;
 __u16 len;
 __u16 cmd;
 compat_caddr_t pointer;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct iphdr {
  template <typename, int = 0> struct __BYPASSiphdr {};
  template <typename, int> friend struct __BYPASSiphdr;

 __u8 ihl:4,
  version:4;






 __u8 tos;
 __be16 tot_len;
 __be16 id;
 __be16 frag_off;
 __u8 ttl;
 __u8 protocol;
 __sum16 check;
 __be32 saddr;
 __be32 daddr;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline struct iphdr *ip_hdr( struct sk_buff *skb)
{
 return (struct iphdr *)skb_network_header(skb);
}

static inline struct iphdr *ipip_hdr( struct sk_buff *skb)
{
 return (struct iphdr *)skb_transport_header(skb);
}


struct ip_auth_hdr {
  template <typename, int = 0> struct __BYPASSip_auth_hdr {};
  template <typename, int> friend struct __BYPASSip_auth_hdr;
 __u8 nexthdr;
 __u8 hdrlen;
 __be16 reserved;
 __be32 spi;
 __be32 seq_no;
 __u8 auth_data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_esp_hdr {
  template <typename, int = 0> struct __BYPASSip_esp_hdr {};
  template <typename, int> friend struct __BYPASSip_esp_hdr;
 __be32 spi;
 __be32 seq_no;
 __u8 enc_data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_comp_hdr {
  template <typename, int = 0> struct __BYPASSip_comp_hdr {};
  template <typename, int> friend struct __BYPASSip_comp_hdr;
 __u8 nexthdr;
 __u8 flags;
 __be16 cpi;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_beet_phdr {
  template <typename, int = 0> struct __BYPASSip_beet_phdr {};
  template <typename, int> friend struct __BYPASSip_beet_phdr;
 __u8 nexthdr;
 __u8 hdrlen;
 __u8 padlen;
 __u8 reserved;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



static inline u32 jhash( void *key, u32 length, u32 initval)
{
 u32 a, b, c, len;
 u8 *k = key;

 len = length;
 a = b = 0x9e3779b9;
 c = initval;

 while (len >= 12) {
  a += (k[0] +((u32)k[1]<<8) +((u32)k[2]<<16) +((u32)k[3]<<24));
  b += (k[4] +((u32)k[5]<<8) +((u32)k[6]<<16) +((u32)k[7]<<24));
  c += (k[8] +((u32)k[9]<<8) +((u32)k[10]<<16)+((u32)k[11]<<24));

  { a -= b; a -= c; a ^= (c>>13); b -= c; b -= a; b ^= (a<<8); c -= a; c -= b; c ^= (b>>13); a -= b; a -= c; a ^= (c>>12); b -= c; b -= a; b ^= (a<<16); c -= a; c -= b; c ^= (b>>5); a -= b; a -= c; a ^= (c>>3); b -= c; b -= a; b ^= (a<<10); c -= a; c -= b; c ^= (b>>15); };

  k += 12;
  len -= 12;
 }

 c += length;
 switch (len) {
 case 11: c += ((u32)k[10]<<24);
 case 10: c += ((u32)k[9]<<16);
 case 9 : c += ((u32)k[8]<<8);
 case 8 : b += ((u32)k[7]<<24);
 case 7 : b += ((u32)k[6]<<16);
 case 6 : b += ((u32)k[5]<<8);
 case 5 : b += k[4];
 case 4 : a += ((u32)k[3]<<24);
 case 3 : a += ((u32)k[2]<<16);
 case 2 : a += ((u32)k[1]<<8);
 case 1 : a += k[0];
 };

 { a -= b; a -= c; a ^= (c>>13); b -= c; b -= a; b ^= (a<<8); c -= a; c -= b; c ^= (b>>13); a -= b; a -= c; a ^= (c>>12); b -= c; b -= a; b ^= (a<<16); c -= a; c -= b; c ^= (b>>5); a -= b; a -= c; a ^= (c>>3); b -= c; b -= a; b ^= (a<<10); c -= a; c -= b; c ^= (b>>15); };

 return c;
}




static inline u32 jhash2( u32 *k, u32 length, u32 initval)
{
 u32 a, b, c, len;

 a = b = 0x9e3779b9;
 c = initval;
 len = length;

 while (len >= 3) {
  a += k[0];
  b += k[1];
  c += k[2];
  { a -= b; a -= c; a ^= (c>>13); b -= c; b -= a; b ^= (a<<8); c -= a; c -= b; c ^= (b>>13); a -= b; a -= c; a ^= (c>>12); b -= c; b -= a; b ^= (a<<16); c -= a; c -= b; c ^= (b>>5); a -= b; a -= c; a ^= (c>>3); b -= c; b -= a; b ^= (a<<10); c -= a; c -= b; c ^= (b>>15); };
  k += 3; len -= 3;
 }

 c += length * 4;

 switch (len) {
 case 2 : b += k[1];
 case 1 : a += k[0];
 };

 { a -= b; a -= c; a ^= (c>>13); b -= c; b -= a; b ^= (a<<8); c -= a; c -= b; c ^= (b>>13); a -= b; a -= c; a ^= (c>>12); b -= c; b -= a; b ^= (a<<16); c -= a; c -= b; c ^= (b>>5); a -= b; a -= c; a ^= (c>>3); b -= c; b -= a; b ^= (a<<10); c -= a; c -= b; c ^= (b>>15); };

 return c;
}
static inline u32 jhash_3words(u32 a, u32 b, u32 c, u32 initval)
{
 a += 0x9e3779b9;
 b += 0x9e3779b9;
 c += initval;

 { a -= b; a -= c; a ^= (c>>13); b -= c; b -= a; b ^= (a<<8); c -= a; c -= b; c ^= (b>>13); a -= b; a -= c; a ^= (c>>12); b -= c; b -= a; b ^= (a<<16); c -= a; c -= b; c ^= (b>>5); a -= b; a -= c; a ^= (c>>3); b -= c; b -= a; b ^= (a<<10); c -= a; c -= b; c ^= (b>>15); };

 return c;
}

static inline u32 jhash_2words(u32 a, u32 b, u32 initval)
{
 return jhash_3words(a, b, 0, initval);
}

static inline u32 jhash_1word(u32 a, u32 initval)
{
 return jhash_3words(a, 0, 0, initval);
}

struct in6_addr
{
  template <typename, int = 0> struct __BYPASSin6_addr {};
  template <typename, int> friend struct __BYPASSin6_addr;
 union _in6_u
 {
  __u8 u6_addr8[16];
  __be16 u6_addr16[8];
  __be32 u6_addr32[4];
 } in6_u;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern struct in6_addr in6addr_any;

extern struct in6_addr in6addr_loopback;


extern struct in6_addr in6addr_linklocal_allnodes;


extern struct in6_addr in6addr_linklocal_allrouters;




struct sockaddr_in6 {
  template <typename, int = 0> struct __BYPASSsockaddr_in6 {};
  template <typename, int> friend struct __BYPASSsockaddr_in6;
 unsigned short int sin6_family;
 __be16 sin6_port;
 __be32 sin6_flowinfo;
 struct in6_addr sin6_addr;
 __u32 sin6_scope_id;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ipv6_mreq {
  template <typename, int = 0> struct __BYPASSipv6_mreq {};
  template <typename, int> friend struct __BYPASSipv6_mreq;

 struct in6_addr ipv6mr_multiaddr;


 int ipv6mr_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct in6_flowlabel_req
{
  template <typename, int = 0> struct __BYPASSin6_flowlabel_req {};
  template <typename, int> friend struct __BYPASSin6_flowlabel_req;
 struct in6_addr flr_dst;
 __be32 flr_label;
 __u8 flr_action;
 __u8 flr_share;
 __u16 flr_flags;
 __u16 flr_expires;
 __u16 flr_linger;
 __u32 __flr_pad;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct flowi {
  template <typename, int = 0> struct __BYPASSflowi {};
  template <typename, int> friend struct __BYPASSflowi;
 int oif;
 int iif;
 __u32 mark;

 union {
  struct {
   __be32 daddr;
   __be32 saddr;
   __u8 tos;
   __u8 scope;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ip4_u;

  struct {
   struct in6_addr daddr;
   struct in6_addr saddr;
   __be32 flowlabel;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ip6_u;

  struct {
   __le16 daddr;
   __le16 saddr;
   __u8 scope;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} dn_u;
 } nl_u;
 __u8 proto;
 union {
  struct {
   __be16 sport;
   __be16 dport;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ports;

  struct {
   __u8 type;
   __u8 code;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icmpt;

  struct {
   __le16 sport;
   __le16 dport;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} dnports;

  __be32 spi;

  struct {
   __u8 type;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} mht;
 } uli_u;






 __u32 secid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(64/8)));





struct sock;
typedef int (*flow_resolve_t)(struct flowi *key, u16 family, u8 dir,
          void **objp, atomic_t **obj_refp);

extern void *flow_cache_lookup(struct flowi *key, u16 family, u8 dir,
           flow_resolve_t resolver);
extern void flow_cache_flush(void);
extern atomic_t flow_cache_genid;

static inline int flow_cache_uli_match(struct flowi *fl1, struct flowi *fl2)
{
 return (fl1->proto == fl2->proto &&
  !memcmp(&fl1->uli_u, &fl2->uli_u, sizeof(fl1->uli_u)));
}
extern int sysctl_nr_open;
struct files_stat_struct {
  template <typename, int = 0> struct __BYPASSfiles_stat_struct {};
  template <typename, int> friend struct __BYPASSfiles_stat_struct;
 int nr_files;
 int nr_free_files;
 int max_files;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct files_stat_struct files_stat;
extern int get_max_files(void);

struct inodes_stat_t {
  template <typename, int = 0> struct __BYPASSinodes_stat_t {};
  template <typename, int> friend struct __BYPASSinodes_stat_t;
 int nr_inodes;
 int nr_unused;
 int dummy[5];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct inodes_stat_t inodes_stat;

extern int leases_enable, lease_break_time;


extern int dir_notify_enable;
static inline int old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline int new_valid_dev(dev_t dev)
{
 return 1;
}

static inline u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline int huge_valid_dev(dev_t dev)
{
 return 1;
}

static inline u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}




static inline void __list_add_rcu(struct list_head *_new,
  struct list_head *prev, struct list_head *next)
{
 _new->next = next;
 _new->prev = prev;
 ({ (prev->next) = (_new); });
 next->prev = _new;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1393_0 {
  typedef TJP__ZN9list_head4nextE_1393_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1393(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1393_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_add_rcu(struct list_head *_new, struct list_head *head)
{
 __list_add_rcu(_new, head, __get__ZN9list_head4nextE_1393(&head->next));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_1394_0 {
  typedef TJP__ZN9list_head4prevE_1394_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_1394(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_1394_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_add_tail_rcu(struct list_head *_new,
     struct list_head *head)
{
 __list_add_rcu(_new, __get__ZN9list_head4prevE_1394(&head->prev), head);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_1395_0 {
  typedef TJP__ZN9list_head4prevE_1395_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_1395(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_1395_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1396_0 {
  typedef TJP__ZN9list_head4nextE_1396_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1396(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1396_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_del_rcu(struct list_head *entry)
{
 __list_del(__get__ZN9list_head4prevE_1395(&entry->prev), __get__ZN9list_head4nextE_1396(&entry->next));
 entry->prev = ((void *) 0x00200200);
}
static inline void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  n->pprev = 0;
 }
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1397_0 {
  typedef TJP__ZN9list_head4nextE_1397_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1397(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1397_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_1398_0 {
  typedef TJP__ZN9list_head4prevE_1398_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_1398(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_1398_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_replace_rcu(struct list_head *old,
    struct list_head *_new)
{
 _new->next = __get__ZN9list_head4nextE_1397(&old->next);
 _new->prev = __get__ZN9list_head4prevE_1398(&old->prev);
 ({ (_new->prev->next) = (_new); });
 _new->next->prev = _new;
 old->prev = ((void *) 0x00200200);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1399_0 {
  typedef TJP__ZN9list_head4nextE_1399_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1399(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1399_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_1400_0 {
  typedef TJP__ZN9list_head4prevE_1400_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_1400(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_1400_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1401_0 {
  typedef TJP__ZN9list_head4nextE_1401_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1401(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1401_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 struct list_head *first = __get__ZN9list_head4nextE_1399(&list->next);
 struct list_head *last = __get__ZN9list_head4prevE_1400(&list->prev);
 struct list_head *at = __get__ZN9list_head4nextE_1401(&head->next);

 if (list_empty(head))
  return;



 INIT_LIST_HEAD(list);
 sync();
 last->next = at;
 ({ (head->next) = (first); });
 first->prev = head;
 at->prev = last;
}
static inline void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 n->pprev = ((void *) 0x00200200);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_1402_0 {
  typedef TJP__ZN10hlist_node4nextE_1402_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_1402(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_1402_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node5pprevE_1403_0 {
  typedef TJP__ZN10hlist_node5pprevE_1403_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node ** __get__ZN10hlist_node5pprevE_1403(hlist_node ** *source) {
  ::hlist_node **__result_buffer;
  typedef TJP__ZN10hlist_node5pprevE_1403_0< ::hlist_node **, ::hlist_node , ::hlist_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node **&)__result_buffer;
}
static inline void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *_new)
{
 struct hlist_node *next = __get__ZN10hlist_node4nextE_1402(&old->next);

 _new->next = next;
 _new->pprev = __get__ZN10hlist_node5pprevE_1403(&old->pprev);
 ({ (*_new->pprev) = (_new); });
 if (next)
  _new->next->pprev = &_new->next;
 old->pprev = ((void *) 0x00200200);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_1404_0 {
  typedef TJP__ZN10hlist_head5firstE_1404_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_1404(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_1404_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = __get__ZN10hlist_head5firstE_1404(&h->first);

 n->next = first;
 n->pprev = &h->first;
 ({ (h->first) = (n); });
 if (first)
  first->pprev = &n->next;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node5pprevE_1405_0 {
  typedef TJP__ZN10hlist_node5pprevE_1405_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node ** __get__ZN10hlist_node5pprevE_1405(hlist_node ** *source) {
  ::hlist_node **__result_buffer;
  typedef TJP__ZN10hlist_node5pprevE_1405_0< ::hlist_node **, ::hlist_node , ::hlist_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node **&)__result_buffer;
}
static inline void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = __get__ZN10hlist_node5pprevE_1405(&next->pprev);
 n->next = next;
 ({ (*(n->pprev)) = (n); });
 next->pprev = &n->next;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_1406_0 {
  typedef TJP__ZN10hlist_node4nextE_1406_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_1406(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_1406_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_1407_0 {
  typedef TJP__ZN10hlist_node4nextE_1407_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_1407(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_1407_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline void hlist_add_after_rcu(struct hlist_node *prev,
           struct hlist_node *n)
{
 n->next = __get__ZN10hlist_node4nextE_1406(&prev->next);
 n->pprev = &prev->next;
 ({ (prev->next) = (n); });
 if (__get__ZN10hlist_node4nextE_1407(&n->next))
  n->next->pprev = &n->next;
}




struct nameidata;
struct path;
struct vfsmount;
struct qstr {
  template <typename, int = 0> struct __BYPASSqstr {};
  template <typename, int> friend struct __BYPASSqstr;
 unsigned int hash;
 unsigned int len;
 unsigned char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dentry_stat_t {
  template <typename, int = 0> struct __BYPASSdentry_stat_t {};
  template <typename, int> friend struct __BYPASSdentry_stat_t;
 int nr_dentry;
 int nr_unused;
 int age_limit;
 int want_pages;
 int dummy[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct dentry_stat_t dentry_stat;






static inline unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}





static inline unsigned long end_name_hash(unsigned long hash)
{
 return (unsigned int) hash;
}


static inline unsigned int
full_name_hash( unsigned char *name, unsigned int len)
{
 unsigned long hash = 0;
 while (len--)
  hash = partial_name_hash(*name++, hash);
 return end_name_hash(hash);
}

struct dcookie_struct;



struct dentry {
  template <typename, int = 0> struct __BYPASSdentry {};
  template <typename, int> friend struct __BYPASSdentry;
 atomic_t d_count;
 unsigned int d_flags;
 spinlock_t d_lock;
 struct inode *d_inode;





 struct hlist_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;

 struct list_head d_lru;



 union _d_u {
  struct list_head d_child;
   struct rcu_head d_rcu;
 } d_u;
 struct list_head d_subdirs;
 struct list_head d_alias;
 unsigned long d_time;
 struct dentry_operations *d_op;
 struct super_block *d_sb;
 void *d_fsdata;

 struct dcookie_struct *d_cookie;

 int d_mounted;
 unsigned char d_iname[36];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
  template <typename, int = 0> struct __BYPASSdentry_operations {};
  template <typename, int> friend struct __BYPASSdentry_operations;
 int (*d_revalidate)(struct dentry *, struct nameidata *);
 int (*d_hash) (struct dentry *, struct qstr *);
 int (*d_compare) (struct dentry *, struct qstr *, struct qstr *);
 int (*d_delete)(struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern spinlock_t dcache_lock;
extern seqlock_t rename_lock;

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_flagsE_1408_0 {
  typedef TJP__ZN6dentry7d_flagsE_1408_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN6dentry7d_flagsE_1408(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN6dentry7d_flagsE_1408_0< unsigned int , ::dentry , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void __d_drop(struct dentry *dentry)
{
 if (!(__get__ZN6dentry7d_flagsE_1408(&dentry->d_flags) & 0x0010)) {
  dentry->d_flags |= 0x0010;
  hlist_del_rcu(&dentry->d_hash);
 }
}

static inline void d_drop(struct dentry *dentry)
{
 ;
 ;
  __d_drop(dentry);
 ;
 ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4qstr4nameE_1409_0 {
  typedef TJP__ZN4qstr4nameE_1409_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char * __get__ZN4qstr4nameE_1409(unsigned char * *source) {
  unsigned char *__result_buffer;
  typedef TJP__ZN4qstr4nameE_1409_0< unsigned char *, ::qstr , unsigned char * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry6d_nameE_1410_0 {
  typedef TJP__ZN6dentry6d_nameE_1410_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline qstr __get__ZN6dentry6d_nameE_1410(qstr *source) {
  AC::ResultBuffer< ::qstr  > __result_buffer;
  typedef TJP__ZN6dentry6d_nameE_1410_0< ::qstr , ::dentry , ::qstr  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::qstr &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_inameE_1411_0 {
  typedef TJP__ZN6dentry7d_inameE_1411_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 36;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned char);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char * __get__ZN6dentry7d_inameE_1411(unsigned char *source) {
  unsigned char *__result_buffer;
  typedef TJP__ZN6dentry7d_inameE_1411_0< unsigned char *, ::dentry , unsigned char [36] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char *&)__result_buffer;
}
static inline int dname_external(struct dentry *dentry)
{
 return __get__ZN4qstr4nameE_1409(&__get__ZN6dentry6d_nameE_1410(&dentry->d_name).name) != __get__ZN6dentry7d_inameE_1411(dentry->d_iname);
}




extern void d_instantiate(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern struct dentry * d_materialise_unique(struct dentry *, struct inode *);
extern void d_delete(struct dentry *);


extern struct dentry * d_alloc(struct dentry *, struct qstr *);
extern struct dentry * d_alloc_anon(struct inode *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern int d_invalidate(struct dentry *);


extern struct dentry * d_alloc_root(struct inode *);


extern void d_genocide(struct dentry *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);


extern int have_submounts(struct dentry *);




extern void d_rehash(struct dentry *);
static inline void d_add(struct dentry *entry, struct inode *inode)
{
 d_instantiate(entry, inode);
 d_rehash(entry);
}
static inline struct dentry *d_add_unique(struct dentry *entry, struct inode *inode)
{
 struct dentry *res;

 res = d_instantiate_unique(entry, inode);
 d_rehash(res != 0 ? res : entry);
 return res;
}


extern void d_move(struct dentry *, struct dentry *);


extern struct dentry * d_lookup(struct dentry *, struct qstr *);
extern struct dentry * __d_lookup(struct dentry *, struct qstr *);
extern struct dentry * d_hash_and_lookup(struct dentry *, struct qstr *);


extern int d_validate(struct dentry *, struct dentry *);




extern char *dynamic_dname(struct dentry *, char *, int, char *, ...);

extern char *__d_path( struct path *path, struct path *root, char *, int);
extern char *d_path( struct path *, char *, int);
extern char *dentry_path(struct dentry *, char *, int);
static inline struct dentry *dget(struct dentry *dentry)
{
 if (dentry) {
  ;
  ;
 }
 return dentry;
}

extern struct dentry * dget_locked(struct dentry *);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_flagsE_1412_0 {
  typedef TJP__ZN6dentry7d_flagsE_1412_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN6dentry7d_flagsE_1412(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN6dentry7d_flagsE_1412_0< unsigned int , ::dentry , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int d_unhashed(struct dentry *dentry)
{
 return (__get__ZN6dentry7d_flagsE_1412(&dentry->d_flags) & 0x0010);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry8d_parentE_1413_0 {
  typedef TJP__ZN6dentry8d_parentE_1413_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dentry * __get__ZN6dentry8d_parentE_1413(dentry * *source) {
  ::dentry *__result_buffer;
  typedef TJP__ZN6dentry8d_parentE_1413_0< ::dentry *, ::dentry , ::dentry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dentry *&)__result_buffer;
}
static inline struct dentry *dget_parent(struct dentry *dentry)
{
 struct dentry *ret;

 ;
 ret = dget(__get__ZN6dentry8d_parentE_1413(&dentry->d_parent));
 ;
 return ret;
}

extern void dput(struct dentry *);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry9d_mountedE_1414_0 {
  typedef TJP__ZN6dentry9d_mountedE_1414_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN6dentry9d_mountedE_1414(int *source) {
  int __result_buffer;
  typedef TJP__ZN6dentry9d_mountedE_1414_0< int , ::dentry , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int d_mountpoint(struct dentry *dentry)
{
 return __get__ZN6dentry9d_mountedE_1414(&dentry->d_mounted);
}

extern struct vfsmount *lookup_mnt(struct vfsmount *, struct dentry *);
extern struct dentry *lookup_create(struct nameidata *nd, int is_dir);

extern int sysctl_vfs_cache_pressure;





static inline void *radix_tree_ptr_to_indirect(void *ptr)
{
 return (void *)((unsigned long)ptr | 1);
}

static inline void *radix_tree_indirect_to_ptr(void *ptr)
{
 return (void *)((unsigned long)ptr & ~1);
}

static inline int radix_tree_is_indirect_ptr(void *ptr)
{
 return (int)((unsigned long)ptr & 1);
}






struct radix_tree_root {
  template <typename, int = 0> struct __BYPASSradix_tree_root {};
  template <typename, int> friend struct __BYPASSradix_tree_root;
 unsigned int height;
 gfp_t gfp_mask;
 struct radix_tree_node *rnode;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void *radix_tree_deref_slot(void **pslot)
{



 void *ret = *(typeof(pslot))g_map(pslot, sizeof(*(pslot)));

 if (__builtin_expect(!!(radix_tree_is_indirect_ptr(ret)), 0))
  ret = ((void *)-1UL);
 return ret;
}
static inline void radix_tree_replace_slot(void **pslot, void *item)
{
 ;
 ({ (*pslot) = (item); });
}

int radix_tree_insert(struct radix_tree_root *, unsigned long, void *);
void *radix_tree_lookup(struct radix_tree_root *, unsigned long);
void **radix_tree_lookup_slot(struct radix_tree_root *, unsigned long);
void *radix_tree_delete(struct radix_tree_root *, unsigned long);
unsigned int
radix_tree_gang_lookup(struct radix_tree_root *root, void **results,
   unsigned long first_index, unsigned int max_items);
unsigned int
radix_tree_gang_lookup_slot(struct radix_tree_root *root, void ***results,
   unsigned long first_index, unsigned int max_items);
unsigned long radix_tree_next_hole(struct radix_tree_root *root,
    unsigned long index, unsigned long max_scan);
int radix_tree_preload(gfp_t gfp_mask);
void radix_tree_init(void);
void *radix_tree_tag_set(struct radix_tree_root *root,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct radix_tree_root *root,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(struct radix_tree_root *root,
   unsigned long index, unsigned int tag);
unsigned int
radix_tree_gang_lookup_tag(struct radix_tree_root *root, void **results,
  unsigned long first_index, unsigned int max_items,
  unsigned int tag);
unsigned int
radix_tree_gang_lookup_tag_slot(struct radix_tree_root *root, void ***results,
  unsigned long first_index, unsigned int max_items,
  unsigned int tag);
int radix_tree_tagged(struct radix_tree_root *root, unsigned int tag);

static inline void radix_tree_preload_end(void)
{
 do { } while (0);
}









struct export_operations;
struct hd_geometry;
struct iovec;
struct nameidata;
struct kiocb;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;

extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) inode_init(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) inode_init_early(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) files_init(unsigned long);

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef void (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *_private);
struct iattr {
  template <typename, int = 0> struct __BYPASSiattr {};
  template <typename, int> friend struct __BYPASSiattr;
 unsigned int ia_valid;
 umode_t ia_mode;
 uid_t ia_uid;
 gid_t ia_gid;
 loff_t ia_size;
 struct timespec ia_atime;
 struct timespec ia_mtime;
 struct timespec ia_ctime;






 struct file *ia_file;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct if_dqblk {
  template <typename, int = 0> struct __BYPASSif_dqblk {};
  template <typename, int> friend struct __BYPASSif_dqblk;
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct if_dqinfo {
  template <typename, int = 0> struct __BYPASSif_dqinfo {};
  template <typename, int> friend struct __BYPASSif_dqinfo;
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 __QUOTA_NL_A_MAX,
};
typedef struct fs_disk_quota {
  template <typename, int = 0> struct __BYPASSfs_disk_quota {};
  template <typename, int> friend struct __BYPASSfs_disk_quota;
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;

 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s32 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fs_disk_quota_t;
typedef struct fs_qfilestat {
  template <typename, int = 0> struct __BYPASSfs_qfilestat {};
  template <typename, int> friend struct __BYPASSfs_qfilestat;
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
  template <typename, int = 0> struct __BYPASSfs_quota_stat {};
  template <typename, int> friend struct __BYPASSfs_quota_stat;
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fs_quota_stat_t;
struct v1_mem_dqinfo {
  template <typename, int = 0> struct __BYPASSv1_mem_dqinfo {};
  template <typename, int> friend struct __BYPASSv1_mem_dqinfo;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct v2_mem_dqinfo {
  template <typename, int = 0> struct __BYPASSv2_mem_dqinfo {};
  template <typename, int> friend struct __BYPASSv2_mem_dqinfo;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


typedef __kernel_uid32_t qid_t;
typedef __u64 qsize_t;

extern spinlock_t dq_data_lock;
struct mem_dqblk {
  template <typename, int = 0> struct __BYPASSmem_dqblk {};
  template <typename, int> friend struct __BYPASSmem_dqblk;
 __u32 dqb_bhardlimit;
 __u32 dqb_bsoftlimit;
 qsize_t dqb_curspace;
 __u32 dqb_ihardlimit;
 __u32 dqb_isoftlimit;
 __u32 dqb_curinodes;
 time_t dqb_btime;
 time_t dqb_itime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct quota_format_type;

struct mem_dqinfo {
  template <typename, int = 0> struct __BYPASSmem_dqinfo {};
  template <typename, int> friend struct __BYPASSmem_dqinfo;
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_maxblimit;
 qsize_t dqi_maxilimit;
 union {
  struct v1_mem_dqinfo v1_i;
  struct v2_mem_dqinfo v2_i;
 } u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct super_block;





extern void mark_info_dirty(struct super_block *sb, int type);
static inline int info_dirty(struct mem_dqinfo *info)
{
 return (__builtin_constant_p((16)) ? constant_test_bit((16), (&info->dqi_flags)) : variable_test_bit((16), (&info->dqi_flags)));
}

struct dqstats {
  template <typename, int = 0> struct __BYPASSdqstats {};
  template <typename, int> friend struct __BYPASSdqstats;
 int lookups;
 int drops;
 int reads;
 int writes;
 int cache_hits;
 int allocated_dquots;
 int free_dquots;
 int syncs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct dqstats dqstats;
struct dquot {
  template <typename, int = 0> struct __BYPASSdquot {};
  template <typename, int> friend struct __BYPASSdquot;
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 atomic_t dq_count;
 wait_queue_head_t dq_wait_unused;
 struct super_block *dq_sb;
 unsigned int dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 short dq_type;
 struct mem_dqblk dq_dqb;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct quota_format_ops {
  template <typename, int = 0> struct __BYPASSquota_format_ops {};
  template <typename, int> friend struct __BYPASSquota_format_ops;
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct dquot_operations {
  template <typename, int = 0> struct __BYPASSdquot_operations {};
  template <typename, int> friend struct __BYPASSdquot_operations;
 int (*initialize) (struct inode *, int);
 int (*drop) (struct inode *);
 int (*alloc_space) (struct inode *, qsize_t, int);
 int (*alloc_inode) ( struct inode *, unsigned long);
 int (*free_space) (struct inode *, qsize_t);
 int (*free_inode) ( struct inode *, unsigned long);
 int (*transfer) (struct inode *, struct iattr *);
 int (*write_dquot) (struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct quotactl_ops {
  template <typename, int = 0> struct __BYPASSquotactl_ops {};
  template <typename, int> friend struct __BYPASSquotactl_ops;
 int (*quota_on)(struct super_block *, int, int, char *, int);
 int (*quota_off)(struct super_block *, int, int);
 int (*quota_sync)(struct super_block *, int);
 int (*get_info)(struct super_block *, int, struct if_dqinfo *);
 int (*set_info)(struct super_block *, int, struct if_dqinfo *);
 int (*get_dqblk)(struct super_block *, int, qid_t, struct if_dqblk *);
 int (*set_dqblk)(struct super_block *, int, qid_t, struct if_dqblk *);
 int (*get_xstate)(struct super_block *, struct fs_quota_stat *);
 int (*set_xstate)(struct super_block *, unsigned int, int);
 int (*get_xquota)(struct super_block *, int, qid_t, struct fs_disk_quota *);
 int (*set_xquota)(struct super_block *, int, qid_t, struct fs_disk_quota *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct quota_format_type {
  template <typename, int = 0> struct __BYPASSquota_format_type {};
  template <typename, int> friend struct __BYPASSquota_format_type;
 int qf_fmt_id;
 struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct quota_info {
  template <typename, int = 0> struct __BYPASSquota_info {};
  template <typename, int> friend struct __BYPASSquota_info;
 unsigned int flags;
 struct mutex dqio_mutex;
 struct mutex dqonoff_mutex;
 struct rw_semaphore dqptr_sem;
 struct inode *files[2];
 struct mem_dqinfo info[2];
 struct quota_format_ops *ops[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
  template <typename, int = 0> struct __BYPASSquota_module_name {};
  template <typename, int> friend struct __BYPASSquota_module_name;
 int qm_fmt_id;
 char *qm_mod_name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
struct page;
struct address_space;
struct writeback_control;

struct iov_iter {
  template <typename, int = 0> struct __BYPASSiov_iter {};
  template <typename, int> friend struct __BYPASSiov_iter;
 struct iovec *iov;
 unsigned long nr_segs;
 size_t iov_offset;
 size_t count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

size_t iov_iter_copy_from_user_atomic(struct page *page,
  struct iov_iter *i, unsigned long offset, size_t bytes);
size_t iov_iter_copy_from_user(struct page *page,
  struct iov_iter *i, unsigned long offset, size_t bytes);
void iov_iter_advance(struct iov_iter *i, size_t bytes);
int iov_iter_fault_in_readable(struct iov_iter *i, size_t bytes);
size_t iov_iter_single_seg_count(struct iov_iter *i);

static inline void iov_iter_init(struct iov_iter *i,
   struct iovec *iov, unsigned long nr_segs,
   size_t count, size_t written)
{
 i->iov = iov;
 i->nr_segs = nr_segs;
 i->iov_offset = 0;
 i->count = count + written;

 iov_iter_advance(i, written);
}

static inline size_t iov_iter_count(struct iov_iter *i)
{
 return i->count;
}
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
  template <typename, int = 0> struct __BYPASSaddress_space_operations {};
  template <typename, int> friend struct __BYPASSaddress_space_operations;
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);
 void (*sync_page)(struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);

 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);





 int (*prepare_write)(struct file *, struct page *, unsigned, unsigned);
 int (*commit_write)(struct file *, struct page *, unsigned, unsigned);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned long);
 int (*releasepage) (struct page *, gfp_t);
 ssize_t (*direct_IO)(int, struct kiocb *, struct iovec *iov,
   loff_t offset, unsigned long nr_segs);
 int (*get_xip_mem)(struct address_space *, unsigned long, int,
      void **, unsigned long *);

 int (*migratepage) (struct address_space *,
   struct page *, struct page *);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, read_descriptor_t *,
     unsigned long);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);

struct backing_dev_info;
struct address_space {
  template <typename, int = 0> struct __BYPASSaddress_space {};
  template <typename, int> friend struct __BYPASSaddress_space;
 struct inode *host;
 struct radix_tree_root page_tree;
 spinlock_t tree_lock;
 unsigned int i_mmap_writable;
 struct prio_tree_root i_mmap;
 struct list_head i_mmap_nonlinear;
 spinlock_t i_mmap_lock;
 unsigned int truncate_count;
 unsigned long nrpages;
 unsigned long writeback_index;
 struct address_space_operations *a_ops;
 unsigned long flags;
 struct backing_dev_info *backing_dev_info;
 spinlock_t private_lock;
 struct list_head private_list;
 struct address_space *assoc_mapping;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((aligned(sizeof(long))));






struct block_device {
  template <typename, int = 0> struct __BYPASSblock_device {};
  template <typename, int> friend struct __BYPASSblock_device;
 dev_t bd_dev;
 struct inode * bd_inode;
 int bd_openers;
 struct mutex bd_mutex;
 struct semaphore bd_mount_sem;
 struct list_head bd_inodes;
 void * bd_holder;
 int bd_holders;

 struct list_head bd_holder_list;

 struct block_device * bd_contains;
 unsigned bd_block_size;
 struct hd_struct * bd_part;

 unsigned bd_part_count;
 int bd_invalidated;
 struct gendisk * bd_disk;
 struct list_head bd_list;
 struct backing_dev_info *bd_inode_backing_dev_info;






 unsigned long bd_private;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
int mapping_tagged(struct address_space *mapping, int tag);




static inline int mapping_mapped(struct address_space *mapping)
{
 return !prio_tree_empty(&mapping->i_mmap) ||
  !list_empty(&mapping->i_mmap_nonlinear);
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13address_space15i_mmap_writableE_1416_0 {
  typedef TJP__ZN13address_space15i_mmap_writableE_1416_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN13address_space15i_mmap_writableE_1416(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN13address_space15i_mmap_writableE_1416_0< unsigned int , ::address_space , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int mapping_writably_mapped(struct address_space *mapping)
{
 return __get__ZN13address_space15i_mmap_writableE_1416(&mapping->i_mmap_writable) != 0;
}
struct inode {
  template <typename, int = 0> struct __BYPASSinode {};
  template <typename, int> friend struct __BYPASSinode;
 struct hlist_node i_hash;
 struct list_head i_list;
 struct list_head i_sb_list;
 struct list_head i_dentry;
 unsigned long i_ino;
 atomic_t i_count;
 unsigned int i_nlink;
 uid_t i_uid;
 gid_t i_gid;
 dev_t i_rdev;
 u64 i_version;
 loff_t i_size;



 struct timespec i_atime;
 struct timespec i_mtime;
 struct timespec i_ctime;
 unsigned int i_blkbits;
 blkcnt_t i_blocks;
 unsigned short i_bytes;
 umode_t i_mode;
 spinlock_t i_lock;
 struct mutex i_mutex;
 struct rw_semaphore i_alloc_sem;
 struct inode_operations *i_op;
 struct file_operations *i_fop;
 struct super_block *i_sb;
 struct file_lock *i_flock;
 struct address_space *i_mapping;
 struct address_space i_data;

 struct dquot *i_dquot[2];

 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct block_device *i_bdev;
  struct cdev *i_cdev;
 };
 int i_cindex;

 __u32 i_generation;


 unsigned long i_dnotify_mask;
 struct dnotify_struct *i_dnotify;



 struct list_head inotify_watches;
 struct mutex inotify_mutex;


 unsigned long i_state;
 unsigned long dirtied_when;

 unsigned int i_flags;

 atomic_t i_writecount;

 void *i_security;

 void *i_private;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_QUOTA
};

extern void inode_double_lock(struct inode *inode1, struct inode *inode2);
extern void inode_double_unlock(struct inode *inode1, struct inode *inode2);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_1417_0 {
  typedef TJP__ZN5inode6i_sizeE_1417_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_1417(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_1417_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}
static inline loff_t i_size_read( struct inode *inode)
{
 return __get__ZN5inode6i_sizeE_1417(&inode->i_size);

}






static inline void i_size_write(struct inode *inode, loff_t i_size)
{
 inode->i_size = i_size;

}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_rdevE_1418_0 {
  typedef TJP__ZN5inode6i_rdevE_1418_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN5inode6i_rdevE_1418(unsigned int *source) {
  ::dev_t __result_buffer;
  typedef TJP__ZN5inode6i_rdevE_1418_0< ::dev_t , ::inode , ::dev_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dev_t &)__result_buffer;
}
static inline unsigned iminor( struct inode *inode)
{
 return ((unsigned int) ((__get__ZN5inode6i_rdevE_1418(&inode->i_rdev)) & ((1U << 20) - 1)));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_rdevE_1419_0 {
  typedef TJP__ZN5inode6i_rdevE_1419_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN5inode6i_rdevE_1419(unsigned int *source) {
  ::dev_t __result_buffer;
  typedef TJP__ZN5inode6i_rdevE_1419_0< ::dev_t , ::inode , ::dev_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dev_t &)__result_buffer;
}
static inline unsigned imajor( struct inode *inode)
{
 return ((unsigned int) ((__get__ZN5inode6i_rdevE_1419(&inode->i_rdev)) >> 20));
}

extern struct block_device *I_BDEV(struct inode *inode);

struct fown_struct {
  template <typename, int = 0> struct __BYPASSfown_struct {};
  template <typename, int> friend struct __BYPASSfown_struct;
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 uid_t uid, euid;
 int signum;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct file_ra_state {
  template <typename, int = 0> struct __BYPASSfile_ra_state {};
  template <typename, int> friend struct __BYPASSfile_ra_state;
 unsigned long start;
 unsigned int size;
 unsigned int async_size;


 unsigned int ra_pages;
 int mmap_miss;
 loff_t prev_pos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}




struct file {
  template <typename, int = 0> struct __BYPASSfile {};
  template <typename, int> friend struct __BYPASSfile;




 union {
  struct list_head fu_list;
  struct rcu_head fu_rcuhead;
 } f_u;
 struct path f_path;


 struct file_operations *f_op;
 atomic_long_t f_count;
 unsigned int f_flags;
 mode_t f_mode;
 loff_t f_pos;
 struct fown_struct f_owner;
 unsigned int f_uid, f_gid;
 struct file_ra_state f_ra;

 u64 f_version;

 void *f_security;


 void *private_data;



 struct list_head f_ep_links;
 spinlock_t f_ep_lock;

 struct address_space *f_mapping;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern spinlock_t files_lock;
static inline void file_take_write(struct file *filp) {}
static inline void file_release_write(struct file *filp) {}
static inline void file_reset_write(struct file *filp) {}
static inline void file_check_state(struct file *filp) {}
static inline int file_check_writeable(struct file *filp)
{
 return 0;
}
typedef struct files_struct *fl_owner_t;

struct file_lock_operations {
  template <typename, int = 0> struct __BYPASSfile_lock_operations {};
  template <typename, int> friend struct __BYPASSfile_lock_operations;
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct lock_manager_operations {
  template <typename, int = 0> struct __BYPASSlock_manager_operations {};
  template <typename, int> friend struct __BYPASSlock_manager_operations;
 int (*fl_compare_owner)(struct file_lock *, struct file_lock *);
 void (*fl_notify)(struct file_lock *);
 int (*fl_grant)(struct file_lock *, struct file_lock *, int);
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);
 void (*fl_break)(struct file_lock *);
 int (*fl_mylease)(struct file_lock *, struct file_lock *);
 int (*fl_change)(struct file_lock **, int);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







 enum nfs_stat {
 NFS_OK = 0,
 NFSERR_PERM = 1,
 NFSERR_NOENT = 2,
 NFSERR_IO = 5,
 NFSERR_NXIO = 6,
 NFSERR_EAGAIN = 11,
 NFSERR_ACCES = 13,
 NFSERR_EXIST = 17,
 NFSERR_XDEV = 18,
 NFSERR_NODEV = 19,
 NFSERR_NOTDIR = 20,
 NFSERR_ISDIR = 21,
 NFSERR_INVAL = 22,
 NFSERR_FBIG = 27,
 NFSERR_NOSPC = 28,
 NFSERR_ROFS = 30,
 NFSERR_MLINK = 31,
 NFSERR_OPNOTSUPP = 45,
 NFSERR_NAMETOOLONG = 63,
 NFSERR_NOTEMPTY = 66,
 NFSERR_DQUOT = 69,
 NFSERR_STALE = 70,
 NFSERR_REMOTE = 71,
 NFSERR_WFLUSH = 99,
 NFSERR_BADHANDLE = 10001,
 NFSERR_NOT_SYNC = 10002,
 NFSERR_BAD_COOKIE = 10003,
 NFSERR_NOTSUPP = 10004,
 NFSERR_TOOSMALL = 10005,
 NFSERR_SERVERFAULT = 10006,
 NFSERR_BADTYPE = 10007,
 NFSERR_JUKEBOX = 10008,
 NFSERR_SAME = 10009,
 NFSERR_DENIED = 10010,
 NFSERR_EXPIRED = 10011,
 NFSERR_LOCKED = 10012,
 NFSERR_GRACE = 10013,
 NFSERR_FHEXPIRED = 10014,
 NFSERR_SHARE_DENIED = 10015,
 NFSERR_WRONGSEC = 10016,
 NFSERR_CLID_INUSE = 10017,
 NFSERR_RESOURCE = 10018,
 NFSERR_MOVED = 10019,
 NFSERR_NOFILEHANDLE = 10020,
 NFSERR_MINOR_VERS_MISMATCH = 10021,
 NFSERR_STALE_CLIENTID = 10022,
 NFSERR_STALE_STATEID = 10023,
 NFSERR_OLD_STATEID = 10024,
 NFSERR_BAD_STATEID = 10025,
 NFSERR_BAD_SEQID = 10026,
 NFSERR_NOT_SAME = 10027,
 NFSERR_LOCK_RANGE = 10028,
 NFSERR_SYMLINK = 10029,
 NFSERR_RESTOREFH = 10030,
 NFSERR_LEASE_MOVED = 10031,
 NFSERR_ATTRNOTSUPP = 10032,
 NFSERR_NO_GRACE = 10033,
 NFSERR_RECLAIM_BAD = 10034,
 NFSERR_RECLAIM_CONFLICT = 10035,
 NFSERR_BAD_XDR = 10036,
 NFSERR_LOCKS_HELD = 10037,
 NFSERR_OPENMODE = 10038,
 NFSERR_BADOWNER = 10039,
 NFSERR_BADCHAR = 10040,
 NFSERR_BADNAME = 10041,
 NFSERR_BAD_RANGE = 10042,
 NFSERR_LOCK_NOTSUPP = 10043,
 NFSERR_OP_ILLEGAL = 10044,
 NFSERR_DEADLOCK = 10045,
 NFSERR_FILE_OPEN = 10046,
 NFSERR_ADMIN_REVOKED = 10047,
 NFSERR_CB_PATH_DOWN = 10048,
 NFSERR_REPLAY_ME = 10049
};



enum nfs_ftype {
 NFNON = 0,
 NFREG = 1,
 NFDIR = 2,
 NFBLK = 3,
 NFCHR = 4,
 NFLNK = 5,
 NFSOCK = 6,
 NFBAD = 7,
 NFFIFO = 8
};


typedef u32 rpc_authflavor_t;

enum rpc_auth_flavors {
 RPC_AUTH_NULL = 0,
 RPC_AUTH_UNIX = 1,
 RPC_AUTH_SHORT = 2,
 RPC_AUTH_DES = 3,
 RPC_AUTH_KRB = 4,
 RPC_AUTH_GSS = 6,
 RPC_AUTH_MAXFLAVOR = 8,

 RPC_AUTH_GSS_KRB5 = 390003,
 RPC_AUTH_GSS_KRB5I = 390004,
 RPC_AUTH_GSS_KRB5P = 390005,
 RPC_AUTH_GSS_LKEY = 390006,
 RPC_AUTH_GSS_LKEYI = 390007,
 RPC_AUTH_GSS_LKEYP = 390008,
 RPC_AUTH_GSS_SPKM = 390009,
 RPC_AUTH_GSS_SPKMI = 390010,
 RPC_AUTH_GSS_SPKMP = 390011,
};




enum rpc_msg_type {
 RPC_CALL = 0,
 RPC_REPLY = 1
};

enum rpc_reply_stat {
 RPC_MSG_ACCEPTED = 0,
 RPC_MSG_DENIED = 1
};

enum rpc_accept_stat {
 RPC_SUCCESS = 0,
 RPC_PROG_UNAVAIL = 1,
 RPC_PROG_MISMATCH = 2,
 RPC_PROC_UNAVAIL = 3,
 RPC_GARBAGE_ARGS = 4,
 RPC_SYSTEM_ERR = 5,

 RPC_DROP_REPLY = 60000,
};

enum rpc_reject_stat {
 RPC_MISMATCH = 0,
 RPC_AUTH_ERROR = 1
};

enum rpc_auth_stat {
 RPC_AUTH_OK = 0,
 RPC_AUTH_BADCRED = 1,
 RPC_AUTH_REJECTEDCRED = 2,
 RPC_AUTH_BADVERF = 3,
 RPC_AUTH_REJECTEDVERF = 4,
 RPC_AUTH_TOOWEAK = 5,

 RPCSEC_GSS_CREDPROBLEM = 13,
 RPCSEC_GSS_CTXPROBLEM = 14
};
typedef __be32 rpc_fraghdr;






struct nfs_fh {
  template <typename, int = 0> struct __BYPASSnfs_fh {};
  template <typename, int> friend struct __BYPASSnfs_fh;
 unsigned short size;
 unsigned char data[128];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





static inline int nfs_compare_fh( struct nfs_fh *a, struct nfs_fh *b)
{
 return a->size != b->size || memcmp(a->data, b->data, a->size) != 0;
}

static inline void nfs_copy_fh(struct nfs_fh *target, struct nfs_fh *source)
{
 target->size = source->size;
 memcpy(target->data, source->data, source->size);
}
enum nfs3_stable_how {
 NFS_UNSTABLE = 0,
 NFS_DATA_SYNC = 1,
 NFS_FILE_SYNC = 2
};

struct nlm_lockowner;




struct nfs_lock_info {
  template <typename, int = 0> struct __BYPASSnfs_lock_info {};
  template <typename, int> friend struct __BYPASSnfs_lock_info;
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
  template <typename, int = 0> struct __BYPASSnfs4_lock_info {};
  template <typename, int> friend struct __BYPASSnfs4_lock_info;
 struct nfs4_lock_state *owner;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct file_lock {
  template <typename, int = 0> struct __BYPASSfile_lock {};
  template <typename, int> friend struct __BYPASSfile_lock;
 struct file_lock *fl_next;
 struct list_head fl_link;
 struct list_head fl_block;
 fl_owner_t fl_owner;
 unsigned char fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 struct pid *fl_nspid;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;
 unsigned long fl_break_time;

 struct file_lock_operations *fl_ops;
 struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} afs;
 } fl_u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern int fcntl_getlk(struct file *, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern void send_sigio(struct fown_struct *fown, int fd, int band);
extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


extern int do_sync_mapping_range(struct address_space *mapping, loff_t offset,
   loff_t endbyte, unsigned int flags);


extern void locks_init_lock(struct file_lock *);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void __locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_flock(struct file *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int posix_lock_file_wait(struct file *, struct file_lock *);
extern int posix_unblock_lock(struct file *, struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int flock_lock_file_wait(struct file *filp, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags);
extern void lease_get_mtime(struct inode *, struct timespec *time);
extern int generic_setlease(struct file *, long, struct file_lock **);
extern int vfs_setlease(struct file *, long, struct file_lock **);
extern int lease_modify(struct file_lock **, int);
extern int lock_may_read(struct inode *, loff_t start, unsigned long count);
extern int lock_may_write(struct inode *, loff_t start, unsigned long count);
extern struct seq_operations locks_seq_operations;

struct fasync_struct {
  template <typename, int = 0> struct __BYPASSfasync_struct {};
  template <typename, int> friend struct __BYPASSfasync_struct;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);

extern void kill_fasync(struct fasync_struct **, int, int);

extern void __kill_fasync(struct fasync_struct *, int, int);

extern int __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);
extern struct list_head super_blocks;
extern spinlock_t sb_lock;



struct super_block {
  template <typename, int = 0> struct __BYPASSsuper_block {};
  template <typename, int> friend struct __BYPASSsuper_block;
 struct list_head s_list;
 dev_t s_dev;
 unsigned long s_blocksize;
 unsigned char s_blocksize_bits;
 unsigned char s_dirt;
 unsigned long long s_maxbytes;
 struct file_system_type *s_type;
 struct super_operations *s_op;
 struct dquot_operations *dq_op;
  struct quotactl_ops *s_qcop;
 struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 struct mutex s_lock;
 int s_count;
 int s_need_sync_fs;
 atomic_t s_active;

 void *s_security;

 struct xattr_handler **s_xattr;

 struct list_head s_inodes;
 struct list_head s_dirty;
 struct list_head s_io;
 struct list_head s_more_io;
 struct hlist_head s_anon;
 struct list_head s_files;

 struct list_head s_dentry_lru;
 int s_nr_dentry_unused;

 struct block_device *s_bdev;
 struct mtd_info *s_mtd;
 struct list_head s_instances;
 struct quota_info s_dquot;

 int s_frozen;
 wait_queue_head_t s_wait_unfrozen;

 char s_id[32];

 void *s_fs_info;





 struct mutex s_vfs_rename_mutex;



 u32 s_time_gran;





 char *s_subtype;





 char *s_options;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct timespec current_fs_time(struct super_block *sb);




enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_TRANS = 2,
};
extern void lock_super(struct super_block *);
extern void unlock_super(struct super_block *);




extern int vfs_permission(struct nameidata *, int);
extern int vfs_create(struct inode *, struct dentry *, int, struct nameidata *);
extern int vfs_mkdir(struct inode *, struct dentry *, int);
extern int vfs_mknod(struct inode *, struct dentry *, int, dev_t);
extern int vfs_symlink(struct inode *, struct dentry *, char *);
extern int vfs_link(struct dentry *, struct inode *, struct dentry *);
extern int vfs_rmdir(struct inode *, struct dentry *);
extern int vfs_unlink(struct inode *, struct dentry *);
extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *);




extern void dentry_unhash(struct dentry *dentry);




extern int file_permission(struct file *, int);
int generic_osync_inode(struct inode *, struct address_space *, int);







typedef int (*filldir_t)(void *, char *, int, loff_t, u64, unsigned);

struct block_device_operations {
  template <typename, int = 0> struct __BYPASSblock_device_operations {};
  template <typename, int> friend struct __BYPASSblock_device_operations;
 int (*open) (struct inode *, struct file *);
 int (*release) (struct inode *, struct file *);
 int (*ioctl) (struct inode *, struct file *, unsigned, unsigned long);
 long (*unlocked_ioctl) (struct file *, unsigned, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned, unsigned long);
 int (*direct_access) (struct block_device *, sector_t,
      void **, unsigned long *);
 int (*media_changed) (struct gendisk *);
 int (*revalidate_disk) (struct gendisk *);
 int (*getgeo)(struct block_device *, struct hd_geometry *);
 struct module *owner;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct file_operations {
  template <typename, int = 0> struct __BYPASSfile_operations {};
  template <typename, int> friend struct __BYPASSfile_operations;
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, char *, size_t, loff_t *);
 ssize_t (*aio_read) (struct kiocb *, struct iovec *, unsigned long, loff_t);
 ssize_t (*aio_write) (struct kiocb *, struct iovec *, unsigned long, loff_t);
 int (*readdir) (struct file *, void *, filldir_t);
 unsigned int (*poll) (struct file *, struct poll_table_struct *);
 int (*ioctl) (struct inode *, struct file *, unsigned int, unsigned long);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, struct dentry *, int datasync);
 int (*aio_fsync) (struct kiocb *, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*dir_notify)(struct file *filp, unsigned long arg);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inode_operations {
  template <typename, int = 0> struct __BYPASSinode_operations {};
  template <typename, int> friend struct __BYPASSinode_operations;
 int (*create) (struct inode *,struct dentry *,int, struct nameidata *);
 struct dentry * (*lookup) (struct inode *,struct dentry *, struct nameidata *);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct inode *,struct dentry *, char *);
 int (*mkdir) (struct inode *,struct dentry *,int);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct inode *,struct dentry *,int,dev_t);
 int (*rename) (struct inode *, struct dentry *,
   struct inode *, struct dentry *);
 int (*readlink) (struct dentry *, char *,int);
 void * (*follow_link) (struct dentry *, struct nameidata *);
 void (*put_link) (struct dentry *, struct nameidata *, void *);
 void (*truncate) (struct inode *);
 int (*permission) (struct inode *, int);
 int (*setattr) (struct dentry *, struct iattr *);
 int (*getattr) (struct vfsmount *mnt, struct dentry *, struct kstat *);
 int (*setxattr) (struct dentry *, char *, void *,size_t,int);
 ssize_t (*getxattr) (struct dentry *, char *, void *, size_t);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*removexattr) (struct dentry *, char *);
 void (*truncate_range)(struct inode *, loff_t, loff_t);
 long (*fallocate)(struct inode *inode, int mode, loff_t offset,
     loff_t len);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct seq_file;

ssize_t rw_copy_check_uvector(int type, struct iovec * uvector,
    unsigned long nr_segs, unsigned long fast_segs,
    struct iovec *fast_pointer,
    struct iovec **ret_pointer);

extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_readv(struct file *, struct iovec *,
  unsigned long, loff_t *);
extern ssize_t vfs_writev(struct file *, struct iovec *,
  unsigned long, loff_t *);

struct super_operations {
  template <typename, int = 0> struct __BYPASSsuper_operations {};
  template <typename, int> friend struct __BYPASSsuper_operations;
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);

    void (*dirty_inode) (struct inode *);
 int (*write_inode) (struct inode *, int);
 void (*drop_inode) (struct inode *);
 void (*delete_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 void (*write_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 void (*write_super_lockfs) (struct super_block *);
 void (*unlockfs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*clear_inode) (struct inode *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct vfsmount *);
 int (*show_stats)(struct seq_file *, struct vfsmount *);

 ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
 ssize_t (*quota_write)(struct super_block *, int, char *, size_t, loff_t);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void __mark_inode_dirty(struct inode *, int);
static inline void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 | 2 | 4));
}

static inline void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, 1);
}
static inline void inc_nlink(struct inode *inode)
{
 inode->i_nlink++;
}

static inline void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}
static inline void drop_nlink(struct inode *inode)
{
 inode->i_nlink--;
}
static inline void clear_nlink(struct inode *inode)
{
 inode->i_nlink = 0;
}

static inline void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}
static inline void inode_inc_iversion(struct inode *inode)
{
       ;
       inode->i_version++;
       ;
}

extern void touch_atime(struct vfsmount *mnt, struct dentry *dentry);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4path3mntE_1433_0 {
  typedef TJP__ZN4path3mntE_1433_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline vfsmount * __get__ZN4path3mntE_1433(vfsmount * *source) {
  ::vfsmount *__result_buffer;
  typedef TJP__ZN4path3mntE_1433_0< ::vfsmount *, ::path , ::vfsmount * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::vfsmount *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4path6dentryE_1435_0 {
  typedef TJP__ZN4path6dentryE_1435_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dentry * __get__ZN4path6dentryE_1435(dentry * *source) {
  ::dentry *__result_buffer;
  typedef TJP__ZN4path6dentryE_1435_0< ::dentry *, ::path , ::dentry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dentry *&)__result_buffer;
}
static inline void file_accessed(struct file *file)
{
 if (!(file->f_flags & 01000000))
  touch_atime(__get__ZN4path3mntE_1433(&file->f_path.mnt), __get__ZN4path6dentryE_1435(&file->f_path.dentry));
}

int sync_inode(struct inode *inode, struct writeback_control *wbc);

struct file_system_type {
  template <typename, int = 0> struct __BYPASSfile_system_type {};
  template <typename, int> friend struct __BYPASSfile_system_type;
 char *name;
 int fs_flags;
 int (*get_sb) (struct file_system_type *, int,
         char *, void *, struct vfsmount *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct list_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key i_mutex_dir_key;
 struct lock_class_key i_alloc_sem_key;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int get_sb_bdev(struct file_system_type *fs_type,
 int flags, char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int),
 struct vfsmount *mnt);
extern int get_sb_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int),
 struct vfsmount *mnt);
extern int get_sb_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int),
 struct vfsmount *mnt);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   void *data);
extern int get_sb_pseudo(struct file_system_type *, char *,
 struct super_operations *ops, unsigned long,
 struct vfsmount *mnt);
extern int simple_set_mnt(struct vfsmount *mnt, struct super_block *sb);
int __put_super_and_need_restart(struct super_block *sb);
void unnamed_dev_init(void);







extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount_data(struct file_system_type *, void *data);

extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount(char *, char *, char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(struct vfsmount *, struct dentry *);
extern void drop_collected_mounts(struct vfsmount *);

extern int vfs_statfs(struct dentry *, struct kstatfs *);


extern struct kobject *fs_kobj;




extern int locks_mandatory_locked(struct inode *);
extern int locks_mandatory_area(int, struct inode *, struct file *, loff_t, size_t);







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_1437_0 {
  typedef TJP__ZN5inode6i_modeE_1437_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_1437(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_1437_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}
static inline int __mandatory_lock(struct inode *ino)
{
 return (__get__ZN5inode6i_modeE_1437(&ino->i_mode) & (0002000 | 00010)) == 0002000;
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11super_block7s_flagsE_1438_0 {
  typedef TJP__ZN11super_block7s_flagsE_1438_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11super_block7s_flagsE_1438(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN11super_block7s_flagsE_1438_0< unsigned long int , ::super_block , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode4i_sbE_1439_0 {
  typedef TJP__ZN5inode4i_sbE_1439_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline super_block * __get__ZN5inode4i_sbE_1439(super_block * *source) {
  ::super_block *__result_buffer;
  typedef TJP__ZN5inode4i_sbE_1439_0< ::super_block *, ::inode , ::super_block * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::super_block *&)__result_buffer;
}
static inline int mandatory_lock(struct inode *ino)
{
 return (__get__ZN11super_block7s_flagsE_1438(&__get__ZN5inode4i_sbE_1439(&(ino)->i_sb)->s_flags) & (64)) && __mandatory_lock(ino);
}

static inline int locks_verify_locked(struct inode *inode)
{
 if (mandatory_lock(inode))
  return locks_mandatory_locked(inode);
 return 0;
}

extern int rw_verify_area(int, struct file *, loff_t *, size_t);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode7i_flockE_1440_0 {
  typedef TJP__ZN5inode7i_flockE_1440_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file_lock * __get__ZN5inode7i_flockE_1440(file_lock * *source) {
  ::file_lock *__result_buffer;
  typedef TJP__ZN5inode7i_flockE_1440_0< ::file_lock *, ::inode , ::file_lock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file_lock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_1441_0 {
  typedef TJP__ZN5inode6i_sizeE_1441_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_1441(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_1441_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_1442_0 {
  typedef TJP__ZN5inode6i_sizeE_1442_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_1442(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_1442_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_1443_0 {
  typedef TJP__ZN5inode6i_sizeE_1443_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_1443(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_1443_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_1444_0 {
  typedef TJP__ZN5inode6i_sizeE_1444_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_1444(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_1444_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_1445_0 {
  typedef TJP__ZN5inode6i_sizeE_1445_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_1445(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_1445_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}
static inline int locks_verify_truncate(struct inode *inode,
        struct file *filp,
        loff_t size)
{
 if (__get__ZN5inode7i_flockE_1440(&inode->i_flock) && mandatory_lock(inode))
  return locks_mandatory_area(
   2, inode, filp,
   size < __get__ZN5inode6i_sizeE_1441(&inode->i_size) ? size : __get__ZN5inode6i_sizeE_1442(&inode->i_size),
   (size < __get__ZN5inode6i_sizeE_1443(&inode->i_size) ? __get__ZN5inode6i_sizeE_1444(&inode->i_size) - size
    : size - __get__ZN5inode6i_sizeE_1445(&inode->i_size))
  );
 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode7i_flockE_1446_0 {
  typedef TJP__ZN5inode7i_flockE_1446_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file_lock * __get__ZN5inode7i_flockE_1446(file_lock * *source) {
  ::file_lock *__result_buffer;
  typedef TJP__ZN5inode7i_flockE_1446_0< ::file_lock *, ::inode , ::file_lock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file_lock *&)__result_buffer;
}
static inline int break_lease(struct inode *inode, unsigned int mode)
{
 if (__get__ZN5inode7i_flockE_1446(&inode->i_flock))
  return __break_lease(inode, mode);
 return 0;
}



extern int do_truncate(struct dentry *, loff_t start, unsigned int time_attrs,
         struct file *filp);
extern long do_sys_open(int dfd, char *filename, int flags,
   int mode);
extern struct file *filp_open( char *, int, int);
extern struct file * dentry_open(struct dentry *, struct vfsmount *, int);
extern int filp_close(struct file *, fl_owner_t id);
extern char * getname( char *);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init_early(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init(unsigned long);

extern struct kmem_cache *names_cachep;






extern void putname( char *name);



extern int register_blkdev(unsigned int, char *);
extern void unregister_blkdev(unsigned int, char *);
extern struct block_device *bdget(dev_t);
extern void bd_set_size(struct block_device *, loff_t size);
extern void bd_forget(struct inode *inode);
extern void bdput(struct block_device *);
extern struct block_device *open_by_devnum(dev_t, unsigned);



extern struct file_operations def_blk_fops;
extern struct file_operations def_chr_fops;
extern struct file_operations bad_sock_fops;
extern struct file_operations def_fifo_fops;

extern int ioctl_by_bdev(struct block_device *, unsigned, unsigned long);
extern int blkdev_ioctl(struct inode *, struct file *, unsigned, unsigned long);
extern int blkdev_driver_ioctl(struct inode *inode, struct file *file,
          struct gendisk *disk, unsigned cmd,
          unsigned long arg);
extern long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
extern int blkdev_get(struct block_device *, mode_t, unsigned);
extern int blkdev_put(struct block_device *);
extern int bd_claim(struct block_device *, void *);
extern void bd_release(struct block_device *);

extern int bd_claim_by_disk(struct block_device *, void *, struct gendisk *);
extern void bd_release_from_disk(struct block_device *, struct gendisk *);
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, char *);
extern int register_chrdev_region(dev_t, unsigned, char *);
extern int register_chrdev(unsigned int, char *,
      struct file_operations *);
extern void unregister_chrdev(unsigned int, char *);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);






extern char *__bdevname(dev_t, char *buffer);
extern char *bdevname(struct block_device *bdev, char *buffer);
extern struct block_device *lookup_bdev( char *);
extern struct block_device *open_bdev_excl( char *, int, void *);
extern void close_bdev_excl(struct block_device *);
extern void blkdev_show(struct seq_file *,off_t);




extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern int is_bad_inode(struct inode *);

extern struct file_operations read_pipefifo_fops;
extern struct file_operations write_pipefifo_fops;
extern struct file_operations rdwr_pipefifo_fops;

extern int fs_may_remount_ro(struct super_block *);
extern int check_disk_change(struct block_device *);
extern int __invalidate_device(struct block_device *);
extern int invalidate_partition(struct gendisk *, int);

extern int invalidate_inodes(struct super_block *);
unsigned long __invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end,
     bool be_atomic);
unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);

static inline unsigned long
invalidate_inode_pages(struct address_space *mapping)
{
 return invalidate_mapping_pages(mapping, 0, ~0UL);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_1447_0 {
  typedef TJP__ZN5inode6i_modeE_1447_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_1447(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_1447_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_1448_0 {
  typedef TJP__ZN5inode6i_modeE_1448_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_1448(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_1448_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_1449_0 {
  typedef TJP__ZN5inode6i_modeE_1449_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_1449(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_1449_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode9i_mappingE_1450_0 {
  typedef TJP__ZN5inode9i_mappingE_1450_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline address_space * __get__ZN5inode9i_mappingE_1450(address_space * *source) {
  ::address_space *__result_buffer;
  typedef TJP__ZN5inode9i_mappingE_1450_0< ::address_space *, ::inode , ::address_space * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::address_space *&)__result_buffer;
}
static inline void invalidate_remote_inode(struct inode *inode)
{
 if ((((__get__ZN5inode6i_modeE_1447(&inode->i_mode)) & 00170000) == 0100000) || (((__get__ZN5inode6i_modeE_1448(&inode->i_mode)) & 00170000) == 0040000) ||
     (((__get__ZN5inode6i_modeE_1449(&inode->i_mode)) & 00170000) == 0120000))
  invalidate_mapping_pages(__get__ZN5inode9i_mappingE_1450(&inode->i_mapping), 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern void generic_sync_sb_inodes(struct super_block *sb,
    struct writeback_control *wbc);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait(struct address_space *);
extern int filemap_write_and_wait(struct address_space *mapping);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int wait_on_page_writeback_range(struct address_space *mapping,
    unsigned long start, unsigned long end);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);

extern long do_fsync(struct file *file, int datasync);
extern void sync_supers(void);
extern void sync_filesystems(int wait);
extern void __fsync_super(struct super_block *sb);
extern void emergency_sync(void);
extern void emergency_remount(void);
extern int do_remount_sb(struct super_block *sb, int flags,
    void *data, int force);

extern sector_t bmap(struct inode *, sector_t);

extern int notify_change(struct dentry *, struct iattr *);
extern int inode_permission(struct inode *, int);
extern int generic_permission(struct inode *, int,
  int (*check_acl)(struct inode *, int));

extern int get_write_access(struct inode *);
extern int deny_write_access(struct file *);
static inline void put_write_access(struct inode * inode)
{
 ;
}
static inline void allow_write_access(struct file *file)
{
 if (file)
  ;
}
extern int do_pipe(int *);
extern int do_pipe_flags(int *, int);
extern struct file *create_read_pipe(struct file *f, int flags);
extern struct file *create_write_pipe(int flags);
extern void free_write_pipe(struct file *);

extern struct file *do_filp_open(int dfd, char *pathname,
  int open_flag, int mode);
extern int may_open(struct nameidata *, int, int);

extern int kernel_read(struct file *, unsigned long, char *, unsigned long);
extern struct file * open_exec( char *);


extern int is_subdir(struct dentry *, struct dentry *);
extern ino_t find_inode_number(struct dentry *, struct qstr *);




extern loff_t default_llseek(struct file *file, loff_t offset, int origin);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int origin);

extern void inode_init_once(struct inode *);
extern void iput(struct inode *);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern void generic_delete_inode(struct inode *inode);
extern void generic_drop_inode(struct inode *inode);

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern void unlock_new_inode(struct inode *);

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void destroy_inode(struct inode *);
extern struct inode *new_inode(struct super_block *);
extern int should_remove_suid(struct dentry *);
extern int file_remove_suid(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);
extern void remove_inode_hash(struct inode *);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode5i_inoE_1451_0 {
  typedef TJP__ZN5inode5i_inoE_1451_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN5inode5i_inoE_1451(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN5inode5i_inoE_1451_0< unsigned long int , ::inode , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void insert_inode_hash(struct inode *inode) {
 __insert_inode_hash(inode, __get__ZN5inode5i_inoE_1451(&inode->i_ino));
}

extern struct file * get_empty_filp(void);
extern void file_move(struct file *f, struct list_head *list);
extern void file_kill(struct file *f);

struct bio;
extern void submit_bio(int, struct bio *);
extern int bdev_read_only(struct block_device *);

extern int set_blocksize(struct block_device *, int);
extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);
extern int sb_has_dirty_inodes(struct super_block *);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size);
int generic_write_checks(struct file *file, loff_t *pos, size_t *count, int isblk);
extern ssize_t generic_file_aio_read(struct kiocb *, struct iovec *, unsigned long, loff_t);
extern ssize_t generic_file_aio_write(struct kiocb *, struct iovec *, unsigned long, loff_t);
extern ssize_t generic_file_aio_write_nolock(struct kiocb *, struct iovec *,
  unsigned long, loff_t);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iovec *,
  unsigned long *, loff_t, loff_t *, size_t, size_t);
extern ssize_t generic_file_buffered_write(struct kiocb *, struct iovec *,
  unsigned long, loff_t, loff_t *, size_t, ssize_t);
extern ssize_t do_sync_read(struct file *filp, char *buf, size_t len, loff_t *ppos);
extern ssize_t do_sync_write(struct file *filp, char *buf, size_t len, loff_t *ppos);
extern int generic_segment_checks( struct iovec *iov,
  unsigned long *nr_segs, size_t *count, int access_flags);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t generic_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_file_splice_write_nolock(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  size_t len, unsigned int flags);

extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t no_llseek(struct file *file, loff_t offset, int origin);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int origin);
extern loff_t generic_file_llseek_unlocked(struct file *file, loff_t offset,
   int origin);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);


extern ssize_t xip_file_read(struct file *filp, char *buf, size_t len,
        loff_t *ppos);
extern int xip_file_mmap(struct file * file, struct vm_area_struct * vma);
extern ssize_t xip_file_write(struct file *filp, char *buf,
         size_t len, loff_t *ppos);
extern int xip_truncate_page(struct address_space *mapping, loff_t from);
ssize_t __blockdev_direct_IO(int rw, struct kiocb *iocb, struct inode *inode,
 struct block_device *bdev, struct iovec *iov, loff_t offset,
 unsigned long nr_segs, get_block_t get_block, dio_iodone_t end_io,
 int lock_type);

enum {
 DIO_LOCKING = 1,
 DIO_NO_LOCKING,
 DIO_OWN_LOCKING,
};

static inline ssize_t blockdev_direct_IO(int rw, struct kiocb *iocb,
 struct inode *inode, struct block_device *bdev, struct iovec *iov,
 loff_t offset, unsigned long nr_segs, get_block_t get_block,
 dio_iodone_t end_io)
{
 return __blockdev_direct_IO(rw, iocb, inode, bdev, iov, offset,
    nr_segs, get_block, end_io, DIO_LOCKING);
}

static inline ssize_t blockdev_direct_IO_no_locking(int rw, struct kiocb *iocb,
 struct inode *inode, struct block_device *bdev, struct iovec *iov,
 loff_t offset, unsigned long nr_segs, get_block_t get_block,
 dio_iodone_t end_io)
{
 return __blockdev_direct_IO(rw, iocb, inode, bdev, iov, offset,
    nr_segs, get_block, end_io, DIO_NO_LOCKING);
}

static inline ssize_t blockdev_direct_IO_own_locking(int rw, struct kiocb *iocb,
 struct inode *inode, struct block_device *bdev, struct iovec *iov,
 loff_t offset, unsigned long nr_segs, get_block_t get_block,
 dio_iodone_t end_io)
{
 return __blockdev_direct_IO(rw, iocb, inode, bdev, iov, offset,
    nr_segs, get_block, end_io, DIO_OWN_LOCKING);
}


extern struct file_operations generic_ro_fops;



extern int vfs_readlink(struct dentry *, char *, int, char *);
extern int vfs_follow_link(struct nameidata *, char *);
extern int page_readlink(struct dentry *, char *, int);
extern void *page_follow_link_light(struct dentry *, struct nameidata *);
extern void page_put_link(struct dentry *, struct nameidata *, void *);
extern int __page_symlink(struct inode *inode, char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, char *symname, int len);
extern struct inode_operations page_symlink_inode_operations;
extern int generic_readlink(struct dentry *, char *, int);
extern void generic_fillattr(struct inode *, struct kstat *);
extern int vfs_getattr(struct vfsmount *, struct dentry *, struct kstat *);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);

extern int vfs_readdir(struct file *, filldir_t, void *);

extern int vfs_stat(char *, struct kstat *);
extern int vfs_lstat(char *, struct kstat *);
extern int vfs_stat_fd(int dfd, char *, struct kstat *);
extern int vfs_lstat_fd(int dfd, char *, struct kstat *);
extern int vfs_fstat(unsigned int, struct kstat *);

extern int do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd,
      unsigned long arg);

extern void get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type( char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *user_get_super(dev_t);
extern void drop_super(struct super_block *sb);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, void *, filldir_t);
extern int simple_getattr(struct vfsmount *, struct dentry *, struct kstat *);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename(struct inode *, struct dentry *, struct inode *, struct dentry *);
extern int simple_sync_file(struct file *, struct dentry *, int);
extern int simple_empty(struct dentry *);
extern int simple_readpage(struct file *file, struct page *page);
extern int simple_prepare_write(struct file *file, struct page *page,
   unsigned offset, unsigned to);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern int simple_write_end(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned copied,
   struct page *page, void *fsdata);

extern struct dentry *simple_lookup(struct inode *, struct dentry *, struct nameidata *);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern struct file_operations simple_dir_operations;
extern struct inode_operations simple_dir_inode_operations;
struct tree_descr {
  template <typename, int = 0> struct __BYPASStree_descr {};
  template <typename, int> friend struct __BYPASStree_descr; char *name; struct file_operations *ops; int mode; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dentry *d_alloc_name(struct dentry *, char *);
extern int simple_fill_super(struct super_block *, int, struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, void *from, size_t available);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *);




extern int inode_change_ok(struct inode *, struct iattr *);
extern int __attribute__((warn_unused_result)) inode_setattr(struct inode *, struct iattr *);

extern void file_update_time(struct file *file);

extern int generic_show_options(struct seq_file *m, struct vfsmount *mnt);
extern void save_mount_options(struct super_block *sb, char *options);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode5i_inoE_1455_0 {
  typedef TJP__ZN5inode5i_inoE_1455_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN5inode5i_inoE_1455(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN5inode5i_inoE_1455_0< unsigned long int , ::inode , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_inodeE_1456_0 {
  typedef TJP__ZN6dentry7d_inodeE_1456_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inode * __get__ZN6dentry7d_inodeE_1456(inode * *source) {
  ::inode *__result_buffer;
  typedef TJP__ZN6dentry7d_inodeE_1456_0< ::inode *, ::dentry , ::inode * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inode *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry8d_parentE_1457_0 {
  typedef TJP__ZN6dentry8d_parentE_1457_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dentry * __get__ZN6dentry8d_parentE_1457(dentry * *source) {
  ::dentry *__result_buffer;
  typedef TJP__ZN6dentry8d_parentE_1457_0< ::dentry *, ::dentry , ::dentry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dentry *&)__result_buffer;
}
static inline ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;

 ;
 res = __get__ZN5inode5i_inoE_1455(&__get__ZN6dentry7d_inodeE_1456(&__get__ZN6dentry8d_parentE_1457(&dentry->d_parent)->d_inode)->i_ino);
 ;
 return res;
}







struct simple_transaction_argresp {
  template <typename, int = 0> struct __BYPASSsimple_transaction_argresp {};
  template <typename, int> friend struct __BYPASSsimple_transaction_argresp;
 ssize_t size;
 char data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



char *simple_transaction_get(struct file *file, char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

static inline void simple_transaction_set(struct file *file, size_t n)
{
 struct simple_transaction_argresp *ar = file->private_data;

 ;





 ;
 ar->size = n;
}
static inline void __attribute__((format(printf, 1, 2)))
__simple_attr_check_format( char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, char *buf,
     size_t len, loff_t *ppos);



static inline char *alloc_secdata(void)
{
 return (char *)get_zeroed_page(((( gfp_t)0x10u) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}

static inline void free_secdata(void *secdata)
{
 free_pages(((unsigned long)secdata),0);
}
struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write, struct file *filp,
    void *buffer, size_t *lenp, loff_t *ppos);

int get_filesystem_list(char * buf);





struct pt_regs;
struct linux_binprm{
  template <typename, int = 0> struct __BYPASSlinux_binprm {};
  template <typename, int> friend struct __BYPASSlinux_binprm;
 char buf[128];

 struct vm_area_struct *vma;




 struct mm_struct *mm;
 unsigned long p;
 unsigned int sh_bang:1,
       misc_bang:1;
 unsigned int recursion_depth;
 struct file * file;
 int e_uid, e_gid;
 kernel_cap_t cap_post_exec_permitted;
 bool cap_effective;
 void *security;
 int argc, envc;
 char * filename;
 char * interp;


 unsigned interp_flags;
 unsigned interp_data;
 unsigned long loader, exec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct linux_binfmt {
  template <typename, int = 0> struct __BYPASSlinux_binfmt {};
  template <typename, int> friend struct __BYPASSlinux_binfmt;
 struct list_head lh;
 struct module *module;
 int (*load_binary)(struct linux_binprm *, struct pt_regs * regs);
 int (*load_shlib)(struct file *);
 int (*core_dump)(long signr, struct pt_regs *regs, struct file *file, unsigned long limit);
 unsigned long min_coredump;
 int hasvdso;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int register_binfmt(struct linux_binfmt *);
extern void unregister_binfmt(struct linux_binfmt *);

extern int prepare_binprm(struct linux_binprm *);
extern int __attribute__((warn_unused_result)) remove_arg_zero(struct linux_binprm *);
extern int search_binary_handler(struct linux_binprm *,struct pt_regs *);
extern int flush_old_exec(struct linux_binprm * bprm);

extern int suid_dumpable;
extern int setup_arg_pages(struct linux_binprm * bprm,
      unsigned long stack_top,
      int executable_stack);
extern int bprm_mm_init(struct linux_binprm *bprm);
extern int copy_strings_kernel(int argc,char ** argv,struct linux_binprm *bprm);
extern void compute_creds(struct linux_binprm *binprm);
extern int do_coredump(long signr, int exit_code, struct pt_regs * regs);
extern int set_binfmt(struct linux_binfmt *_new);
extern void free_bprm(struct linux_binprm *);






struct shmid_ds {
  template <typename, int = 0> struct __BYPASSshmid_ds {};
  template <typename, int> friend struct __BYPASSshmid_ds;
 struct ipc_perm shm_perm;
 int shm_segsz;
 __kernel_time_t shm_atime;
 __kernel_time_t shm_dtime;
 __kernel_time_t shm_ctime;
 __kernel_ipc_pid_t shm_cpid;
 __kernel_ipc_pid_t shm_lpid;
 unsigned short shm_nattch;
 unsigned short shm_unused;
 void *shm_unused2;
 void *shm_unused3;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct shmid64_ds {
  template <typename, int = 0> struct __BYPASSshmid64_ds {};
  template <typename, int> friend struct __BYPASSshmid64_ds;
 struct ipc64_perm shm_perm;
 size_t shm_segsz;
 __kernel_time_t shm_atime;



 __kernel_time_t shm_dtime;



 __kernel_time_t shm_ctime;



 __kernel_pid_t shm_cpid;
 __kernel_pid_t shm_lpid;
 unsigned long shm_nattch;
 unsigned long __unused4;
 unsigned long __unused5;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct shminfo64 {
  template <typename, int = 0> struct __BYPASSshminfo64 {};
  template <typename, int> friend struct __BYPASSshminfo64;
 unsigned long shmmax;
 unsigned long shmmin;
 unsigned long shmmni;
 unsigned long shmseg;
 unsigned long shmall;
 unsigned long __unused1;
 unsigned long __unused2;
 unsigned long __unused3;
 unsigned long __unused4;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct shminfo {
  template <typename, int = 0> struct __BYPASSshminfo {};
  template <typename, int> friend struct __BYPASSshminfo;
 int shmmax;
 int shmmin;
 int shmmni;
 int shmseg;
 int shmall;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct shm_info {
  template <typename, int = 0> struct __BYPASSshm_info {};
  template <typename, int> friend struct __BYPASSshm_info;
 int used_ids;
 unsigned long shm_tot;
 unsigned long shm_rss;
 unsigned long shm_swp;
 unsigned long swap_attempts;
 unsigned long swap_successes;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct shmid_kernel
{
  template <typename, int = 0> struct __BYPASSshmid_kernel {};
  template <typename, int> friend struct __BYPASSshmid_kernel;
 struct kern_ipc_perm shm_perm;
 struct file * shm_file;
 unsigned long shm_nattch;
 unsigned long shm_segsz;
 time_t shm_atim;
 time_t shm_dtim;
 time_t shm_ctim;
 pid_t shm_cprid;
 pid_t shm_lprid;
 struct user_struct *mlock_user;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
long do_shmat(int shmid, char *shmaddr, int shmflg, unsigned long *addr);
extern int is_file_shm_hugepages(struct file *file);
struct msqid_ds {
  template <typename, int = 0> struct __BYPASSmsqid_ds {};
  template <typename, int> friend struct __BYPASSmsqid_ds;
 struct ipc_perm msg_perm;
 struct msg *msg_first;
 struct msg *msg_last;
 __kernel_time_t msg_stime;
 __kernel_time_t msg_rtime;
 __kernel_time_t msg_ctime;
 unsigned long msg_lcbytes;
 unsigned long msg_lqbytes;
 unsigned short msg_cbytes;
 unsigned short msg_qnum;
 unsigned short msg_qbytes;
 __kernel_ipc_pid_t msg_lspid;
 __kernel_ipc_pid_t msg_lrpid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct msqid64_ds {
  template <typename, int = 0> struct __BYPASSmsqid64_ds {};
  template <typename, int> friend struct __BYPASSmsqid64_ds;
 struct ipc64_perm msg_perm;
 __kernel_time_t msg_stime;



 __kernel_time_t msg_rtime;



 __kernel_time_t msg_ctime;



 unsigned long msg_cbytes;
 unsigned long msg_qnum;
 unsigned long msg_qbytes;
 __kernel_pid_t msg_lspid;
 __kernel_pid_t msg_lrpid;
 unsigned long __unused4;
 unsigned long __unused5;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct msgbuf {
  template <typename, int = 0> struct __BYPASSmsgbuf {};
  template <typename, int> friend struct __BYPASSmsgbuf;
 long mtype;
 char mtext[1];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct msginfo {
  template <typename, int = 0> struct __BYPASSmsginfo {};
  template <typename, int> friend struct __BYPASSmsginfo;
 int msgpool;
 int msgmap;
 int msgmax;
 int msgmnb;
 int msgmni;
 int msgssz;
 int msgtql;
 unsigned short msgseg;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct msg_msg {
  template <typename, int = 0> struct __BYPASSmsg_msg {};
  template <typename, int> friend struct __BYPASSmsg_msg;
 struct list_head m_list;
 long m_type;
 int m_ts;
 struct msg_msgseg* next;
 void *security;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct msg_queue {
  template <typename, int = 0> struct __BYPASSmsg_queue {};
  template <typename, int> friend struct __BYPASSmsg_queue;
 struct kern_ipc_perm q_perm;
 time_t q_stime;
 time_t q_rtime;
 time_t q_ctime;
 unsigned long q_cbytes;
 unsigned long q_qnum;
 unsigned long q_qbytes;
 pid_t q_lspid;
 pid_t q_lrpid;

 struct list_head q_messages;
 struct list_head q_receivers;
 struct list_head q_senders;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern long do_msgsnd(int msqid, long mtype, void *mtext,
   size_t msgsz, int msgflg);
extern long do_msgrcv(int msqid, long *pmtype, void *mtext,
   size_t msgsz, long msgtyp, int msgflg);





typedef int32_t key_serial_t;


typedef uint32_t key_perm_t;

struct key;
struct seq_file;
struct user_struct;
struct signal_struct;

struct key_type;
struct key_owner;
struct keyring_list;
struct keyring_name;
typedef struct __key_reference_with_attributes *key_ref_t;

static inline key_ref_t make_key_ref( struct key *key,
         unsigned long possession)
{
 return (key_ref_t) ((unsigned long) key | possession);
}

static inline struct key *key_ref_to_ptr( key_ref_t key_ref)
{
 return (struct key *) ((unsigned long) key_ref & ~1UL);
}

static inline unsigned long is_key_possessed( key_ref_t key_ref)
{
 return (unsigned long) key_ref & 1UL;
}
struct key {
  template <typename, int = 0> struct __BYPASSkey {};
  template <typename, int> friend struct __BYPASSkey;
 atomic_t usage;
 key_serial_t serial;
 struct rb_node serial_node;
 struct key_type *type;
 struct rw_semaphore sem;
 struct key_user *user;
 void *security;
 time_t expiry;
 uid_t uid;
 gid_t gid;
 key_perm_t perm;
 unsigned short quotalen;
 unsigned short datalen;
 unsigned long flags;
 char *description;




 union {
  struct list_head link;
  unsigned long x[2];
  void *p[2];
 } type_data;





 union {
  unsigned long value;
  void *data;
  struct keyring_list *subscriptions;
 } payload;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct key *key_alloc(struct key_type *type,
        char *desc,
        uid_t uid, gid_t gid,
        struct task_struct *ctx,
        key_perm_t perm,
        unsigned long flags);






extern void key_revoke(struct key *key);
extern void key_put(struct key *key);

static inline struct key *key_get(struct key *key)
{
 if (key)
  ;
 return key;
}

static inline void key_ref_put(key_ref_t key_ref)
{
 key_put(key_ref_to_ptr(key_ref));
}

extern struct key *request_key(struct key_type *type,
          char *description,
          char *callout_info);

extern struct key *request_key_with_auxdata(struct key_type *type,
         char *description,
         void *callout_info,
         size_t callout_len,
         void *aux);

extern struct key *request_key_async(struct key_type *type,
         char *description,
         void *callout_info,
         size_t callout_len);

extern struct key *request_key_async_with_auxdata(struct key_type *type,
        char *description,
        void *callout_info,
        size_t callout_len,
        void *aux);

extern int wait_for_key_construction(struct key *key, bool intr);

extern int key_validate(struct key *key);

extern key_ref_t key_create_or_update(key_ref_t keyring,
          char *type,
          char *description,
          void *payload,
          size_t plen,
          key_perm_t perm,
          unsigned long flags);

extern int key_update(key_ref_t key,
        void *payload,
        size_t plen);

extern int key_link(struct key *keyring,
      struct key *key);

extern int key_unlink(struct key *keyring,
        struct key *key);

extern struct key *keyring_alloc( char *description, uid_t uid, gid_t gid,
     struct task_struct *ctx,
     unsigned long flags,
     struct key *dest);

extern int keyring_clear(struct key *keyring);

extern key_ref_t keyring_search(key_ref_t keyring,
    struct key_type *type,
    char *description);

extern int keyring_add_key(struct key *keyring,
      struct key *key);

extern struct key *key_lookup(key_serial_t id);

static inline key_serial_t key_serial(struct key *key)
{
 return key ? key->serial : 0;
}


extern ctl_table key_sysctls[];





extern void switch_uid_keyring(struct user_struct *new_user);
extern int copy_keys(unsigned long clone_flags, struct task_struct *tsk);
extern int copy_thread_group_keys(struct task_struct *tsk);
extern void exit_keys(struct task_struct *tsk);
extern void exit_thread_group_keys(struct signal_struct *tg);
extern int suid_keys(struct task_struct *tsk);
extern int exec_keys(struct task_struct *tsk);
extern void key_fsuid_changed(struct task_struct *tsk);
extern void key_fsgid_changed(struct task_struct *tsk);
extern void key_init(void);
typedef union
{
 __be32 a4;
 __be32 a6[4];
} xfrm_address_t;





struct xfrm_id
{
  template <typename, int = 0> struct __BYPASSxfrm_id {};
  template <typename, int> friend struct __BYPASSxfrm_id;
 xfrm_address_t daddr;
 __be32 spi;
 __u8 proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_sec_ctx {
  template <typename, int = 0> struct __BYPASSxfrm_sec_ctx {};
  template <typename, int> friend struct __BYPASSxfrm_sec_ctx;
 __u8 ctx_doi;
 __u8 ctx_alg;
 __u16 ctx_len;
 __u32 ctx_sid;
 char ctx_str[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct xfrm_selector
{
  template <typename, int = 0> struct __BYPASSxfrm_selector {};
  template <typename, int> friend struct __BYPASSxfrm_selector;
 xfrm_address_t daddr;
 xfrm_address_t saddr;
 __be16 dport;
 __be16 dport_mask;
 __be16 sport;
 __be16 sport_mask;
 __u16 family;
 __u8 prefixlen_d;
 __u8 prefixlen_s;
 __u8 proto;
 int ifindex;
 uid_t user;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct xfrm_lifetime_cfg
{
  template <typename, int = 0> struct __BYPASSxfrm_lifetime_cfg {};
  template <typename, int> friend struct __BYPASSxfrm_lifetime_cfg;
 __u64 soft_byte_limit;
 __u64 hard_byte_limit;
 __u64 soft_packet_limit;
 __u64 hard_packet_limit;
 __u64 soft_add_expires_seconds;
 __u64 hard_add_expires_seconds;
 __u64 soft_use_expires_seconds;
 __u64 hard_use_expires_seconds;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_lifetime_cur
{
  template <typename, int = 0> struct __BYPASSxfrm_lifetime_cur {};
  template <typename, int> friend struct __BYPASSxfrm_lifetime_cur;
 __u64 bytes;
 __u64 packets;
 __u64 add_time;
 __u64 use_time;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_replay_state
{
  template <typename, int = 0> struct __BYPASSxfrm_replay_state {};
  template <typename, int> friend struct __BYPASSxfrm_replay_state;
 __u32 oseq;
 __u32 seq;
 __u32 bitmap;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_algo {
  template <typename, int = 0> struct __BYPASSxfrm_algo {};
  template <typename, int> friend struct __BYPASSxfrm_algo;
 char alg_name[64];
 unsigned int alg_key_len;
 char alg_key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_algo_aead {
  template <typename, int = 0> struct __BYPASSxfrm_algo_aead {};
  template <typename, int> friend struct __BYPASSxfrm_algo_aead;
 char alg_name[64];
 unsigned int alg_key_len;
 unsigned int alg_icv_len;
 char alg_key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_stats {
  template <typename, int = 0> struct __BYPASSxfrm_stats {};
  template <typename, int> friend struct __BYPASSxfrm_stats;
 __u32 replay_window;
 __u32 replay;
 __u32 integrity_failed;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum
{
 XFRM_POLICY_TYPE_MAIN = 0,
 XFRM_POLICY_TYPE_SUB = 1,
 XFRM_POLICY_TYPE_MAX = 2,
 XFRM_POLICY_TYPE_ANY = 255
};

enum
{
 XFRM_POLICY_IN = 0,
 XFRM_POLICY_OUT = 1,
 XFRM_POLICY_FWD = 2,
 XFRM_POLICY_MASK = 3,
 XFRM_POLICY_MAX = 3
};

enum
{
 XFRM_SHARE_ANY,
 XFRM_SHARE_SESSION,
 XFRM_SHARE_USER,
 XFRM_SHARE_UNIQUE
};
enum {
 XFRM_MSG_BASE = 0x10,

 XFRM_MSG_NEWSA = 0x10,

 XFRM_MSG_DELSA,

 XFRM_MSG_GETSA,


 XFRM_MSG_NEWPOLICY,

 XFRM_MSG_DELPOLICY,

 XFRM_MSG_GETPOLICY,


 XFRM_MSG_ALLOCSPI,

 XFRM_MSG_ACQUIRE,

 XFRM_MSG_EXPIRE,


 XFRM_MSG_UPDPOLICY,

 XFRM_MSG_UPDSA,


 XFRM_MSG_POLEXPIRE,


 XFRM_MSG_FLUSHSA,

 XFRM_MSG_FLUSHPOLICY,


 XFRM_MSG_NEWAE,

 XFRM_MSG_GETAE,


 XFRM_MSG_REPORT,


 XFRM_MSG_MIGRATE,


 XFRM_MSG_NEWSADINFO,

 XFRM_MSG_GETSADINFO,


 XFRM_MSG_NEWSPDINFO,

 XFRM_MSG_GETSPDINFO,

 __XFRM_MSG_MAX
};
struct xfrm_user_sec_ctx {
  template <typename, int = 0> struct __BYPASSxfrm_user_sec_ctx {};
  template <typename, int> friend struct __BYPASSxfrm_user_sec_ctx;
 __u16 len;
 __u16 exttype;
 __u8 ctx_alg;
 __u8 ctx_doi;
 __u16 ctx_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_tmpl {
  template <typename, int = 0> struct __BYPASSxfrm_user_tmpl {};
  template <typename, int> friend struct __BYPASSxfrm_user_tmpl;
 struct xfrm_id id;
 __u16 family;
 xfrm_address_t saddr;
 __u32 reqid;
 __u8 mode;
 __u8 share;
 __u8 optional;
 __u32 aalgos;
 __u32 ealgos;
 __u32 calgos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_encap_tmpl {
  template <typename, int = 0> struct __BYPASSxfrm_encap_tmpl {};
  template <typename, int> friend struct __BYPASSxfrm_encap_tmpl;
 __u16 encap_type;
 __be16 encap_sport;
 __be16 encap_dport;
 xfrm_address_t encap_oa;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum xfrm_ae_ftype_t {
 XFRM_AE_UNSPEC,
 XFRM_AE_RTHR=1,
 XFRM_AE_RVAL=2,
 XFRM_AE_LVAL=4,
 XFRM_AE_ETHR=8,
 XFRM_AE_CR=16,
 XFRM_AE_CE=32,
 XFRM_AE_CU=64,
 __XFRM_AE_MAX


};

struct xfrm_userpolicy_type {
  template <typename, int = 0> struct __BYPASSxfrm_userpolicy_type {};
  template <typename, int> friend struct __BYPASSxfrm_userpolicy_type;
 __u8 type;
 __u16 reserved1;
 __u8 reserved2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum xfrm_attr_type_t {
 XFRMA_UNSPEC,
 XFRMA_ALG_AUTH,
 XFRMA_ALG_CRYPT,
 XFRMA_ALG_COMP,
 XFRMA_ENCAP,
 XFRMA_TMPL,
 XFRMA_SA,
 XFRMA_POLICY,
 XFRMA_SEC_CTX,
 XFRMA_LTIME_VAL,
 XFRMA_REPLAY_VAL,
 XFRMA_REPLAY_THRESH,
 XFRMA_ETIMER_THRESH,
 XFRMA_SRCADDR,
 XFRMA_COADDR,
 XFRMA_LASTUSED,
 XFRMA_POLICY_TYPE,
 XFRMA_MIGRATE,
 XFRMA_ALG_AEAD,
 __XFRMA_MAX


};

enum xfrm_sadattr_type_t {
 XFRMA_SAD_UNSPEC,
 XFRMA_SAD_CNT,
 XFRMA_SAD_HINFO,
 __XFRMA_SAD_MAX


};

struct xfrmu_sadhinfo {
  template <typename, int = 0> struct __BYPASSxfrmu_sadhinfo {};
  template <typename, int> friend struct __BYPASSxfrmu_sadhinfo;
 __u32 sadhcnt;
 __u32 sadhmcnt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum xfrm_spdattr_type_t {
 XFRMA_SPD_UNSPEC,
 XFRMA_SPD_INFO,
 XFRMA_SPD_HINFO,
 __XFRMA_SPD_MAX


};

struct xfrmu_spdinfo {
  template <typename, int = 0> struct __BYPASSxfrmu_spdinfo {};
  template <typename, int> friend struct __BYPASSxfrmu_spdinfo;
 __u32 incnt;
 __u32 outcnt;
 __u32 fwdcnt;
 __u32 inscnt;
 __u32 outscnt;
 __u32 fwdscnt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrmu_spdhinfo {
  template <typename, int = 0> struct __BYPASSxfrmu_spdhinfo {};
  template <typename, int> friend struct __BYPASSxfrmu_spdhinfo;
 __u32 spdhcnt;
 __u32 spdhmcnt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_usersa_info {
  template <typename, int = 0> struct __BYPASSxfrm_usersa_info {};
  template <typename, int> friend struct __BYPASSxfrm_usersa_info;
 struct xfrm_selector sel;
 struct xfrm_id id;
 xfrm_address_t saddr;
 struct xfrm_lifetime_cfg lft;
 struct xfrm_lifetime_cur curlft;
 struct xfrm_stats stats;
 __u32 seq;
 __u32 reqid;
 __u16 family;
 __u8 mode;
 __u8 replay_window;
 __u8 flags;







  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_usersa_id {
  template <typename, int = 0> struct __BYPASSxfrm_usersa_id {};
  template <typename, int> friend struct __BYPASSxfrm_usersa_id;
 xfrm_address_t daddr;
 __be32 spi;
 __u16 family;
 __u8 proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_aevent_id {
  template <typename, int = 0> struct __BYPASSxfrm_aevent_id {};
  template <typename, int> friend struct __BYPASSxfrm_aevent_id;
 struct xfrm_usersa_id sa_id;
 xfrm_address_t saddr;
 __u32 flags;
 __u32 reqid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_userspi_info {
  template <typename, int = 0> struct __BYPASSxfrm_userspi_info {};
  template <typename, int> friend struct __BYPASSxfrm_userspi_info;
 struct xfrm_usersa_info info;
 __u32 min;
 __u32 max;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_userpolicy_info {
  template <typename, int = 0> struct __BYPASSxfrm_userpolicy_info {};
  template <typename, int> friend struct __BYPASSxfrm_userpolicy_info;
 struct xfrm_selector sel;
 struct xfrm_lifetime_cfg lft;
 struct xfrm_lifetime_cur curlft;
 __u32 priority;
 __u32 index;
 __u8 dir;
 __u8 action;


 __u8 flags;



 __u8 share;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_userpolicy_id {
  template <typename, int = 0> struct __BYPASSxfrm_userpolicy_id {};
  template <typename, int> friend struct __BYPASSxfrm_userpolicy_id;
 struct xfrm_selector sel;
 __u32 index;
 __u8 dir;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_acquire {
  template <typename, int = 0> struct __BYPASSxfrm_user_acquire {};
  template <typename, int> friend struct __BYPASSxfrm_user_acquire;
 struct xfrm_id id;
 xfrm_address_t saddr;
 struct xfrm_selector sel;
 struct xfrm_userpolicy_info policy;
 __u32 aalgos;
 __u32 ealgos;
 __u32 calgos;
 __u32 seq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_expire {
  template <typename, int = 0> struct __BYPASSxfrm_user_expire {};
  template <typename, int> friend struct __BYPASSxfrm_user_expire;
 struct xfrm_usersa_info state;
 __u8 hard;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_polexpire {
  template <typename, int = 0> struct __BYPASSxfrm_user_polexpire {};
  template <typename, int> friend struct __BYPASSxfrm_user_polexpire;
 struct xfrm_userpolicy_info pol;
 __u8 hard;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_usersa_flush {
  template <typename, int = 0> struct __BYPASSxfrm_usersa_flush {};
  template <typename, int> friend struct __BYPASSxfrm_usersa_flush;
 __u8 proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_report {
  template <typename, int = 0> struct __BYPASSxfrm_user_report {};
  template <typename, int> friend struct __BYPASSxfrm_user_report;
 __u8 proto;
 struct xfrm_selector sel;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_migrate {
  template <typename, int = 0> struct __BYPASSxfrm_user_migrate {};
  template <typename, int> friend struct __BYPASSxfrm_user_migrate;
 xfrm_address_t old_daddr;
 xfrm_address_t old_saddr;
 xfrm_address_t new_daddr;
 xfrm_address_t new_saddr;
 __u8 proto;
 __u8 mode;
 __u16 reserved;
 __u32 reqid;
 __u16 old_family;
 __u16 new_family;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum xfrm_nlgroups {
 XFRMNLGRP_NONE,

 XFRMNLGRP_ACQUIRE,

 XFRMNLGRP_EXPIRE,

 XFRMNLGRP_SA,

 XFRMNLGRP_POLICY,

 XFRMNLGRP_AEVENTS,

 XFRMNLGRP_REPORT,

 XFRMNLGRP_MIGRATE,

 __XFRMNLGRP_MAX
};





struct ctl_table;
struct audit_krule;





extern int cap_capable(struct task_struct *tsk, int cap);
extern int cap_settime(struct timespec *ts, struct timezone *tz);
extern int cap_ptrace_may_access(struct task_struct *child, unsigned int mode);
extern int cap_ptrace_traceme(struct task_struct *parent);
extern int cap_capget(struct task_struct *target, kernel_cap_t *effective, kernel_cap_t *inheritable, kernel_cap_t *permitted);
extern int cap_capset_check(struct task_struct *target, kernel_cap_t *effective, kernel_cap_t *inheritable, kernel_cap_t *permitted);
extern void cap_capset_set(struct task_struct *target, kernel_cap_t *effective, kernel_cap_t *inheritable, kernel_cap_t *permitted);
extern int cap_bprm_set_security(struct linux_binprm *bprm);
extern void cap_bprm_apply_creds(struct linux_binprm *bprm, int unsafe);
extern int cap_bprm_secureexec(struct linux_binprm *bprm);
extern int cap_inode_setxattr(struct dentry *dentry, char *name,
         void *value, size_t size, int flags);
extern int cap_inode_removexattr(struct dentry *dentry, char *name);
extern int cap_inode_need_killpriv(struct dentry *dentry);
extern int cap_inode_killpriv(struct dentry *dentry);
extern int cap_task_post_setuid(uid_t old_ruid, uid_t old_euid, uid_t old_suid, int flags);
extern void cap_task_reparent_to_init(struct task_struct *p);
extern int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
     unsigned long arg4, unsigned long arg5, long *rc_p);
extern int cap_task_setscheduler(struct task_struct *p, int policy, struct sched_param *lp);
extern int cap_task_setioprio(struct task_struct *p, int ioprio);
extern int cap_task_setnice(struct task_struct *p, int nice);
extern int cap_syslog(int type);
extern int cap_vm_enough_memory(struct mm_struct *mm, long pages);

struct msghdr;
struct sk_buff;
struct sock;
struct sockaddr;
struct socket;
struct flowi;
struct dst_entry;
struct xfrm_selector;
struct xfrm_policy;
struct xfrm_state;
struct xfrm_user_sec_ctx;
struct seq_file;

extern int cap_netlink_send(struct sock *sk, struct sk_buff *skb);
extern int cap_netlink_recv(struct sk_buff *skb, int cap);

extern unsigned long mmap_min_addr;
struct sched_param;
struct request_sock;
struct security_mnt_opts {
  template <typename, int = 0> struct __BYPASSsecurity_mnt_opts {};
  template <typename, int> friend struct __BYPASSsecurity_mnt_opts;
 char **mnt_opts;
 int *mnt_opts_flags;
 int num_mnt_opts;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void security_init_mnt_opts(struct security_mnt_opts *opts)
{
 opts->mnt_opts = 0;
 opts->mnt_opts_flags = 0;
 opts->num_mnt_opts = 0;
}

static inline void security_free_mnt_opts(struct security_mnt_opts *opts)
{
 int i;
 if (opts->mnt_opts)
  for (i = 0; i < opts->num_mnt_opts; i++)
   kfree(opts->mnt_opts[i]);
 kfree(opts->mnt_opts);
 opts->mnt_opts = 0;
 kfree(opts->mnt_opts_flags);
 opts->mnt_opts_flags = 0;
 opts->num_mnt_opts = 0;
}
struct security_operations {
  template <typename, int = 0> struct __BYPASSsecurity_operations {};
  template <typename, int> friend struct __BYPASSsecurity_operations;
 char name[10 + 1];

 int (*ptrace_may_access) (struct task_struct *child, unsigned int mode);
 int (*ptrace_traceme) (struct task_struct *parent);
 int (*capget) (struct task_struct *target,
         kernel_cap_t *effective,
         kernel_cap_t *inheritable, kernel_cap_t *permitted);
 int (*capset_check) (struct task_struct *target,
        kernel_cap_t *effective,
        kernel_cap_t *inheritable,
        kernel_cap_t *permitted);
 void (*capset_set) (struct task_struct *target,
       kernel_cap_t *effective,
       kernel_cap_t *inheritable,
       kernel_cap_t *permitted);
 int (*capable) (struct task_struct *tsk, int cap);
 int (*acct) (struct file *file);
 int (*sysctl) (struct ctl_table *table, int op);
 int (*quotactl) (int cmds, int type, int id, struct super_block *sb);
 int (*quota_on) (struct dentry *dentry);
 int (*syslog) (int type);
 int (*settime) (struct timespec *ts, struct timezone *tz);
 int (*vm_enough_memory) (struct mm_struct *mm, long pages);

 int (*bprm_alloc_security) (struct linux_binprm *bprm);
 void (*bprm_free_security) (struct linux_binprm *bprm);
 void (*bprm_apply_creds) (struct linux_binprm *bprm, int unsafe);
 void (*bprm_post_apply_creds) (struct linux_binprm *bprm);
 int (*bprm_set_security) (struct linux_binprm *bprm);
 int (*bprm_check_security) (struct linux_binprm *bprm);
 int (*bprm_secureexec) (struct linux_binprm *bprm);

 int (*sb_alloc_security) (struct super_block *sb);
 void (*sb_free_security) (struct super_block *sb);
 int (*sb_copy_data) (char *orig, char *copy);
 int (*sb_kern_mount) (struct super_block *sb, void *data);
 int (*sb_show_options) (struct seq_file *m, struct super_block *sb);
 int (*sb_statfs) (struct dentry *dentry);
 int (*sb_mount) (char *dev_name, struct path *path,
    char *type, unsigned long flags, void *data);
 int (*sb_check_sb) (struct vfsmount *mnt, struct path *path);
 int (*sb_umount) (struct vfsmount *mnt, int flags);
 void (*sb_umount_close) (struct vfsmount *mnt);
 void (*sb_umount_busy) (struct vfsmount *mnt);
 void (*sb_post_remount) (struct vfsmount *mnt,
     unsigned long flags, void *data);
 void (*sb_post_addmount) (struct vfsmount *mnt,
      struct path *mountpoint);
 int (*sb_pivotroot) (struct path *old_path,
        struct path *new_path);
 void (*sb_post_pivotroot) (struct path *old_path,
       struct path *new_path);
 int (*sb_set_mnt_opts) (struct super_block *sb,
    struct security_mnt_opts *opts);
 void (*sb_clone_mnt_opts) ( struct super_block *oldsb,
       struct super_block *newsb);
 int (*sb_parse_opts_str) (char *options, struct security_mnt_opts *opts);

 int (*inode_alloc_security) (struct inode *inode);
 void (*inode_free_security) (struct inode *inode);
 int (*inode_init_security) (struct inode *inode, struct inode *dir,
        char **name, void **value, size_t *len);
 int (*inode_create) (struct inode *dir,
        struct dentry *dentry, int mode);
 int (*inode_link) (struct dentry *old_dentry,
      struct inode *dir, struct dentry *new_dentry);
 int (*inode_unlink) (struct inode *dir, struct dentry *dentry);
 int (*inode_symlink) (struct inode *dir,
         struct dentry *dentry, char *old_name);
 int (*inode_mkdir) (struct inode *dir, struct dentry *dentry, int mode);
 int (*inode_rmdir) (struct inode *dir, struct dentry *dentry);
 int (*inode_mknod) (struct inode *dir, struct dentry *dentry,
       int mode, dev_t dev);
 int (*inode_rename) (struct inode *old_dir, struct dentry *old_dentry,
        struct inode *new_dir, struct dentry *new_dentry);
 int (*inode_readlink) (struct dentry *dentry);
 int (*inode_follow_link) (struct dentry *dentry, struct nameidata *nd);
 int (*inode_permission) (struct inode *inode, int mask);
 int (*inode_setattr) (struct dentry *dentry, struct iattr *attr);
 int (*inode_getattr) (struct vfsmount *mnt, struct dentry *dentry);
 void (*inode_delete) (struct inode *inode);
 int (*inode_setxattr) (struct dentry *dentry, char *name,
          void *value, size_t size, int flags);
 void (*inode_post_setxattr) (struct dentry *dentry, char *name,
         void *value, size_t size, int flags);
 int (*inode_getxattr) (struct dentry *dentry, char *name);
 int (*inode_listxattr) (struct dentry *dentry);
 int (*inode_removexattr) (struct dentry *dentry, char *name);
 int (*inode_need_killpriv) (struct dentry *dentry);
 int (*inode_killpriv) (struct dentry *dentry);
 int (*inode_getsecurity) ( struct inode *inode, char *name, void **buffer, bool alloc);
 int (*inode_setsecurity) (struct inode *inode, char *name, void *value, size_t size, int flags);
 int (*inode_listsecurity) (struct inode *inode, char *buffer, size_t buffer_size);
 void (*inode_getsecid) ( struct inode *inode, u32 *secid);

 int (*file_permission) (struct file *file, int mask);
 int (*file_alloc_security) (struct file *file);
 void (*file_free_security) (struct file *file);
 int (*file_ioctl) (struct file *file, unsigned int cmd,
      unsigned long arg);
 int (*file_mmap) (struct file *file,
     unsigned long reqprot, unsigned long prot,
     unsigned long flags, unsigned long addr,
     unsigned long addr_only);
 int (*file_mprotect) (struct vm_area_struct *vma,
         unsigned long reqprot,
         unsigned long prot);
 int (*file_lock) (struct file *file, unsigned int cmd);
 int (*file_fcntl) (struct file *file, unsigned int cmd,
      unsigned long arg);
 int (*file_set_fowner) (struct file *file);
 int (*file_send_sigiotask) (struct task_struct *tsk,
        struct fown_struct *fown, int sig);
 int (*file_receive) (struct file *file);
 int (*dentry_open) (struct file *file);

 int (*task_create) (unsigned long clone_flags);
 int (*task_alloc_security) (struct task_struct *p);
 void (*task_free_security) (struct task_struct *p);
 int (*task_setuid) (uid_t id0, uid_t id1, uid_t id2, int flags);
 int (*task_post_setuid) (uid_t old_ruid ,
     uid_t old_euid, uid_t old_suid, int flags);
 int (*task_setgid) (gid_t id0, gid_t id1, gid_t id2, int flags);
 int (*task_setpgid) (struct task_struct *p, pid_t pgid);
 int (*task_getpgid) (struct task_struct *p);
 int (*task_getsid) (struct task_struct *p);
 void (*task_getsecid) (struct task_struct *p, u32 *secid);
 int (*task_setgroups) (struct group_info *group_info);
 int (*task_setnice) (struct task_struct *p, int nice);
 int (*task_setioprio) (struct task_struct *p, int ioprio);
 int (*task_getioprio) (struct task_struct *p);
 int (*task_setrlimit) (unsigned int resource, struct rlimit *new_rlim);
 int (*task_setscheduler) (struct task_struct *p, int policy,
      struct sched_param *lp);
 int (*task_getscheduler) (struct task_struct *p);
 int (*task_movememory) (struct task_struct *p);
 int (*task_kill) (struct task_struct *p,
     struct siginfo *info, int sig, u32 secid);
 int (*task_wait) (struct task_struct *p);
 int (*task_prctl) (int option, unsigned long arg2,
      unsigned long arg3, unsigned long arg4,
      unsigned long arg5, long *rc_p);
 void (*task_reparent_to_init) (struct task_struct *p);
 void (*task_to_inode) (struct task_struct *p, struct inode *inode);

 int (*ipc_permission) (struct kern_ipc_perm *ipcp, short flag);
 void (*ipc_getsecid) (struct kern_ipc_perm *ipcp, u32 *secid);

 int (*msg_msg_alloc_security) (struct msg_msg *msg);
 void (*msg_msg_free_security) (struct msg_msg *msg);

 int (*msg_queue_alloc_security) (struct msg_queue *msq);
 void (*msg_queue_free_security) (struct msg_queue *msq);
 int (*msg_queue_associate) (struct msg_queue *msq, int msqflg);
 int (*msg_queue_msgctl) (struct msg_queue *msq, int cmd);
 int (*msg_queue_msgsnd) (struct msg_queue *msq,
     struct msg_msg *msg, int msqflg);
 int (*msg_queue_msgrcv) (struct msg_queue *msq,
     struct msg_msg *msg,
     struct task_struct *target,
     long type, int mode);

 int (*shm_alloc_security) (struct shmid_kernel *shp);
 void (*shm_free_security) (struct shmid_kernel *shp);
 int (*shm_associate) (struct shmid_kernel *shp, int shmflg);
 int (*shm_shmctl) (struct shmid_kernel *shp, int cmd);
 int (*shm_shmat) (struct shmid_kernel *shp,
     char *shmaddr, int shmflg);

 int (*sem_alloc_security) (struct sem_array *sma);
 void (*sem_free_security) (struct sem_array *sma);
 int (*sem_associate) (struct sem_array *sma, int semflg);
 int (*sem_semctl) (struct sem_array *sma, int cmd);
 int (*sem_semop) (struct sem_array *sma,
     struct sembuf *sops, unsigned nsops, int alter);

 int (*netlink_send) (struct sock *sk, struct sk_buff *skb);
 int (*netlink_recv) (struct sk_buff *skb, int cap);

 void (*d_instantiate) (struct dentry *dentry, struct inode *inode);

 int (*getprocattr) (struct task_struct *p, char *name, char **value);
 int (*setprocattr) (struct task_struct *p, char *name, void *value, size_t size);
 int (*secid_to_secctx) (u32 secid, char **secdata, u32 *seclen);
 int (*secctx_to_secid) ( char *secdata, u32 seclen, u32 *secid);
 void (*release_secctx) (char *secdata, u32 seclen);


 int (*unix_stream_connect) (struct socket *sock,
        struct socket *other, struct sock *newsk);
 int (*unix_may_send) (struct socket *sock, struct socket *other);

 int (*socket_create) (int family, int type, int protocol, int kern);
 int (*socket_post_create) (struct socket *sock, int family,
       int type, int protocol, int kern);
 int (*socket_bind) (struct socket *sock,
       struct sockaddr *address, int addrlen);
 int (*socket_connect) (struct socket *sock,
          struct sockaddr *address, int addrlen);
 int (*socket_listen) (struct socket *sock, int backlog);
 int (*socket_accept) (struct socket *sock, struct socket *newsock);
 void (*socket_post_accept) (struct socket *sock,
        struct socket *newsock);
 int (*socket_sendmsg) (struct socket *sock,
          struct msghdr *msg, int size);
 int (*socket_recvmsg) (struct socket *sock,
          struct msghdr *msg, int size, int flags);
 int (*socket_getsockname) (struct socket *sock);
 int (*socket_getpeername) (struct socket *sock);
 int (*socket_getsockopt) (struct socket *sock, int level, int optname);
 int (*socket_setsockopt) (struct socket *sock, int level, int optname);
 int (*socket_shutdown) (struct socket *sock, int how);
 int (*socket_sock_rcv_skb) (struct sock *sk, struct sk_buff *skb);
 int (*socket_getpeersec_stream) (struct socket *sock, char *optval, int *optlen, unsigned len);
 int (*socket_getpeersec_dgram) (struct socket *sock, struct sk_buff *skb, u32 *secid);
 int (*sk_alloc_security) (struct sock *sk, int family, gfp_t priority);
 void (*sk_free_security) (struct sock *sk);
 void (*sk_clone_security) ( struct sock *sk, struct sock *newsk);
 void (*sk_getsecid) (struct sock *sk, u32 *secid);
 void (*sock_graft) (struct sock *sk, struct socket *parent);
 int (*inet_conn_request) (struct sock *sk, struct sk_buff *skb,
      struct request_sock *req);
 void (*inet_csk_clone) (struct sock *newsk, struct request_sock *req);
 void (*inet_conn_established) (struct sock *sk, struct sk_buff *skb);
 void (*req_classify_flow) ( struct request_sock *req, struct flowi *fl);



 int (*xfrm_policy_alloc_security) (struct xfrm_sec_ctx **ctxp,
   struct xfrm_user_sec_ctx *sec_ctx);
 int (*xfrm_policy_clone_security) (struct xfrm_sec_ctx *old_ctx, struct xfrm_sec_ctx **new_ctx);
 void (*xfrm_policy_free_security) (struct xfrm_sec_ctx *ctx);
 int (*xfrm_policy_delete_security) (struct xfrm_sec_ctx *ctx);
 int (*xfrm_state_alloc_security) (struct xfrm_state *x,
  struct xfrm_user_sec_ctx *sec_ctx,
  u32 secid);
 void (*xfrm_state_free_security) (struct xfrm_state *x);
 int (*xfrm_state_delete_security) (struct xfrm_state *x);
 int (*xfrm_policy_lookup) (struct xfrm_sec_ctx *ctx, u32 fl_secid, u8 dir);
 int (*xfrm_state_pol_flow_match) (struct xfrm_state *x,
       struct xfrm_policy *xp,
       struct flowi *fl);
 int (*xfrm_decode_session) (struct sk_buff *skb, u32 *secid, int ckall);




 int (*key_alloc) (struct key *key, struct task_struct *tsk, unsigned long flags);
 void (*key_free) (struct key *key);
 int (*key_permission) (key_ref_t key_ref,
          struct task_struct *context,
          key_perm_t perm);
 int (*key_getsecurity)(struct key *key, char **_buffer);



 int (*audit_rule_init) (u32 field, u32 op, char *rulestr, void **lsmrule);
 int (*audit_rule_known) (struct audit_krule *krule);
 int (*audit_rule_match) (u32 secid, u32 field, u32 op, void *lsmrule,
     struct audit_context *actx);
 void (*audit_rule_free) (void *lsmrule);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern int security_init(void);
extern int security_module_enable(struct security_operations *ops);
extern int register_security(struct security_operations *ops);
extern struct dentry *securityfs_create_file( char *name, mode_t mode,
          struct dentry *parent, void *data,
          struct file_operations *fops);
extern struct dentry *securityfs_create_dir( char *name, struct dentry *parent);
extern void securityfs_remove(struct dentry *dentry);


int security_ptrace_may_access(struct task_struct *child, unsigned int mode);
int security_ptrace_traceme(struct task_struct *parent);
int security_capget(struct task_struct *target,
      kernel_cap_t *effective,
      kernel_cap_t *inheritable,
      kernel_cap_t *permitted);
int security_capset_check(struct task_struct *target,
     kernel_cap_t *effective,
     kernel_cap_t *inheritable,
     kernel_cap_t *permitted);
void security_capset_set(struct task_struct *target,
    kernel_cap_t *effective,
    kernel_cap_t *inheritable,
    kernel_cap_t *permitted);
int security_capable(struct task_struct *tsk, int cap);
int security_acct(struct file *file);
int security_sysctl(struct ctl_table *table, int op);
int security_quotactl(int cmds, int type, int id, struct super_block *sb);
int security_quota_on(struct dentry *dentry);
int security_syslog(int type);
int security_settime(struct timespec *ts, struct timezone *tz);
int security_vm_enough_memory(long pages);
int security_vm_enough_memory_mm(struct mm_struct *mm, long pages);
int security_bprm_alloc(struct linux_binprm *bprm);
void security_bprm_free(struct linux_binprm *bprm);
void security_bprm_apply_creds(struct linux_binprm *bprm, int unsafe);
void security_bprm_post_apply_creds(struct linux_binprm *bprm);
int security_bprm_set(struct linux_binprm *bprm);
int security_bprm_check(struct linux_binprm *bprm);
int security_bprm_secureexec(struct linux_binprm *bprm);
int security_sb_alloc(struct super_block *sb);
void security_sb_free(struct super_block *sb);
int security_sb_copy_data(char *orig, char *copy);
int security_sb_kern_mount(struct super_block *sb, void *data);
int security_sb_show_options(struct seq_file *m, struct super_block *sb);
int security_sb_statfs(struct dentry *dentry);
int security_sb_mount(char *dev_name, struct path *path,
        char *type, unsigned long flags, void *data);
int security_sb_check_sb(struct vfsmount *mnt, struct path *path);
int security_sb_umount(struct vfsmount *mnt, int flags);
void security_sb_umount_close(struct vfsmount *mnt);
void security_sb_umount_busy(struct vfsmount *mnt);
void security_sb_post_remount(struct vfsmount *mnt, unsigned long flags, void *data);
void security_sb_post_addmount(struct vfsmount *mnt, struct path *mountpoint);
int security_sb_pivotroot(struct path *old_path, struct path *new_path);
void security_sb_post_pivotroot(struct path *old_path, struct path *new_path);
int security_sb_set_mnt_opts(struct super_block *sb, struct security_mnt_opts *opts);
void security_sb_clone_mnt_opts( struct super_block *oldsb,
    struct super_block *newsb);
int security_sb_parse_opts_str(char *options, struct security_mnt_opts *opts);

int security_inode_alloc(struct inode *inode);
void security_inode_free(struct inode *inode);
int security_inode_init_security(struct inode *inode, struct inode *dir,
      char **name, void **value, size_t *len);
int security_inode_create(struct inode *dir, struct dentry *dentry, int mode);
int security_inode_link(struct dentry *old_dentry, struct inode *dir,
    struct dentry *new_dentry);
int security_inode_unlink(struct inode *dir, struct dentry *dentry);
int security_inode_symlink(struct inode *dir, struct dentry *dentry,
      char *old_name);
int security_inode_mkdir(struct inode *dir, struct dentry *dentry, int mode);
int security_inode_rmdir(struct inode *dir, struct dentry *dentry);
int security_inode_mknod(struct inode *dir, struct dentry *dentry, int mode, dev_t dev);
int security_inode_rename(struct inode *old_dir, struct dentry *old_dentry,
     struct inode *new_dir, struct dentry *new_dentry);
int security_inode_readlink(struct dentry *dentry);
int security_inode_follow_link(struct dentry *dentry, struct nameidata *nd);
int security_inode_permission(struct inode *inode, int mask);
int security_inode_setattr(struct dentry *dentry, struct iattr *attr);
int security_inode_getattr(struct vfsmount *mnt, struct dentry *dentry);
void security_inode_delete(struct inode *inode);
int security_inode_setxattr(struct dentry *dentry, char *name,
       void *value, size_t size, int flags);
void security_inode_post_setxattr(struct dentry *dentry, char *name,
      void *value, size_t size, int flags);
int security_inode_getxattr(struct dentry *dentry, char *name);
int security_inode_listxattr(struct dentry *dentry);
int security_inode_removexattr(struct dentry *dentry, char *name);
int security_inode_need_killpriv(struct dentry *dentry);
int security_inode_killpriv(struct dentry *dentry);
int security_inode_getsecurity( struct inode *inode, char *name, void **buffer, bool alloc);
int security_inode_setsecurity(struct inode *inode, char *name, void *value, size_t size, int flags);
int security_inode_listsecurity(struct inode *inode, char *buffer, size_t buffer_size);
void security_inode_getsecid( struct inode *inode, u32 *secid);
int security_file_permission(struct file *file, int mask);
int security_file_alloc(struct file *file);
void security_file_free(struct file *file);
int security_file_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
int security_file_mmap(struct file *file, unsigned long reqprot,
   unsigned long prot, unsigned long flags,
   unsigned long addr, unsigned long addr_only);
int security_file_mprotect(struct vm_area_struct *vma, unsigned long reqprot,
      unsigned long prot);
int security_file_lock(struct file *file, unsigned int cmd);
int security_file_fcntl(struct file *file, unsigned int cmd, unsigned long arg);
int security_file_set_fowner(struct file *file);
int security_file_send_sigiotask(struct task_struct *tsk,
     struct fown_struct *fown, int sig);
int security_file_receive(struct file *file);
int security_dentry_open(struct file *file);
int security_task_create(unsigned long clone_flags);
int security_task_alloc(struct task_struct *p);
void security_task_free(struct task_struct *p);
int security_task_setuid(uid_t id0, uid_t id1, uid_t id2, int flags);
int security_task_post_setuid(uid_t old_ruid, uid_t old_euid,
         uid_t old_suid, int flags);
int security_task_setgid(gid_t id0, gid_t id1, gid_t id2, int flags);
int security_task_setpgid(struct task_struct *p, pid_t pgid);
int security_task_getpgid(struct task_struct *p);
int security_task_getsid(struct task_struct *p);
void security_task_getsecid(struct task_struct *p, u32 *secid);
int security_task_setgroups(struct group_info *group_info);
int security_task_setnice(struct task_struct *p, int nice);
int security_task_setioprio(struct task_struct *p, int ioprio);
int security_task_getioprio(struct task_struct *p);
int security_task_setrlimit(unsigned int resource, struct rlimit *new_rlim);
int security_task_setscheduler(struct task_struct *p,
    int policy, struct sched_param *lp);
int security_task_getscheduler(struct task_struct *p);
int security_task_movememory(struct task_struct *p);
int security_task_kill(struct task_struct *p, struct siginfo *info,
   int sig, u32 secid);
int security_task_wait(struct task_struct *p);
int security_task_prctl(int option, unsigned long arg2, unsigned long arg3,
    unsigned long arg4, unsigned long arg5, long *rc_p);
void security_task_reparent_to_init(struct task_struct *p);
void security_task_to_inode(struct task_struct *p, struct inode *inode);
int security_ipc_permission(struct kern_ipc_perm *ipcp, short flag);
void security_ipc_getsecid(struct kern_ipc_perm *ipcp, u32 *secid);
int security_msg_msg_alloc(struct msg_msg *msg);
void security_msg_msg_free(struct msg_msg *msg);
int security_msg_queue_alloc(struct msg_queue *msq);
void security_msg_queue_free(struct msg_queue *msq);
int security_msg_queue_associate(struct msg_queue *msq, int msqflg);
int security_msg_queue_msgctl(struct msg_queue *msq, int cmd);
int security_msg_queue_msgsnd(struct msg_queue *msq,
         struct msg_msg *msg, int msqflg);
int security_msg_queue_msgrcv(struct msg_queue *msq, struct msg_msg *msg,
         struct task_struct *target, long type, int mode);
int security_shm_alloc(struct shmid_kernel *shp);
void security_shm_free(struct shmid_kernel *shp);
int security_shm_associate(struct shmid_kernel *shp, int shmflg);
int security_shm_shmctl(struct shmid_kernel *shp, int cmd);
int security_shm_shmat(struct shmid_kernel *shp, char *shmaddr, int shmflg);
int security_sem_alloc(struct sem_array *sma);
void security_sem_free(struct sem_array *sma);
int security_sem_associate(struct sem_array *sma, int semflg);
int security_sem_semctl(struct sem_array *sma, int cmd);
int security_sem_semop(struct sem_array *sma, struct sembuf *sops,
   unsigned nsops, int alter);
void security_d_instantiate(struct dentry *dentry, struct inode *inode);
int security_getprocattr(struct task_struct *p, char *name, char **value);
int security_setprocattr(struct task_struct *p, char *name, void *value, size_t size);
int security_netlink_send(struct sock *sk, struct sk_buff *skb);
int security_netlink_recv(struct sk_buff *skb, int cap);
int security_secid_to_secctx(u32 secid, char **secdata, u32 *seclen);
int security_secctx_to_secid( char *secdata, u32 seclen, u32 *secid);
void security_release_secctx(char *secdata, u32 seclen);
int security_unix_stream_connect(struct socket *sock, struct socket *other,
     struct sock *newsk);
int security_unix_may_send(struct socket *sock, struct socket *other);
int security_socket_create(int family, int type, int protocol, int kern);
int security_socket_post_create(struct socket *sock, int family,
    int type, int protocol, int kern);
int security_socket_bind(struct socket *sock, struct sockaddr *address, int addrlen);
int security_socket_connect(struct socket *sock, struct sockaddr *address, int addrlen);
int security_socket_listen(struct socket *sock, int backlog);
int security_socket_accept(struct socket *sock, struct socket *newsock);
void security_socket_post_accept(struct socket *sock, struct socket *newsock);
int security_socket_sendmsg(struct socket *sock, struct msghdr *msg, int size);
int security_socket_recvmsg(struct socket *sock, struct msghdr *msg,
       int size, int flags);
int security_socket_getsockname(struct socket *sock);
int security_socket_getpeername(struct socket *sock);
int security_socket_getsockopt(struct socket *sock, int level, int optname);
int security_socket_setsockopt(struct socket *sock, int level, int optname);
int security_socket_shutdown(struct socket *sock, int how);
int security_sock_rcv_skb(struct sock *sk, struct sk_buff *skb);
int security_socket_getpeersec_stream(struct socket *sock, char *optval,
          int *optlen, unsigned len);
int security_socket_getpeersec_dgram(struct socket *sock, struct sk_buff *skb, u32 *secid);
int security_sk_alloc(struct sock *sk, int family, gfp_t priority);
void security_sk_free(struct sock *sk);
void security_sk_clone( struct sock *sk, struct sock *newsk);
void security_sk_classify_flow(struct sock *sk, struct flowi *fl);
void security_req_classify_flow( struct request_sock *req, struct flowi *fl);
void security_sock_graft(struct sock*sk, struct socket *parent);
int security_inet_conn_request(struct sock *sk,
   struct sk_buff *skb, struct request_sock *req);
void security_inet_csk_clone(struct sock *newsk,
   struct request_sock *req);
void security_inet_conn_established(struct sock *sk,
   struct sk_buff *skb);
int security_xfrm_policy_alloc(struct xfrm_sec_ctx **ctxp, struct xfrm_user_sec_ctx *sec_ctx);
int security_xfrm_policy_clone(struct xfrm_sec_ctx *old_ctx, struct xfrm_sec_ctx **new_ctxp);
void security_xfrm_policy_free(struct xfrm_sec_ctx *ctx);
int security_xfrm_policy_delete(struct xfrm_sec_ctx *ctx);
int security_xfrm_state_alloc(struct xfrm_state *x, struct xfrm_user_sec_ctx *sec_ctx);
int security_xfrm_state_alloc_acquire(struct xfrm_state *x,
          struct xfrm_sec_ctx *polsec, u32 secid);
int security_xfrm_state_delete(struct xfrm_state *x);
void security_xfrm_state_free(struct xfrm_state *x);
int security_xfrm_policy_lookup(struct xfrm_sec_ctx *ctx, u32 fl_secid, u8 dir);
int security_xfrm_state_pol_flow_match(struct xfrm_state *x,
           struct xfrm_policy *xp, struct flowi *fl);
int security_xfrm_decode_session(struct sk_buff *skb, u32 *secid);
void security_skb_classify_flow(struct sk_buff *skb, struct flowi *fl);
int security_key_alloc(struct key *key, struct task_struct *tsk, unsigned long flags);
void security_key_free(struct key *key);
int security_key_permission(key_ref_t key_ref,
       struct task_struct *context, key_perm_t perm);
int security_key_getsecurity(struct key *key, char **_buffer);
int security_audit_rule_init(u32 field, u32 op, char *rulestr, void **lsmrule);
int security_audit_rule_known(struct audit_krule *krule);
int security_audit_rule_match(u32 secid, u32 field, u32 op, void *lsmrule,
         struct audit_context *actx);
void security_audit_rule_free(void *lsmrule);

struct sock_filter
{
  template <typename, int = 0> struct __BYPASSsock_filter {};
  template <typename, int> friend struct __BYPASSsock_filter;
 __u16 code;
 __u8 jt;
 __u8 jf;
 __u32 k;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sock_fprog
{
  template <typename, int = 0> struct __BYPASSsock_fprog {};
  template <typename, int> friend struct __BYPASSsock_fprog;
 unsigned short len;
 struct sock_filter *filter;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct sk_filter
{
  template <typename, int = 0> struct __BYPASSsk_filter {};
  template <typename, int> friend struct __BYPASSsk_filter;
 atomic_t refcnt;
 unsigned int len;
 struct rcu_head rcu;
 struct sock_filter insns[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline unsigned int sk_filter_len( struct sk_filter *fp)
{
 return fp->len * sizeof(struct sock_filter) + sizeof(*fp);
}

struct sk_buff;
struct sock;

extern int sk_filter(struct sock *sk, struct sk_buff *skb);
extern unsigned int sk_run_filter(struct sk_buff *skb,
      struct sock_filter *filter, int flen);
extern int sk_attach_filter(struct sock_fprog *fprog, struct sock *sk);
extern int sk_detach_filter(struct sock *sk);
extern int sk_chk_filter(struct sock_filter *filter, int flen);




struct net;

struct sockaddr_nl
{
  template <typename, int = 0> struct __BYPASSsockaddr_nl {};
  template <typename, int> friend struct __BYPASSsockaddr_nl;
 sa_family_t nl_family;
 unsigned short nl_pad;
 __u32 nl_pid;
        __u32 nl_groups;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nlmsghdr
{
  template <typename, int = 0> struct __BYPASSnlmsghdr {};
  template <typename, int> friend struct __BYPASSnlmsghdr;
 __u32 nlmsg_len;
 __u16 nlmsg_type;
 __u16 nlmsg_flags;
 __u32 nlmsg_seq;
 __u32 nlmsg_pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct nlmsgerr
{
  template <typename, int = 0> struct __BYPASSnlmsgerr {};
  template <typename, int> friend struct __BYPASSnlmsgerr;
 int error;
 struct nlmsghdr msg;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct nl_pktinfo
{
  template <typename, int = 0> struct __BYPASSnl_pktinfo {};
  template <typename, int> friend struct __BYPASSnl_pktinfo;
 __u32 group;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum {
 NETLINK_UNCONNECTED = 0,
 NETLINK_CONNECTED,
};
struct nlattr
{
  template <typename, int = 0> struct __BYPASSnlattr {};
  template <typename, int> friend struct __BYPASSnlattr;
 __u16 nla_len;
 __u16 nla_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline struct nlmsghdr *nlmsg_hdr( struct sk_buff *skb)
{
 return (struct nlmsghdr *)skb->data;
}

struct netlink_skb_parms
{
  template <typename, int = 0> struct __BYPASSnetlink_skb_parms {};
  template <typename, int> friend struct __BYPASSnetlink_skb_parms;
 struct ucred creds;
 __u32 pid;
 __u32 dst_group;
 kernel_cap_t eff_cap;
 __u32 loginuid;
 __u32 sessionid;
 __u32 sid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern struct sock *netlink_kernel_create(struct net *net,
       int unit,unsigned int groups,
       void (*input)(struct sk_buff *skb),
       struct mutex *cb_mutex,
       struct module *module);
extern void netlink_kernel_release(struct sock *sk);
extern int netlink_change_ngroups(struct sock *sk, unsigned int groups);
extern void netlink_clear_multicast_users(struct sock *sk, unsigned int group);
extern void netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err);
extern int netlink_has_listeners(struct sock *sk, unsigned int group);
extern int netlink_unicast(struct sock *ssk, struct sk_buff *skb, __u32 pid, int nonblock);
extern int netlink_broadcast(struct sock *ssk, struct sk_buff *skb, __u32 pid,
        __u32 group, gfp_t allocation);
extern void netlink_set_err(struct sock *ssk, __u32 pid, __u32 group, int code);
extern int netlink_register_notifier(struct notifier_block *nb);
extern int netlink_unregister_notifier(struct notifier_block *nb);


struct sock *netlink_getsockbyfilp(struct file *filp);
int netlink_attachskb(struct sock *sk, struct sk_buff *skb,
        long *timeo, struct sock *ssk);
void netlink_detachskb(struct sock *sk, struct sk_buff *skb);
int netlink_sendskb(struct sock *sk, struct sk_buff *skb);
struct netlink_callback
{
  template <typename, int = 0> struct __BYPASSnetlink_callback {};
  template <typename, int> friend struct __BYPASSnetlink_callback;
 struct sk_buff *skb;
 struct nlmsghdr *nlh;
 int (*dump)(struct sk_buff * skb, struct netlink_callback *cb);
 int (*done)(struct netlink_callback *cb);
 int family;
 long args[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netlink_notify
{
  template <typename, int = 0> struct __BYPASSnetlink_notify {};
  template <typename, int> friend struct __BYPASSnetlink_notify;
 struct net *net;
 int pid;
 int protocol;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static __inline__ struct nlmsghdr *
__nlmsg_put(struct sk_buff *skb, u32 pid, u32 seq, int type, int len, int flags)
{
 struct nlmsghdr *nlh;
 int size = ((len)+( ((((int) ( ((sizeof(struct nlmsghdr))+4 -1) & ~(4 -1) )))+4 -1) & ~(4 -1) ));

 nlh = (struct nlmsghdr*)skb_put(skb, ( ((size)+4 -1) & ~(4 -1) ));
 nlh->nlmsg_type = type;
 nlh->nlmsg_len = size;
 nlh->nlmsg_flags = flags;
 nlh->nlmsg_pid = pid;
 nlh->nlmsg_seq = seq;
 memset(((void*)(((char*)nlh) + ((0)+( ((((int) ( ((sizeof(struct nlmsghdr))+4 -1) & ~(4 -1) )))+4 -1) & ~(4 -1) )))) + len, 0, ( ((size)+4 -1) & ~(4 -1) ) - size);
 return nlh;
}
extern int netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
         struct nlmsghdr *nlh,
         int (*dump)(struct sk_buff *skb, struct netlink_callback*),
         int (*done)(struct netlink_callback*));




extern void netlink_set_nonroot(int protocol, unsigned flag);






struct rtnl_link_stats
{
  template <typename, int = 0> struct __BYPASSrtnl_link_stats {};
  template <typename, int> friend struct __BYPASSrtnl_link_stats;
 __u32 rx_packets;
 __u32 tx_packets;
 __u32 rx_bytes;
 __u32 tx_bytes;
 __u32 rx_errors;
 __u32 tx_errors;
 __u32 rx_dropped;
 __u32 tx_dropped;
 __u32 multicast;
 __u32 collisions;


 __u32 rx_length_errors;
 __u32 rx_over_errors;
 __u32 rx_crc_errors;
 __u32 rx_frame_errors;
 __u32 rx_fifo_errors;
 __u32 rx_missed_errors;


 __u32 tx_aborted_errors;
 __u32 tx_carrier_errors;
 __u32 tx_fifo_errors;
 __u32 tx_heartbeat_errors;
 __u32 tx_window_errors;


 __u32 rx_compressed;
 __u32 tx_compressed;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct rtnl_link_ifmap
{
  template <typename, int = 0> struct __BYPASSrtnl_link_ifmap {};
  template <typename, int> friend struct __BYPASSrtnl_link_ifmap;
 __u64 mem_start;
 __u64 mem_end;
 __u64 base_addr;
 __u16 irq;
 __u8 dma;
 __u8 port;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum
{
 IFLA_UNSPEC,
 IFLA_ADDRESS,
 IFLA_BROADCAST,
 IFLA_IFNAME,
 IFLA_MTU,
 IFLA_LINK,
 IFLA_QDISC,
 IFLA_STATS,
 IFLA_COST,

 IFLA_PRIORITY,

 IFLA_MASTER,

 IFLA_WIRELESS,

 IFLA_PROTINFO,

 IFLA_TXQLEN,

 IFLA_MAP,

 IFLA_WEIGHT,

 IFLA_OPERSTATE,
 IFLA_LINKMODE,
 IFLA_LINKINFO,

 IFLA_NET_NS_PID,
 __IFLA_MAX
};
enum
{
 IFLA_INET6_UNSPEC,
 IFLA_INET6_FLAGS,
 IFLA_INET6_CONF,
 IFLA_INET6_STATS,
 IFLA_INET6_MCAST,
 IFLA_INET6_CACHEINFO,
 IFLA_INET6_ICMP6STATS,
 __IFLA_INET6_MAX
};



struct ifla_cacheinfo
{
  template <typename, int = 0> struct __BYPASSifla_cacheinfo {};
  template <typename, int> friend struct __BYPASSifla_cacheinfo;
 __u32 max_reasm_len;
 __u32 tstamp;
 __u32 reachable_time;
 __u32 retrans_time;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum
{
 IFLA_INFO_UNSPEC,
 IFLA_INFO_KIND,
 IFLA_INFO_DATA,
 IFLA_INFO_XSTATS,
 __IFLA_INFO_MAX,
};





enum
{
 IFLA_VLAN_UNSPEC,
 IFLA_VLAN_ID,
 IFLA_VLAN_FLAGS,
 IFLA_VLAN_EGRESS_QOS,
 IFLA_VLAN_INGRESS_QOS,
 __IFLA_VLAN_MAX,
};



struct ifla_vlan_flags {
  template <typename, int = 0> struct __BYPASSifla_vlan_flags {};
  template <typename, int> friend struct __BYPASSifla_vlan_flags;
 __u32 flags;
 __u32 mask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum
{
 IFLA_VLAN_QOS_UNSPEC,
 IFLA_VLAN_QOS_MAPPING,
 __IFLA_VLAN_QOS_MAX
};



struct ifla_vlan_qos_mapping
{
  template <typename, int = 0> struct __BYPASSifla_vlan_qos_mapping {};
  template <typename, int> friend struct __BYPASSifla_vlan_qos_mapping;
 __u32 from;
 __u32 to;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct ifaddrmsg
{
  template <typename, int = 0> struct __BYPASSifaddrmsg {};
  template <typename, int> friend struct __BYPASSifaddrmsg;
 __u8 ifa_family;
 __u8 ifa_prefixlen;
 __u8 ifa_flags;
 __u8 ifa_scope;
 __u32 ifa_index;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum
{
 IFA_UNSPEC,
 IFA_ADDRESS,
 IFA_LOCAL,
 IFA_LABEL,
 IFA_BROADCAST,
 IFA_ANYCAST,
 IFA_CACHEINFO,
 IFA_MULTICAST,
 __IFA_MAX,
};
struct ifa_cacheinfo
{
  template <typename, int = 0> struct __BYPASSifa_cacheinfo {};
  template <typename, int> friend struct __BYPASSifa_cacheinfo;
 __u32 ifa_prefered;
 __u32 ifa_valid;
 __u32 cstamp;
 __u32 tstamp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct ndmsg
{
  template <typename, int = 0> struct __BYPASSndmsg {};
  template <typename, int> friend struct __BYPASSndmsg;
 __u8 ndm_family;
 __u8 ndm_pad1;
 __u16 ndm_pad2;
 __s32 ndm_ifindex;
 __u16 ndm_state;
 __u8 ndm_flags;
 __u8 ndm_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum
{
 NDA_UNSPEC,
 NDA_DST,
 NDA_LLADDR,
 NDA_CACHEINFO,
 NDA_PROBES,
 __NDA_MAX
};
struct nda_cacheinfo
{
  template <typename, int = 0> struct __BYPASSnda_cacheinfo {};
  template <typename, int> friend struct __BYPASSnda_cacheinfo;
 __u32 ndm_confirmed;
 __u32 ndm_used;
 __u32 ndm_updated;
 __u32 ndm_refcnt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ndt_stats
{
  template <typename, int = 0> struct __BYPASSndt_stats {};
  template <typename, int> friend struct __BYPASSndt_stats;
 __u64 ndts_allocs;
 __u64 ndts_destroys;
 __u64 ndts_hash_grows;
 __u64 ndts_res_failed;
 __u64 ndts_lookups;
 __u64 ndts_hits;
 __u64 ndts_rcv_probes_mcast;
 __u64 ndts_rcv_probes_ucast;
 __u64 ndts_periodic_gc_runs;
 __u64 ndts_forced_gc_runs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 NDTPA_UNSPEC,
 NDTPA_IFINDEX,
 NDTPA_REFCNT,
 NDTPA_REACHABLE_TIME,
 NDTPA_BASE_REACHABLE_TIME,
 NDTPA_RETRANS_TIME,
 NDTPA_GC_STALETIME,
 NDTPA_DELAY_PROBE_TIME,
 NDTPA_QUEUE_LEN,
 NDTPA_APP_PROBES,
 NDTPA_UCAST_PROBES,
 NDTPA_MCAST_PROBES,
 NDTPA_ANYCAST_DELAY,
 NDTPA_PROXY_DELAY,
 NDTPA_PROXY_QLEN,
 NDTPA_LOCKTIME,
 __NDTPA_MAX
};


struct ndtmsg
{
  template <typename, int = 0> struct __BYPASSndtmsg {};
  template <typename, int> friend struct __BYPASSndtmsg;
 __u8 ndtm_family;
 __u8 ndtm_pad1;
 __u16 ndtm_pad2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ndt_config
{
  template <typename, int = 0> struct __BYPASSndt_config {};
  template <typename, int> friend struct __BYPASSndt_config;
 __u16 ndtc_key_len;
 __u16 ndtc_entry_size;
 __u32 ndtc_entries;
 __u32 ndtc_last_flush;
 __u32 ndtc_last_rand;
 __u32 ndtc_hash_rnd;
 __u32 ndtc_hash_mask;
 __u32 ndtc_hash_chain_gc;
 __u32 ndtc_proxy_qlen;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 NDTA_UNSPEC,
 NDTA_NAME,
 NDTA_THRESH1,
 NDTA_THRESH2,
 NDTA_THRESH3,
 NDTA_CONFIG,
 NDTA_PARMS,
 NDTA_STATS,
 NDTA_GC_INTERVAL,
 __NDTA_MAX
};







enum {
 RTM_BASE = 16,


 RTM_NEWLINK = 16,

 RTM_DELLINK,

 RTM_GETLINK,

 RTM_SETLINK,


 RTM_NEWADDR = 20,

 RTM_DELADDR,

 RTM_GETADDR,


 RTM_NEWROUTE = 24,

 RTM_DELROUTE,

 RTM_GETROUTE,


 RTM_NEWNEIGH = 28,

 RTM_DELNEIGH,

 RTM_GETNEIGH,


 RTM_NEWRULE = 32,

 RTM_DELRULE,

 RTM_GETRULE,


 RTM_NEWQDISC = 36,

 RTM_DELQDISC,

 RTM_GETQDISC,


 RTM_NEWTCLASS = 40,

 RTM_DELTCLASS,

 RTM_GETTCLASS,


 RTM_NEWTFILTER = 44,

 RTM_DELTFILTER,

 RTM_GETTFILTER,


 RTM_NEWACTION = 48,

 RTM_DELACTION,

 RTM_GETACTION,


 RTM_NEWPREFIX = 52,


 RTM_GETMULTICAST = 58,


 RTM_GETANYCAST = 62,


 RTM_NEWNEIGHTBL = 64,

 RTM_GETNEIGHTBL = 66,

 RTM_SETNEIGHTBL,


 RTM_NEWNDUSEROPT = 68,


 RTM_NEWADDRLABEL = 72,

 RTM_DELADDRLABEL,

 RTM_GETADDRLABEL,


 __RTM_MAX,

};
struct rtattr
{
  template <typename, int = 0> struct __BYPASSrtattr {};
  template <typename, int> friend struct __BYPASSrtattr;
 unsigned short rta_len;
 unsigned short rta_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct rtmsg
{
  template <typename, int = 0> struct __BYPASSrtmsg {};
  template <typename, int> friend struct __BYPASSrtmsg;
 unsigned char rtm_family;
 unsigned char rtm_dst_len;
 unsigned char rtm_src_len;
 unsigned char rtm_tos;

 unsigned char rtm_table;
 unsigned char rtm_protocol;
 unsigned char rtm_scope;
 unsigned char rtm_type;

 unsigned rtm_flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum
{
 RTN_UNSPEC,
 RTN_UNICAST,
 RTN_LOCAL,
 RTN_BROADCAST,

 RTN_ANYCAST,

 RTN_MULTICAST,
 RTN_BLACKHOLE,
 RTN_UNREACHABLE,
 RTN_PROHIBIT,
 RTN_THROW,
 RTN_NAT,
 RTN_XRESOLVE,
 __RTN_MAX
};
enum rt_scope_t
{
 RT_SCOPE_UNIVERSE=0,

 RT_SCOPE_SITE=200,
 RT_SCOPE_LINK=253,
 RT_SCOPE_HOST=254,
 RT_SCOPE_NOWHERE=255
};
enum rt_class_t
{
 RT_TABLE_UNSPEC=0,

 RT_TABLE_COMPAT=252,
 RT_TABLE_DEFAULT=253,
 RT_TABLE_MAIN=254,
 RT_TABLE_LOCAL=255,
 RT_TABLE_MAX=0xFFFFFFFF
};




enum rtattr_type_t
{
 RTA_UNSPEC,
 RTA_DST,
 RTA_SRC,
 RTA_IIF,
 RTA_OIF,
 RTA_GATEWAY,
 RTA_PRIORITY,
 RTA_PREFSRC,
 RTA_METRICS,
 RTA_MULTIPATH,
 RTA_PROTOINFO,
 RTA_FLOW,
 RTA_CACHEINFO,
 RTA_SESSION,
 RTA_MP_ALGO,
 RTA_TABLE,
 __RTA_MAX
};
struct rtnexthop
{
  template <typename, int = 0> struct __BYPASSrtnexthop {};
  template <typename, int> friend struct __BYPASSrtnexthop;
 unsigned short rtnh_len;
 unsigned char rtnh_flags;
 unsigned char rtnh_hops;
 int rtnh_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct rta_cacheinfo
{
  template <typename, int = 0> struct __BYPASSrta_cacheinfo {};
  template <typename, int> friend struct __BYPASSrta_cacheinfo;
 __u32 rta_clntref;
 __u32 rta_lastuse;
 __s32 rta_expires;
 __u32 rta_error;
 __u32 rta_used;


 __u32 rta_id;
 __u32 rta_ts;
 __u32 rta_tsage;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum
{
 RTAX_UNSPEC,

 RTAX_LOCK,

 RTAX_MTU,

 RTAX_WINDOW,

 RTAX_RTT,

 RTAX_RTTVAR,

 RTAX_SSTHRESH,

 RTAX_CWND,

 RTAX_ADVMSS,

 RTAX_REORDERING,

 RTAX_HOPLIMIT,

 RTAX_INITCWND,

 RTAX_FEATURES,

 RTAX_RTO_MIN,

 __RTAX_MAX
};
struct rta_session
{
  template <typename, int = 0> struct __BYPASSrta_session {};
  template <typename, int> friend struct __BYPASSrta_session;
 __u8 proto;
 __u8 pad1;
 __u16 pad2;

 union {
  struct {
   __u16 sport;
   __u16 dport;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ports;

  struct {
   __u8 type;
   __u8 code;
   __u16 ident;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icmpt;

  __u32 spi;
 } u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct rtgenmsg
{
  template <typename, int = 0> struct __BYPASSrtgenmsg {};
  template <typename, int> friend struct __BYPASSrtgenmsg;
 unsigned char rtgen_family;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ifinfomsg
{
  template <typename, int = 0> struct __BYPASSifinfomsg {};
  template <typename, int> friend struct __BYPASSifinfomsg;
 unsigned char ifi_family;
 unsigned char __ifi_pad;
 unsigned short ifi_type;
 int ifi_index;
 unsigned ifi_flags;
 unsigned ifi_change;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct prefixmsg
{
  template <typename, int = 0> struct __BYPASSprefixmsg {};
  template <typename, int> friend struct __BYPASSprefixmsg;
 unsigned char prefix_family;
 unsigned char prefix_pad1;
 unsigned short prefix_pad2;
 int prefix_ifindex;
 unsigned char prefix_type;
 unsigned char prefix_len;
 unsigned char prefix_flags;
 unsigned char prefix_pad3;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum
{
 PREFIX_UNSPEC,
 PREFIX_ADDRESS,
 PREFIX_CACHEINFO,
 __PREFIX_MAX
};



struct prefix_cacheinfo
{
  template <typename, int = 0> struct __BYPASSprefix_cacheinfo {};
  template <typename, int> friend struct __BYPASSprefix_cacheinfo;
 __u32 preferred_time;
 __u32 valid_time;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct tcmsg
{
  template <typename, int = 0> struct __BYPASStcmsg {};
  template <typename, int> friend struct __BYPASStcmsg;
 unsigned char tcm_family;
 unsigned char tcm__pad1;
 unsigned short tcm__pad2;
 int tcm_ifindex;
 __u32 tcm_handle;
 __u32 tcm_parent;
 __u32 tcm_info;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum
{
 TCA_UNSPEC,
 TCA_KIND,
 TCA_OPTIONS,
 TCA_STATS,
 TCA_XSTATS,
 TCA_RATE,
 TCA_FCNT,
 TCA_STATS2,
 TCA_STAB,
 __TCA_MAX
};
struct nduseroptmsg
{
  template <typename, int = 0> struct __BYPASSnduseroptmsg {};
  template <typename, int> friend struct __BYPASSnduseroptmsg;
 unsigned char nduseropt_family;
 unsigned char nduseropt_pad1;
 unsigned short nduseropt_opts_len;
 int nduseropt_ifindex;
 __u8 nduseropt_icmp_type;
 __u8 nduseropt_icmp_code;
 unsigned short nduseropt_pad2;
 unsigned int nduseropt_pad3;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum
{
 NDUSEROPT_UNSPEC,
 NDUSEROPT_SRCADDR,
 __NDUSEROPT_MAX
};
enum rtnetlink_groups {
 RTNLGRP_NONE,

 RTNLGRP_LINK,

 RTNLGRP_NOTIFY,

 RTNLGRP_NEIGH,

 RTNLGRP_TC,

 RTNLGRP_IPV4_IFADDR,

 RTNLGRP_IPV4_MROUTE,

 RTNLGRP_IPV4_ROUTE,

 RTNLGRP_IPV4_RULE,

 RTNLGRP_IPV6_IFADDR,

 RTNLGRP_IPV6_MROUTE,

 RTNLGRP_IPV6_ROUTE,

 RTNLGRP_IPV6_IFINFO,

 RTNLGRP_DECnet_IFADDR,

 RTNLGRP_NOP2,
 RTNLGRP_DECnet_ROUTE,

 RTNLGRP_DECnet_RULE,

 RTNLGRP_NOP4,
 RTNLGRP_IPV6_PREFIX,

 RTNLGRP_IPV6_RULE,

 RTNLGRP_ND_USEROPT,

 __RTNLGRP_MAX
};



struct tcamsg
{
  template <typename, int = 0> struct __BYPASStcamsg {};
  template <typename, int> friend struct __BYPASStcamsg;
 unsigned char tca_family;
 unsigned char tca__pad1;
 unsigned short tca__pad2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static __inline__ int rtattr_strcmp( struct rtattr *rta, char *str)
{
 int len = strlen(str) + 1;
 return len > rta->rta_len || memcmp(((void*)(((char*)(rta)) + (( ((sizeof(struct rtattr))+4 -1) & ~(4 -1) ) + (0)))), str, len);
}

extern int rtnetlink_send(struct sk_buff *skb, struct net *net, u32 pid, u32 group, int echo);
extern int rtnl_unicast(struct sk_buff *skb, struct net *net, u32 pid);
extern int rtnl_notify(struct sk_buff *skb, struct net *net, u32 pid, u32 group,
         struct nlmsghdr *nlh, gfp_t flags);
extern void rtnl_set_sk_err(struct net *net, u32 group, int error);
extern int rtnetlink_put_metrics(struct sk_buff *skb, u32 *metrics);
extern int rtnl_put_cacheinfo(struct sk_buff *skb, struct dst_entry *dst,
         u32 id, u32 ts, u32 tsage, long expires,
         u32 error);

extern void __rta_fill(struct sk_buff *skb, int attrtype, int attrlen, void *data);
static inline struct rtattr *
__rta_reserve(struct sk_buff *skb, int attrtype, int attrlen)
{
 struct rtattr *rta;
 int size = (( ((sizeof(struct rtattr))+4 -1) & ~(4 -1) ) + (attrlen));

 rta = (struct rtattr*)skb_put(skb, ( ((size)+4 -1) & ~(4 -1) ));
 rta->rta_type = attrtype;
 rta->rta_len = size;
 memset(((void*)(((char*)(rta)) + (( ((sizeof(struct rtattr))+4 -1) & ~(4 -1) ) + (0)))) + attrlen, 0, ( ((size)+4 -1) & ~(4 -1) ) - size);
 return rta;
}






extern void rtmsg_ifinfo(int type, struct net_device *dev, unsigned change);
extern void rtnetlink_init(void);
extern void __rtnl_unlock(void);
static inline u32 rtm_get_table(struct rtattr **rta, u8 table)
{
 return ({ if (!rta[RTA_TABLE-1] || ((int)((rta[RTA_TABLE-1])->rta_len) - (( ((sizeof(struct rtattr))+4 -1) & ~(4 -1) ) + (0))) < sizeof(u32)) goto rtattr_failure; *(u32 *) ((void*)(((char*)(rta[RTA_TABLE-1])) + (( ((sizeof(struct rtattr))+4 -1) & ~(4 -1) ) + (0)))); });
rtattr_failure:
 return table;
}













enum {
 NLA_UNSPEC,
 NLA_U8,
 NLA_U16,
 NLA_U32,
 NLA_U64,
 NLA_STRING,
 NLA_FLAG,
 NLA_MSECS,
 NLA_NESTED,
 NLA_NESTED_COMPAT,
 NLA_NUL_STRING,
 NLA_BINARY,
 __NLA_TYPE_MAX,
};
struct nla_policy {
  template <typename, int = 0> struct __BYPASSnla_policy {};
  template <typename, int> friend struct __BYPASSnla_policy;
 u16 type;
 u16 len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct nl_info {
  template <typename, int = 0> struct __BYPASSnl_info {};
  template <typename, int> friend struct __BYPASSnl_info;
 struct nlmsghdr *nlh;
 struct net *nl_net;
 u32 pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int netlink_rcv_skb(struct sk_buff *skb,
     int (*cb)(struct sk_buff *,
        struct nlmsghdr *));
extern int nlmsg_notify(struct sock *sk, struct sk_buff *skb,
         u32 pid, unsigned int group, int report,
         gfp_t flags);

extern int nla_validate(struct nlattr *head, int len, int maxtype,
         struct nla_policy *policy);
extern int nla_parse(struct nlattr *tb[], int maxtype,
      struct nlattr *head, int len,
      struct nla_policy *policy);
extern struct nlattr * nla_find(struct nlattr *head, int len, int attrtype);
extern size_t nla_strlcpy(char *dst, struct nlattr *nla,
        size_t dstsize);
extern int nla_memcpy(void *dest, struct nlattr *src, int count);
extern int nla_memcmp( struct nlattr *nla, void *data,
       size_t size);
extern int nla_strcmp( struct nlattr *nla, char *str);
extern struct nlattr * __nla_reserve(struct sk_buff *skb, int attrtype,
          int attrlen);
extern void * __nla_reserve_nohdr(struct sk_buff *skb, int attrlen);
extern struct nlattr * nla_reserve(struct sk_buff *skb, int attrtype,
        int attrlen);
extern void * nla_reserve_nohdr(struct sk_buff *skb, int attrlen);
extern void __nla_put(struct sk_buff *skb, int attrtype,
      int attrlen, void *data);
extern void __nla_put_nohdr(struct sk_buff *skb, int attrlen,
     void *data);
extern int nla_put(struct sk_buff *skb, int attrtype,
    int attrlen, void *data);
extern int nla_put_nohdr(struct sk_buff *skb, int attrlen,
          void *data);
extern int nla_append(struct sk_buff *skb, int attrlen,
       void *data);
static inline int nlmsg_msg_size(int payload)
{
 return ((int) ( ((sizeof(struct nlmsghdr))+4 -1) & ~(4 -1) )) + payload;
}





static inline int nlmsg_total_size(int payload)
{
 return ( ((nlmsg_msg_size(payload))+4 -1) & ~(4 -1) );
}





static inline int nlmsg_padlen(int payload)
{
 return nlmsg_total_size(payload) - nlmsg_msg_size(payload);
}





static inline void *nlmsg_data( struct nlmsghdr *nlh)
{
 return (unsigned char *) nlh + ((int) ( ((sizeof(struct nlmsghdr))+4 -1) & ~(4 -1) ));
}





static inline int nlmsg_len( struct nlmsghdr *nlh)
{
 return nlh->nlmsg_len - ((int) ( ((sizeof(struct nlmsghdr))+4 -1) & ~(4 -1) ));
}






static inline struct nlattr *nlmsg_attrdata( struct nlmsghdr *nlh,
         int hdrlen)
{
 unsigned char *data = nlmsg_data(nlh);
 return (struct nlattr *) (data + ( ((hdrlen)+4 -1) & ~(4 -1) ));
}






static inline int nlmsg_attrlen( struct nlmsghdr *nlh, int hdrlen)
{
 return nlmsg_len(nlh) - ( ((hdrlen)+4 -1) & ~(4 -1) );
}






static inline int nlmsg_ok( struct nlmsghdr *nlh, int remaining)
{
 return (remaining >= sizeof(struct nlmsghdr) &&
  nlh->nlmsg_len >= sizeof(struct nlmsghdr) &&
  nlh->nlmsg_len <= remaining);
}
static inline struct nlmsghdr *nlmsg_next(struct nlmsghdr *nlh, int *remaining)
{
 int totlen = ( ((nlh->nlmsg_len)+4 -1) & ~(4 -1) );

 *remaining -= totlen;

 return (struct nlmsghdr *) ((unsigned char *) nlh + totlen);
}
static inline int nlmsg_parse(struct nlmsghdr *nlh, int hdrlen,
         struct nlattr *tb[], int maxtype,
         struct nla_policy *policy)
{
 if (nlh->nlmsg_len < nlmsg_msg_size(hdrlen))
  return -22;

 return nla_parse(tb, maxtype, nlmsg_attrdata(nlh, hdrlen),
    nlmsg_attrlen(nlh, hdrlen), policy);
}
static inline struct nlattr *nlmsg_find_attr(struct nlmsghdr *nlh,
          int hdrlen, int attrtype)
{
 return nla_find(nlmsg_attrdata(nlh, hdrlen),
   nlmsg_attrlen(nlh, hdrlen), attrtype);
}
static inline int nlmsg_validate(struct nlmsghdr *nlh, int hdrlen, int maxtype,
     struct nla_policy *policy)
{
 if (nlh->nlmsg_len < nlmsg_msg_size(hdrlen))
  return -22;

 return nla_validate(nlmsg_attrdata(nlh, hdrlen),
       nlmsg_attrlen(nlh, hdrlen), maxtype, policy);
}







static inline int nlmsg_report(struct nlmsghdr *nlh)
{
 return !!(nlh->nlmsg_flags & 8);
}
static inline struct nlmsghdr *nlmsg_put(struct sk_buff *skb, u32 pid, u32 seq,
      int type, int payload, int flags)
{
 if (__builtin_expect(!!(skb_tailroom(skb) < nlmsg_total_size(payload)), 0))
  return 0;

 return __nlmsg_put(skb, pid, seq, type, payload, flags);
}
static inline struct nlmsghdr *nlmsg_put_answer(struct sk_buff *skb,
      struct netlink_callback *cb,
      int type, int payload,
      int flags)
{
 return nlmsg_put(skb, (*(struct netlink_skb_parms*)&((cb->skb)->cb)).pid, cb->nlh->nlmsg_seq,
    type, payload, flags);
}
static inline struct sk_buff *nlmsg_new(size_t payload, gfp_t flags)
{
 return alloc_skb(nlmsg_total_size(payload), flags);
}
static inline int nlmsg_end(struct sk_buff *skb, struct nlmsghdr *nlh)
{
 nlh->nlmsg_len = skb_tail_pointer(skb) - (unsigned char *)nlh;

 return skb->len;
}







static inline void *nlmsg_get_pos(struct sk_buff *skb)
{
 return skb_tail_pointer(skb);
}
static inline void nlmsg_trim(struct sk_buff *skb, void *mark)
{
 if (mark)
  skb_trim(skb, (unsigned char *) mark - skb->data);
}
static inline void nlmsg_cancel(struct sk_buff *skb, struct nlmsghdr *nlh)
{
 nlmsg_trim(skb, nlh);
}





static inline void nlmsg_free(struct sk_buff *skb)
{
 kfree_skb(skb);
}
static inline int nlmsg_multicast(struct sock *sk, struct sk_buff *skb,
      u32 pid, unsigned int group, gfp_t flags)
{
 int err;

 (*(struct netlink_skb_parms*)&((skb)->cb)).dst_group = group;

 err = netlink_broadcast(sk, skb, pid, group, flags);
 if (err > 0)
  err = 0;

 return err;
}







static inline int nlmsg_unicast(struct sock *sk, struct sk_buff *skb, u32 pid)
{
 int err;

 err = netlink_unicast(sk, skb, pid, 0x40);
 if (err > 0)
  err = 0;

 return err;
}
static inline int nla_attr_size(int payload)
{
 return ((int) (((sizeof(struct nlattr)) + 4 - 1) & ~(4 - 1))) + payload;
}





static inline int nla_total_size(int payload)
{
 return (((nla_attr_size(payload)) + 4 - 1) & ~(4 - 1));
}





static inline int nla_padlen(int payload)
{
 return nla_total_size(payload) - nla_attr_size(payload);
}





static inline int nla_type( struct nlattr *nla)
{
 return nla->nla_type & ~((1 << 15) | (1 << 14));
}





static inline struct nlattr *nla_data( struct nlattr *nla)
{
        return (struct nlattr *)((char *) nla + ((int) (((sizeof(struct nlattr)) + 4 - 1) & ~(4 - 1))));
}





static inline int nla_len( struct nlattr *nla)
{
 return nla->nla_len - ((int) (((sizeof(struct nlattr)) + 4 - 1) & ~(4 - 1)));
}






static inline int nla_ok( struct nlattr *nla, int remaining)
{
 return remaining >= (int) sizeof(*nla) &&
        nla->nla_len >= sizeof(*nla) &&
        nla->nla_len <= remaining;
}
static inline struct nlattr *nla_next( struct nlattr *nla, int *remaining)
{
 int totlen = (((nla->nla_len) + 4 - 1) & ~(4 - 1));

 *remaining -= totlen;
 return (struct nlattr *) ((char *) nla + totlen);
}
static inline struct nlattr *nla_find_nested(struct nlattr *nla, int attrtype)
{
 return nla_find(nla_data(nla), nla_len(nla), attrtype);
}
static inline int nla_parse_nested(struct nlattr *tb[], int maxtype,
       struct nlattr *nla,
       struct nla_policy *policy)
{
 return nla_parse(tb, maxtype, nla_data(nla), nla_len(nla), policy);
}
static inline int __nla_parse_nested_compat(struct nlattr *tb[], int maxtype,
         struct nlattr *nla,
         struct nla_policy *policy,
         int len)
{
 int nested_len = nla_len(nla) - (((len) + 4 - 1) & ~(4 - 1));

 if (nested_len < 0)
  return -22;
 if (nested_len >= nla_attr_size(0))
  return nla_parse(tb, maxtype, nla_data(nla) + (((len) + 4 - 1) & ~(4 - 1)),
     nested_len, policy);
 memset(tb, 0, sizeof(struct nlattr *) * (maxtype + 1));
 return 0;
}
static inline int nla_put_u8(struct sk_buff *skb, int attrtype, u8 value)
{
 return nla_put(skb, attrtype, sizeof(u8), &value);
}







static inline int nla_put_u16(struct sk_buff *skb, int attrtype, u16 value)
{
 return nla_put(skb, attrtype, sizeof(u16), &value);
}







static inline int nla_put_u32(struct sk_buff *skb, int attrtype, u32 value)
{
 return nla_put(skb, attrtype, sizeof(u32), &value);
}







static inline int nla_put_u64(struct sk_buff *skb, int attrtype, u64 value)
{
 return nla_put(skb, attrtype, sizeof(u64), &value);
}







static inline int nla_put_string(struct sk_buff *skb, int attrtype,
     char *str)
{
 return nla_put(skb, attrtype, strlen(str) + 1, str);
}






static inline int nla_put_flag(struct sk_buff *skb, int attrtype)
{
 return nla_put(skb, attrtype, 0, 0);
}







static inline int nla_put_msecs(struct sk_buff *skb, int attrtype,
    unsigned long jiffies)
{
 u64 tmp = jiffies_to_msecs(jiffies);
 return nla_put(skb, attrtype, sizeof(u64), &tmp);
}
static inline u32 nla_get_u32(struct nlattr *nla)
{
 return *(u32 *) nla_data(nla);
}





static inline __be32 nla_get_be32(struct nlattr *nla)
{
 return *(__be32 *) nla_data(nla);
}





static inline u16 nla_get_u16(struct nlattr *nla)
{
 return *(u16 *) nla_data(nla);
}





static inline __be16 nla_get_be16(struct nlattr *nla)
{
 return *(__be16 *) nla_data(nla);
}





static inline __le16 nla_get_le16(struct nlattr *nla)
{
 return *(__le16 *) nla_data(nla);
}





static inline u8 nla_get_u8(struct nlattr *nla)
{
 return *(u8 *) nla_data(nla);
}





static inline u64 nla_get_u64(struct nlattr *nla)
{
 u64 tmp;

 nla_memcpy(&tmp, nla, sizeof(tmp));

 return tmp;
}





static inline int nla_get_flag(struct nlattr *nla)
{
 return !!nla;
}







static inline unsigned long nla_get_msecs(struct nlattr *nla)
{
 u64 msecs = nla_get_u64(nla);

 return msecs_to_jiffies((unsigned long) msecs);
}
static inline struct nlattr *nla_nest_start(struct sk_buff *skb, int attrtype)
{
 struct nlattr *start = (struct nlattr *)skb_tail_pointer(skb);

 if (nla_put(skb, attrtype, 0, 0) < 0)
  return 0;

 return start;
}
static inline int nla_nest_end(struct sk_buff *skb, struct nlattr *start)
{
 start->nla_len = skb_tail_pointer(skb) - (unsigned char *)start;
 return skb->len;
}
static inline struct nlattr *nla_nest_compat_start(struct sk_buff *skb,
         int attrtype, int attrlen,
         void *data)
{
 struct nlattr *start = (struct nlattr *)skb_tail_pointer(skb);

 if (nla_put(skb, attrtype, attrlen, data) < 0)
  return 0;
 if (nla_nest_start(skb, attrtype) == 0) {
  nlmsg_trim(skb, start);
  return 0;
 }
 return start;
}
static inline int nla_nest_compat_end(struct sk_buff *skb, struct nlattr *start)
{
 struct nlattr *nest = (void *)start + ( ((start->nla_len)+4 -1) & ~(4 -1) );

 start->nla_len = skb_tail_pointer(skb) - (unsigned char *)start;
 return nla_nest_end(skb, nest);
}
static inline void nla_nest_cancel(struct sk_buff *skb, struct nlattr *start)
{
 nlmsg_trim(skb, start);
}
static inline int nla_validate_nested(struct nlattr *start, int maxtype,
          struct nla_policy *policy)
{
 return nla_validate(nla_data(start), nla_len(start), maxtype, policy);
}

typedef int (*rtnl_doit_func)(struct sk_buff *, struct nlmsghdr *, void *);
typedef int (*rtnl_dumpit_func)(struct sk_buff *, struct netlink_callback *);

extern int __rtnl_register(int protocol, int msgtype,
    rtnl_doit_func, rtnl_dumpit_func);
extern void rtnl_register(int protocol, int msgtype,
         rtnl_doit_func, rtnl_dumpit_func);
extern int rtnl_unregister(int protocol, int msgtype);
extern void rtnl_unregister_all(int protocol);

static inline int rtnl_msg_family(struct nlmsghdr *nlh)
{
 if (nlmsg_len(nlh) >= sizeof(struct rtgenmsg))
  return ((struct rtgenmsg *) nlmsg_data(nlh))->rtgen_family;
 else
  return 0;
}
struct rtnl_link_ops {
  template <typename, int = 0> struct __BYPASSrtnl_link_ops {};
  template <typename, int> friend struct __BYPASSrtnl_link_ops;
 struct list_head list;

 char *kind;

 size_t priv_size;
 void (*setup)(struct net_device *dev);

 int maxtype;
 struct nla_policy *policy;
 int (*validate)(struct nlattr *tb[],
         struct nlattr *data[]);

 int (*newlink)(struct net_device *dev,
        struct nlattr *tb[],
        struct nlattr *data[]);
 int (*changelink)(struct net_device *dev,
           struct nlattr *tb[],
           struct nlattr *data[]);
 void (*dellink)(struct net_device *dev);

 size_t (*get_size)( struct net_device *dev);
 int (*fill_info)(struct sk_buff *skb,
          struct net_device *dev);

 size_t (*get_xstats_size)( struct net_device *dev);
 int (*fill_xstats)(struct sk_buff *skb,
            struct net_device *dev);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int __rtnl_link_register(struct rtnl_link_ops *ops);
extern void __rtnl_link_unregister(struct rtnl_link_ops *ops);
extern void rtnl_kill_links(struct net *net, struct rtnl_link_ops *ops);

extern int rtnl_link_register(struct rtnl_link_ops *ops);
extern void rtnl_link_unregister(struct rtnl_link_ops *ops);

extern struct net_device *rtnl_create_link(struct net *net, char *ifname,
  struct rtnl_link_ops *ops, struct nlattr *tb[]);
extern struct nla_policy ifla_policy[(__IFLA_MAX - 1)+1];
struct neighbour;

struct neigh_parms
{
  template <typename, int = 0> struct __BYPASSneigh_parms {};
  template <typename, int> friend struct __BYPASSneigh_parms;



 struct net_device *dev;
 struct neigh_parms *next;
 int (*neigh_setup)(struct neighbour *);
 void (*neigh_cleanup)(struct neighbour *);
 struct neigh_table *tbl;

 void *sysctl_table;

 int dead;
 atomic_t refcnt;
 struct rcu_head rcu_head;

 int base_reachable_time;
 int retrans_time;
 int gc_staletime;
 int reachable_time;
 int delay_probe_time;

 int queue_len;
 int ucast_probes;
 int app_probes;
 int mcast_probes;
 int anycast_delay;
 int proxy_delay;
 int proxy_qlen;
 int locktime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct neigh_statistics
{
  template <typename, int = 0> struct __BYPASSneigh_statistics {};
  template <typename, int> friend struct __BYPASSneigh_statistics;
 unsigned long allocs;
 unsigned long destroys;
 unsigned long hash_grows;

 unsigned long res_failed;

 unsigned long lookups;
 unsigned long hits;

 unsigned long rcv_probes_mcast;
 unsigned long rcv_probes_ucast;

 unsigned long periodic_gc_runs;
 unsigned long forced_gc_runs;

 unsigned long unres_discards;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct neighbour
{
  template <typename, int = 0> struct __BYPASSneighbour {};
  template <typename, int> friend struct __BYPASSneighbour;
 struct neighbour *next;
 struct neigh_table *tbl;
 struct neigh_parms *parms;
 struct net_device *dev;
 unsigned long used;
 unsigned long confirmed;
 unsigned long updated;
 __u8 flags;
 __u8 nud_state;
 __u8 type;
 __u8 dead;
 atomic_t probes;
 rwlock_t lock;
 unsigned char ha[(((32)+((typeof(32))(sizeof(unsigned long))-1))&~((typeof(32))(sizeof(unsigned long))-1))];
 struct hh_cache *hh;
 atomic_t refcnt;
 int (*output)(struct sk_buff *skb);
 struct sk_buff_head arp_queue;
 struct timer_list timer;
 struct neigh_ops *ops;
 u8 primary_key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct neigh_ops
{
  template <typename, int = 0> struct __BYPASSneigh_ops {};
  template <typename, int> friend struct __BYPASSneigh_ops;
 int family;
 void (*solicit)(struct neighbour *, struct sk_buff*);
 void (*error_report)(struct neighbour *, struct sk_buff*);
 int (*output)(struct sk_buff*);
 int (*connected_output)(struct sk_buff*);
 int (*hh_output)(struct sk_buff*);
 int (*queue_xmit)(struct sk_buff*);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pneigh_entry
{
  template <typename, int = 0> struct __BYPASSpneigh_entry {};
  template <typename, int> friend struct __BYPASSpneigh_entry;
 struct pneigh_entry *next;



 struct net_device *dev;
 u8 flags;
 u8 key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct neigh_table
{
  template <typename, int = 0> struct __BYPASSneigh_table {};
  template <typename, int> friend struct __BYPASSneigh_table;
 struct neigh_table *next;
 int family;
 int entry_size;
 int key_len;
 __u32 (*hash)( void *pkey, struct net_device *);
 int (*constructor)(struct neighbour *);
 int (*pconstructor)(struct pneigh_entry *);
 void (*pdestructor)(struct pneigh_entry *);
 void (*proxy_redo)(struct sk_buff *skb);
 char *id;
 struct neigh_parms parms;

 int gc_interval;
 int gc_thresh1;
 int gc_thresh2;
 int gc_thresh3;
 unsigned long last_flush;
 struct timer_list gc_timer;
 struct timer_list proxy_timer;
 struct sk_buff_head proxy_queue;
 atomic_t entries;
 rwlock_t lock;
 unsigned long last_rand;
 struct kmem_cache *kmem_cachep;
 struct neigh_statistics *stats;
 struct neighbour **hash_buckets;
 unsigned int hash_mask;
 __u32 hash_rnd;
 unsigned int hash_chain_gc;
 struct pneigh_entry **phash_buckets;

 struct proc_dir_entry *pde;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void neigh_table_init(struct neigh_table *tbl);
extern void neigh_table_init_no_netlink(struct neigh_table *tbl);
extern int neigh_table_clear(struct neigh_table *tbl);
extern struct neighbour * neigh_lookup(struct neigh_table *tbl,
          void *pkey,
          struct net_device *dev);
extern struct neighbour * neigh_lookup_nodev(struct neigh_table *tbl,
         struct net *net,
         void *pkey);
extern struct neighbour * neigh_create(struct neigh_table *tbl,
          void *pkey,
          struct net_device *dev);
extern void neigh_destroy(struct neighbour *neigh);
extern int __neigh_event_send(struct neighbour *neigh, struct sk_buff *skb);
extern int neigh_update(struct neighbour *neigh, u8 *lladdr, u8 _new,
          u32 flags);
extern void neigh_changeaddr(struct neigh_table *tbl, struct net_device *dev);
extern int neigh_ifdown(struct neigh_table *tbl, struct net_device *dev);
extern int neigh_resolve_output(struct sk_buff *skb);
extern int neigh_connected_output(struct sk_buff *skb);
extern int neigh_compat_output(struct sk_buff *skb);
extern struct neighbour *neigh_event_ns(struct neigh_table *tbl,
      u8 *lladdr, void *saddr,
      struct net_device *dev);

extern struct neigh_parms *neigh_parms_alloc(struct net_device *dev, struct neigh_table *tbl);
extern void neigh_parms_release(struct neigh_table *tbl, struct neigh_parms *parms);

static inline
struct net *neigh_parms_net( struct neigh_parms *parms)
{



 return &init_net;

}

extern unsigned long neigh_rand_reach_time(unsigned long base);

extern void pneigh_enqueue(struct neigh_table *tbl, struct neigh_parms *p,
            struct sk_buff *skb);
extern struct pneigh_entry *pneigh_lookup(struct neigh_table *tbl, struct net *net, void *key, struct net_device *dev, int creat);
extern struct pneigh_entry *__pneigh_lookup(struct neigh_table *tbl,
       struct net *net,
       void *key,
       struct net_device *dev);
extern int pneigh_delete(struct neigh_table *tbl, struct net *net, void *key, struct net_device *dev);

static inline
struct net *pneigh_net( struct pneigh_entry *pneigh)
{



 return &init_net;

}

extern void neigh_app_ns(struct neighbour *n);
extern void neigh_for_each(struct neigh_table *tbl, void (*cb)(struct neighbour *, void *), void *cookie);
extern void __neigh_for_each_release(struct neigh_table *tbl, int (*cb)(struct neighbour *));
extern void pneigh_for_each(struct neigh_table *tbl, void (*cb)(struct pneigh_entry *));

struct neigh_seq_state {
  template <typename, int = 0> struct __BYPASSneigh_seq_state {};
  template <typename, int> friend struct __BYPASSneigh_seq_state;
 struct seq_net_private p;
 struct neigh_table *tbl;
 void *(*neigh_sub_iter)(struct neigh_seq_state *state,
    struct neighbour *n, loff_t *pos);
 unsigned int bucket;
 unsigned int flags;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void *neigh_seq_start(struct seq_file *, loff_t *, struct neigh_table *, unsigned int);
extern void *neigh_seq_next(struct seq_file *, void *, loff_t *);
extern void neigh_seq_stop(struct seq_file *, void *);

extern int neigh_sysctl_register(struct net_device *dev,
            struct neigh_parms *p,
            int p_id, int pdev_id,
            char *p_name,
            proc_handler *proc_handler,
            ctl_handler *strategy);
extern void neigh_sysctl_unregister(struct neigh_parms *p);

static inline void __neigh_parms_put(struct neigh_parms *parms)
{
 ;
}

static inline struct neigh_parms *neigh_parms_clone(struct neigh_parms *parms)
{
 ;
 return parms;
}





static inline void neigh_release(struct neighbour *neigh)
{
 if (1)
  neigh_destroy(neigh);
}

static inline struct neighbour * neigh_clone(struct neighbour *neigh)
{
 if (neigh)
  ;
 return neigh;
}




template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_1495_0 {
  typedef TJP_jiffies_1495_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_1495(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_1495_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void neigh_confirm(struct neighbour *neigh)
{
 if (neigh)
  neigh->confirmed = __get_jiffies_1495(&jiffies);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_1496_0 {
  typedef TJP_jiffies_1496_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_1496(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_1496_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int neigh_event_send(struct neighbour *neigh, struct sk_buff *skb)
{
 neigh->used = __get_jiffies_1496(&jiffies);
 if (!(neigh->nud_state&((0x80|0x40|0x02)|0x08|0x10)))
  return __neigh_event_send(neigh, skb);
 return 0;
}

static inline int neigh_hh_output(struct hh_cache *hh, struct sk_buff *skb)
{
 unsigned seq;
 int hh_len;

 do {
  int hh_alen;

  seq = 0;
  hh_len = hh->hh_len;
  hh_alen = (((hh_len)+(16 -1))&~(16 - 1));
  memcpy(skb->data - hh_alen, hh->hh_data, hh_alen);
 } while (0);

 skb_push(skb, hh_len);
 return hh->hh_output(skb);
}

static inline struct neighbour *
__neigh_lookup(struct neigh_table *tbl, void *pkey, struct net_device *dev, int creat)
{
 struct neighbour *n = neigh_lookup(tbl, pkey, dev);

 if (n || !creat)
  return n;

 n = neigh_create(tbl, pkey, dev);
 return IS_ERR(n) ? 0 : n;
}

static inline struct neighbour *
__neigh_lookup_errno(struct neigh_table *tbl, void *pkey,
  struct net_device *dev)
{
 struct neighbour *n = neigh_lookup(tbl, pkey, dev);

 if (n)
  return n;

 return neigh_create(tbl, pkey, dev);
}

struct neighbour_cb {
  template <typename, int = 0> struct __BYPASSneighbour_cb {};
  template <typename, int> friend struct __BYPASSneighbour_cb;
 unsigned long sched_next;
 unsigned int flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct sk_buff;

struct dst_entry
{
  template <typename, int = 0> struct __BYPASSdst_entry {};
  template <typename, int> friend struct __BYPASSdst_entry;
 struct rcu_head rcu_head;
 struct dst_entry *child;
 struct net_device *dev;
 short error;
 short obsolete;
 int flags;




 unsigned long expires;

 unsigned short header_len;
 unsigned short trailer_len;

 unsigned int rate_tokens;
 unsigned long rate_last;

 struct dst_entry *path;

 struct neighbour *neighbour;
 struct hh_cache *hh;
 struct xfrm_state *xfrm;

 int (*input)(struct sk_buff*);
 int (*output)(struct sk_buff*);

 struct dst_ops *ops;

 u32 metrics[(__RTAX_MAX - 1)];


 __u32 tclassid;






 atomic_t __refcnt;
 int __use;
 unsigned long lastuse;
 union {
  struct dst_entry *next;
  struct rtable *rt_next;
  struct rt6_info *rt6_next;
  struct dn_route *dn_next;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct dst_ops
{
  template <typename, int = 0> struct __BYPASSdst_ops {};
  template <typename, int> friend struct __BYPASSdst_ops;
 unsigned short family;
 __be16 protocol;
 unsigned gc_thresh;

 int (*gc)(struct dst_ops *ops);
 struct dst_entry * (*check)(struct dst_entry *, __u32 cookie);
 void (*destroy)(struct dst_entry *);
 void (*ifdown)(struct dst_entry *,
       struct net_device *dev, int how);
 struct dst_entry * (*negative_advice)(struct dst_entry *);
 void (*link_failure)(struct sk_buff *);
 void (*update_pmtu)(struct dst_entry *dst, u32 mtu);
 int (*local_out)(struct sk_buff *skb);
 int entry_size;

 atomic_t entries;
 struct kmem_cache *kmem_cachep;
 struct net *dst_net;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



static inline u32
dst_metric( struct dst_entry *dst, int metric)
{
 return dst->metrics[metric-1];
}

static inline u32 dst_mtu( struct dst_entry *dst)
{
 u32 mtu = dst_metric(dst, RTAX_MTU);



 __asm__ __volatile__("": : :"memory");
 return mtu;
}


static inline unsigned long dst_metric_rtt( struct dst_entry *dst, int metric)
{
 return msecs_to_jiffies(dst_metric(dst, metric));
}

static inline void set_dst_metric_rtt(struct dst_entry *dst, int metric,
          unsigned long rtt)
{
 dst->metrics[metric-1] = jiffies_to_msecs(rtt);
}

static inline u32
dst_allfrag( struct dst_entry *dst)
{
 int ret = dst_metric(dst, RTAX_FEATURES) & 0x00000008;

 __asm__ __volatile__("": : :"memory");
 return ret;
}

static inline int
dst_metric_locked(struct dst_entry *dst, int metric)
{
 return dst_metric(dst, RTAX_LOCK) & (1<<metric);
}

static inline void dst_hold(struct dst_entry * dst)
{
 ;
}

static inline void dst_use(struct dst_entry *dst, unsigned long time)
{
 dst_hold(dst);
 dst->__use++;
 dst->lastuse = time;
}

static inline
struct dst_entry * dst_clone(struct dst_entry * dst)
{
 if (dst)
  ;
 return dst;
}

extern void dst_release(struct dst_entry *dst);





static inline struct dst_entry *dst_pop(struct dst_entry *dst)
{
 struct dst_entry *child = dst_clone(dst->child);

 dst_release(dst);
 return child;
}

extern int dst_discard(struct sk_buff *skb);
extern void * dst_alloc(struct dst_ops * ops);
extern void __dst_free(struct dst_entry * dst);
extern struct dst_entry *dst_destroy(struct dst_entry * dst);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_1508_0 {
  typedef TJP__ZN7_atomic7counterE_1508_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_1508(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_1508_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline void dst_free(struct dst_entry * dst)
{
 if (dst->obsolete > 1)
  return;
 if (!(__get__ZN7_atomic7counterE_1508(&(&dst->__refcnt)->counter))) {
  dst = dst_destroy(dst);
  if (!dst)
   return;
 }
 __dst_free(dst);
}

static inline void dst_rcu_free(struct rcu_head *head)
{
 struct dst_entry *dst = ({ typeof( ((struct dst_entry *)0)->rcu_head ) *__mptr = (head); (struct dst_entry *)( (char *)__mptr - ((size_t) &((struct dst_entry *)0)->rcu_head) );});
 dst_free(dst);
}

static inline void dst_confirm(struct dst_entry *dst)
{
 if (dst)
  neigh_confirm(dst->neighbour);
}

static inline void dst_negative_advice(struct dst_entry **dst_p)
{
 struct dst_entry * dst = *dst_p;
 if (dst && dst->ops->negative_advice)
  *dst_p = dst->ops->negative_advice(dst);
}

static inline void dst_link_failure(struct sk_buff *skb)
{
 struct dst_entry * dst = skb->dst;
 if (dst && dst->ops && dst->ops->link_failure)
  dst->ops->link_failure(skb);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_1520_0 {
  typedef TJP_jiffies_1520_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_1520(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_1520_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void dst_set_expires(struct dst_entry *dst, int timeout)
{
 unsigned long expires = __get_jiffies_1520(&jiffies) + timeout;

 if (expires == 0)
  expires = 1;

 if (dst->expires == 0 || (({ unsigned long __dummy; typeof(dst->expires) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(expires) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)(expires) - (long)(dst->expires) < 0)))
  dst->expires = expires;
}


static inline int dst_output(struct sk_buff *skb)
{
 return skb->dst->output(skb);
}


static inline int dst_input(struct sk_buff *skb)
{
 return skb->dst->input(skb);
}

static inline struct dst_entry *dst_check(struct dst_entry *dst, u32 cookie)
{
 if (dst->obsolete)
  dst = dst->ops->check(dst, cookie);
 return dst;
}

extern void dst_init(void);


enum {
 XFRM_LOOKUP_WAIT = 1 << 0,
 XFRM_LOOKUP_ICMP = 1 << 1,
};

struct flowi;
extern int xfrm_lookup(struct dst_entry **dst_p, struct flowi *fl,
         struct sock *sk, int flags);
extern int __xfrm_lookup(struct dst_entry **dst_p, struct flowi *fl,
    struct sock *sk, int flags);
typedef struct {
 spinlock_t slock;
 int owned;
 wait_queue_head_t wq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} socket_lock_t;

struct sock;
struct proto;
struct net;
struct sock_common {
  template <typename, int = 0> struct __BYPASSsock_common {};
  template <typename, int> friend struct __BYPASSsock_common;
 unsigned short skc_family;
 unsigned char skc_state;
 unsigned char skc_reuse;
 int skc_bound_dev_if;
 struct hlist_node skc_node;
 struct hlist_node skc_bind_node;
 atomic_t skc_refcnt;
 unsigned int skc_hash;
 struct proto *skc_prot;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct sock {
  template <typename, int = 0> struct __BYPASSsock {};
  template <typename, int> friend struct __BYPASSsock;




 struct sock_common __sk_common;
    struct _sk_state2 {
  template <typename, int = 0> struct __BYPASS_ZN4sock10_sk_state2E {};
  template <typename, int> friend struct __BYPASS_ZN4sock10_sk_state2E;

 unsigned char sk_shutdown : 2,
    sk_no_check : 2,
    sk_userlocks : 4;

    
  friend class ::Introspect;
  friend class ::MyIntrospect;
} sk_state2;




 unsigned char sk_protocol;
 unsigned short sk_type;
 int sk_rcvbuf;
 socket_lock_t sk_lock;





 struct _sk_backlog {
  template <typename, int = 0> struct __BYPASS_ZN4sock11_sk_backlogE {};
  template <typename, int> friend struct __BYPASS_ZN4sock11_sk_backlogE;
  struct sk_buff *head;
  struct sk_buff *tail;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} sk_backlog;
 wait_queue_head_t *sk_sleep;
 struct dst_entry *sk_dst_cache;
 struct xfrm_policy *sk_policy[2];
 rwlock_t sk_dst_lock;
 atomic_t sk_rmem_alloc;
 atomic_t sk_wmem_alloc;
 atomic_t sk_omem_alloc;
 int sk_sndbuf;
 struct sk_buff_head sk_receive_queue;
 struct sk_buff_head sk_write_queue;
 struct sk_buff_head sk_async_wait_queue;
 int sk_wmem_queued;
 int sk_forward_alloc;
 gfp_t sk_allocation;
 int sk_route_caps;
 int sk_gso_type;
 unsigned int sk_gso_max_size;
 int sk_rcvlowat;
 unsigned long sk_flags;
 unsigned long sk_lingertime;
 struct sk_buff_head sk_error_queue;
 struct proto *sk_prot_creator;
 rwlock_t sk_callback_lock;
 int sk_err,
    sk_err_soft;
 atomic_t sk_drops;
 unsigned short sk_ack_backlog;
 unsigned short sk_max_ack_backlog;
 __u32 sk_priority;
 struct ucred sk_peercred;
 long sk_rcvtimeo;
 long sk_sndtimeo;
 struct sk_filter *sk_filter;
 void *sk_protinfo;
 struct timer_list sk_timer;
 ktime_t sk_stamp;
 struct socket *sk_socket;
 void *sk_user_data;
 struct page *sk_sndmsg_page;
 struct sk_buff *sk_send_head;
 __u32 sk_sndmsg_off;
 int sk_write_pending;
 void *sk_security;
 __u32 sk_mark;

 void (*sk_state_change)(struct sock *sk);
 void (*sk_data_ready)(struct sock *sk, int bytes);
 void (*sk_write_space)(struct sock *sk);
 void (*sk_error_report)(struct sock *sk);
   int (*sk_backlog_rcv)(struct sock *sk,
        struct sk_buff *skb);
 void (*sk_destruct)(struct sock *sk);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_1530_0 {
  typedef TJP__ZN10hlist_head5firstE_1530_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_1530(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_1530_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline struct sock *__sk_head( struct hlist_head *head)
{
 return ({ typeof( ((struct sock *)0)->__sk_common.skc_node ) *__mptr = (__get__ZN10hlist_head5firstE_1530(&head->first)); (struct sock *)( (char *)__mptr - ((size_t) &((struct sock *)0)->__sk_common.skc_node) );});
}

static inline struct sock *sk_head( struct hlist_head *head)
{
 return hlist_empty(head) ? 0 : __sk_head(head);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_1531_0 {
  typedef TJP__ZN10hlist_node4nextE_1531_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_1531(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_1531_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1533_0 {
  typedef TJP__ZN4sock11__sk_commonE_1533_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1533(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1533_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_1534_0 {
  typedef TJP__ZN10hlist_node4nextE_1534_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_1534(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_1534_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1536_0 {
  typedef TJP__ZN4sock11__sk_commonE_1536_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1536(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1536_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline struct sock *sk_next( struct sock *sk)
{
 return __get__ZN10hlist_node4nextE_1531(&__get__ZN4sock11__sk_commonE_1533(&sk->__sk_common).skc_node.next) ?
  ({ typeof( ((struct sock *)0)->__sk_common.skc_node ) *__mptr = (__get__ZN10hlist_node4nextE_1534(&__get__ZN4sock11__sk_commonE_1536(&sk->__sk_common).skc_node.next)); (struct sock *)( (char *)__mptr - ((size_t) &((struct sock *)0)->__sk_common.skc_node) );}) : 0;
}

static inline int sk_unhashed( struct sock *sk)
{
 return hlist_unhashed(&sk->__sk_common.skc_node);
}

static inline int sk_hashed( struct sock *sk)
{
 return !sk_unhashed(sk);
}

static __inline__ void sk_node_init(struct hlist_node *node)
{
 node->pprev = 0;
}

static __inline__ void __sk_del_node(struct sock *sk)
{
 __hlist_del(&sk->__sk_common.skc_node);
}

static __inline__ int __sk_del_node_init(struct sock *sk)
{
 if (sk_hashed(sk)) {
  __sk_del_node(sk);
  sk_node_init(&sk->__sk_common.skc_node);
  return 1;
 }
 return 0;
}







static inline void sock_hold(struct sock *sk)
{
 ;
}




static inline void __sock_put(struct sock *sk)
{
 ;
}

static __inline__ int sk_del_node_init(struct sock *sk)
{
 int rc = __sk_del_node_init(sk);

 if (rc) {

  ;
  __sock_put(sk);
 }
 return rc;
}

static __inline__ void __sk_add_node(struct sock *sk, struct hlist_head *list)
{
 hlist_add_head(&sk->__sk_common.skc_node, list);
}

static __inline__ void sk_add_node(struct sock *sk, struct hlist_head *list)
{
 sock_hold(sk);
 __sk_add_node(sk, list);
}

static __inline__ void __sk_del_bind_node(struct sock *sk)
{
 __hlist_del(&sk->__sk_common.skc_bind_node);
}

static __inline__ void sk_add_bind_node(struct sock *sk,
     struct hlist_head *list)
{
 hlist_add_head(&sk->__sk_common.skc_bind_node, list);
}
enum sock_flags {
 SOCK_DEAD,
 SOCK_DONE,
 SOCK_URGINLINE,
 SOCK_KEEPOPEN,
 SOCK_LINGER,
 SOCK_DESTROY,
 SOCK_BROADCAST,
 SOCK_TIMESTAMP,
 SOCK_ZAPPED,
 SOCK_USE_WRITE_QUEUE,
 SOCK_DBG,
 SOCK_RCVTSTAMP,
 SOCK_RCVTSTAMPNS,
 SOCK_LOCALROUTE,
 SOCK_QUEUE_SHRUNK,
};


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock8sk_flagsE_1537_0 {
  typedef TJP__ZN4sock8sk_flagsE_1537_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN4sock8sk_flagsE_1537(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN4sock8sk_flagsE_1537_0< unsigned long int , ::sock , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void sock_copy_flags(struct sock *nsk, struct sock *osk)
{
 nsk->sk_flags = __get__ZN4sock8sk_flagsE_1537(&osk->sk_flags);
}

static inline void sock_set_flag(struct sock *sk, enum sock_flags flag)
{
 __set_bit(flag, &sk->sk_flags);
}

static inline void sock_reset_flag(struct sock *sk, enum sock_flags flag)
{
 __clear_bit(flag, &sk->sk_flags);
}

static inline int sock_flag(struct sock *sk, enum sock_flags flag)
{
 return (__builtin_constant_p((flag)) ? constant_test_bit((flag), (&sk->sk_flags)) : variable_test_bit((flag), (&sk->sk_flags)));
}

static inline void sk_acceptq_removed(struct sock *sk)
{
 sk->sk_ack_backlog--;
}

static inline void sk_acceptq_added(struct sock *sk)
{
 sk->sk_ack_backlog++;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock14sk_ack_backlogE_1538_0 {
  typedef TJP__ZN4sock14sk_ack_backlogE_1538_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN4sock14sk_ack_backlogE_1538(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN4sock14sk_ack_backlogE_1538_0< unsigned short int , ::sock , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock18sk_max_ack_backlogE_1539_0 {
  typedef TJP__ZN4sock18sk_max_ack_backlogE_1539_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN4sock18sk_max_ack_backlogE_1539(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN4sock18sk_max_ack_backlogE_1539_0< unsigned short int , ::sock , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}
static inline int sk_acceptq_is_full(struct sock *sk)
{
 return __get__ZN4sock14sk_ack_backlogE_1538(&sk->sk_ack_backlog) > __get__ZN4sock18sk_max_ack_backlogE_1539(&sk->sk_max_ack_backlog);
}





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock14sk_wmem_queuedE_1540_0 {
  typedef TJP__ZN4sock14sk_wmem_queuedE_1540_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock14sk_wmem_queuedE_1540(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock14sk_wmem_queuedE_1540_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sk_stream_min_wspace(struct sock *sk)
{
 return __get__ZN4sock14sk_wmem_queuedE_1540(&sk->sk_wmem_queued) >> 1;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_1541_0 {
  typedef TJP__ZN4sock9sk_sndbufE_1541_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_1541(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_1541_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock14sk_wmem_queuedE_1542_0 {
  typedef TJP__ZN4sock14sk_wmem_queuedE_1542_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock14sk_wmem_queuedE_1542(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock14sk_wmem_queuedE_1542_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sk_stream_wspace(struct sock *sk)
{
 return __get__ZN4sock9sk_sndbufE_1541(&sk->sk_sndbuf) - __get__ZN4sock14sk_wmem_queuedE_1542(&sk->sk_wmem_queued);
}

extern void sk_stream_write_space(struct sock *sk);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock14sk_wmem_queuedE_1543_0 {
  typedef TJP__ZN4sock14sk_wmem_queuedE_1543_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock14sk_wmem_queuedE_1543(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock14sk_wmem_queuedE_1543_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_1544_0 {
  typedef TJP__ZN4sock9sk_sndbufE_1544_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_1544(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_1544_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sk_stream_memory_free(struct sock *sk)
{
 return __get__ZN4sock14sk_wmem_queuedE_1543(&sk->sk_wmem_queued) < __get__ZN4sock9sk_sndbufE_1544(&sk->sk_sndbuf);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock10sk_backlogE_1546_0 {
  typedef TJP__ZN4sock10sk_backlogE_1546_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock::_sk_backlog __get__ZN4sock10sk_backlogE_1546(sock::_sk_backlog *source) {
  AC::ResultBuffer< ::sock::_sk_backlog  > __result_buffer;
  typedef TJP__ZN4sock10sk_backlogE_1546_0< ::sock::_sk_backlog , ::sock , ::sock::_sk_backlog  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock::_sk_backlog &)__result_buffer;
}
static inline void sk_add_backlog(struct sock *sk, struct sk_buff *skb)
{
 if (!__get__ZN4sock10sk_backlogE_1546(&sk->sk_backlog).tail) {
  sk->sk_backlog.head = sk->sk_backlog.tail = skb;
 } else {
  sk->sk_backlog.tail->next = skb;
  sk->sk_backlog.tail = skb;
 }
 skb->next = 0;
}
extern int sk_stream_wait_connect(struct sock *sk, long *timeo_p);
extern int sk_stream_wait_memory(struct sock *sk, long *timeo_p);
extern void sk_stream_wait_close(struct sock *sk, long timeo_p);
extern int sk_stream_error(struct sock *sk, int flags, int err);
extern void sk_stream_kill_queues(struct sock *sk);

extern int sk_wait_data(struct sock *sk, long *timeo);

struct request_sock_ops;
struct timewait_sock_ops;
struct inet_hashinfo;
struct raw_hashinfo;





struct proto {
  template <typename, int = 0> struct __BYPASSproto {};
  template <typename, int> friend struct __BYPASSproto;
 void (*close)(struct sock *sk,
     long timeout);
 int (*connect)(struct sock *sk,
            struct sockaddr *uaddr,
     int addr_len);
 int (*disconnect)(struct sock *sk, int flags);

 struct sock * (*accept) (struct sock *sk, int flags, int *err);

 int (*ioctl)(struct sock *sk, int cmd,
      unsigned long arg);
 int (*init)(struct sock *sk);
 void (*destroy)(struct sock *sk);
 void (*shutdown)(struct sock *sk, int how);
 int (*setsockopt)(struct sock *sk, int level,
     int optname, char *optval,
     int optlen);
 int (*getsockopt)(struct sock *sk, int level,
     int optname, char *optval,
     int *option);
 int (*compat_setsockopt)(struct sock *sk,
     int level,
     int optname, char *optval,
     int optlen);
 int (*compat_getsockopt)(struct sock *sk,
     int level,
     int optname, char *optval,
     int *option);
 int (*sendmsg)(struct kiocb *iocb, struct sock *sk,
        struct msghdr *msg, size_t len);
 int (*recvmsg)(struct kiocb *iocb, struct sock *sk,
        struct msghdr *msg,
     size_t len, int noblock, int flags,
     int *addr_len);
 int (*sendpage)(struct sock *sk, struct page *page,
     int offset, size_t size, int flags);
 int (*bind)(struct sock *sk,
     struct sockaddr *uaddr, int addr_len);

 int (*backlog_rcv) (struct sock *sk,
      struct sk_buff *skb);


 void (*hash)(struct sock *sk);
 void (*unhash)(struct sock *sk);
 int (*get_port)(struct sock *sk, unsigned short snum);



 unsigned int inuse_idx;



 void (*enter_memory_pressure)(struct sock *sk);
 atomic_t *memory_allocated;
 atomic_t *sockets_allocated;






 int *memory_pressure;
 int *sysctl_mem;
 int *sysctl_wmem;
 int *sysctl_rmem;
 int max_header;

 struct kmem_cache *slab;
 unsigned int obj_size;

 atomic_t *orphan_count;

 struct request_sock_ops *rsk_prot;
 struct timewait_sock_ops *twsk_prot;

 union {
  struct inet_hashinfo *hashinfo;
  struct hlist_head *udp_hash;
  struct raw_hashinfo *raw_hash;
 } h;

 struct module *owner;

 char name[32];

 struct list_head node;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int proto_register(struct proto *prot, int alloc_slab);
extern void proto_unregister(struct proto *prot);
extern void sock_prot_inuse_add(struct net *net, struct proto *prot, int inc);
extern int sock_prot_inuse_get(struct net *net, struct proto *proto);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1549_0 {
  typedef TJP__ZN4sock11__sk_commonE_1549_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1549(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1549_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1552_0 {
  typedef TJP__ZN4sock11__sk_commonE_1552_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1552(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1552_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline void __sk_prot_rehash(struct sock *sk)
{
 __get__ZN4sock11__sk_commonE_1549(&sk->__sk_common).skc_prot->unhash(sk);
 __get__ZN4sock11__sk_commonE_1552(&sk->__sk_common).skc_prot->hash(sk);
}
struct sock_iocb {
  template <typename, int = 0> struct __BYPASSsock_iocb {};
  template <typename, int> friend struct __BYPASSsock_iocb;
 struct list_head list;

 int flags;
 int size;
 struct socket *sock;
 struct sock *sk;
 struct scm_cookie *scm;
 struct msghdr *msg, async_msg;
 struct kiocb *kiocb;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct sock_iocb *kiocb_to_siocb(struct kiocb *iocb)
{
 return (struct sock_iocb *)iocb->_private;
}

static inline struct kiocb *siocb_to_kiocb(struct sock_iocb *si)
{
 return si->kiocb;
}

struct socket_alloc {
  template <typename, int = 0> struct __BYPASSsocket_alloc {};
  template <typename, int> friend struct __BYPASSsocket_alloc;
 struct socket socket;
 struct inode vfs_inode;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct socket *SOCKET_I(struct inode *inode)
{
 return &({ typeof( ((struct socket_alloc *)0)->vfs_inode ) *__mptr = (inode); (struct socket_alloc *)( (char *)__mptr - ((size_t) &((struct socket_alloc *)0)->vfs_inode) );})->socket;
}

static inline struct inode *SOCK_INODE(struct socket *socket)
{
 return &({ typeof( ((struct socket_alloc *)0)->socket ) *__mptr = (socket); (struct socket_alloc *)( (char *)__mptr - ((size_t) &((struct socket_alloc *)0)->socket) );})->vfs_inode;
}




extern int __sk_mem_schedule(struct sock *sk, int size, int kind);
extern void __sk_mem_reclaim(struct sock *sk);






static inline int sk_mem_pages(int amt)
{
 return (amt + ((int)((1UL) << 12)) - 1) >> ( __builtin_constant_p(((int)((1UL) << 12))) ? ( (((int)((1UL) << 12))) < 1 ? ____ilog2_NaN() : (((int)((1UL) << 12))) & (1ULL << 63) ? 63 : (((int)((1UL) << 12))) & (1ULL << 62) ? 62 : (((int)((1UL) << 12))) & (1ULL << 61) ? 61 : (((int)((1UL) << 12))) & (1ULL << 60) ? 60 : (((int)((1UL) << 12))) & (1ULL << 59) ? 59 : (((int)((1UL) << 12))) & (1ULL << 58) ? 58 : (((int)((1UL) << 12))) & (1ULL << 57) ? 57 : (((int)((1UL) << 12))) & (1ULL << 56) ? 56 : (((int)((1UL) << 12))) & (1ULL << 55) ? 55 : (((int)((1UL) << 12))) & (1ULL << 54) ? 54 : (((int)((1UL) << 12))) & (1ULL << 53) ? 53 : (((int)((1UL) << 12))) & (1ULL << 52) ? 52 : (((int)((1UL) << 12))) & (1ULL << 51) ? 51 : (((int)((1UL) << 12))) & (1ULL << 50) ? 50 : (((int)((1UL) << 12))) & (1ULL << 49) ? 49 : (((int)((1UL) << 12))) & (1ULL << 48) ? 48 : (((int)((1UL) << 12))) & (1ULL << 47) ? 47 : (((int)((1UL) << 12))) & (1ULL << 46) ? 46 : (((int)((1UL) << 12))) & (1ULL << 45) ? 45 : (((int)((1UL) << 12))) & (1ULL << 44) ? 44 : (((int)((1UL) << 12))) & (1ULL << 43) ? 43 : (((int)((1UL) << 12))) & (1ULL << 42) ? 42 : (((int)((1UL) << 12))) & (1ULL << 41) ? 41 : (((int)((1UL) << 12))) & (1ULL << 40) ? 40 : (((int)((1UL) << 12))) & (1ULL << 39) ? 39 : (((int)((1UL) << 12))) & (1ULL << 38) ? 38 : (((int)((1UL) << 12))) & (1ULL << 37) ? 37 : (((int)((1UL) << 12))) & (1ULL << 36) ? 36 : (((int)((1UL) << 12))) & (1ULL << 35) ? 35 : (((int)((1UL) << 12))) & (1ULL << 34) ? 34 : (((int)((1UL) << 12))) & (1ULL << 33) ? 33 : (((int)((1UL) << 12))) & (1ULL << 32) ? 32 : (((int)((1UL) << 12))) & (1ULL << 31) ? 31 : (((int)((1UL) << 12))) & (1ULL << 30) ? 30 : (((int)((1UL) << 12))) & (1ULL << 29) ? 29 : (((int)((1UL) << 12))) & (1ULL << 28) ? 28 : (((int)((1UL) << 12))) & (1ULL << 27) ? 27 : (((int)((1UL) << 12))) & (1ULL << 26) ? 26 : (((int)((1UL) << 12))) & (1ULL << 25) ? 25 : (((int)((1UL) << 12))) & (1ULL << 24) ? 24 : (((int)((1UL) << 12))) & (1ULL << 23) ? 23 : (((int)((1UL) << 12))) & (1ULL << 22) ? 22 : (((int)((1UL) << 12))) & (1ULL << 21) ? 21 : (((int)((1UL) << 12))) & (1ULL << 20) ? 20 : (((int)((1UL) << 12))) & (1ULL << 19) ? 19 : (((int)((1UL) << 12))) & (1ULL << 18) ? 18 : (((int)((1UL) << 12))) & (1ULL << 17) ? 17 : (((int)((1UL) << 12))) & (1ULL << 16) ? 16 : (((int)((1UL) << 12))) & (1ULL << 15) ? 15 : (((int)((1UL) << 12))) & (1ULL << 14) ? 14 : (((int)((1UL) << 12))) & (1ULL << 13) ? 13 : (((int)((1UL) << 12))) & (1ULL << 12) ? 12 : (((int)((1UL) << 12))) & (1ULL << 11) ? 11 : (((int)((1UL) << 12))) & (1ULL << 10) ? 10 : (((int)((1UL) << 12))) & (1ULL << 9) ? 9 : (((int)((1UL) << 12))) & (1ULL << 8) ? 8 : (((int)((1UL) << 12))) & (1ULL << 7) ? 7 : (((int)((1UL) << 12))) & (1ULL << 6) ? 6 : (((int)((1UL) << 12))) & (1ULL << 5) ? 5 : (((int)((1UL) << 12))) & (1ULL << 4) ? 4 : (((int)((1UL) << 12))) & (1ULL << 3) ? 3 : (((int)((1UL) << 12))) & (1ULL << 2) ? 2 : (((int)((1UL) << 12))) & (1ULL << 1) ? 1 : (((int)((1UL) << 12))) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(((int)((1UL) << 12))) <= 4) ? __ilog2_u32(((int)((1UL) << 12))) : __ilog2_u64(((int)((1UL) << 12))) );
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1557_0 {
  typedef TJP__ZN4sock11__sk_commonE_1557_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1557(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1557_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline int sk_has_account(struct sock *sk)
{

 return !!__get__ZN4sock11__sk_commonE_1557(&sk->__sk_common).skc_prot->memory_allocated;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock16sk_forward_allocE_1558_0 {
  typedef TJP__ZN4sock16sk_forward_allocE_1558_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock16sk_forward_allocE_1558(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock16sk_forward_allocE_1558_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sk_wmem_schedule(struct sock *sk, int size)
{
 if (!sk_has_account(sk))
  return 1;
 return size <= __get__ZN4sock16sk_forward_allocE_1558(&sk->sk_forward_alloc) ||
  __sk_mem_schedule(sk, size, 0);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock16sk_forward_allocE_1559_0 {
  typedef TJP__ZN4sock16sk_forward_allocE_1559_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock16sk_forward_allocE_1559(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock16sk_forward_allocE_1559_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sk_rmem_schedule(struct sock *sk, int size)
{
 if (!sk_has_account(sk))
  return 1;
 return size <= __get__ZN4sock16sk_forward_allocE_1559(&sk->sk_forward_alloc) ||
  __sk_mem_schedule(sk, size, 1);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock16sk_forward_allocE_1560_0 {
  typedef TJP__ZN4sock16sk_forward_allocE_1560_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock16sk_forward_allocE_1560(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock16sk_forward_allocE_1560_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline void sk_mem_reclaim(struct sock *sk)
{
 if (!sk_has_account(sk))
  return;
 if (__get__ZN4sock16sk_forward_allocE_1560(&sk->sk_forward_alloc) >= ((int)((1UL) << 12)))
  __sk_mem_reclaim(sk);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock16sk_forward_allocE_1561_0 {
  typedef TJP__ZN4sock16sk_forward_allocE_1561_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock16sk_forward_allocE_1561(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock16sk_forward_allocE_1561_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline void sk_mem_reclaim_partial(struct sock *sk)
{
 if (!sk_has_account(sk))
  return;
 if (__get__ZN4sock16sk_forward_allocE_1561(&sk->sk_forward_alloc) > ((int)((1UL) << 12)))
  __sk_mem_reclaim(sk);
}

static inline void sk_mem_charge(struct sock *sk, int size)
{
 if (!sk_has_account(sk))
  return;
 sk->sk_forward_alloc -= size;
}

static inline void sk_mem_uncharge(struct sock *sk, int size)
{
 if (!sk_has_account(sk))
  return;
 sk->sk_forward_alloc += size;
}

static inline void sk_wmem_free_skb(struct sock *sk, struct sk_buff *skb)
{
 sock_set_flag(sk, SOCK_QUEUE_SHRUNK);
 sk->sk_wmem_queued -= skb->truesize;
 sk_mem_uncharge(sk, skb->truesize);
 __kfree_skb(skb);
}
extern void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
 lock_sock_nested(sk, 0);
}

extern void release_sock(struct sock *sk);
extern struct sock *sk_alloc(struct net *net, int family,
       gfp_t priority,
       struct proto *prot);
extern void sk_free(struct sock *sk);
extern void sk_release_kernel(struct sock *sk);
extern struct sock *sk_clone( struct sock *sk,
       gfp_t priority);

extern struct sk_buff *sock_wmalloc(struct sock *sk,
           unsigned long size, int force,
           gfp_t priority);
extern struct sk_buff *sock_rmalloc(struct sock *sk,
           unsigned long size, int force,
           gfp_t priority);
extern void sock_wfree(struct sk_buff *skb);
extern void sock_rfree(struct sk_buff *skb);

extern int sock_setsockopt(struct socket *sock, int level,
      int op, char *optval,
      int optlen);

extern int sock_getsockopt(struct socket *sock, int level,
      int op, char *optval,
      int *optlen);
extern struct sk_buff *sock_alloc_send_skb(struct sock *sk,
           unsigned long size,
           int noblock,
           int *errcode);
extern void *sock_kmalloc(struct sock *sk, int size,
     gfp_t priority);
extern void sock_kfree_s(struct sock *sk, void *mem, int size);
extern void sk_send_sigurg(struct sock *sk);





extern int sock_no_bind(struct socket *,
          struct sockaddr *, int);
extern int sock_no_connect(struct socket *,
      struct sockaddr *, int, int);
extern int sock_no_socketpair(struct socket *,
         struct socket *);
extern int sock_no_accept(struct socket *,
            struct socket *, int);
extern int sock_no_getname(struct socket *,
      struct sockaddr *, int *, int);
extern unsigned int sock_no_poll(struct file *, struct socket *,
          struct poll_table_struct *);
extern int sock_no_ioctl(struct socket *, unsigned int,
           unsigned long);
extern int sock_no_listen(struct socket *, int);
extern int sock_no_shutdown(struct socket *, int);
extern int sock_no_getsockopt(struct socket *, int , int,
         char *, int *);
extern int sock_no_setsockopt(struct socket *, int, int,
         char *, int);
extern int sock_no_sendmsg(struct kiocb *, struct socket *,
      struct msghdr *, size_t);
extern int sock_no_recvmsg(struct kiocb *, struct socket *,
      struct msghdr *, size_t, int);
extern int sock_no_mmap(struct file *file,
          struct socket *sock,
          struct vm_area_struct *vma);
extern ssize_t sock_no_sendpage(struct socket *sock,
      struct page *page,
      int offset, size_t size,
      int flags);





extern int sock_common_getsockopt(struct socket *sock, int level, int optname,
      char *optval, int *optlen);
extern int sock_common_recvmsg(struct kiocb *iocb, struct socket *sock,
          struct msghdr *msg, size_t size, int flags);
extern int sock_common_setsockopt(struct socket *sock, int level, int optname,
      char *optval, int optlen);
extern int compat_sock_common_getsockopt(struct socket *sock, int level,
  int optname, char *optval, int *optlen);
extern int compat_sock_common_setsockopt(struct socket *sock, int level,
  int optname, char *optval, int optlen);

extern void sk_common_release(struct sock *sk);






extern void sock_init_data(struct socket *sock, struct sock *sk);
static inline void sk_filter_release(struct sk_filter *fp)
{
 if (1)
  kfree(fp);
}

static inline void sk_filter_uncharge(struct sock *sk, struct sk_filter *fp)
{
 unsigned int size = sk_filter_len(fp);

 ;
 sk_filter_release(fp);
}

static inline void sk_filter_charge(struct sock *sk, struct sk_filter *fp)
{
 ;
 ;
}
static inline void sock_put(struct sock *sk)
{
 if (1)
  sk_free(sk);
}

extern int sk_receive_skb(struct sock *sk, struct sk_buff *skb,
     int nested);

static inline void sk_set_socket(struct sock *sk, struct socket *sock)
{
 sk->sk_socket = sock;
}
static inline void sock_orphan(struct sock *sk)
{
 ;
 sock_set_flag(sk, SOCK_DEAD);
 sk_set_socket(sk, 0);
 sk->sk_sleep = 0;
 ;
}

static inline void sock_graft(struct sock *sk, struct socket *parent)
{
 ;
 sk->sk_sleep = &parent->wait;
 parent->sk = sk;
 sk_set_socket(sk, parent);
 security_sock_graft(sk, parent);
 ;
}

extern int sock_i_uid(struct sock *sk);
extern unsigned long sock_i_ino(struct sock *sk);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock12sk_dst_cacheE_1566_0 {
  typedef TJP__ZN4sock12sk_dst_cacheE_1566_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dst_entry * __get__ZN4sock12sk_dst_cacheE_1566(dst_entry * *source) {
  ::dst_entry *__result_buffer;
  typedef TJP__ZN4sock12sk_dst_cacheE_1566_0< ::dst_entry *, ::sock , ::dst_entry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dst_entry *&)__result_buffer;
}
static inline struct dst_entry *
__sk_dst_get(struct sock *sk)
{
 return __get__ZN4sock12sk_dst_cacheE_1566(&sk->sk_dst_cache);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock12sk_dst_cacheE_1567_0 {
  typedef TJP__ZN4sock12sk_dst_cacheE_1567_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dst_entry * __get__ZN4sock12sk_dst_cacheE_1567(dst_entry * *source) {
  ::dst_entry *__result_buffer;
  typedef TJP__ZN4sock12sk_dst_cacheE_1567_0< ::dst_entry *, ::sock , ::dst_entry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dst_entry *&)__result_buffer;
}
static inline struct dst_entry *
sk_dst_get(struct sock *sk)
{
 struct dst_entry *dst;

 ;
 dst = __get__ZN4sock12sk_dst_cacheE_1567(&sk->sk_dst_cache);
 if (dst)
  dst_hold(dst);
 ;
 return dst;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock12sk_dst_cacheE_1568_0 {
  typedef TJP__ZN4sock12sk_dst_cacheE_1568_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dst_entry * __get__ZN4sock12sk_dst_cacheE_1568(dst_entry * *source) {
  ::dst_entry *__result_buffer;
  typedef TJP__ZN4sock12sk_dst_cacheE_1568_0< ::dst_entry *, ::sock , ::dst_entry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dst_entry *&)__result_buffer;
}
static inline void
__sk_dst_set(struct sock *sk, struct dst_entry *dst)
{
 struct dst_entry *old_dst;

 old_dst = __get__ZN4sock12sk_dst_cacheE_1568(&sk->sk_dst_cache);
 sk->sk_dst_cache = dst;
 dst_release(old_dst);
}

static inline void
sk_dst_set(struct sock *sk, struct dst_entry *dst)
{
 ;
 __sk_dst_set(sk, dst);
 ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock12sk_dst_cacheE_1569_0 {
  typedef TJP__ZN4sock12sk_dst_cacheE_1569_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dst_entry * __get__ZN4sock12sk_dst_cacheE_1569(dst_entry * *source) {
  ::dst_entry *__result_buffer;
  typedef TJP__ZN4sock12sk_dst_cacheE_1569_0< ::dst_entry *, ::sock , ::dst_entry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dst_entry *&)__result_buffer;
}
static inline void
__sk_dst_reset(struct sock *sk)
{
 struct dst_entry *old_dst;

 old_dst = __get__ZN4sock12sk_dst_cacheE_1569(&sk->sk_dst_cache);
 sk->sk_dst_cache = 0;
 dst_release(old_dst);
}

static inline void
sk_dst_reset(struct sock *sk)
{
 ;
 __sk_dst_reset(sk);
 ;
}

extern struct dst_entry *__sk_dst_check(struct sock *sk, u32 cookie);

extern struct dst_entry *sk_dst_check(struct sock *sk, u32 cookie);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock13sk_route_capsE_1570_0 {
  typedef TJP__ZN4sock13sk_route_capsE_1570_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock13sk_route_capsE_1570(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock13sk_route_capsE_1570_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_gso_typeE_1571_0 {
  typedef TJP__ZN4sock11sk_gso_typeE_1571_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock11sk_gso_typeE_1571(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock11sk_gso_typeE_1571_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sk_can_gso( struct sock *sk)
{
 return net_gso_ok(__get__ZN4sock13sk_route_capsE_1570(&sk->sk_route_caps), __get__ZN4sock11sk_gso_typeE_1571(&sk->sk_gso_type));
}

extern void sk_setup_caps(struct sock *sk, struct dst_entry *dst);

static inline int skb_copy_to_page(struct sock *sk, char *from,
       struct sk_buff *skb, struct page *page,
       int off, int copy)
{
 if (skb->ip_summed == 0) {
  int err = 0;
  __wsum csum = csum_partial_copy_from_user(from,
           lowmem_page_address(page) + off,
           copy, 0, &err);
  if (err)
   return err;
  skb->csum = csum_block_add(skb->csum, csum, skb->len);
 } else if (copy_from_user(lowmem_page_address(page) + off, from, copy))
  return -14;

 skb->len += copy;
 skb->data_len += copy;
 skb->truesize += copy;
 sk->sk_wmem_queued += copy;
 sk_mem_charge(sk, copy);
 return 0;
}
static inline void skb_set_owner_w(struct sk_buff *skb, struct sock *sk)
{
 sock_hold(sk);
 skb->sk = sk;
 skb->destructor = sock_wfree;
 ;
}

static inline void skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
{
 skb->sk = sk;
 skb->destructor = sock_rfree;
 ;
 sk_mem_charge(sk, skb->truesize);
}

extern void sk_reset_timer(struct sock *sk, struct timer_list* timer,
      unsigned long expires);

extern void sk_stop_timer(struct sock *sk, struct timer_list* timer);

extern int sock_queue_rcv_skb(struct sock *sk, struct sk_buff *skb);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_1576_0 {
  typedef TJP__ZN7_atomic7counterE_1576_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_1576(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_1576_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_rcvbufE_1578_0 {
  typedef TJP__ZN4sock9sk_rcvbufE_1578_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_rcvbufE_1578(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_rcvbufE_1578_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sock_queue_err_skb(struct sock *sk, struct sk_buff *skb)
{



 if ((__get__ZN7_atomic7counterE_1576(&(&sk->sk_rmem_alloc)->counter)) + skb->truesize >=
     (unsigned)__get__ZN4sock9sk_rcvbufE_1578(&sk->sk_rcvbuf))
  return -12;
 skb_set_owner_r(skb, sk);
 skb_queue_tail(&sk->sk_error_queue, skb);
 if (!sock_flag(sk, SOCK_DEAD))
  sk->sk_data_ready(sk, skb->len);
 return 0;
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock6sk_errE_1582_0 {
  typedef TJP__ZN4sock6sk_errE_1582_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock6sk_errE_1582(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock6sk_errE_1582_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sock_error(struct sock *sk)
{
 int err;
 if (__builtin_expect(!!(!__get__ZN4sock6sk_errE_1582(&sk->sk_err)), 1))
  return 0;
 err = ((__typeof__(*(&sk->sk_err)))__xchg((unsigned long)(0), (&sk->sk_err), sizeof(*(&sk->sk_err))));
 return -err;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_state2E_1584_0 {
  typedef TJP__ZN4sock9sk_state2E_1584_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock::_sk_state2 __get__ZN4sock9sk_state2E_1584(sock::_sk_state2 *source) {
  AC::ResultBuffer< ::sock::_sk_state2  > __result_buffer;
  typedef TJP__ZN4sock9sk_state2E_1584_0< ::sock::_sk_state2 , ::sock , ::sock::_sk_state2  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock::_sk_state2 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_1585_0 {
  typedef TJP__ZN4sock9sk_sndbufE_1585_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_1585(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_1585_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_1586_0 {
  typedef TJP__ZN7_atomic7counterE_1586_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_1586(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_1586_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline unsigned long sock_wspace(struct sock *sk)
{
 int amt = 0;
 if (!(__get__ZN4sock9sk_state2E_1584(&sk->sk_state2).sk_shutdown & 2)) {
  amt = __get__ZN4sock9sk_sndbufE_1585(&sk->sk_sndbuf) - (__get__ZN7_atomic7counterE_1586(&(&sk->sk_wmem_alloc)->counter));
  if (amt < 0)
   amt = 0;
 }
 return amt;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_socketE_1587_0 {
  typedef TJP__ZN4sock9sk_socketE_1587_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline socket * __get__ZN4sock9sk_socketE_1587(socket * *source) {
  ::socket *__result_buffer;
  typedef TJP__ZN4sock9sk_socketE_1587_0< ::socket *, ::sock , ::socket * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::socket *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_socketE_1589_0 {
  typedef TJP__ZN4sock9sk_socketE_1589_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline socket * __get__ZN4sock9sk_socketE_1589(socket * *source) {
  ::socket *__result_buffer;
  typedef TJP__ZN4sock9sk_socketE_1589_0< ::socket *, ::sock , ::socket * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::socket *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_socketE_1590_0 {
  typedef TJP__ZN4sock9sk_socketE_1590_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline socket * __get__ZN4sock9sk_socketE_1590(socket * *source) {
  ::socket *__result_buffer;
  typedef TJP__ZN4sock9sk_socketE_1590_0< ::socket *, ::sock , ::socket * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::socket *&)__result_buffer;
}
static inline void sk_wake_async(struct sock *sk, int how, int band)
{
 if (__get__ZN4sock9sk_socketE_1587(&sk->sk_socket) && __get__ZN4sock9sk_socketE_1589(&sk->sk_socket)->fasync_list)
  sock_wake_async(__get__ZN4sock9sk_socketE_1590(&sk->sk_socket), how, band);
}





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_state2E_1592_0 {
  typedef TJP__ZN4sock9sk_state2E_1592_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock::_sk_state2 __get__ZN4sock9sk_state2E_1592(sock::_sk_state2 *source) {
  AC::ResultBuffer< ::sock::_sk_state2  > __result_buffer;
  typedef TJP__ZN4sock9sk_state2E_1592_0< ::sock::_sk_state2 , ::sock , ::sock::_sk_state2  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock::_sk_state2 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_1593_0 {
  typedef TJP__ZN4sock9sk_sndbufE_1593_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_1593(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_1593_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock14sk_wmem_queuedE_1594_0 {
  typedef TJP__ZN4sock14sk_wmem_queuedE_1594_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock14sk_wmem_queuedE_1594(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock14sk_wmem_queuedE_1594_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_1595_0 {
  typedef TJP__ZN4sock9sk_sndbufE_1595_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_1595(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_1595_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline void sk_stream_moderate_sndbuf(struct sock *sk)
{
 if (!(__get__ZN4sock9sk_state2E_1592(&sk->sk_state2).sk_userlocks & 1)) {
  sk->sk_sndbuf = ({ typeof(sk->sk_sndbuf) _min1 = (__get__ZN4sock9sk_sndbufE_1593(&sk->sk_sndbuf)); typeof(sk->sk_wmem_queued >> 1) _min2 = (__get__ZN4sock14sk_wmem_queuedE_1594(&sk->sk_wmem_queued) >> 1); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; });
  sk->sk_sndbuf = ({ typeof(sk->sk_sndbuf) _max1 = (__get__ZN4sock9sk_sndbufE_1595(&sk->sk_sndbuf)); typeof(2048) _max2 = (2048); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; });
 }
}

struct sk_buff *sk_stream_alloc_skb(struct sock *sk, int size, gfp_t gfp);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock13sk_allocationE_1596_0 {
  typedef TJP__ZN4sock13sk_allocationE_1596_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock13sk_allocationE_1596(unsigned int *source) {
  ::gfp_t __result_buffer;
  typedef TJP__ZN4sock13sk_allocationE_1596_0< ::gfp_t , ::sock , ::gfp_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::gfp_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1599_0 {
  typedef TJP__ZN4sock11__sk_commonE_1599_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1599(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1599_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline struct page *sk_stream_alloc_page(struct sock *sk)
{
 struct page *page = 0;

 page = alloc_pages(__get__ZN4sock13sk_allocationE_1596(&sk->sk_allocation), 0);
 if (!page) {
  __get__ZN4sock11__sk_commonE_1599(&sk->__sk_common).skc_prot->enter_memory_pressure(sk);
  sk_stream_moderate_sndbuf(sk);
 }
 return page;
}





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_1600_0 {
  typedef TJP__ZN7_atomic7counterE_1600_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_1600(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_1600_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_1601_0 {
  typedef TJP__ZN4sock9sk_sndbufE_1601_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_1601(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_1601_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sock_writeable( struct sock *sk)
{
 return (__get__ZN7_atomic7counterE_1600(&(&sk->sk_wmem_alloc)->counter)) < (__get__ZN4sock9sk_sndbufE_1601(&sk->sk_sndbuf) >> 1);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11thread_info13preempt_countE_1602_0 {
  typedef TJP__ZN11thread_info13preempt_countE_1602_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11thread_info13preempt_countE_1602(int *source) {
  int __result_buffer;
  typedef TJP__ZN11thread_info13preempt_countE_1602_0< int , ::thread_info , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline gfp_t gfp_any(void)
{
 return (((__get__ZN11thread_info13preempt_countE_1602(&current_thread_info()->preempt_count)) & ~0x10000000) != 0) ? ((( gfp_t)0x20u)) : ((( gfp_t)0x10u) | (( gfp_t)0x40u) | (( gfp_t)0x80u));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_rcvtimeoE_1603_0 {
  typedef TJP__ZN4sock11sk_rcvtimeoE_1603_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long int __get__ZN4sock11sk_rcvtimeoE_1603(long int *source) {
  long int __result_buffer;
  typedef TJP__ZN4sock11sk_rcvtimeoE_1603_0< long int , ::sock , long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (long int &)__result_buffer;
}
static inline long sock_rcvtimeo( struct sock *sk, int noblock)
{
 return noblock ? 0 : __get__ZN4sock11sk_rcvtimeoE_1603(&sk->sk_rcvtimeo);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_sndtimeoE_1604_0 {
  typedef TJP__ZN4sock11sk_sndtimeoE_1604_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long int __get__ZN4sock11sk_sndtimeoE_1604(long int *source) {
  long int __result_buffer;
  typedef TJP__ZN4sock11sk_sndtimeoE_1604_0< long int , ::sock , long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (long int &)__result_buffer;
}
static inline long sock_sndtimeo( struct sock *sk, int noblock)
{
 return noblock ? 0 : __get__ZN4sock11sk_sndtimeoE_1604(&sk->sk_sndtimeo);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_rcvlowatE_1605_0 {
  typedef TJP__ZN4sock11sk_rcvlowatE_1605_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock11sk_rcvlowatE_1605(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock11sk_rcvlowatE_1605_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sock_rcvlowat( struct sock *sk, int waitall, int len)
{
        int x = (waitall ? len : ({ int __min1 = (__get__ZN4sock11sk_rcvlowatE_1605(&sk->sk_rcvlowat)); int __min2 = (len); __min1 < __min2 ? __min1: __min2; }));
 return x ? x : 1;
}




static inline int sock_intr_errno(long timeo)
{
 return timeo == ((long)(~0UL>>1)) ? -512 : -4;
}

extern void __sock_recv_timestamp(struct msghdr *msg, struct sock *sk,
 struct sk_buff *skb);

static __inline__ void
sock_recv_timestamp(struct msghdr *msg, struct sock *sk, struct sk_buff *skb)
{
 ktime_t kt = skb->tstamp;

 if (sock_flag(sk, SOCK_RCVTSTAMP))
  __sock_recv_timestamp(msg, sk, skb);
 else
  sk->sk_stamp = kt;
}
static inline void sk_eat_skb(struct sock *sk, struct sk_buff *skb, int copied_early)
{
 __skb_unlink(skb, &sk->sk_receive_queue);
 if (!copied_early)
  __kfree_skb(skb);
 else
  __skb_queue_tail(&sk->sk_async_wait_queue, skb);
}
static inline
struct net *sock_net( struct sock *sk)
{



 return &init_net;

}

static inline
void sock_net_set(struct sock *sk, struct net *net)
{



}







static inline void sk_change_net(struct sock *sk, struct net *net)
{
 put_net(sock_net(sk));
 sock_net_set(sk, hold_net(net));
}

extern void sock_enable_timestamp(struct sock *sk);
extern int sock_get_timestamp(struct sock *, struct timeval *);
extern int sock_get_timestampns(struct sock *, struct timespec *);




extern int net_msg_warn;






extern __u32 sysctl_wmem_max;
extern __u32 sysctl_rmem_max;

extern void sk_init(void);

extern int sysctl_optmem_max;

extern __u32 sysctl_wmem_default;
extern __u32 sysctl_rmem_default;






enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
 struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);

int module_bug_finalize( Elf64_Ehdr *, Elf64_Shdr *,
    struct module *);
void module_bug_cleanup(struct module *);


int is_valid_bugaddr(unsigned long addr);



struct request_sock;
struct sk_buff;
struct dst_entry;
struct proto;

struct request_sock_ops {
  template <typename, int = 0> struct __BYPASSrequest_sock_ops {};
  template <typename, int> friend struct __BYPASSrequest_sock_ops;
 int family;
 int obj_size;
 struct kmem_cache *slab;
 int (*rtx_syn_ack)(struct sock *sk,
           struct request_sock *req);
 void (*send_ack)(struct sock *sk, struct sk_buff *skb,
        struct request_sock *req);
 void (*send_reset)(struct sock *sk,
          struct sk_buff *skb);
 void (*destructor)(struct request_sock *req);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct request_sock {
  template <typename, int = 0> struct __BYPASSrequest_sock {};
  template <typename, int> friend struct __BYPASSrequest_sock;
 struct request_sock *dl_next;
 u16 mss;
 u8 retrans;
 u8 cookie_ts;

 u32 window_clamp;
 u32 rcv_wnd;
 u32 ts_recent;
 unsigned long expires;
 struct request_sock_ops *rsk_ops;
 struct sock *sk;
 u32 secid;
 u32 peer_secid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16request_sock_ops4slabE_1608_0 {
  typedef TJP__ZN16request_sock_ops4slabE_1608_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline kmem_cache * __get__ZN16request_sock_ops4slabE_1608(kmem_cache * *source) {
  ::kmem_cache *__result_buffer;
  typedef TJP__ZN16request_sock_ops4slabE_1608_0< ::kmem_cache *, ::request_sock_ops , ::kmem_cache * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::kmem_cache *&)__result_buffer;
}
static inline struct request_sock *reqsk_alloc( struct request_sock_ops *ops)
{
 struct request_sock *req = kmem_cache_alloc(__get__ZN16request_sock_ops4slabE_1608(&ops->slab), ((( gfp_t)0x20u)));

 if (req != 0)
  req->rsk_ops = ops;

 return req;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16request_sock_ops4slabE_1609_0 {
  typedef TJP__ZN16request_sock_ops4slabE_1609_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline kmem_cache * __get__ZN16request_sock_ops4slabE_1609(kmem_cache * *source) {
  ::kmem_cache *__result_buffer;
  typedef TJP__ZN16request_sock_ops4slabE_1609_0< ::kmem_cache *, ::request_sock_ops , ::kmem_cache * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::kmem_cache *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock7rsk_opsE_1610_0 {
  typedef TJP__ZN12request_sock7rsk_opsE_1610_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock_ops * __get__ZN12request_sock7rsk_opsE_1610(request_sock_ops * *source) {
  ::request_sock_ops *__result_buffer;
  typedef TJP__ZN12request_sock7rsk_opsE_1610_0< ::request_sock_ops *, ::request_sock , ::request_sock_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock_ops *&)__result_buffer;
}
static inline void __reqsk_free(struct request_sock *req)
{
 kmem_cache_free(__get__ZN16request_sock_ops4slabE_1609(&__get__ZN12request_sock7rsk_opsE_1610(&req->rsk_ops)->slab), req);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock7rsk_opsE_1612_0 {
  typedef TJP__ZN12request_sock7rsk_opsE_1612_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock_ops * __get__ZN12request_sock7rsk_opsE_1612(request_sock_ops * *source) {
  ::request_sock_ops *__result_buffer;
  typedef TJP__ZN12request_sock7rsk_opsE_1612_0< ::request_sock_ops *, ::request_sock , ::request_sock_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock_ops *&)__result_buffer;
}
static inline void reqsk_free(struct request_sock *req)
{
 __get__ZN12request_sock7rsk_opsE_1612(&req->rsk_ops)->destructor(req);
 __reqsk_free(req);
}

extern int sysctl_max_syn_backlog;





struct listen_sock {
  template <typename, int = 0> struct __BYPASSlisten_sock {};
  template <typename, int> friend struct __BYPASSlisten_sock;
 u8 max_qlen_log;

 int qlen;
 int qlen_young;
 int clock_hand;
 u32 hash_rnd;
 u32 nr_table_entries;
 struct request_sock *syn_table[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct request_sock_queue {
  template <typename, int = 0> struct __BYPASSrequest_sock_queue {};
  template <typename, int> friend struct __BYPASSrequest_sock_queue;
 struct request_sock *rskq_accept_head;
 struct request_sock *rskq_accept_tail;
 rwlock_t syn_wait_lock;
 u8 rskq_defer_accept;

 struct listen_sock *listen_opt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int reqsk_queue_alloc(struct request_sock_queue *queue,
        unsigned int nr_table_entries);

extern void __reqsk_queue_destroy(struct request_sock_queue *queue);
extern void reqsk_queue_destroy(struct request_sock_queue *queue);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue16rskq_accept_headE_1613_0 {
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_1613_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN18request_sock_queue16rskq_accept_headE_1613(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_1613_0< ::request_sock *, ::request_sock_queue , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline struct request_sock *
 reqsk_queue_yank_acceptq(struct request_sock_queue *queue)
{
 struct request_sock *req = __get__ZN18request_sock_queue16rskq_accept_headE_1613(&queue->rskq_accept_head);

 queue->rskq_accept_head = 0;
 return req;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue16rskq_accept_headE_1614_0 {
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_1614_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN18request_sock_queue16rskq_accept_headE_1614(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_1614_0< ::request_sock *, ::request_sock_queue , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline int reqsk_queue_empty(struct request_sock_queue *queue)
{
 return __get__ZN18request_sock_queue16rskq_accept_headE_1614(&queue->rskq_accept_head) == 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock7dl_nextE_1615_0 {
  typedef TJP__ZN12request_sock7dl_nextE_1615_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN12request_sock7dl_nextE_1615(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN12request_sock7dl_nextE_1615_0< ::request_sock *, ::request_sock , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline void reqsk_queue_unlink(struct request_sock_queue *queue,
          struct request_sock *req,
          struct request_sock **prev_req)
{
 ;
 *prev_req = __get__ZN12request_sock7dl_nextE_1615(&req->dl_next);
 ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue16rskq_accept_headE_1616_0 {
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_1616_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN18request_sock_queue16rskq_accept_headE_1616(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_1616_0< ::request_sock *, ::request_sock_queue , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline void reqsk_queue_add(struct request_sock_queue *queue,
       struct request_sock *req,
       struct sock *parent,
       struct sock *child)
{
 req->sk = child;
 sk_acceptq_added(parent);

 if (__get__ZN18request_sock_queue16rskq_accept_headE_1616(&queue->rskq_accept_head) == 0)
  queue->rskq_accept_head = req;
 else
  queue->rskq_accept_tail->dl_next = req;

 queue->rskq_accept_tail = req;
 req->dl_next = 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue16rskq_accept_headE_1617_0 {
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_1617_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN18request_sock_queue16rskq_accept_headE_1617(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_1617_0< ::request_sock *, ::request_sock_queue , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock7dl_nextE_1618_0 {
  typedef TJP__ZN12request_sock7dl_nextE_1618_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN12request_sock7dl_nextE_1618(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN12request_sock7dl_nextE_1618_0< ::request_sock *, ::request_sock , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue16rskq_accept_headE_1619_0 {
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_1619_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN18request_sock_queue16rskq_accept_headE_1619(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_1619_0< ::request_sock *, ::request_sock_queue , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline struct request_sock *reqsk_queue_remove(struct request_sock_queue *queue)
{
 struct request_sock *req = __get__ZN18request_sock_queue16rskq_accept_headE_1617(&queue->rskq_accept_head);

 ;

 queue->rskq_accept_head = __get__ZN12request_sock7dl_nextE_1618(&req->dl_next);
 if (__get__ZN18request_sock_queue16rskq_accept_headE_1619(&queue->rskq_accept_head) == 0)
  queue->rskq_accept_tail = 0;

 return req;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock2skE_1620_0 {
  typedef TJP__ZN12request_sock2skE_1620_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock * __get__ZN12request_sock2skE_1620(sock * *source) {
  ::sock *__result_buffer;
  typedef TJP__ZN12request_sock2skE_1620_0< ::sock *, ::request_sock , ::sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock *&)__result_buffer;
}
static inline struct sock *reqsk_queue_get_child(struct request_sock_queue *queue,
       struct sock *parent)
{
 struct request_sock *req = reqsk_queue_remove(queue);
 struct sock *child = __get__ZN12request_sock2skE_1620(&req->sk);

 ;

 sk_acceptq_removed(parent);
 __reqsk_free(req);
 return child;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_1621_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_1621_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_1621(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_1621_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock7retransE_1622_0 {
  typedef TJP__ZN12request_sock7retransE_1622_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN12request_sock7retransE_1622(unsigned char *source) {
  ::u8 __result_buffer;
  typedef TJP__ZN12request_sock7retransE_1622_0< ::u8 , ::request_sock , ::u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::u8 &)__result_buffer;
}
static inline int reqsk_queue_removed(struct request_sock_queue *queue,
          struct request_sock *req)
{
 struct listen_sock *lopt = __get__ZN18request_sock_queue10listen_optE_1621(&queue->listen_opt);

 if (__get__ZN12request_sock7retransE_1622(&req->retrans) == 0)
  --lopt->qlen_young;

 return --lopt->qlen;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_1623_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_1623_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_1623(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_1623_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock4qlenE_1624_0 {
  typedef TJP__ZN11listen_sock4qlenE_1624_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11listen_sock4qlenE_1624(int *source) {
  int __result_buffer;
  typedef TJP__ZN11listen_sock4qlenE_1624_0< int , ::listen_sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int reqsk_queue_added(struct request_sock_queue *queue)
{
 struct listen_sock *lopt = __get__ZN18request_sock_queue10listen_optE_1623(&queue->listen_opt);
 int prev_qlen = __get__ZN11listen_sock4qlenE_1624(&lopt->qlen);

 lopt->qlen_young++;
 lopt->qlen++;
 return prev_qlen;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_1625_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_1625_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_1625(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_1625_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock4qlenE_1626_0 {
  typedef TJP__ZN11listen_sock4qlenE_1626_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11listen_sock4qlenE_1626(int *source) {
  int __result_buffer;
  typedef TJP__ZN11listen_sock4qlenE_1626_0< int , ::listen_sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_1627_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_1627_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_1627(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_1627_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}
static inline int reqsk_queue_len( struct request_sock_queue *queue)
{
 return __get__ZN18request_sock_queue10listen_optE_1625(&queue->listen_opt) != 0 ? __get__ZN11listen_sock4qlenE_1626(&__get__ZN18request_sock_queue10listen_optE_1627(&queue->listen_opt)->qlen) : 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock10qlen_youngE_1628_0 {
  typedef TJP__ZN11listen_sock10qlen_youngE_1628_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11listen_sock10qlen_youngE_1628(int *source) {
  int __result_buffer;
  typedef TJP__ZN11listen_sock10qlen_youngE_1628_0< int , ::listen_sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_1629_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_1629_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_1629(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_1629_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}
static inline int reqsk_queue_len_young( struct request_sock_queue *queue)
{
 return __get__ZN11listen_sock10qlen_youngE_1628(&__get__ZN18request_sock_queue10listen_optE_1629(&queue->listen_opt)->qlen_young);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock4qlenE_1630_0 {
  typedef TJP__ZN11listen_sock4qlenE_1630_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11listen_sock4qlenE_1630(int *source) {
  int __result_buffer;
  typedef TJP__ZN11listen_sock4qlenE_1630_0< int , ::listen_sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_1631_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_1631_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_1631(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_1631_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock12max_qlen_logE_1632_0 {
  typedef TJP__ZN11listen_sock12max_qlen_logE_1632_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN11listen_sock12max_qlen_logE_1632(unsigned char *source) {
  ::u8 __result_buffer;
  typedef TJP__ZN11listen_sock12max_qlen_logE_1632_0< ::u8 , ::listen_sock , ::u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::u8 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_1633_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_1633_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_1633(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_1633_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}
static inline int reqsk_queue_is_full( struct request_sock_queue *queue)
{
 return __get__ZN11listen_sock4qlenE_1630(&__get__ZN18request_sock_queue10listen_optE_1631(&queue->listen_opt)->qlen) >> __get__ZN11listen_sock12max_qlen_logE_1632(&__get__ZN18request_sock_queue10listen_optE_1633(&queue->listen_opt)->max_qlen_log);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_1634_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_1634_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_1634(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_1634_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_1635_0 {
  typedef TJP_jiffies_1635_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_1635(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_1635_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock9syn_tableE_1636_0 {
  typedef TJP__ZN11listen_sock9syn_tableE_1636_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN11listen_sock9syn_tableE_1636(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN11listen_sock9syn_tableE_1636_0< ::request_sock *, ::listen_sock , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline void reqsk_queue_hash_req(struct request_sock_queue *queue,
     u32 hash, struct request_sock *req,
     unsigned long timeout)
{
 struct listen_sock *lopt = __get__ZN18request_sock_queue10listen_optE_1634(&queue->listen_opt);

 req->expires = __get_jiffies_1635(&jiffies) + timeout;
 req->retrans = 0;
 req->sk = 0;
 req->dl_next = __get__ZN11listen_sock9syn_tableE_1636(&lopt->syn_table[hash]);

 ;
 lopt->syn_table[hash] = req;
 ;
}

struct inet_peer
{
  template <typename, int = 0> struct __BYPASSinet_peer {};
  template <typename, int> friend struct __BYPASSinet_peer;

 struct inet_peer *avl_left, *avl_right;
 __be32 v4daddr;
 __u16 avl_height;
 __u16 ip_id_count;
 struct list_head unused;
 __u32 dtime;

 atomic_t refcnt;
 atomic_t rid;
 __u32 tcp_ts;
 unsigned long tcp_ts_stamp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void inet_initpeers(void) __attribute__ ((__section__(".init.text"))) __attribute__((__cold__));


struct inet_peer *inet_getpeer(__be32 daddr, int create);


extern void inet_putpeer(struct inet_peer *p);

extern spinlock_t inet_peer_idlock;

static inline __u16 inet_getid(struct inet_peer *p, int more)
{
 __u16 id;

 ;
 id = p->ip_id_count;
 p->ip_id_count += 1 + more;
 ;
 return id;
}



struct rtentry
{
  template <typename, int = 0> struct __BYPASSrtentry {};
  template <typename, int> friend struct __BYPASSrtentry;
 unsigned long rt_pad1;
 struct sockaddr rt_dst;
 struct sockaddr rt_gateway;
 struct sockaddr rt_genmask;
 unsigned short rt_flags;
 short rt_pad2;
 unsigned long rt_pad3;
 void *rt_pad4;
 short rt_metric;
 char *rt_dev;
 unsigned long rt_mtu;



 unsigned long rt_window;
 unsigned short rt_irtt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct fib_nh;
struct inet_peer;
struct rtable
{
  template <typename, int = 0> struct __BYPASSrtable {};
  template <typename, int> friend struct __BYPASSrtable;
 union
 {
  struct dst_entry dst;
 } u;


 struct flowi fl;

 struct in_device *idev;

 int rt_genid;
 unsigned rt_flags;
 __u16 rt_type;

 __be32 rt_dst;
 __be32 rt_src;
 int rt_iif;


 __be32 rt_gateway;


 __be32 rt_spec_dst;
 struct inet_peer *peer;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_rt_acct
{
  template <typename, int = 0> struct __BYPASSip_rt_acct {};
  template <typename, int> friend struct __BYPASSip_rt_acct;
 __u32 o_bytes;
 __u32 o_packets;
 __u32 i_bytes;
 __u32 i_packets;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rt_cache_stat
{
  template <typename, int = 0> struct __BYPASSrt_cache_stat {};
  template <typename, int> friend struct __BYPASSrt_cache_stat;
        unsigned int in_hit;
        unsigned int in_slow_tot;
        unsigned int in_slow_mc;
        unsigned int in_no_route;
        unsigned int in_brd;
        unsigned int in_martian_dst;
        unsigned int in_martian_src;
        unsigned int out_hit;
        unsigned int out_slow_tot;
        unsigned int out_slow_mc;
        unsigned int gc_total;
        unsigned int gc_ignored;
        unsigned int gc_goal_miss;
        unsigned int gc_dst_overflow;
        unsigned int in_hlist_search;
        unsigned int out_hlist_search;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct ip_rt_acct *ip_rt_acct;

struct in_device;
extern int ip_rt_init(void);
extern void ip_rt_redirect(__be32 old_gw, __be32 dst, __be32 new_gw,
           __be32 src, struct net_device *dev);
extern void rt_cache_flush(struct net *net, int how);
extern int __ip_route_output_key(struct net *, struct rtable **, struct flowi *flp);
extern int ip_route_output_key(struct net *, struct rtable **, struct flowi *flp);
extern int ip_route_output_flow(struct net *, struct rtable **rp, struct flowi *flp, struct sock *sk, int flags);
extern int ip_route_input(struct sk_buff*, __be32 dst, __be32 src, u8 tos, struct net_device *devin);
extern unsigned short ip_rt_frag_needed(struct net *net, struct iphdr *iph, unsigned short new_mtu, struct net_device *dev);
extern void ip_rt_send_redirect(struct sk_buff *skb);

extern unsigned inet_addr_type(struct net *net, __be32 addr);
extern unsigned inet_dev_addr_type(struct net *net, struct net_device *dev, __be32 addr);
extern void ip_rt_multicast_event(struct in_device *);
extern int ip_rt_ioctl(struct net *, unsigned int cmd, void *arg);
extern void ip_rt_get_source(u8 *src, struct rtable *rt);
extern int ip_rt_dump(struct sk_buff *skb, struct netlink_callback *cb);

struct in_ifaddr;
extern void fib_add_ifaddr(struct in_ifaddr *);

static inline void ip_rt_put(struct rtable * rt)
{
 if (rt)
  dst_release(&rt->u.dst);
}



extern __u8 ip_tos2prio[16];

static inline char rt_tos2priority(u8 tos)
{
 return ip_tos2prio[((tos)&0x1E)>>1];
}
static inline int ip_route_newports(struct rtable **rp, u8 protocol,
        __be16 sport, __be16 dport, struct sock *sk)
{
 if (sport != (*rp)->fl.uli_u.ports.sport ||
     dport != (*rp)->fl.uli_u.ports.dport) {
  struct flowi fl;

  memcpy(&fl, &(*rp)->fl, sizeof(fl));
  fl.uli_u.ports.sport = sport;
  fl.uli_u.ports.dport = dport;
  fl.proto = protocol;
  ip_rt_put(*rp);
  *rp = 0;
  security_sk_classify_flow(sk, &fl);
  return ip_route_output_flow(sock_net(sk), rp, &fl, sk, 0);
 }
 return 0;
}

extern void rt_bind_peer(struct rtable *rt, int create);

static inline struct inet_peer *rt_get_peer(struct rtable *rt)
{
 if (rt->peer)
  return rt->peer;

 rt_bind_peer(rt, 0);
 return rt->peer;
}





struct net;

static inline unsigned net_hash_mix(struct net *net)
{
 return 0;

}
struct ip_options {
  template <typename, int = 0> struct __BYPASSip_options {};
  template <typename, int> friend struct __BYPASSip_options;
 __be32 faddr;
 unsigned char optlen;
 unsigned char srr;
 unsigned char rr;
 unsigned char ts;
 unsigned char is_strictroute:1,
   srr_is_hit:1,
   is_changed:1,
   rr_needaddr:1,
   ts_needtime:1,
   ts_needaddr:1;
 unsigned char router_alert;
 unsigned char cipso;
 unsigned char __pad2;
 unsigned char __data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct inet_request_sock {
  template <typename, int = 0> struct __BYPASSinet_request_sock {};
  template <typename, int> friend struct __BYPASSinet_request_sock;
 struct request_sock req;

 u16 inet6_rsk_offset;


 __be32 loc_addr;
 __be32 rmt_addr;
 __be16 rmt_port;
 u16 snd_wscale : 4,
    rcv_wscale : 4,
    tstamp_ok : 1,
    sack_ok : 1,
    wscale_ok : 1,
    ecn_ok : 1,
    acked : 1;
 struct ip_options *opt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct inet_request_sock *inet_rsk( struct request_sock *sk)
{
 return (struct inet_request_sock *)sk;
}

struct ip_mc_socklist;
struct ipv6_pinfo;
struct rtable;
struct inet_sock {
  template <typename, int = 0> struct __BYPASSinet_sock {};
  template <typename, int> friend struct __BYPASSinet_sock;

 struct sock sk;

 struct ipv6_pinfo *pinet6;


 __be32 daddr;
 __be32 rcv_saddr;
 __be16 dport;
 __u16 num;
 __be32 saddr;
 __s16 uc_ttl;
 __u16 cmsg_flags;
 struct ip_options *opt;
 __be16 sport;
 __u16 id;
 __u8 tos;
 __u8 mc_ttl;
 __u8 pmtudisc;
 __u8 recverr:1,
    is_icsk:1,
    freebind:1,
    hdrincl:1,
    mc_loop:1;
 int mc_index;
 __be32 mc_addr;
 struct ip_mc_socklist *mc_list;
 struct {
  unsigned int flags;
  unsigned int fragsize;
  struct ip_options *opt;
  struct dst_entry *dst;
  int length;
  __be32 addr;
  struct flowi fl;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} cork;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline struct inet_sock *inet_sk( struct sock *sk)
{
 return (struct inet_sock *)sk;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1652_0 {
  typedef TJP__ZN4sock11__sk_commonE_1652_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1652(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1652_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline void __inet_sk_copy_descendant(struct sock *sk_to,
          struct sock *sk_from,
          int ancestor_size)
{
 memcpy(inet_sk(sk_to) + 1, inet_sk(sk_from) + 1,
        __get__ZN4sock11__sk_commonE_1652(&sk_from->__sk_common).skc_prot->obj_size - ancestor_size);
}
extern int inet_sk_rebuild_header(struct sock *sk);

extern u32 inet_ehash_secret;
extern void build_ehash_secret(void);

static inline unsigned int inet_ehashfn(struct net *net,
     __be32 laddr, __u16 lport,
     __be32 faddr, __be16 fport)
{
 return jhash_3words(( __u32) laddr,
       ( __u32) faddr,
       ((__u32) lport) << 16 | ( __u32)fport,
       inet_ehash_secret + net_hash_mix(net));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock9rcv_saddrE_1654_0 {
  typedef TJP__ZN9inet_sock9rcv_saddrE_1654_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN9inet_sock9rcv_saddrE_1654(unsigned int *source) {
  ::__be32 __result_buffer;
  typedef TJP__ZN9inet_sock9rcv_saddrE_1654_0< ::__be32 , ::inet_sock , ::__be32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__be32 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock3numE_1655_0 {
  typedef TJP__ZN9inet_sock3numE_1655_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN9inet_sock3numE_1655(unsigned short int *source) {
  ::__u16 __result_buffer;
  typedef TJP__ZN9inet_sock3numE_1655_0< ::__u16 , ::inet_sock , ::__u16  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u16 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock5daddrE_1656_0 {
  typedef TJP__ZN9inet_sock5daddrE_1656_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN9inet_sock5daddrE_1656(unsigned int *source) {
  ::__be32 __result_buffer;
  typedef TJP__ZN9inet_sock5daddrE_1656_0< ::__be32 , ::inet_sock , ::__be32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__be32 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock5dportE_1657_0 {
  typedef TJP__ZN9inet_sock5dportE_1657_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN9inet_sock5dportE_1657(unsigned short int *source) {
  ::__be16 __result_buffer;
  typedef TJP__ZN9inet_sock5dportE_1657_0< ::__be16 , ::inet_sock , ::__be16  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__be16 &)__result_buffer;
}
static inline int inet_sk_ehashfn( struct sock *sk)
{
 struct inet_sock *inet = inet_sk(sk);
 __be32 laddr = __get__ZN9inet_sock9rcv_saddrE_1654(&inet->rcv_saddr);
 __u16 lport = __get__ZN9inet_sock3numE_1655(&inet->num);
 __be32 faddr = __get__ZN9inet_sock5daddrE_1656(&inet->daddr);
 __be16 fport = __get__ZN9inet_sock5dportE_1657(&inet->dport);
 struct net *net = sock_net(sk);

 return inet_ehashfn(net, laddr, lport, faddr, fport);
}


static inline int inet_iif( struct sk_buff *skb)
{
 return skb->rtable->rt_iif;
}

static inline struct request_sock *inet_reqsk_alloc(struct request_sock_ops *ops)
{
 struct request_sock *req = reqsk_alloc(ops);

 if (req != 0)
  inet_rsk(req)->opt = 0;

 return req;
}


struct sock;

struct inet_skb_parm
{
  template <typename, int = 0> struct __BYPASSinet_skb_parm {};
  template <typename, int> friend struct __BYPASSinet_skb_parm;
 struct ip_options opt;
 unsigned char flags;







  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline unsigned int ip_hdrlen( struct sk_buff *skb)
{
 return ip_hdr(skb)->ihl * 4;
}

struct ipcm_cookie
{
  template <typename, int = 0> struct __BYPASSipcm_cookie {};
  template <typename, int> friend struct __BYPASSipcm_cookie;
 __be32 addr;
 int oif;
 struct ip_options *opt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct ip_ra_chain
{
  template <typename, int = 0> struct __BYPASSip_ra_chain {};
  template <typename, int> friend struct __BYPASSip_ra_chain;
 struct ip_ra_chain *next;
 struct sock *sk;
 void (*destructor)(struct sock *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct ip_ra_chain *ip_ra_chain;
extern rwlock_t ip_ra_lock;
struct msghdr;
struct net_device;
struct packet_type;
struct rtable;
struct sockaddr;

extern int igmp_mc_proc_init(void);





extern int ip_build_and_send_pkt(struct sk_buff *skb, struct sock *sk,
           __be32 saddr, __be32 daddr,
           struct ip_options *opt);
extern int ip_rcv(struct sk_buff *skb, struct net_device *dev,
          struct packet_type *pt, struct net_device *orig_dev);
extern int ip_local_deliver(struct sk_buff *skb);
extern int ip_mr_input(struct sk_buff *skb);
extern int ip_output(struct sk_buff *skb);
extern int ip_mc_output(struct sk_buff *skb);
extern int ip_fragment(struct sk_buff *skb, int (*output)(struct sk_buff *));
extern int ip_do_nat(struct sk_buff *skb);
extern void ip_send_check(struct iphdr *ip);
extern int __ip_local_out(struct sk_buff *skb);
extern int ip_local_out(struct sk_buff *skb);
extern int ip_queue_xmit(struct sk_buff *skb, int ipfragok);
extern void ip_init(void);
extern int ip_append_data(struct sock *sk,
           int getfrag(void *from, char *to, int offset, int len,
         int odd, struct sk_buff *skb),
    void *from, int len, int protolen,
    struct ipcm_cookie *ipc,
    struct rtable *rt,
    unsigned int flags);
extern int ip_generic_getfrag(void *from, char *to, int offset, int len, int odd, struct sk_buff *skb);
extern ssize_t ip_append_page(struct sock *sk, struct page *page,
    int offset, size_t size, int flags);
extern int ip_push_pending_frames(struct sock *sk);
extern void ip_flush_pending_frames(struct sock *sk);


extern int ip4_datagram_connect(struct sock *sk,
          struct sockaddr *uaddr, int addr_len);
static inline void ip_tr_mc_map(__be32 addr, char *buf)
{
 buf[0]=0xC0;
 buf[1]=0x00;
 buf[2]=0x00;
 buf[3]=0x04;
 buf[4]=0x00;
 buf[5]=0x00;
}

struct ip_reply_arg {
  template <typename, int = 0> struct __BYPASSip_reply_arg {};
  template <typename, int> friend struct __BYPASSip_reply_arg;
 struct kvec iov[1];
 __wsum csum;
 int csumoffset;

 int bound_dev_if;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void ip_send_reply(struct sock *sk, struct sk_buff *skb, struct ip_reply_arg *arg,
     unsigned int len);

struct ipv4_config
{
  template <typename, int = 0> struct __BYPASSipv4_config {};
  template <typename, int> friend struct __BYPASSipv4_config;
 int log_martians;
 int no_pmtu_disc;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct ipv4_config ipv4_config;
extern unsigned long snmp_fold_field(void *mib[], int offt);
extern int snmp_mib_init(void *ptr[2], size_t mibsize);
extern void snmp_mib_free(void *ptr[2]);

extern void inet_get_local_port_range(int *low, int *high);

extern int sysctl_ip_default_ttl;
extern int sysctl_ip_nonlocal_bind;

extern struct ctl_path net_ipv4_ctl_path[];


extern int inet_peer_threshold;
extern int inet_peer_minttl;
extern int inet_peer_maxttl;
extern int inet_peer_gc_mintime;
extern int inet_peer_gc_maxtime;


extern int sysctl_ip_dynaddr;

extern void ipfrag_init(void);

extern void ip_static_sysctl_init(void);






static inline
int ip_decrease_ttl(struct iphdr *iph)
{
 u32 check = ( u32)iph->check;
 check += ( u32)(( __be16)__fswab16((0x0100)));
 iph->check = ( __sum16)(check + (check>=0xFFFF));
 return --iph->ttl;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock8pmtudiscE_1662_0 {
  typedef TJP__ZN9inet_sock8pmtudiscE_1662_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN9inet_sock8pmtudiscE_1662(unsigned char *source) {
  ::__u8 __result_buffer;
  typedef TJP__ZN9inet_sock8pmtudiscE_1662_0< ::__u8 , ::inet_sock , ::__u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u8 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock8pmtudiscE_1663_0 {
  typedef TJP__ZN9inet_sock8pmtudiscE_1663_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN9inet_sock8pmtudiscE_1663(unsigned char *source) {
  ::__u8 __result_buffer;
  typedef TJP__ZN9inet_sock8pmtudiscE_1663_0< ::__u8 , ::inet_sock , ::__u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u8 &)__result_buffer;
}
static inline
int ip_dont_fragment(struct sock *sk, struct dst_entry *dst)
{
 return (__get__ZN9inet_sock8pmtudiscE_1662(&inet_sk(sk)->pmtudisc) == 2 ||
  (__get__ZN9inet_sock8pmtudiscE_1663(&inet_sk(sk)->pmtudisc) == 1 &&
   !(dst_metric_locked(dst, RTAX_MTU))));
}

extern void __ip_select_ident(struct iphdr *iph, struct dst_entry *dst, int more);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock5daddrE_1666_0 {
  typedef TJP__ZN9inet_sock5daddrE_1666_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN9inet_sock5daddrE_1666(unsigned int *source) {
  ::__be32 __result_buffer;
  typedef TJP__ZN9inet_sock5daddrE_1666_0< ::__be32 , ::inet_sock , ::__be32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__be32 &)__result_buffer;
}
static inline void ip_select_ident(struct iphdr *iph, struct dst_entry *dst, struct sock *sk)
{
 if (iph->frag_off & (( __be16)__fswab16((0x4000)))) {





  iph->id = (sk && __get__ZN9inet_sock5daddrE_1666(&inet_sk(sk)->daddr)) ?
     (( __be16)__fswab16((inet_sk(sk)->id++))) : 0;
 } else
  __ip_select_ident(iph, dst, 0);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock5daddrE_1668_0 {
  typedef TJP__ZN9inet_sock5daddrE_1668_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN9inet_sock5daddrE_1668(unsigned int *source) {
  ::__be32 __result_buffer;
  typedef TJP__ZN9inet_sock5daddrE_1668_0< ::__be32 , ::inet_sock , ::__be32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__be32 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock2idE_1669_0 {
  typedef TJP__ZN9inet_sock2idE_1669_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN9inet_sock2idE_1669(unsigned short int *source) {
  ::__u16 __result_buffer;
  typedef TJP__ZN9inet_sock2idE_1669_0< ::__u16 , ::inet_sock , ::__u16  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u16 &)__result_buffer;
}
static inline void ip_select_ident_more(struct iphdr *iph, struct dst_entry *dst, struct sock *sk, int more)
{
 if (iph->frag_off & (( __be16)__fswab16((0x4000)))) {
  if (sk && __get__ZN9inet_sock5daddrE_1668(&inet_sk(sk)->daddr)) {
   iph->id = (( __be16)__fswab16((__get__ZN9inet_sock2idE_1669(&inet_sk(sk)->id))));
   inet_sk(sk)->id += 1 + more;
  } else
   iph->id = 0;
 } else
  __ip_select_ident(iph, dst, more);
}





static inline void ip_eth_mc_map(__be32 naddr, char *buf)
{
 __u32 addr=__fswab32(( __u32)(__be32)(naddr));
 buf[0]=0x01;
 buf[1]=0x00;
 buf[2]=0x5e;
 buf[5]=addr&0xFF;
 addr>>=8;
 buf[4]=addr&0xFF;
 addr>>=8;
 buf[3]=addr&0x7F;
}






static inline void ip_ib_mc_map(__be32 naddr, unsigned char *broadcast, char *buf)
{
 __u32 addr;
 unsigned char scope = broadcast[5] & 0xF;

 buf[0] = 0;
 buf[1] = 0xff;
 buf[2] = 0xff;
 buf[3] = 0xff;
 addr = __fswab32(( __u32)(__be32)(naddr));
 buf[4] = 0xff;
 buf[5] = 0x10 | scope;
 buf[6] = 0x40;
 buf[7] = 0x1b;
 buf[8] = broadcast[8];
 buf[9] = broadcast[9];
 buf[10] = 0;
 buf[11] = 0;
 buf[12] = 0;
 buf[13] = 0;
 buf[14] = 0;
 buf[15] = 0;
 buf[19] = addr & 0xff;
 addr >>= 8;
 buf[18] = addr & 0xff;
 addr >>= 8;
 buf[17] = addr & 0xff;
 addr >>= 8;
 buf[16] = addr & 0x0f;
}


struct in6_pktinfo {
  template <typename, int = 0> struct __BYPASSin6_pktinfo {};
  template <typename, int> friend struct __BYPASSin6_pktinfo;
 struct in6_addr ipi6_addr;
 int ipi6_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct in6_ifreq {
  template <typename, int = 0> struct __BYPASSin6_ifreq {};
  template <typename, int> friend struct __BYPASSin6_ifreq;
 struct in6_addr ifr6_addr;
 __u32 ifr6_prefixlen;
 int ifr6_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ipv6_rt_hdr {
  template <typename, int = 0> struct __BYPASSipv6_rt_hdr {};
  template <typename, int> friend struct __BYPASSipv6_rt_hdr;
 __u8 nexthdr;
 __u8 hdrlen;
 __u8 type;
 __u8 segments_left;






  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ipv6_opt_hdr {
  template <typename, int = 0> struct __BYPASSipv6_opt_hdr {};
  template <typename, int> friend struct __BYPASSipv6_opt_hdr;
 __u8 nexthdr;
 __u8 hdrlen;




  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed));
struct rt0_hdr {
  template <typename, int = 0> struct __BYPASSrt0_hdr {};
  template <typename, int> friend struct __BYPASSrt0_hdr;
 struct ipv6_rt_hdr rt_hdr;
 __u32 reserved;
 struct in6_addr addr[0];



  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct rt2_hdr {
  template <typename, int = 0> struct __BYPASSrt2_hdr {};
  template <typename, int> friend struct __BYPASSrt2_hdr;
 struct ipv6_rt_hdr rt_hdr;
 __u32 reserved;
 struct in6_addr addr;



  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct ipv6_destopt_hao {
  template <typename, int = 0> struct __BYPASSipv6_destopt_hao {};
  template <typename, int> friend struct __BYPASSipv6_destopt_hao;
 __u8 type;
 __u8 length;
 struct in6_addr addr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((__packed__));
struct ipv6hdr {
  template <typename, int = 0> struct __BYPASSipv6hdr {};
  template <typename, int> friend struct __BYPASSipv6hdr;

 __u8 priority:4,
    version:4;






 __u8 flow_lbl[3];

 __be16 payload_len;
 __u8 nexthdr;
 __u8 hop_limit;

 struct in6_addr saddr;
 struct in6_addr daddr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct ipv6_devconf {
  template <typename, int = 0> struct __BYPASSipv6_devconf {};
  template <typename, int> friend struct __BYPASSipv6_devconf;
 __s32 forwarding;
 __s32 hop_limit;
 __s32 mtu6;
 __s32 accept_ra;
 __s32 accept_redirects;
 __s32 autoconf;
 __s32 dad_transmits;
 __s32 rtr_solicits;
 __s32 rtr_solicit_interval;
 __s32 rtr_solicit_delay;
 __s32 force_mld_version;

 __s32 use_tempaddr;
 __s32 temp_valid_lft;
 __s32 temp_prefered_lft;
 __s32 regen_max_retry;
 __s32 max_desync_factor;

 __s32 max_addresses;
 __s32 accept_ra_defrtr;
 __s32 accept_ra_pinfo;

 __s32 accept_ra_rtr_pref;
 __s32 rtr_probe_interval;

 __s32 accept_ra_rt_info_max_plen;


 __s32 proxy_ndp;
 __s32 accept_source_route;

 __s32 optimistic_dad;


 __s32 mc_forwarding;

 __s32 disable_ipv6;
 __s32 accept_dad;
 void *sysctl;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum {
 DEVCONF_FORWARDING = 0,
 DEVCONF_HOPLIMIT,
 DEVCONF_MTU6,
 DEVCONF_ACCEPT_RA,
 DEVCONF_ACCEPT_REDIRECTS,
 DEVCONF_AUTOCONF,
 DEVCONF_DAD_TRANSMITS,
 DEVCONF_RTR_SOLICITS,
 DEVCONF_RTR_SOLICIT_INTERVAL,
 DEVCONF_RTR_SOLICIT_DELAY,
 DEVCONF_USE_TEMPADDR,
 DEVCONF_TEMP_VALID_LFT,
 DEVCONF_TEMP_PREFERED_LFT,
 DEVCONF_REGEN_MAX_RETRY,
 DEVCONF_MAX_DESYNC_FACTOR,
 DEVCONF_MAX_ADDRESSES,
 DEVCONF_FORCE_MLD_VERSION,
 DEVCONF_ACCEPT_RA_DEFRTR,
 DEVCONF_ACCEPT_RA_PINFO,
 DEVCONF_ACCEPT_RA_RTR_PREF,
 DEVCONF_RTR_PROBE_INTERVAL,
 DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN,
 DEVCONF_PROXY_NDP,
 DEVCONF_OPTIMISTIC_DAD,
 DEVCONF_ACCEPT_SOURCE_ROUTE,
 DEVCONF_MC_FORWARDING,
 DEVCONF_DISABLE_IPV6,
 DEVCONF_ACCEPT_DAD,
 DEVCONF_MAX
};







struct icmp6hdr {
  template <typename, int = 0> struct __BYPASSicmp6hdr {};
  template <typename, int> friend struct __BYPASSicmp6hdr;

 __u8 icmp6_type;
 __u8 icmp6_code;
 __sum16 icmp6_cksum;


 union {
  __be32 un_data32[1];
  __be16 un_data16[2];
  __u8 un_data8[4];

  struct icmpv6_echo {
   __be16 identifier;
   __be16 sequence;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} u_echo;

                struct icmpv6_nd_advt {

                        __u32 reserved:5,
                          override:1,
                          solicited:1,
                          router:1,
     reserved2:24;
                
  friend class ::Introspect;
  friend class ::MyIntrospect;
} u_nd_advt;

                struct icmpv6_nd_ra {
   __u8 hop_limit;

   __u8 reserved:4,
     router_pref:2,
     other:1,
     managed:1;
   __be16 rt_lifetime;
                
  friend class ::Introspect;
  friend class ::MyIntrospect;
} u_nd_ra;

 } icmp6_dataun;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline struct icmp6hdr *icmp6_hdr( struct sk_buff *skb)
{
 return (struct icmp6hdr *)skb_transport_header(skb);
}
struct icmp6_filter {
  template <typename, int = 0> struct __BYPASSicmp6_filter {};
  template <typename, int> friend struct __BYPASSicmp6_filter;
 __u32 data[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void icmpv6_send(struct sk_buff *skb,
          int type, int code,
          __u32 info,
          struct net_device *dev);

extern int icmpv6_init(void);
extern int icmpv6_err_convert(int type, int code,
          int *err);
extern void icmpv6_cleanup(void);
extern void icmpv6_param_prob(struct sk_buff *skb,
         int code, int pos);

struct flowi;
struct in6_addr;
extern void icmpv6_flow_init(struct sock *sk,
        struct flowi *fl,
        u8 type,
        struct in6_addr *saddr,
        struct in6_addr *daddr,
        int oif);
struct tcphdr {
  template <typename, int = 0> struct __BYPASStcphdr {};
  template <typename, int> friend struct __BYPASStcphdr;
 __be16 source;
 __be16 dest;
 __be32 seq;
 __be32 ack_seq;

 __u16 res1:4,
  doff:4,
  fin:1,
  syn:1,
  rst:1,
  psh:1,
  ack:1,
  urg:1,
  ece:1,
  cwr:1;
 __be16 window;
 __sum16 check;
 __be16 urg_ptr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






union tcp_word_hdr {
 struct tcphdr hdr;
 __be32 words[5];
};



enum {
 TCP_FLAG_CWR = (( __be32)((__u32)( (((__u32)((0x00800000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00800000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00800000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00800000)) & (__u32)0xff000000UL) >> 24) ))),
 TCP_FLAG_ECE = (( __be32)((__u32)( (((__u32)((0x00400000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00400000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00400000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00400000)) & (__u32)0xff000000UL) >> 24) ))),
 TCP_FLAG_URG = (( __be32)((__u32)( (((__u32)((0x00200000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00200000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00200000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00200000)) & (__u32)0xff000000UL) >> 24) ))),
 TCP_FLAG_ACK = (( __be32)((__u32)( (((__u32)((0x00100000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00100000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00100000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00100000)) & (__u32)0xff000000UL) >> 24) ))),
 TCP_FLAG_PSH = (( __be32)((__u32)( (((__u32)((0x00080000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00080000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00080000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00080000)) & (__u32)0xff000000UL) >> 24) ))),
 TCP_FLAG_RST = (( __be32)((__u32)( (((__u32)((0x00040000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00040000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00040000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00040000)) & (__u32)0xff000000UL) >> 24) ))),
 TCP_FLAG_SYN = (( __be32)((__u32)( (((__u32)((0x00020000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00020000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00020000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00020000)) & (__u32)0xff000000UL) >> 24) ))),
 TCP_FLAG_FIN = (( __be32)((__u32)( (((__u32)((0x00010000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00010000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00010000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00010000)) & (__u32)0xff000000UL) >> 24) ))),
 TCP_RESERVED_BITS = (( __be32)((__u32)( (((__u32)((0x0F000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0F000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0F000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0F000000)) & (__u32)0xff000000UL) >> 24) ))),
 TCP_DATA_OFFSET = (( __be32)((__u32)( (((__u32)((0xF0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xF0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xF0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xF0000000)) & (__u32)0xff000000UL) >> 24) )))
};
enum tcp_ca_state
{
 TCP_CA_Open = 0,

 TCP_CA_Disorder = 1,

 TCP_CA_CWR = 2,

 TCP_CA_Recovery = 3,

 TCP_CA_Loss = 4

};

struct tcp_info
{
  template <typename, int = 0> struct __BYPASStcp_info {};
  template <typename, int> friend struct __BYPASStcp_info;
 __u8 tcpi_state;
 __u8 tcpi_ca_state;
 __u8 tcpi_retransmits;
 __u8 tcpi_probes;
 __u8 tcpi_backoff;
 __u8 tcpi_options;
 __u8 tcpi_snd_wscale : 4, tcpi_rcv_wscale : 4;

 __u32 tcpi_rto;
 __u32 tcpi_ato;
 __u32 tcpi_snd_mss;
 __u32 tcpi_rcv_mss;

 __u32 tcpi_unacked;
 __u32 tcpi_sacked;
 __u32 tcpi_lost;
 __u32 tcpi_retrans;
 __u32 tcpi_fackets;


 __u32 tcpi_last_data_sent;
 __u32 tcpi_last_ack_sent;
 __u32 tcpi_last_data_recv;
 __u32 tcpi_last_ack_recv;


 __u32 tcpi_pmtu;
 __u32 tcpi_rcv_ssthresh;
 __u32 tcpi_rtt;
 __u32 tcpi_rttvar;
 __u32 tcpi_snd_ssthresh;
 __u32 tcpi_snd_cwnd;
 __u32 tcpi_advmss;
 __u32 tcpi_reordering;

 __u32 tcpi_rcv_rtt;
 __u32 tcpi_rcv_space;

 __u32 tcpi_total_retrans;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct tcp_md5sig {
  template <typename, int = 0> struct __BYPASStcp_md5sig {};
  template <typename, int> friend struct __BYPASStcp_md5sig;
 struct __kernel_sockaddr_storage tcpm_addr;
 __u16 __tcpm_pad1;
 __u16 tcpm_keylen;
 __u32 __tcpm_pad2;
 __u8 tcpm_key[80];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};









struct pollfd {
  template <typename, int = 0> struct __BYPASSpollfd {};
  template <typename, int> friend struct __BYPASSpollfd;
 int fd;
 short events;
 short revents;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct poll_table_struct;




typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);

typedef struct poll_table_struct {
  template <typename, int = 0> struct __BYPASSpoll_table_struct {};
  template <typename, int> friend struct __BYPASSpoll_table_struct;
 poll_queue_proc qproc;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} poll_table;

static inline void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)
{
 if (p && wait_address)
  p->qproc(filp, wait_address, p);
}

static inline void init_poll_funcptr(poll_table *pt, poll_queue_proc qproc)
{
 pt->qproc = qproc;
}

struct poll_table_entry {
  template <typename, int = 0> struct __BYPASSpoll_table_entry {};
  template <typename, int> friend struct __BYPASSpoll_table_entry;
 struct file * filp;
 wait_queue_t wait;
 wait_queue_head_t * wait_address;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct poll_wqueues {
  template <typename, int = 0> struct __BYPASSpoll_wqueues {};
  template <typename, int> friend struct __BYPASSpoll_wqueues;
 poll_table pt;
 struct poll_table_page * table;
 int error;
 int inline_index;
 struct poll_table_entry inline_entries[((832 - 256) / sizeof(struct poll_table_entry))];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void poll_initwait(struct poll_wqueues *pwq);
extern void poll_freewait(struct poll_wqueues *pwq);





typedef struct {
 unsigned long *in, *out, *ex;
 unsigned long *res_in, *res_out, *res_ex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fd_set_bits;
static inline
int get_fd_set(unsigned long nr, void *ufdset, unsigned long *fdset)
{
 nr = ((((nr)+(8*sizeof(long))-1)/(8*sizeof(long)))*sizeof(long));
 if (ufdset)
  return copy_from_user(fdset, ufdset, nr) ? -14 : 0;

 memset(fdset, 0, nr);
 return 0;
}

static inline unsigned long __attribute__((warn_unused_result))
set_fd_set(unsigned long nr, void *ufdset, unsigned long *fdset)
{
 if (ufdset)
  return __copy_to_user(ufdset, fdset, ((((nr)+(8*sizeof(long))-1)/(8*sizeof(long)))*sizeof(long)));
 return 0;
}

static inline
void zero_fd_set(unsigned long nr, unsigned long *fdset)
{
 memset(fdset, 0, ((((nr)+(8*sizeof(long))-1)/(8*sizeof(long)))*sizeof(long)));
}



extern int do_select(int n, fd_set_bits *fds, s64 *timeout);
extern int do_sys_poll(struct pollfd * ufds, unsigned int nfds,
         s64 *timeout);
extern int core_sys_select(int n, fd_set *inp, fd_set *outp,
      fd_set *exp, s64 *timeout);
struct inet_bind_bucket;
struct tcp_congestion_ops;





struct inet_connection_sock_af_ops {
  template <typename, int = 0> struct __BYPASSinet_connection_sock_af_ops {};
  template <typename, int> friend struct __BYPASSinet_connection_sock_af_ops;
 int (*queue_xmit)(struct sk_buff *skb, int ipfragok);
 void (*send_check)(struct sock *sk, int len,
      struct sk_buff *skb);
 int (*rebuild_header)(struct sock *sk);
 int (*conn_request)(struct sock *sk, struct sk_buff *skb);
 struct sock *(*syn_recv_sock)(struct sock *sk, struct sk_buff *skb,
          struct request_sock *req,
          struct dst_entry *dst);
 int (*remember_stamp)(struct sock *sk);
 u16 net_header_len;
 u16 sockaddr_len;
 int (*setsockopt)(struct sock *sk, int level, int optname,
      char *optval, int optlen);
 int (*getsockopt)(struct sock *sk, int level, int optname,
      char *optval, int *optlen);
 int (*compat_setsockopt)(struct sock *sk,
    int level, int optname,
    char *optval, int optlen);
 int (*compat_getsockopt)(struct sock *sk,
    int level, int optname,
    char *optval, int *optlen);
 void (*addr2sockaddr)(struct sock *sk, struct sockaddr *);
 int (*bind_conflict)( struct sock *sk,
         struct inet_bind_bucket *tb);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct inet_connection_sock {
  template <typename, int = 0> struct __BYPASSinet_connection_sock {};
  template <typename, int> friend struct __BYPASSinet_connection_sock;

 struct inet_sock icsk_inet;
 struct request_sock_queue icsk_accept_queue;
 struct inet_bind_bucket *icsk_bind_hash;
 unsigned long icsk_timeout;
  struct timer_list icsk_retransmit_timer;
  struct timer_list icsk_delack_timer;
 __u32 icsk_rto;
 __u32 icsk_pmtu_cookie;
 struct tcp_congestion_ops *icsk_ca_ops;
 struct inet_connection_sock_af_ops *icsk_af_ops;
 unsigned int (*icsk_sync_mss)(struct sock *sk, u32 pmtu);
 __u8 icsk_ca_state;
 __u8 icsk_retransmits;
 __u8 icsk_pending;
 __u8 icsk_backoff;
 __u8 icsk_syn_retries;
 __u8 icsk_probes_out;
 __u16 icsk_ext_hdr_len;
 struct _icsk_ack {
  template <typename, int = 0> struct __BYPASS_ZN20inet_connection_sock9_icsk_ackE {};
  template <typename, int> friend struct __BYPASS_ZN20inet_connection_sock9_icsk_ackE;
  __u8 pending;
  __u8 quick;
  __u8 pingpong;
  __u8 blocked;
  __u32 ato;
  unsigned long timeout;
  __u32 lrcvtime;
  __u16 last_seg_size;
  __u16 rcv_mss;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icsk_ack;
 struct _icsk_mtup {
  template <typename, int = 0> struct __BYPASS_ZN20inet_connection_sock10_icsk_mtupE {};
  template <typename, int> friend struct __BYPASS_ZN20inet_connection_sock10_icsk_mtupE;
  int enabled;


  int search_high;
  int search_low;


  int probe_size;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icsk_mtup;
 u32 icsk_ca_priv[16];


  friend class ::Introspect;
  friend class ::MyIntrospect;
};






static inline struct inet_connection_sock *inet_csk( struct sock *sk)
{
 return (struct inet_connection_sock *)sk;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN20inet_connection_sock12icsk_ca_privE_1671_0 {
  typedef TJP__ZN20inet_connection_sock12icsk_ca_privE_1671_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 16;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN20inet_connection_sock12icsk_ca_privE_1671(unsigned int *source) {
  ::u32 *__result_buffer;
  typedef TJP__ZN20inet_connection_sock12icsk_ca_privE_1671_0< ::u32 *, ::inet_connection_sock , ::u32 [16] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::u32 *&)__result_buffer;
}
static inline void *inet_csk_ca( struct sock *sk)
{
 return (void *)__get__ZN20inet_connection_sock12icsk_ca_privE_1671(inet_csk(sk)->icsk_ca_priv);
}

extern struct sock *inet_csk_clone(struct sock *sk,
       struct request_sock *req,
       gfp_t priority);

enum inet_csk_ack_state_t {
 ICSK_ACK_SCHED = 1,
 ICSK_ACK_TIMER = 2,
 ICSK_ACK_PUSHED = 4,
 ICSK_ACK_PUSHED2 = 8
};

extern void inet_csk_init_xmit_timers(struct sock *sk,
          void (*retransmit_handler)(unsigned long),
          void (*delack_handler)(unsigned long),
          void (*keepalive_handler)(unsigned long));
extern void inet_csk_clear_xmit_timers(struct sock *sk);

static inline void inet_csk_schedule_ack(struct sock *sk)
{
 inet_csk(sk)->icsk_ack.pending |= ICSK_ACK_SCHED;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN20inet_connection_sock8icsk_ackE_1674_0 {
  typedef TJP__ZN20inet_connection_sock8icsk_ackE_1674_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inet_connection_sock::_icsk_ack __get__ZN20inet_connection_sock8icsk_ackE_1674(inet_connection_sock::_icsk_ack *source) {
  AC::ResultBuffer< ::inet_connection_sock::_icsk_ack  > __result_buffer;
  typedef TJP__ZN20inet_connection_sock8icsk_ackE_1674_0< ::inet_connection_sock::_icsk_ack , ::inet_connection_sock , ::inet_connection_sock::_icsk_ack  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inet_connection_sock::_icsk_ack &)__result_buffer;
}
static inline int inet_csk_ack_scheduled( struct sock *sk)
{
 return __get__ZN20inet_connection_sock8icsk_ackE_1674(&inet_csk(sk)->icsk_ack).pending & ICSK_ACK_SCHED;
}

static inline void inet_csk_delack_init(struct sock *sk)
{
 memset(&inet_csk(sk)->icsk_ack, 0, sizeof(inet_csk(sk)->icsk_ack));
}

extern void inet_csk_delete_keepalive_timer(struct sock *sk);
extern void inet_csk_reset_keepalive_timer(struct sock *sk, unsigned long timeout);


extern char inet_csk_timer_bug_msg[];


static inline void inet_csk_clear_xmit_timer(struct sock *sk, int what)
{
 struct inet_connection_sock *icsk = inet_csk(sk);

 if (what == 1 || what == 3) {
  icsk->icsk_pending = 0;



 } else if (what == 2) {
  icsk->icsk_ack.blocked = icsk->icsk_ack.pending = 0;



 }

 else {
  ({ if (0) printk("<7>" "%s", inet_csk_timer_bug_msg); 0; });
 }

}





template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_1677_0 {
  typedef TJP_jiffies_1677_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_1677(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_1677_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN20inet_connection_sock12icsk_timeoutE_1678_0 {
  typedef TJP__ZN20inet_connection_sock12icsk_timeoutE_1678_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN20inet_connection_sock12icsk_timeoutE_1678(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN20inet_connection_sock12icsk_timeoutE_1678_0< unsigned long int , ::inet_connection_sock , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_1680_0 {
  typedef TJP_jiffies_1680_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_1680(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_1680_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN20inet_connection_sock8icsk_ackE_1682_0 {
  typedef TJP__ZN20inet_connection_sock8icsk_ackE_1682_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inet_connection_sock::_icsk_ack __get__ZN20inet_connection_sock8icsk_ackE_1682(inet_connection_sock::_icsk_ack *source) {
  AC::ResultBuffer< ::inet_connection_sock::_icsk_ack  > __result_buffer;
  typedef TJP__ZN20inet_connection_sock8icsk_ackE_1682_0< ::inet_connection_sock::_icsk_ack , ::inet_connection_sock , ::inet_connection_sock::_icsk_ack  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inet_connection_sock::_icsk_ack &)__result_buffer;
}
static inline void inet_csk_reset_xmit_timer(struct sock *sk, int what,
          unsigned long when,
          unsigned long max_when)
{
 struct inet_connection_sock *icsk = inet_csk(sk);

 if (when > max_when) {

  ({ if (0) printk("<7>" "reset_xmit_timer: sk=%p %d when=0x%lx, caller=%p\n", sk, what, when, current_text_addr()); 0; })
                                        ;

  when = max_when;
 }

 if (what == 1 || what == 3) {
  icsk->icsk_pending = what;
  icsk->icsk_timeout = __get_jiffies_1677(&jiffies) + when;
  sk_reset_timer(sk, &icsk->icsk_retransmit_timer, __get__ZN20inet_connection_sock12icsk_timeoutE_1678(&icsk->icsk_timeout));
 } else if (what == 2) {
  icsk->icsk_ack.pending |= ICSK_ACK_TIMER;
  icsk->icsk_ack.timeout = __get_jiffies_1680(&jiffies) + when;
  sk_reset_timer(sk, &icsk->icsk_delack_timer, __get__ZN20inet_connection_sock8icsk_ackE_1682(&icsk->icsk_ack).timeout);
 }

 else {
  ({ if (0) printk("<7>" "%s", inet_csk_timer_bug_msg); 0; });
 }

}

extern struct sock *inet_csk_accept(struct sock *sk, int flags, int *err);

extern struct request_sock *inet_csk_search_req( struct sock *sk,
      struct request_sock ***prevp,
      __be16 rport,
      __be32 raddr,
      __be32 laddr);
extern int inet_csk_bind_conflict( struct sock *sk,
      struct inet_bind_bucket *tb);
extern int inet_csk_get_port(struct sock *sk, unsigned short snum);

extern struct dst_entry* inet_csk_route_req(struct sock *sk,
         struct request_sock *req);

static inline void inet_csk_reqsk_queue_add(struct sock *sk,
         struct request_sock *req,
         struct sock *child)
{
 reqsk_queue_add(&inet_csk(sk)->icsk_accept_queue, req, sk, child);
}

extern void inet_csk_reqsk_queue_hash_add(struct sock *sk,
       struct request_sock *req,
       unsigned long timeout);

static inline void inet_csk_reqsk_queue_removed(struct sock *sk,
      struct request_sock *req)
{
 if (reqsk_queue_removed(&inet_csk(sk)->icsk_accept_queue, req) == 0)
  inet_csk_delete_keepalive_timer(sk);
}

static inline void inet_csk_reqsk_queue_added(struct sock *sk,
           unsigned long timeout)
{
 if (reqsk_queue_added(&inet_csk(sk)->icsk_accept_queue) == 0)
  inet_csk_reset_keepalive_timer(sk, timeout);
}

static inline int inet_csk_reqsk_queue_len( struct sock *sk)
{
 return reqsk_queue_len(&inet_csk(sk)->icsk_accept_queue);
}

static inline int inet_csk_reqsk_queue_young( struct sock *sk)
{
 return reqsk_queue_len_young(&inet_csk(sk)->icsk_accept_queue);
}

static inline int inet_csk_reqsk_queue_is_full( struct sock *sk)
{
 return reqsk_queue_is_full(&inet_csk(sk)->icsk_accept_queue);
}

static inline void inet_csk_reqsk_queue_unlink(struct sock *sk,
            struct request_sock *req,
            struct request_sock **prev)
{
 reqsk_queue_unlink(&inet_csk(sk)->icsk_accept_queue, req, prev);
}

static inline void inet_csk_reqsk_queue_drop(struct sock *sk,
          struct request_sock *req,
          struct request_sock **prev)
{
 inet_csk_reqsk_queue_unlink(sk, req, prev);
 inet_csk_reqsk_queue_removed(sk, req);
 reqsk_free(req);
}

extern void inet_csk_reqsk_queue_prune(struct sock *parent,
           unsigned long interval,
           unsigned long timeout,
           unsigned long max_rto);

extern void inet_csk_destroy_sock(struct sock *sk);




static inline unsigned int inet_csk_listen_poll( struct sock *sk)
{
 return !reqsk_queue_empty(&inet_csk(sk)->icsk_accept_queue) ?
   (0x0001 | 0x0040) : 0;
}

extern int inet_csk_listen_start(struct sock *sk, int nr_table_entries);
extern void inet_csk_listen_stop(struct sock *sk);

extern void inet_csk_addr2sockaddr(struct sock *sk, struct sockaddr *uaddr);

extern int inet_csk_compat_getsockopt(struct sock *sk, int level, int optname,
          char *optval, int *optlen);
extern int inet_csk_compat_setsockopt(struct sock *sk, int level, int optname,
          char *optval, int optlen);
enum {
 TCP_ESTABLISHED = 1,
 TCP_SYN_SENT,
 TCP_SYN_RECV,
 TCP_FIN_WAIT1,
 TCP_FIN_WAIT2,
 TCP_TIME_WAIT,
 TCP_CLOSE,
 TCP_CLOSE_WAIT,
 TCP_LAST_ACK,
 TCP_LISTEN,
 TCP_CLOSING,

 TCP_MAX_STATES
};





enum {
 TCPF_ESTABLISHED = (1 << 1),
 TCPF_SYN_SENT = (1 << 2),
 TCPF_SYN_RECV = (1 << 3),
 TCPF_FIN_WAIT1 = (1 << 4),
 TCPF_FIN_WAIT2 = (1 << 5),
 TCPF_TIME_WAIT = (1 << 6),
 TCPF_CLOSE = (1 << 7),
 TCPF_CLOSE_WAIT = (1 << 8),
 TCPF_LAST_ACK = (1 << 9),
 TCPF_LISTEN = (1 << 10),
 TCPF_CLOSING = (1 << 11)
};
struct timewait_sock_ops {
  template <typename, int = 0> struct __BYPASStimewait_sock_ops {};
  template <typename, int> friend struct __BYPASStimewait_sock_ops;
 struct kmem_cache *twsk_slab;
 unsigned int twsk_obj_size;
 int (*twsk_unique)(struct sock *sk,
           struct sock *sktw, void *twp);
 void (*twsk_destructor)(struct sock *sk);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1687_0 {
  typedef TJP__ZN4sock11__sk_commonE_1687_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1687(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1687_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1691_0 {
  typedef TJP__ZN4sock11__sk_commonE_1691_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1691(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1691_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline int twsk_unique(struct sock *sk, struct sock *sktw, void *twp)
{
 if (__get__ZN4sock11__sk_commonE_1687(&sk->__sk_common).skc_prot->twsk_prot->twsk_unique != 0)
  return __get__ZN4sock11__sk_commonE_1691(&sk->__sk_common).skc_prot->twsk_prot->twsk_unique(sk, sktw, twp);
 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1695_0 {
  typedef TJP__ZN4sock11__sk_commonE_1695_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1695(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1695_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1699_0 {
  typedef TJP__ZN4sock11__sk_commonE_1699_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1699(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1699_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline void twsk_destructor(struct sock *sk)
{
 ;
 ;
 ;
 if (__get__ZN4sock11__sk_commonE_1695(&sk->__sk_common).skc_prot->twsk_prot->twsk_destructor != 0)
  __get__ZN4sock11__sk_commonE_1699(&sk->__sk_common).skc_prot->twsk_prot->twsk_destructor(sk);
}


struct inet_hashinfo;
struct inet_timewait_death_row {
  template <typename, int = 0> struct __BYPASSinet_timewait_death_row {};
  template <typename, int> friend struct __BYPASSinet_timewait_death_row;

 int twcal_hand;
 unsigned long twcal_jiffie;
 struct timer_list twcal_timer;
 struct hlist_head twcal_row[(1 << 5)];

 spinlock_t death_lock;
 int tw_count;
 int period;
 u32 thread_slots;
 struct work_struct twkill_work;
 struct timer_list tw_timer;
 int slot;
 struct hlist_head cells[8];
 struct inet_hashinfo *hashinfo;
 int sysctl_tw_recycle;
 int sysctl_max_tw_buckets;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void inet_twdr_hangman(unsigned long data);
extern void inet_twdr_twkill_work(struct work_struct *work);
extern void inet_twdr_twcal_tick(unsigned long data);







struct inet_bind_bucket;






struct inet_timewait_sock {
  template <typename, int = 0> struct __BYPASSinet_timewait_sock {};
  template <typename, int> friend struct __BYPASSinet_timewait_sock;




 struct sock_common __tw_common;
 int tw_timeout;
 unsigned char tw_substate;

 unsigned char tw_rcv_wscale;


 __be16 tw_sport;
 __be32 tw_daddr __attribute__((aligned(8)));
 __be32 tw_rcv_saddr;
 __be16 tw_dport;
 __u16 tw_num;

 __u8 tw_ipv6only:1;

 __u16 tw_ipv6_offset;
 unsigned long tw_ttd;
 struct inet_bind_bucket *tw_tb;
 struct hlist_node tw_death_node;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void inet_twsk_add_node(struct inet_timewait_sock *tw,
          struct hlist_head *list)
{
 hlist_add_head(&tw->__tw_common.skc_node, list);
}

static inline void inet_twsk_add_bind_node(struct inet_timewait_sock *tw,
        struct hlist_head *list)
{
 hlist_add_head(&tw->__tw_common.skc_bind_node, list);
}

static inline int inet_twsk_dead_hashed( struct inet_timewait_sock *tw)
{
 return !hlist_unhashed(&tw->tw_death_node);
}

static inline void inet_twsk_dead_node_init(struct inet_timewait_sock *tw)
{
 tw->tw_death_node.pprev = 0;
}

static inline void __inet_twsk_del_dead_node(struct inet_timewait_sock *tw)
{
 __hlist_del(&tw->tw_death_node);
 inet_twsk_dead_node_init(tw);
}

static inline int inet_twsk_del_dead_node(struct inet_timewait_sock *tw)
{
 if (inet_twsk_dead_hashed(tw)) {
  __inet_twsk_del_dead_node(tw);
  return 1;
 }
 return 0;
}
static inline struct inet_timewait_sock *inet_twsk( struct sock *sk)
{
 return (struct inet_timewait_sock *)sk;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1701_0 {
  typedef TJP__ZN4sock11__sk_commonE_1701_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1701(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1701_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock9rcv_saddrE_1703_0 {
  typedef TJP__ZN9inet_sock9rcv_saddrE_1703_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN9inet_sock9rcv_saddrE_1703(unsigned int *source) {
  ::__be32 __result_buffer;
  typedef TJP__ZN9inet_sock9rcv_saddrE_1703_0< ::__be32 , ::inet_sock , ::__be32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__be32 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18inet_timewait_sock12tw_rcv_saddrE_1704_0 {
  typedef TJP__ZN18inet_timewait_sock12tw_rcv_saddrE_1704_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN18inet_timewait_sock12tw_rcv_saddrE_1704(unsigned int *source) {
  ::__be32 __result_buffer;
  typedef TJP__ZN18inet_timewait_sock12tw_rcv_saddrE_1704_0< ::__be32 , ::inet_timewait_sock , ::__be32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__be32 &)__result_buffer;
}
static inline __be32 inet_rcv_saddr( struct sock *sk)
{
 return __builtin_expect(!!(__get__ZN4sock11__sk_commonE_1701(&sk->__sk_common).skc_state != TCP_TIME_WAIT), 1) ?
  __get__ZN9inet_sock9rcv_saddrE_1703(&inet_sk(sk)->rcv_saddr) : __get__ZN18inet_timewait_sock12tw_rcv_saddrE_1704(&inet_twsk(sk)->tw_rcv_saddr);
}

extern void inet_twsk_put(struct inet_timewait_sock *tw);

extern struct inet_timewait_sock *inet_twsk_alloc( struct sock *sk,
        int state);

extern void __inet_twsk_hashdance(struct inet_timewait_sock *tw,
      struct sock *sk,
      struct inet_hashinfo *hashinfo);

extern void inet_twsk_schedule(struct inet_timewait_sock *tw,
          struct inet_timewait_death_row *twdr,
          int timeo, int timewait_len);
extern void inet_twsk_deschedule(struct inet_timewait_sock *tw,
     struct inet_timewait_death_row *twdr);

extern void inet_twsk_purge(struct net *net, struct inet_hashinfo *hashinfo,
       struct inet_timewait_death_row *twdr, int family);

static inline
struct net *twsk_net( struct inet_timewait_sock *twsk)
{



 return &init_net;

}

static inline
void twsk_net_set(struct inet_timewait_sock *twsk, struct net *net)
{



}

static inline struct tcphdr *tcp_hdr( struct sk_buff *skb)
{
 return (struct tcphdr *)skb_transport_header(skb);
}

static inline unsigned int tcp_hdrlen( struct sk_buff *skb)
{
 return tcp_hdr(skb)->doff * 4;
}

static inline unsigned int tcp_optlen( struct sk_buff *skb)
{
 return (tcp_hdr(skb)->doff - 5) * 4;
}


struct tcp_sack_block_wire {
  template <typename, int = 0> struct __BYPASStcp_sack_block_wire {};
  template <typename, int> friend struct __BYPASStcp_sack_block_wire;
 __be32 start_seq;
 __be32 end_seq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tcp_sack_block {
  template <typename, int = 0> struct __BYPASStcp_sack_block {};
  template <typename, int> friend struct __BYPASStcp_sack_block;
 u32 start_seq;
 u32 end_seq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tcp_options_received {
  template <typename, int = 0> struct __BYPASStcp_options_received {};
  template <typename, int> friend struct __BYPASStcp_options_received;

 long ts_recent_stamp;
 u32 ts_recent;
 u32 rcv_tsval;
 u32 rcv_tsecr;
 u16 saw_tstamp : 1,
  tstamp_ok : 1,
  dsack : 1,
  wscale_ok : 1,
  sack_ok : 4,
  snd_wscale : 4,
  rcv_wscale : 4;

 u8 eff_sacks;
 u8 num_sacks;
 u16 user_mss;
 u16 mss_clamp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct tcp_request_sock {
  template <typename, int = 0> struct __BYPASStcp_request_sock {};
  template <typename, int> friend struct __BYPASStcp_request_sock;
 struct inet_request_sock req;


 struct tcp_request_sock_ops *af_specific;

 u32 rcv_isn;
 u32 snt_isn;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct tcp_request_sock *tcp_rsk( struct request_sock *req)
{
 return (struct tcp_request_sock *)req;
}

struct tcp_sock {
  template <typename, int = 0> struct __BYPASStcp_sock {};
  template <typename, int> friend struct __BYPASStcp_sock;

 struct inet_connection_sock inet_conn;
 u16 tcp_header_len;
 u16 xmit_size_goal;





 __be32 pred_flags;






  u32 rcv_nxt;
 u32 copied_seq;
 u32 rcv_wup;
  u32 snd_nxt;

  u32 snd_una;
  u32 snd_sml;
 u32 rcv_tstamp;
 u32 lsndtime;


 struct _ucopy {
  template <typename, int = 0> struct __BYPASS_ZN8tcp_sock6_ucopyE {};
  template <typename, int> friend struct __BYPASS_ZN8tcp_sock6_ucopyE;
  struct sk_buff_head prequeue;
  struct task_struct *task;
  struct iovec *iov;
  int memory;
  int len;


  struct dma_chan *dma_chan;
  int wakeup;
  struct dma_pinned_list *pinned_list;
  dma_cookie_t dma_cookie;

 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ucopy;

 u32 snd_wl1;
 u32 snd_wnd;
 u32 max_window;
 u32 mss_cache;

 u32 window_clamp;
 u32 rcv_ssthresh;

 u32 frto_highmark;
 u16 advmss;
 u8 frto_counter;
 u8 nonagle;


 u32 srtt;
 u32 mdev;
 u32 mdev_max;
 u32 rttvar;
 u32 rtt_seq;

 u32 packets_out;
 u32 retrans_out;

 u16 urg_data;
 u8 urg_mode;
 u8 ecn_flags;



 struct tcp_options_received rx_opt;




  u32 snd_ssthresh;
  u32 snd_cwnd;
 u32 snd_cwnd_cnt;
 u32 snd_cwnd_clamp;
 u32 snd_cwnd_used;
 u32 snd_cwnd_stamp;

  u32 rcv_wnd;
 u32 write_seq;
 u32 pushed_seq;
 u32 lost_out;
 u32 sacked_out;
 u32 fackets_out;
 u32 tso_deferred;
 u32 bytes_acked;


 struct sk_buff* lost_skb_hint;
 struct sk_buff *scoreboard_skb_hint;
 struct sk_buff *retransmit_skb_hint;
 struct sk_buff *forward_skb_hint;

 struct sk_buff_head out_of_order_queue;


 struct tcp_sack_block duplicate_sack[1];
 struct tcp_sack_block selective_acks[4];

 struct tcp_sack_block recv_sack_cache[4];

 struct sk_buff *highest_sack;




 int lost_cnt_hint;
 int retransmit_cnt_hint;

 u32 lost_retrans_low;

 u8 reordering;
 u8 keepalive_probes;
 u32 prior_ssthresh;
 u32 high_seq;

 u32 retrans_stamp;


 u32 undo_marker;
 int undo_retrans;
 u32 total_retrans;

 u32 urg_seq;
 u32 snd_up;

 unsigned int keepalive_time;
 unsigned int keepalive_intvl;

 unsigned long last_synq_overflow;


 struct _rcv_rtt_est {
  template <typename, int = 0> struct __BYPASS_ZN8tcp_sock12_rcv_rtt_estE {};
  template <typename, int> friend struct __BYPASS_ZN8tcp_sock12_rcv_rtt_estE;
  u32 rtt;
  u32 seq;
  u32 time;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} rcv_rtt_est;


 struct _rcvq_space {
  template <typename, int = 0> struct __BYPASS_ZN8tcp_sock11_rcvq_spaceE {};
  template <typename, int> friend struct __BYPASS_ZN8tcp_sock11_rcvq_spaceE;
  int space;
  u32 seq;
  u32 time;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} rcvq_space;


 struct _mtu_probe {
  template <typename, int = 0> struct __BYPASS_ZN8tcp_sock10_mtu_probeE {};
  template <typename, int> friend struct __BYPASS_ZN8tcp_sock10_mtu_probeE;
  u32 probe_seq_start;
  u32 probe_seq_end;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} mtu_probe;



 struct tcp_sock_af_ops *af_specific;


 struct tcp_md5sig_info *md5sig_info;


 int linger2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct tcp_sock *tcp_sk( struct sock *sk)
{
 return (struct tcp_sock *)sk;
}

struct tcp_timewait_sock {
  template <typename, int = 0> struct __BYPASStcp_timewait_sock {};
  template <typename, int> friend struct __BYPASStcp_timewait_sock;
 struct inet_timewait_sock tw_sk;
 u32 tw_rcv_nxt;
 u32 tw_snd_nxt;
 u32 tw_rcv_wnd;
 u32 tw_ts_recent;
 long tw_ts_recent_stamp;

 u16 tw_md5_keylen;
 u8 tw_md5_key[80];


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct tcp_timewait_sock *tcp_twsk( struct sock *sk)
{
 return (struct tcp_timewait_sock *)sk;
}
struct udphdr {
  template <typename, int = 0> struct __BYPASSudphdr {};
  template <typename, int> friend struct __BYPASSudphdr;
 __be16 source;
 __be16 dest;
 __be16 len;
 __sum16 check;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline struct udphdr *udp_hdr( struct sk_buff *skb)
{
 return (struct udphdr *)skb_transport_header(skb);
}



static inline int udp_hashfn(struct net *net, unsigned num)
{
 return (num + net_hash_mix(net)) & (128 - 1);
}

struct udp_sock {
  template <typename, int = 0> struct __BYPASSudp_sock {};
  template <typename, int> friend struct __BYPASSudp_sock;

 struct inet_sock inet;
 int pending;
 unsigned int corkflag;
   __u16 encap_type;




 __u16 len;



 __u16 pcslen;
 __u16 pcrlen;




 __u8 pcflag;
 __u8 unused[3];



 int (*encap_rcv)(struct sock *sk, struct sk_buff *skb);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct udp_sock *udp_sk( struct sock *sk)
{
 return (struct udp_sock *)sk;
}



static inline struct ipv6hdr *ipv6_hdr( struct sk_buff *skb)
{
 return (struct ipv6hdr *)skb_network_header(skb);
}

static inline struct ipv6hdr *ipipv6_hdr( struct sk_buff *skb)
{
 return (struct ipv6hdr *)skb_transport_header(skb);
}






struct inet6_skb_parm {
  template <typename, int = 0> struct __BYPASSinet6_skb_parm {};
  template <typename, int> friend struct __BYPASSinet6_skb_parm;
 int iif;
 __u16 ra;
 __u16 hop;
 __u16 dst0;
 __u16 srcrt;
 __u16 dst1;
 __u16 lastopt;
 __u32 nhoff;
 __u16 flags;

 __u16 dsthao;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};



static inline int inet6_iif( struct sk_buff *skb)
{
 return ((struct inet6_skb_parm*)((skb)->cb))->iif;
}

struct inet6_request_sock {
  template <typename, int = 0> struct __BYPASSinet6_request_sock {};
  template <typename, int> friend struct __BYPASSinet6_request_sock;
 struct in6_addr loc_addr;
 struct in6_addr rmt_addr;
 struct sk_buff *pktopts;
 int iif;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tcp6_request_sock {
  template <typename, int = 0> struct __BYPASStcp6_request_sock {};
  template <typename, int> friend struct __BYPASStcp6_request_sock;
 struct tcp_request_sock tcp6rsk_tcp;
 struct inet6_request_sock tcp6rsk_inet6;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ipv6_mc_socklist;
struct ipv6_ac_socklist;
struct ipv6_fl_socklist;
struct ipv6_pinfo {
  template <typename, int = 0> struct __BYPASSipv6_pinfo {};
  template <typename, int> friend struct __BYPASSipv6_pinfo;
 struct in6_addr saddr;
 struct in6_addr rcv_saddr;
 struct in6_addr daddr;
 struct in6_addr *daddr_cache;

 struct in6_addr *saddr_cache;


 __be32 flow_label;
 __u32 frag_size;
 __u16 __unused_1:7;
 __s16 hop_limit:9;
 __u16 mc_loop:1,
    __unused_2:6;
 __s16 mcast_hops:9;

 int mcast_oif;


 union {
  struct {
   __u16 srcrt:1,
    osrcrt:1,
           rxinfo:1,
           rxoinfo:1,
    rxhlim:1,
    rxohlim:1,
    hopopts:1,
    ohopopts:1,
    dstopts:1,
    odstopts:1,
                                rxflow:1,
    rxtclass:1;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} bits;
  __u16 all;
 } rxopt;


 __u8 recverr:1,
                         sndflow:1,
    pmtudisc:2,
    ipv6only:1,
    srcprefs:3;



 __u8 tclass;

 __u32 dst_cookie;

 struct ipv6_mc_socklist *ipv6_mc_list;
 struct ipv6_ac_socklist *ipv6_ac_list;
 struct ipv6_fl_socklist *ipv6_fl_list;

 struct ipv6_txoptions *opt;
 struct sk_buff *pktoptions;
 struct {
  struct ipv6_txoptions *opt;
  u8 hop_limit;
  u8 tclass;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} cork;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct raw6_sock {
  template <typename, int = 0> struct __BYPASSraw6_sock {};
  template <typename, int> friend struct __BYPASSraw6_sock;

 struct inet_sock inet;
 __u32 checksum;
 __u32 offset;
 struct icmp6_filter filter;

 struct ipv6_pinfo inet6;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct udp6_sock {
  template <typename, int = 0> struct __BYPASSudp6_sock {};
  template <typename, int> friend struct __BYPASSudp6_sock;
 struct udp_sock udp;

 struct ipv6_pinfo inet6;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tcp6_sock {
  template <typename, int = 0> struct __BYPASStcp6_sock {};
  template <typename, int> friend struct __BYPASStcp6_sock;
 struct tcp_sock tcp;

 struct ipv6_pinfo inet6;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int inet6_sk_rebuild_header(struct sock *sk);



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock6pinet6E_1709_0 {
  typedef TJP__ZN9inet_sock6pinet6E_1709_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline ipv6_pinfo * __get__ZN9inet_sock6pinet6E_1709(ipv6_pinfo * *source) {
  ::ipv6_pinfo *__result_buffer;
  typedef TJP__ZN9inet_sock6pinet6E_1709_0< ::ipv6_pinfo *, ::inet_sock , ::ipv6_pinfo * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::ipv6_pinfo *&)__result_buffer;
}
static inline struct ipv6_pinfo * inet6_sk( struct sock *__sk)
{
 return __get__ZN9inet_sock6pinet6E_1709(&inet_sk(__sk)->pinet6);
}

static inline struct inet6_request_sock *
   inet6_rsk( struct request_sock *rsk)
{
 return (struct inet6_request_sock *)(((u8 *)rsk) +
          inet_rsk(rsk)->inet6_rsk_offset);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16request_sock_ops8obj_sizeE_1711_0 {
  typedef TJP__ZN16request_sock_ops8obj_sizeE_1711_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN16request_sock_ops8obj_sizeE_1711(int *source) {
  int __result_buffer;
  typedef TJP__ZN16request_sock_ops8obj_sizeE_1711_0< int , ::request_sock_ops , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock7rsk_opsE_1712_0 {
  typedef TJP__ZN12request_sock7rsk_opsE_1712_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock_ops * __get__ZN12request_sock7rsk_opsE_1712(request_sock_ops * *source) {
  ::request_sock_ops *__result_buffer;
  typedef TJP__ZN12request_sock7rsk_opsE_1712_0< ::request_sock_ops *, ::request_sock , ::request_sock_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock_ops *&)__result_buffer;
}
static inline u32 inet6_rsk_offset(struct request_sock *rsk)
{
 return __get__ZN16request_sock_ops8obj_sizeE_1711(&__get__ZN12request_sock7rsk_opsE_1712(&rsk->rsk_ops)->obj_size) - sizeof(struct inet6_request_sock);
}

static inline struct request_sock *inet6_reqsk_alloc(struct request_sock_ops *ops)
{
 struct request_sock *req = reqsk_alloc(ops);

 if (req != 0) {
  inet_rsk(req)->inet6_rsk_offset = inet6_rsk_offset(req);
  inet6_rsk(req)->pktopts = 0;
 }

 return req;
}

static inline struct raw6_sock *raw6_sk( struct sock *sk)
{
 return (struct raw6_sock *)sk;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1714_0 {
  typedef TJP__ZN4sock11__sk_commonE_1714_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1714(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1714_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline void inet_sk_copy_descendant(struct sock *sk_to,
        struct sock *sk_from)
{
 int ancestor_size = sizeof(struct inet_sock);

 if (__get__ZN4sock11__sk_commonE_1714(&sk_from->__sk_common).skc_family == 10)
  ancestor_size += sizeof(struct ipv6_pinfo);

 __inet_sk_copy_descendant(sk_to, sk_from, ancestor_size);
}




struct inet6_timewait_sock {
  template <typename, int = 0> struct __BYPASSinet6_timewait_sock {};
  template <typename, int> friend struct __BYPASSinet6_timewait_sock;
 struct in6_addr tw_v6_daddr;
 struct in6_addr tw_v6_rcv_saddr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tcp6_timewait_sock {
  template <typename, int = 0> struct __BYPASStcp6_timewait_sock {};
  template <typename, int> friend struct __BYPASStcp6_timewait_sock;
 struct tcp_timewait_sock tcp6tw_tcp;
 struct inet6_timewait_sock tcp6tw_inet6;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline u16 inet6_tw_offset( struct proto *prot)
{
 return prot->twsk_prot->twsk_obj_size -
   sizeof(struct inet6_timewait_sock);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18inet_timewait_sock14tw_ipv6_offsetE_1717_0 {
  typedef TJP__ZN18inet_timewait_sock14tw_ipv6_offsetE_1717_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN18inet_timewait_sock14tw_ipv6_offsetE_1717(unsigned short int *source) {
  ::__u16 __result_buffer;
  typedef TJP__ZN18inet_timewait_sock14tw_ipv6_offsetE_1717_0< ::__u16 , ::inet_timewait_sock , ::__u16  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u16 &)__result_buffer;
}
static inline struct inet6_timewait_sock *inet6_twsk( struct sock *sk)
{
 return (struct inet6_timewait_sock *)(((u8 *)sk) +
           __get__ZN18inet_timewait_sock14tw_ipv6_offsetE_1717(&inet_twsk(sk)->tw_ipv6_offset));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1719_0 {
  typedef TJP__ZN4sock11__sk_commonE_1719_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1719(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1719_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline struct in6_addr *__inet6_rcv_saddr( struct sock *sk)
{
 return __builtin_expect(!!(__get__ZN4sock11__sk_commonE_1719(&sk->__sk_common).skc_state != TCP_TIME_WAIT), 1) ?
  &inet6_sk(sk)->rcv_saddr : &inet6_twsk(sk)->tw_v6_rcv_saddr;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1722_0 {
  typedef TJP__ZN4sock11__sk_commonE_1722_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1722(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1722_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline struct in6_addr *inet6_rcv_saddr( struct sock *sk)
{
 return __get__ZN4sock11__sk_commonE_1722(&sk->__sk_common).skc_family == 10 ? __inet6_rcv_saddr(sk) : 0;
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_1724_0 {
  typedef TJP__ZN4sock11__sk_commonE_1724_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_1724(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_1724_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static __inline__ void inet_reset_saddr(struct sock *sk)
{
 inet_sk(sk)->rcv_saddr = inet_sk(sk)->saddr = 0;

 if (__get__ZN4sock11__sk_commonE_1724(&sk->__sk_common).skc_family == 10) {
  struct ipv6_pinfo *np = inet6_sk(sk);

  memset(&np->saddr, 0, sizeof(np->saddr));
  memset(&np->rcv_saddr, 0, sizeof(np->rcv_saddr));
 }

}



extern int ip_call_ra_chain(struct sk_buff *skb);





enum ip_defrag_users
{
 IP_DEFRAG_LOCAL_DELIVER,
 IP_DEFRAG_CALL_RA_CHAIN,
 IP_DEFRAG_CONNTRACK_IN,
 IP_DEFRAG_CONNTRACK_OUT,
 IP_DEFRAG_VS_IN,
 IP_DEFRAG_VS_OUT,
 IP_DEFRAG_VS_FWD
};

int ip_defrag(struct sk_buff *skb, u32 user);
int ip_frag_mem(struct net *net);
int ip_frag_nqueues(struct net *net);





extern int ip_forward(struct sk_buff *skb);





extern void ip_options_build(struct sk_buff *skb, struct ip_options *opt, __be32 daddr, struct rtable *rt, int is_frag);
extern int ip_options_echo(struct ip_options *dopt, struct sk_buff *skb);
extern void ip_options_fragment(struct sk_buff *skb);
extern int ip_options_compile(struct net *net,
         struct ip_options *opt, struct sk_buff *skb);
extern int ip_options_get(struct net *net, struct ip_options **optp,
     unsigned char *data, int optlen);
extern int ip_options_get_from_user(struct net *net, struct ip_options **optp,
        unsigned char *data, int optlen);
extern void ip_options_undo(struct ip_options * opt);
extern void ip_forward_options(struct sk_buff *skb);
extern int ip_options_rcv_srr(struct sk_buff *skb);





extern void ip_cmsg_recv(struct msghdr *msg, struct sk_buff *skb);
extern int ip_cmsg_send(struct net *net,
        struct msghdr *msg, struct ipcm_cookie *ipc);
extern int ip_setsockopt(struct sock *sk, int level, int optname, char *optval, int optlen);
extern int ip_getsockopt(struct sock *sk, int level, int optname, char *optval, int *optlen);
extern int compat_ip_setsockopt(struct sock *sk, int level,
   int optname, char *optval, int optlen);
extern int compat_ip_getsockopt(struct sock *sk, int level,
   int optname, char *optval, int *optlen);
extern int ip_ra_control(struct sock *sk, unsigned char on, void (*destructor)(struct sock *));

extern int ip_recv_error(struct sock *sk, struct msghdr *msg, int len);
extern void ip_icmp_error(struct sock *sk, struct sk_buff *skb, int err,
         __be16 port, u32 info, u8 *payload);
extern void ip_local_error(struct sock *sk, int err, __be32 daddr, __be16 dport,
          u32 info);




int ipv4_doint_and_flush(ctl_table *ctl, int write,
    struct file* filp, void *buffer,
    size_t *lenp, loff_t *ppos);
int ipv4_doint_and_flush_strategy(ctl_table *table, int *name, int nlen,
      void *oldval, size_t *oldlenp,
      void *newval, size_t newlen);

extern int ip_misc_proc_init(void);
struct net_protocol {
  template <typename, int = 0> struct __BYPASSnet_protocol {};
  template <typename, int> friend struct __BYPASSnet_protocol;
 int (*handler)(struct sk_buff *skb);
 void (*err_handler)(struct sk_buff *skb, u32 info);
 int (*gso_send_check)(struct sk_buff *skb);
 struct sk_buff *(*gso_segment)(struct sk_buff *skb,
            int features);
 unsigned int no_policy:1,
    netns_ok:1;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct inet6_protocol
{
  template <typename, int = 0> struct __BYPASSinet6_protocol {};
  template <typename, int> friend struct __BYPASSinet6_protocol;
 int (*handler)(struct sk_buff *skb);

 void (*err_handler)(struct sk_buff *skb,
          struct inet6_skb_parm *opt,
          int type, int code, int offset,
          __be32 info);

 int (*gso_send_check)(struct sk_buff *skb);
 struct sk_buff *(*gso_segment)(struct sk_buff *skb,
           int features);

 unsigned int flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct inet_protosw {
  template <typename, int = 0> struct __BYPASSinet_protosw {};
  template <typename, int> friend struct __BYPASSinet_protosw;
 struct list_head list;


 unsigned short type;
 unsigned short protocol;

 struct proto *prot;
 struct proto_ops *ops;

 int capability;



 char no_check;
 unsigned char flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern struct net_protocol *inet_protocol_base;
extern struct net_protocol *inet_protos[256];


extern struct inet6_protocol *inet6_protos[256];


extern int inet_add_protocol(struct net_protocol *prot, unsigned char num);
extern int inet_del_protocol(struct net_protocol *prot, unsigned char num);
extern void inet_register_protosw(struct inet_protosw *p);
extern void inet_unregister_protosw(struct inet_protosw *p);


extern int inet6_add_protocol(struct inet6_protocol *prot, unsigned char num);
extern int inet6_del_protocol(struct inet6_protocol *prot, unsigned char num);
extern int inet6_register_protosw(struct inet_protosw *p);
extern void inet6_unregister_protosw(struct inet_protosw *p);










int _set_memory_uc(unsigned long addr, int numpages);
int _set_memory_wc(unsigned long addr, int numpages);
int _set_memory_wb(unsigned long addr, int numpages);
int set_memory_uc(unsigned long addr, int numpages);
int set_memory_wc(unsigned long addr, int numpages);
int set_memory_wb(unsigned long addr, int numpages);
int set_memory_x(unsigned long addr, int numpages);
int set_memory_nx(unsigned long addr, int numpages);
int set_memory_ro(unsigned long addr, int numpages);
int set_memory_rw(unsigned long addr, int numpages);
int set_memory_np(unsigned long addr, int numpages);
int set_memory_4k(unsigned long addr, int numpages);
int set_pages_uc(struct page *page, int numpages);
int set_pages_wb(struct page *page, int numpages);
int set_pages_x(struct page *page, int numpages);
int set_pages_nx(struct page *page, int numpages);
int set_pages_ro(struct page *page, int numpages);
int set_pages_rw(struct page *page, int numpages);


void clflush_cache_range(void *addr, unsigned int size);

void cpa_init(void);


void mark_rodata_ro(void);
extern int rodata_test_data;





static inline int rodata_test(void)
{
 return 0;
}








struct net;
struct completion;
struct mm_struct;
enum {
 PROC_ROOT_INO = 1,
};
typedef int (read_proc_t)(char *page, char **start, off_t off,
     int count, int *eof, void *data);
typedef int (write_proc_t)(struct file *file, char *buffer,
      unsigned long count, void *data);

struct proc_dir_entry {
  template <typename, int = 0> struct __BYPASSproc_dir_entry {};
  template <typename, int> friend struct __BYPASSproc_dir_entry;
 unsigned int low_ino;
 unsigned short namelen;
 char *name;
 mode_t mode;
 nlink_t nlink;
 uid_t uid;
 gid_t gid;
 loff_t size;
 struct inode_operations *proc_iops;
 struct file_operations *proc_fops;
 struct module *owner;
 struct proc_dir_entry *next, *parent, *subdir;
 void *data;
 read_proc_t *read_proc;
 write_proc_t *write_proc;
 atomic_t count;
 int pde_users;
 spinlock_t pde_unload_lock;
 struct completion *pde_unload_completion;
 struct list_head pde_openers;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kcore_list {
  template <typename, int = 0> struct __BYPASSkcore_list {};
  template <typename, int> friend struct __BYPASSkcore_list;
 struct kcore_list *next;
 unsigned long addr;
 size_t size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct vmcore {
  template <typename, int = 0> struct __BYPASSvmcore {};
  template <typename, int> friend struct __BYPASSvmcore;
 struct list_head list;
 unsigned long long paddr;
 unsigned long long size;
 loff_t offset;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



extern struct proc_dir_entry *proc_root_kcore;

extern spinlock_t proc_subdir_lock;

extern void proc_root_init(void);
extern void proc_misc_init(void);

void proc_flush_task(struct task_struct *task);
struct dentry *proc_pid_lookup(struct inode *dir, struct dentry * dentry, struct nameidata *);
int proc_pid_readdir(struct file * filp, void * dirent, filldir_t filldir);
unsigned long task_vsize(struct mm_struct *);
int task_statm(struct mm_struct *, int *, int *, int *, int *);
void task_mem(struct seq_file *, struct mm_struct *);
void clear_refs_smap(struct mm_struct *mm);

struct proc_dir_entry *de_get(struct proc_dir_entry *de);
void de_put(struct proc_dir_entry *de);

extern struct proc_dir_entry *create_proc_entry( char *name, mode_t mode,
      struct proc_dir_entry *parent);
struct proc_dir_entry *proc_create_data( char *name, mode_t mode,
    struct proc_dir_entry *parent,
    struct file_operations *proc_fops,
    void *data);
extern void remove_proc_entry( char *name, struct proc_dir_entry *parent);

extern struct vfsmount *proc_mnt;
struct pid_namespace;
extern int proc_fill_super(struct super_block *);
extern struct inode *proc_get_inode(struct super_block *, unsigned int, struct proc_dir_entry *);
extern int proc_readdir(struct file *, void *, filldir_t);
extern struct dentry *proc_lookup(struct inode *, struct dentry *, struct nameidata *);

extern struct file_operations proc_kcore_operations;
extern struct file_operations ppc_htab_operations;

extern int pid_ns_prepare_proc(struct pid_namespace *ns);
extern void pid_ns_release_proc(struct pid_namespace *ns);




struct tty_driver;
extern void proc_tty_init(void);
extern void proc_tty_register_driver(struct tty_driver *driver);
extern void proc_tty_unregister_driver(struct tty_driver *driver);
extern struct proc_dir_entry *proc_symlink( char *,
  struct proc_dir_entry *, char *);
extern struct proc_dir_entry *proc_mkdir( char *,struct proc_dir_entry *);
extern struct proc_dir_entry *proc_mkdir_mode( char *name, mode_t mode,
   struct proc_dir_entry *parent);

static inline struct proc_dir_entry *proc_create( char *name, mode_t mode,
 struct proc_dir_entry *parent, struct file_operations *proc_fops)
{
 return proc_create_data(name, mode, parent, proc_fops, 0);
}

static inline struct proc_dir_entry *create_proc_read_entry( char *name,
 mode_t mode, struct proc_dir_entry *base,
 read_proc_t *read_proc, void * data)
{
 struct proc_dir_entry *res=create_proc_entry(name,mode,base);
 if (res) {
  res->read_proc=read_proc;
  res->data=data;
 }
 return res;
}

extern struct proc_dir_entry *proc_net_fops_create(struct net *net,
 char *name, mode_t mode, struct file_operations *fops);
extern void proc_net_remove(struct net *net, char *name);
extern struct proc_dir_entry *proc_net_mkdir(struct net *net, char *name,
 struct proc_dir_entry *parent);



extern void set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern struct file *get_mm_exe_file(struct mm_struct *mm);
extern void dup_mm_exe_file(struct mm_struct *oldmm, struct mm_struct *newmm);
extern void kclist_add(struct kcore_list *, void *, size_t);


union proc_op {
 int (*proc_get_link)(struct inode *, struct path *);
 int (*proc_read)(struct task_struct *task, char *page);
 int (*proc_show)(struct seq_file *m,
  struct pid_namespace *ns, struct pid *pid,
  struct task_struct *task);
};

struct ctl_table_header;
struct ctl_table;

struct proc_inode {
  template <typename, int = 0> struct __BYPASSproc_inode {};
  template <typename, int> friend struct __BYPASSproc_inode;
 struct pid *pid;
 int fd;
 union proc_op op;
 struct proc_dir_entry *pde;
 struct ctl_table_header *sysctl;
 struct ctl_table *sysctl_entry;
 struct inode vfs_inode;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct proc_inode *PROC_I( struct inode *inode)
{
 return ({ typeof( ((struct proc_inode *)0)->vfs_inode ) *__mptr = (inode); (struct proc_inode *)( (char *)__mptr - ((size_t) &((struct proc_inode *)0)->vfs_inode) );});
}

static inline struct proc_dir_entry *PDE( struct inode *inode)
{
 return PROC_I(inode)->pde;
}

static inline struct net *PDE_NET(struct proc_dir_entry *pde)
{
 return pde->parent->data;
}

struct proc_maps_private {
  template <typename, int = 0> struct __BYPASSproc_maps_private {};
  template <typename, int> friend struct __BYPASSproc_maps_private;
 struct pid *pid;
 struct task_struct *task;

 struct vm_area_struct *tail_vma;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};










extern struct proto_ops inet_stream_ops;
extern struct proto_ops inet_dgram_ops;





struct msghdr;
struct sock;
struct sockaddr;
struct socket;

extern int inet_release(struct socket *sock);
extern int inet_stream_connect(struct socket *sock,
          struct sockaddr * uaddr,
          int addr_len, int flags);
extern int inet_dgram_connect(struct socket *sock,
         struct sockaddr * uaddr,
         int addr_len, int flags);
extern int inet_accept(struct socket *sock,
         struct socket *newsock, int flags);
extern int inet_sendmsg(struct kiocb *iocb,
          struct socket *sock,
          struct msghdr *msg,
          size_t size);
extern int inet_shutdown(struct socket *sock, int how);
extern int inet_listen(struct socket *sock, int backlog);

extern void inet_sock_destruct(struct sock *sk);

extern int inet_bind(struct socket *sock,
       struct sockaddr *uaddr, int addr_len);
extern int inet_getname(struct socket *sock,
          struct sockaddr *uaddr,
          int *uaddr_len, int peer);
extern int inet_ioctl(struct socket *sock,
        unsigned int cmd, unsigned long arg);

extern int inet_ctl_sock_create(struct sock **sk,
           unsigned short family,
           unsigned short type,
           unsigned char protocol,
           struct net *net);

static inline void inet_ctl_sock_destroy(struct sock *sk)
{
 sk_release_kernel(sk);
}
struct packet_mclist
{
  template <typename, int = 0> struct __BYPASSpacket_mclist {};
  template <typename, int> friend struct __BYPASSpacket_mclist;
 struct packet_mclist *next;
 int ifindex;
 int count;
 unsigned short type;
 unsigned short alen;
 unsigned char addr[32];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct packet_mreq_max
{
  template <typename, int = 0> struct __BYPASSpacket_mreq_max {};
  template <typename, int> friend struct __BYPASSpacket_mreq_max;
 int mr_ifindex;
 unsigned short mr_type;
 unsigned short mr_alen;
 unsigned char mr_address[32];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


static int packet_set_ring(struct sock *sk, struct tpacket_req *req, int closing);


static void packet_flush_mclist(struct sock *sk);

struct packet_sock {
  template <typename, int = 0> struct __BYPASSpacket_sock {};
  template <typename, int> friend struct __BYPASSpacket_sock;

 struct sock sk;
 struct tpacket_stats stats;

 char * *pg_vec;
 unsigned int head;
 unsigned int frames_per_block;
 unsigned int frame_size;
 unsigned int frame_max;
 int copy_thresh;

 struct packet_type prot_hook;
 spinlock_t bind_lock;
 struct mutex pg_vec_lock;

    struct _flags {
  template <typename, int = 0> struct __BYPASS_ZN11packet_sock6_flagsE {};
  template <typename, int> friend struct __BYPASS_ZN11packet_sock6_flagsE;

 unsigned int running:1,
    auxdata:1,
    origdev:1;

    
  friend class ::Introspect;
  friend class ::MyIntrospect;
} flags;




 int ifindex;
 __be16 num;
 struct packet_mclist *mclist;

 atomic_t mapped;
 unsigned int pg_vec_order;
 unsigned int pg_vec_pages;
 unsigned int pg_vec_len;
 enum tpacket_versions tp_version;
 unsigned int tp_hdrlen;
 unsigned int tp_reserve;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct packet_skb_cb {
  template <typename, int = 0> struct __BYPASSpacket_skb_cb {};
  template <typename, int> friend struct __BYPASSpacket_skb_cb;
 unsigned int origlen;
 union {
  struct sockaddr_pkt pkt;
  struct sockaddr_ll ll;
 } sa;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline struct packet_sock *pkt_sk(struct sock *sk)
{
 return (struct packet_sock *)sk;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_1728_0 {
  typedef TJP__ZN10hlist_head5firstE_1728_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_1728(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_1728_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_1729_0 {
  typedef TJP__ZN10hlist_node4nextE_1729_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_1729(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_1729_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_1730_0 {
  typedef TJP__ZN10hlist_node4nextE_1730_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_1730(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_1730_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline struct sock *packet_seq_idx(struct net *net, loff_t off)
{
 struct sock *s;
 struct hlist_node *node;

 for (node = __get__ZN10hlist_head5firstE_1728(&(&net->packet.sklist)->first); node && ({ __builtin_prefetch(__get__ZN10hlist_node4nextE_1729(&node->next)); 1;}) && ({ s = ({ typeof( ((typeof(*s) *)0)->__sk_common.skc_node ) *__mptr = (node); (typeof(*s) *)( (char *)__mptr - ((size_t) &((typeof(*s) *)0)->__sk_common.skc_node) );}); 1;}); node = __get__ZN10hlist_node4nextE_1730(&node->next)) {
  if (!off--)
   return s;
 }
 return 0;
}

static void *packet_seq_start(struct seq_file *seq, loff_t *pos)

{
 struct net *net = seq_file_net(seq);
 ;
 return *pos ? packet_seq_idx(net, *pos - 1) : ((void *)1);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net6packetE_1732_0 {
  typedef TJP__ZN3net6packetE_1732_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_packet __get__ZN3net6packetE_1732(netns_packet *source) {
  AC::ResultBuffer< ::netns_packet  > __result_buffer;
  typedef TJP__ZN3net6packetE_1732_0< ::netns_packet , ::net , ::netns_packet  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_packet &)__result_buffer;
}
static void *packet_seq_next(struct seq_file *seq, void *v, loff_t *pos)
{
 struct net *net = seq_file_net(seq);
 ++*pos;
 return (v == ((void *)1))
                ? sk_head(&(__get__ZN3net6packetE_1732(&net->packet).sklist))
  : sk_next((struct sock*)v) ;
}

static void packet_seq_stop(struct seq_file *seq, void *v)

{
 struct net *net = seq_file_net(seq);
 ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_1733_0 {
  typedef TJP__ZN7_atomic7counterE_1733_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_1733(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_1733_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_typeE_1734_0 {
  typedef TJP__ZN4sock7sk_typeE_1734_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN4sock7sk_typeE_1734(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN4sock7sk_typeE_1734_0< unsigned short int , ::sock , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11packet_sock3numE_1735_0 {
  typedef TJP__ZN11packet_sock3numE_1735_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN11packet_sock3numE_1735(unsigned short int *source) {
  ::__be16 __result_buffer;
  typedef TJP__ZN11packet_sock3numE_1735_0< ::__be16 , ::packet_sock , ::__be16  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__be16 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11packet_sock7ifindexE_1736_0 {
  typedef TJP__ZN11packet_sock7ifindexE_1736_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11packet_sock7ifindexE_1736(int *source) {
  int __result_buffer;
  typedef TJP__ZN11packet_sock7ifindexE_1736_0< int , ::packet_sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11packet_sock5flagsE_1738_0 {
  typedef TJP__ZN11packet_sock5flagsE_1738_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline packet_sock::_flags __get__ZN11packet_sock5flagsE_1738(packet_sock::_flags *source) {
  AC::ResultBuffer< ::packet_sock::_flags  > __result_buffer;
  typedef TJP__ZN11packet_sock5flagsE_1738_0< ::packet_sock::_flags , ::packet_sock , ::packet_sock::_flags  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::packet_sock::_flags &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_1739_0 {
  typedef TJP__ZN7_atomic7counterE_1739_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_1739(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_1739_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static int packet_seq_show(struct seq_file *seq, void *v)
{
 if (v == ((void *)1))
  seq_puts(seq, "sk       RefCnt Type Proto  Iface R Rmem   User   Inode\n");
 else {
  struct sock *s = v;
  struct packet_sock *po = pkt_sk(s);

  seq_printf(seq,
      "%p %-6d %-4d %04x   %-5d %1d %-6u %-6u %-6lu\n",
      s,
      (__get__ZN7_atomic7counterE_1733(&(&s->__sk_common.skc_refcnt)->counter)),
      __get__ZN4sock7sk_typeE_1734(&s->sk_type),
      __fswab16(( __u16)(__be16)(__get__ZN11packet_sock3numE_1735(&po->num))),
      __get__ZN11packet_sock7ifindexE_1736(&po->ifindex),
      __get__ZN11packet_sock5flagsE_1738(&po->flags).running,
      (__get__ZN7_atomic7counterE_1739(&(&s->sk_rmem_alloc)->counter)),
      sock_i_uid(s),
      sock_i_ino(s) );
 }

 return 0;
}
struct seq_operations packet_seq_ops = {
    packet_seq_start,
    packet_seq_stop,
    packet_seq_next,
    packet_seq_show,
};

#ifdef __ac_FIRST_FILE__usr_local_etc_transcallX453_5_1_libos_2_6_27_net_packet_af_packet_cxx__
#ifdef __ac_need__usr_local_etc_transcallX453_5_1_libos_2_6_27_MyIntrospect_ah__
#ifndef __ac_have__usr_local_etc_transcallX453_5_1_libos_2_6_27_MyIntrospect_ah__
#define __ac_have__usr_local_etc_transcallX453_5_1_libos_2_6_27_MyIntrospect_ah__
#include "addr.h"

class Introspect {public:
  template <typename, int = 0> struct __BYPASSIntrospect {};
  template <typename, int> friend struct __BYPASSIntrospect;
private:
    

    
public: template <typename JoinPoint> void __a0_around (JoinPoint *tjp) {
  typedef typename JoinPoint::That __JP_That;
  typedef typename JoinPoint::Target __JP_Target;
  typedef typename JoinPoint::Result __JP_Result;

        void *addr, *obj;
        bool is_array = tjp->is_array();
        int dim;
        unsigned long size;
        
        if (is_array && !tjp->with_index()) {
            dim = tjp->dimension();

            if (dim > 0) {
                // base[dim]
                size = tjp->base_size() * dim;
            }
            else {
                // base[]
                size = 4096; // XXX
            }
        }
        else {
            // primitive type, struct, and union
            size = sizeof(__JP_Result);
        }

        addr = g_map(tjp->source(), size);
        obj = is_array ? &addr : addr;

        // assume the pointer of a primitive type as an array
        // excect when it is used with an index
        if (tjp->is_pointer() && !tjp->with_index() &&
            !tjp->is_base_record()) {
            void *ptr = *(void **)obj;

            addr = g_map(ptr, 2048); // XXX
            obj = &addr;
        }

        *tjp->result() = *(__JP_Result *)obj;
    }
private:

};
class MyIntrospect : public Introspect {public:
  template <typename, int = 0> struct __BYPASSMyIntrospect {};
  template <typename, int> friend struct __BYPASSMyIntrospect;
private:
    


public:
  static MyIntrospect *aspectof () {
    static MyIntrospect __instance;
    return &__instance;
  }
  static MyIntrospect *aspectOf () {
    return aspectof ();
  }
private:
};
namespace AC {
  template <class JoinPoint>
  __attribute((always_inline)) inline void invoke_MyIntrospect_Introspect__a0_around (JoinPoint *tjp) {
    ((::Introspect*)::MyIntrospect::aspectof())->__a0_around (tjp);
  }
} 

#endif
#endif
#undef __ac_FIRST__usr_local_etc_transcallX453_5_1_libos_2_6_27__
#undef __ac_FIRST_FILE__usr_local_etc_transcallX453_5_1_libos_2_6_27_net_packet_af_packet_cxx__
#endif // __ac_FIRST_FILE__usr_local_etc_transcallX453_5_1_libos_2_6_27_net_packet_af_packet_cxx__
