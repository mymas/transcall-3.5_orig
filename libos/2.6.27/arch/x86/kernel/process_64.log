arch/x86/kernel/process_64.acc: In function ‘void hlist_del(hlist_node*)’:
arch/x86/kernel/process_64.acc:8106:10: warning: invalid conversion from ‘void*’ to ‘hlist_node*’ [-fpermissive]
  n->next = ((void *) 0x00100100);
          ^
arch/x86/kernel/process_64.acc:8107:11: warning: invalid conversion from ‘void*’ to ‘hlist_node**’ [-fpermissive]
  n->pprev = ((void *) 0x00200200);
           ^
arch/x86/kernel/process_64.acc: In function ‘thread_info* current_thread_info()’:
arch/x86/kernel/process_64.acc:8841:5: warning: invalid conversion from ‘void*’ to ‘thread_info*’ [-fpermissive]
  ti = (void *)(({ typeof(_proxy_pda.kernelstack) ret__; switch (sizeof(_proxy_pda.kernelstack)) { case 2: asm("mov" "w %%gs:%c1,%0" : "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->kernelstack)), "m" (__get__proxy_pda_478(&_proxy_pda).kernelstack)); break; case 4: asm("mov" "l %%gs:%c1,%0": "=r" (ret__): "i" (((size_t) &((struct x8664_pda *)0)->kernelstack)), "m" (__get__proxy_pda_479(&_proxy_pda).kernelstack)); break; case 8: asm("mov" "q %%gs:%c1,%0": "=r" (ret__) : "i" (((size_t) &((struct x8664_pda *)0)->kernelstack)), "m" (__get__proxy_pda_480(&_proxy_pda).kernelstack)); break; default: __bad_pda_field(); } ret__; }) + (5*8) - (((1UL) << 12) << 1));
     ^
arch/x86/kernel/process_64.acc: In function ‘void timer_stats_account_hrtimer(hrtimer*)’:
arch/x86/kernel/process_64.acc:14378:43: warning: invalid conversion from ‘hrtimer_restart (*)(hrtimer*)’ to ‘void*’ [-fpermissive]
      timer->function, timer->start_comm, 0);
                                           ^
arch/x86/kernel/process_64.acc:14371:13: warning:   initializing argument 4 of ‘void timer_stats_update_stats(void*, pid_t, void*, void*, char*, unsigned int)’ [-fpermissive]
 extern void timer_stats_update_stats(void *timer, pid_t pid, void *startf,
             ^
arch/x86/kernel/process_64.acc: In function ‘int timer_pending(timer_list*)’:
arch/x86/kernel/process_64.acc:14520:88: warning: taking address of temporary [-fpermissive]
  return __get__ZN9list_head4nextE_704(&__get__ZN10timer_list5entryE_705(&timer->entry).next) != 0;
                                                                                        ^
arch/x86/kernel/process_64.acc: In function ‘pid_namespace* ns_of_pid(pid*)’:
arch/x86/kernel/process_64.acc:17742:113: warning: taking address of temporary [-fpermissive]
   ns = __get__ZN4upid2nsE_782(&__get__ZN3pid7numbersE_783(&pid->numbers[__get__ZN3pid5levelE_784(&pid->level)]).ns);
                                                                                                                 ^
arch/x86/kernel/process_64.acc: In function ‘pid_t pid_nr(pid*)’:
arch/x86/kernel/process_64.acc:17819:77: warning: taking address of temporary [-fpermissive]
   nr = __get__ZN4upid2nrE_785(&__get__ZN3pid7numbersE_786(&pid->numbers[0]).nr);
                                                                             ^
arch/x86/kernel/process_64.acc: In function ‘task_struct* next_thread(task_struct*)’:
arch/x86/kernel/process_64.acc:21485:165: warning: taking address of temporary [-fpermissive]
  return ({ typeof( ((struct task_struct *)0)->thread_group ) *__mptr = ((__get__ZN9list_head4nextE_829(&__get__ZN11task_struct12thread_groupE_830(&p->thread_group).next))); (struct task_struct *)( (char *)__mptr - ((size_t) &((struct task_struct *)0)->thread_group) );})
                                                                                                                                                                     ^
arch/x86/kernel/process_64.acc: In function ‘void list_del_rcu(list_head*)’:
arch/x86/kernel/process_64.acc:22323:14: warning: invalid conversion from ‘void*’ to ‘list_head*’ [-fpermissive]
  entry->prev = ((void *) 0x00200200);
              ^
arch/x86/kernel/process_64.acc: In function ‘void list_replace_rcu(list_head*, list_head*)’:
arch/x86/kernel/process_64.acc:22409:12: warning: invalid conversion from ‘void*’ to ‘list_head*’ [-fpermissive]
  old->prev = ((void *) 0x00200200);
            ^
arch/x86/kernel/process_64.acc: In function ‘void hlist_del_rcu(hlist_node*)’:
arch/x86/kernel/process_64.acc:22539:11: warning: invalid conversion from ‘void*’ to ‘hlist_node**’ [-fpermissive]
  n->pprev = ((void *) 0x00200200);
           ^
arch/x86/kernel/process_64.acc: In function ‘void hlist_replace_rcu(hlist_node*, hlist_node*)’:
arch/x86/kernel/process_64.acc:22621:13: warning: invalid conversion from ‘void*’ to ‘hlist_node**’ [-fpermissive]
  old->pprev = ((void *) 0x00200200);
             ^
arch/x86/kernel/process_64.acc: In function ‘int dname_external(dentry*)’:
arch/x86/kernel/process_64.acc:23084:81: warning: taking address of temporary [-fpermissive]
  return __get__ZN4qstr4nameE_857(&__get__ZN6dentry6d_nameE_858(&dentry->d_name).name) != __get__ZN6dentry7d_inameE_859(dentry->d_iname);
                                                                                 ^
arch/x86/kernel/process_64.acc: In function ‘void simple_transaction_set(file*, size_t)’:
arch/x86/kernel/process_64.acc:26302:48: warning: invalid conversion from ‘void*’ to ‘simple_transaction_argresp*’ [-fpermissive]
  struct simple_transaction_argresp *ar = file->private_data;
                                                ^
arch/x86/kernel/process_64.acc: In function ‘void set_compound_page_dtor(page*, void (*)(page*))’:
arch/x86/kernel/process_64.acc:27146:19: warning: invalid conversion from ‘void*’ to ‘list_head*’ [-fpermissive]
  page[1].lru.next = (void *)dtor;
                   ^
arch/x86/kernel/process_64.acc: In function ‘void set_compound_order(page*, long unsigned int)’:
arch/x86/kernel/process_64.acc:27233:19: warning: invalid conversion from ‘void*’ to ‘list_head*’ [-fpermissive]
  page[1].lru.prev = (void *)order;
                   ^
arch/x86/kernel/process_64.acc: In function ‘zone_type page_zonenum(page*)’:
arch/x86/kernel/process_64.acc:27237:83: warning: invalid conversion from ‘long unsigned int’ to ‘zone_type’ [-fpermissive]
  return (page->flags >> (((((sizeof(unsigned long)*8) - 0) - 9) - 2) * (2 != 0))) & ((1UL << 2) - 1);
                                                                                   ^
arch/x86/kernel/process_64.acc: In function ‘void zone_page_state_add(long int, zone*, zone_stat_item)’:
arch/x86/kernel/process_64.acc:27412:55: warning: taking address of temporary [-fpermissive]
  atomic_long_add(x, &__get_vm_stat_1069(&vm_stat[item]));
                                                       ^
arch/x86/kernel/process_64.acc: In function ‘long unsigned int global_page_state(zone_stat_item)’:
arch/x86/kernel/process_64.acc:27452:62: warning: taking address of temporary [-fpermissive]
  long x = atomic_long_read(&__get_vm_stat_1070(&vm_stat[item]));
                                                              ^
arch/x86/kernel/process_64.acc: In function ‘void elf_core_copy_regs(elf_greg_t (*)[27], pt_regs*)’:
arch/x86/kernel/process_64.acc:29531:1411: warning: taking address of temporary [-fpermissive]
  do { unsigned v; ((*elfregs))[0] = __get__ZN7pt_regs3r15E_1100(&(regs)->r15); ((*elfregs))[1] = __get__ZN7pt_regs3r14E_1101(&(regs)->r14); ((*elfregs))[2] = __get__ZN7pt_regs3r13E_1102(&(regs)->r13); ((*elfregs))[3] = __get__ZN7pt_regs3r12E_1103(&(regs)->r12); ((*elfregs))[4] = __get__ZN7pt_regs2bpE_1104(&(regs)->bp); ((*elfregs))[5] = __get__ZN7pt_regs2bxE_1105(&(regs)->bx); ((*elfregs))[6] = __get__ZN7pt_regs3r11E_1106(&(regs)->r11); ((*elfregs))[7] = __get__ZN7pt_regs3r10E_1107(&(regs)->r10); ((*elfregs))[8] = __get__ZN7pt_regs2r9E_1108(&(regs)->r9); ((*elfregs))[9] = __get__ZN7pt_regs2r8E_1109(&(regs)->r8); ((*elfregs))[10] = __get__ZN7pt_regs2axE_1110(&(regs)->ax); ((*elfregs))[11] = __get__ZN7pt_regs2cxE_1111(&(regs)->cx); ((*elfregs))[12] = __get__ZN7pt_regs2dxE_1112(&(regs)->dx); ((*elfregs))[13] = __get__ZN7pt_regs2siE_1113(&(regs)->si); ((*elfregs))[14] = __get__ZN7pt_regs2diE_1114(&(regs)->di); ((*elfregs))[15] = __get__ZN7pt_regs7orig_axE_1115(&(regs)->orig_ax); ((*elfregs))[16] = __get__ZN7pt_regs2ipE_1116(&(regs)->ip); ((*elfregs))[17] = __get__ZN7pt_regs2csE_1117(&(regs)->cs); ((*elfregs))[18] = __get__ZN7pt_regs5flagsE_1118(&(regs)->flags); ((*elfregs))[19] = __get__ZN7pt_regs2spE_1119(&(regs)->sp); ((*elfregs))[20] = __get__ZN7pt_regs2ssE_1120(&(regs)->ss); ((*elfregs))[21] = __get__ZN13thread_struct2fsE_1121(&__get__ZN11task_struct6threadE_1122(&get_current()->thread).fs); ((*elfregs))[22] = __get__ZN13thread_struct2gsE_1123(&__get__ZN11task_struct6threadE_1124(&get_current()->thread).gs); asm("movl %%ds,%0" : "=r" (v)); ((*elfregs))[23] = v; asm("movl %%es,%0" : "=r" (v)); ((*elfregs))[24] = v; asm("movl %%fs,%0" : "=r" (v)); ((*elfregs))[25] = v; asm("movl %%gs,%0" : "=r" (v)); ((*elfregs))[26] = v; } while (0);

arch/x86/kernel/process_64.acc:29531:1530: warning: taking address of temporary [-fpermissive]
  do { unsigned v; ((*elfregs))[0] = __get__ZN7pt_regs3r15E_1100(&(regs)->r15); ((*elfregs))[1] = __get__ZN7pt_regs3r14E_1101(&(regs)->r14); ((*elfregs))[2] = __get__ZN7pt_regs3r13E_1102(&(regs)->r13); ((*elfregs))[3] = __get__ZN7pt_regs3r12E_1103(&(regs)->r12); ((*elfregs))[4] = __get__ZN7pt_regs2bpE_1104(&(regs)->bp); ((*elfregs))[5] = __get__ZN7pt_regs2bxE_1105(&(regs)->bx); ((*elfregs))[6] = __get__ZN7pt_regs3r11E_1106(&(regs)->r11); ((*elfregs))[7] = __get__ZN7pt_regs3r10E_1107(&(regs)->r10); ((*elfregs))[8] = __get__ZN7pt_regs2r9E_1108(&(regs)->r9); ((*elfregs))[9] = __get__ZN7pt_regs2r8E_1109(&(regs)->r8); ((*elfregs))[10] = __get__ZN7pt_regs2axE_1110(&(regs)->ax); ((*elfregs))[11] = __get__ZN7pt_regs2cxE_1111(&(regs)->cx); ((*elfregs))[12] = __get__ZN7pt_regs2dxE_1112(&(regs)->dx); ((*elfregs))[13] = __get__ZN7pt_regs2siE_1113(&(regs)->si); ((*elfregs))[14] = __get__ZN7pt_regs2diE_1114(&(regs)->di); ((*elfregs))[15] = __get__ZN7pt_regs7orig_axE_1115(&(regs)->orig_ax); ((*elfregs))[16] = __get__ZN7pt_regs2ipE_1116(&(regs)->ip); ((*elfregs))[17] = __get__ZN7pt_regs2csE_1117(&(regs)->cs); ((*elfregs))[18] = __get__ZN7pt_regs5flagsE_1118(&(regs)->flags); ((*elfregs))[19] = __get__ZN7pt_regs2spE_1119(&(regs)->sp); ((*elfregs))[20] = __get__ZN7pt_regs2ssE_1120(&(regs)->ss); ((*elfregs))[21] = __get__ZN13thread_struct2fsE_1121(&__get__ZN11task_struct6threadE_1122(&get_current()->thread).fs); ((*elfregs))[22] = __get__ZN13thread_struct2gsE_1123(&__get__ZN11task_struct6threadE_1124(&get_current()->thread).gs); asm("movl %%ds,%0" : "=r" (v)); ((*elfregs))[23] = v; asm("movl %%es,%0" : "=r" (v)); ((*elfregs))[24] = v; asm("movl %%fs,%0" : "=r" (v)); ((*elfregs))[25] = v; asm("movl %%gs,%0" : "=r" (v)); ((*elfregs))[26] = v; } while (0);

arch/x86/kernel/process_64.acc: In function ‘int kstat_irqs(int)’:
arch/x86/kernel/process_64.acc:32696:103: warning: taking address of temporary [-fpermissive]
  for (((cpu)) = -1; ((cpu)) = __next_cpu((((cpu))), &((__get_cpu_possible_map_1172(&cpu_possible_map)))), ((cpu)) < 64; )
                                                                                                       ^
arch/x86/kernel/process_64.acc: In function ‘void __save_init_fpu(task_struct*)’:
arch/x86/kernel/process_64.acc:33133:106: warning: taking address of temporary [-fpermissive]
         : "=m" (__get__ZN13thread_struct6xstateE_1186(&__get__ZN11task_struct6threadE_1187(&tsk->thread).xstate)->fxsave)
                                                                                                          ^
arch/x86/kernel/process_64.acc: In function ‘short unsigned int get_fpu_cwd(task_struct*)’:
arch/x86/kernel/process_64.acc:33591:99: warning: taking address of temporary [-fpermissive]
   return __get__ZN13thread_struct6xstateE_1199(&__get__ZN11task_struct6threadE_1200(&tsk->thread).xstate)->fxsave.cwd;
                                                                                                   ^
arch/x86/kernel/process_64.acc:33593:115: warning: taking address of temporary [-fpermissive]
   return (unsigned short)__get__ZN13thread_struct6xstateE_1203(&__get__ZN11task_struct6threadE_1204(&tsk->thread).xstate)->fsave.cwd;
                                                                                                                   ^
arch/x86/kernel/process_64.acc: In function ‘short unsigned int get_fpu_swd(task_struct*)’:
arch/x86/kernel/process_64.acc:33740:99: warning: taking address of temporary [-fpermissive]
   return __get__ZN13thread_struct6xstateE_1209(&__get__ZN11task_struct6threadE_1210(&tsk->thread).xstate)->fxsave.swd;
                                                                                                   ^
arch/x86/kernel/process_64.acc:33742:115: warning: taking address of temporary [-fpermissive]
   return (unsigned short)__get__ZN13thread_struct6xstateE_1213(&__get__ZN11task_struct6threadE_1214(&tsk->thread).xstate)->fsave.swd;
                                                                                                                   ^
arch/x86/kernel/process_64.acc: In function ‘short unsigned int get_fpu_mxcsr(task_struct*)’:
arch/x86/kernel/process_64.acc:33819:99: warning: taking address of temporary [-fpermissive]
   return __get__ZN13thread_struct6xstateE_1219(&__get__ZN11task_struct6threadE_1220(&tsk->thread).xstate)->fxsave.mxcsr;
                                                                                                   ^
arch/x86/kernel/process_64.acc: In function ‘int desc_empty(void*)’:
arch/x86/kernel/process_64.acc:34014:14: warning: invalid conversion from ‘void*’ to ‘u32* {aka unsigned int*}’ [-fpermissive]
  u32 *desc = ptr;
              ^
arch/x86/kernel/process_64.acc: In function ‘void set_tssldt_descriptor(void*, long unsigned int, unsigned int, unsigned int)’:
arch/x86/kernel/process_64.acc:34063:31: warning: invalid conversion from ‘void*’ to ‘ldttss_desc64*’ [-fpermissive]
  struct ldttss_desc64 *desc = d;
                               ^
arch/x86/kernel/process_64.acc: In function ‘void copy_user_highpage(page*, page*, long unsigned int, vm_area_struct*)’:
arch/x86/kernel/process_64.acc:34551:36: warning: invalid conversion from ‘void*’ to ‘char*’ [-fpermissive]
  vfrom = kmap_atomic(from, KM_USER0);
                                    ^
arch/x86/kernel/process_64.acc:34552:32: warning: invalid conversion from ‘void*’ to ‘char*’ [-fpermissive]
  vto = kmap_atomic(to, KM_USER1);
                                ^
arch/x86/kernel/process_64.acc: In function ‘void copy_highpage(page*, page*)’:
arch/x86/kernel/process_64.acc:34564:36: warning: invalid conversion from ‘void*’ to ‘char*’ [-fpermissive]
  vfrom = kmap_atomic(from, KM_USER0);
                                    ^
arch/x86/kernel/process_64.acc:34565:32: warning: invalid conversion from ‘void*’ to ‘char*’ [-fpermissive]
  vto = kmap_atomic(to, KM_USER1);
                                ^
arch/x86/kernel/process_64.acc: In function ‘void enter_lazy_tlb(mm_struct*, task_struct*)’:
arch/x86/kernel/process_64.acc:35533:282: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.mmu_state) T__; if (0) { T__ tmp__; tmp__ = (2); } switch (sizeof(_proxy_pda.mmu_state)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1300(&_proxy_pda).mmu_state) : "ri" ((T__)2), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1301(&_proxy_pda).mmu_state) : "ri" ((T__)2), "i" (((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1302(&_proxy_pda).mmu_state) : "ri" ((T__)2), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; default: __bad_pda_field(); } } while (0);
                                                                                                                                                                                                                                                                                          ^
arch/x86/kernel/process_64.acc:35533:449: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.mmu_state) T__; if (0) { T__ tmp__; tmp__ = (2); } switch (sizeof(_proxy_pda.mmu_state)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1300(&_proxy_pda).mmu_state) : "ri" ((T__)2), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1301(&_proxy_pda).mmu_state) : "ri" ((T__)2), "i" (((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1302(&_proxy_pda).mmu_state) : "ri" ((T__)2), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; default: __bad_pda_field(); } } while (0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^
arch/x86/kernel/process_64.acc:35533:614: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.mmu_state) T__; if (0) { T__ tmp__; tmp__ = (2); } switch (sizeof(_proxy_pda.mmu_state)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1300(&_proxy_pda).mmu_state) : "ri" ((T__)2), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1301(&_proxy_pda).mmu_state) : "ri" ((T__)2), "i" (((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1302(&_proxy_pda).mmu_state) : "ri" ((T__)2), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; default: __bad_pda_field(); } } while (0);

arch/x86/kernel/process_64.acc: In function ‘void switch_mm(mm_struct*, mm_struct*, task_struct*)’:
arch/x86/kernel/process_64.acc:36313:82: warning: taking address of temporary [-fpermissive]
   __cpu_clear((cpu), &(__get__ZN9mm_struct11cpu_vm_maskE_1306(&prev->cpu_vm_mask)));
                                                                                  ^
arch/x86/kernel/process_64.acc:36315:282: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.mmu_state) T__; if (0) { T__ tmp__; tmp__ = (1); } switch (sizeof(_proxy_pda.mmu_state)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1307(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1308(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i" (((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1309(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; default: __bad_pda_field(); } } while (0);
                                                                                                                                                                                                                                                                                          ^
arch/x86/kernel/process_64.acc:36315:449: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.mmu_state) T__; if (0) { T__ tmp__; tmp__ = (1); } switch (sizeof(_proxy_pda.mmu_state)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1307(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1308(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i" (((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1309(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; default: __bad_pda_field(); } } while (0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^
arch/x86/kernel/process_64.acc:36315:614: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.mmu_state) T__; if (0) { T__ tmp__; tmp__ = (1); } switch (sizeof(_proxy_pda.mmu_state)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1307(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1308(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i" (((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1309(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; default: __bad_pda_field(); } } while (0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^
arch/x86/kernel/process_64.acc:36316:288: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.active_mm) T__; if (0) { T__ tmp__; tmp__ = (next); } switch (sizeof(_proxy_pda.active_mm)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1310(&_proxy_pda).active_mm) : "ri" ((T__)next), "i"(((size_t) &((struct x8664_pda *)0)->active_mm))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1311(&_proxy_pda).active_mm) : "ri" ((T__)next), "i" (((size_t) &((struct x8664_pda *)0)->active_mm))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1312(&_proxy_pda).active_mm) : "ri" ((T__)next), "i"(((size_t) &((struct x8664_pda *)0)->active_mm))); break; default: __bad_pda_field(); } } while (0);
                                                                                                                                                                                                                                                                                                ^
arch/x86/kernel/process_64.acc:36316:458: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.active_mm) T__; if (0) { T__ tmp__; tmp__ = (next); } switch (sizeof(_proxy_pda.active_mm)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1310(&_proxy_pda).active_mm) : "ri" ((T__)next), "i"(((size_t) &((struct x8664_pda *)0)->active_mm))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1311(&_proxy_pda).active_mm) : "ri" ((T__)next), "i" (((size_t) &((struct x8664_pda *)0)->active_mm))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1312(&_proxy_pda).active_mm) : "ri" ((T__)next), "i"(((size_t) &((struct x8664_pda *)0)->active_mm))); break; default: __bad_pda_field(); } } while (0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^
arch/x86/kernel/process_64.acc:36316:626: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.active_mm) T__; if (0) { T__ tmp__; tmp__ = (next); } switch (sizeof(_proxy_pda.active_mm)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1310(&_proxy_pda).active_mm) : "ri" ((T__)next), "i"(((size_t) &((struct x8664_pda *)0)->active_mm))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1311(&_proxy_pda).active_mm) : "ri" ((T__)next), "i" (((size_t) &((struct x8664_pda *)0)->active_mm))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1312(&_proxy_pda).active_mm) : "ri" ((T__)next), "i"(((size_t) &((struct x8664_pda *)0)->active_mm))); break; default: __bad_pda_field(); } } while (0);

arch/x86/kernel/process_64.acc:36318:80: warning: taking address of temporary [-fpermissive]
   __cpu_set((cpu), &(__get__ZN9mm_struct11cpu_vm_maskE_1313(&next->cpu_vm_mask)));
                                                                                ^
arch/x86/kernel/process_64.acc:36326:282: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.mmu_state) T__; if (0) { T__ tmp__; tmp__ = (1); } switch (sizeof(_proxy_pda.mmu_state)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1319(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1320(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i" (((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1321(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; default: __bad_pda_field(); } } while (0);
                                                                                                                                                                                                                                                                                          ^
arch/x86/kernel/process_64.acc:36326:449: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.mmu_state) T__; if (0) { T__ tmp__; tmp__ = (1); } switch (sizeof(_proxy_pda.mmu_state)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1319(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1320(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i" (((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1321(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; default: __bad_pda_field(); } } while (0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^
arch/x86/kernel/process_64.acc:36326:614: warning: using temporary as lvalue [-fpermissive]
   do { typedef typeof(_proxy_pda.mmu_state) T__; if (0) { T__ tmp__; tmp__ = (1); } switch (sizeof(_proxy_pda.mmu_state)) { case 2: asm("mov" "w %1,%%gs:%c2" : "+m" (__get__proxy_pda_1319(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 4: asm("mov" "l %1,%%gs:%c2" : "+m" (__get__proxy_pda_1320(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i" (((size_t) &((struct x8664_pda *)0)->mmu_state))); break; case 8: asm("mov" "q %1,%%gs:%c2": "+m" (__get__proxy_pda_1321(&_proxy_pda).mmu_state) : "ri" ((T__)1), "i"(((size_t) &((struct x8664_pda *)0)->mmu_state))); break; default: __bad_pda_field(); } } while (0);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^
arch/x86/kernel/process_64.acc:36329:94: warning: taking address of temporary [-fpermissive]
   if (!__cpu_test_and_set((cpu), &(__get__ZN9mm_struct11cpu_vm_maskE_1325(&next->cpu_vm_mask)))) {
                                                                                              ^
arch/x86/kernel/process_64.acc: In function ‘void* compat_alloc_user_space(long int)’:
arch/x86/kernel/process_64.acc:36807:142: warning: taking address of temporary [-fpermissive]
  struct pt_regs *regs = ((struct pt_regs *)__get__ZN13thread_struct3sp0E_1327(&__get__ZN11task_struct6threadE_1328(&(get_current())->thread).sp0) - 1);
                                                                                                                                              ^
arch/x86/kernel/process_64.acc: In function ‘long unsigned int get_wchan(task_struct*)’:
arch/x86/kernel/process_64.acc:37809:89: warning: taking address of temporary [-fpermissive]
  if (__get__ZN13thread_struct2spE_1345(&__get__ZN11task_struct6threadE_1346(&p->thread).sp) < stack || __get__ZN13thread_struct2spE_1347(&__get__ZN11task_struct6threadE_1348(&p->thread).sp) >= stack+(((1UL) << 12) << 1))
                                                                                         ^
arch/x86/kernel/process_64.acc:37809:187: warning: taking address of temporary [-fpermissive]
  if (__get__ZN13thread_struct2spE_1345(&__get__ZN11task_struct6threadE_1346(&p->thread).sp) < stack || __get__ZN13thread_struct2spE_1347(&__get__ZN11task_struct6threadE_1348(&p->thread).sp) >= stack+(((1UL) << 12) << 1))
                                                                                                                                                                                           ^
arch/x86/kernel/process_64.acc:37811:136: warning: taking address of temporary [-fpermissive]
  fp = *(typeof((u64 *)(p->thread.sp)))g_map((u64 *)(__get__ZN13thread_struct2spE_1349(&__get__ZN11task_struct6threadE_1350(&p->thread).sp)), sizeof(*((u64 *)(p->thread.sp))));
                                                                                                                                        ^
