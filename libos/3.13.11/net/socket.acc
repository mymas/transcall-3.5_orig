#ifndef __ac_FIRST__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11__
#define __ac_FIRST__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11__
#define __ac_FIRST_FILE__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11_net_socket_cxx__
#endif // __ac_FIRST__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11__
class Introspect;
class MyIntrospect;

#ifndef __ac_h_
#define __ac_h_
#ifdef __cplusplus
namespace AC {
  typedef const char* Type;
  enum JPType { CALL = 32768, EXECUTION = 65536, CONSTRUCTION = 131072, DESTRUCTION = 262144, GET = 33554432 };
  enum Protection { PROT_NONE, PROT_PRIVATE, PROT_PROTECTED, PROT_PUBLIC };
  enum Specifiers { SPEC_NONE = 0x0 , SPEC_STATIC = 0x1, SPEC_MUTABLE = 0x2, SPEC_VIRTUAL = 0x4 };
  struct Action {
    void **_args; void *_result; void *_target; void *_that; void *_fptr;
    void *_source;
    void (*_wrapper)(Action &);
    inline void trigger () { _wrapper (*this); }
  };
  struct AnyResultBuffer {};
  template <typename T> struct ResultBuffer : public AnyResultBuffer {
    struct { char _array[sizeof (T)]; } _data;
    ~ResultBuffer () { ((T&)_data).T::~T(); }
    operator T& () const { return (T&)_data; }
  };
  template <typename T, typename N> struct TL {
    typedef T type; typedef N next; enum { ARGS = next::ARGS + 1 };
  };
  struct TLE { enum { ARGS = 0 }; };
  template <typename T> struct Referred { typedef T type; };
  template <typename T> struct Referred<T &> { typedef T type; };
  template <typename TL, int I> struct Arg {
    typedef typename Arg<typename TL::next, I - 1>::Type Type;
    typedef typename Referred<Type>::type ReferredType;
  };
  template <typename TL> struct Arg<TL, 0> {
    typedef typename TL::type Type;
    typedef typename Referred<Type>::type ReferredType;
  };
  template <typename T> int ttest(...);
  template <typename T> char ttest(typename T::__TI const volatile *);
  template<typename T> struct HasTypeInfo {
    enum { RET=((sizeof(ttest<T>(0))==1)?1:0) };
  };
  template<typename T, int HAVE = HasTypeInfo<T>::RET> struct TypeInfo {
    enum { AVAILABLE = 0 };
  };
  template<typename T> struct TypeInfo<T, 1> : T::__TI {
    enum { AVAILABLE = 1 };
	 };
  template<typename T> struct RT {};
  template<typename T> RT<T> rt_deduce (const T&) { return RT<T>(); }
  struct Cnv { template<typename T> operator RT<T>() const { return RT<T>(); }};
  #define __AC_TYPEOF(expr) (1?AC::Cnv():AC::rt_deduce(expr))
  template <class Aspect, int Index>
  struct CFlow {
    static int &instance () {
      static int counter = 0;
      return counter;
    }
    CFlow () { instance ()++; }
    ~CFlow () { instance ()--; }
    static bool active () { return instance () > 0; }
  };
}
inline void * operator new (unsigned long int, AC::AnyResultBuffer *p) { return p; }
inline void operator delete (void *, AC::AnyResultBuffer *) { } // for VC++
#endif // __cplusplus
#endif // __ac_h_

#ifndef __ac_fwd_MyIntrospect__
#define __ac_fwd_MyIntrospect__
class MyIntrospect;
namespace AC {
  template <class JoinPoint>
  __attribute((always_inline)) inline void invoke_MyIntrospect_Introspect__a0_around (JoinPoint *tjp);
}
#endif

#ifndef __ac_need__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11_MyIntrospect_ah__
#define __ac_need__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11_MyIntrospect_ah__
#endif







extern "C" {


extern void g_pause(void);
extern void g_unpause(void);
extern void g_init(int domain_id);
extern void g_exit(void);
extern void *g_map(void *addr, unsigned long size);
extern void g_unmap(void *laddr);
extern void *g_proc_map(void *addr, unsigned long size, void *pgd);





}




extern int pid_max;
extern int ngroups_max;



struct seq_file;
struct dentry_operations;
struct dentry;
struct inode_operations;
struct nameidata;
struct super_operations;
struct kstatfs;
struct vfsmount;
struct statfs;

struct seq_file *seq_get(char *data, int size);
struct seq_file *seq_renew(struct seq_file *m);

char *dentry_op_dname(struct dentry_operations *op,
                      struct dentry *dentry, char *buffer, int buflen);
void *inode_op_getattr(struct inode_operations *op,
                       struct vfsmount *mnt, struct dentry *dentry,
                       struct kstat *stat);
void *inode_op_follow_link(struct inode_operations *op,
                           struct dentry *dentry, struct nameidata *nd);
int super_op_statfs(struct super_operations *op,
                    struct dentry *dentry, struct kstatfs *buf);


struct vfsmount *lookup_vfsmount(struct vfsmount *mnt, struct dentry *dentry);
int get_stat(struct vfsmount *mnt, struct dentry *dentry,
             struct kstat *stat);
int get_statfs(struct vfsmount *mnt, struct dentry *dentry,
               struct statfs *buf);
























struct ftrace_branch_data {
  template <typename, int = 0> struct __BYPASSftrace_branch_data {};
  template <typename, int> friend struct __BYPASSftrace_branch_data;
 char *func;
 char *file;
 unsigned line;
 union {
  struct {
   unsigned long correct;
   unsigned long incorrect;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  struct {
   unsigned long miss;
   unsigned long hit;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  unsigned long miss_hit[2];
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct kernel_symbol
{
  template <typename, int = 0> struct __BYPASSkernel_symbol {};
  template <typename, int> friend struct __BYPASSkernel_symbol;
 unsigned long value;
 char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





























typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;




typedef signed char s8;
typedef unsigned char u8;

typedef signed short s16;
typedef unsigned short u16;

typedef signed int s32;
typedef unsigned int u32;

typedef signed long long s64;
typedef unsigned long long u64;






enum {
 _false = 0,
 _true = 1
};
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;




typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;






typedef __u32 __kernel_dev_t;

typedef __kernel_fd_set fd_set;
typedef __kernel_dev_t dev_t;
typedef __kernel_ino_t ino_t;
typedef __kernel_mode_t mode_t;
typedef unsigned short umode_t;
typedef __u32 nlink_t;
typedef __kernel_off_t off_t;
typedef __kernel_pid_t pid_t;
typedef __kernel_daddr_t daddr_t;
typedef __kernel_key_t key_t;
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_mqd_t mqd_t;





typedef __kernel_uid32_t uid_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_uid16_t uid16_t;
typedef __kernel_gid16_t gid16_t;

typedef unsigned long uintptr_t;



typedef __kernel_old_uid_t old_uid_t;
typedef __kernel_old_gid_t old_gid_t;



typedef __kernel_loff_t loff_t;
typedef __kernel_size_t size_t;




typedef __kernel_ssize_t ssize_t;




typedef __kernel_ptrdiff_t ptrdiff_t;




typedef __kernel_time_t time_t;




typedef __kernel_clock_t clock_t;




typedef __kernel_caddr_t caddr_t;



typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;


typedef unsigned char unchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;




typedef __u8 u_int8_t;
typedef __s8 int8_t;
typedef __u16 u_int16_t;
typedef __s16 int16_t;
typedef __u32 u_int32_t;
typedef __s32 int32_t;



typedef __u8 uint8_t;
typedef __u16 uint16_t;
typedef __u32 uint32_t;


typedef __u64 uint64_t;
typedef __u64 u_int64_t;
typedef __s64 int64_t;
typedef unsigned long sector_t;
typedef unsigned long blkcnt_t;
typedef u64 dma_addr_t;
typedef unsigned gfp_t;
typedef unsigned fmode_t;
typedef unsigned oom_flags_t;


typedef u64 phys_addr_t;




typedef phys_addr_t resource_size_t;





typedef unsigned long irq_hw_number_t;




typedef struct _atomic {
  template <typename, int = 0> struct __BYPASS_atomic {};
  template <typename, int> friend struct __BYPASS_atomic;

 int counter;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} atomic_t;





typedef struct _atomic64 {
  template <typename, int = 0> struct __BYPASS_atomic64 {};
  template <typename, int> friend struct __BYPASS_atomic64;

 long counter;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} atomic64_t;


struct list_head {
  template <typename, int = 0> struct __BYPASSlist_head {};
  template <typename, int> friend struct __BYPASSlist_head;
 struct list_head *next, *prev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct hlist_head {
  template <typename, int = 0> struct __BYPASShlist_head {};
  template <typename, int> friend struct __BYPASShlist_head;
 struct hlist_node *first;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct hlist_node {
  template <typename, int = 0> struct __BYPASShlist_node {};
  template <typename, int> friend struct __BYPASShlist_node;
 struct hlist_node *next, **pprev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ustat {
  template <typename, int = 0> struct __BYPASSustat {};
  template <typename, int> friend struct __BYPASSustat;
 __kernel_daddr_t f_tfree;
 __kernel_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct callback_head {
  template <typename, int = 0> struct __BYPASScallback_head {};
  template <typename, int> friend struct __BYPASScallback_head;
 struct callback_head *next;
 void (*func)(struct callback_head *head);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void INIT_LIST_HEAD(struct list_head *list)
{
 list->next = list;
 list->prev = list;
}
static inline void __list_add(struct list_head *_new,
         struct list_head *prev,
         struct list_head *next)
{
 next->prev = _new;
 _new->next = next;
 _new->prev = prev;
 prev->next = _new;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_0_0 {
  typedef TJP__ZN9list_head4nextE_0_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_0(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_0_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_add(struct list_head *_new, struct list_head *head)
{
 __list_add(_new, head, __get__ZN9list_head4nextE_0(&head->next));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_1_0 {
  typedef TJP__ZN9list_head4prevE_1_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_1(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_1_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_add_tail(struct list_head *_new, struct list_head *head)
{
 __list_add(_new, __get__ZN9list_head4prevE_1(&head->prev), head);
}
static inline void __list_del(struct list_head * prev, struct list_head * next)
{
 next->prev = prev;
 prev->next = next;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_2_0 {
  typedef TJP__ZN9list_head4prevE_2_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_2(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_2_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_3_0 {
  typedef TJP__ZN9list_head4nextE_3_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_3(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_3_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void __list_del_entry(struct list_head *entry)
{
 __list_del(__get__ZN9list_head4prevE_2(&entry->prev), __get__ZN9list_head4nextE_3(&entry->next));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_4_0 {
  typedef TJP__ZN9list_head4prevE_4_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_4(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_4_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_5_0 {
  typedef TJP__ZN9list_head4nextE_5_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_5(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_5_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_del(struct list_head *entry)
{
 __list_del(__get__ZN9list_head4prevE_4(&entry->prev), __get__ZN9list_head4nextE_5(&entry->next));
 entry->next = ((void *) 0x00100100 + (0xdead000000000000UL));
 entry->prev = ((void *) 0x00200200 + (0xdead000000000000UL));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_6_0 {
  typedef TJP__ZN9list_head4nextE_6_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_6(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_6_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_7_0 {
  typedef TJP__ZN9list_head4prevE_7_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_7(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_7_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_replace(struct list_head *old,
    struct list_head *_new)
{
 _new->next = __get__ZN9list_head4nextE_6(&old->next);
 _new->next->prev = _new;
 _new->prev = __get__ZN9list_head4prevE_7(&old->prev);
 _new->prev->next = _new;
}

static inline void list_replace_init(struct list_head *old,
     struct list_head *_new)
{
 list_replace(old, _new);
 INIT_LIST_HEAD(old);
}





static inline void list_del_init(struct list_head *entry)
{
 __list_del_entry(entry);
 INIT_LIST_HEAD(entry);
}






static inline void list_move(struct list_head *list, struct list_head *head)
{
 __list_del_entry(list);
 list_add(list, head);
}






static inline void list_move_tail(struct list_head *list,
      struct list_head *head)
{
 __list_del_entry(list);
 list_add_tail(list, head);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_8_0 {
  typedef TJP__ZN9list_head4nextE_8_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_8(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_8_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline int list_is_last( struct list_head *list,
    struct list_head *head)
{
 return __get__ZN9list_head4nextE_8(&list->next) == head;
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_9_0 {
  typedef TJP__ZN9list_head4nextE_9_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_9(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_9_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline int list_empty( struct list_head *head)
{
 return __get__ZN9list_head4nextE_9(&head->next) == head;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_10_0 {
  typedef TJP__ZN9list_head4nextE_10_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_10(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_10_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_11_0 {
  typedef TJP__ZN9list_head4prevE_11_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_11(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_11_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline int list_empty_careful( struct list_head *head)
{
 struct list_head *next = __get__ZN9list_head4nextE_10(&head->next);
 return (next == head) && (next == __get__ZN9list_head4prevE_11(&head->prev));
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_12_0 {
  typedef TJP__ZN9list_head4nextE_12_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_12(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_12_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_rotate_left(struct list_head *head)
{
 struct list_head *first;

 if (!list_empty(head)) {
  first = __get__ZN9list_head4nextE_12(&head->next);
  list_move_tail(first, head);
 }
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_13_0 {
  typedef TJP__ZN9list_head4nextE_13_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_13(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_13_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_14_0 {
  typedef TJP__ZN9list_head4prevE_14_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_14(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_14_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline int list_is_singular( struct list_head *head)
{
 return !list_empty(head) && (__get__ZN9list_head4nextE_13(&head->next) == __get__ZN9list_head4prevE_14(&head->prev));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_15_0 {
  typedef TJP__ZN9list_head4nextE_15_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_15(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_15_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_16_0 {
  typedef TJP__ZN9list_head4nextE_16_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_16(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_16_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void __list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 struct list_head *new_first = __get__ZN9list_head4nextE_15(&entry->next);
 list->next = __get__ZN9list_head4nextE_16(&head->next);
 list->next->prev = list;
 list->prev = entry;
 entry->next = list;
 head->next = new_first;
 new_first->prev = head;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_17_0 {
  typedef TJP__ZN9list_head4nextE_17_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_17(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_17_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_cut_position(struct list_head *list,
  struct list_head *head, struct list_head *entry)
{
 if (list_empty(head))
  return;
 if (list_is_singular(head) &&
  (__get__ZN9list_head4nextE_17(&head->next) != entry && head != entry))
  return;
 if (entry == head)
  INIT_LIST_HEAD(list);
 else
  __list_cut_position(list, head, entry);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_18_0 {
  typedef TJP__ZN9list_head4nextE_18_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_18(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_18_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_19_0 {
  typedef TJP__ZN9list_head4prevE_19_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_19(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_19_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void __list_splice( struct list_head *list,
     struct list_head *prev,
     struct list_head *next)
{
 struct list_head *first = __get__ZN9list_head4nextE_18(&list->next);
 struct list_head *last = __get__ZN9list_head4prevE_19(&list->prev);

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_20_0 {
  typedef TJP__ZN9list_head4nextE_20_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_20(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_20_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_splice( struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, head, __get__ZN9list_head4nextE_20(&head->next));
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_21_0 {
  typedef TJP__ZN9list_head4prevE_21_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_21(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_21_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_splice_tail(struct list_head *list,
    struct list_head *head)
{
 if (!list_empty(list))
  __list_splice(list, __get__ZN9list_head4prevE_21(&head->prev), head);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_22_0 {
  typedef TJP__ZN9list_head4nextE_22_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_22(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_22_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_splice_init(struct list_head *list,
        struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, head, __get__ZN9list_head4nextE_22(&head->next));
  INIT_LIST_HEAD(list);
 }
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_23_0 {
  typedef TJP__ZN9list_head4prevE_23_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_23(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_23_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_splice_tail_init(struct list_head *list,
      struct list_head *head)
{
 if (!list_empty(list)) {
  __list_splice(list, __get__ZN9list_head4prevE_23(&head->prev), head);
  INIT_LIST_HEAD(list);
 }
}
static inline void INIT_HLIST_NODE(struct hlist_node *h)
{
 h->next = 0;
 h->pprev = 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node5pprevE_24_0 {
  typedef TJP__ZN10hlist_node5pprevE_24_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node ** __get__ZN10hlist_node5pprevE_24(hlist_node ** *source) {
  ::hlist_node **__result_buffer;
  typedef TJP__ZN10hlist_node5pprevE_24_0< ::hlist_node **, ::hlist_node , ::hlist_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node **&)__result_buffer;
}
static inline int hlist_unhashed( struct hlist_node *h)
{
 return !__get__ZN10hlist_node5pprevE_24(&h->pprev);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_25_0 {
  typedef TJP__ZN10hlist_head5firstE_25_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_25(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_25_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline int hlist_empty( struct hlist_head *h)
{
 return !__get__ZN10hlist_head5firstE_25(&h->first);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_26_0 {
  typedef TJP__ZN10hlist_node4nextE_26_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_26(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_26_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node5pprevE_27_0 {
  typedef TJP__ZN10hlist_node5pprevE_27_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node ** __get__ZN10hlist_node5pprevE_27(hlist_node ** *source) {
  ::hlist_node **__result_buffer;
  typedef TJP__ZN10hlist_node5pprevE_27_0< ::hlist_node **, ::hlist_node , ::hlist_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node **&)__result_buffer;
}
static inline void __hlist_del(struct hlist_node *n)
{
 struct hlist_node *next = __get__ZN10hlist_node4nextE_26(&n->next);
 struct hlist_node **pprev = __get__ZN10hlist_node5pprevE_27(&n->pprev);
 *pprev = next;
 if (next)
  next->pprev = pprev;
}

static inline void hlist_del(struct hlist_node *n)
{
 __hlist_del(n);
 n->next = ((void *) 0x00100100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x00200200 + (0xdead000000000000UL));
}

static inline void hlist_del_init(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  INIT_HLIST_NODE(n);
 }
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_28_0 {
  typedef TJP__ZN10hlist_head5firstE_28_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_28(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_28_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
 struct hlist_node *first = __get__ZN10hlist_head5firstE_28(&h->first);
 n->next = first;
 if (first)
  first->pprev = &n->next;
 h->first = n;
 n->pprev = &h->first;
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node5pprevE_29_0 {
  typedef TJP__ZN10hlist_node5pprevE_29_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node ** __get__ZN10hlist_node5pprevE_29(hlist_node ** *source) {
  ::hlist_node **__result_buffer;
  typedef TJP__ZN10hlist_node5pprevE_29_0< ::hlist_node **, ::hlist_node , ::hlist_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node **&)__result_buffer;
}
static inline void hlist_add_before(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = __get__ZN10hlist_node5pprevE_29(&next->pprev);
 n->next = next;
 next->pprev = &n->next;
 *(n->pprev) = n;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_30_0 {
  typedef TJP__ZN10hlist_node4nextE_30_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_30(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_30_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_31_0 {
  typedef TJP__ZN10hlist_node4nextE_31_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_31(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_31_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline void hlist_add_after(struct hlist_node *n,
     struct hlist_node *next)
{
 next->next = __get__ZN10hlist_node4nextE_30(&n->next);
 n->next = next;
 next->pprev = &n->next;

 if(__get__ZN10hlist_node4nextE_31(&next->next))
  next->next->pprev = &next->next;
}


static inline void hlist_add_fake(struct hlist_node *n)
{
 n->pprev = &n->next;
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_32_0 {
  typedef TJP__ZN10hlist_head5firstE_32_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_32(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_32_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_33_0 {
  typedef TJP__ZN10hlist_head5firstE_33_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_33(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_33_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline void hlist_move_list(struct hlist_head *old,
       struct hlist_head *_new)
{
 _new->first = __get__ZN10hlist_head5firstE_32(&old->first);
 if (__get__ZN10hlist_head5firstE_33(&_new->first))
  _new->first->pprev = &_new->first;
 old->first = 0;
}














typedef __builtin_va_list __gnuc_va_list;
typedef __gnuc_va_list va_list;




extern unsigned int __sw_hweight8(unsigned int w);
extern unsigned int __sw_hweight16(unsigned int w);
extern unsigned int __sw_hweight32(unsigned int w);
extern unsigned long __sw_hweight64(__u64 w);














extern char early_idt_handlers[32][2+2+5];
static inline unsigned long get_limit(unsigned long segment)
{
 unsigned long __limit;
 asm("lsll %1,%0" : "=r" (__limit) : "r" (segment));
 return __limit + 1;
}






extern int devmem_is_allowed(unsigned long pagenr);

extern unsigned long max_low_pfn_mapped;
extern unsigned long max_pfn_mapped;

static inline phys_addr_t get_max_mapped(void)
{
 return (phys_addr_t)max_pfn_mapped << 12;
}

bool pfn_range_is_mapped(unsigned long start_pfn, unsigned long end_pfn);

extern unsigned long init_memory_mapping(unsigned long start,
      unsigned long end);

extern void initmem_init(void);







struct pt_regs {
  template <typename, int = 0> struct __BYPASSpt_regs {};
  template <typename, int> friend struct __BYPASSpt_regs;
 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long bp;
 unsigned long bx;

 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long ax;
 unsigned long cx;
 unsigned long dx;
 unsigned long si;
 unsigned long di;
 unsigned long orig_ax;


 unsigned long ip;
 unsigned long cs;
 unsigned long flags;
 unsigned long sp;
 unsigned long ss;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};



typedef int (*initcall_t)(void);
typedef void (*exitcall_t)(void);

extern initcall_t __con_initcall_start[], __con_initcall_end[];
extern initcall_t __security_initcall_start[], __security_initcall_end[];


typedef void (*ctor_fn_t)(void);


extern int do_one_initcall(initcall_t fn);
extern char __attribute__ ((__section__(".init.data"))) boot_command_line[];
extern char *saved_command_line;
extern unsigned int reset_devices;


void setup_arch(char **);
void prepare_namespace(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) load_default_modules(void);
int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) init_rootfs(void);

extern void (*late_time_init)(void);

extern bool initcall_debug;
struct obs_kernel_param {
  template <typename, int = 0> struct __BYPASSobs_kernel_param {};
  template <typename, int> friend struct __BYPASSobs_kernel_param;
 char *str;
 int (*setup_func)(char *);
 int early;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) parse_early_param(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) parse_early_options(char *cmdline);

struct desc_struct {
  template <typename, int = 0> struct __BYPASSdesc_struct {};
  template <typename, int> friend struct __BYPASSdesc_struct;
 union {
  struct {
   unsigned int a;
   unsigned int b;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  struct {
   u16 limit0;
   u16 base0;
   unsigned base1: 8, type: 4, s: 1, dpl: 2, p: 1;
   unsigned limit: 4, avl: 1, l: 1, d: 1, g: 1, base2: 8;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));







enum {
 GATE_INTERRUPT = 0xE,
 GATE_TRAP = 0xF,
 GATE_CALL = 0xC,
 GATE_TASK = 0x5,
};


struct gate_struct64 {
  template <typename, int = 0> struct __BYPASSgate_struct64 {};
  template <typename, int> friend struct __BYPASSgate_struct64;
 u16 offset_low;
 u16 segment;
 unsigned ist : 3, zero0 : 5, type : 5, dpl : 2, p : 1;
 u16 offset_middle;
 u32 offset_high;
 u32 zero1;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));





enum {
 DESC_TSS = 0x9,
 DESC_LDT = 0x2,
 DESCTYPE_S = 0x10,
};


struct ldttss_desc64 {
  template <typename, int = 0> struct __BYPASSldttss_desc64 {};
  template <typename, int> friend struct __BYPASSldttss_desc64;
 u16 limit0;
 u16 base0;
 unsigned base1 : 8, type : 5, dpl : 2, p : 1;
 unsigned limit1 : 4, zero0 : 3, g : 1, base2 : 8;
 u32 base3;
 u32 zero1;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));


typedef struct gate_struct64 gate_desc;
typedef struct ldttss_desc64 ldt_desc;
typedef struct ldttss_desc64 tss_desc;
struct desc_ptr {
  template <typename, int = 0> struct __BYPASSdesc_ptr {};
  template <typename, int> friend struct __BYPASSdesc_ptr;
 unsigned short size;
 unsigned long address;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed)) ;

















typedef unsigned long pteval_t;
typedef unsigned long pmdval_t;
typedef unsigned long pudval_t;
typedef unsigned long pgdval_t;
typedef unsigned long pgprotval_t;

typedef struct { pteval_t pte; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pte_t;
typedef struct pgprot {
  template <typename, int = 0> struct __BYPASSpgprot {};
  template <typename, int> friend struct __BYPASSpgprot; pgprotval_t pgprot; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pgprot_t;

typedef struct { pgdval_t pgd; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pgd_t;

static inline pgd_t native_make_pgd(pgdval_t val)
{
 return (pgd_t) { val };
}

static inline pgdval_t native_pgd_val(pgd_t pgd)
{
 return pgd.pgd;
}

static inline pgdval_t pgd_flags(pgd_t pgd)
{
 return native_pgd_val(pgd) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))));
}


typedef struct { pudval_t pud; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pud_t;

static inline pud_t native_make_pud(pmdval_t val)
{
 return (pud_t) { val };
}

static inline pudval_t native_pud_val(pud_t pud)
{
 return pud.pud;
}
typedef struct { pmdval_t pmd; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pmd_t;

static inline pmd_t native_make_pmd(pmdval_t val)
{
 return (pmd_t) { val };
}

static inline pmdval_t native_pmd_val(pmd_t pmd)
{
 return pmd.pmd;
}
static inline pudval_t pud_flags(pud_t pud)
{
 return native_pud_val(pud) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))));
}

static inline pmdval_t pmd_flags(pmd_t pmd)
{
 return native_pmd_val(pmd) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))));
}

static inline pte_t native_make_pte(pteval_t val)
{



        return ({ pte_t var; var.pte = val; var; });

}

static inline pteval_t native_pte_val(pte_t pte)
{
 return pte.pte;
}

static inline pteval_t pte_flags(pte_t pte)
{
 return native_pte_val(pte) & (~((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))));
}





typedef struct page *pgtable_t;

extern pteval_t __supported_pte_mask;
extern void set_nx(void);
extern int nx_enabled;


extern pgprot_t pgprot_writecombine(pgprot_t prot);





struct file;
pgprot_t phys_mem_access_prot(struct file *file, unsigned long pfn,
                              unsigned long size, pgprot_t vma_prot);
int phys_mem_access_prot_allowed(struct file *file, unsigned long pfn,
                              unsigned long size, pgprot_t *vma_prot);


void set_pte_vaddr(unsigned long vaddr, pte_t pte);







struct seq_file;
extern void arch_report_meminfo(struct seq_file *m);

enum pg_level {
 PG_LEVEL_NONE,
 PG_LEVEL_4K,
 PG_LEVEL_2M,
 PG_LEVEL_1G,
 PG_LEVEL_NUM
};


extern void update_page_count(int level, unsigned long pages);
extern pte_t *lookup_address(unsigned long address, unsigned int *level);
extern phys_addr_t slow_virt_to_phys(void *__address);
extern int kernel_map_pages_in_pgd(pgd_t *pgd, u64 pfn, unsigned long address,
       unsigned numpages, unsigned long page_flags);

struct page;
struct thread_struct;
struct desc_ptr;
struct tss_struct;
struct mm_struct;
struct desc_struct;
struct task_struct;
struct cpumask;





struct paravirt_callee_save {
  template <typename, int = 0> struct __BYPASSparavirt_callee_save {};
  template <typename, int> friend struct __BYPASSparavirt_callee_save;
 void *func;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct pv_info {
  template <typename, int = 0> struct __BYPASSpv_info {};
  template <typename, int> friend struct __BYPASSpv_info;
 unsigned int kernel_rpl;
 int shared_kernel_pmd;


 u16 extra_user_64bit_cs;


 int paravirt_enabled;
 char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_init_ops {
  template <typename, int = 0> struct __BYPASSpv_init_ops {};
  template <typename, int> friend struct __BYPASSpv_init_ops;
 unsigned (*patch)(u8 type, u16 clobber, void *insnbuf,
     unsigned long addr, unsigned len);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct pv_lazy_ops {
  template <typename, int = 0> struct __BYPASSpv_lazy_ops {};
  template <typename, int> friend struct __BYPASSpv_lazy_ops;

 void (*enter)(void);
 void (*leave)(void);
 void (*flush)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_time_ops {
  template <typename, int = 0> struct __BYPASSpv_time_ops {};
  template <typename, int> friend struct __BYPASSpv_time_ops;
 unsigned long long (*sched_clock)(void);
 unsigned long long (*steal_clock)(int cpu);
 unsigned long (*get_tsc_khz)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_cpu_ops {
  template <typename, int = 0> struct __BYPASSpv_cpu_ops {};
  template <typename, int> friend struct __BYPASSpv_cpu_ops;

 unsigned long (*get_debugreg)(int regno);
 void (*set_debugreg)(int regno, unsigned long value);

 void (*clts)(void);

 unsigned long (*read_cr0)(void);
 void (*write_cr0)(unsigned long);

 unsigned long (*read_cr4_safe)(void);
 unsigned long (*read_cr4)(void);
 void (*write_cr4)(unsigned long);


 unsigned long (*read_cr8)(void);
 void (*write_cr8)(unsigned long);



 void (*load_tr_desc)(void);
 void (*load_gdt)( struct desc_ptr *);
 void (*load_idt)( struct desc_ptr *);

 void (*store_idt)(struct desc_ptr *);
 void (*set_ldt)( void *desc, unsigned entries);
 unsigned long (*store_tr)(void);
 void (*load_tls)(struct thread_struct *t, unsigned int cpu);

 void (*load_gs_index)(unsigned int idx);

 void (*write_ldt_entry)(struct desc_struct *ldt, int entrynum,
    void *desc);
 void (*write_gdt_entry)(struct desc_struct *,
    int entrynum, void *desc, int size);
 void (*write_idt_entry)(gate_desc *,
    int entrynum, gate_desc *gate);
 void (*alloc_ldt)(struct desc_struct *ldt, unsigned entries);
 void (*free_ldt)(struct desc_struct *ldt, unsigned entries);

 void (*load_sp0)(struct tss_struct *tss, struct thread_struct *t);

 void (*set_iopl_mask)(unsigned mask);

 void (*wbinvd)(void);
 void (*io_delay)(void);


 void (*cpuid)(unsigned int *eax, unsigned int *ebx,
        unsigned int *ecx, unsigned int *edx);



 u64 (*read_msr)(unsigned int msr, int *err);
 int (*write_msr)(unsigned int msr, unsigned low, unsigned high);

 u64 (*read_tsc)(void);
 u64 (*read_pmc)(int counter);
 unsigned long long (*read_tscp)(unsigned int *aux);







 void (*irq_enable_sysexit)(void);







 void (*usergs_sysret64)(void);







 void (*usergs_sysret32)(void);



 void (*iret)(void);

 void (*swapgs)(void);

 void (*start_context_switch)(struct task_struct *prev);
 void (*end_context_switch)(struct task_struct *next);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_irq_ops {
  template <typename, int = 0> struct __BYPASSpv_irq_ops {};
  template <typename, int> friend struct __BYPASSpv_irq_ops;
 struct paravirt_callee_save save_fl;
 struct paravirt_callee_save restore_fl;
 struct paravirt_callee_save irq_disable;
 struct paravirt_callee_save irq_enable;

 void (*safe_halt)(void);
 void (*halt)(void);


 void (*adjust_exception_frame)(void);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_apic_ops {
  template <typename, int = 0> struct __BYPASSpv_apic_ops {};
  template <typename, int> friend struct __BYPASSpv_apic_ops;

 void (*startup_ipi_hook)(int phys_apicid,
     unsigned long start_eip,
     unsigned long start_esp);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pv_mmu_ops {
  template <typename, int = 0> struct __BYPASSpv_mmu_ops {};
  template <typename, int> friend struct __BYPASSpv_mmu_ops;
 unsigned long (*read_cr2)(void);
 void (*write_cr2)(unsigned long);

 unsigned long (*read_cr3)(void);
 void (*write_cr3)(unsigned long);





 void (*activate_mm)(struct mm_struct *prev,
       struct mm_struct *next);
 void (*dup_mmap)(struct mm_struct *oldmm,
    struct mm_struct *mm);
 void (*exit_mmap)(struct mm_struct *mm);



 void (*flush_tlb_user)(void);
 void (*flush_tlb_kernel)(void);
 void (*flush_tlb_single)(unsigned long addr);
 void (*flush_tlb_others)( struct cpumask *cpus,
     struct mm_struct *mm,
     unsigned long start,
     unsigned long end);


 int (*pgd_alloc)(struct mm_struct *mm);
 void (*pgd_free)(struct mm_struct *mm, pgd_t *pgd);





 void (*alloc_pte)(struct mm_struct *mm, unsigned long pfn);
 void (*alloc_pmd)(struct mm_struct *mm, unsigned long pfn);
 void (*alloc_pud)(struct mm_struct *mm, unsigned long pfn);
 void (*release_pte)(unsigned long pfn);
 void (*release_pmd)(unsigned long pfn);
 void (*release_pud)(unsigned long pfn);


 void (*set_pte)(pte_t *ptep, pte_t pteval);
 void (*set_pte_at)(struct mm_struct *mm, unsigned long addr,
      pte_t *ptep, pte_t pteval);
 void (*set_pmd)(pmd_t *pmdp, pmd_t pmdval);
 void (*set_pmd_at)(struct mm_struct *mm, unsigned long addr,
      pmd_t *pmdp, pmd_t pmdval);
 void (*pte_update)(struct mm_struct *mm, unsigned long addr,
      pte_t *ptep);
 void (*pte_update_defer)(struct mm_struct *mm,
     unsigned long addr, pte_t *ptep);
 void (*pmd_update)(struct mm_struct *mm, unsigned long addr,
      pmd_t *pmdp);
 void (*pmd_update_defer)(struct mm_struct *mm,
     unsigned long addr, pmd_t *pmdp);

 pte_t (*ptep_modify_prot_start)(struct mm_struct *mm, unsigned long addr,
     pte_t *ptep);
 void (*ptep_modify_prot_commit)(struct mm_struct *mm, unsigned long addr,
     pte_t *ptep, pte_t pte);

 struct paravirt_callee_save pte_val;
 struct paravirt_callee_save make_pte;

 struct paravirt_callee_save pgd_val;
 struct paravirt_callee_save make_pgd;
 void (*set_pud)(pud_t *pudp, pud_t pudval);

 struct paravirt_callee_save pmd_val;
 struct paravirt_callee_save make_pmd;


 struct paravirt_callee_save pud_val;
 struct paravirt_callee_save make_pud;

 void (*set_pgd)(pgd_t *pudp, pgd_t pgdval);



 struct pv_lazy_ops lazy_mode;





 void (*set_fixmap)(unsigned idx,
      phys_addr_t phys, pgprot_t flags);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct arch_spinlock;

typedef u16 __ticket_t;
typedef u32 __ticketpair_t;






typedef struct arch_spinlock {
  template <typename, int = 0> struct __BYPASSarch_spinlock {};
  template <typename, int> friend struct __BYPASSarch_spinlock;



 union _arch_u {

  __ticketpair_t head_tail;
  struct __raw_tickets {
   __ticket_t head, tail;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} tickets;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
} arch_spinlock_t;



typedef union {
 s32 lock;
 s32 write;
} arch_rwlock_t;




struct pv_lock_ops {
  template <typename, int = 0> struct __BYPASSpv_lock_ops {};
  template <typename, int> friend struct __BYPASSpv_lock_ops;
 struct paravirt_callee_save lock_spinning;
 void (*unlock_kick)(struct arch_spinlock *lock, __ticket_t ticket);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct paravirt_patch_template {
  template <typename, int = 0> struct __BYPASSparavirt_patch_template {};
  template <typename, int> friend struct __BYPASSparavirt_patch_template;
 struct pv_init_ops pv_init_ops;
 struct pv_time_ops pv_time_ops;
 struct pv_cpu_ops pv_cpu_ops;
 struct pv_irq_ops pv_irq_ops;
 struct pv_apic_ops pv_apic_ops;
 struct pv_mmu_ops pv_mmu_ops;
 struct pv_lock_ops pv_lock_ops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct pv_info pv_info;
extern struct pv_init_ops pv_init_ops;
extern struct pv_time_ops pv_time_ops;
extern struct pv_cpu_ops pv_cpu_ops;
extern struct pv_irq_ops pv_irq_ops;
extern struct pv_apic_ops pv_apic_ops;
extern struct pv_mmu_ops pv_mmu_ops;
extern struct pv_lock_ops pv_lock_ops;
unsigned paravirt_patch_nop(void);
unsigned paravirt_patch_ident_32(void *insnbuf, unsigned len);
unsigned paravirt_patch_ident_64(void *insnbuf, unsigned len);
unsigned paravirt_patch_ignore(unsigned len);
unsigned paravirt_patch_call(void *insnbuf,
        void *target, u16 tgt_clobbers,
        unsigned long addr, u16 site_clobbers,
        unsigned len);
unsigned paravirt_patch_jmp(void *insnbuf, void *target,
       unsigned long addr, unsigned len);
unsigned paravirt_patch_default(u8 type, u16 clobbers, void *insnbuf,
    unsigned long addr, unsigned len);

unsigned paravirt_patch_insns(void *insnbuf, unsigned len,
         char *start, char *end);

unsigned native_patch(u8 type, u16 clobbers, void *ibuf,
        unsigned long addr, unsigned len);

int paravirt_disable_iospace(void);
enum paravirt_lazy_mode {
 PARAVIRT_LAZY_NONE,
 PARAVIRT_LAZY_MMU,
 PARAVIRT_LAZY_CPU,
};

enum paravirt_lazy_mode paravirt_get_lazy_mode(void);
void paravirt_start_context_switch(struct task_struct *prev);
void paravirt_end_context_switch(struct task_struct *next);

void paravirt_enter_lazy_mmu(void);
void paravirt_leave_lazy_mmu(void);
void paravirt_flush_lazy_mmu(void);

void _paravirt_nop(void);
u32 _paravirt_ident_32(u32);
u64 _paravirt_ident_64(u64);




struct paravirt_patch_site {
  template <typename, int = 0> struct __BYPASSparavirt_patch_site {};
  template <typename, int> friend struct __BYPASSparavirt_patch_site;
 u8 *instr;
 u8 instrtype;
 u8 len;
 u16 clobbers;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct paravirt_patch_site __parainstructions[],
 __parainstructions_end[];


struct cpuinfo_x86;
struct task_struct;

extern unsigned long profile_pc(struct pt_regs *regs);


extern unsigned long
convert_ip_to_linear(struct task_struct *child, struct pt_regs *regs);
extern void send_sigtrap(struct task_struct *tsk, struct pt_regs *regs,
    int error_code, int si_code);

extern long syscall_trace_enter(struct pt_regs *);
extern void syscall_trace_leave(struct pt_regs *);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2axE_39_0 {
  typedef TJP__ZN7pt_regs2axE_39_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2axE_39(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2axE_39_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long regs_return_value(struct pt_regs *regs)
{
 return __get__ZN7pt_regs2axE_39(&regs->ax);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2csE_40_0 {
  typedef TJP__ZN7pt_regs2csE_40_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2csE_40(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2csE_40_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int user_mode(struct pt_regs *regs)
{



 return !!(__get__ZN7pt_regs2csE_40(&regs->cs) & 3);

}

static inline int user_mode_vm(struct pt_regs *regs)
{




 return user_mode(regs);

}

static inline int v8086_mode(struct pt_regs *regs)
{



 return 0;

}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2csE_41_0 {
  typedef TJP__ZN7pt_regs2csE_41_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2csE_41(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2csE_41_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2csE_42_0 {
  typedef TJP__ZN7pt_regs2csE_42_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2csE_42(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2csE_42_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline bool user_64bit_mode(struct pt_regs *regs)
{
 return __get__ZN7pt_regs2csE_41(&regs->cs) == (6*8+3) || __get__ZN7pt_regs2csE_42(&regs->cs) == pv_info.extra_user_64bit_cs;

}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2spE_45_0 {
  typedef TJP__ZN7pt_regs2spE_45_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2spE_45(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2spE_45_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long kernel_stack_pointer(struct pt_regs *regs)
{
 return __get__ZN7pt_regs2spE_45(&regs->sp);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2ipE_46_0 {
  typedef TJP__ZN7pt_regs2ipE_46_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2ipE_46(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2ipE_46_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long instruction_pointer(struct pt_regs *regs)
{
 return (__get__ZN7pt_regs2ipE_46(&(regs)->ip));
}
static inline void instruction_pointer_set(struct pt_regs *regs,
                                           unsigned long val)
{
 (((regs)->ip) = (val));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2spE_47_0 {
  typedef TJP__ZN7pt_regs2spE_47_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2spE_47(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2spE_47_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long user_stack_pointer(struct pt_regs *regs)
{
 return (__get__ZN7pt_regs2spE_47(&(regs)->sp));
}
static inline void user_stack_pointer_set(struct pt_regs *regs,
                                          unsigned long val)
{
 (((regs)->sp) = (val));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2bpE_48_0 {
  typedef TJP__ZN7pt_regs2bpE_48_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2bpE_48(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2bpE_48_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long frame_pointer(struct pt_regs *regs)
{
 return (__get__ZN7pt_regs2bpE_48(&(regs)->bp));
}
static inline void frame_pointer_set(struct pt_regs *regs,
                                     unsigned long val)
{
 (((regs)->bp) = (val));
}


extern int regs_query_register_offset( char *name);
extern char *regs_query_register_name(unsigned int offset);
static inline unsigned long regs_get_register(struct pt_regs *regs,
           unsigned int offset)
{
 if (__builtin_expect(!!(offset > (((size_t) &((struct pt_regs *)0)->ss))), 0))
  return 0;
 return *(unsigned long *)((unsigned long)regs + offset);
}
static inline int regs_within_kernel_stack(struct pt_regs *regs,
        unsigned long addr)
{
 return ((addr & ~((((1UL) << 12) << 1) - 1)) ==
  (kernel_stack_pointer(regs) & ~((((1UL) << 12) << 1) - 1)));
}
static inline unsigned long regs_get_kernel_stack_nth(struct pt_regs *regs,
            unsigned int n)
{
 unsigned long *addr = (unsigned long *)kernel_stack_pointer(regs);
 addr += n;
 if (regs_within_kernel_stack(regs, (unsigned long)addr))
  return *addr;
 else
  return 0;
}
struct user_desc;
extern int do_get_thread_area(struct task_struct *p, int idx,
         struct user_desc *info);
extern int do_set_thread_area(struct task_struct *p, int idx,
         struct user_desc *info, int can_allocate);
struct alt_instr {
  template <typename, int = 0> struct __BYPASSalt_instr {};
  template <typename, int> friend struct __BYPASSalt_instr;
 s32 instr_offset;
 s32 repl_offset;
 u16 cpuid;
 u8 instrlen;
 u8 replacementlen;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void alternative_instructions(void);
extern void apply_alternatives(struct alt_instr *start, struct alt_instr *end);

struct module;


extern void alternatives_smp_module_add(struct module *mod, char *name,
     void *locks, void *locks_end,
     void *text, void *text_end);
extern void alternatives_smp_module_del(struct module *mod);
extern void alternatives_enable_smp(void);
extern int alternatives_text_reserved(void *start, void *end);
extern bool skip_smp_alternatives;








extern char * x86_cap_flags[10*32];
extern char * x86_power_flags[32];
extern void warn_pre_alternatives(void);
extern bool __static_cpu_has_safe(u16 bit);






static inline __attribute__((always_inline)) __attribute__((pure)) bool __static_cpu_has(u16 bit)
{
  u8 flag;

  asm ("1: movb $0,%0\n"
        "2:\n"
        ".section .altinstructions,\"a\"\n"
        " .long 1b - .\n"
        " .long 3f - .\n"
        " .word %P1\n"
        " .byte 2b - 1b\n"
        " .byte 4f - 3f\n"
        ".previous\n"
        ".section .discard,\"aw\",@progbits\n"
        " .byte 0xff + (4f-3f) - (2b-1b)\n"
        ".previous\n"
        ".section .altinstr_replacement,\"ax\"\n"
        "3: movb $1,%0\n"
        "4:\n"
        ".previous\n"
        : "=qm" (flag) : "i" (bit));
  return flag;


}
static inline __attribute__((always_inline)) __attribute__((pure)) bool _static_cpu_has_safe(u16 bit)
{
  u8 flag;

  asm ("1: movb $2,%0\n"
        "2:\n"
        ".section .altinstructions,\"a\"\n"
        " .long 1b - .\n"
        " .long 3f - .\n"
        " .word %P2\n"
        " .byte 2b - 1b\n"
        " .byte 4f - 3f\n"
        ".previous\n"
        ".section .discard,\"aw\",@progbits\n"
        " .byte 0xff + (4f-3f) - (2b-1b)\n"
        ".previous\n"
        ".section .altinstr_replacement,\"ax\"\n"
        "3: movb $0,%0\n"
        "4:\n"
        ".previous\n"
        ".section .altinstructions,\"a\"\n"
        " .long 1b - .\n"
        " .long 5f - .\n"
        " .word %P1\n"
        " .byte 4b - 3b\n"
        " .byte 6f - 5f\n"
        ".previous\n"
        ".section .discard,\"aw\",@progbits\n"
        " .byte 0xff + (6f-5f) - (4b-3b)\n"
        ".previous\n"
        ".section .altinstr_replacement,\"ax\"\n"
        "5: movb $1,%0\n"
        "6:\n"
        ".previous\n"
        : "=qm" (flag)
        : "i" (bit), "i" ((3*32+21)));
  return (flag == 2 ? __static_cpu_has_safe(bit) : flag);

}
struct paravirt_patch_site;

void apply_paravirt(struct paravirt_patch_site *start,
      struct paravirt_patch_site *end);
extern void *text_poke_early(void *addr, void *opcode, size_t len);
extern void *text_poke(void *addr, void *opcode, size_t len);
extern int poke_int3_handler(struct pt_regs *regs);
extern void *text_poke_bp(void *addr, void *opcode, size_t len, void *handler);
static inline __attribute__((always_inline)) void
set_bit(long nr, unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "orb %1,%0"
   : "+m" (*( long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)(1 << ((nr) & 7)))
   : "memory");
 } else {
  asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "bts %1,%0"
   : "+m" (*( long *) (addr)) : "Ir" (nr) : "memory");
 }
}
static inline void __set_bit(long nr, unsigned long *addr)
{
 asm ("bts %1,%0" : "+m" (*( long *) (addr)) : "Ir" (nr) : "memory");
}
static inline __attribute__((always_inline)) void
clear_bit(long nr, unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "andb %1,%0"
   : "+m" (*( long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)~(1 << ((nr) & 7))));
 } else {
  asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btr %1,%0"
   : "+m" (*( long *) (addr))
   : "Ir" (nr));
 }
}
static inline void clear_bit_unlock(long nr, unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");
 clear_bit(nr, addr);
}

static inline void __clear_bit(long nr, unsigned long *addr)
{
 asm ("btr %1,%0" : "+m" (*( long *) (addr)) : "Ir" (nr));
}
static inline void __clear_bit_unlock(long nr, unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");
 __clear_bit(nr, addr);
}
static inline void __change_bit(long nr, unsigned long *addr)
{
 asm ("btc %1,%0" : "+m" (*( long *) (addr)) : "Ir" (nr));
}
static inline void change_bit(long nr, unsigned long *addr)
{
 if ((__builtin_constant_p(nr))) {
  asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xorb %1,%0"
   : "+m" (*( long *) ((void *)(addr) + ((nr)>>3)))
   : "iq" ((u8)(1 << ((nr) & 7))));
 } else {
  asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btc %1,%0"
   : "+m" (*( long *) (addr))
   : "Ir" (nr));
 }
}
static inline int test_and_set_bit(long nr, unsigned long *addr)
{
 do { char c; asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "bts" " %2, " "%0" "; set" "c" " %1" : "+m" (*addr), "=qm" (c) : "Ir" (nr) : "memory"); return c != 0; } while (0);
}
static inline __attribute__((always_inline)) int
test_and_set_bit_lock(long nr, unsigned long *addr)
{
 return test_and_set_bit(nr, addr);
}
static inline int __test_and_set_bit(long nr, unsigned long *addr)
{
 int oldbit;

 asm("bts %2,%1\n\t"
     "sbb %0,%0"
     : "=r" (oldbit), "+m" (*( long *) (addr))
     : "Ir" (nr));
 return oldbit;
}
static inline int test_and_clear_bit(long nr, unsigned long *addr)
{
 do { char c; asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btr" " %2, " "%0" "; set" "c" " %1" : "+m" (*addr), "=qm" (c) : "Ir" (nr) : "memory"); return c != 0; } while (0);
}
static inline int __test_and_clear_bit(long nr, unsigned long *addr)
{
 int oldbit;

 asm ("btr %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit), "+m" (*( long *) (addr))
       : "Ir" (nr));
 return oldbit;
}


static inline int __test_and_change_bit(long nr, unsigned long *addr)
{
 int oldbit;

 asm ("btc %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit), "+m" (*( long *) (addr))
       : "Ir" (nr) : "memory");

 return oldbit;
}
static inline int test_and_change_bit(long nr, unsigned long *addr)
{
 do { char c; asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "btc" " %2, " "%0" "; set" "c" " %1" : "+m" (*addr), "=qm" (c) : "Ir" (nr) : "memory"); return c != 0; } while (0);
}

static inline __attribute__((always_inline)) int constant_test_bit(long nr, unsigned long *addr)
{
 return ((1UL << (nr & (64 -1))) &
  (addr[nr >> 6])) != 0;
}

static inline int variable_test_bit(long nr, unsigned long *addr)
{
 int oldbit;

 asm ("bt %2,%1\n\t"
       "sbb %0,%0"
       : "=r" (oldbit)
       : "m" (*(unsigned long *)addr), "Ir" (nr));

 return oldbit;
}
static inline unsigned long __ffs(unsigned long word)
{
 asm("rep; bsf %1,%0"
  : "=r" (word)
  : "rm" (word));
 return word;
}







static inline unsigned long ffz(unsigned long word)
{
 asm("rep; bsf %1,%0"
  : "=r" (word)
  : "r" (~word));
 return word;
}







static inline unsigned long __fls(unsigned long word)
{
 asm("bsr %1,%0"
     : "=r" (word)
     : "rm" (word));
 return word;
}
static inline int ffs(int x)
{
 int r;
 asm("bsfl %1,%0"
     : "=r" (r)
     : "rm" (x), "0" (-1));
 return r + 1;
}
static inline int fls(int x)
{
 int r;
 asm("bsrl %1,%0"
     : "=r" (r)
     : "rm" (x), "0" (-1));
 return r + 1;
}
static inline __attribute__((always_inline)) int fls64(__u64 x)
{
 int bitpos = -1;





 asm("bsrq %1,%q0"
     : "+r" (bitpos)
     : "rm" (x));
 return bitpos + 1;
}




extern unsigned long find_next_bit( unsigned long *addr, unsigned long
  size, unsigned long offset);
extern unsigned long find_next_zero_bit( unsigned long *addr, unsigned
  long size, unsigned long offset);
extern unsigned long find_first_bit( unsigned long *addr,
        unsigned long size);
extern unsigned long find_first_zero_bit( unsigned long *addr,
      unsigned long size);

static inline int sched_find_first_bit( unsigned long *b)
{

 if (b[0])
  return __ffs(b[0]);
 return __ffs(b[1]) + 64;
}



static inline unsigned int __arch_hweight32(unsigned int w)
{
 unsigned int res = 0;

 asm ("661:\n\t" "call __sw_hweight32" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(4*32+23)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0xf3,0x40,0x0f,0xb8,0xc7" "\n" "664""1" ":\n\t" ".popsection"
       : "=""a" (res)
       : "D" (w));

 return res;
}

static inline unsigned int __arch_hweight16(unsigned int w)
{
 return __arch_hweight32(w & 0xffff);
}

static inline unsigned int __arch_hweight8(unsigned int w)
{
 return __arch_hweight32(w & 0xff);
}

static inline unsigned long __arch_hweight64(__u64 w)
{
 unsigned long res = 0;
 asm ("661:\n\t" "call _Z14__sw_hweight64y" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(4*32+23)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0xf3,0x48,0x0f,0xb8,0xc7" "\n" "664""1" ":\n\t" ".popsection"
       : "=""a" (res)
       : "D" (w));



 return res;
}


























static inline __attribute__((__const__)) __u32 __arch_swab32(__u32 val)
{
 asm("bswapl %0" : "=r" (val) : "0" (val));
 return val;
}


static inline __attribute__((__const__)) __u64 __arch_swab64(__u64 val)
{
 asm("bswapq %0" : "=r" (val) : "0" (val));
 return val;

}
static inline __attribute__((__const__)) __u16 __fswab16(__u16 val)
{

 return __builtin_bswap16(val);





}

static inline __attribute__((__const__)) __u32 __fswab32(__u32 val)
{

 return __builtin_bswap32(val);





}

static inline __attribute__((__const__)) __u64 __fswab64(__u64 val)
{

 return __builtin_bswap64(val);
}

static inline __attribute__((__const__)) __u32 __fswahw32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x0000ffffUL) << 16) | (((__u32)(val) & (__u32)0xffff0000UL) >> 16)));

}

static inline __attribute__((__const__)) __u32 __fswahb32(__u32 val)
{



 return ((__u32)( (((__u32)(val) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(val) & (__u32)0xff00ff00UL) >> 8)));

}
static inline __u16 __swab16p( __u16 *p)
{



 return (__builtin_constant_p((__u16)(*p)) ? ((__u16)( (((__u16)(*p) & (__u16)0x00ffU) << 8) | (((__u16)(*p) & (__u16)0xff00U) >> 8))) : __fswab16(*p));

}





static inline __u32 __swab32p( __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x000000ffUL) << 24) | (((__u32)(*p) & (__u32)0x0000ff00UL) << 8) | (((__u32)(*p) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(*p) & (__u32)0xff000000UL) >> 24))) : __fswab32(*p));

}





static inline __u64 __swab64p( __u64 *p)
{



 return (__builtin_constant_p((__u64)(*p)) ? ((__u64)( (((__u64)(*p) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(*p) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(*p) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(*p) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(*p) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(*p) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(*p) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(*p) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(*p));

}







static inline __u32 __swahw32p( __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x0000ffffUL) << 16) | (((__u32)(*p) & (__u32)0xffff0000UL) >> 16))) : __fswahw32(*p));

}







static inline __u32 __swahb32p( __u32 *p)
{



 return (__builtin_constant_p((__u32)(*p)) ? ((__u32)( (((__u32)(*p) & (__u32)0x00ff00ffUL) << 8) | (((__u32)(*p) & (__u32)0xff00ff00UL) >> 8))) : __fswahb32(*p));

}





static inline void __swab16s(__u16 *p)
{



 *p = __swab16p(p);

}




static inline void __swab32s(__u32 *p)
{



 *p = __swab32p(p);

}





static inline void __swab64s(__u64 *p)
{



 *p = __swab64p(p);

}







static inline void __swahw32s(__u32 *p)
{



 *p = __swahw32p(p);

}







static inline void __swahb32s(__u32 *p)
{



 *p = __swahb32p(p);

}
static inline __le64 __cpu_to_le64p( __u64 *p)
{
 return ( __le64)*p;
}
static inline __u64 __le64_to_cpup( __le64 *p)
{
 return ( __u64)*p;
}
static inline __le32 __cpu_to_le32p( __u32 *p)
{
 return ( __le32)*p;
}
static inline __u32 __le32_to_cpup( __le32 *p)
{
 return ( __u32)*p;
}
static inline __le16 __cpu_to_le16p( __u16 *p)
{
 return ( __le16)*p;
}
static inline __u16 __le16_to_cpup( __le16 *p)
{
 return ( __u16)*p;
}
static inline __be64 __cpu_to_be64p( __u64 *p)
{
 return ( __be64)__swab64p(p);
}
static inline __u64 __be64_to_cpup( __be64 *p)
{
 return __swab64p((__u64 *)p);
}
static inline __be32 __cpu_to_be32p( __u32 *p)
{
 return ( __be32)__swab32p(p);
}
static inline __u32 __be32_to_cpup( __be32 *p)
{
 return __swab32p((__u32 *)p);
}
static inline __be16 __cpu_to_be16p( __u16 *p)
{
 return ( __be16)__swab16p(p);
}
static inline __u16 __be16_to_cpup( __be16 *p)
{
 return __swab16p((__u16 *)p);
}

static inline void le16_add_cpu(__le16 *var, u16 val)
{
 *var = (( __le16)(__u16)((( __u16)(__le16)(*var)) + val));
}

static inline void le32_add_cpu(__le32 *var, u32 val)
{
 *var = (( __le32)(__u32)((( __u32)(__le32)(*var)) + val));
}

static inline void le64_add_cpu(__le64 *var, u64 val)
{
 *var = (( __le64)(__u64)((( __u64)(__le64)(*var)) + val));
}

static inline void be16_add_cpu(__be16 *var, u16 val)
{
 *var = (( __be16)(__builtin_constant_p((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))) ? ((__u16)( (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0x00ffU) << 8) | (((__u16)(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val)) & (__u16)0xff00U) >> 8))) : __fswab16(((__builtin_constant_p((__u16)(( __u16)(__be16)(*var))) ? ((__u16)( (((__u16)(( __u16)(__be16)(*var)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(*var)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(*var))) + val))));
}

static inline void be32_add_cpu(__be32 *var, u32 val)
{
 *var = (( __be32)(__builtin_constant_p((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))) ? ((__u32)( (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x000000ffUL) << 24) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val)) & (__u32)0xff000000UL) >> 24))) : __fswab32(((__builtin_constant_p((__u32)(( __u32)(__be32)(*var))) ? ((__u32)( (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(*var)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(*var))) + val))));
}

static inline void be64_add_cpu(__be64 *var, u64 val)
{
 *var = (( __be64)(__builtin_constant_p((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))) ? ((__u64)( (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((__builtin_constant_p((__u64)(( __u64)(__be64)(*var))) ? ((__u64)( (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(*var)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(*var))) + val))));
}





static inline unsigned long find_next_zero_bit_le( void *addr,
  unsigned long size, unsigned long offset)
{



 return find_next_zero_bit((unsigned long *)addr, size, offset);

}

static inline unsigned long find_next_bit_le( void *addr,
  unsigned long size, unsigned long offset)
{



 return find_next_bit((unsigned long *)addr, size, offset);

}

static inline unsigned long find_first_zero_bit_le( void *addr,
  unsigned long size)
{



 return find_first_zero_bit((unsigned long *)addr, size);

}
static inline int test_bit_le(int nr, void *addr)
{



        return (__builtin_constant_p((nr ^ 0)) ? constant_test_bit((nr ^ 0), ((unsigned long *)addr)) : variable_test_bit((nr ^ 0), ((unsigned long *)addr)));

}

static inline void set_bit_le(int nr, void *addr)
{



 set_bit(nr ^ 0, (unsigned long *)addr);

}

static inline void clear_bit_le(int nr, void *addr)
{



 clear_bit(nr ^ 0, (unsigned long *)addr);

}

static inline void __set_bit_le(int nr, void *addr)
{



 __set_bit(nr ^ 0, (unsigned long *)addr);

}

static inline void __clear_bit_le(int nr, void *addr)
{



 __clear_bit(nr ^ 0, (unsigned long *)addr);

}

static inline int test_and_set_bit_le(int nr, void *addr)
{



 return test_and_set_bit(nr ^ 0, (unsigned long *)addr);

}

static inline int test_and_clear_bit_le(int nr, void *addr)
{



 return test_and_clear_bit(nr ^ 0, (unsigned long *)addr);

}

static inline int __test_and_set_bit_le(int nr, void *addr)
{



 return __test_and_set_bit(nr ^ 0, (unsigned long *)addr);

}

static inline int __test_and_clear_bit_le(int nr, void *addr)
{



 return __test_and_clear_bit(nr ^ 0, (unsigned long *)addr);

}

static __inline__ int get_bitmask_order(unsigned int count)
{
 int order;

 order = fls(count);
 return order;
}

static __inline__ int get_count_order(unsigned int count)
{
 int order;

 order = fls(count) - 1;
 if (count & (count - 1))
  order++;
 return order;
}

static inline unsigned long hweight_long(unsigned long w)
{
 return sizeof(w) == 4 ? (__builtin_constant_p(w) ? ((( (!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))) ) + ( (!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7))) )) + (( (!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))) ) + ( (!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))) ))) : __arch_hweight32(w)) : (__builtin_constant_p(w) ? (((( (!!((w) & (1ULL << 0))) + (!!((w) & (1ULL << 1))) + (!!((w) & (1ULL << 2))) + (!!((w) & (1ULL << 3))) + (!!((w) & (1ULL << 4))) + (!!((w) & (1ULL << 5))) + (!!((w) & (1ULL << 6))) + (!!((w) & (1ULL << 7))) ) + ( (!!(((w) >> 8) & (1ULL << 0))) + (!!(((w) >> 8) & (1ULL << 1))) + (!!(((w) >> 8) & (1ULL << 2))) + (!!(((w) >> 8) & (1ULL << 3))) + (!!(((w) >> 8) & (1ULL << 4))) + (!!(((w) >> 8) & (1ULL << 5))) + (!!(((w) >> 8) & (1ULL << 6))) + (!!(((w) >> 8) & (1ULL << 7))) )) + (( (!!(((w) >> 16) & (1ULL << 0))) + (!!(((w) >> 16) & (1ULL << 1))) + (!!(((w) >> 16) & (1ULL << 2))) + (!!(((w) >> 16) & (1ULL << 3))) + (!!(((w) >> 16) & (1ULL << 4))) + (!!(((w) >> 16) & (1ULL << 5))) + (!!(((w) >> 16) & (1ULL << 6))) + (!!(((w) >> 16) & (1ULL << 7))) ) + ( (!!((((w) >> 16) >> 8) & (1ULL << 0))) + (!!((((w) >> 16) >> 8) & (1ULL << 1))) + (!!((((w) >> 16) >> 8) & (1ULL << 2))) + (!!((((w) >> 16) >> 8) & (1ULL << 3))) + (!!((((w) >> 16) >> 8) & (1ULL << 4))) + (!!((((w) >> 16) >> 8) & (1ULL << 5))) + (!!((((w) >> 16) >> 8) & (1ULL << 6))) + (!!((((w) >> 16) >> 8) & (1ULL << 7))) ))) + ((( (!!(((w) >> 32) & (1ULL << 0))) + (!!(((w) >> 32) & (1ULL << 1))) + (!!(((w) >> 32) & (1ULL << 2))) + (!!(((w) >> 32) & (1ULL << 3))) + (!!(((w) >> 32) & (1ULL << 4))) + (!!(((w) >> 32) & (1ULL << 5))) + (!!(((w) >> 32) & (1ULL << 6))) + (!!(((w) >> 32) & (1ULL << 7))) ) + ( (!!((((w) >> 32) >> 8) & (1ULL << 0))) + (!!((((w) >> 32) >> 8) & (1ULL << 1))) + (!!((((w) >> 32) >> 8) & (1ULL << 2))) + (!!((((w) >> 32) >> 8) & (1ULL << 3))) + (!!((((w) >> 32) >> 8) & (1ULL << 4))) + (!!((((w) >> 32) >> 8) & (1ULL << 5))) + (!!((((w) >> 32) >> 8) & (1ULL << 6))) + (!!((((w) >> 32) >> 8) & (1ULL << 7))) )) + (( (!!((((w) >> 32) >> 16) & (1ULL << 0))) + (!!((((w) >> 32) >> 16) & (1ULL << 1))) + (!!((((w) >> 32) >> 16) & (1ULL << 2))) + (!!((((w) >> 32) >> 16) & (1ULL << 3))) + (!!((((w) >> 32) >> 16) & (1ULL << 4))) + (!!((((w) >> 32) >> 16) & (1ULL << 5))) + (!!((((w) >> 32) >> 16) & (1ULL << 6))) + (!!((((w) >> 32) >> 16) & (1ULL << 7))) ) + ( (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 0))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 1))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 2))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 3))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 4))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 5))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 6))) + (!!(((((w) >> 32) >> 16) >> 8) & (1ULL << 7))) )))) : __arch_hweight64(w));
}






static inline __u64 rol64(__u64 word, unsigned int shift)
{
 return (word << shift) | (word >> (64 - shift));
}






static inline __u64 ror64(__u64 word, unsigned int shift)
{
 return (word >> shift) | (word << (64 - shift));
}






static inline __u32 rol32(__u32 word, unsigned int shift)
{
 return (word << shift) | (word >> (32 - shift));
}






static inline __u32 ror32(__u32 word, unsigned int shift)
{
 return (word >> shift) | (word << (32 - shift));
}






static inline __u16 rol16(__u16 word, unsigned int shift)
{
 return (word << shift) | (word >> (16 - shift));
}






static inline __u16 ror16(__u16 word, unsigned int shift)
{
 return (word >> shift) | (word << (16 - shift));
}






static inline __u8 rol8(__u8 word, unsigned int shift)
{
 return (word << shift) | (word >> (8 - shift));
}






static inline __u8 ror8(__u8 word, unsigned int shift)
{
 return (word >> shift) | (word << (8 - shift));
}






static inline __s32 sign_extend32(__u32 value, int index)
{
 __u8 shift = 31 - index;
 return (__s32)(value << shift) >> shift;
}

static inline unsigned fls_long(unsigned long l)
{
 if (sizeof(l) == 4)
  return fls(l);
 return fls64(l);
}
static inline unsigned long __ffs64(u64 word)
{






 return __ffs((unsigned long)word);
}
extern unsigned long find_last_bit( unsigned long *addr,
       unsigned long size);
extern __attribute__((, noreturn))
int ____ilog2_NaN(void);
static inline __attribute__(())
int __ilog2_u32(u32 n)
{
 return fls(n) - 1;
}



static inline __attribute__(())
int __ilog2_u64(u64 n)
{
 return fls64(n) - 1;
}







static inline __attribute__(())
bool is_power_of_2(unsigned long n)
{
 return (n != 0 && ((n & (n - 1)) == 0));
}




static inline __attribute__(())
unsigned long __roundup_pow_of_two(unsigned long n)
{
 return 1UL << fls_long(n - 1);
}




static inline __attribute__(())
unsigned long __rounddown_pow_of_two(unsigned long n)
{
 return 1UL << (fls_long(n) - 1);
}








extern char linux_banner[];
extern char linux_proc_banner[];

static inline int printk_get_level( char *buffer)
{
 if (buffer[0] == '\001' && buffer[1]) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'd':
   return buffer[1];
  }
 }
 return 0;
}

static inline char *printk_skip_level( char *buffer)
{
 if (printk_get_level(buffer)) {
  switch (buffer[1]) {
  case '0' ... '7':
  case 'd':
   return buffer + 2;
  }
 }
 return buffer;
}

extern int console_printk[];






static inline void console_silent(void)
{
 (console_printk[0]) = 0;
}

static inline void console_verbose(void)
{
 if ((console_printk[0]))
  (console_printk[0]) = 15;
}

struct va_format {
  template <typename, int = 0> struct __BYPASSva_format {};
  template <typename, int> friend struct __BYPASSva_format;
 char *fmt;
 va_list *va;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline __attribute__((format(printf, 1, 2)))
int no_printk( char *fmt, ...)
{
 return 0;
}


extern __attribute__((format(printf, 1, 2)))
void early_printk( char *fmt, ...);
void early_vprintk( char *fmt, va_list ap);






 __attribute__((format(printf, 5, 0)))
int vprintk_emit(int facility, int level,
   char *dict, size_t dictlen,
   char *fmt, va_list args);

 __attribute__((format(printf, 1, 0)))
int vprintk( char *fmt, va_list args);

 __attribute__((format(printf, 5, 6))) __attribute__((__cold__))
 int printk_emit(int facility, int level,
      char *dict, size_t dictlen,
      char *fmt, ...);








extern "C" {

extern void printf(char *str, ...);
extern void *malloc(unsigned long size);
extern void free(void *ptr);

}







__attribute__((format(printf, 1, 2))) __attribute__((__cold__)) int printk_sched( char *fmt, ...);






extern int __printk_ratelimit( char *func);

extern bool printk_timed_ratelimit(unsigned long *caller_jiffies,
       unsigned int interval_msec);

extern int printk_delay_msec;
extern int dmesg_restrict;
extern int kptr_restrict;

extern void wake_up_klogd(void);

void log_buf_kexec_setup(void);
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) setup_log_buf(int early);
void dump_stack_set_arch_desc( char *fmt, ...);
void dump_stack_print_info( char *log_lvl);
void show_regs_print_info( char *log_lvl);
extern void dump_stack(void) __attribute__((__cold__));
struct _ddebug {
  template <typename, int = 0> struct __BYPASS_ddebug {};
  template <typename, int> friend struct __BYPASS_ddebug;




 char *modname;
 char *function;
 char *filename;
 char *format;
 unsigned int lineno:18;
 unsigned int flags:8;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((aligned(8)));


int ddebug_add_module(struct _ddebug *tab, unsigned int n,
    char *modname);

extern char *strndup_user( char *, long);
extern void *memdup_user( void *, size_t);







static inline __attribute__((always_inline)) void *__inline_memcpy(void *to, void *from, size_t n)
{
 unsigned long d0, d1, d2;
 asm ("rep ; movsl\n\t"
       "testb $2,%b4\n\t"
       "je 1f\n\t"
       "movsw\n"
       "1:\ttestb $1,%b4\n\t"
       "je 2f\n\t"
       "movsb\n"
       "2:"
       : "=&c" (d0), "=&D" (d1), "=&S" (d2)
       : "0" (n / 4), "q" (n), "1" ((long)to), "2" ((long)from)
       : "memory");
 return to;
}







extern void *memcpy(void *to, void *from, size_t len);
void *memset(void *s, int c, size_t n);


void *memmove(void *dest, void *src, size_t count);

int memcmp( void *cs, void *ct, size_t count);
size_t strlen( char *s);
char *strcpy(char *dest, char *src);
char *strcat(char *dest, char *src);
int strcmp( char *cs, char *ct);


extern char * strcpy(char *, char *);


extern char * strncpy(char *, char *, __kernel_size_t);


size_t strlcpy(char *, char *, size_t);


extern char * strcat(char *, char *);


extern char * strncat(char *, char *, __kernel_size_t);


extern size_t strlcat(char *, char *, __kernel_size_t);


extern int strcmp( char *, char *);


extern int strncmp( char *, char *,__kernel_size_t);


extern int strnicmp( char *, char *, __kernel_size_t);


extern int strcasecmp( char *s1, char *s2);


extern int strncasecmp( char *s1, char *s2, size_t n);


extern char * strchr( char *,int);


extern char * strnchr( char *, size_t, int);


extern char * strrchr( char *,int);

extern char * skip_spaces( char *);

extern char *strim(char *);

static inline char *strstrip(char *str)
{
 return strim(str);
}


extern char * strstr( char *, char *);


extern char * strnstr( char *, char *, size_t);


extern __kernel_size_t strlen( char *);


extern __kernel_size_t strnlen( char *,__kernel_size_t);


extern char * strpbrk( char *, char *);


extern char * strsep(char **, char *);


extern __kernel_size_t strspn( char *, char *);


extern __kernel_size_t strcspn( char *, char *);
extern void * memscan(void *,int,__kernel_size_t);


extern int memcmp( void *, void *,__kernel_size_t);


extern void * memchr( void *,int,__kernel_size_t);

void *memchr_inv( void *s, int c, size_t n);

extern char *kstrdup( char *s, gfp_t gfp);
extern char *kstrndup( char *s, size_t len, gfp_t gfp);
extern void *kmemdup( void *src, size_t len, gfp_t gfp);

extern char **argv_split(gfp_t gfp, char *str, int *argcp);
extern void argv_free(char **argv);

extern bool sysfs_streq( char *s1, char *s2);
extern int strtobool( char *s, bool *res);


int vbin_printf(u32 *bin_buf, size_t size, char *fmt, va_list args);
int bstr_printf(char *buf, size_t size, char *fmt, u32 *bin_buf);
int bprintf(u32 *bin_buf, size_t size, char *fmt, ...) __attribute__((format(printf, 3, 4)));


extern ssize_t memory_read_from_buffer(void *to, size_t count, loff_t *ppos,
   void *from, size_t available);






static inline bool strstarts( char *str, char *prefix)
{
 return strncmp(str, prefix, strlen(prefix)) == 0;
}

extern size_t memweight( void *ptr, size_t bytes);






static inline char *kbasename( char *path)
{
 char *tail = strrchr(path, '/');
 return tail ? tail + 1 : path;
}


static inline int ddebug_remove_module( char *mod)
{
 return 0;
}

static inline int ddebug_dyndbg_module_param_cb(char *param, char *val,
      char *modname)
{
 if (strstr(param, "dyndbg")) {

  printf("\001" "4" "dyndbg param is supported only in "
   "CONFIG_DYNAMIC_DEBUG builds\n");
  return 0;
 }
 return -22;
}
extern struct file_operations kmsg_fops;

enum {
 DUMP_PREFIX_NONE,
 DUMP_PREFIX_ADDRESS,
 DUMP_PREFIX_OFFSET
};
extern void hex_dump_to_buffer( void *buf, size_t len,
          int rowsize, int groupsize,
          char *linebuf, size_t linebuflen, bool ascii);

extern void print_hex_dump( char *level, char *prefix_str,
      int prefix_type, int rowsize, int groupsize,
      void *buf, size_t len, bool ascii);




extern void print_hex_dump_bytes( char *prefix_str, int prefix_type,
     void *buf, size_t len);











struct sysinfo {
  template <typename, int = 0> struct __BYPASSsysinfo {};
  template <typename, int> friend struct __BYPASSsysinfo;
 __kernel_long_t uptime;
 __kernel_ulong_t loads[3];
 __kernel_ulong_t totalram;
 __kernel_ulong_t freeram;
 __kernel_ulong_t sharedram;
 __kernel_ulong_t bufferram;
 __kernel_ulong_t totalswap;
 __kernel_ulong_t freeswap;
 __u16 procs;
 __u16 pad;
 __kernel_ulong_t totalhigh;
 __kernel_ulong_t freehigh;
 __u32 mem_unit;
 char _f[20-2*sizeof(__kernel_ulong_t)-sizeof(__u32)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct completion;
struct pt_regs;
struct user;


extern int _cond_resched(void);
  static inline void __might_sleep( char *file, int line,
       int preempt_offset) { }
static inline void might_fault(void) { }


extern struct atomic_notifier_head panic_notifier_list;
extern long (*panic_blink)(int state);
__attribute__((format(printf, 1, 2)))
void panic( char *fmt, ...)
 __attribute__((noreturn)) __attribute__((__cold__));
extern void oops_enter(void);
extern void oops_exit(void);
void print_oops_end_marker(void);
extern int oops_may_print(void);
void do_exit(long error_code)
 __attribute__((noreturn));
void complete_and_exit(struct completion *, long)
 __attribute__((noreturn));


int _kstrtoul( char *s, unsigned int base, unsigned long *res);
int _kstrtol( char *s, unsigned int base, long *res);

int kstrtoull( char *s, unsigned int base, unsigned long long *res);
int kstrtoll( char *s, unsigned int base, long long *res);
static inline int kstrtoul( char *s, unsigned int base, unsigned long *res)
{




 if (sizeof(unsigned long) == sizeof(unsigned long long) &&
     __alignof__(unsigned long) == __alignof__(unsigned long long))
  return kstrtoull(s, base, (unsigned long long *)res);
 else
  return _kstrtoul(s, base, res);
}
static inline int kstrtol( char *s, unsigned int base, long *res)
{




 if (sizeof(long) == sizeof(long long) &&
     __alignof__(long) == __alignof__(long long))
  return kstrtoll(s, base, (long long *)res);
 else
  return _kstrtol(s, base, res);
}

int kstrtouint( char *s, unsigned int base, unsigned int *res);
int kstrtoint( char *s, unsigned int base, int *res);

static inline int kstrtou64( char *s, unsigned int base, u64 *res)
{
 return kstrtoull(s, base, res);
}

static inline int kstrtos64( char *s, unsigned int base, s64 *res)
{
 return kstrtoll(s, base, res);
}

static inline int kstrtou32( char *s, unsigned int base, u32 *res)
{
 return kstrtouint(s, base, res);
}

static inline int kstrtos32( char *s, unsigned int base, s32 *res)
{
 return kstrtoint(s, base, res);
}

int kstrtou16( char *s, unsigned int base, u16 *res);
int kstrtos16( char *s, unsigned int base, s16 *res);
int kstrtou8( char *s, unsigned int base, u8 *res);
int kstrtos8( char *s, unsigned int base, s8 *res);

int kstrtoull_from_user( char *s, size_t count, unsigned int base, unsigned long long *res);
int kstrtoll_from_user( char *s, size_t count, unsigned int base, long long *res);
int kstrtoul_from_user( char *s, size_t count, unsigned int base, unsigned long *res);
int kstrtol_from_user( char *s, size_t count, unsigned int base, long *res);
int kstrtouint_from_user( char *s, size_t count, unsigned int base, unsigned int *res);
int kstrtoint_from_user( char *s, size_t count, unsigned int base, int *res);
int kstrtou16_from_user( char *s, size_t count, unsigned int base, u16 *res);
int kstrtos16_from_user( char *s, size_t count, unsigned int base, s16 *res);
int kstrtou8_from_user( char *s, size_t count, unsigned int base, u8 *res);
int kstrtos8_from_user( char *s, size_t count, unsigned int base, s8 *res);

static inline int kstrtou64_from_user( char *s, size_t count, unsigned int base, u64 *res)
{
 return kstrtoull_from_user(s, count, base, res);
}

static inline int kstrtos64_from_user( char *s, size_t count, unsigned int base, s64 *res)
{
 return kstrtoll_from_user(s, count, base, res);
}

static inline int kstrtou32_from_user( char *s, size_t count, unsigned int base, u32 *res)
{
 return kstrtouint_from_user(s, count, base, res);
}

static inline int kstrtos32_from_user( char *s, size_t count, unsigned int base, s32 *res)
{
 return kstrtoint_from_user(s, count, base, res);
}



extern unsigned long simple_strtoul( char *,char **,unsigned int);
extern long simple_strtol( char *,char **,unsigned int);
extern unsigned long long simple_strtoull( char *,char **,unsigned int);
extern long long simple_strtoll( char *,char **,unsigned int);





extern int num_to_str(char *buf, int size, unsigned long long num);



extern __attribute__((format(printf, 2, 3))) int sprintf(char *buf, char * fmt, ...);
extern __attribute__((format(printf, 2, 0))) int vsprintf(char *buf, char *, va_list);
extern __attribute__((format(printf, 3, 4)))
int snprintf(char *buf, size_t size, char *fmt, ...);
extern __attribute__((format(printf, 3, 0)))
int vsnprintf(char *buf, size_t size, char *fmt, va_list args);
extern __attribute__((format(printf, 3, 4)))
int scnprintf(char *buf, size_t size, char *fmt, ...);
extern __attribute__((format(printf, 3, 0)))
int vscnprintf(char *buf, size_t size, char *fmt, va_list args);
extern __attribute__((format(printf, 2, 3)))
char *kasprintf(gfp_t gfp, char *fmt, ...);
extern char *kvasprintf(gfp_t gfp, char *fmt, va_list args);

extern __attribute__((format(scanf, 2, 3)))
int sscanf( char *, char *, ...);
extern __attribute__((format(scanf, 2, 0)))
int vsscanf( char *, char *, va_list);

extern int get_option(char **str, int *pint);
extern char *get_options( char *str, int nints, int *ints);
extern unsigned long long memparse( char *ptr, char **retptr);

extern int core_kernel_text(unsigned long addr);
extern int core_kernel_data(unsigned long addr);
extern int __kernel_text_address(unsigned long addr);
extern int kernel_text_address(unsigned long addr);
extern int func_ptr_is_kernel_text(void *ptr);

struct pid;
extern struct pid *session_of_pgrp(struct pid *pgrp);

unsigned long int_sqrt(unsigned long);

extern void bust_spinlocks(int yes);
extern int oops_in_progress;
extern int panic_timeout;
extern int panic_on_oops;
extern int panic_on_unrecovered_nmi;
extern int panic_on_io_nmi;
extern int sysctl_panic_on_stackoverflow;
extern char *print_tainted(void);
enum lockdep_ok {
 LOCKDEP_STILL_OK,
 LOCKDEP_NOW_UNRELIABLE
};
extern void add_taint(unsigned flag, enum lockdep_ok);
extern int test_taint(unsigned flag);
extern unsigned long get_taint(void);
extern int root_mountflags;

extern bool early_boot_irqs_disabled;


extern enum system_states {
 SYSTEM_BOOTING,
 SYSTEM_RUNNING,
 SYSTEM_HALT,
 SYSTEM_POWER_OFF,
 SYSTEM_RESTART,
} system_state;
extern char hex_asc[];



static inline char *hex_byte_pack(char *buf, u8 byte)
{
 *buf++ = hex_asc[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc[((byte) & 0x0f)];
 return buf;
}

extern char hex_asc_upper[];



static inline char *hex_byte_pack_upper(char *buf, u8 byte)
{
 *buf++ = hex_asc_upper[((byte) & 0xf0) >> 4];
 *buf++ = hex_asc_upper[((byte) & 0x0f)];
 return buf;
}

static inline char * pack_hex_byte(char *buf, u8 byte)
{
 return hex_byte_pack(buf, byte);
}

extern int hex_to_bin(char ch);
extern int hex2bin(u8 *dst, char *src, size_t count);

int mac_pton( char *s, u8 *mac);
void tracing_off_permanent(void);




enum ftrace_dump_mode {
 DUMP_NONE,
 DUMP_ALL,
 DUMP_ORIG,
};


void tracing_on(void);
void tracing_off(void);
int tracing_is_on(void);
void tracing_snapshot(void);
void tracing_snapshot_alloc(void);

extern void tracing_start(void);
extern void tracing_stop(void);

static inline __attribute__((format(printf, 1, 2)))
void ____trace_printk_check_format( char *fmt, ...)
{
}
extern __attribute__((format(printf, 2, 3)))
int __trace_bprintk(unsigned long ip, char *fmt, ...);

extern __attribute__((format(printf, 2, 3)))
int __trace_printk(unsigned long ip, char *fmt, ...);
extern int __trace_bputs(unsigned long ip, char *str);
extern int __trace_puts(unsigned long ip, char *str, int size);

extern void trace_dump_stack(int skip);
extern int
__ftrace_vbprintk(unsigned long ip, char *fmt, va_list ap);

extern int
__ftrace_vprintk(unsigned long ip, char *fmt, va_list ap);

extern void ftrace_dump(enum ftrace_dump_mode oops_dump_mode);
extern void __bad_percpu_size(void);
static inline __attribute__((always_inline)) int x86_this_cpu_constant_test_bit(unsigned int nr,
                        unsigned long *addr)
{
 unsigned long *a = (unsigned long *)addr + nr / 64;


 return ((1UL << (nr % 64)) & ({ typeof((*a)) pfo_ret__; switch (sizeof((*a))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"(*a)); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(*a)); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(*a)); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(*a)); break; default: __bad_percpu_size(); } pfo_ret__; })) != 0;



}

static inline int x86_this_cpu_variable_test_bit(int nr,
                        unsigned long *addr)
{
 int oldbit;

 asm ("bt ""%%""gs"":" "%P" "2"",%1\n\t"
   "sbb %0,%0"
   : "=r" (oldbit)
   : "m" (*(unsigned long *)addr), "Ir" (nr));

 return oldbit;
}











extern unsigned long __per_cpu_offset[256];
extern void setup_per_cpu_areas(void);


extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) this_cpu_off;





enum bug_trap_type {
 BUG_TRAP_TYPE_NONE = 0,
 BUG_TRAP_TYPE_WARN = 1,
 BUG_TRAP_TYPE_BUG = 2,
};

struct pt_regs;
static inline int is_warning_bug( struct bug_entry *bug)
{



        return 0;

}

 struct bug_entry *find_bug(unsigned long bugaddr);

enum bug_trap_type report_bug(unsigned long bug_addr, struct pt_regs *regs);


int is_valid_bugaddr(unsigned long addr);

struct timespec;
struct compat_timespec;




struct restart_block {
  template <typename, int = 0> struct __BYPASSrestart_block {};
  template <typename, int> friend struct __BYPASSrestart_block;
 long (*fn)(struct restart_block *);
 union {

  struct {
   u32 *uaddr;
   u32 val;
   u32 flags;
   u32 bitset;
   u64 time;
   u32 *uaddr2;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} futex;

  struct {
   clockid_t clockid;
   struct timespec *rmtp;

   struct compat_timespec *compat_rmtp;

   u64 expires;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} nanosleep;

  struct {
   struct pollfd *ufds;
   int nfds;
   int has_timeout;
   unsigned long tv_sec;
   unsigned long tv_nsec;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} poll;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern long do_no_restart_syscall(struct restart_block *parm);


extern unsigned long max_pfn;
extern unsigned long phys_base;

static inline unsigned long __phys_addr_nodebug(unsigned long x)
{
 unsigned long y = x - (0xffffffff80000000UL);


 x = y + ((x > y) ? phys_base : ((0xffffffff80000000UL) - ((unsigned long)(0xffff880000000000UL))));

 return x;
}
void clear_page(void *page);
void copy_page(void *to, void *from);






struct page;




struct range {
  template <typename, int = 0> struct __BYPASSrange {};
  template <typename, int> friend struct __BYPASSrange;
 u64 start;
 u64 end;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int add_range(struct range *range, int az, int nr_range,
  u64 start, u64 end);


int add_range_with_merge(struct range *range, int az, int nr_range,
    u64 start, u64 end);

void subtract_range(struct range *range, int az, u64 start, u64 end);

int clean_sort_range(struct range *range, int az);

void sort_range(struct range *range, int nr_range);


static inline resource_size_t cap_resource(u64 val)
{
 if (val > ((resource_size_t)~0))
  return ((resource_size_t)~0);

 return val;
}
extern struct range pfn_mapped[];
extern int nr_pfn_mapped;

static inline void clear_user_page(void *page, unsigned long vaddr,
       struct page *pg)
{
 clear_page(page);
}

static inline void copy_user_page(void *to, void *from, unsigned long vaddr,
      struct page *topage)
{
 copy_page(to, from);
}
extern bool __virt_addr_valid(unsigned long kaddr);




static inline __attribute__((__const__))
int __get_order(unsigned long size)
{
 int order;

 size--;
 size >>= 12;



 order = fls64(size);

 return order;
}
struct task_struct;
struct exec_domain;






struct task_struct;
struct mm_struct;






struct vm86_regs {
  template <typename, int = 0> struct __BYPASSvm86_regs {};
  template <typename, int> friend struct __BYPASSvm86_regs;



 long ebx;
 long ecx;
 long edx;
 long esi;
 long edi;
 long ebp;
 long eax;
 long __null_ds;
 long __null_es;
 long __null_fs;
 long __null_gs;
 long orig_eax;
 long eip;
 unsigned short cs, __csh;
 long eflags;
 long esp;
 unsigned short ss, __ssh;



 unsigned short es, __esh;
 unsigned short ds, __dsh;
 unsigned short fs, __fsh;
 unsigned short gs, __gsh;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct revectored_struct {
  template <typename, int = 0> struct __BYPASSrevectored_struct {};
  template <typename, int> friend struct __BYPASSrevectored_struct;
 unsigned long __map[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct vm86_struct {
  template <typename, int = 0> struct __BYPASSvm86_struct {};
  template <typename, int> friend struct __BYPASSvm86_struct;
 struct vm86_regs regs;
 unsigned long flags;
 unsigned long screen_bitmap;
 unsigned long cpu_type;
 struct revectored_struct int_revectored;
 struct revectored_struct int21_revectored;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct vm86plus_info_struct {
  template <typename, int = 0> struct __BYPASSvm86plus_info_struct {};
  template <typename, int> friend struct __BYPASSvm86plus_info_struct;
 unsigned long force_return_for_pic:1;
 unsigned long vm86dbg_active:1;
 unsigned long vm86dbg_TFpendig:1;
 unsigned long unused:28;
 unsigned long is_vm86pus:1;
 unsigned char vm86dbg_intxxtab[32];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct vm86plus_struct {
  template <typename, int = 0> struct __BYPASSvm86plus_struct {};
  template <typename, int> friend struct __BYPASSvm86plus_struct;
 struct vm86_regs regs;
 unsigned long flags;
 unsigned long screen_bitmap;
 unsigned long cpu_type;
 struct revectored_struct int_revectored;
 struct revectored_struct int21_revectored;
 struct vm86plus_info_struct vm86plus;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct kernel_vm86_regs {
  template <typename, int = 0> struct __BYPASSkernel_vm86_regs {};
  template <typename, int> friend struct __BYPASSkernel_vm86_regs;



 struct pt_regs pt;



 unsigned short es, __esh;
 unsigned short ds, __dsh;
 unsigned short fs, __fsh;
 unsigned short gs, __gsh;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kernel_vm86_struct {
  template <typename, int = 0> struct __BYPASSkernel_vm86_struct {};
  template <typename, int> friend struct __BYPASSkernel_vm86_struct;
 struct kernel_vm86_regs regs;
 unsigned long flags;
 unsigned long screen_bitmap;
 unsigned long cpu_type;
 struct revectored_struct int_revectored;
 struct revectored_struct int21_revectored;
 struct vm86plus_info_struct vm86plus;
 struct pt_regs *regs32;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline int handle_vm86_trap(struct kernel_vm86_regs *a, long b, int c)
{
 return 0;
}
struct math_emu_info {
  template <typename, int = 0> struct __BYPASSmath_emu_info {};
  template <typename, int> friend struct __BYPASSmath_emu_info;
 long ___orig_eip;
 union {
  struct pt_regs *regs;
  struct kernel_vm86_regs *vm86;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct _fpx_sw_bytes {
  template <typename, int = 0> struct __BYPASS_fpx_sw_bytes {};
  template <typename, int> friend struct __BYPASS_fpx_sw_bytes;
 __u32 magic1;
 __u32 extended_size;


 __u64 xstate_bv;




 __u32 xstate_size;




 __u32 padding[7];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct _fpstate {
  template <typename, int = 0> struct __BYPASS_fpstate {};
  template <typename, int> friend struct __BYPASS_fpstate;
 __u16 cwd;
 __u16 swd;
 __u16 twd;

 __u16 fop;
 __u64 rip;
 __u64 rdp;
 __u32 mxcsr;
 __u32 mxcsr_mask;
 __u32 st_space[32];
 __u32 xmm_space[64];
 __u32 reserved2[12];
 union {
  __u32 reserved3[12];
  struct _fpx_sw_bytes sw_reserved;

 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct _xsave_hdr {
  template <typename, int = 0> struct __BYPASS_xsave_hdr {};
  template <typename, int> friend struct __BYPASS_xsave_hdr;
 __u64 xstate_bv;
 __u64 reserved1[2];
 __u64 reserved2[5];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct _ymmh_state {
  template <typename, int = 0> struct __BYPASS_ymmh_state {};
  template <typename, int> friend struct __BYPASS_ymmh_state;

 __u32 ymmh_space[64];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct _xstate {
  template <typename, int = 0> struct __BYPASS_xstate {};
  template <typename, int> friend struct __BYPASS_xstate;
 struct _fpstate fpstate;
 struct _xsave_hdr xstate_hdr;
 struct _ymmh_state ymmh;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct sigcontext {
  template <typename, int = 0> struct __BYPASSsigcontext {};
  template <typename, int> friend struct __BYPASSsigcontext;
 unsigned long r8;
 unsigned long r9;
 unsigned long r10;
 unsigned long r11;
 unsigned long r12;
 unsigned long r13;
 unsigned long r14;
 unsigned long r15;
 unsigned long di;
 unsigned long si;
 unsigned long bp;
 unsigned long bx;
 unsigned long dx;
 unsigned long ax;
 unsigned long cx;
 unsigned long sp;
 unsigned long ip;
 unsigned long flags;
 unsigned short cs;
 unsigned short gs;
 unsigned short fs;
 unsigned short __pad0;
 unsigned long err;
 unsigned long trapno;
 unsigned long oldmask;
 unsigned long cr2;
 void *fpstate;
 unsigned long reserved1[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct task_struct;

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct task_struct *) current_task;







extern struct task_struct *get_current(void);






















extern unsigned int __invalid_size_argument_for_IOC;







extern int __bitmap_empty( unsigned long *bitmap, int bits);
extern int __bitmap_full( unsigned long *bitmap, int bits);
extern int __bitmap_equal( unsigned long *bitmap1,
                 unsigned long *bitmap2, int bits);
extern void __bitmap_complement(unsigned long *dst, unsigned long *src,
   int bits);
extern void __bitmap_shift_right(unsigned long *dst,
                        unsigned long *src, int shift, int bits);
extern void __bitmap_shift_left(unsigned long *dst,
                        unsigned long *src, int shift, int bits);
extern int __bitmap_and(unsigned long *dst, unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern void __bitmap_or(unsigned long *dst, unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern void __bitmap_xor(unsigned long *dst, unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern int __bitmap_andnot(unsigned long *dst, unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern int __bitmap_intersects( unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern int __bitmap_subset( unsigned long *bitmap1,
   unsigned long *bitmap2, int bits);
extern int __bitmap_weight( unsigned long *bitmap, int bits);

extern void bitmap_set(unsigned long *map, int i, int len);
extern void bitmap_clear(unsigned long *map, int start, int nr);
extern unsigned long bitmap_find_next_zero_area(unsigned long *map,
      unsigned long size,
      unsigned long start,
      unsigned int nr,
      unsigned long align_mask);

extern int bitmap_scnprintf(char *buf, unsigned int len,
   unsigned long *src, int nbits);
extern int __bitmap_parse( char *buf, unsigned int buflen, int is_user,
   unsigned long *dst, int nbits);
extern int bitmap_parse_user( char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern int bitmap_scnlistprintf(char *buf, unsigned int len,
   unsigned long *src, int nbits);
extern int bitmap_parselist( char *buf, unsigned long *maskp,
   int nmaskbits);
extern int bitmap_parselist_user( char *ubuf, unsigned int ulen,
   unsigned long *dst, int nbits);
extern void bitmap_remap(unsigned long *dst, unsigned long *src,
  unsigned long *old, unsigned long *_new, int bits);
extern int bitmap_bitremap(int oldbit,
  unsigned long *old, unsigned long *_new, int bits);
extern void bitmap_onto(unsigned long *dst, unsigned long *orig,
  unsigned long *relmap, int bits);
extern void bitmap_fold(unsigned long *dst, unsigned long *orig,
  int sz, int bits);
extern int bitmap_find_free_region(unsigned long *bitmap, int bits, int order);
extern void bitmap_release_region(unsigned long *bitmap, int pos, int order);
extern int bitmap_allocate_region(unsigned long *bitmap, int pos, int order);
extern void bitmap_copy_le(void *dst, unsigned long *src, int nbits);
extern int bitmap_ord_to_pos( unsigned long *bitmap, int n, int bits);
static inline void bitmap_zero(unsigned long *dst, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = 0UL;
 else {
  int len = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))) * sizeof(unsigned long);
  memset(dst, 0, len);
 }
}

static inline void bitmap_fill(unsigned long *dst, int nbits)
{
 size_t nlongs = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)));
 if (!(__builtin_constant_p(nbits) && (nbits) <= 64)) {
  int len = (nlongs - 1) * sizeof(unsigned long);
  memset(dst, 0xff, len);
 }
 dst[nlongs - 1] = ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL );
}

static inline void bitmap_copy(unsigned long *dst, unsigned long *src,
   int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = *src;
 else {
  int len = (((nbits) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))) * sizeof(unsigned long);
  memcpy(dst, src, len);
 }
}

static inline int bitmap_and(unsigned long *dst, unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return (*dst = *src1 & *src2) != 0;
 return __bitmap_and(dst, src1, src2, nbits);
}

static inline void bitmap_or(unsigned long *dst, unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = *src1 | *src2;
 else
  __bitmap_or(dst, src1, src2, nbits);
}

static inline void bitmap_xor(unsigned long *dst, unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = *src1 ^ *src2;
 else
  __bitmap_xor(dst, src1, src2, nbits);
}

static inline int bitmap_andnot(unsigned long *dst, unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return (*dst = *src1 & ~(*src2)) != 0;
 return __bitmap_andnot(dst, src1, src2, nbits);
}

static inline void bitmap_complement(unsigned long *dst, unsigned long *src,
   int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = ~(*src) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL );
 else
  __bitmap_complement(dst, src, nbits);
}

static inline int bitmap_equal( unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return ! ((*src1 ^ *src2) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL ));
 else
  return __bitmap_equal(src1, src2, nbits);
}

static inline int bitmap_intersects( unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return ((*src1 & *src2) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL )) != 0;
 else
  return __bitmap_intersects(src1, src2, nbits);
}

static inline int bitmap_subset( unsigned long *src1,
   unsigned long *src2, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return ! ((*src1 & ~(*src2)) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL ));
 else
  return __bitmap_subset(src1, src2, nbits);
}

static inline int bitmap_empty( unsigned long *src, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return ! (*src & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL ));
 else
  return __bitmap_empty(src, nbits);
}

static inline int bitmap_full( unsigned long *src, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return ! (~(*src) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL ));
 else
  return __bitmap_full(src, nbits);
}

static inline int bitmap_weight( unsigned long *src, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  return hweight_long(*src & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL ));
 return __bitmap_weight(src, nbits);
}

static inline void bitmap_shift_right(unsigned long *dst,
   unsigned long *src, int n, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = *src >> n;
 else
  __bitmap_shift_right(dst, src, n, nbits);
}

static inline void bitmap_shift_left(unsigned long *dst,
   unsigned long *src, int n, int nbits)
{
 if ((__builtin_constant_p(nbits) && (nbits) <= 64))
  *dst = (*src << n) & ( ((nbits) % 64) ? (1UL<<((nbits) % 64))-1 : ~0UL );
 else
  __bitmap_shift_left(dst, src, n, nbits);
}

static inline int bitmap_parse( char *buf, unsigned int buflen,
   unsigned long *maskp, int nmaskbits)
{
 return __bitmap_parse(buf, buflen, 0, maskp, nmaskbits);
}


typedef struct cpumask {
  template <typename, int = 0> struct __BYPASScpumask {};
  template <typename, int> friend struct __BYPASScpumask; unsigned long bits[(((256) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} cpumask_t;
extern int nr_cpu_ids;
extern struct cpumask * cpu_possible_mask;
extern struct cpumask * cpu_online_mask;
extern struct cpumask * cpu_present_mask;
extern struct cpumask * cpu_active_mask;
static inline unsigned int cpumask_check(unsigned int cpu)
{



 return cpu;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_55_0 {
  typedef TJP__ZN7cpumask4bitsE_55_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_55(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_55_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline unsigned int cpumask_first( struct cpumask *srcp)
{
 return find_first_bit((__get__ZN7cpumask4bitsE_55((srcp)->bits)), 256);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_56_0 {
  typedef TJP__ZN7cpumask4bitsE_56_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_56(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_56_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline unsigned int cpumask_next(int n, struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_bit((__get__ZN7cpumask4bitsE_56((srcp)->bits)), 256, n+1);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_57_0 {
  typedef TJP__ZN7cpumask4bitsE_57_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_57(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_57_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline unsigned int cpumask_next_zero(int n, struct cpumask *srcp)
{

 if (n != -1)
  cpumask_check(n);
 return find_next_zero_bit((__get__ZN7cpumask4bitsE_57((srcp)->bits)), 256, n+1);
}

int cpumask_next_and(int n, struct cpumask *, struct cpumask *);
int cpumask_any_but( struct cpumask *mask, unsigned int cpu);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_58_0 {
  typedef TJP__ZN7cpumask4bitsE_58_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_58(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_58_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void cpumask_set_cpu(unsigned int cpu, struct cpumask *dstp)
{
 set_bit(cpumask_check(cpu), (__get__ZN7cpumask4bitsE_58((dstp)->bits)));
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_59_0 {
  typedef TJP__ZN7cpumask4bitsE_59_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_59(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_59_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void cpumask_clear_cpu(int cpu, struct cpumask *dstp)
{
 clear_bit(cpumask_check(cpu), (__get__ZN7cpumask4bitsE_59((dstp)->bits)));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_60_0 {
  typedef TJP__ZN7cpumask4bitsE_60_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_60(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_60_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpumask_test_and_set_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_set_bit(cpumask_check(cpu), (__get__ZN7cpumask4bitsE_60((cpumask)->bits)));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_61_0 {
  typedef TJP__ZN7cpumask4bitsE_61_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_61(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_61_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpumask_test_and_clear_cpu(int cpu, struct cpumask *cpumask)
{
 return test_and_clear_bit(cpumask_check(cpu), (__get__ZN7cpumask4bitsE_61((cpumask)->bits)));
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_62_0 {
  typedef TJP__ZN7cpumask4bitsE_62_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_62(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_62_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void cpumask_setall(struct cpumask *dstp)
{
 bitmap_fill((__get__ZN7cpumask4bitsE_62((dstp)->bits)), 256);
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_63_0 {
  typedef TJP__ZN7cpumask4bitsE_63_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_63(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_63_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void cpumask_clear(struct cpumask *dstp)
{
 bitmap_zero((__get__ZN7cpumask4bitsE_63((dstp)->bits)), 256);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_64_0 {
  typedef TJP__ZN7cpumask4bitsE_64_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_64(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_64_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_65_0 {
  typedef TJP__ZN7cpumask4bitsE_65_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_65(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_65_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_66_0 {
  typedef TJP__ZN7cpumask4bitsE_66_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_66(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_66_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpumask_and(struct cpumask *dstp,
          struct cpumask *src1p,
          struct cpumask *src2p)
{
 return bitmap_and((__get__ZN7cpumask4bitsE_64((dstp)->bits)), (__get__ZN7cpumask4bitsE_65((src1p)->bits)),
           (__get__ZN7cpumask4bitsE_66((src2p)->bits)), 256);
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_67_0 {
  typedef TJP__ZN7cpumask4bitsE_67_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_67(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_67_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_68_0 {
  typedef TJP__ZN7cpumask4bitsE_68_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_68(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_68_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_69_0 {
  typedef TJP__ZN7cpumask4bitsE_69_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_69(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_69_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void cpumask_or(struct cpumask *dstp, struct cpumask *src1p,
         struct cpumask *src2p)
{
 bitmap_or((__get__ZN7cpumask4bitsE_67((dstp)->bits)), (__get__ZN7cpumask4bitsE_68((src1p)->bits)),
          (__get__ZN7cpumask4bitsE_69((src2p)->bits)), 256);
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_70_0 {
  typedef TJP__ZN7cpumask4bitsE_70_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_70(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_70_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_71_0 {
  typedef TJP__ZN7cpumask4bitsE_71_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_71(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_71_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_72_0 {
  typedef TJP__ZN7cpumask4bitsE_72_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_72(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_72_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void cpumask_xor(struct cpumask *dstp,
          struct cpumask *src1p,
          struct cpumask *src2p)
{
 bitmap_xor((__get__ZN7cpumask4bitsE_70((dstp)->bits)), (__get__ZN7cpumask4bitsE_71((src1p)->bits)),
           (__get__ZN7cpumask4bitsE_72((src2p)->bits)), 256);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_73_0 {
  typedef TJP__ZN7cpumask4bitsE_73_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_73(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_73_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_74_0 {
  typedef TJP__ZN7cpumask4bitsE_74_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_74(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_74_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_75_0 {
  typedef TJP__ZN7cpumask4bitsE_75_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_75(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_75_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpumask_andnot(struct cpumask *dstp,
      struct cpumask *src1p,
      struct cpumask *src2p)
{
 return bitmap_andnot((__get__ZN7cpumask4bitsE_73((dstp)->bits)), (__get__ZN7cpumask4bitsE_74((src1p)->bits)),
       (__get__ZN7cpumask4bitsE_75((src2p)->bits)), 256);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_76_0 {
  typedef TJP__ZN7cpumask4bitsE_76_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_76(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_76_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_77_0 {
  typedef TJP__ZN7cpumask4bitsE_77_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_77(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_77_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void cpumask_complement(struct cpumask *dstp,
          struct cpumask *srcp)
{
 bitmap_complement((__get__ZN7cpumask4bitsE_76((dstp)->bits)), (__get__ZN7cpumask4bitsE_77((srcp)->bits)),
           256);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_78_0 {
  typedef TJP__ZN7cpumask4bitsE_78_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_78(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_78_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_79_0 {
  typedef TJP__ZN7cpumask4bitsE_79_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_79(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_79_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline bool cpumask_equal( struct cpumask *src1p,
    struct cpumask *src2p)
{
 return bitmap_equal((__get__ZN7cpumask4bitsE_78((src1p)->bits)), (__get__ZN7cpumask4bitsE_79((src2p)->bits)),
       256);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_80_0 {
  typedef TJP__ZN7cpumask4bitsE_80_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_80(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_80_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_81_0 {
  typedef TJP__ZN7cpumask4bitsE_81_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_81(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_81_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline bool cpumask_intersects( struct cpumask *src1p,
         struct cpumask *src2p)
{
 return bitmap_intersects((__get__ZN7cpumask4bitsE_80((src1p)->bits)), (__get__ZN7cpumask4bitsE_81((src2p)->bits)),
            256);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_82_0 {
  typedef TJP__ZN7cpumask4bitsE_82_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_82(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_82_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_83_0 {
  typedef TJP__ZN7cpumask4bitsE_83_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_83(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_83_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpumask_subset( struct cpumask *src1p,
     struct cpumask *src2p)
{
 return bitmap_subset((__get__ZN7cpumask4bitsE_82((src1p)->bits)), (__get__ZN7cpumask4bitsE_83((src2p)->bits)),
        256);
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_84_0 {
  typedef TJP__ZN7cpumask4bitsE_84_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_84(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_84_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline bool cpumask_empty( struct cpumask *srcp)
{
 return bitmap_empty((__get__ZN7cpumask4bitsE_84((srcp)->bits)), 256);
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_85_0 {
  typedef TJP__ZN7cpumask4bitsE_85_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_85(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_85_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline bool cpumask_full( struct cpumask *srcp)
{
 return bitmap_full((__get__ZN7cpumask4bitsE_85((srcp)->bits)), 256);
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_86_0 {
  typedef TJP__ZN7cpumask4bitsE_86_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_86(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_86_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline unsigned int cpumask_weight( struct cpumask *srcp)
{
 return bitmap_weight((__get__ZN7cpumask4bitsE_86((srcp)->bits)), 256);
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_87_0 {
  typedef TJP__ZN7cpumask4bitsE_87_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_87(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_87_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_88_0 {
  typedef TJP__ZN7cpumask4bitsE_88_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_88(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_88_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void cpumask_shift_right(struct cpumask *dstp,
           struct cpumask *srcp, int n)
{
 bitmap_shift_right((__get__ZN7cpumask4bitsE_87((dstp)->bits)), (__get__ZN7cpumask4bitsE_88((srcp)->bits)), n,
            256);
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_89_0 {
  typedef TJP__ZN7cpumask4bitsE_89_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_89(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_89_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_90_0 {
  typedef TJP__ZN7cpumask4bitsE_90_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_90(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_90_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void cpumask_shift_left(struct cpumask *dstp,
          struct cpumask *srcp, int n)
{
 bitmap_shift_left((__get__ZN7cpumask4bitsE_89((dstp)->bits)), (__get__ZN7cpumask4bitsE_90((srcp)->bits)), n,
           256);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_91_0 {
  typedef TJP__ZN7cpumask4bitsE_91_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_91(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_91_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_92_0 {
  typedef TJP__ZN7cpumask4bitsE_92_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_92(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_92_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void cpumask_copy(struct cpumask *dstp,
    struct cpumask *srcp)
{
 bitmap_copy((__get__ZN7cpumask4bitsE_91((dstp)->bits)), (__get__ZN7cpumask4bitsE_92((srcp)->bits)), 256);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_93_0 {
  typedef TJP__ZN7cpumask4bitsE_93_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_93(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_93_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpumask_scnprintf(char *buf, int len,
        struct cpumask *srcp)
{
 return bitmap_scnprintf(buf, len, (__get__ZN7cpumask4bitsE_93((srcp)->bits)), 256);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_94_0 {
  typedef TJP__ZN7cpumask4bitsE_94_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_94(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_94_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpumask_parse_user( char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parse_user(buf, len, (__get__ZN7cpumask4bitsE_94((dstp)->bits)), 256);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_95_0 {
  typedef TJP__ZN7cpumask4bitsE_95_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_95(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_95_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpumask_parselist_user( char *buf, int len,
         struct cpumask *dstp)
{
 return bitmap_parselist_user(buf, len, (__get__ZN7cpumask4bitsE_95((dstp)->bits)),
       256);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_96_0 {
  typedef TJP__ZN7cpumask4bitsE_96_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_96(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_96_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpulist_scnprintf(char *buf, int len,
        struct cpumask *srcp)
{
 return bitmap_scnlistprintf(buf, len, (__get__ZN7cpumask4bitsE_96((srcp)->bits)),
        256);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_97_0 {
  typedef TJP__ZN7cpumask4bitsE_97_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_97(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_97_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpumask_parse( char *buf, struct cpumask *dstp)
{
 char *nl = strchr(buf, '\n');
 int len = nl ? nl - buf : strlen(buf);

 return bitmap_parse(buf, len, (__get__ZN7cpumask4bitsE_97((dstp)->bits)), 256);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_98_0 {
  typedef TJP__ZN7cpumask4bitsE_98_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_98(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_98_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int cpulist_parse( char *buf, struct cpumask *dstp)
{
 return bitmap_parselist(buf, (__get__ZN7cpumask4bitsE_98((dstp)->bits)), 256);
}






static inline size_t cpumask_size(void)
{


 return (((256) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))) * sizeof(long);
}
typedef struct cpumask cpumask_var_t[1];

static inline bool alloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 return _true;
}

static inline bool alloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 return _true;
}

static inline bool zalloc_cpumask_var(cpumask_var_t *mask, gfp_t flags)
{
 cpumask_clear(*mask);
 return _true;
}

static inline bool zalloc_cpumask_var_node(cpumask_var_t *mask, gfp_t flags,
       int node)
{
 cpumask_clear(*mask);
 return _true;
}

static inline void alloc_bootmem_cpumask_var(cpumask_var_t *mask)
{
}

static inline void free_cpumask_var(cpumask_var_t mask)
{
}

static inline void free_bootmem_cpumask_var(cpumask_var_t mask)
{
}




extern unsigned long cpu_all_bits[(((256) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
void set_cpu_possible(unsigned int cpu, bool possible);
void set_cpu_present(unsigned int cpu, bool present);
void set_cpu_online(unsigned int cpu, bool online);
void set_cpu_active(unsigned int cpu, bool active);
void init_cpu_present( struct cpumask *src);
void init_cpu_possible( struct cpumask *src);
void init_cpu_online( struct cpumask *src);
static inline int __check_is_bitmap( unsigned long *bitmap)
{
 return 1;
}
extern unsigned long
 cpu_bit_bitmap[64 +1][(((256) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];

static inline struct cpumask *get_cpu_mask(unsigned int cpu)
{
 unsigned long *p = cpu_bit_bitmap[1 + cpu % 64];
 p -= cpu / 64;
 return ((struct cpumask *)(1 ? (p) : (void *)sizeof(__check_is_bitmap(p))));
}
int __first_cpu( cpumask_t *srcp);
int __next_cpu(int n, cpumask_t *srcp);
int __next_cpu_nr(int n, cpumask_t *srcp);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_104_0 {
  typedef TJP__ZN7cpumask4bitsE_104_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_104(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_104_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpu_set(int cpu, cpumask_t *dstp)
{
 set_bit(cpu, __get__ZN7cpumask4bitsE_104(dstp->bits));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_105_0 {
  typedef TJP__ZN7cpumask4bitsE_105_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_105(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_105_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpu_clear(int cpu, cpumask_t *dstp)
{
 clear_bit(cpu, __get__ZN7cpumask4bitsE_105(dstp->bits));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_106_0 {
  typedef TJP__ZN7cpumask4bitsE_106_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_106(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_106_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_setall(cpumask_t *dstp, int nbits)
{
 bitmap_fill(__get__ZN7cpumask4bitsE_106(dstp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_107_0 {
  typedef TJP__ZN7cpumask4bitsE_107_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_107(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_107_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_clear(cpumask_t *dstp, int nbits)
{
 bitmap_zero(__get__ZN7cpumask4bitsE_107(dstp->bits), nbits);
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_108_0 {
  typedef TJP__ZN7cpumask4bitsE_108_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_108(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_108_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpu_test_and_set(int cpu, cpumask_t *addr)
{
 return test_and_set_bit(cpu, __get__ZN7cpumask4bitsE_108(addr->bits));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_109_0 {
  typedef TJP__ZN7cpumask4bitsE_109_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_109(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_109_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_110_0 {
  typedef TJP__ZN7cpumask4bitsE_110_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_110(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_110_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_111_0 {
  typedef TJP__ZN7cpumask4bitsE_111_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_111(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_111_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_and(cpumask_t *dstp, cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 return bitmap_and(__get__ZN7cpumask4bitsE_109(dstp->bits), __get__ZN7cpumask4bitsE_110(src1p->bits), __get__ZN7cpumask4bitsE_111(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_112_0 {
  typedef TJP__ZN7cpumask4bitsE_112_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_112(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_112_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_113_0 {
  typedef TJP__ZN7cpumask4bitsE_113_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_113(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_113_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_114_0 {
  typedef TJP__ZN7cpumask4bitsE_114_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_114(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_114_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_or(cpumask_t *dstp, cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 bitmap_or(__get__ZN7cpumask4bitsE_112(dstp->bits), __get__ZN7cpumask4bitsE_113(src1p->bits), __get__ZN7cpumask4bitsE_114(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_115_0 {
  typedef TJP__ZN7cpumask4bitsE_115_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_115(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_115_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_116_0 {
  typedef TJP__ZN7cpumask4bitsE_116_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_116(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_116_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_117_0 {
  typedef TJP__ZN7cpumask4bitsE_117_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_117(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_117_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_xor(cpumask_t *dstp, cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 bitmap_xor(__get__ZN7cpumask4bitsE_115(dstp->bits), __get__ZN7cpumask4bitsE_116(src1p->bits), __get__ZN7cpumask4bitsE_117(src2p->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_118_0 {
  typedef TJP__ZN7cpumask4bitsE_118_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_118(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_118_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_119_0 {
  typedef TJP__ZN7cpumask4bitsE_119_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_119(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_119_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_120_0 {
  typedef TJP__ZN7cpumask4bitsE_120_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_120(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_120_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_andnot(cpumask_t *dstp, cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 return bitmap_andnot(__get__ZN7cpumask4bitsE_118(dstp->bits), __get__ZN7cpumask4bitsE_119(src1p->bits), __get__ZN7cpumask4bitsE_120(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_121_0 {
  typedef TJP__ZN7cpumask4bitsE_121_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_121(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_121_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_122_0 {
  typedef TJP__ZN7cpumask4bitsE_122_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_122(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_122_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_equal( cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 return bitmap_equal(__get__ZN7cpumask4bitsE_121(src1p->bits), __get__ZN7cpumask4bitsE_122(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_123_0 {
  typedef TJP__ZN7cpumask4bitsE_123_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_123(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_123_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_124_0 {
  typedef TJP__ZN7cpumask4bitsE_124_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_124(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_124_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_intersects( cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 return bitmap_intersects(__get__ZN7cpumask4bitsE_123(src1p->bits), __get__ZN7cpumask4bitsE_124(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_125_0 {
  typedef TJP__ZN7cpumask4bitsE_125_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_125(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_125_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_126_0 {
  typedef TJP__ZN7cpumask4bitsE_126_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_126(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_126_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_subset( cpumask_t *src1p,
     cpumask_t *src2p, int nbits)
{
 return bitmap_subset(__get__ZN7cpumask4bitsE_125(src1p->bits), __get__ZN7cpumask4bitsE_126(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_127_0 {
  typedef TJP__ZN7cpumask4bitsE_127_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_127(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_127_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_empty( cpumask_t *srcp, int nbits)
{
 return bitmap_empty(__get__ZN7cpumask4bitsE_127(srcp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_128_0 {
  typedef TJP__ZN7cpumask4bitsE_128_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_128(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_128_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __cpus_weight( cpumask_t *srcp, int nbits)
{
 return bitmap_weight(__get__ZN7cpumask4bitsE_128(srcp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_129_0 {
  typedef TJP__ZN7cpumask4bitsE_129_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_129(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_129_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_130_0 {
  typedef TJP__ZN7cpumask4bitsE_130_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_130(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_130_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __cpus_shift_left(cpumask_t *dstp,
     cpumask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(__get__ZN7cpumask4bitsE_129(dstp->bits), __get__ZN7cpumask4bitsE_130(srcp->bits), n, nbits);
}

extern cpumask_var_t cpu_callin_mask;
extern cpumask_var_t cpu_callout_mask;
extern cpumask_var_t cpu_initialized_mask;
extern cpumask_var_t cpu_sibling_setup_mask;

extern void setup_cpu_local_masks(void);

struct msr {
  template <typename, int = 0> struct __BYPASSmsr {};
  template <typename, int> friend struct __BYPASSmsr;
 union {
  struct {
   u32 l;
   u32 h;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  u64 q;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct msr_info {
  template <typename, int = 0> struct __BYPASSmsr_info {};
  template <typename, int> friend struct __BYPASSmsr_info;
 u32 msr_no;
 struct msr reg;
 struct msr *msrs;
 int err;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct msr_regs_info {
  template <typename, int = 0> struct __BYPASSmsr_regs_info {};
  template <typename, int> friend struct __BYPASSmsr_regs_info;
 u32 *regs;
 int err;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline unsigned long long native_read_tscp(unsigned int *aux)
{
 unsigned long low, high;
 asm (".byte 0x0f,0x01,0xf9"
       : "=a" (low), "=d" (high), "=c" (*aux));
 return low | ((u64)high << 32);
}
static inline unsigned long long native_read_msr(unsigned int msr)
{
 unsigned low, high;

 asm ("rdmsr" : "=a" (low), "=d" (high) : "c" (msr));
 return ((low) | ((u64)(high) << 32));
}

static inline unsigned long long native_read_msr_safe(unsigned int msr,
            int *err)
{
 unsigned low, high;

 asm ("2: rdmsr ; xor %[err],%[err]\n"
       "1:\n\t"
       ".section .fixup,\"ax\"\n\t"
       "3:  mov %[fault],%[err] ; jmp 1b\n\t"
       ".previous\n\t"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "2b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n"
       : [err] "=r" (*err), "=a" (low), "=d" (high)
       : "c" (msr), [fault] "i" (-5));
 return ((low) | ((u64)(high) << 32));
}

static inline void native_write_msr(unsigned int msr,
        unsigned low, unsigned high)
{
 asm ("wrmsr" : : "c" (msr), "a"(low), "d" (high) : "memory");
}


 static inline int native_write_msr_safe(unsigned int msr,
     unsigned low, unsigned high)
{
 int err;
 asm ("2: wrmsr ; xor %[err],%[err]\n"
       "1:\n\t"
       ".section .fixup,\"ax\"\n\t"
       "3:  mov %[fault],%[err] ; jmp 1b\n\t"
       ".previous\n\t"
       " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "2b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n"
       : [err] "=a" (err)
       : "c" (msr), "0" (low), "d" (high),
         [fault] "i" (-5)
       : "memory");
 return err;
}

extern unsigned long long native_read_tsc(void);

extern int rdmsr_safe_regs(u32 regs[8]);
extern int wrmsr_safe_regs(u32 regs[8]);

static inline __attribute__((always_inline)) unsigned long long __native_read_tsc(void)
{
 unsigned low, high;

 asm ("rdtsc" : "=a" (low), "=d" (high));

 return ((low) | ((u64)(high) << 32));
}

static inline unsigned long long native_read_pmc(int counter)
{
 unsigned low, high;

 asm ("rdpmc" : "=a" (low), "=d" (high) : "c" (counter));
 return ((low) | ((u64)(high) << 32));
}


static inline int paravirt_enabled(void)
{
 return pv_info.paravirt_enabled;
}

static inline void load_sp0(struct tss_struct *tss,
        struct thread_struct *thread)
{
 ;
}


static inline void __cpuid(unsigned int *eax, unsigned int *ebx,
      unsigned int *ecx, unsigned int *edx)
{
 ;
}




static inline unsigned long paravirt_get_debugreg(int reg)
{
 return 0;
}

static inline void set_debugreg(unsigned long val, int reg)
{
 ;
}

static inline void clts(void)
{
 ;
}

static inline unsigned long read_cr0(void)
{
 return 0;
}

static inline void write_cr0(unsigned long x)
{
 ;
}

static inline unsigned long read_cr2(void)
{
 return 0;
}

static inline void write_cr2(unsigned long x)
{
 ;
}

static inline unsigned long read_cr3(void)
{
 return 0;
}

static inline void write_cr3(unsigned long x)
{
 ;
}

static inline unsigned long read_cr4(void)
{
 return 0;
}
static inline unsigned long read_cr4_safe(void)
{
 return 0;
}

static inline void write_cr4(unsigned long x)
{
 ;
}


static inline unsigned long read_cr8(void)
{
 return 0;
}

static inline void write_cr8(unsigned long x)
{
 ;
}


static inline void arch_safe_halt(void)
{
 ;
}

static inline void halt(void)
{
 ;
}

static inline void wbinvd(void)
{
 ;
}



static inline u64 paravirt_read_msr(unsigned msr, int *err)
{
 return 0;
}

static inline int paravirt_write_msr(unsigned msr, unsigned low, unsigned high)
{
 return 0;
}
static inline int rdmsrl_safe(unsigned msr, unsigned long long *p)
{
 int err;

 *p = paravirt_read_msr(msr, &err);
 return err;
}

static inline u64 paravirt_read_tsc(void)
{
 return 0;
}
static inline unsigned long long paravirt_sched_clock(void)
{
 return 0;
}

struct static_key;
extern struct static_key paravirt_steal_enabled;
extern struct static_key paravirt_steal_rq_enabled;

static inline u64 paravirt_steal_clock(int cpu)
{
 return 0;
}

static inline unsigned long long paravirt_read_pmc(int counter)
{
 return 0;
}
static inline unsigned long long paravirt_rdtscp(unsigned int *aux)
{
 return 0;
}
static inline void paravirt_alloc_ldt(struct desc_struct *ldt, unsigned entries)
{
 ;
}

static inline void paravirt_free_ldt(struct desc_struct *ldt, unsigned entries)
{
 ;
}

static inline void load_TR_desc(void)
{
 ;
}
static inline void load_gdt( struct desc_ptr *dtr)
{
 ;
}
static inline void load_idt( struct desc_ptr *dtr)
{
 ;
}
static inline void set_ldt( void *addr, unsigned entries)
{
 ;
}
static inline void store_idt(struct desc_ptr *dtr)
{
 ;
}
static inline unsigned long paravirt_store_tr(void)
{
 return 0;
}

static inline void load_TLS(struct thread_struct *t, unsigned cpu)
{
 ;
}


static inline void load_gs_index(unsigned int gs)
{
 ;
}


static inline void write_ldt_entry(struct desc_struct *dt, int entry,
       void *desc)
{
 ;
}

static inline void write_gdt_entry(struct desc_struct *dt, int entry,
       void *desc, int type)
{
 ;
}

static inline void write_idt_entry(gate_desc *dt, int entry, gate_desc *g)
{
 ;
}
static inline void set_iopl_mask(unsigned mask)
{
 ;
}


static inline void slow_down_io(void)
{
 pv_cpu_ops.io_delay();





}


static inline void startup_ipi_hook(int phys_apicid, unsigned long start_eip,
        unsigned long start_esp)
{

                                        ;
}


static inline void paravirt_activate_mm(struct mm_struct *prev,
     struct mm_struct *next)
{
 ;
}

static inline void arch_dup_mmap(struct mm_struct *oldmm,
     struct mm_struct *mm)
{
 ;
}

static inline void arch_exit_mmap(struct mm_struct *mm)
{
 ;
}

static inline void __flush_tlb(void)
{
 ;
}
static inline void __flush_tlb_global(void)
{
 ;
}
static inline void __flush_tlb_single(unsigned long addr)
{
 ;
}

static inline void flush_tlb_others( struct cpumask *cpumask,
        struct mm_struct *mm,
        unsigned long start,
        unsigned long end)
{
 ;
}

static inline int paravirt_pgd_alloc(struct mm_struct *mm)
{
 return 0;
}

static inline void paravirt_pgd_free(struct mm_struct *mm, pgd_t *pgd)
{
 ;
}

static inline void paravirt_alloc_pte(struct mm_struct *mm, unsigned long pfn)
{
 ;
}
static inline void paravirt_release_pte(unsigned long pfn)
{
 ;
}

static inline void paravirt_alloc_pmd(struct mm_struct *mm, unsigned long pfn)
{
 ;
}

static inline void paravirt_release_pmd(unsigned long pfn)
{
 ;
}

static inline void paravirt_alloc_pud(struct mm_struct *mm, unsigned long pfn)
{
 ;
}
static inline void paravirt_release_pud(unsigned long pfn)
{
 ;
}

static inline void pte_update(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep)
{
 ;
}
static inline void pmd_update(struct mm_struct *mm, unsigned long addr,
         pmd_t *pmdp)
{
 ;
}

static inline void pte_update_defer(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 ;
}

static inline void pmd_update_defer(struct mm_struct *mm, unsigned long addr,
        pmd_t *pmdp)
{
 ;
}

static inline pte_t __pte(pteval_t val)
{
        return (pte_t) { 0 };

}

static inline pteval_t pte_val(pte_t pte)
{
        return 0;

}

static inline pgd_t __pgd(pgdval_t val)
{
        return (pgd_t) { 0 };

}

static inline pgdval_t pgd_val(pgd_t pgd)
{
        return 0;

}


static inline pte_t ptep_modify_prot_start(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
        return (pte_t) { 0 };

}

static inline void ptep_modify_prot_commit(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep, pte_t pte)
{
 if (sizeof(pteval_t) > sizeof(long))

  pv_mmu_ops.ptep_modify_prot_commit(mm, addr, ptep, pte);
 else
 
                               ;
}

static inline void set_pte(pte_t *ptep, pte_t pte)
{
 if (sizeof(pteval_t) > sizeof(long))
 
                                   ;
 else
 
               ;
}

static inline void set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep, pte_t pte)
{
 if (sizeof(pteval_t) > sizeof(long))

  pv_mmu_ops.set_pte_at(mm, addr, ptep, pte);
 else
  ;
}

static inline void set_pmd_at(struct mm_struct *mm, unsigned long addr,
         pmd_t *pmdp, pmd_t pmd)
{
 if (sizeof(pmdval_t) > sizeof(long))

  pv_mmu_ops.set_pmd_at(mm, addr, pmdp, pmd);
 else
 
                           ;
}

static inline void set_pmd(pmd_t *pmdp, pmd_t pmd)
{
 pmdval_t val = native_pmd_val(pmd);

 if (sizeof(pmdval_t) > sizeof(long))
  ;
 else
  ;
}


static inline pmd_t __pmd(pmdval_t val)
{
        return (pmd_t) { 0 };

}

static inline pmdval_t pmd_val(pmd_t pmd)
{
        return 0;

}

static inline void set_pud(pud_t *pudp, pud_t pud)
{
 pudval_t val = native_pud_val(pud);

 if (sizeof(pudval_t) > sizeof(long))
 
                           ;
 else
 
           ;
}

static inline pud_t __pud(pudval_t val)
{
        return (pud_t) { 0 };

}

static inline pudval_t pud_val(pud_t pud)
{
        return 0;

}

static inline void set_pgd(pgd_t *pgdp, pgd_t pgd)
{
 pgdval_t val = native_pgd_val(pgd);

 if (sizeof(pgdval_t) > sizeof(long))
 
                           ;
 else
 
           ;
}

static inline void pgd_clear(pgd_t *pgdp)
{
 set_pgd(pgdp, __pgd(0));
}

static inline void pud_clear(pud_t *pudp)
{
 set_pud(pudp, __pud(0));
}
static inline void set_pte_atomic(pte_t *ptep, pte_t pte)
{
 set_pte(ptep, pte);
}

static inline void pte_clear(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 set_pte_at(mm, addr, ptep, __pte(0));
}

static inline void pmd_clear(pmd_t *pmdp)
{
 set_pmd(pmdp, __pmd(0));
}



static inline void arch_start_context_switch(struct task_struct *prev)
{
 ;
}

static inline void arch_end_context_switch(struct task_struct *next)
{
 ;
}


static inline void arch_enter_lazy_mmu_mode(void)
{
 ;
}

static inline void arch_leave_lazy_mmu_mode(void)
{
 ;
}

static inline void arch_flush_lazy_mmu_mode(void)
{
 ;
}

static inline void __set_fixmap(unsigned idx,
    phys_addr_t phys, pgprot_t flags)
{
 pv_mmu_ops.set_fixmap(idx, phys, flags);
}



static inline __attribute__((always_inline)) void __ticket_lock_spinning(struct arch_spinlock *lock,
       __ticket_t ticket)
{
 ;
}

static inline __attribute__((always_inline)) void __ticket_unlock_kick(struct arch_spinlock *lock,
       __ticket_t ticket)
{
 ;
}
static inline unsigned long arch_local_save_flags(void)
{
 return 0;
}

static inline void arch_local_irq_restore(unsigned long f)
{
 ;
}

static inline void arch_local_irq_disable(void)
{
 ;
}

static inline void arch_local_irq_enable(void)
{
 ;
}

static inline unsigned long arch_local_irq_save(void)
{
 unsigned long f;

 f = arch_local_save_flags();
 arch_local_irq_disable();
 return f;
}
extern void default_banner(void);
struct msr *msrs_alloc(void);
void msrs_free(struct msr *msrs);


int rdmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 *l, u32 *h);
int wrmsr_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h);
int rdmsrl_on_cpu(unsigned int cpu, u32 msr_no, u64 *q);
int wrmsrl_on_cpu(unsigned int cpu, u32 msr_no, u64 q);
void rdmsr_on_cpus( struct cpumask *mask, u32 msr_no, struct msr *msrs);
void wrmsr_on_cpus( struct cpumask *mask, u32 msr_no, struct msr *msrs);
int rdmsr_safe_on_cpu(unsigned int cpu, u32 msr_no, u32 *l, u32 *h);
int wrmsr_safe_on_cpu(unsigned int cpu, u32 msr_no, u32 l, u32 h);
int rdmsrl_safe_on_cpu(unsigned int cpu, u32 msr_no, u64 *q);
int wrmsrl_safe_on_cpu(unsigned int cpu, u32 msr_no, u64 q);
int rdmsr_safe_regs_on_cpu(unsigned int cpu, u32 regs[8]);
int wrmsr_safe_regs_on_cpu(unsigned int cpu, u32 regs[8]);

extern unsigned char * *ideal_nops;
extern void arch_init_ideal_nops(void);






static inline void native_clts(void)
{
 asm ("clts");
}
extern unsigned long __force_order;

static inline unsigned long native_read_cr0(void)
{
 unsigned long val;
 asm ("mov %%cr0,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline void native_write_cr0(unsigned long val)
{
 asm ("mov %0,%%cr0": : "r" (val), "m" (__force_order));
}

static inline unsigned long native_read_cr2(void)
{
 unsigned long val;
 asm ("mov %%cr2,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline void native_write_cr2(unsigned long val)
{
 asm ("mov %0,%%cr2": : "r" (val), "m" (__force_order));
}

static inline unsigned long native_read_cr3(void)
{
 unsigned long val;
 asm ("mov %%cr3,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline void native_write_cr3(unsigned long val)
{
 asm ("mov %0,%%cr3": : "r" (val), "m" (__force_order));
}

static inline unsigned long native_read_cr4(void)
{
 unsigned long val;
 asm ("mov %%cr4,%0\n\t" : "=r" (val), "=m" (__force_order));
 return val;
}

static inline unsigned long native_read_cr4_safe(void)
{
 unsigned long val;
 val = native_read_cr4();

 return val;
}

static inline void native_write_cr4(unsigned long val)
{
 asm ("mov %0,%%cr4": : "r" (val), "m" (__force_order));
}


static inline unsigned long native_read_cr8(void)
{
 unsigned long cr8;
 asm ("movq %%cr8,%0" : "=r" (cr8));
 return cr8;
}

static inline void native_write_cr8(unsigned long val)
{
 asm ("movq %0,%%cr8" :: "r" (val) : "memory");
}


static inline void native_wbinvd(void)
{
 asm ("wbinvd": : :"memory");
}

extern void native_load_gs_index(unsigned);
static inline void clflush( void *__p)
{
 asm ("clflush %0" : "+m" (*( char *)__p));
}




enum {
 UNAME26 = 0x0020000,
 ADDR_NO_RANDOMIZE = 0x0040000,
 FDPIC_FUNCPTRS = 0x0080000,


 MMAP_PAGE_ZERO = 0x0100000,
 ADDR_COMPAT_LAYOUT = 0x0200000,
 READ_IMPLIES_EXEC = 0x0400000,
 ADDR_LIMIT_32BIT = 0x0800000,
 SHORT_INODE = 0x1000000,
 WHOLE_SECONDS = 0x2000000,
 STICKY_TIMEOUTS = 0x4000000,
 ADDR_LIMIT_3GB = 0x8000000,
};
enum {
 PER_LINUX = 0x0000,
 PER_LINUX_32BIT = 0x0000 | ADDR_LIMIT_32BIT,
 PER_LINUX_FDPIC = 0x0000 | FDPIC_FUNCPTRS,
 PER_SVR4 = 0x0001 | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_SVR3 = 0x0002 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_SCOSVR3 = 0x0003 | STICKY_TIMEOUTS |
      WHOLE_SECONDS | SHORT_INODE,
 PER_OSR5 = 0x0003 | STICKY_TIMEOUTS | WHOLE_SECONDS,
 PER_WYSEV386 = 0x0004 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_ISCR4 = 0x0005 | STICKY_TIMEOUTS,
 PER_BSD = 0x0006,
 PER_SUNOS = 0x0006 | STICKY_TIMEOUTS,
 PER_XENIX = 0x0007 | STICKY_TIMEOUTS | SHORT_INODE,
 PER_LINUX32 = 0x0008,
 PER_LINUX32_3GB = 0x0008 | ADDR_LIMIT_3GB,
 PER_IRIX32 = 0x0009 | STICKY_TIMEOUTS,
 PER_IRIXN32 = 0x000a | STICKY_TIMEOUTS,
 PER_IRIX64 = 0x000b | STICKY_TIMEOUTS,
 PER_RISCOS = 0x000c,
 PER_SOLARIS = 0x000d | STICKY_TIMEOUTS,
 PER_UW7 = 0x000e | STICKY_TIMEOUTS | MMAP_PAGE_ZERO,
 PER_OSF4 = 0x000f,
 PER_HPUX = 0x0010,
 PER_MASK = 0x00ff,
};






struct exec_domain;
struct pt_regs;

extern int register_exec_domain(struct exec_domain *);
extern int unregister_exec_domain(struct exec_domain *);
extern int __set_personality(unsigned int);
typedef void (*handler_t)(int, struct pt_regs *);

struct exec_domain {
  template <typename, int = 0> struct __BYPASSexec_domain {};
  template <typename, int> friend struct __BYPASSexec_domain;
 char *name;
 handler_t handler;
 unsigned char pers_low;
 unsigned char pers_high;
 unsigned long *signal_map;
 unsigned long *signal_invmap;
 struct map_segment *err_map;
 struct map_segment *socktype_map;
 struct map_segment *sockopt_map;
 struct map_segment *af_map;
 struct module *module;
 struct exec_domain *next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
 *remainder = dividend % divisor;
 return dividend / divisor;
}




static inline u64 div64_u64(u64 dividend, u64 divisor)
{
 return dividend / divisor;
}




static inline s64 div64_s64(s64 dividend, s64 divisor)
{
 return dividend / divisor;
}
static inline u64 div_u64(u64 dividend, u32 divisor)
{
 u32 remainder;
 return div_u64_rem(dividend, divisor, &remainder);
}






static inline s64 div_s64(s64 dividend, s32 divisor)
{
 s32 remainder;
 return div_s64_rem(dividend, divisor, &remainder);
}


u32 iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder);

static inline __attribute__((always_inline)) u32
__iter_div_u64_rem(u64 dividend, u32 divisor, u64 *remainder)
{
 u32 ret = 0;

 while (dividend >= divisor) {


  asm("" : "+rm"(dividend));

  dividend -= divisor;
  ret++;
 }

 *remainder = dividend;

 return ret;
}




static inline u64 mul_u64_u32_shr(u64 a, u32 mul, unsigned int shift)
{
 return (u64)(((unsigned __int128)a * mul) >> shift);
}






static inline void * ERR_PTR(long error)
{
 return (void *) error;
}

static inline long PTR_ERR( void *ptr)
{
 return (long) ptr;
}

static inline long IS_ERR( void *ptr)
{
 return __builtin_expect(!!(((unsigned long)ptr) >= (unsigned long)-4095), 0);
}

static inline long IS_ERR_OR_NULL( void *ptr)
{
 return !ptr || __builtin_expect(!!(((unsigned long)ptr) >= (unsigned long)-4095), 0);
}
static inline void * ERR_CAST( void *ptr)
{

 return (void *) ptr;
}

static inline int PTR_ERR_OR_ZERO( void *ptr)
{
 if (IS_ERR(ptr))
  return PTR_ERR(ptr);
 else
  return 0;
}
static inline unsigned long native_save_fl(void)
{
 unsigned long flags;






 asm ("# __raw_save_flags\n\t"
       "pushf ; pop %0"
       : "=rm" (flags)
       :
       : "memory");

 return flags;
}

static inline void native_restore_fl(unsigned long flags)
{
 asm ("push %0 ; popf"
       :
       :"g" (flags)
       :"memory", "cc");
}

static inline void native_irq_disable(void)
{
 asm ("cli": : :"memory");
}

static inline void native_irq_enable(void)
{
 asm ("sti": : :"memory");
}

static inline void native_safe_halt(void)
{
 asm ("sti; hlt": : :"memory");
}

static inline void native_halt(void)
{
 asm ("hlt": : :"memory");
}
static inline int arch_irqs_disabled_flags(unsigned long flags)
{
 return !(flags & ((1UL) << (9)));
}

static inline int arch_irqs_disabled(void)
{
 unsigned long flags = arch_local_save_flags();

 return arch_irqs_disabled_flags(flags);
}
static inline void *current_text_addr(void)
{
 void *pc;

 asm ("mov $1f, %0; 1:":"=r" (pc));

 return pc;
}
enum tlb_infos {
 ENTRIES,
 NR_INFO
};

extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_4k[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_2m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lli_4m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_4k[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_2m[NR_INFO];
extern u16 __attribute__((__section__(".data..read_mostly"))) tlb_lld_4m[NR_INFO];
extern s8 __attribute__((__section__(".data..read_mostly"))) tlb_flushall_shift;







struct cpuinfo_x86 {
  template <typename, int = 0> struct __BYPASScpuinfo_x86 {};
  template <typename, int> friend struct __BYPASScpuinfo_x86;
 __u8 x86;
 __u8 x86_vendor;
 __u8 x86_model;
 __u8 x86_mask;
 int x86_tlbsize;

 __u8 x86_virt_bits;
 __u8 x86_phys_bits;

 __u8 x86_coreid_bits;

 __u32 extended_cpuid_level;

 int cpuid_level;
 __u32 x86_capability[10 + 1];
 char x86_vendor_id[16];
 char x86_model_id[64];

 int x86_cache_size;
 int x86_cache_alignment;
 int x86_power;
 unsigned long loops_per_jiffy;

 u16 x86_max_cores;
 u16 apicid;
 u16 initial_apicid;
 u16 x86_clflush_size;

 u16 booted_cores;

 u16 phys_proc_id;

 u16 cpu_core_id;

 u8 compute_unit_id;

 u16 cpu_index;
 u32 microcode;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));
extern struct cpuinfo_x86 boot_cpu_data;
extern struct cpuinfo_x86 new_cpu_data;

extern struct tss_struct doublefault_tss;
extern __u32 cpu_caps_cleared[10];
extern __u32 cpu_caps_set[10];


extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(struct cpuinfo_x86) cpu_info __attribute__((__aligned__((1 << (6)))));






extern struct seq_operations cpuinfo_op;



extern void cpu_detect(struct cpuinfo_x86 *c);
extern void fpu_detect(struct cpuinfo_x86 *c);

extern void early_cpu_init(void);
extern void identify_boot_cpu(void);
extern void identify_secondary_cpu(struct cpuinfo_x86 *);
extern void print_cpu_info(struct cpuinfo_x86 *);
void print_cpu_msr(struct cpuinfo_x86 *);
extern void init_scattered_cpuid_features(struct cpuinfo_x86 *c);
extern unsigned int init_intel_cacheinfo(struct cpuinfo_x86 *c);
extern void init_amd_cacheinfo(struct cpuinfo_x86 *c);

extern void detect_extended_topology(struct cpuinfo_x86 *c);
extern void detect_ht(struct cpuinfo_x86 *c);




static inline int have_cpuid_p(void)
{
 return 1;
}

static inline void native_cpuid(unsigned int *eax, unsigned int *ebx,
    unsigned int *ecx, unsigned int *edx)
{

 asm ("cpuid"
     : "=a" (*eax),
       "=b" (*ebx),
       "=c" (*ecx),
       "=d" (*edx)
     : "0" (*eax), "2" (*ecx)
     : "memory");
}

static inline void load_cr3(pgd_t *pgdir)
{
 write_cr3(__phys_addr_nodebug((unsigned long)(pgdir)));
}
struct x86_hw_tss {
  template <typename, int = 0> struct __BYPASSx86_hw_tss {};
  template <typename, int> friend struct __BYPASSx86_hw_tss;
 u32 reserved1;
 u64 sp0;
 u64 sp1;
 u64 sp2;
 u64 reserved2;
 u64 ist[7];
 u32 reserved3;
 u32 reserved4;
 u16 reserved5;
 u16 io_bitmap_base;


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed)) __attribute__((__aligned__((1 << (6)))));
struct tss_struct {
  template <typename, int = 0> struct __BYPASStss_struct {};
  template <typename, int> friend struct __BYPASStss_struct;



 struct x86_hw_tss x86_tss;







 unsigned long io_bitmap[((65536/8)/sizeof(long)) + 1];




 unsigned long stack[64];


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(struct tss_struct) init_tss __attribute__((__aligned__((1 << (6)))));




struct orig_ist {
  template <typename, int = 0> struct __BYPASSorig_ist {};
  template <typename, int> friend struct __BYPASSorig_ist;
 unsigned long ist[7];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct i387_fsave_struct {
  template <typename, int = 0> struct __BYPASSi387_fsave_struct {};
  template <typename, int> friend struct __BYPASSi387_fsave_struct;
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;


 u32 st_space[20];


 u32 status;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct i387_fxsave_struct {
  template <typename, int = 0> struct __BYPASSi387_fxsave_struct {};
  template <typename, int> friend struct __BYPASSi387_fxsave_struct;
 u16 cwd;
 u16 swd;
 u16 twd;
 u16 fop;
 union {
  struct {
   u64 rip;
   u64 rdp;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  struct {
   u32 fip;
   u32 fcs;
   u32 foo;
   u32 fos;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };
 u32 mxcsr;
 u32 mxcsr_mask;


 u32 st_space[32];


 u32 xmm_space[64];

 u32 padding[12];

 union {
  u32 padding1[12];
  u32 sw_reserved[12];
 };


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((aligned(16)));

struct i387_soft_struct {
  template <typename, int = 0> struct __BYPASSi387_soft_struct {};
  template <typename, int> friend struct __BYPASSi387_soft_struct;
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;

 u32 st_space[20];
 u8 ftop;
 u8 changed;
 u8 lookahead;
 u8 no_update;
 u8 rm;
 u8 alimit;
 struct math_emu_info *info;
 u32 entry_eip;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ymmh_struct {
  template <typename, int = 0> struct __BYPASSymmh_struct {};
  template <typename, int> friend struct __BYPASSymmh_struct;

 u32 ymmh_space[64];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xsave_hdr_struct {
  template <typename, int = 0> struct __BYPASSxsave_hdr_struct {};
  template <typename, int> friend struct __BYPASSxsave_hdr_struct;
 u64 xstate_bv;
 u64 reserved1[2];
 u64 reserved2[5];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

struct xsave_struct {
  template <typename, int = 0> struct __BYPASSxsave_struct {};
  template <typename, int> friend struct __BYPASSxsave_struct;
 struct i387_fxsave_struct i387;
 struct xsave_hdr_struct xsave_hdr;
 struct ymmh_struct ymmh;


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed, aligned (64)));

union thread_xstate {
 struct i387_fsave_struct fsave;
 struct i387_fxsave_struct fxsave;
 struct i387_soft_struct soft;
 struct xsave_struct xsave;
};

struct fpu {
  template <typename, int = 0> struct __BYPASSfpu {};
  template <typename, int> friend struct __BYPASSfpu;
 unsigned int last_cpu;
 unsigned int has_fpu;
 union thread_xstate *state;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern __attribute__((section(".data..percpu" ""))) __typeof__(struct orig_ist) orig_ist;

union irq_stack_union {
 char irq_stack[(((1UL) << 12) << 2)];





 struct {
  char gs_base[40];
  unsigned long stack_canary;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
};

extern __attribute__((section(".data..percpu" "..first"))) __typeof__(union irq_stack_union) irq_stack_union __attribute__((externally_visible));
extern typeof(irq_stack_union) init_per_cpu__irq_stack_union;

extern __attribute__((section(".data..percpu" ""))) __typeof__(char *) irq_stack_ptr;
extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned int) irq_count;
extern void ignore_sysret(void);
extern unsigned int xstate_size;
extern void free_thread_xstate(struct task_struct *);
extern struct kmem_cache *task_xstate_cachep;

struct perf_event;

struct thread_struct {
  template <typename, int = 0> struct __BYPASSthread_struct {};
  template <typename, int> friend struct __BYPASSthread_struct;

 struct desc_struct tls_array[3];
 unsigned long sp0;
 unsigned long sp;



 unsigned long usersp;
 unsigned short es;
 unsigned short ds;
 unsigned short fsindex;
 unsigned short gsindex;





 unsigned long fs;

 unsigned long gs;

 struct perf_event *ptrace_bps[4];

 unsigned long debugreg6;

 unsigned long ptrace_dr7;

 unsigned long cr2;
 unsigned long trap_nr;
 unsigned long error_code;

 struct fpu fpu;
 unsigned long *io_bitmap_ptr;
 unsigned long iopl;

 unsigned io_bitmap_max;
 unsigned char fpu_counter;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline void native_set_iopl_mask(unsigned mask)
{
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13thread_struct3sp0E_143_0 {
  typedef TJP__ZN13thread_struct3sp0E_143_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN13thread_struct3sp0E_143(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN13thread_struct3sp0E_143_0< unsigned long int , ::thread_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void
native_load_sp0(struct tss_struct *tss, struct thread_struct *thread)
{
 tss->x86_tss.sp0 = __get__ZN13thread_struct3sp0E_143(&thread->sp0);







}

static inline void native_swapgs(void)
{

 asm ("swapgs" ::: "memory");

}
extern unsigned long mmu_cr4_features;
extern u32 *trampoline_cr4_features;

static inline void set_in_cr4(unsigned long mask)
{
 unsigned long cr4;

 mmu_cr4_features |= mask;
 if (trampoline_cr4_features)
  *trampoline_cr4_features = mmu_cr4_features;
 cr4 = read_cr4();
 cr4 |= mask;
 write_cr4(cr4);
}

static inline void clear_in_cr4(unsigned long mask)
{
 unsigned long cr4;

 mmu_cr4_features &= ~mask;
 if (trampoline_cr4_features)
  *trampoline_cr4_features = mmu_cr4_features;
 cr4 = read_cr4();
 cr4 &= ~mask;
 write_cr4(cr4);
}

typedef struct {
 unsigned long seg;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} mm_segment_t;



extern void release_thread(struct task_struct *);

unsigned long get_wchan(struct task_struct *p);






static inline void cpuid(unsigned int op,
    unsigned int *eax, unsigned int *ebx,
    unsigned int *ecx, unsigned int *edx)
{
 *eax = op;
 *ecx = 0;
 __cpuid(eax, ebx, ecx, edx);
}


static inline void cpuid_count(unsigned int op, int count,
          unsigned int *eax, unsigned int *ebx,
          unsigned int *ecx, unsigned int *edx)
{
 *eax = op;
 *ecx = count;
 __cpuid(eax, ebx, ecx, edx);
}




static inline unsigned int cpuid_eax(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return eax;
}

static inline unsigned int cpuid_ebx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return ebx;
}

static inline unsigned int cpuid_ecx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return ecx;
}

static inline unsigned int cpuid_edx(unsigned int op)
{
 unsigned int eax, ebx, ecx, edx;

 cpuid(op, &eax, &ebx, &ecx, &edx);

 return edx;
}


static inline void rep_nop(void)
{
 asm ("rep; nop" ::: "memory");
}

static inline void cpu_relax(void)
{
 rep_nop();
}


static inline void sync_core(void)
{
 int tmp;
 asm ("cpuid"
       : "=a" (tmp)
       : "0" (1)
       : "ebx", "ecx", "edx", "memory");

}

static inline void __monitor( void *eax, unsigned long ecx,
        unsigned long edx)
{

 asm (".byte 0x0f, 0x01, 0xc8;"
       :: "a" (eax), "c" (ecx), "d"(edx));
}

static inline void __mwait(unsigned long eax, unsigned long ecx)
{

 asm (".byte 0x0f, 0x01, 0xc9;"
       :: "a" (eax), "c" (ecx));
}

static inline void __sti_mwait(unsigned long eax, unsigned long ecx)
{
 do { } while (0);

 asm ("sti; .byte 0x0f, 0x01, 0xc9;"
       :: "a" (eax), "c" (ecx));
}

extern void select_idle_routine( struct cpuinfo_x86 *c);
extern void init_amd_e400_c1e_mask(void);

extern unsigned long boot_option_idle_override;
extern bool amd_e400_c1e_detected;

enum idle_boot_override {IDLE_NO_OVERRIDE=0, IDLE_HALT, IDLE_NOMWAIT,
    IDLE_POLL};

extern void enable_sep_cpu(void);
extern int sysenter_setup(void);

extern void early_trap_init(void);
void early_trap_pf_init(void);


extern struct desc_ptr early_gdt_descr;

extern void cpu_set_gdt(int);
extern void switch_to_new_gdt(int);
extern void load_percpu_segment(int);
extern void cpu_init(void);

static inline unsigned long get_debugctlmsr(void)
{
 unsigned long debugctlmsr = 0;





 do { int _err; debugctlmsr = paravirt_read_msr(0x000001d9, &_err); } while (0);

 return debugctlmsr;
}

static inline void update_debugctlmsr(unsigned long debugctlmsr)
{




 do { paravirt_write_msr(0x000001d9, (u32)((u64)(debugctlmsr)), ((u64)(debugctlmsr))>>32); } while (0);
}

extern void set_task_blockstep(struct task_struct *task, bool on);





extern unsigned int machine_id;
extern unsigned int machine_submodel_id;
extern unsigned int BIOS_revision;


extern int bootloader_type;
extern int bootloader_version;

extern char ignore_fpu_irq;
static inline void prefetch( void *x)
{
 asm ("661:\n\t" "prefetcht0 (%1)" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(0*32+25)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" "prefetchnta (%1)" "\n" "664""1" ":\n\t" ".popsection" : : "i" (0), "r" (x))


             ;
}






static inline void prefetchw( void *x)
{
 asm ("661:\n\t" "prefetcht0 (%1)" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(1*32+31)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" "prefetchw (%1)" "\n" "664""1" ":\n\t" ".popsection" : : "i" (0), "r" (x))


             ;
}

static inline void spin_lock_prefetch( void *x)
{
 prefetchw(x);
}
extern unsigned long KSTK_ESP(struct task_struct *task);




extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) old_rsp;



extern void start_thread(struct pt_regs *regs, unsigned long new_ip,
            unsigned long new_sp);
extern int get_tsc_mode(unsigned long adr);
extern int set_tsc_mode(unsigned int val);

extern u16 amd_get_nb_id(int cpu);

static inline uint32_t hypervisor_cpuid_base( char *sig, uint32_t leaves)
{
 uint32_t base, eax, signature[3];

 for (base = 0x40000000; base < 0x40010000; base += 0x100) {
  cpuid(base, &eax, &signature[0], &signature[1], &signature[2]);

  if (!memcmp(sig, signature, 12) &&
      (leaves == 0 || ((eax - base) >= leaves)))
   return base;
 }

 return 0;
}

extern unsigned long arch_align_stack(unsigned long sp);
extern void free_init_pages(char *what, unsigned long begin, unsigned long end);

void default_idle(void);

bool xen_set_default_idle(void);




void stop_this_cpu(void *dummy);
void df_debug(struct pt_regs *regs, long error_code);










extern void __xchg_wrong_size(void)
 __attribute__((error("Bad argument size for xchg")));
extern void __cmpxchg_wrong_size(void)
 __attribute__((error("Bad argument size for cmpxchg")));
extern void __xadd_wrong_size(void)
 __attribute__((error("Bad argument size for xadd")));
extern void __add_wrong_size(void)
 __attribute__((error("Bad argument size for add")));



static inline void set_64bit( u64 *ptr, u64 val)
{
 *ptr = val;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_148_0 {
  typedef TJP__ZN7_atomic7counterE_148_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_148(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_148_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int atomic_read( atomic_t *v)
{



        return __get__ZN7_atomic7counterE_148(&v->counter);

}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_149_0 {
  typedef TJP__ZN7_atomic7counterE_149_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_149(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_149_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int atomic_sub_return(int i, atomic_t *v)
{
 return (__get__ZN7_atomic7counterE_149(&(v)->counter) + (-i));
}




static inline int atomic_cmpxchg(atomic_t *v, int old, int _new)
{



        int counter = *(typeof(&v->counter))g_map(&v->counter, sizeof(*(&v->counter)));
 return ({ __typeof__(*((&counter))) __ret; __typeof__(*((&counter))) __old = ((old)); __typeof__(*((&counter))) __new = ((_new)); switch ((sizeof(*(&counter)))) { case 1: { u8 *__ptr = ( u8 *)((&counter)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { u16 *__ptr = ( u16 *)((&counter)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { u32 *__ptr = ( u32 *)((&counter)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { u64 *__ptr = ( u64 *)((&counter)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });

}

static inline int atomic_xchg(atomic_t *v, int _new)
{
 return ({ __typeof__ (*((&v->counter))) __ret = ((_new)); switch (sizeof(*((&v->counter)))) { case 1: asm ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 2: asm ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 4: asm ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 8: asm ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}
static inline int __atomic_add_unless(atomic_t *v, int a, int u)
{
 int c, old;
 c = atomic_read(v);
 for (;;) {
  if (__builtin_expect(!!(c == (u)), 0))
   break;
  old = atomic_cmpxchg((v), c, c + (a));
  if (__builtin_expect(!!(old == c), 1))
   break;
  c = old;
 }
 return c;
}
static inline short int atomic_inc_short(short int *v)
{
 asm(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "addw $1, %0" : "+m" (*v));
 return *v;
}
static inline void atomic_or_long(unsigned long *v1, unsigned long v2)
{
 asm(".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "orq %1, %0" : "+m" (*v1) : "r" (v2));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_atomic647counterE_150_0 {
  typedef TJP__ZN9_atomic647counterE_150_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long int __get__ZN9_atomic647counterE_150(long int *source) {
  long int __result_buffer;
  typedef TJP__ZN9_atomic647counterE_150_0< long int , ::_atomic64 , long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (long int &)__result_buffer;
}
static inline long atomic64_read( atomic64_t *v)
{



 return __get__ZN9_atomic647counterE_150(&v->counter);

}
static inline void atomic64_set(atomic64_t *v, long i)
{
 v->counter = i;
}
static inline void atomic64_add(long i, atomic64_t *v)
{
 asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "addq %1,%0"
       : "=m" (v->counter)
       : "er" (i), "m" (v->counter));
}
static inline void atomic64_sub(long i, atomic64_t *v)
{
 asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "subq %1,%0"
       : "=m" (v->counter)
       : "er" (i), "m" (v->counter));
}
static inline int atomic64_sub_and_test(long i, atomic64_t *v)
{
 do { char c; asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "subq" " %2, " "%0" "; set" "e" " %1" : "+m" (v->counter), "=qm" (c) : "er" (i) : "memory"); return c != 0; } while (0);
}







static inline void atomic64_inc(atomic64_t *v)
{
 asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "incq %0"
       : "=m" (v->counter)
       : "m" (v->counter));
}







static inline void atomic64_dec(atomic64_t *v)
{
 asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "decq %0"
       : "=m" (v->counter)
       : "m" (v->counter));
}
static inline int atomic64_dec_and_test(atomic64_t *v)
{
 do { char c; asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "decq" " " "%0" "; set" "e" " %1" : "+m" (v->counter), "=qm" (c) : : "memory"); return c != 0; } while (0);
}
static inline int atomic64_inc_and_test(atomic64_t *v)
{
 do { char c; asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "incq" " " "%0" "; set" "e" " %1" : "+m" (v->counter), "=qm" (c) : : "memory"); return c != 0; } while (0);
}
static inline int atomic64_add_negative(long i, atomic64_t *v)
{
 do { char c; asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "addq" " %2, " "%0" "; set" "s" " %1" : "+m" (v->counter), "=qm" (c) : "er" (i) : "memory"); return c != 0; } while (0);
}
static inline long atomic64_add_return(long i, atomic64_t *v)
{
 return i + ({ __typeof__ (*(((&v->counter)))) __ret = (((i))); switch (sizeof(*(((&v->counter))))) { case 1: asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 2: asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 4: asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; case 8: asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&v->counter)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}

static inline long atomic64_sub_return(long i, atomic64_t *v)
{
 return atomic64_add_return(-i, v);
}




static inline long atomic64_cmpxchg(atomic64_t *v, long old, long _new)
{
 return ({ __typeof__(*((&v->counter))) __ret; __typeof__(*((&v->counter))) __old = ((old)); __typeof__(*((&v->counter))) __new = ((_new)); switch ((sizeof(*(&v->counter)))) { case 1: { u8 *__ptr = ( u8 *)((&v->counter)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { u16 *__ptr = ( u16 *)((&v->counter)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { u32 *__ptr = ( u32 *)((&v->counter)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { u64 *__ptr = ( u64 *)((&v->counter)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; });
}

static inline long atomic64_xchg(atomic64_t *v, long _new)
{
 return ({ __typeof__ (*((&v->counter))) __ret = ((_new)); switch (sizeof(*((&v->counter)))) { case 1: asm ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 2: asm ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 4: asm ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; case 8: asm ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&v->counter))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}
static inline int atomic64_add_unless(atomic64_t *v, long a, long u)
{
 long c, old;
 c = atomic64_read(v);
 for (;;) {
  if (__builtin_expect(!!(c == (u)), 0))
   break;
  old = atomic64_cmpxchg((v), c, c + (a));
  if (__builtin_expect(!!(old == c), 1))
   break;
  c = old;
 }
 return c != (u);
}
static inline long atomic64_dec_if_positive(atomic64_t *v)
{
 long c, old, dec;
 c = atomic64_read(v);
 for (;;) {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
  old = atomic64_cmpxchg((v), c, dec);
  if (__builtin_expect(!!(old == c), 1))
   break;
  c = old;
 }
 return dec;
}
static inline int atomic_add_unless(atomic_t *v, int a, int u)
{
 return __atomic_add_unless(v, a, u) != u;
}
static inline int atomic_inc_not_zero_hint(atomic_t *v, int hint)
{
 int val, c = hint;


 if (!hint)
  return atomic_add_unless((v), 1, 0);

 do {
  val = atomic_cmpxchg(v, c, c + 1);
  if (val == c)
   return 1;
  c = val;
 } while (c);

 return 0;
}



static inline int atomic_inc_unless_negative(atomic_t *p)
{
 int v, v1;
 for (v = 0; v >= 0; v = v1) {
  v1 = atomic_cmpxchg(p, v, v + 1);
  if (__builtin_expect(!!(v1 == v), 1))
   return 1;
 }
 return 0;
}



static inline int atomic_dec_unless_positive(atomic_t *p)
{
 int v, v1;
 for (v = 0; v <= 0; v = v1) {
  v1 = atomic_cmpxchg(p, v, v - 1);
  if (__builtin_expect(!!(v1 == v), 1))
   return 1;
 }
 return 0;
}
static inline int atomic_dec_if_positive(atomic_t *v)
{
 int c, old, dec;
 c = atomic_read(v);
 for (;;) {
  dec = c - 1;
  if (__builtin_expect(!!(dec < 0), 0))
   break;
  old = atomic_cmpxchg((v), c, dec);
  if (__builtin_expect(!!(old == c), 1))
   break;
  c = old;
 }
 return dec;
}



static inline void atomic_or(int i, atomic_t *v)
{
 int old;
 int _new;

 do {
  old = atomic_read(v);
  _new = old | i;
 } while (atomic_cmpxchg(v, old, _new) != old);
}


typedef atomic64_t atomic_long_t;



static inline long atomic_long_read(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)atomic64_read(v);
}

static inline void atomic_long_set(atomic_long_t *l, long i)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_set(v, i);
}

static inline void atomic_long_inc(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_inc(v);
}

static inline void atomic_long_dec(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_dec(v);
}

static inline void atomic_long_add(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_add(i, v);
}

static inline void atomic_long_sub(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 atomic64_sub(i, v);
}

static inline int atomic_long_sub_and_test(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_sub_and_test(i, v);
}

static inline int atomic_long_dec_and_test(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_dec_and_test(v);
}

static inline int atomic_long_inc_and_test(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_inc_and_test(v);
}

static inline int atomic_long_add_negative(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return atomic64_add_negative(i, v);
}

static inline long atomic_long_add_return(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)atomic64_add_return(i, v);
}

static inline long atomic_long_sub_return(long i, atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)atomic64_sub_return(i, v);
}

static inline long atomic_long_inc_return(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)(atomic64_add_return(1, (v)));
}

static inline long atomic_long_dec_return(atomic_long_t *l)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)(atomic64_sub_return(1, (v)));
}

static inline long atomic_long_add_unless(atomic_long_t *l, long a, long u)
{
 atomic64_t *v = (atomic64_t *)l;

 return (long)atomic64_add_unless(v, a, u);
}

struct thread_info {
  template <typename, int = 0> struct __BYPASSthread_info {};
  template <typename, int> friend struct __BYPASSthread_info;
 struct task_struct *task;
 struct exec_domain *exec_domain;
 __u32 flags;
 __u32 status;
 __u32 cpu;
 int saved_preempt_count;
 mm_segment_t addr_limit;
 struct restart_block restart_block;
 void *sysenter_return;






 unsigned int sig_on_uaccess_error:1;
 unsigned int uaccess_err:1;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) kernel_stack;

static inline struct thread_info *current_thread_info(void)
{






}
static inline void set_restore_sigmask(void)
{
 struct thread_info *ti = current_thread_info();
 ti->status |= 0x0008;
 (!(__builtin_constant_p((2)) ? constant_test_bit((2), ((unsigned long *)&ti->flags)) : variable_test_bit((2), ((unsigned long *)&ti->flags))));
}
static inline void clear_restore_sigmask(void)
{
 current_thread_info()->status &= ~0x0008;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11thread_info6statusE_151_0 {
  typedef TJP__ZN11thread_info6statusE_151_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11thread_info6statusE_151(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN11thread_info6statusE_151_0< ::__u32 , ::thread_info , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}
static inline bool test_restore_sigmask(void)
{
 return __get__ZN11thread_info6statusE_151(&current_thread_info()->status) & 0x0008;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11thread_info6statusE_152_0 {
  typedef TJP__ZN11thread_info6statusE_152_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11thread_info6statusE_152(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN11thread_info6statusE_152_0< ::__u32 , ::thread_info , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}
static inline bool test_and_clear_restore_sigmask(void)
{
 struct thread_info *ti = current_thread_info();
 if (!(__get__ZN11thread_info6statusE_152(&ti->status) & 0x0008))
  return _false;
 ti->status &= ~0x0008;
 return _true;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11thread_info6statusE_155_0 {
  typedef TJP__ZN11thread_info6statusE_155_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11thread_info6statusE_155(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN11thread_info6statusE_155_0< ::__u32 , ::thread_info , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}
static inline bool is_ia32_task(void)
{




 if (__get__ZN11thread_info6statusE_155(&current_thread_info()->status) & 0x0002)
  return _true;

 return _false;
}



extern void arch_task_cache_init(void);
extern int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src);
extern void arch_release_task_struct(struct task_struct *tsk);
static inline void set_ti_thread_flag(struct thread_info *ti, int flag)
{
 set_bit(flag, (unsigned long *)&ti->flags);
}

static inline void clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline int test_and_set_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_set_bit(flag, (unsigned long *)&ti->flags);
}

static inline int test_and_clear_ti_thread_flag(struct thread_info *ti, int flag)
{
 return test_and_clear_bit(flag, (unsigned long *)&ti->flags);
}

static inline int test_ti_thread_flag(struct thread_info *ti, int flag)
{
 return (__builtin_constant_p((flag)) ? constant_test_bit((flag), ((unsigned long *)&ti->flags)) : variable_test_bit((flag), ((unsigned long *)&ti->flags)));
}
static inline void set_need_resched(void)
{
}

extern __attribute__((section(".data..percpu" ""))) __typeof__(int) __preempt_count;
static inline __attribute__((always_inline)) int preempt_count(void)
{
 return ({ typeof((__preempt_count)) pfo_ret__; switch (sizeof((__preempt_count))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"(__preempt_count)); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(__preempt_count)); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(__preempt_count)); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(__preempt_count)); break; default: __bad_percpu_size(); } pfo_ret__; }) & ~0x80000000;
}

static inline __attribute__((always_inline)) void preempt_count_set(int pc)
{
 do { typedef typeof((__preempt_count)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (pc); (void)pto_tmp__; } switch (sizeof((__preempt_count))) { case 1: asm("mov" "b %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "qi" ((pto_T__)(pc))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(pc))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(pc))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "re" ((pto_T__)(pc))); break; default: __bad_percpu_size(); } } while (0);
}
static inline __attribute__((always_inline)) void set_preempt_need_resched(void)
{
 do { typedef typeof((__preempt_count)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (~0x80000000); (void)pto_tmp__; } switch (sizeof((__preempt_count))) { case 1: asm("and" "b %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "qi" ((pto_T__)(~0x80000000))); break; case 2: asm("and" "w %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(~0x80000000))); break; case 4: asm("and" "l %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(~0x80000000))); break; case 8: asm("and" "q %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "re" ((pto_T__)(~0x80000000))); break; default: __bad_percpu_size(); } } while (0);
}

static inline __attribute__((always_inline)) void clear_preempt_need_resched(void)
{
 do { typedef typeof((__preempt_count)) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = (0x80000000); (void)pto_tmp__; } switch (sizeof((__preempt_count))) { case 1: asm("or" "b %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "qi" ((pto_T__)(0x80000000))); break; case 2: asm("or" "w %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(0x80000000))); break; case 4: asm("or" "l %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "ri" ((pto_T__)(0x80000000))); break; case 8: asm("or" "q %1,""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "re" ((pto_T__)(0x80000000))); break; default: __bad_percpu_size(); } } while (0);
}

static inline __attribute__((always_inline)) bool test_preempt_need_resched(void)
{
 return !(({ typeof((__preempt_count)) pfo_ret__; switch (sizeof((__preempt_count))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"(__preempt_count)); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(__preempt_count)); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(__preempt_count)); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(__preempt_count)); break; default: __bad_percpu_size(); } pfo_ret__; }) & 0x80000000);
}





static inline __attribute__((always_inline)) void __preempt_count_add(int val)
{
 do { typedef typeof((__preempt_count)) pao_T__; int pao_ID__ = (__builtin_constant_p(val) && ((val) == 1 || (val) == -1)) ? (int)(val) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (val); (void)pao_tmp__; } switch (sizeof((__preempt_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "qi" ((pao_T__)(val))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(val))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(val))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "re" ((pao_T__)(val))); break; default: __bad_percpu_size(); } } while (0);
}

static inline __attribute__((always_inline)) void __preempt_count_sub(int val)
{
 do { typedef typeof((__preempt_count)) pao_T__; int pao_ID__ = (__builtin_constant_p(-val) && ((-val) == 1 || (-val) == -1)) ? (int)(-val) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = (-val); (void)pao_tmp__; } switch (sizeof((__preempt_count))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "qi" ((pao_T__)(-val))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(-val))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "ri" ((pao_T__)(-val))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((__preempt_count)) : "re" ((pao_T__)(-val))); break; default: __bad_percpu_size(); } } while (0);
}






static inline __attribute__((always_inline)) bool __preempt_count_dec_and_test(void)
{
 do { char c; asm ("decl" " " "%%""gs"":" "%P" "0" "; set" "e" " %1" : "+m" (__preempt_count), "=qm" (c) : : "memory"); return c != 0; } while (0);
}




static inline __attribute__((always_inline)) bool should_resched(void)
{
 return __builtin_expect(!!(!({ typeof((__preempt_count)) pfo_ret__; switch (sizeof((__preempt_count))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"(__preempt_count)); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(__preempt_count)); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(__preempt_count)); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"(__preempt_count)); break; default: __bad_percpu_size(); } pfo_ret__; })), 0);
}
struct preempt_notifier;
struct preempt_ops {
  template <typename, int = 0> struct __BYPASSpreempt_ops {};
  template <typename, int> friend struct __BYPASSpreempt_ops;
 void (*sched_in)(struct preempt_notifier *notifier, int cpu);
 void (*sched_out)(struct preempt_notifier *notifier,
     struct task_struct *next);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct preempt_notifier {
  template <typename, int = 0> struct __BYPASSpreempt_notifier {};
  template <typename, int> friend struct __BYPASSpreempt_notifier;
 struct hlist_node link;
 struct preempt_ops *ops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void preempt_notifier_register(struct preempt_notifier *notifier);
void preempt_notifier_unregister(struct preempt_notifier *notifier);

static inline void preempt_notifier_init(struct preempt_notifier *notifier,
         struct preempt_ops *ops)
{
 INIT_HLIST_NODE(&notifier->link);
 notifier->ops = ops;
}









extern void local_bh_disable(void);
extern void _local_bh_enable(void);
extern void local_bh_enable(void);
extern void local_bh_enable_ip(unsigned long ip);
static inline __attribute__((always_inline)) void rdtsc_barrier(void)
{
 asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(3*32+17)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" "mfence" "\n" "664""1" ":\n\t" ".popsection" : : : "memory");
 asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(3*32+18)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" "lfence" "\n" "664""1" ":\n\t" ".popsection" : : : "memory");
}
struct task_struct;
struct lockdep_map;


extern int prove_locking;
extern int lock_stat;
static inline void lockdep_off(void)
{
}

static inline void lockdep_on(void)
{
}
struct lock_class_key {
  template <typename, int = 0> struct __BYPASSlock_class_key {};
  template <typename, int> friend struct __BYPASSlock_class_key; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void print_irqtrace_events(struct task_struct *curr)
{
}

typedef struct raw_spinlock {
  template <typename, int = 0> struct __BYPASSraw_spinlock {};
  template <typename, int> friend struct __BYPASSraw_spinlock;
 arch_spinlock_t raw_lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} raw_spinlock_t;
typedef struct spinlock {
  template <typename, int = 0> struct __BYPASSspinlock {};
  template <typename, int> friend struct __BYPASSspinlock;
 union {
  struct raw_spinlock rlock;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
} spinlock_t;
typedef struct {
 arch_rwlock_t raw_lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} rwlock_t;








extern bool static_key_initialized;
enum jump_label_type {
 JUMP_LABEL_DISABLE = 0,
 JUMP_LABEL_ENABLE,
};

struct module;
struct static_key {
  template <typename, int = 0> struct __BYPASSstatic_key {};
  template <typename, int> friend struct __BYPASSstatic_key;
 atomic_t enabled;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline __attribute__((always_inline)) void jump_label_init(void)
{
 static_key_initialized = _true;
}

static inline __attribute__((always_inline)) bool static_key_false(struct static_key *key)
{
 if (__builtin_expect(!!(atomic_read(&key->enabled) > 0), 0))
  return _true;
 return _false;
}

static inline __attribute__((always_inline)) bool static_key_true(struct static_key *key)
{
 if (__builtin_expect(!!(atomic_read(&key->enabled) > 0), 1))
  return _true;
 return _false;
}

static inline void static_key_slow_inc(struct static_key *key)
{
 (!static_key_initialized);
 ;
}

static inline void static_key_slow_dec(struct static_key *key)
{
 (!static_key_initialized);
 ;
}

static inline int jump_label_text_reserved(void *start, void *end)
{
 return 0;
}

static inline void jump_label_lock(void) {}
static inline void jump_label_unlock(void) {}

static inline int jump_label_apply_nops(struct module *mod)
{
 return 0;
}
static inline bool static_key_enabled(struct static_key *key)
{
 return (atomic_read(&key->enabled) > 0);
}
extern int _atomic_dec_and_lock(atomic_t *atomic, spinlock_t *lock);


typedef struct __wait_queue wait_queue_t;
typedef int (*wait_queue_func_t)(wait_queue_t *wait, unsigned mode, int flags, void *key);
int default_wake_function(wait_queue_t *wait, unsigned mode, int flags, void *key);

struct __wait_queue {
  template <typename, int = 0> struct __BYPASS__wait_queue {};
  template <typename, int> friend struct __BYPASS__wait_queue;
 unsigned int flags;

 void *_private;
 wait_queue_func_t func;
 struct list_head task_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct wait_bit_key {
  template <typename, int = 0> struct __BYPASSwait_bit_key {};
  template <typename, int> friend struct __BYPASSwait_bit_key;
 void *flags;
 int bit_nr;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct wait_bit_queue {
  template <typename, int = 0> struct __BYPASSwait_bit_queue {};
  template <typename, int> friend struct __BYPASSwait_bit_queue;
 struct wait_bit_key key;
 wait_queue_t wait;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct __wait_queue_head {
  template <typename, int = 0> struct __BYPASS__wait_queue_head {};
  template <typename, int> friend struct __BYPASS__wait_queue_head;
 spinlock_t lock;
 struct list_head task_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct __wait_queue_head wait_queue_head_t;

struct task_struct;
extern void __init_waitqueue_head(wait_queue_head_t *q, char *name, struct lock_class_key *);
static inline void init_waitqueue_entry(wait_queue_t *q, struct task_struct *p)
{
 q->flags = 0;
 q->_private = p;
 q->func = default_wake_function;
}

static inline void
init_waitqueue_func_entry(wait_queue_t *q, wait_queue_func_t func)
{
 q->flags = 0;
 q->_private = 0;
 q->func = func;
}

static inline int waitqueue_active(wait_queue_head_t *q)
{
 return !list_empty(&q->task_list);
}

extern void add_wait_queue(wait_queue_head_t *q, wait_queue_t *wait);
extern void add_wait_queue_exclusive(wait_queue_head_t *q, wait_queue_t *wait);
extern void remove_wait_queue(wait_queue_head_t *q, wait_queue_t *wait);

static inline void __add_wait_queue(wait_queue_head_t *head, wait_queue_t *_new)
{
 list_add(&_new->task_list, &head->task_list);
}




static inline void
__add_wait_queue_exclusive(wait_queue_head_t *q, wait_queue_t *wait)
{
 wait->flags |= 0x01;
 __add_wait_queue(q, wait);
}

static inline void __add_wait_queue_tail(wait_queue_head_t *head,
      wait_queue_t *_new)
{
 list_add_tail(&_new->task_list, &head->task_list);
}

static inline void
__add_wait_queue_tail_exclusive(wait_queue_head_t *q, wait_queue_t *wait)
{
 wait->flags |= 0x01;
 __add_wait_queue_tail(q, wait);
}

static inline void
__remove_wait_queue(wait_queue_head_t *head, wait_queue_t *old)
{
 list_del(&old->task_list);
}

void __wake_up(wait_queue_head_t *q, unsigned int mode, int nr, void *key);
void __wake_up_locked_key(wait_queue_head_t *q, unsigned int mode, void *key);
void __wake_up_sync_key(wait_queue_head_t *q, unsigned int mode, int nr, void *key);
void __wake_up_locked(wait_queue_head_t *q, unsigned int mode, int nr);
void __wake_up_sync(wait_queue_head_t *q, unsigned int mode, int nr);
void __wake_up_bit(wait_queue_head_t *, void *, int);
int __wait_on_bit(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned);
int __wait_on_bit_lock(wait_queue_head_t *, struct wait_bit_queue *, int (*)(void *), unsigned);
void wake_up_bit(void *, int);
void wake_up_atomic_t(atomic_t *);
int out_of_line_wait_on_bit(void *, int, int (*)(void *), unsigned);
int out_of_line_wait_on_bit_lock(void *, int, int (*)(void *), unsigned);
int out_of_line_wait_on_atomic_t(atomic_t *, int (*)(atomic_t *), unsigned);
wait_queue_head_t *bit_waitqueue(void *, int);
extern void sleep_on(wait_queue_head_t *q);
extern long sleep_on_timeout(wait_queue_head_t *q, signed long timeout);
extern void interruptible_sleep_on(wait_queue_head_t *q);
extern long interruptible_sleep_on_timeout(wait_queue_head_t *q, signed long timeout);




void prepare_to_wait(wait_queue_head_t *q, wait_queue_t *wait, int state);
void prepare_to_wait_exclusive(wait_queue_head_t *q, wait_queue_t *wait, int state);
long prepare_to_wait_event(wait_queue_head_t *q, wait_queue_t *wait, int state);
void finish_wait(wait_queue_head_t *q, wait_queue_t *wait);
void abort_exclusive_wait(wait_queue_head_t *q, wait_queue_t *wait, unsigned int mode, void *key);
int autoremove_wake_function(wait_queue_t *wait, unsigned mode, int sync, void *key);
int wake_bit_function(wait_queue_t *wait, unsigned mode, int sync, void *key);
static inline int
wait_on_bit(void *word, int bit, int (*action)(void *), unsigned mode)
{



        if (!(__builtin_constant_p((bit)) ? constant_test_bit((bit), ((unsigned long *)word)) : variable_test_bit((bit), ((unsigned long *)word))))

  return 0;
 return out_of_line_wait_on_bit(word, bit, action, mode);
}
static inline int
wait_on_bit_lock(void *word, int bit, int (*action)(void *), unsigned mode)
{



        if (!test_and_set_bit(bit, (unsigned long *)word))

  return 0;
 return out_of_line_wait_on_bit_lock(word, bit, action, mode);
}
static inline
int wait_on_atomic_t(atomic_t *val, int (*action)(atomic_t *), unsigned mode)
{
 if (atomic_read(val) == 0)
  return 0;
 return out_of_line_wait_on_atomic_t(val, action, mode);
}




typedef struct seqcount {
  template <typename, int = 0> struct __BYPASSseqcount {};
  template <typename, int> friend struct __BYPASSseqcount;
 unsigned sequence;




  friend class ::Introspect;
  friend class ::MyIntrospect;
} seqcount_t;
typedef struct {
 struct seqcount seqcount;
 spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} seqlock_t;
typedef struct _nodemask {
  template <typename, int = 0> struct __BYPASS_nodemask {};
  template <typename, int> friend struct __BYPASS_nodemask; unsigned long bits[((((1 << 6)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} nodemask_t;

extern nodemask_t _unused_nodemask_arg_;

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_165_0 {
  typedef TJP__ZN9_nodemask4bitsE_165_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_165(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_165_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline __attribute__((always_inline)) void __node_set(int node, nodemask_t *dstp)
{
 set_bit(node, __get__ZN9_nodemask4bitsE_165(dstp->bits));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_166_0 {
  typedef TJP__ZN9_nodemask4bitsE_166_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_166(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_166_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __node_clear(int node, nodemask_t *dstp)
{
 clear_bit(node, __get__ZN9_nodemask4bitsE_166(dstp->bits));
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_167_0 {
  typedef TJP__ZN9_nodemask4bitsE_167_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_167(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_167_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_setall(nodemask_t *dstp, int nbits)
{
 bitmap_fill(__get__ZN9_nodemask4bitsE_167(dstp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_168_0 {
  typedef TJP__ZN9_nodemask4bitsE_168_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_168(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_168_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_clear(nodemask_t *dstp, int nbits)
{
 bitmap_zero(__get__ZN9_nodemask4bitsE_168(dstp->bits), nbits);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_169_0 {
  typedef TJP__ZN9_nodemask4bitsE_169_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_169(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_169_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __node_test_and_set(int node, nodemask_t *addr)
{
 return test_and_set_bit(node, __get__ZN9_nodemask4bitsE_169(addr->bits));
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_170_0 {
  typedef TJP__ZN9_nodemask4bitsE_170_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_170(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_170_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_171_0 {
  typedef TJP__ZN9_nodemask4bitsE_171_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_171(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_171_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_172_0 {
  typedef TJP__ZN9_nodemask4bitsE_172_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_172(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_172_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_and(nodemask_t *dstp, nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 bitmap_and(__get__ZN9_nodemask4bitsE_170(dstp->bits), __get__ZN9_nodemask4bitsE_171(src1p->bits), __get__ZN9_nodemask4bitsE_172(src2p->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_173_0 {
  typedef TJP__ZN9_nodemask4bitsE_173_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_173(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_173_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_174_0 {
  typedef TJP__ZN9_nodemask4bitsE_174_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_174(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_174_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_175_0 {
  typedef TJP__ZN9_nodemask4bitsE_175_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_175(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_175_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_or(nodemask_t *dstp, nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 bitmap_or(__get__ZN9_nodemask4bitsE_173(dstp->bits), __get__ZN9_nodemask4bitsE_174(src1p->bits), __get__ZN9_nodemask4bitsE_175(src2p->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_176_0 {
  typedef TJP__ZN9_nodemask4bitsE_176_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_176(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_176_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_177_0 {
  typedef TJP__ZN9_nodemask4bitsE_177_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_177(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_177_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_178_0 {
  typedef TJP__ZN9_nodemask4bitsE_178_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_178(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_178_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_xor(nodemask_t *dstp, nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 bitmap_xor(__get__ZN9_nodemask4bitsE_176(dstp->bits), __get__ZN9_nodemask4bitsE_177(src1p->bits), __get__ZN9_nodemask4bitsE_178(src2p->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_179_0 {
  typedef TJP__ZN9_nodemask4bitsE_179_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_179(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_179_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_180_0 {
  typedef TJP__ZN9_nodemask4bitsE_180_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_180(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_180_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_181_0 {
  typedef TJP__ZN9_nodemask4bitsE_181_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_181(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_181_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_andnot(nodemask_t *dstp, nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 bitmap_andnot(__get__ZN9_nodemask4bitsE_179(dstp->bits), __get__ZN9_nodemask4bitsE_180(src1p->bits), __get__ZN9_nodemask4bitsE_181(src2p->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_182_0 {
  typedef TJP__ZN9_nodemask4bitsE_182_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_182(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_182_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_183_0 {
  typedef TJP__ZN9_nodemask4bitsE_183_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_183(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_183_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_complement(nodemask_t *dstp,
     nodemask_t *srcp, int nbits)
{
 bitmap_complement(__get__ZN9_nodemask4bitsE_182(dstp->bits), __get__ZN9_nodemask4bitsE_183(srcp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_184_0 {
  typedef TJP__ZN9_nodemask4bitsE_184_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_184(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_184_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_185_0 {
  typedef TJP__ZN9_nodemask4bitsE_185_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_185(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_185_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __nodes_equal( nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 return bitmap_equal(__get__ZN9_nodemask4bitsE_184(src1p->bits), __get__ZN9_nodemask4bitsE_185(src2p->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_186_0 {
  typedef TJP__ZN9_nodemask4bitsE_186_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_186(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_186_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_187_0 {
  typedef TJP__ZN9_nodemask4bitsE_187_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_187(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_187_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __nodes_intersects( nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 return bitmap_intersects(__get__ZN9_nodemask4bitsE_186(src1p->bits), __get__ZN9_nodemask4bitsE_187(src2p->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_188_0 {
  typedef TJP__ZN9_nodemask4bitsE_188_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_188(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_188_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_189_0 {
  typedef TJP__ZN9_nodemask4bitsE_189_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_189(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_189_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __nodes_subset( nodemask_t *src1p,
     nodemask_t *src2p, int nbits)
{
 return bitmap_subset(__get__ZN9_nodemask4bitsE_188(src1p->bits), __get__ZN9_nodemask4bitsE_189(src2p->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_190_0 {
  typedef TJP__ZN9_nodemask4bitsE_190_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_190(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_190_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __nodes_empty( nodemask_t *srcp, int nbits)
{
 return bitmap_empty(__get__ZN9_nodemask4bitsE_190(srcp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_191_0 {
  typedef TJP__ZN9_nodemask4bitsE_191_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_191(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_191_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __nodes_full( nodemask_t *srcp, int nbits)
{
 return bitmap_full(__get__ZN9_nodemask4bitsE_191(srcp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_192_0 {
  typedef TJP__ZN9_nodemask4bitsE_192_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_192(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_192_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __nodes_weight( nodemask_t *srcp, int nbits)
{
 return bitmap_weight(__get__ZN9_nodemask4bitsE_192(srcp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_193_0 {
  typedef TJP__ZN9_nodemask4bitsE_193_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_193(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_193_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_194_0 {
  typedef TJP__ZN9_nodemask4bitsE_194_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_194(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_194_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_shift_right(nodemask_t *dstp,
     nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_right(__get__ZN9_nodemask4bitsE_193(dstp->bits), __get__ZN9_nodemask4bitsE_194(srcp->bits), n, nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_195_0 {
  typedef TJP__ZN9_nodemask4bitsE_195_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_195(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_195_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_196_0 {
  typedef TJP__ZN9_nodemask4bitsE_196_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_196(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_196_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_shift_left(nodemask_t *dstp,
     nodemask_t *srcp, int n, int nbits)
{
 bitmap_shift_left(__get__ZN9_nodemask4bitsE_195(dstp->bits), __get__ZN9_nodemask4bitsE_196(srcp->bits), n, nbits);
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_197_0 {
  typedef TJP__ZN9_nodemask4bitsE_197_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_197(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_197_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __first_node( nodemask_t *srcp)
{
 return ({ int __min1 = ((1 << 6)); int __min2 = (find_first_bit(__get__ZN9_nodemask4bitsE_197(srcp->bits), (1 << 6))); __min1 < __min2 ? __min1: __min2; });
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_198_0 {
  typedef TJP__ZN9_nodemask4bitsE_198_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_198(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_198_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __next_node(int n, nodemask_t *srcp)
{
 return ({ int __min1 = ((1 << 6)); int __min2 = (find_next_bit(__get__ZN9_nodemask4bitsE_198(srcp->bits), (1 << 6), n+1)); __min1 < __min2 ? __min1: __min2; });
}

static inline void init_nodemask_of_node(nodemask_t *mask, int node)
{
 __nodes_clear(&(*mask), (1 << 6));
 __node_set((node), &(*mask));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_199_0 {
  typedef TJP__ZN9_nodemask4bitsE_199_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_199(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_199_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __first_unset_node( nodemask_t *maskp)
{
 return ({ int __min1 = ((1 << 6)); int __min2 = (find_first_zero_bit(__get__ZN9_nodemask4bitsE_199(maskp->bits), (1 << 6))); __min1 < __min2 ? __min1: __min2; })
                                                  ;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_200_0 {
  typedef TJP__ZN9_nodemask4bitsE_200_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_200(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_200_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __nodemask_scnprintf(char *buf, int len,
     nodemask_t *srcp, int nbits)
{
 return bitmap_scnprintf(buf, len, __get__ZN9_nodemask4bitsE_200(srcp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_201_0 {
  typedef TJP__ZN9_nodemask4bitsE_201_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_201(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_201_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __nodemask_parse_user( char *buf, int len,
     nodemask_t *dstp, int nbits)
{
 return bitmap_parse_user(buf, len, __get__ZN9_nodemask4bitsE_201(dstp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_202_0 {
  typedef TJP__ZN9_nodemask4bitsE_202_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_202(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_202_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __nodelist_scnprintf(char *buf, int len,
     nodemask_t *srcp, int nbits)
{
 return bitmap_scnlistprintf(buf, len, __get__ZN9_nodemask4bitsE_202(srcp->bits), nbits);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_203_0 {
  typedef TJP__ZN9_nodemask4bitsE_203_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_203(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_203_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __nodelist_parse( char *buf, nodemask_t *dstp, int nbits)
{
 return bitmap_parselist(buf, __get__ZN9_nodemask4bitsE_203(dstp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_204_0 {
  typedef TJP__ZN9_nodemask4bitsE_204_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_204(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_204_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_205_0 {
  typedef TJP__ZN9_nodemask4bitsE_205_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_205(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_205_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int __node_remap(int oldbit,
  nodemask_t *oldp, nodemask_t *newp, int nbits)
{
 return bitmap_bitremap(oldbit, __get__ZN9_nodemask4bitsE_204(oldp->bits), __get__ZN9_nodemask4bitsE_205(newp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_206_0 {
  typedef TJP__ZN9_nodemask4bitsE_206_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_206(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_206_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_207_0 {
  typedef TJP__ZN9_nodemask4bitsE_207_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_207(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_207_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_208_0 {
  typedef TJP__ZN9_nodemask4bitsE_208_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_208(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_208_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_209_0 {
  typedef TJP__ZN9_nodemask4bitsE_209_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_209(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_209_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_remap(nodemask_t *dstp, nodemask_t *srcp,
  nodemask_t *oldp, nodemask_t *newp, int nbits)
{
 bitmap_remap(__get__ZN9_nodemask4bitsE_206(dstp->bits), __get__ZN9_nodemask4bitsE_207(srcp->bits), __get__ZN9_nodemask4bitsE_208(oldp->bits), __get__ZN9_nodemask4bitsE_209(newp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_210_0 {
  typedef TJP__ZN9_nodemask4bitsE_210_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_210(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_210_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_211_0 {
  typedef TJP__ZN9_nodemask4bitsE_211_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_211(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_211_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_212_0 {
  typedef TJP__ZN9_nodemask4bitsE_212_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_212(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_212_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_onto(nodemask_t *dstp, nodemask_t *origp,
  nodemask_t *relmapp, int nbits)
{
 bitmap_onto(__get__ZN9_nodemask4bitsE_210(dstp->bits), __get__ZN9_nodemask4bitsE_211(origp->bits), __get__ZN9_nodemask4bitsE_212(relmapp->bits), nbits);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_213_0 {
  typedef TJP__ZN9_nodemask4bitsE_213_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_213(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_213_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_214_0 {
  typedef TJP__ZN9_nodemask4bitsE_214_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_214(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_214_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline void __nodes_fold(nodemask_t *dstp, nodemask_t *origp,
  int sz, int nbits)
{
 bitmap_fold(__get__ZN9_nodemask4bitsE_213(dstp->bits), __get__ZN9_nodemask4bitsE_214(origp->bits), sz, nbits);
}
enum node_states {
 N_POSSIBLE,
 N_ONLINE,
 N_NORMAL_MEMORY,



 N_HIGH_MEMORY = N_NORMAL_MEMORY,


 N_MEMORY,



 N_CPU,
 NR_NODE_STATES
};






extern nodemask_t node_states[NR_NODE_STATES];



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_215_0 {
  typedef TJP__ZN9_nodemask4bitsE_215_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_215(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_215_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_217_0 {
  typedef TJP__ZN9_nodemask4bitsE_217_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_217(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_217_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int node_state(int node, enum node_states state)
{
 return (__builtin_constant_p(((node))) ? constant_test_bit(((node)), (__get__ZN9_nodemask4bitsE_215((node_states[state]).bits))) : variable_test_bit(((node)), (__get__ZN9_nodemask4bitsE_217((node_states[state]).bits))));
}

static inline void node_set_state(int node, enum node_states state)
{
 __node_set(node, &node_states[state]);
}

static inline void node_clear_state(int node, enum node_states state)
{
 __node_clear(node, &node_states[state]);
}

static inline int num_node_state(enum node_states state)
{
 return __nodes_weight(&(node_states[state]), (1 << 6));
}







extern int nr_node_ids;
extern int nr_online_nodes;

static inline void node_set_online(int nid)
{
 node_set_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}

static inline void node_set_offline(int nid)
{
 node_clear_state(nid, N_ONLINE);
 nr_online_nodes = num_node_state(N_ONLINE);
}
extern int node_random( nodemask_t *maskp);
struct nodemask_scratch {
  template <typename, int = 0> struct __BYPASSnodemask_scratch {};
  template <typename, int> friend struct __BYPASSnodemask_scratch;
 nodemask_t mask1;
 nodemask_t mask2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum pageblock_bits {
 PB_migrate,
 PB_migrate_end = PB_migrate + 3 - 1,


 PB_migrate_skip,

 NR_PAGEBLOCK_BITS
};
struct page;


unsigned long get_pageblock_flags_group(struct page *page,
     int start_bitidx, int end_bitidx);
void set_pageblock_flags_group(struct page *page, unsigned long flags,
     int start_bitidx, int end_bitidx);




enum {
 MIGRATE_UNMOVABLE,
 MIGRATE_RECLAIMABLE,
 MIGRATE_MOVABLE,
 MIGRATE_PCPTYPES,
 MIGRATE_RESERVE = MIGRATE_PCPTYPES,
 MIGRATE_CMA,


 MIGRATE_ISOLATE,

 MIGRATE_TYPES
};
extern int page_group_by_mobility_disabled;

static inline int get_pageblock_migratetype(struct page *page)
{
 return get_pageblock_flags_group(page, PB_migrate, PB_migrate_end);
}

struct free_area {
  template <typename, int = 0> struct __BYPASSfree_area {};
  template <typename, int> friend struct __BYPASSfree_area;
 struct list_head free_list[MIGRATE_TYPES];
 unsigned long nr_free;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pglist_data;
struct zone_padding {
  template <typename, int = 0> struct __BYPASSzone_padding {};
  template <typename, int> friend struct __BYPASSzone_padding;
 char x[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(1 << (6))));





enum zone_stat_item {

 NR_FREE_PAGES,
 NR_ALLOC_BATCH,
 NR_LRU_BASE,
 NR_INACTIVE_ANON = NR_LRU_BASE,
 NR_ACTIVE_ANON,
 NR_INACTIVE_FILE,
 NR_ACTIVE_FILE,
 NR_UNEVICTABLE,
 NR_MLOCK,
 NR_ANON_PAGES,
 NR_FILE_MAPPED,

 NR_FILE_PAGES,
 NR_FILE_DIRTY,
 NR_WRITEBACK,
 NR_SLAB_RECLAIMABLE,
 NR_SLAB_UNRECLAIMABLE,
 NR_PAGETABLE,
 NR_KERNEL_STACK,

 NR_UNSTABLE_NFS,
 NR_BOUNCE,
 NR_VMSCAN_WRITE,
 NR_VMSCAN_IMMEDIATE,
 NR_WRITEBACK_TEMP,
 NR_ISOLATED_ANON,
 NR_ISOLATED_FILE,
 NR_SHMEM,
 NR_DIRTIED,
 NR_WRITTEN,

 NUMA_HIT,
 NUMA_MISS,
 NUMA_FOREIGN,
 NUMA_INTERLEAVE_HIT,
 NUMA_LOCAL,
 NUMA_OTHER,

 NR_ANON_TRANSPARENT_HUGEPAGES,
 NR_FREE_CMA_PAGES,
 NR_VM_ZONE_STAT_ITEMS };
enum lru_list {
 LRU_INACTIVE_ANON = 0,
 LRU_ACTIVE_ANON = 0 + 1,
 LRU_INACTIVE_FILE = 0 + 2,
 LRU_ACTIVE_FILE = 0 + 2 + 1,
 LRU_UNEVICTABLE,
 NR_LRU_LISTS
};





static inline int is_file_lru(enum lru_list lru)
{
 return (lru == LRU_INACTIVE_FILE || lru == LRU_ACTIVE_FILE);
}

static inline int is_active_lru(enum lru_list lru)
{
 return (lru == LRU_ACTIVE_ANON || lru == LRU_ACTIVE_FILE);
}

static inline int is_unevictable_lru(enum lru_list lru)
{
 return (lru == LRU_UNEVICTABLE);
}

struct zone_reclaim_stat {
  template <typename, int = 0> struct __BYPASSzone_reclaim_stat {};
  template <typename, int> friend struct __BYPASSzone_reclaim_stat;
 unsigned long recent_rotated[2];
 unsigned long recent_scanned[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct lruvec {
  template <typename, int = 0> struct __BYPASSlruvec {};
  template <typename, int> friend struct __BYPASSlruvec;
 struct list_head lists[NR_LRU_LISTS];
 struct zone_reclaim_stat reclaim_stat;

 struct zone *zone;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef unsigned isolate_mode_t;

enum zone_watermarks {
 WMARK_MIN,
 WMARK_LOW,
 WMARK_HIGH,
 NR_WMARK
};





struct per_cpu_pages {
  template <typename, int = 0> struct __BYPASSper_cpu_pages {};
  template <typename, int> friend struct __BYPASSper_cpu_pages;
 int count;
 int high;
 int batch;


 struct list_head lists[MIGRATE_PCPTYPES];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct per_cpu_pageset {
  template <typename, int = 0> struct __BYPASSper_cpu_pageset {};
  template <typename, int> friend struct __BYPASSper_cpu_pageset;
 struct per_cpu_pages pcp;

 s8 expire;


 s8 stat_threshold;
 s8 vm_stat_diff[NR_VM_ZONE_STAT_ITEMS];


  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum zone_type {
 ZONE_DMA,







 ZONE_DMA32,






 ZONE_NORMAL,
 ZONE_MOVABLE,
 __MAX_NR_ZONES
};



struct zone {
  template <typename, int = 0> struct __BYPASSzone {};
  template <typename, int> friend struct __BYPASSzone;



 unsigned long watermark[NR_WMARK];






 unsigned long percpu_drift_mark;
 unsigned long lowmem_reserve[4];





 unsigned long dirty_balance_reserve;


 int node;



 unsigned long min_unmapped_pages;
 unsigned long min_slab_pages;

 struct per_cpu_pageset *pageset;



 spinlock_t lock;


 bool compact_blockskip_flush;


 unsigned long compact_cached_free_pfn;
 unsigned long compact_cached_migrate_pfn;



 seqlock_t span_seqlock;

 struct free_area free_area[11];
 unsigned int compact_considered;
 unsigned int compact_defer_shift;
 int compact_order_failed;


 struct zone_padding _pad1_;


 spinlock_t lru_lock;
 struct lruvec lruvec;

 unsigned long pages_scanned;
 unsigned long flags;


 atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];





 unsigned int inactive_ratio;


 struct zone_padding _pad2_;
 wait_queue_head_t * wait_table;
 unsigned long wait_table_hash_nr_entries;
 unsigned long wait_table_bits;




 struct pglist_data *zone_pgdat;

 unsigned long zone_start_pfn;
 unsigned long spanned_pages;
 unsigned long present_pages;
 unsigned long managed_pages;




 char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(1 << (6))));

typedef enum {
 ZONE_RECLAIM_LOCKED,
 ZONE_OOM_LOCKED,
 ZONE_CONGESTED,


 ZONE_TAIL_LRU_DIRTY,



 ZONE_WRITEBACK,


} zone_flags_t;

static inline void zone_set_flag(struct zone *zone, zone_flags_t flag)
{
 set_bit(flag, &zone->flags);
}

static inline int zone_test_and_set_flag(struct zone *zone, zone_flags_t flag)
{
 return test_and_set_bit(flag, &zone->flags);
}

static inline void zone_clear_flag(struct zone *zone, zone_flags_t flag)
{
 clear_bit(flag, &zone->flags);
}

static inline int zone_is_reclaim_congested( struct zone *zone)
{
 return (__builtin_constant_p((ZONE_CONGESTED)) ? constant_test_bit((ZONE_CONGESTED), (&zone->flags)) : variable_test_bit((ZONE_CONGESTED), (&zone->flags)));
}

static inline int zone_is_reclaim_dirty( struct zone *zone)
{
 return (__builtin_constant_p((ZONE_TAIL_LRU_DIRTY)) ? constant_test_bit((ZONE_TAIL_LRU_DIRTY), (&zone->flags)) : variable_test_bit((ZONE_TAIL_LRU_DIRTY), (&zone->flags)));
}

static inline int zone_is_reclaim_writeback( struct zone *zone)
{
 return (__builtin_constant_p((ZONE_WRITEBACK)) ? constant_test_bit((ZONE_WRITEBACK), (&zone->flags)) : variable_test_bit((ZONE_WRITEBACK), (&zone->flags)));
}

static inline int zone_is_reclaim_locked( struct zone *zone)
{
 return (__builtin_constant_p((ZONE_RECLAIM_LOCKED)) ? constant_test_bit((ZONE_RECLAIM_LOCKED), (&zone->flags)) : variable_test_bit((ZONE_RECLAIM_LOCKED), (&zone->flags)));
}

static inline int zone_is_oom_locked( struct zone *zone)
{
 return (__builtin_constant_p((ZONE_OOM_LOCKED)) ? constant_test_bit((ZONE_OOM_LOCKED), (&zone->flags)) : variable_test_bit((ZONE_OOM_LOCKED), (&zone->flags)));
}

static inline unsigned long zone_end_pfn( struct zone *zone)
{
 return zone->zone_start_pfn + zone->spanned_pages;
}

static inline bool zone_spans_pfn( struct zone *zone, unsigned long pfn)
{
 return zone->zone_start_pfn <= pfn && pfn < zone_end_pfn(zone);
}

static inline bool zone_is_initialized(struct zone *zone)
{
 return !!zone->wait_table;
}

static inline bool zone_is_empty(struct zone *zone)
{
 return zone->spanned_pages == 0;
}
struct zonelist_cache {
  template <typename, int = 0> struct __BYPASSzonelist_cache {};
  template <typename, int> friend struct __BYPASSzonelist_cache;
 unsigned short z_to_n[((1 << 6) * 4)];
 unsigned long fullzones[(((((1 << 6) * 4)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
 unsigned long last_full_zap;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct zoneref {
  template <typename, int = 0> struct __BYPASSzoneref {};
  template <typename, int> friend struct __BYPASSzoneref;
 struct zone *zone;
 int zone_idx;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct zonelist {
  template <typename, int = 0> struct __BYPASSzonelist {};
  template <typename, int> friend struct __BYPASSzonelist;
 struct zonelist_cache *zlcache_ptr;
 struct zoneref _zonerefs[((1 << 6) * 4) + 1];

 struct zonelist_cache zlcache;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct node_active_region {
  template <typename, int = 0> struct __BYPASSnode_active_region {};
  template <typename, int> friend struct __BYPASSnode_active_region;
 unsigned long start_pfn;
 unsigned long end_pfn;
 int nid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern struct page *mem_map;
struct bootmem_data;
typedef struct pglist_data {
  template <typename, int = 0> struct __BYPASSpglist_data {};
  template <typename, int> friend struct __BYPASSpglist_data;
 struct zone node_zones[4];
 struct zonelist node_zonelists[2];
 int nr_zones;
 spinlock_t node_size_lock;

 unsigned long node_start_pfn;
 unsigned long node_present_pages;
 unsigned long node_spanned_pages;

 int node_id;
 nodemask_t reclaim_nodes;
 wait_queue_head_t kswapd_wait;
 wait_queue_head_t pfmemalloc_wait;
 struct task_struct *kswapd;
 int kswapd_max_order;
 enum zone_type classzone_idx;





 spinlock_t numabalancing_migrate_lock;


 unsigned long numabalancing_migrate_next_window;


 unsigned long numabalancing_migrate_nr_pages;


  friend class ::Introspect;
  friend class ::MyIntrospect;
} pg_data_t;
static inline unsigned long pgdat_end_pfn(pg_data_t *pgdat)
{
 return pgdat->node_start_pfn + pgdat->node_spanned_pages;
}

static inline bool pgdat_is_empty(pg_data_t *pgdat)
{
 return !pgdat->node_start_pfn && !pgdat->node_spanned_pages;
}





struct mutex {
  template <typename, int = 0> struct __BYPASSmutex {};
  template <typename, int> friend struct __BYPASSmutex;

 atomic_t count;
 spinlock_t wait_lock;
 struct list_head wait_list;

 struct task_struct *owner;


 void *spin_mlock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct mutex_waiter {
  template <typename, int = 0> struct __BYPASSmutex_waiter {};
  template <typename, int> friend struct __BYPASSmutex_waiter;
 struct list_head list;
 struct task_struct *task;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern int atomic_dec_and_mutex_lock(atomic_t *cnt, struct mutex *lock);
struct rw_semaphore;





struct rw_semaphore {
  template <typename, int = 0> struct __BYPASSrw_semaphore {};
  template <typename, int> friend struct __BYPASSrw_semaphore;
 long count;
 raw_spinlock_t wait_lock;
 struct list_head wait_list;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct rw_semaphore *rwsem_down_read_failed(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_down_write_failed(struct rw_semaphore *sem);
extern struct rw_semaphore *rwsem_wake(struct rw_semaphore *);
extern struct rw_semaphore *rwsem_downgrade_wake(struct rw_semaphore *sem);


static inline void __down_read(struct rw_semaphore *sem)
{
 asm ("# beginning down_read\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " " " "incq" " " "(%1)\n\t"

       "  jns        1f\n"
       "  call call_rwsem_down_read_failed\n"
       "1:\n\t"
       "# ending down_read\n\t"
       : "+m" (sem->count)
       : "a" (sem)
       : "memory", "cc");
}




static inline int __down_read_trylock(struct rw_semaphore *sem)
{
 long result, tmp;
 asm ("# beginning __down_read_trylock\n\t"
       "  mov          %0,%1\n\t"
       "1:\n\t"
       "  mov          %1,%2\n\t"
       "  add          %3,%2\n\t"
       "  jle	     2f\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  cmpxchg  %2,%0\n\t"
       "  jnz	     1b\n\t"
       "2:\n\t"
       "# ending __down_read_trylock\n\t"
       : "+m" (sem->count), "=&a" (result), "=&r" (tmp)
       : "i" (0x00000001L)
       : "memory", "cc");
 return result >= 0 ? 1 : 0;
}




static inline void __down_write_nested(struct rw_semaphore *sem, int subclass)
{
 long tmp;
 asm ("# beginning down_write\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%2)\n\t"

       "  test " " " "%k1" " " "," " " "%k1" " " "\n\t"

       "  jz        1f\n"
       "  call call_rwsem_down_write_failed\n"
       "1:\n"
       "# ending down_write"
       : "+m" (sem->count), "=d" (tmp)
       : "a" (sem), "1" (((-0xffffffffL -1) + 0x00000001L))
       : "memory", "cc");
}

static inline void __down_write(struct rw_semaphore *sem)
{
 __down_write_nested(sem, 0);
}




static inline int __down_write_trylock(struct rw_semaphore *sem)
{
 long result, tmp;
 asm ("# beginning __down_write_trylock\n\t"
       "  mov          %0,%1\n\t"
       "1:\n\t"
       "  test " " " "%k1" " " "," " " "%k1" " " "\n\t"

       "  jnz          2f\n\t"
       "  mov          %1,%2\n\t"
       "  add          %3,%2\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  cmpxchg  %2,%0\n\t"
       "  jnz	     1b\n\t"
       "2:\n\t"
       "  sete         %b1\n\t"
       "  movzbl       %b1, %k1\n\t"
       "# ending __down_write_trylock\n\t"
       : "+m" (sem->count), "=&a" (result), "=&r" (tmp)
       : "er" (((-0xffffffffL -1) + 0x00000001L))
       : "memory", "cc");
 return result;
}




static inline void __up_read(struct rw_semaphore *sem)
{
 long tmp;
 asm ("# beginning __up_read\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%2)\n\t"

       "  jns        1f\n\t"
       "  call call_rwsem_wake\n"
       "1:\n"
       "# ending __up_read\n"
       : "+m" (sem->count), "=d" (tmp)
       : "a" (sem), "1" (-0x00000001L)
       : "memory", "cc");
}




static inline void __up_write(struct rw_semaphore *sem)
{
 long tmp;
 asm ("# beginning __up_write\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "  xadd      %1,(%2)\n\t"

       "  jns        1f\n\t"
       "  call call_rwsem_wake\n"
       "1:\n\t"
       "# ending __up_write\n"
       : "+m" (sem->count), "=d" (tmp)
       : "a" (sem), "1" (-((-0xffffffffL -1) + 0x00000001L))
       : "memory", "cc");
}




static inline void __downgrade_write(struct rw_semaphore *sem)
{
 asm ("# beginning __downgrade_write\n\t"
       ".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " " " "addq" " " "%2,(%1)\n\t"




       "  jns       1f\n\t"
       "  call call_rwsem_downgrade_wake\n"
       "1:\n\t"
       "# ending __downgrade_write\n"
       : "+m" (sem->count)
       : "a" (sem), "er" (-(-0xffffffffL -1))
       : "memory", "cc");
}




static inline void rwsem_atomic_add(long delta, struct rw_semaphore *sem)
{
 asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " " " "addq" " " "%1,%0"
       : "+m" (sem->count)
       : "er" (delta));
}




static inline long rwsem_atomic_update(long delta, struct rw_semaphore *sem)
{
 return delta + ({ __typeof__ (*(((&sem->count)))) __ret = (((delta))); switch (sizeof(*(((&sem->count))))) { case 1: asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "b %b0, %1\n" : "+q" (__ret), "+m" (*(((&sem->count)))) : : "memory", "cc"); break; case 2: asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "w %w0, %1\n" : "+r" (__ret), "+m" (*(((&sem->count)))) : : "memory", "cc"); break; case 4: asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "l %0, %1\n" : "+r" (__ret), "+m" (*(((&sem->count)))) : : "memory", "cc"); break; case 8: asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "xadd" "q %q0, %1\n" : "+r" (__ret), "+m" (*(((&sem->count)))) : : "memory", "cc"); break; default: __xadd_wrong_size(); } __ret; });
}


static inline int rwsem_is_locked(struct rw_semaphore *sem)
{
 return sem->count != 0;
}
extern void __init_rwsem(struct rw_semaphore *sem, char *name,
    struct lock_class_key *key);
struct completion {
  template <typename, int = 0> struct __BYPASScompletion {};
  template <typename, int> friend struct __BYPASScompletion;
 unsigned int done;
 wait_queue_head_t wait;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void init_completion(struct completion *x)
{
 x->done = 0;
 do { static struct lock_class_key __key; __init_waitqueue_head((&x->wait), "&x->wait", &__key); } while (0);
}
static inline void reinit_completion(struct completion *x)
{
 x->done = 0;
}

extern void wait_for_completion(struct completion *);
extern void wait_for_completion_io(struct completion *);
extern int wait_for_completion_interruptible(struct completion *x);
extern int wait_for_completion_killable(struct completion *x);
extern unsigned long wait_for_completion_timeout(struct completion *x,
         unsigned long timeout);
extern unsigned long wait_for_completion_io_timeout(struct completion *x,
          unsigned long timeout);
extern long wait_for_completion_interruptible_timeout(
 struct completion *x, unsigned long timeout);
extern long wait_for_completion_killable_timeout(
 struct completion *x, unsigned long timeout);
extern bool try_wait_for_completion(struct completion *x);
extern bool completion_done(struct completion *x);

extern void complete(struct completion *);
extern void complete_all(struct completion *);






enum debug_obj_state {
 ODEBUG_STATE_NONE,
 ODEBUG_STATE_INIT,
 ODEBUG_STATE_INACTIVE,
 ODEBUG_STATE_ACTIVE,
 ODEBUG_STATE_DESTROYED,
 ODEBUG_STATE_NOTAVAILABLE,
 ODEBUG_STATE_MAX,
};

struct debug_obj_descr;
struct debug_obj {
  template <typename, int = 0> struct __BYPASSdebug_obj {};
  template <typename, int> friend struct __BYPASSdebug_obj;
 struct hlist_node node;
 enum debug_obj_state state;
 unsigned int astate;
 void *object;
 struct debug_obj_descr *descr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct debug_obj_descr {
  template <typename, int = 0> struct __BYPASSdebug_obj_descr {};
  template <typename, int> friend struct __BYPASSdebug_obj_descr;
 char *name;
 void *(*debug_hint) (void *addr);
 int (*fixup_init) (void *addr, enum debug_obj_state state);
 int (*fixup_activate) (void *addr, enum debug_obj_state state);
 int (*fixup_destroy) (void *addr, enum debug_obj_state state);
 int (*fixup_free) (void *addr, enum debug_obj_state state);
 int (*fixup_assert_init)(void *addr, enum debug_obj_state state);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void
debug_object_init (void *addr, struct debug_obj_descr *descr) { }
static inline void
debug_object_init_on_stack(void *addr, struct debug_obj_descr *descr) { }
static inline int
debug_object_activate (void *addr, struct debug_obj_descr *descr) { return 0; }
static inline void
debug_object_deactivate(void *addr, struct debug_obj_descr *descr) { }
static inline void
debug_object_destroy (void *addr, struct debug_obj_descr *descr) { }
static inline void
debug_object_free (void *addr, struct debug_obj_descr *descr) { }
static inline void
debug_object_assert_init(void *addr, struct debug_obj_descr *descr) { }

static inline void debug_objects_early_init(void) { }
static inline void debug_objects_mem_init(void) { }





static inline void
debug_check_no_obj_freed( void *address, unsigned long size) { }

















struct timespec {
  template <typename, int = 0> struct __BYPASStimespec {};
  template <typename, int> friend struct __BYPASStimespec;
 __kernel_time_t tv_sec;
 long tv_nsec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct timeval {
  template <typename, int = 0> struct __BYPASStimeval {};
  template <typename, int> friend struct __BYPASStimeval;
 __kernel_time_t tv_sec;
 __kernel_suseconds_t tv_usec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct timezone {
  template <typename, int = 0> struct __BYPASStimezone {};
  template <typename, int> friend struct __BYPASStimezone;
 int tz_minuteswest;
 int tz_dsttime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct itimerspec {
  template <typename, int = 0> struct __BYPASSitimerspec {};
  template <typename, int> friend struct __BYPASSitimerspec;
 struct timespec it_interval;
 struct timespec it_value;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct itimerval {
  template <typename, int = 0> struct __BYPASSitimerval {};
  template <typename, int> friend struct __BYPASSitimerval;
 struct timeval it_interval;
 struct timeval it_value;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct timezone sys_tz;
static inline int timespec_equal( struct timespec *a,
                                 struct timespec *b)
{
 return (a->tv_sec == b->tv_sec) && (a->tv_nsec == b->tv_nsec);
}






static inline int timespec_compare( struct timespec *lhs, struct timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

static inline int timeval_compare( struct timeval *lhs, struct timeval *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_usec - rhs->tv_usec;
}

extern unsigned long mktime( unsigned int year, unsigned int mon,
       unsigned int day, unsigned int hour,
       unsigned int min, unsigned int sec);

extern void set_normalized_timespec(struct timespec *ts, time_t sec, s64 nsec);






extern struct timespec timespec_add_safe( struct timespec lhs,
      struct timespec rhs);


static inline struct timespec timespec_add(struct timespec lhs,
      struct timespec rhs)
{
 struct timespec ts_delta;
 set_normalized_timespec(&ts_delta, lhs.tv_sec + rhs.tv_sec,
    lhs.tv_nsec + rhs.tv_nsec);
 return ts_delta;
}




static inline struct timespec timespec_sub(struct timespec lhs,
      struct timespec rhs)
{
 struct timespec ts_delta;
 set_normalized_timespec(&ts_delta, lhs.tv_sec - rhs.tv_sec,
    lhs.tv_nsec - rhs.tv_nsec);
 return ts_delta;
}
static inline bool timespec_valid( struct timespec *ts)
{

 if (ts->tv_sec < 0)
  return _false;

 if ((unsigned long)ts->tv_nsec >= 1000000000L)
  return _false;
 return _true;
}

static inline bool timespec_valid_strict( struct timespec *ts)
{
 if (!timespec_valid(ts))
  return _false;

 if ((unsigned long long)ts->tv_sec >= (((s64)~((u64)1 << 63)) / 1000000000L))
  return _false;
 return _true;
}

extern bool persistent_clock_exist;

static inline bool has_persistent_clock(void)
{
 return persistent_clock_exist;
}

extern void read_persistent_clock(struct timespec *ts);
extern void read_boot_clock(struct timespec *ts);
extern int persistent_clock_is_local;
extern int update_persistent_clock(struct timespec now);
void timekeeping_init(void);
extern int timekeeping_suspended;

unsigned long get_seconds(void);
struct timespec current_kernel_time(void);
struct timespec __current_kernel_time(void);
struct timespec get_monotonic_coarse(void);
void get_xtime_and_monotonic_and_sleep_offset(struct timespec *xtim,
    struct timespec *wtom, struct timespec *sleep);
void timekeeping_inject_sleeptime(struct timespec *delta);
extern void do_gettimeofday(struct timeval *tv);
extern int do_settimeofday( struct timespec *tv);
extern int do_sys_settimeofday( struct timespec *tv,
          struct timezone *tz);

extern long do_utimes(int dfd, char *filename, struct timespec *times, int flags);
struct itimerval;
extern int do_setitimer(int which, struct itimerval *value,
   struct itimerval *ovalue);
extern unsigned int alarm_setitimer(unsigned int seconds);
extern int do_getitimer(int which, struct itimerval *value);
extern int __getnstimeofday(struct timespec *tv);
extern void getnstimeofday(struct timespec *tv);
extern void getrawmonotonic(struct timespec *ts);
extern void getnstime_raw_and_real(struct timespec *ts_raw,
  struct timespec *ts_real);
extern void getboottime(struct timespec *ts);
extern void monotonic_to_bootbased(struct timespec *ts);
extern void get_monotonic_boottime(struct timespec *ts);

extern struct timespec timespec_trunc(struct timespec t, unsigned gran);
extern int timekeeping_valid_for_hres(void);
extern u64 timekeeping_max_deferment(void);
extern int timekeeping_inject_offset(struct timespec *ts);
extern s32 timekeeping_get_tai_offset(void);
extern void timekeeping_set_tai_offset(s32 tai_offset);
extern void timekeeping_clocktai(struct timespec *ts);

struct tms;
extern void do_sys_times(struct tms *);





struct tm {
  template <typename, int = 0> struct __BYPASStm {};
  template <typename, int> friend struct __BYPASStm;




 int tm_sec;

 int tm_min;

 int tm_hour;

 int tm_mday;

 int tm_mon;

 long tm_year;

 int tm_wday;

 int tm_yday;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void time_to_tm(time_t totalsecs, int offset, struct tm *result);
static inline s64 timespec_to_ns( struct timespec *ts)
{
 return ((s64) ts->tv_sec * 1000000000L) + ts->tv_nsec;
}
static inline s64 timeval_to_ns( struct timeval *tv)
{
 return ((s64) tv->tv_sec * 1000000000L) +
  tv->tv_usec * 1000L;
}







extern struct timespec ns_to_timespec( s64 nsec);







extern struct timeval ns_to_timeval( s64 nsec);
static inline __attribute__((always_inline)) void timespec_add_ns(struct timespec *a, u64 ns)
{
 a->tv_sec += __iter_div_u64_rem(a->tv_nsec + ns, 1000000000L, &ns);
 a->tv_nsec = ns;
}







struct timex {
  template <typename, int = 0> struct __BYPASStimex {};
  template <typename, int> friend struct __BYPASStimex;
 unsigned int modes;
 long offset;
 long freq;
 long maxerror;
 long esterror;
 int status;
 long constant;
 long precision;
 long tolerance;


 struct timeval time;
 long tick;

 long ppsfreq;
 long jitter;
 int shift;
 long stabil;
 long jitcnt;
 long calcnt;
 long errcnt;
 long stbcnt;

 int tai;

 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32; int :32;
 int :32; int :32; int :32;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

















typedef unsigned long long cycles_t;

extern unsigned int cpu_khz;
extern unsigned int tsc_khz;

extern void disable_TSC(void);

static inline cycles_t get_cycles(void)
{
 unsigned long long ret = 0;





 (ret = paravirt_read_tsc());

 return ret;
}

static inline __attribute__((always_inline)) cycles_t vget_cycles(void)
{
 return (cycles_t)__native_read_tsc();
}

extern void tsc_init(void);
extern void mark_tsc_unstable(char *reason);
extern int unsynchronized_tsc(void);
extern int check_tsc_unstable(void);
extern int check_tsc_disabled(void);
extern unsigned long native_calibrate_tsc(void);

extern int tsc_clocksource_reliable;





extern void check_tsc_sync_source(int cpu);
extern void check_tsc_sync_target(void);

extern int notsc_setup(char *);
extern void tsc_save_sched_clock_state(void);
extern void tsc_restore_sched_clock_state(void);
extern unsigned long tick_usec;
extern unsigned long tick_nsec;
extern int do_adjtimex(struct timex *);
extern void hardpps( struct timespec *, struct timespec *);

int read_current_timer(unsigned long *timer_val);
void ntp_notify_cmos_timer(void);
extern int register_refined_jiffies(long clock_tick_rate);
extern u64 __attribute__((section(".data"))) jiffies_64;
extern unsigned long __attribute__((section(".data"))) jiffies;





template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_297_0 {
  typedef TJP_jiffies_297_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_297(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_297_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline u64 get_jiffies_64(void)
{
 return (u64)__get_jiffies_297(&jiffies);
}
extern unsigned long preset_lpj;
extern unsigned int jiffies_to_msecs( unsigned long j);
extern unsigned int jiffies_to_usecs( unsigned long j);
extern unsigned long msecs_to_jiffies( unsigned int m);
extern unsigned long usecs_to_jiffies( unsigned int u);
extern unsigned long timespec_to_jiffies( struct timespec *value);
extern void jiffies_to_timespec( unsigned long jiffies,
    struct timespec *value);
extern unsigned long timeval_to_jiffies( struct timeval *value);
extern void jiffies_to_timeval( unsigned long jiffies,
          struct timeval *value);

extern clock_t jiffies_to_clock_t(unsigned long x);
static inline clock_t jiffies_delta_to_clock_t(long delta)
{
 return jiffies_to_clock_t(({ typeof(0L) _max1 = (0L); typeof(delta) _max2 = (delta); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; }));
}

extern unsigned long clock_t_to_jiffies(unsigned long x);
extern u64 jiffies_64_to_clock_t(u64 x);
extern u64 nsec_to_clock_t(u64 x);
extern u64 nsecs_to_jiffies64(u64 n);
extern unsigned long nsecs_to_jiffies(u64 n);
union ktime {
 s64 tv64;
};

typedef union ktime ktime_t;
static inline ktime_t ktime_set( long secs, unsigned long nsecs)
{

 if (__builtin_expect(!!(secs >= (((s64)~((u64)1 << 63)) / 1000000000L)), 0))



                return ({ ktime_t var; var.tv64 = ((s64)~((u64)1 << 63)); var; });





        return ({ ktime_t var; var.tv64 = (s64)secs * 1000000000L + (s64)nsecs; var; });

}
static inline ktime_t timespec_to_ktime(struct timespec ts)
{
 return ktime_set(ts.tv_sec, ts.tv_nsec);
}


static inline ktime_t timeval_to_ktime(struct timeval tv)
{
 return ktime_set(tv.tv_sec, tv.tv_usec * 1000L);
}
static inline int ktime_equal( ktime_t cmp1, ktime_t cmp2)
{
 return cmp1.tv64 == cmp2.tv64;
}
static inline int ktime_compare( ktime_t cmp1, ktime_t cmp2)
{
 if (cmp1.tv64 < cmp2.tv64)
  return -1;
 if (cmp1.tv64 > cmp2.tv64)
  return 1;
 return 0;
}

static inline s64 ktime_to_us( ktime_t kt)
{
 struct timeval tv = ns_to_timeval((kt).tv64);
 return (s64) tv.tv_sec * 1000000L + tv.tv_usec;
}

static inline s64 ktime_to_ms( ktime_t kt)
{
 struct timeval tv = ns_to_timeval((kt).tv64);
 return (s64) tv.tv_sec * 1000L + tv.tv_usec / 1000L;
}

static inline s64 ktime_us_delta( ktime_t later, ktime_t earlier)
{
       return ktime_to_us(({ ({ ktime_t var; var.tv64 = (later).tv64 - (earlier).tv64; var; }); }));
}

static inline ktime_t ktime_add_us( ktime_t kt, u64 usec)
{
 return ({ ({ ktime_t var; var.tv64 = (kt).tv64 + (usec * 1000L); var; }); });
}

static inline ktime_t ktime_add_ms( ktime_t kt, u64 msec)
{
 return ({ ({ ktime_t var; var.tv64 = (kt).tv64 + (msec * 1000000L); var; }); });
}

static inline ktime_t ktime_sub_us( ktime_t kt, u64 usec)
{
 return ({ ({ ktime_t var; var.tv64 = (kt).tv64 - (usec * 1000L); var; }); });
}

extern ktime_t ktime_add_safe( ktime_t lhs, ktime_t rhs);
static inline bool ktime_to_timespec_cond( ktime_t kt,
             struct timespec *ts)
{
 if (kt.tv64) {
  *ts = ns_to_timespec((kt).tv64);
  return _true;
 } else {
  return _false;
 }
}
extern void ktime_get_ts(struct timespec *ts);




static inline ktime_t ns_to_ktime(u64 ns)
{



 static ktime_t ktime_zero = { 0 };


 return ({ ({ ktime_t var; var.tv64 = (ktime_zero).tv64 + (ns); var; }); });
}

static inline ktime_t ms_to_ktime(u64 ms)
{



 static ktime_t ktime_zero = { 0 };


 return ktime_add_ms(ktime_zero, ms);
}




struct tvec_base;

struct timer_list {
  template <typename, int = 0> struct __BYPASStimer_list {};
  template <typename, int> friend struct __BYPASStimer_list;




 struct list_head entry;
 unsigned long expires;
 struct tvec_base *base;

 void (*function)(unsigned long);
 unsigned long data;

 int slack;


 int start_pid;
 void *start_site;
 char start_comm[16];





  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct tvec_base boot_tvec_bases;
void init_timer_key(struct timer_list *timer, unsigned int flags,
      char *name, struct lock_class_key *key);







static inline void destroy_timer_on_stack(struct timer_list *timer) { }
static inline void init_timer_on_stack_key(struct timer_list *timer,
        unsigned int flags, char *name,
        struct lock_class_key *key)
{
 init_timer_key(timer, flags, name, key);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_324_0 {
  typedef TJP__ZN9list_head4nextE_324_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_324(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_324_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10timer_list5entryE_325_0 {
  typedef TJP__ZN10timer_list5entryE_325_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head __get__ZN10timer_list5entryE_325(list_head *source) {
  AC::ResultBuffer< ::list_head  > __result_buffer;
  typedef TJP__ZN10timer_list5entryE_325_0< ::list_head , ::timer_list , ::list_head  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head &)__result_buffer;
}
static inline int timer_pending( struct timer_list * timer)
{
 return __get__ZN9list_head4nextE_324(&__get__ZN10timer_list5entryE_325(&timer->entry).next) != 0;
}

extern void add_timer_on(struct timer_list *timer, int cpu);
extern int del_timer(struct timer_list * timer);
extern int mod_timer(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pending(struct timer_list *timer, unsigned long expires);
extern int mod_timer_pinned(struct timer_list *timer, unsigned long expires);

extern void set_timer_slack(struct timer_list *time, int slack_hz);
extern unsigned long get_next_timer_interrupt(unsigned long now);






extern int timer_stats_active;



extern void init_timer_stats(void);

extern void timer_stats_update_stats(void *timer, pid_t pid, void *startf,
         void *timerf, char *comm,
         unsigned int timer_flag);

extern void __timer_stats_timer_set_start_info(struct timer_list *timer,
            void *addr);

static inline void timer_stats_timer_set_start_info(struct timer_list *timer)
{
 if (__builtin_expect(!!(!timer_stats_active), 1))
  return;
 __timer_stats_timer_set_start_info(timer, __builtin_return_address(0));
}

static inline void timer_stats_timer_clear_start_info(struct timer_list *timer)
{
 timer->start_site = 0;
}
extern void add_timer(struct timer_list *timer);

extern int try_to_del_timer_sync(struct timer_list *timer);


  extern int del_timer_sync(struct timer_list *timer);






extern void init_timers(void);
extern void run_local_timers(void);






unsigned long __round_jiffies(unsigned long j, int cpu);
unsigned long __round_jiffies_relative(unsigned long j, int cpu);
unsigned long round_jiffies(unsigned long j);
unsigned long round_jiffies_relative(unsigned long j);

unsigned long __round_jiffies_up(unsigned long j, int cpu);
unsigned long __round_jiffies_up_relative(unsigned long j, int cpu);
unsigned long round_jiffies_up(unsigned long j);
unsigned long round_jiffies_up_relative(unsigned long j);







struct workqueue_struct;

struct work_struct;
typedef void (*work_func_t)(struct work_struct *work);
void delayed_work_timer_fn(unsigned long __data);







enum {
 WORK_STRUCT_PENDING_BIT = 0,
 WORK_STRUCT_DELAYED_BIT = 1,
 WORK_STRUCT_PWQ_BIT = 2,
 WORK_STRUCT_LINKED_BIT = 3,




 WORK_STRUCT_COLOR_SHIFT = 4,


 WORK_STRUCT_COLOR_BITS = 4,

 WORK_STRUCT_PENDING = 1 << WORK_STRUCT_PENDING_BIT,
 WORK_STRUCT_DELAYED = 1 << WORK_STRUCT_DELAYED_BIT,
 WORK_STRUCT_PWQ = 1 << WORK_STRUCT_PWQ_BIT,
 WORK_STRUCT_LINKED = 1 << WORK_STRUCT_LINKED_BIT,



 WORK_STRUCT_STATIC = 0,






 WORK_NR_COLORS = (1 << WORK_STRUCT_COLOR_BITS) - 1,
 WORK_NO_COLOR = WORK_NR_COLORS,


 WORK_CPU_UNBOUND = 256,
 WORK_CPU_END = 256 + 1,






 WORK_STRUCT_FLAG_BITS = WORK_STRUCT_COLOR_SHIFT +
      WORK_STRUCT_COLOR_BITS,


 WORK_OFFQ_FLAG_BASE = WORK_STRUCT_COLOR_SHIFT,

 WORK_OFFQ_CANCELING = (1 << WORK_OFFQ_FLAG_BASE),






 WORK_OFFQ_FLAG_BITS = 1,
 WORK_OFFQ_POOL_SHIFT = WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,
 WORK_OFFQ_LEFT = 64 - WORK_OFFQ_POOL_SHIFT,
 WORK_OFFQ_POOL_BITS = WORK_OFFQ_LEFT <= 31 ? WORK_OFFQ_LEFT : 31,
 WORK_OFFQ_POOL_NONE = (1LU << WORK_OFFQ_POOL_BITS) - 1,


 WORK_STRUCT_FLAG_MASK = (1UL << WORK_STRUCT_FLAG_BITS) - 1,
 WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,
 WORK_STRUCT_NO_POOL = (unsigned long)WORK_OFFQ_POOL_NONE << WORK_OFFQ_POOL_SHIFT,


 WORK_BUSY_PENDING = 1 << 0,
 WORK_BUSY_RUNNING = 1 << 1,


 WORKER_DESC_LEN = 24,
};

struct work_struct {
  template <typename, int = 0> struct __BYPASSwork_struct {};
  template <typename, int> friend struct __BYPASSwork_struct;
 atomic_long_t data;
 struct list_head entry;
 work_func_t func;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct delayed_work {
  template <typename, int = 0> struct __BYPASSdelayed_work {};
  template <typename, int> friend struct __BYPASSdelayed_work;
 struct work_struct work;
 struct timer_list timer;


 struct workqueue_struct *wq;
 int cpu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct workqueue_attrs {
  template <typename, int = 0> struct __BYPASSworkqueue_attrs {};
  template <typename, int> friend struct __BYPASSworkqueue_attrs;
 int nice;
 cpumask_var_t cpumask;
 bool no_numa;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct delayed_work *to_delayed_work(struct work_struct *work)
{
 return ({ typeof( ((struct delayed_work *)0)->work ) *__mptr = (work); (struct delayed_work *)( (char *)__mptr - ((size_t) &((struct delayed_work *)0)->work) );});
}

struct execute_work {
  template <typename, int = 0> struct __BYPASSexecute_work {};
  template <typename, int> friend struct __BYPASSexecute_work;
 struct work_struct work;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void __init_work(struct work_struct *work, int onstack) { }
static inline void destroy_work_on_stack(struct work_struct *work) { }
static inline unsigned int work_static(struct work_struct *work) { return 0; }
enum {




 WQ_NON_REENTRANT = 1 << 0,

 WQ_UNBOUND = 1 << 1,
 WQ_FREEZABLE = 1 << 2,
 WQ_MEM_RECLAIM = 1 << 3,
 WQ_HIGHPRI = 1 << 4,
 WQ_CPU_INTENSIVE = 1 << 5,
 WQ_SYSFS = 1 << 6,
 WQ_POWER_EFFICIENT = 1 << 7,

 __WQ_DRAINING = 1 << 16,
 __WQ_ORDERED = 1 << 17,

 WQ_MAX_ACTIVE = 512,
 WQ_MAX_UNBOUND_PER_CPU = 4,
 WQ_DFL_ACTIVE = WQ_MAX_ACTIVE / 2,
};
extern struct workqueue_struct *system_wq;
extern struct workqueue_struct *system_long_wq;
extern struct workqueue_struct *system_unbound_wq;
extern struct workqueue_struct *system_freezable_wq;
extern struct workqueue_struct *system_power_efficient_wq;
extern struct workqueue_struct *system_freezable_power_efficient_wq;

static inline struct workqueue_struct * __system_nrt_wq(void)
{
 return system_wq;
}

static inline struct workqueue_struct * __system_nrt_freezable_wq(void)
{
 return system_freezable_wq;
}





extern struct workqueue_struct *
__alloc_workqueue_key( char *fmt, unsigned int flags, int max_active,
 struct lock_class_key *key, char *lock_name, ...) __attribute__((format(printf, 1, 6)));
extern void destroy_workqueue(struct workqueue_struct *wq);

struct workqueue_attrs *alloc_workqueue_attrs(gfp_t gfp_mask);
void free_workqueue_attrs(struct workqueue_attrs *attrs);
int apply_workqueue_attrs(struct workqueue_struct *wq,
     struct workqueue_attrs *attrs);

extern bool queue_work_on(int cpu, struct workqueue_struct *wq,
   struct work_struct *work);
extern bool queue_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *work, unsigned long delay);
extern bool mod_delayed_work_on(int cpu, struct workqueue_struct *wq,
   struct delayed_work *dwork, unsigned long delay);

extern void flush_workqueue(struct workqueue_struct *wq);
extern void drain_workqueue(struct workqueue_struct *wq);
extern void flush_scheduled_work(void);

extern int schedule_on_each_cpu(work_func_t func);

int execute_in_process_context(work_func_t fn, struct execute_work *);

extern bool flush_work(struct work_struct *work);
extern bool cancel_work_sync(struct work_struct *work);

extern bool flush_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work(struct delayed_work *dwork);
extern bool cancel_delayed_work_sync(struct delayed_work *dwork);

extern void workqueue_set_max_active(struct workqueue_struct *wq,
         int max_active);
extern bool current_is_workqueue_rescuer(void);
extern bool workqueue_congested(int cpu, struct workqueue_struct *wq);
extern unsigned int work_busy(struct work_struct *work);
extern __attribute__((format(printf, 1, 2))) void set_worker_desc( char *fmt, ...);
extern void print_worker_info( char *log_lvl, struct task_struct *task);
static inline bool queue_work(struct workqueue_struct *wq,
         struct work_struct *work)
{
 return queue_work_on(WORK_CPU_UNBOUND, wq, work);
}
static inline bool queue_delayed_work(struct workqueue_struct *wq,
          struct delayed_work *dwork,
          unsigned long delay)
{
 return queue_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
static inline bool mod_delayed_work(struct workqueue_struct *wq,
        struct delayed_work *dwork,
        unsigned long delay)
{
 return mod_delayed_work_on(WORK_CPU_UNBOUND, wq, dwork, delay);
}
static inline bool schedule_work_on(int cpu, struct work_struct *work)
{
 return queue_work_on(cpu, system_wq, work);
}
static inline bool schedule_work(struct work_struct *work)
{
 return queue_work(system_wq, work);
}
static inline bool schedule_delayed_work_on(int cpu, struct delayed_work *dwork,
         unsigned long delay)
{
 return queue_delayed_work_on(cpu, system_wq, dwork, delay);
}
static inline bool schedule_delayed_work(struct delayed_work *dwork,
      unsigned long delay)
{
 return queue_delayed_work(system_wq, dwork, delay);
}




static inline bool keventd_up(void)
{
 return system_wq != 0;
}






static inline bool __cancel_delayed_work(struct delayed_work *work)
{
 bool ret;

 ret = del_timer(&work->timer);
 if (ret)
  clear_bit(WORK_STRUCT_PENDING_BIT, ((unsigned long *)(&(&work->work)->data)));
 return ret;
}


static inline bool flush_work_sync(struct work_struct *work)
{
 return flush_work(work);
}


static inline bool flush_delayed_work_sync(struct delayed_work *dwork)
{
 return flush_delayed_work(dwork);
}







long work_on_cpu(int cpu, long (*fn)(void *), void *arg);



extern void freeze_workqueues_begin(void);
extern bool freeze_workqueues_busy(void);
extern void thaw_workqueues(void);



int workqueue_sysfs_register(struct workqueue_struct *wq);

struct srcu_struct_array {
  template <typename, int = 0> struct __BYPASSsrcu_struct_array {};
  template <typename, int> friend struct __BYPASSsrcu_struct_array;
 unsigned long c[2];
 unsigned long seq[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rcu_batch {
  template <typename, int = 0> struct __BYPASSrcu_batch {};
  template <typename, int> friend struct __BYPASSrcu_batch;
 struct callback_head *head, **tail;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct srcu_struct {
  template <typename, int = 0> struct __BYPASSsrcu_struct {};
  template <typename, int> friend struct __BYPASSsrcu_struct;
 unsigned completed;
 struct srcu_struct_array *per_cpu_ref;
 spinlock_t queue_lock;
 bool running;

 struct rcu_batch batch_queue;

 struct rcu_batch batch_check0;

 struct rcu_batch batch_check1;
 struct rcu_batch batch_done;
 struct delayed_work work;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
int init_srcu_struct(struct srcu_struct *sp);




void process_srcu(struct work_struct *work);
void call_srcu(struct srcu_struct *sp, struct callback_head *head,
  void (*func)(struct callback_head *head));

void cleanup_srcu_struct(struct srcu_struct *sp);
int __srcu_read_lock(struct srcu_struct *sp) ;
void __srcu_read_unlock(struct srcu_struct *sp, int idx) ;
void synchronize_srcu(struct srcu_struct *sp);
void synchronize_srcu_expedited(struct srcu_struct *sp);
long srcu_batches_completed(struct srcu_struct *sp);
void srcu_barrier(struct srcu_struct *sp);
static inline int srcu_read_lock_held(struct srcu_struct *sp)
{
 return 1;
}
static inline int srcu_read_lock(struct srcu_struct *sp)
{
 int retval = __srcu_read_lock(sp);

 ;
 return retval;
}
static inline void srcu_read_unlock(struct srcu_struct *sp, int idx)

{
 ;
 __srcu_read_unlock(sp, idx);
}
static inline void smp_mb__after_srcu_read_unlock(void)
{

}
typedef int (*notifier_fn_t)(struct notifier_block *nb,
   unsigned long action, void *data);

struct notifier_block {
  template <typename, int = 0> struct __BYPASSnotifier_block {};
  template <typename, int> friend struct __BYPASSnotifier_block;
 notifier_fn_t notifier_call;
 struct notifier_block *next;
 int priority;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct atomic_notifier_head {
  template <typename, int = 0> struct __BYPASSatomic_notifier_head {};
  template <typename, int> friend struct __BYPASSatomic_notifier_head;
 spinlock_t lock;
 struct notifier_block *head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct blocking_notifier_head {
  template <typename, int = 0> struct __BYPASSblocking_notifier_head {};
  template <typename, int> friend struct __BYPASSblocking_notifier_head;
 struct rw_semaphore rwsem;
 struct notifier_block *head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct raw_notifier_head {
  template <typename, int = 0> struct __BYPASSraw_notifier_head {};
  template <typename, int> friend struct __BYPASSraw_notifier_head;
 struct notifier_block *head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct srcu_notifier_head {
  template <typename, int = 0> struct __BYPASSsrcu_notifier_head {};
  template <typename, int> friend struct __BYPASSsrcu_notifier_head;
 struct mutex mutex;
 struct srcu_struct srcu;
 struct notifier_block *head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void srcu_init_notifier_head(struct srcu_notifier_head *nh);
extern int atomic_notifier_chain_register(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_register(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_register(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_register(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int blocking_notifier_chain_cond_register(
  struct blocking_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,
  struct notifier_block *nb);
extern int blocking_notifier_chain_unregister(struct blocking_notifier_head *nh,
  struct notifier_block *nb);
extern int raw_notifier_chain_unregister(struct raw_notifier_head *nh,
  struct notifier_block *nb);
extern int srcu_notifier_chain_unregister(struct srcu_notifier_head *nh,
  struct notifier_block *nb);

extern int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
  unsigned long val, void *v);
extern int __atomic_notifier_call_chain(struct atomic_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int blocking_notifier_call_chain(struct blocking_notifier_head *nh,
  unsigned long val, void *v);
extern int __blocking_notifier_call_chain(struct blocking_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int raw_notifier_call_chain(struct raw_notifier_head *nh,
  unsigned long val, void *v);
extern int __raw_notifier_call_chain(struct raw_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
extern int srcu_notifier_call_chain(struct srcu_notifier_head *nh,
  unsigned long val, void *v);
extern int __srcu_notifier_call_chain(struct srcu_notifier_head *nh,
 unsigned long val, void *v, int nr_to_call, int *nr_calls);
static inline int notifier_from_errno(int err)
{
 if (err)
  return 0x8000 | (0x0001 - err);

 return 0x0001;
}


static inline int notifier_to_errno(int ret)
{
 ret &= ~0x8000;
 return ret > 0x0001 ? 0x0001 - ret : 0;
}
extern struct blocking_notifier_head reboot_notifier_list;


struct page;
struct zone;
struct pglist_data;
struct mem_section;
struct memory_block;







enum {
 MEMORY_HOTPLUG_MIN_BOOTMEM_TYPE = 12,
 SECTION_INFO = MEMORY_HOTPLUG_MIN_BOOTMEM_TYPE,
 MIX_SECTION_INFO,
 NODE_INFO,
 MEMORY_HOTPLUG_MAX_BOOTMEM_TYPE = NODE_INFO,
};


enum {
 ONLINE_KEEP,
 ONLINE_KERNEL,
 ONLINE_MOVABLE,
};




static inline
void pgdat_resize_lock(struct pglist_data *pgdat, unsigned long *flags)
{
 ;
}
static inline
void pgdat_resize_unlock(struct pglist_data *pgdat, unsigned long *flags)
{
 ;
}
static inline
void pgdat_resize_init(struct pglist_data *pgdat)
{
 ;
}







static inline unsigned zone_span_seqbegin(struct zone *zone)
{
 return 0;
}
static inline int zone_span_seqretry(struct zone *zone, unsigned iv)
{
 return 0;
}
static inline void zone_span_writelock(struct zone *zone)
{
 ;
}
static inline void zone_span_writeunlock(struct zone *zone)
{
 ;
}
static inline void zone_seqlock_init(struct zone *zone)
{
 ;
}
extern int zone_grow_free_lists(struct zone *zone, unsigned long new_nr_pages);
extern int zone_grow_waitqueues(struct zone *zone, unsigned long nr_pages);
extern int add_one_highpage(struct page *page, int pfn, int bad_ppro);

extern int online_pages(unsigned long, unsigned long, int);
extern void __offline_isolated_pages(unsigned long, unsigned long);

typedef void (*online_page_callback_t)(struct page *page);

extern int set_online_page_callback(online_page_callback_t callback);
extern int restore_online_page_callback(online_page_callback_t callback);

extern void __online_page_set_limits(struct page *page);
extern void __online_page_increment_counters(struct page *page);
extern void __online_page_free(struct page *page);

extern int try_online_node(int nid);


extern bool is_pageblock_removable_nolock(struct page *page);
extern int arch_remove_memory(u64 start, u64 size);
extern int __remove_pages(struct zone *zone, unsigned long start_pfn,
 unsigned long nr_pages);



extern int __add_pages(int nid, struct zone *zone, unsigned long start_pfn,
 unsigned long nr_pages);


extern int memory_add_physaddr_to_nid(u64 start);
extern pg_data_t *node_data[];
static inline void arch_refresh_nodedata(int nid, pg_data_t *pgdat)
{
 node_data[nid] = pgdat;
}
extern void register_page_bootmem_info_node(struct pglist_data *pgdat);





extern void put_page_bootmem(struct page *page);
extern void get_page_bootmem(unsigned long ingo, struct page *page,
        unsigned long type);







void lock_memory_hotplug(void);
void unlock_memory_hotplug(void);
extern int is_mem_section_removable(unsigned long pfn, unsigned long nr_pages);
extern void try_offline_node(int nid);
extern int offline_pages(unsigned long start_pfn, unsigned long nr_pages);
extern void remove_memory(int nid, u64 start, u64 size);
extern int walk_memory_range(unsigned long start_pfn, unsigned long end_pfn,
  void *arg, int (*func)(struct memory_block *, void *));
extern int add_memory(int nid, u64 start, u64 size);
extern int arch_add_memory(int nid, u64 start, u64 size);
extern int offline_pages(unsigned long start_pfn, unsigned long nr_pages);
extern bool is_memblock_offlined(struct memory_block *mem);
extern void remove_memory(int nid, u64 start, u64 size);
extern int sparse_add_one_section(struct zone *zone, unsigned long start_pfn);
extern void sparse_remove_one_section(struct zone *zone, struct mem_section *ms);
extern struct page *sparse_decode_mem_map(unsigned long coded_mem_map,
       unsigned long pnum);

extern struct mutex zonelists_mutex;
void build_all_zonelists(pg_data_t *pgdat, struct zone *zone);
void wakeup_kswapd(struct zone *zone, int order, enum zone_type classzone_idx);
bool zone_watermark_ok(struct zone *z, int order, unsigned long mark,
  int classzone_idx, int alloc_flags);
bool zone_watermark_ok_safe(struct zone *z, int order, unsigned long mark,
  int classzone_idx, int alloc_flags);
enum memmap_context {
 MEMMAP_EARLY,
 MEMMAP_HOTPLUG,
};
extern int init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
         unsigned long size,
         enum memmap_context context);

extern void lruvec_init(struct lruvec *lruvec);

static inline struct zone *lruvec_zone(struct lruvec *lruvec)
{

 return lruvec->zone;



}


void memory_present(int nid, unsigned long start, unsigned long end);







static inline int local_memory_node(int node_id) { return node_id; };
static inline int populated_zone(struct zone *zone)
{
 return (!!zone->present_pages);
}

extern int movable_zone;

static inline int zone_movable_is_highmem(void)
{



 return 0;

}

static inline int is_highmem_idx(enum zone_type idx)
{




 return 0;

}







static inline int is_highmem(struct zone *zone)
{






 return 0;

}


struct ctl_table;
int min_free_kbytes_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int sysctl_lowmem_reserve_ratio[4 -1];
int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);
int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);

extern int numa_zonelist_order_handler(struct ctl_table *, int,
   void *, size_t *, loff_t *);
extern char numa_zonelist_order[];








struct mpf_intel {
  template <typename, int = 0> struct __BYPASSmpf_intel {};
  template <typename, int> friend struct __BYPASSmpf_intel;
 char signature[4];
 unsigned int physptr;
 unsigned char length;
 unsigned char specification;
 unsigned char checksum;
 unsigned char feature1;
 unsigned char feature2;
 unsigned char feature3;
 unsigned char feature4;
 unsigned char feature5;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct mpc_table {
  template <typename, int = 0> struct __BYPASSmpc_table {};
  template <typename, int> friend struct __BYPASSmpc_table;
 char signature[4];
 unsigned short length;
 char spec;
 char checksum;
 char oem[8];
 char productid[12];
 unsigned int oemptr;
 unsigned short oemsize;
 unsigned short oemcount;
 unsigned int lapic;
 unsigned int reserved;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct mpc_cpu {
  template <typename, int = 0> struct __BYPASSmpc_cpu {};
  template <typename, int> friend struct __BYPASSmpc_cpu;
 unsigned char type;
 unsigned char apicid;
 unsigned char apicver;
 unsigned char cpuflag;
 unsigned int cpufeature;
 unsigned int featureflag;
 unsigned int reserved[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct mpc_bus {
  template <typename, int = 0> struct __BYPASSmpc_bus {};
  template <typename, int> friend struct __BYPASSmpc_bus;
 unsigned char type;
 unsigned char busid;
 unsigned char bustype[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct mpc_ioapic {
  template <typename, int = 0> struct __BYPASSmpc_ioapic {};
  template <typename, int> friend struct __BYPASSmpc_ioapic;
 unsigned char type;
 unsigned char apicid;
 unsigned char apicver;
 unsigned char flags;
 unsigned int apicaddr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct mpc_intsrc {
  template <typename, int = 0> struct __BYPASSmpc_intsrc {};
  template <typename, int> friend struct __BYPASSmpc_intsrc;
 unsigned char type;
 unsigned char irqtype;
 unsigned short irqflag;
 unsigned char srcbus;
 unsigned char srcbusirq;
 unsigned char dstapic;
 unsigned char dstirq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum mp_irq_source_types {
 mp_INT = 0,
 mp_NMI = 1,
 mp_SMI = 2,
 mp_ExtINT = 3
};







struct mpc_lintsrc {
  template <typename, int = 0> struct __BYPASSmpc_lintsrc {};
  template <typename, int> friend struct __BYPASSmpc_lintsrc;
 unsigned char type;
 unsigned char irqtype;
 unsigned short irqflag;
 unsigned char srcbusid;
 unsigned char srcbusirq;
 unsigned char destapic;
 unsigned char destapiclint;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct mpc_oemtable {
  template <typename, int = 0> struct __BYPASSmpc_oemtable {};
  template <typename, int> friend struct __BYPASSmpc_oemtable;
 char signature[4];
 unsigned short length;
 char rev;
 char checksum;
 char mpc[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum mp_bustype {
 MP_BUS_ISA = 1,
 MP_BUS_EISA,
 MP_BUS_PCI,
};







struct screen_info {
  template <typename, int = 0> struct __BYPASSscreen_info {};
  template <typename, int> friend struct __BYPASSscreen_info;
 __u8 orig_x;
 __u8 orig_y;
 __u16 ext_mem_k;
 __u16 orig_video_page;
 __u8 orig_video_mode;
 __u8 orig_video_cols;
 __u8 flags;
 __u8 unused2;
 __u16 orig_video_ega_bx;
 __u16 unused3;
 __u8 orig_video_lines;
 __u8 orig_video_isVGA;
 __u16 orig_video_points;


 __u16 lfb_width;
 __u16 lfb_height;
 __u16 lfb_depth;
 __u32 lfb_base;
 __u32 lfb_size;
 __u16 cl_magic, cl_offset;
 __u16 lfb_linelength;
 __u8 red_size;
 __u8 red_pos;
 __u8 green_size;
 __u8 green_pos;
 __u8 blue_size;
 __u8 blue_pos;
 __u8 rsvd_size;
 __u8 rsvd_pos;
 __u16 vesapm_seg;
 __u16 vesapm_off;
 __u16 pages;
 __u16 vesa_attributes;
 __u32 capabilities;
 __u8 _reserved[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

extern struct screen_info screen_info;
typedef unsigned short apm_event_t;
typedef unsigned short apm_eventinfo_t;

struct apm_bios_info {
  template <typename, int = 0> struct __BYPASSapm_bios_info {};
  template <typename, int> friend struct __BYPASSapm_bios_info;
 __u16 version;
 __u16 cseg;
 __u32 offset;
 __u16 cseg_16;
 __u16 dseg;
 __u16 flags;
 __u16 cseg_len;
 __u16 cseg_16_len;
 __u16 dseg_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct apm_info {
  template <typename, int = 0> struct __BYPASSapm_info {};
  template <typename, int> friend struct __BYPASSapm_info;
 struct apm_bios_info bios;
 unsigned short connection_version;
 int get_power_status_broken;
 int get_power_status_swabinminutes;
 int allow_ints;
 int forbid_idle;
 int realmode_power_off;
 int disabled;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct apm_info apm_info;
struct edd_device_params {
  template <typename, int = 0> struct __BYPASSedd_device_params {};
  template <typename, int> friend struct __BYPASSedd_device_params;
 __u16 length;
 __u16 info_flags;
 __u32 num_default_cylinders;
 __u32 num_default_heads;
 __u32 sectors_per_track;
 __u64 number_of_sectors;
 __u16 bytes_per_sector;
 __u32 dpte_ptr;
 __u16 key;
 __u8 device_path_info_length;
 __u8 reserved2;
 __u16 reserved3;
 __u8 host_bus_type[4];
 __u8 interface_type[8];
 union {
  struct {
   __u16 base_address;
   __u16 reserved1;
   __u32 reserved2;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) isa;
  struct {
   __u8 bus;
   __u8 slot;
   __u8 function;
   __u8 channel;
   __u32 reserved;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) pci;

  struct {
   __u64 reserved;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) ibnd;
  struct {
   __u64 reserved;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) xprs;
  struct {
   __u64 reserved;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) htpt;
  struct {
   __u64 reserved;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) unknown;
 } interface_path;
 union {
  struct {
   __u8 device;
   __u8 reserved1;
   __u16 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) ata;
  struct {
   __u8 device;
   __u8 lun;
   __u8 reserved1;
   __u8 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) atapi;
  struct {
   __u16 id;
   __u64 lun;
   __u16 reserved1;
   __u32 reserved2;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) scsi;
  struct {
   __u64 serial_number;
   __u64 reserved;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) usb;
  struct {
   __u64 eui;
   __u64 reserved;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) i1394;
  struct {
   __u64 wwid;
   __u64 lun;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) fibre;
  struct {
   __u64 identity_tag;
   __u64 reserved;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) i2o;
  struct {
   __u32 array_number;
   __u32 reserved1;
   __u64 reserved2;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) raid;
  struct {
   __u8 device;
   __u8 reserved1;
   __u16 reserved2;
   __u32 reserved3;
   __u64 reserved4;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) sata;
  struct {
   __u64 reserved1;
   __u64 reserved2;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) unknown;
 } device_path;
 __u8 reserved4;
 __u8 checksum;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed));

struct edd_info {
  template <typename, int = 0> struct __BYPASSedd_info {};
  template <typename, int> friend struct __BYPASSedd_info;
 __u8 device;
 __u8 version;
 __u16 interface_support;
 __u16 legacy_max_cylinder;
 __u8 legacy_max_head;
 __u8 legacy_sectors_per_track;
 struct edd_device_params params;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed));

struct edd {
  template <typename, int = 0> struct __BYPASSedd {};
  template <typename, int> friend struct __BYPASSedd;
 unsigned int mbr_signature[16];
 struct edd_info edd_info[6];
 unsigned char mbr_signature_nr;
 unsigned char edd_info_nr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern struct edd edd;
struct e820entry {
  template <typename, int = 0> struct __BYPASSe820entry {};
  template <typename, int> friend struct __BYPASSe820entry;
 __u64 addr;
 __u64 size;
 __u32 type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

struct e820map {
  template <typename, int = 0> struct __BYPASSe820map {};
  template <typename, int> friend struct __BYPASSe820map;
 __u32 nr_map;
 struct e820entry map[(128 + 3 * (1 << 6))];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern struct e820map e820;
extern struct e820map e820_saved;

extern unsigned long pci_mem_start;
extern int e820_any_mapped(u64 start, u64 end, unsigned type);
extern int e820_all_mapped(u64 start, u64 end, unsigned type);
extern void e820_add_region(u64 start, u64 size, int type);
extern void e820_print_map(char *who);
extern int
sanitize_e820_map(struct e820entry *biosmap, int max_nr_map, u32 *pnr_map);
extern u64 e820_update_range(u64 start, u64 size, unsigned old_type,
          unsigned new_type);
extern u64 e820_remove_range(u64 start, u64 size, unsigned old_type,
        int checktype);
extern void update_e820(void);
extern void e820_setup_gap(void);
extern int e820_search_gap(unsigned long *gapstart, unsigned long *gapsize,
   unsigned long start_addr, unsigned long long end_addr);
struct setup_data;
extern void parse_e820_ext(u64 phys_addr, u32 data_len);



extern void e820_mark_nosave_regions(unsigned long limit_pfn);







extern void early_memtest(unsigned long start, unsigned long end);






extern unsigned long e820_end_of_ram_pfn(void);
extern unsigned long e820_end_of_low_ram_pfn(void);
extern u64 early_reserve_e820(u64 sizet, u64 align);

void memblock_x86_fill(void);
void memblock_find_dma_reserve(void);

extern void finish_e820_parsing(void);
extern void e820_reserve_resources(void);
extern void e820_reserve_resources_late(void);
extern void setup_memory_map(void);
extern char *default_machine_specific_memory_setup(void);





static inline bool is_ISA_range(u64 s, u64 e)
{
 return s >= 0xa0000 && e <= 0x100000;
}


struct resource {
  template <typename, int = 0> struct __BYPASSresource {};
  template <typename, int> friend struct __BYPASSresource;
 resource_size_t start;
 resource_size_t end;
 char *name;
 unsigned long flags;
 struct resource *parent, *sibling, *child;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct resource ioport_resource;
extern struct resource iomem_resource;

extern struct resource *request_resource_conflict(struct resource *root, struct resource *_new);
extern int request_resource(struct resource *root, struct resource *_new);
extern int release_resource(struct resource *_new);
void release_child_resources(struct resource *_new);
extern void reserve_region_with_split(struct resource *root,
        resource_size_t start, resource_size_t end,
        char *name);
extern struct resource *insert_resource_conflict(struct resource *parent, struct resource *_new);
extern int insert_resource(struct resource *parent, struct resource *_new);
extern void insert_resource_expand_to_fit(struct resource *root, struct resource *_new);
extern void arch_remove_reservations(struct resource *avail);
extern int allocate_resource(struct resource *root, struct resource *_new,
        resource_size_t size, resource_size_t min,
        resource_size_t max, resource_size_t align,
        resource_size_t (*alignf)(void *,
             struct resource *,
             resource_size_t,
             resource_size_t),
        void *alignf_data);
struct resource *lookup_resource(struct resource *root, resource_size_t start);
int adjust_resource(struct resource *res, resource_size_t start,
      resource_size_t size);
resource_size_t resource_alignment(struct resource *res);
static inline resource_size_t resource_size( struct resource *res)
{
 return res->end - res->start + 1;
}
static inline unsigned long resource_type( struct resource *res)
{
 return res->flags & 0x00001f00;
}
extern struct resource * __request_region(struct resource *,
     resource_size_t start,
     resource_size_t n,
     char *name, int flags);






extern int __check_region(struct resource *, resource_size_t, resource_size_t);
extern void __release_region(struct resource *, resource_size_t,
    resource_size_t);

extern int release_mem_region_adjustable(struct resource *, resource_size_t,
    resource_size_t);


static inline int check_region(resource_size_t s,
      resource_size_t n)
{
 return __check_region(&ioport_resource, s, n);
}


struct device;





extern struct resource * __devm_request_region(struct device *dev,
    struct resource *parent, resource_size_t start,
    resource_size_t n, char *name);






extern void __devm_release_region(struct device *dev, struct resource *parent,
      resource_size_t start, resource_size_t n);
extern int iomem_map_sanity_check(resource_size_t addr, unsigned long size);
extern int iomem_is_exclusive(u64 addr);

extern int
walk_system_ram_range(unsigned long start_pfn, unsigned long nr_pages,
  void *arg, int (*func)(unsigned long, unsigned long, void *));


static inline bool resource_overlaps(struct resource *r1, struct resource *r2)
{
       return (r1->start <= r2->end && r1->end >= r2->start);
}
struct ist_info {
  template <typename, int = 0> struct __BYPASSist_info {};
  template <typename, int> friend struct __BYPASSist_info;
 __u32 signature;
 __u32 command;
 __u32 event;
 __u32 perf_level;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern struct ist_info ist_info;






struct edid_info {
  template <typename, int = 0> struct __BYPASSedid_info {};
  template <typename, int> friend struct __BYPASSedid_info;
 unsigned char dummy[128];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern struct edid_info edid_info;


struct setup_data {
  template <typename, int = 0> struct __BYPASSsetup_data {};
  template <typename, int> friend struct __BYPASSsetup_data;
 __u64 next;
 __u32 type;
 __u32 len;
 __u8 data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct setup_header {
  template <typename, int = 0> struct __BYPASSsetup_header {};
  template <typename, int> friend struct __BYPASSsetup_header;
 __u8 setup_sects;
 __u16 root_flags;
 __u32 syssize;
 __u16 ram_size;
 __u16 vid_mode;
 __u16 root_dev;
 __u16 boot_flag;
 __u16 jump;
 __u32 header;
 __u16 version;
 __u32 realmode_swtch;
 __u16 start_sys;
 __u16 kernel_version;
 __u8 type_of_loader;
 __u8 loadflags;
 __u16 setup_move_size;
 __u32 code32_start;
 __u32 ramdisk_image;
 __u32 ramdisk_size;
 __u32 bootsect_kludge;
 __u16 heap_end_ptr;
 __u8 ext_loader_ver;
 __u8 ext_loader_type;
 __u32 cmd_line_ptr;
 __u32 initrd_addr_max;
 __u32 kernel_alignment;
 __u8 relocatable_kernel;
 __u8 min_alignment;
 __u16 xloadflags;
 __u32 cmdline_size;
 __u32 hardware_subarch;
 __u64 hardware_subarch_data;
 __u32 payload_offset;
 __u32 payload_length;
 __u64 setup_data;
 __u64 pref_address;
 __u32 init_size;
 __u32 handover_offset;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

struct sys_desc_table {
  template <typename, int = 0> struct __BYPASSsys_desc_table {};
  template <typename, int> friend struct __BYPASSsys_desc_table;
 __u16 length;
 __u8 table[14];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct olpc_ofw_header {
  template <typename, int = 0> struct __BYPASSolpc_ofw_header {};
  template <typename, int> friend struct __BYPASSolpc_ofw_header;
 __u32 ofw_magic;
 __u32 ofw_version;
 __u32 cif_handler;
 __u32 irq_desc_table;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

struct efi_info {
  template <typename, int = 0> struct __BYPASSefi_info {};
  template <typename, int> friend struct __BYPASSefi_info;
 __u32 efi_loader_signature;
 __u32 efi_systab;
 __u32 efi_memdesc_size;
 __u32 efi_memdesc_version;
 __u32 efi_memmap;
 __u32 efi_memmap_size;
 __u32 efi_systab_hi;
 __u32 efi_memmap_hi;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct boot_params {
  template <typename, int = 0> struct __BYPASSboot_params {};
  template <typename, int> friend struct __BYPASSboot_params;
 struct screen_info screen_info;
 struct apm_bios_info apm_bios_info;
 __u8 _pad2[4];
 __u64 tboot_addr;
 struct ist_info ist_info;
 __u8 _pad3[16];
 __u8 hd0_info[16];
 __u8 hd1_info[16];
 struct sys_desc_table sys_desc_table;
 struct olpc_ofw_header olpc_ofw_header;
 __u32 ext_ramdisk_image;
 __u32 ext_ramdisk_size;
 __u32 ext_cmd_line_ptr;
 __u8 _pad4[116];
 struct edid_info edid_info;
 struct efi_info efi_info;
 __u32 alt_mem_k;
 __u32 scratch;
 __u8 e820_entries;
 __u8 eddbuf_entries;
 __u8 edd_mbr_sig_buf_entries;
 __u8 kbd_status;
 __u8 _pad5[3];
 __u8 sentinel;
 __u8 _pad6[1];
 struct setup_header hdr;
 __u8 _pad7[0x290-0x1f1-sizeof(struct setup_header)];
 __u32 edd_mbr_sig_buffer[16];
 struct e820entry e820_map[128];
 __u8 _pad8[48];
 struct edd_info eddbuf[6];
 __u8 _pad9[276];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

enum {
 X86_SUBARCH_PC = 0,
 X86_SUBARCH_LGUEST,
 X86_SUBARCH_XEN,
 X86_SUBARCH_INTEL_MID,
 X86_SUBARCH_CE4100,
 X86_NR_SUBARCHS,
};

struct mpc_bus;
struct mpc_cpu;
struct mpc_table;
struct cpuinfo_x86;
struct x86_init_mpparse {
  template <typename, int = 0> struct __BYPASSx86_init_mpparse {};
  template <typename, int> friend struct __BYPASSx86_init_mpparse;
 void (*mpc_record)(unsigned int mode);
 void (*setup_ioapic_ids)(void);
 int (*mpc_apic_id)(struct mpc_cpu *m);
 void (*smp_read_mpc_oem)(struct mpc_table *mpc);
 void (*mpc_oem_pci_bus)(struct mpc_bus *m);
 void (*mpc_oem_bus_info)(struct mpc_bus *m, char *name);
 void (*find_smp_config)(void);
 void (*get_smp_config)(unsigned int early);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct x86_init_resources {
  template <typename, int = 0> struct __BYPASSx86_init_resources {};
  template <typename, int> friend struct __BYPASSx86_init_resources;
 void (*probe_roms)(void);
 void (*reserve_resources)(void);
 char *(*memory_setup)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct x86_init_irqs {
  template <typename, int = 0> struct __BYPASSx86_init_irqs {};
  template <typename, int> friend struct __BYPASSx86_init_irqs;
 void (*pre_vector_init)(void);
 void (*intr_init)(void);
 void (*trap_init)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct x86_init_oem {
  template <typename, int = 0> struct __BYPASSx86_init_oem {};
  template <typename, int> friend struct __BYPASSx86_init_oem;
 void (*arch_setup)(void);
 void (*banner)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct x86_init_paging {
  template <typename, int = 0> struct __BYPASSx86_init_paging {};
  template <typename, int> friend struct __BYPASSx86_init_paging;
 void (*pagetable_init)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct x86_init_timers {
  template <typename, int = 0> struct __BYPASSx86_init_timers {};
  template <typename, int> friend struct __BYPASSx86_init_timers;
 void (*setup_percpu_clockev)(void);
 void (*tsc_pre_init)(void);
 void (*timer_init)(void);
 void (*wallclock_init)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct x86_init_iommu {
  template <typename, int = 0> struct __BYPASSx86_init_iommu {};
  template <typename, int> friend struct __BYPASSx86_init_iommu;
 int (*iommu_init)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct x86_init_pci {
  template <typename, int = 0> struct __BYPASSx86_init_pci {};
  template <typename, int> friend struct __BYPASSx86_init_pci;
 int (*arch_init)(void);
 int (*init)(void);
 void (*init_irq)(void);
 void (*fixup_irqs)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct x86_init_ops {
  template <typename, int = 0> struct __BYPASSx86_init_ops {};
  template <typename, int> friend struct __BYPASSx86_init_ops;
 struct x86_init_resources resources;
 struct x86_init_mpparse mpparse;
 struct x86_init_irqs irqs;
 struct x86_init_oem oem;
 struct x86_init_paging paging;
 struct x86_init_timers timers;
 struct x86_init_iommu iommu;
 struct x86_init_pci pci;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct x86_cpuinit_ops {
  template <typename, int = 0> struct __BYPASSx86_cpuinit_ops {};
  template <typename, int> friend struct __BYPASSx86_cpuinit_ops;
 void (*setup_percpu_clockev)(void);
 void (*early_percpu_clock_init)(void);
 void (*fixup_cpu_id)(struct cpuinfo_x86 *c, int node);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct timespec;
struct x86_platform_ops {
  template <typename, int = 0> struct __BYPASSx86_platform_ops {};
  template <typename, int> friend struct __BYPASSx86_platform_ops;
 unsigned long (*calibrate_tsc)(void);
 void (*get_wallclock)(struct timespec *ts);
 int (*set_wallclock)( struct timespec *ts);
 void (*iommu_shutdown)(void);
 bool (*is_untracked_pat_range)(u64 start, u64 end);
 void (*nmi_init)(void);
 unsigned char (*get_nmi_reason)(void);
 int (*i8042_detect)(void);
 void (*save_sched_clock_state)(void);
 void (*restore_sched_clock_state)(void);
 void (*apic_post_init)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pci_dev;
struct msi_msg;
struct msi_desc;

struct x86_msi_ops {
  template <typename, int = 0> struct __BYPASSx86_msi_ops {};
  template <typename, int> friend struct __BYPASSx86_msi_ops;
 int (*setup_msi_irqs)(struct pci_dev *dev, int nvec, int type);
 void (*compose_msi_msg)(struct pci_dev *dev, unsigned int irq,
    unsigned int dest, struct msi_msg *msg,
          u8 hpet_id);
 void (*teardown_msi_irq)(unsigned int irq);
 void (*teardown_msi_irqs)(struct pci_dev *dev);
 void (*restore_msi_irqs)(struct pci_dev *dev, int irq);
 int (*setup_hpet_msi)(unsigned int irq, unsigned int id);
 u32 (*msi_mask_irq)(struct msi_desc *desc, u32 mask, u32 flag);
 u32 (*msix_mask_irq)(struct msi_desc *desc, u32 flag);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct IO_APIC_route_entry;
struct io_apic_irq_attr;
struct irq_data;
struct cpumask;

struct x86_io_apic_ops {
  template <typename, int = 0> struct __BYPASSx86_io_apic_ops {};
  template <typename, int> friend struct __BYPASSx86_io_apic_ops;
 void (*init) (void);
 unsigned int (*read) (unsigned int apic, unsigned int reg);
 void (*write) (unsigned int apic, unsigned int reg, unsigned int value);
 void (*modify) (unsigned int apic, unsigned int reg, unsigned int value);
 void (*disable)(void);
 void (*print_entries)(unsigned int apic, unsigned int nr_entries);
 int (*set_affinity)(struct irq_data *data,
     struct cpumask *mask,
     bool force);
 int (*setup_entry)(int irq, struct IO_APIC_route_entry *entry,
           unsigned int destination, int vector,
           struct io_apic_irq_attr *attr);
 void (*eoi_ioapic_pin)(int apic, int pin, int vector);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct x86_init_ops x86_init;
extern struct x86_cpuinit_ops x86_cpuinit;
extern struct x86_platform_ops x86_platform;
extern struct x86_msi_ops x86_msi;
extern struct x86_io_apic_ops x86_io_apic_ops;
extern void x86_init_noop(void);
extern void x86_init_uint_noop(unsigned int unused);
struct local_apic {
  template <typename, int = 0> struct __BYPASSlocal_apic {};
  template <typename, int> friend struct __BYPASSlocal_apic;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_01;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_02;

        struct {
  unsigned int __reserved_1 : 24,
   phys_apic_id : 4,
   __reserved_2 : 4;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} id;

       
 struct {
  unsigned int version : 8,
   __reserved_1 : 8,
   max_lvt : 8,
   __reserved_2 : 8;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} version;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_03;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_04;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_05;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_06;

        struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} tpr;

       
 struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} apr;

       
 struct {
  unsigned int priority : 8,
   __reserved_1 : 24;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ppr;

        struct {
  unsigned int eoi;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} eoi;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_07;

        struct {
  unsigned int __reserved_1 : 24,
   logical_dest : 8;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ldr;

        struct {
  unsigned int __reserved_1 : 28,
   model : 4;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} dfr;

        struct {
  unsigned int spurious_vector : 8,
   apic_enabled : 1,
   focus_cpu : 1,
   __reserved_2 : 22;
  unsigned int __reserved_3[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} svr;

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} isr [8];

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} tmr [8];

        struct {
         unsigned int bitfield;
  unsigned int __reserved[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} irr [8];

        union {
  struct {
   unsigned int send_cs_error : 1,
    receive_cs_error : 1,
    send_accept_error : 1,
    receive_accept_error : 1,
    __reserved_1 : 1,
    send_illegal_vector : 1,
    receive_illegal_vector : 1,
    illegal_register_address : 1,
    __reserved_2 : 24;
   unsigned int __reserved_3[3];
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} error_bits;
  struct {
   unsigned int errors;
   unsigned int __reserved_3[3];
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} all_errors;
 } esr;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_08;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_09;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_10;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_11;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_12;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_13;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_14;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   destination_mode : 1,
   delivery_status : 1,
   __reserved_1 : 1,
   level : 1,
   trigger : 1,
   __reserved_2 : 2,
   shorthand : 2,
   __reserved_3 : 12;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icr1;

        struct {
  union {
   unsigned int __reserved_1 : 24,
    phys_dest : 4,
    __reserved_2 : 4;
   unsigned int __reserved_3 : 24,
    logical_dest : 8;
  } dest;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icr2;

        struct {
  unsigned int vector : 8,
   __reserved_1 : 4,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   timer_mode : 1,
   __reserved_3 : 14;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_timer;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_thermal;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_pc;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   polarity : 1,
   remote_irr : 1,
   trigger : 1,
   mask : 1,
   __reserved_2 : 15;
  unsigned int __reserved_3[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_lint0;

        struct {
  unsigned int vector : 8,
   delivery_mode : 3,
   __reserved_1 : 1,
   delivery_status : 1,
   polarity : 1,
   remote_irr : 1,
   trigger : 1,
   mask : 1,
   __reserved_2 : 15;
  unsigned int __reserved_3[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_lint1;

        struct {
  unsigned int vector : 8,
   __reserved_1 : 4,
   delivery_status : 1,
   __reserved_2 : 3,
   mask : 1,
   __reserved_3 : 15;
  unsigned int __reserved_4[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} lvt_error;

        struct {
  unsigned int initial_count;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} timer_icr;

       
 struct {
  unsigned int curr_count;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} timer_ccr;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_16;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_17;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_18;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_19;

        struct {
  unsigned int divisor : 4,
   __reserved_1 : 28;
  unsigned int __reserved_2[3];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} timer_dcr;

        struct { unsigned int __reserved[4]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __reserved_20;


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed));
enum ioapic_irq_destination_types {
 dest_Fixed = 0,
 dest_LowestPrio = 1,
 dest_SMI = 2,
 dest__reserved_1 = 3,
 dest_NMI = 4,
 dest_INIT = 5,
 dest__reserved_2 = 6,
 dest_ExtINT = 7
};

extern int apic_version[];
extern int pic_mode;
extern unsigned long mp_bus_not_pci[(((256) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];

extern unsigned int boot_cpu_physical_apicid;
extern unsigned int max_physical_apicid;
extern int mpc_default_type;
extern unsigned long mp_lapic_addr;


extern int smp_found_config;




static inline void get_smp_config(void)
{
 x86_init.mpparse.get_smp_config(0);
}

static inline void early_get_smp_config(void)
{
 x86_init.mpparse.get_smp_config(1);
}

static inline void find_smp_config(void)
{
 x86_init.mpparse.find_smp_config();
}


extern void early_reserve_e820_mpc_new(void);
extern int enable_update_mptable;
extern int default_mpc_apic_id(struct mpc_cpu *m);
extern void default_smp_read_mpc_oem(struct mpc_table *mpc);

extern void default_mpc_oem_bus_info(struct mpc_bus *m, char *str);



extern void default_find_smp_config(void);
extern void default_get_smp_config(unsigned int early);
int generic_processor_info(int apicid, int version);

extern void mp_register_ioapic(int id, u32 address, u32 gsi_base);
extern void mp_override_legacy_irq(u8 bus_irq, u8 polarity, u8 trigger,
       u32 gsi);
extern void mp_config_acpi_legacy_irqs(void);
struct device;
extern int mp_register_gsi(struct device *dev, u32 gsi, int edge_level,
     int active_high_low);




struct physid_mask {
  template <typename, int = 0> struct __BYPASSphysid_mask {};
  template <typename, int> friend struct __BYPASSphysid_mask;
 unsigned long mask[(((32768) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef struct physid_mask physid_mask_t;
static inline unsigned long physids_coerce(physid_mask_t *map)
{
 return map->mask[0];
}

static inline void physids_promote(unsigned long physids, physid_mask_t *map)
{
 bitmap_zero((*map).mask, 32768);
 map->mask[0] = physids;
}

static inline void physid_set_mask_of_physid(int physid, physid_mask_t *map)
{
 bitmap_zero((*map).mask, 32768);
 set_bit(physid, (*map).mask);
}




extern physid_mask_t phys_cpu_present_map;

extern int generic_mps_oem_check(struct mpc_table *, char *, char *);

extern int default_acpi_madt_oem_check(char *, char *);




extern void (*pm_power_off)(void);
extern void (*pm_power_off_prepare)(void);

struct device;

extern void pm_vt_switch_required(struct device *dev, bool required);
extern void pm_vt_switch_unregister(struct device *dev);
struct device;


extern char power_group_name[];




typedef struct pm_message {
  template <typename, int = 0> struct __BYPASSpm_message {};
  template <typename, int> friend struct __BYPASSpm_message;
 int event;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} pm_message_t;
struct dev_pm_ops {
  template <typename, int = 0> struct __BYPASSdev_pm_ops {};
  template <typename, int> friend struct __BYPASSdev_pm_ops;
 int (*prepare)(struct device *dev);
 void (*complete)(struct device *dev);
 int (*suspend)(struct device *dev);
 int (*resume)(struct device *dev);
 int (*freeze)(struct device *dev);
 int (*thaw)(struct device *dev);
 int (*poweroff)(struct device *dev);
 int (*restore)(struct device *dev);
 int (*suspend_late)(struct device *dev);
 int (*resume_early)(struct device *dev);
 int (*freeze_late)(struct device *dev);
 int (*thaw_early)(struct device *dev);
 int (*poweroff_late)(struct device *dev);
 int (*restore_early)(struct device *dev);
 int (*suspend_noirq)(struct device *dev);
 int (*resume_noirq)(struct device *dev);
 int (*freeze_noirq)(struct device *dev);
 int (*thaw_noirq)(struct device *dev);
 int (*poweroff_noirq)(struct device *dev);
 int (*restore_noirq)(struct device *dev);
 int (*runtime_suspend)(struct device *dev);
 int (*runtime_resume)(struct device *dev);
 int (*runtime_idle)(struct device *dev);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum rpm_status {
 RPM_ACTIVE = 0,
 RPM_RESUMING,
 RPM_SUSPENDED,
 RPM_SUSPENDING,
};
enum rpm_request {
 RPM_REQ_NONE = 0,
 RPM_REQ_IDLE,
 RPM_REQ_SUSPEND,
 RPM_REQ_AUTOSUSPEND,
 RPM_REQ_RESUME,
};

struct wakeup_source;

struct pm_domain_data {
  template <typename, int = 0> struct __BYPASSpm_domain_data {};
  template <typename, int> friend struct __BYPASSpm_domain_data;
 struct list_head list_node;
 struct device *dev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pm_subsys_data {
  template <typename, int = 0> struct __BYPASSpm_subsys_data {};
  template <typename, int> friend struct __BYPASSpm_subsys_data;
 spinlock_t lock;
 unsigned int refcount;

 struct list_head clock_list;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dev_pm_info {
  template <typename, int = 0> struct __BYPASSdev_pm_info {};
  template <typename, int> friend struct __BYPASSdev_pm_info;
 pm_message_t power_state;
 unsigned int can_wakeup:1;
 unsigned int async_suspend:1;
 bool is_prepared:1;
 bool is_suspended:1;
 bool ignore_children:1;
 bool early_init:1;
 spinlock_t lock;

 struct list_head entry;
 struct completion completion;
 struct wakeup_source *wakeup;
 bool wakeup_path:1;
 bool syscore:1;




 struct timer_list suspend_timer;
 unsigned long timer_expires;
 struct work_struct work;
 wait_queue_head_t wait_queue;
 atomic_t usage_count;
 atomic_t child_count;
 unsigned int disable_depth:3;
 unsigned int idle_notification:1;
 unsigned int request_pending:1;
 unsigned int deferred_resume:1;
 unsigned int run_wake:1;
 unsigned int runtime_auto:1;
 unsigned int no_callbacks:1;
 unsigned int irq_safe:1;
 unsigned int use_autosuspend:1;
 unsigned int timer_autosuspends:1;
 unsigned int memalloc_noio:1;
 enum rpm_request request;
 enum rpm_status runtime_status;
 int runtime_error;
 int autosuspend_delay;
 unsigned long last_busy;
 unsigned long active_jiffies;
 unsigned long suspended_jiffies;
 unsigned long accounting_timestamp;

 struct pm_subsys_data *subsys_data;
 struct dev_pm_qos *qos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void update_pm_runtime_accounting(struct device *dev);
extern int dev_pm_get_subsys_data(struct device *dev);
extern int dev_pm_put_subsys_data(struct device *dev);






struct dev_pm_domain {
  template <typename, int = 0> struct __BYPASSdev_pm_domain {};
  template <typename, int> friend struct __BYPASSdev_pm_domain;
 struct dev_pm_ops ops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void device_pm_lock(void);
extern void dpm_resume_start(pm_message_t state);
extern void dpm_resume_end(pm_message_t state);
extern void dpm_resume(pm_message_t state);
extern void dpm_complete(pm_message_t state);

extern void device_pm_unlock(void);
extern int dpm_suspend_end(pm_message_t state);
extern int dpm_suspend_start(pm_message_t state);
extern int dpm_suspend(pm_message_t state);
extern int dpm_prepare(pm_message_t state);

extern void __suspend_report_result( char *function, void *fn, int ret);






extern int device_pm_wait_for_dev(struct device *sub, struct device *dev);
extern void dpm_for_each_dev(void *data, void (*fn)(struct device *, void *));

extern int pm_generic_prepare(struct device *dev);
extern int pm_generic_suspend_late(struct device *dev);
extern int pm_generic_suspend_noirq(struct device *dev);
extern int pm_generic_suspend(struct device *dev);
extern int pm_generic_resume_early(struct device *dev);
extern int pm_generic_resume_noirq(struct device *dev);
extern int pm_generic_resume(struct device *dev);
extern int pm_generic_freeze_noirq(struct device *dev);
extern int pm_generic_freeze_late(struct device *dev);
extern int pm_generic_freeze(struct device *dev);
extern int pm_generic_thaw_noirq(struct device *dev);
extern int pm_generic_thaw_early(struct device *dev);
extern int pm_generic_thaw(struct device *dev);
extern int pm_generic_restore_noirq(struct device *dev);
extern int pm_generic_restore_early(struct device *dev);
extern int pm_generic_restore(struct device *dev);
extern int pm_generic_poweroff_noirq(struct device *dev);
extern int pm_generic_poweroff_late(struct device *dev);
extern int pm_generic_poweroff(struct device *dev);
extern void pm_generic_complete(struct device *dev);
enum dpm_order {
 DPM_ORDER_NONE,
 DPM_ORDER_DEV_AFTER_PARENT,
 DPM_ORDER_PARENT_BEFORE_DEV,
 DPM_ORDER_DEV_LAST,
};












extern __attribute__((section(".data..percpu" ""))) __typeof__(int) x86_cpu_to_node_map; extern __typeof__(int) *x86_cpu_to_node_map_early_ptr; extern __typeof__(int) x86_cpu_to_node_map_early_map[];

template <typename TResult, typename TThat, typename TTarget> struct TJP___per_cpu_offset_362_0 {
  typedef TJP___per_cpu_offset_362_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get___per_cpu_offset_362(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP___per_cpu_offset_362_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int early_cpu_to_node(int cpu)
{
 return *((x86_cpu_to_node_map_early_ptr) ? &(x86_cpu_to_node_map_early_ptr)[cpu] : &(*({ do { void *__vpp_verify = (typeof(((&(x86_cpu_to_node_map))) + 0))0; (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(x86_cpu_to_node_map))) *)(&(x86_cpu_to_node_map)))); (typeof((typeof(*(&(x86_cpu_to_node_map))) *)(&(x86_cpu_to_node_map)))) (__ptr + (((__get___per_cpu_offset_362(&__per_cpu_offset[cpu]))))); }); })));
}




extern cpumask_var_t node_to_cpumask_map[(1 << 6)];





static inline struct cpumask *cpumask_of_node(int node)
{
 return node_to_cpumask_map[node];
}


extern void setup_node_to_cpumask_map(void);
extern int __node_distance(int, int);

extern struct cpumask *cpu_coregroup_mask(int cpu);
static inline void arch_fix_phys_package_id(int num, u32 slot)
{
}

struct pci_bus;
void x86_pci_root_bus_resources(int bus, struct list_head *resources);
extern int get_mp_bus_to_node(int busnum);
extern void set_mp_bus_to_node(int busnum, int node);
extern int numa_off;
extern s16 __apicid_to_node[32768];
extern nodemask_t numa_nodes_parsed __attribute__ ((__section__(".init.data")));

extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) numa_add_memblk(int nodeid, u64 start, u64 end);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) numa_set_distance(int from, int to, int distance);

static inline void set_apicid_to_node(int apicid, s16 node)
{
 __apicid_to_node[apicid] = node;
}

extern int numa_cpu_node(int cpu);
extern void numa_set_node(int cpu, int node);
extern void numa_clear_node(int cpu);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) init_cpu_to_node(void);
extern void numa_add_cpu(int cpu);
extern void numa_remove_cpu(int cpu);

typedef struct {
 void *ldt;
 int size;



 unsigned short ia32_compat;


 struct mutex lock;
 void *vdso;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} mm_context_t;


void leave_mm(int cpu);





static inline unsigned char readb( void *addr) { unsigned char ret; asm ("mov" "b" " %1,%0":"=q" (ret) :"m" (*( unsigned char *)addr) :"memory"); return ret; }
static inline unsigned short readw( void *addr) { unsigned short ret; asm ("mov" "w" " %1,%0":"=r" (ret) :"m" (*( unsigned short *)addr) :"memory"); return ret; }
static inline unsigned int readl( void *addr) { unsigned int ret; asm ("mov" "l" " %1,%0":"=r" (ret) :"m" (*( unsigned int *)addr) :"memory"); return ret; }

static inline unsigned char __readb( void *addr) { unsigned char ret; asm ("mov" "b" " %1,%0":"=q" (ret) :"m" (*( unsigned char *)addr) ); return ret; }
static inline unsigned short __readw( void *addr) { unsigned short ret; asm ("mov" "w" " %1,%0":"=r" (ret) :"m" (*( unsigned short *)addr) ); return ret; }
static inline unsigned int __readl( void *addr) { unsigned int ret; asm ("mov" "l" " %1,%0":"=r" (ret) :"m" (*( unsigned int *)addr) ); return ret; }

static inline void writeb(unsigned char val, void *addr) { asm ("mov" "b" " %0,%1": :"q" (val), "m" (*( unsigned char *)addr) :"memory"); }
static inline void writew(unsigned short val, void *addr) { asm ("mov" "w" " %0,%1": :"r" (val), "m" (*( unsigned short *)addr) :"memory"); }
static inline void writel(unsigned int val, void *addr) { asm ("mov" "l" " %0,%1": :"r" (val), "m" (*( unsigned int *)addr) :"memory"); }

static inline void __writeb(unsigned char val, void *addr) { asm ("mov" "b" " %0,%1": :"q" (val), "m" (*( unsigned char *)addr) ); }
static inline void __writew(unsigned short val, void *addr) { asm ("mov" "w" " %0,%1": :"r" (val), "m" (*( unsigned short *)addr) ); }
static inline void __writel(unsigned int val, void *addr) { asm ("mov" "l" " %0,%1": :"r" (val), "m" (*( unsigned int *)addr) ); }
static inline unsigned long readq( void *addr) { unsigned long ret; asm ("mov" "q" " %1,%0":"=r" (ret) :"m" (*( unsigned long *)addr) :"memory"); return ret; }
static inline void writeq(unsigned long val, void *addr) { asm ("mov" "q" " %0,%1": :"r" (val), "m" (*( unsigned long *)addr) :"memory"); }
static inline phys_addr_t virt_to_phys( void *address)
{
 return __phys_addr_nodebug((unsigned long)(address));
}
static inline void *phys_to_virt(phys_addr_t address)
{
 return ((void *)((unsigned long)(address)+((unsigned long)(0xffff880000000000UL))));
}
static inline unsigned int isa_virt_to_bus( void *address)
{
 return (unsigned int)virt_to_phys(address);
}
extern void *ioremap_nocache(resource_size_t offset, unsigned long size);
extern void *ioremap_cache(resource_size_t offset, unsigned long size);
extern void *ioremap_prot(resource_size_t offset, unsigned long size,
    unsigned long prot_val);




static inline void *ioremap(resource_size_t offset, unsigned long size)
{
 return ioremap_nocache(offset, size);
}

extern void iounmap( void *addr);

extern void set_iounmap_nonlazy(void);



extern unsigned int ioread8(void *);
extern unsigned int ioread16(void *);
extern unsigned int ioread16be(void *);
extern unsigned int ioread32(void *);
extern unsigned int ioread32be(void *);

extern void iowrite8(u8, void *);
extern void iowrite16(u16, void *);
extern void iowrite16be(u16, void *);
extern void iowrite32(u32, void *);
extern void iowrite32be(u32, void *);
extern void ioread8_rep(void *port, void *buf, unsigned long count);
extern void ioread16_rep(void *port, void *buf, unsigned long count);
extern void ioread32_rep(void *port, void *buf, unsigned long count);

extern void iowrite8_rep(void *port, void *buf, unsigned long count);
extern void iowrite16_rep(void *port, void *buf, unsigned long count);
extern void iowrite32_rep(void *port, void *buf, unsigned long count);



extern void *ioport_map(unsigned long port, unsigned int nr);
extern void ioport_unmap(void *);
struct pci_dev;
extern void pci_iounmap(struct pci_dev *dev, void *);






struct pci_dev;


extern void *pci_iomap(struct pci_dev *dev, int bar, unsigned long max);








struct rb_node {
  template <typename, int = 0> struct __BYPASSrb_node {};
  template <typename, int> friend struct __BYPASSrb_node;
 unsigned long __rb_parent_color;
 struct rb_node *rb_right;
 struct rb_node *rb_left;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((aligned(sizeof(long))));


struct rb_root {
  template <typename, int = 0> struct __BYPASSrb_root {};
  template <typename, int> friend struct __BYPASSrb_root;
 struct rb_node *rb_node;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void rb_insert_color(struct rb_node *, struct rb_root *);
extern void rb_erase(struct rb_node *, struct rb_root *);



extern struct rb_node *rb_next( struct rb_node *);
extern struct rb_node *rb_prev( struct rb_node *);
extern struct rb_node *rb_first( struct rb_root *);
extern struct rb_node *rb_last( struct rb_root *);


extern struct rb_node *rb_first_postorder( struct rb_root *);
extern struct rb_node *rb_next_postorder( struct rb_node *);


extern void rb_replace_node(struct rb_node *victim, struct rb_node *_new,
       struct rb_root *root);

static inline void rb_link_node(struct rb_node * node, struct rb_node * parent,
    struct rb_node ** rb_link)
{
 node->__rb_parent_color = (unsigned long)parent;
 node->rb_left = node->rb_right = 0;

 *rb_link = node;
}

struct vm_area_struct;
struct vm_struct {
  template <typename, int = 0> struct __BYPASSvm_struct {};
  template <typename, int> friend struct __BYPASSvm_struct;
 struct vm_struct *next;
 void *addr;
 unsigned long size;
 unsigned long flags;
 struct page **pages;
 unsigned int nr_pages;
 phys_addr_t phys_addr;
 void *caller;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct vmap_area {
  template <typename, int = 0> struct __BYPASSvmap_area {};
  template <typename, int> friend struct __BYPASSvmap_area;
 unsigned long va_start;
 unsigned long va_end;
 unsigned long flags;
 struct rb_node rb_node;
 struct list_head list;
 struct list_head purge_list;
 struct vm_struct *vm;
 struct callback_head callback_head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern void vm_unmap_ram( void *mem, unsigned int count);
extern void *vm_map_ram(struct page **pages, unsigned int count,
    int node, pgprot_t prot);
extern void vm_unmap_aliases(void);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) vmalloc_init(void);






extern void *vmalloc(unsigned long size);
extern void *vzalloc(unsigned long size);
extern void *vmalloc_user(unsigned long size);
extern void *vmalloc_node(unsigned long size, int node);
extern void *vzalloc_node(unsigned long size, int node);
extern void *vmalloc_exec(unsigned long size);
extern void *vmalloc_32(unsigned long size);
extern void *vmalloc_32_user(unsigned long size);
extern void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot);
extern void *__vmalloc_node_range(unsigned long size, unsigned long align,
   unsigned long start, unsigned long end, gfp_t gfp_mask,
   pgprot_t prot, int node, void *caller);
extern void vfree( void *addr);

extern void *vmap(struct page **pages, unsigned int count,
   unsigned long flags, pgprot_t prot);
extern void vunmap( void *addr);

extern int remap_vmalloc_range_partial(struct vm_area_struct *vma,
           unsigned long uaddr, void *kaddr,
           unsigned long size);

extern int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,
       unsigned long pgoff);
void vmalloc_sync_all(void);






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9vm_struct4sizeE_364_0 {
  typedef TJP__ZN9vm_struct4sizeE_364_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9vm_struct4sizeE_364(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9vm_struct4sizeE_364_0< unsigned long int , ::vm_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline size_t get_vm_area_size( struct vm_struct *area)
{

 return __get__ZN9vm_struct4sizeE_364(&area->size) - ((1UL) << 12);
}

extern struct vm_struct *get_vm_area(unsigned long size, unsigned long flags);
extern struct vm_struct *get_vm_area_caller(unsigned long size,
     unsigned long flags, void *caller);
extern struct vm_struct *__get_vm_area(unsigned long size, unsigned long flags,
     unsigned long start, unsigned long end);
extern struct vm_struct *__get_vm_area_caller(unsigned long size,
     unsigned long flags,
     unsigned long start, unsigned long end,
     void *caller);
extern struct vm_struct *remove_vm_area( void *addr);
extern struct vm_struct *find_vm_area( void *addr);

extern int map_vm_area(struct vm_struct *area, pgprot_t prot,
   struct page ***pages);

extern int map_kernel_range_noflush(unsigned long start, unsigned long size,
        pgprot_t prot, struct page **pages);
extern void unmap_kernel_range_noflush(unsigned long addr, unsigned long size);
extern void unmap_kernel_range(unsigned long addr, unsigned long size);
extern struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes);
extern void free_vm_area(struct vm_struct *area);


extern long vread(char *buf, char *addr, unsigned long count);
extern long vwrite(char *buf, char *addr, unsigned long count);




extern struct list_head vmap_area_list;
extern __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) void vm_area_add_early(struct vm_struct *vm);
extern __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) void vm_area_register_early(struct vm_struct *vm, size_t align);



struct vm_struct **pcpu_get_vm_areas( unsigned long *offsets,
         size_t *sizes, int nr_vms,
         size_t align);

void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms);
struct vmalloc_info {
  template <typename, int = 0> struct __BYPASSvmalloc_info {};
  template <typename, int> friend struct __BYPASSvmalloc_info;
 unsigned long used;
 unsigned long largest_chunk;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



extern void get_vmalloc_info(struct vmalloc_info *vmi);






static inline void
memset_io( void *addr, unsigned char val, size_t count)
{
 memset((void *)addr, val, count);
}

static inline void
memcpy_fromio(void *dst, void *src, size_t count)
{
 memcpy(dst, ( void *)src, count);
}

static inline void
memcpy_toio( void *dst, void *src, size_t count)
{
 memcpy((void *)dst, src, count);
}
static inline void flush_write_buffers(void)
{



}



extern void native_io_delay(void);

extern int io_delay_type;
extern void io_delay_init(void);
static inline void outb(unsigned char value, int port) { asm ("out" "b" " %" "b" "0, %w1" : : "a"(value), "Nd"(port)); } static inline unsigned char inb(int port) { unsigned char value; asm ("in" "b" " %w1, %" "b" "0" : "=a"(value) : "Nd"(port)); return value; } static inline void outb_p(unsigned char value, int port) { outb(value, port); slow_down_io(); } static inline unsigned char inb_p(int port) { unsigned char value = inb(port); slow_down_io(); return value; } static inline void outsb(int port, void *addr, unsigned long count) { asm ("rep; outs" "b" : "+S"(addr), "+c"(count) : "d"(port)); } static inline void insb(int port, void *addr, unsigned long count) { asm ("rep; ins" "b" : "+D"(addr), "+c"(count) : "d"(port)); }
static inline void outw(unsigned short value, int port) { asm ("out" "w" " %" "w" "0, %w1" : : "a"(value), "Nd"(port)); } static inline unsigned short inw(int port) { unsigned short value; asm ("in" "w" " %w1, %" "w" "0" : "=a"(value) : "Nd"(port)); return value; } static inline void outw_p(unsigned short value, int port) { outw(value, port); slow_down_io(); } static inline unsigned short inw_p(int port) { unsigned short value = inw(port); slow_down_io(); return value; } static inline void outsw(int port, void *addr, unsigned long count) { asm ("rep; outs" "w" : "+S"(addr), "+c"(count) : "d"(port)); } static inline void insw(int port, void *addr, unsigned long count) { asm ("rep; ins" "w" : "+D"(addr), "+c"(count) : "d"(port)); }
static inline void outl(unsigned int value, int port) { asm ("out" "l" " %" "" "0, %w1" : : "a"(value), "Nd"(port)); } static inline unsigned int inl(int port) { unsigned int value; asm ("in" "l" " %w1, %" "" "0" : "=a"(value) : "Nd"(port)); return value; } static inline void outl_p(unsigned int value, int port) { outl(value, port); slow_down_io(); } static inline unsigned int inl_p(int port) { unsigned int value = inl(port); slow_down_io(); return value; } static inline void outsl(int port, void *addr, unsigned long count) { asm ("rep; outs" "l" : "+S"(addr), "+c"(count) : "d"(port)); } static inline void insl(int port, void *addr, unsigned long count) { asm ("rep; ins" "l" : "+D"(addr), "+c"(count) : "d"(port)); }

extern void *xlate_dev_mem_ptr(unsigned long phys);
extern void unxlate_dev_mem_ptr(unsigned long phys, void *addr);

extern int ioremap_change_attr(unsigned long vaddr, unsigned long size,
    unsigned long prot_val);
extern void *ioremap_wc(resource_size_t offset, unsigned long size);






extern void early_ioremap_init(void);
extern void early_ioremap_reset(void);
extern void *early_ioremap(resource_size_t phys_addr,
       unsigned long size);
extern void *early_memremap(resource_size_t phys_addr,
        unsigned long size);
extern void early_iounmap(void *addr, unsigned long size);
extern void fixup_early_ioremap(void);
extern bool is_early_ioremap_ptep(pte_t *ptep);





enum xen_domain_type {
 XEN_NATIVE,
 XEN_PV_DOMAIN,
 XEN_HVM_DOMAIN,
};


extern enum xen_domain_type xen_domain_type;
typedef unsigned long xen_pfn_t;

typedef unsigned long xen_ulong_t;


typedef unsigned char * __guest_handle_uchar;
typedef unsigned int * __guest_handle_uint;
typedef char * __guest_handle_char;
typedef int * __guest_handle_int;
typedef void * __guest_handle_void;
typedef uint64_t * __guest_handle_uint64_t;
typedef uint32_t * __guest_handle_uint32_t;
typedef xen_pfn_t * __guest_handle_xen_pfn_t;
typedef xen_ulong_t * __guest_handle_xen_ulong_t;
struct trap_info {
  template <typename, int = 0> struct __BYPASStrap_info {};
  template <typename, int> friend struct __BYPASStrap_info;
    uint8_t vector;
    uint8_t flags;
    uint16_t cs;
    unsigned long address;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct trap_info * __guest_handle_trap_info;

struct arch_shared_info {
  template <typename, int = 0> struct __BYPASSarch_shared_info {};
  template <typename, int> friend struct __BYPASSarch_shared_info;
    unsigned long max_pfn;

    unsigned long pfn_to_mfn_frame_list_list;
    unsigned long nmi_reason;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct iret_context {
  template <typename, int = 0> struct __BYPASSiret_context {};
  template <typename, int> friend struct __BYPASSiret_context;

    uint64_t rax, r11, rcx, flags, rip, cs, rflags, rsp, ss;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct cpu_user_regs {
  template <typename, int = 0> struct __BYPASScpu_user_regs {};
  template <typename, int> friend struct __BYPASScpu_user_regs;
    uint64_t r15;
    uint64_t r14;
    uint64_t r13;
    uint64_t r12;
    union { uint64_t rbp, ebp; uint32_t _ebp; };
    union { uint64_t rbx, ebx; uint32_t _ebx; };
    uint64_t r11;
    uint64_t r10;
    uint64_t r9;
    uint64_t r8;
    union { uint64_t rax, eax; uint32_t _eax; };
    union { uint64_t rcx, ecx; uint32_t _ecx; };
    union { uint64_t rdx, edx; uint32_t _edx; };
    union { uint64_t rsi, esi; uint32_t _esi; };
    union { uint64_t rdi, edi; uint32_t _edi; };
    uint32_t error_code;
    uint32_t entry_vector;
    union { uint64_t rip, eip; uint32_t _eip; };
    uint16_t cs, _pad0[1];
    uint8_t saved_upcall_mask;
    uint8_t _pad1[3];
    union { uint64_t rflags, eflags; uint32_t _eflags; };
    union { uint64_t rsp, esp; uint32_t _esp; };
    uint16_t ss, _pad2[3];
    uint16_t es, _pad3[3];
    uint16_t ds, _pad4[3];
    uint16_t fs, _pad5[3];
    uint16_t gs, _pad6[3];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct cpu_user_regs * __guest_handle_cpu_user_regs;






struct arch_vcpu_info {
  template <typename, int = 0> struct __BYPASSarch_vcpu_info {};
  template <typename, int> friend struct __BYPASSarch_vcpu_info;
    unsigned long cr2;
    unsigned long pad;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef unsigned long xen_callback_t;


struct pvclock_vcpu_time_info {
  template <typename, int = 0> struct __BYPASSpvclock_vcpu_time_info {};
  template <typename, int> friend struct __BYPASSpvclock_vcpu_time_info;
 u32 version;
 u32 pad0;
 u64 tsc_timestamp;
 u64 system_time;
 u32 tsc_to_system_mul;
 s8 tsc_shift;
 u8 flags;
 u8 pad[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__packed__));

struct pvclock_wall_clock {
  template <typename, int = 0> struct __BYPASSpvclock_wall_clock {};
  template <typename, int> friend struct __BYPASSpvclock_wall_clock;
 u32 version;
 u32 sec;
 u32 nsec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__packed__));






struct vcpu_guest_context {
  template <typename, int = 0> struct __BYPASSvcpu_guest_context {};
  template <typename, int> friend struct __BYPASSvcpu_guest_context;

    struct { char x[512]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} fpu_ctxt;



    unsigned long flags;
    struct cpu_user_regs user_regs;
    struct trap_info trap_ctxt[256];
    unsigned long ldt_base, ldt_ents;
    unsigned long gdt_frames[16], gdt_ents;
    unsigned long kernel_ss, kernel_sp;

    unsigned long ctrlreg[8];
    unsigned long debugreg[8];






    unsigned long event_callback_eip;
    unsigned long failsafe_callback_eip;
    unsigned long syscall_callback_eip;

    unsigned long vm_assist;


    uint64_t fs_base;
    uint64_t gs_base_kernel;
    uint64_t gs_base_user;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct vcpu_guest_context * __guest_handle_vcpu_guest_context;
struct mmuext_op {
  template <typename, int = 0> struct __BYPASSmmuext_op {};
  template <typename, int> friend struct __BYPASSmmuext_op;
 unsigned int cmd;
 union {

  xen_pfn_t mfn;

  unsigned long linear_addr;
 } arg1;
 union {

  unsigned int nr_ents;

  void *vcpumask;
 } arg2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct mmuext_op * __guest_handle_mmuext_op;
typedef uint16_t domid_t;
struct mmu_update {
  template <typename, int = 0> struct __BYPASSmmu_update {};
  template <typename, int> friend struct __BYPASSmmu_update;
    uint64_t ptr;
    uint64_t val;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct mmu_update * __guest_handle_mmu_update;





struct multicall_entry {
  template <typename, int = 0> struct __BYPASSmulticall_entry {};
  template <typename, int> friend struct __BYPASSmulticall_entry;
    unsigned long op;
    long result;
    unsigned long args[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct multicall_entry * __guest_handle_multicall_entry;







struct vcpu_time_info {
  template <typename, int = 0> struct __BYPASSvcpu_time_info {};
  template <typename, int> friend struct __BYPASSvcpu_time_info;
 uint32_t version;
 uint32_t pad0;
 uint64_t tsc_timestamp;
 uint64_t system_time;






 uint32_t tsc_to_system_mul;
 int8_t tsc_shift;
 int8_t pad1[3];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct vcpu_info {
  template <typename, int = 0> struct __BYPASSvcpu_info {};
  template <typename, int> friend struct __BYPASSvcpu_info;
 uint8_t evtchn_upcall_pending;
 uint8_t evtchn_upcall_mask;
 xen_ulong_t evtchn_pending_sel;
 struct arch_vcpu_info arch;
 struct pvclock_vcpu_time_info time;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct shared_info {
  template <typename, int = 0> struct __BYPASSshared_info {};
  template <typename, int> friend struct __BYPASSshared_info;
 struct vcpu_info vcpu_info[32];
 xen_ulong_t evtchn_pending[sizeof(xen_ulong_t) * 8];
 xen_ulong_t evtchn_mask[sizeof(xen_ulong_t) * 8];





 struct pvclock_wall_clock wc;

 struct arch_shared_info arch;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct start_info {
  template <typename, int = 0> struct __BYPASSstart_info {};
  template <typename, int> friend struct __BYPASSstart_info;

 char magic[32];
 unsigned long nr_pages;
 unsigned long shared_info;
 uint32_t flags;
 xen_pfn_t store_mfn;
 uint32_t store_evtchn;
 union {
  struct {
   xen_pfn_t mfn;
   uint32_t evtchn;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} domU;
  struct {
   uint32_t info_off;
   uint32_t info_size;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} dom0;
 } console;

 unsigned long pt_base;
 unsigned long nr_pt_frames;
 unsigned long mfn_list;
 unsigned long mod_start;
 unsigned long mod_len;
 int8_t cmd_line[1024];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dom0_vga_console_info {
  template <typename, int = 0> struct __BYPASSdom0_vga_console_info {};
  template <typename, int> friend struct __BYPASSdom0_vga_console_info;
 uint8_t video_type;




 union {
  struct {

   uint16_t font_height;

   uint16_t cursor_x, cursor_y;

   uint16_t rows, columns;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} text_mode_3;

  struct {

   uint16_t width, height;

   uint16_t bytes_per_line;

   uint16_t bits_per_pixel;

   uint32_t lfb_base;
   uint32_t lfb_size;

   uint8_t red_pos, red_size;
   uint8_t green_pos, green_size;
   uint8_t blue_pos, blue_size;
   uint8_t rsvd_pos, rsvd_size;


   uint32_t gbl_caps;

   uint16_t mode_attrs;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} vesa_lfb;
 } u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






typedef uint64_t cpumap_t;

typedef uint8_t xen_domain_handle_t[16];







struct tmem_op {
  template <typename, int = 0> struct __BYPASStmem_op {};
  template <typename, int> friend struct __BYPASStmem_op;
 uint32_t cmd;
 int32_t pool_id;
 union {
  struct {
   uint64_t uuid[2];
   uint32_t flags;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _new;
  struct {
   uint64_t oid[3];
   uint32_t index;
   uint32_t tmem_offset;
   uint32_t pfn_offset;
   uint32_t len;
   __guest_handle_void gmfn;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} gen;
 } u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef u64 * __guest_handle_u64;
extern struct shared_info *HYPERVISOR_shared_info;
extern struct start_info *xen_start_info;



static inline uint32_t xen_cpuid_base(void)
{
 return hypervisor_cpuid_base("XenVMMXenVMM", 2);
}


extern bool xen_hvm_need_lapic(void);

static inline bool xen_x2apic_para_available(void)
{
 return xen_hvm_need_lapic();
}
struct bio_vec;

extern bool xen_biovec_phys_mergeable( struct bio_vec *vec1,
          struct bio_vec *vec2);
extern int arch_phys_wc_add(unsigned long base,
      unsigned long size);
extern void arch_phys_wc_del(int handle);


struct real_mode_header {
  template <typename, int = 0> struct __BYPASSreal_mode_header {};
  template <typename, int> friend struct __BYPASSreal_mode_header;
 u32 text_start;
 u32 ro_end;

 u32 trampoline_start;
 u32 trampoline_status;
 u32 trampoline_header;

 u32 trampoline_pgd;



 u32 wakeup_start;
 u32 wakeup_header;


 u32 machine_real_restart_asm;

 u32 machine_real_restart_seg;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct trampoline_header {
  template <typename, int = 0> struct __BYPASStrampoline_header {};
  template <typename, int> friend struct __BYPASStrampoline_header;






 u64 start;
 u64 efer;
 u32 cr4;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct real_mode_header *real_mode_header;
extern unsigned char real_mode_blob_end[];

extern unsigned long init_rsp;
extern unsigned long initial_code;
extern unsigned long initial_gs;

extern unsigned char real_mode_blob[];
extern unsigned char real_mode_relocs[];





extern unsigned char secondary_startup_64[];


void reserve_real_mode(void);
void setup_real_mode(void);
int __acpi_acquire_global_lock(unsigned int *lock);
int __acpi_release_global_lock(unsigned int *lock);
extern int acpi_lapic;
extern int acpi_ioapic;
extern int acpi_noirq;
extern int acpi_strict;
extern int acpi_disabled;
extern int acpi_pci_disabled;
extern int acpi_skip_timer_override;
extern int acpi_use_timer_override;
extern int acpi_fix_pin2_polarity;
extern int acpi_disable_cmcff;

extern u8 acpi_sci_flags;
extern int acpi_sci_override_gsi;
void acpi_pic_sci_set_trigger(unsigned int, u16);

extern int (*__acpi_register_gsi)(struct device *dev, u32 gsi,
      int trigger, int polarity);

static inline void disable_acpi(void)
{
 acpi_disabled = 1;
 acpi_pci_disabled = 1;
 acpi_noirq = 1;
}

extern int acpi_gsi_to_irq(u32 gsi, unsigned int *irq);

static inline void acpi_noirq_set(void) { acpi_noirq = 1; }
static inline void acpi_disable_pci(void)
{
 acpi_pci_disabled = 1;
 acpi_noirq_set();
}


extern int (*acpi_suspend_lowlevel)(void);







static inline unsigned int acpi_processor_cstate_check(unsigned int max_cstate)
{






 if (boot_cpu_data.x86 == 0x0F &&
     boot_cpu_data.x86_vendor == 2 &&
     boot_cpu_data.x86_model <= 0x05 &&
     boot_cpu_data.x86_mask < 0x0A)
  return 1;
 else if (amd_e400_c1e_detected)
  return 1;
 else
  return max_cstate;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP___per_cpu_offset_374_0 {
  typedef TJP___per_cpu_offset_374_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get___per_cpu_offset_374(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP___per_cpu_offset_374_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline bool arch_has_acpi_pdc(void)
{
 struct cpuinfo_x86 *c = &(*({ do { void *__vpp_verify = (typeof(((&(cpu_info))) + 0))0; (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(cpu_info))) *)(&(cpu_info)))); (typeof((typeof(*(&(cpu_info))) *)(&(cpu_info)))) (__ptr + (((__get___per_cpu_offset_374(&__per_cpu_offset[0]))))); }); }));
 return (c->x86_vendor == 0 ||
  c->x86_vendor == 5);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP___per_cpu_offset_377_0 {
  typedef TJP___per_cpu_offset_377_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get___per_cpu_offset_377(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP___per_cpu_offset_377_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void arch_acpi_set_pdc_bits(u32 *buf)
{
 struct cpuinfo_x86 *c = &(*({ do { void *__vpp_verify = (typeof(((&(cpu_info))) + 0))0; (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(cpu_info))) *)(&(cpu_info)))); (typeof((typeof(*(&(cpu_info))) *)(&(cpu_info)))) (__ptr + (((__get___per_cpu_offset_377(&__per_cpu_offset[0]))))); }); }));

 buf[2] |= ((0x0010) | (0x0008) | (0x0002) | (0x0100) | (0x0200));

 if ((__builtin_constant_p((4*32+ 7)) && ( ((((4*32+ 7))>>5)==0 && (1UL<<(((4*32+ 7))&31) & ((1<<((0*32+ 0) & 31))|0|(1<<((0*32+ 5) & 31))|(1<<((0*32+ 6) & 31))| (1<<((0*32+ 8) & 31))|0|(1<<((0*32+24) & 31))|(1<<((0*32+15) & 31))| (1<<((0*32+25) & 31))|(1<<((0*32+26) & 31))))) || ((((4*32+ 7))>>5)==1 && (1UL<<(((4*32+ 7))&31) & ((1<<((1*32+29) & 31))|0))) || ((((4*32+ 7))>>5)==2 && (1UL<<(((4*32+ 7))&31) & 0)) || ((((4*32+ 7))>>5)==3 && (1UL<<(((4*32+ 7))&31) & ((1<<((3*32+20) & 31))))) || ((((4*32+ 7))>>5)==4 && (1UL<<(((4*32+ 7))&31) & (0))) || ((((4*32+ 7))>>5)==5 && (1UL<<(((4*32+ 7))&31) & 0)) || ((((4*32+ 7))>>5)==6 && (1UL<<(((4*32+ 7))&31) & 0)) || ((((4*32+ 7))>>5)==7 && (1UL<<(((4*32+ 7))&31) & 0)) || ((((4*32+ 7))>>5)==8 && (1UL<<(((4*32+ 7))&31) & 0)) || ((((4*32+ 7))>>5)==9 && (1UL<<(((4*32+ 7))&31) & 0)) ) ? 1 : (__builtin_constant_p(((4*32+ 7))) ? constant_test_bit(((4*32+ 7)), ((unsigned long *)((c)->x86_capability))) : variable_test_bit(((4*32+ 7)), ((unsigned long *)((c)->x86_capability))))))
  buf[2] |= ((0x0008) | (0x0002) | (0x0020) | (0x0800) | (0x0001));

 if ((__builtin_constant_p((0*32+22)) && ( ((((0*32+22))>>5)==0 && (1UL<<(((0*32+22))&31) & ((1<<((0*32+ 0) & 31))|0|(1<<((0*32+ 5) & 31))|(1<<((0*32+ 6) & 31))| (1<<((0*32+ 8) & 31))|0|(1<<((0*32+24) & 31))|(1<<((0*32+15) & 31))| (1<<((0*32+25) & 31))|(1<<((0*32+26) & 31))))) || ((((0*32+22))>>5)==1 && (1UL<<(((0*32+22))&31) & ((1<<((1*32+29) & 31))|0))) || ((((0*32+22))>>5)==2 && (1UL<<(((0*32+22))&31) & 0)) || ((((0*32+22))>>5)==3 && (1UL<<(((0*32+22))&31) & ((1<<((3*32+20) & 31))))) || ((((0*32+22))>>5)==4 && (1UL<<(((0*32+22))&31) & (0))) || ((((0*32+22))>>5)==5 && (1UL<<(((0*32+22))&31) & 0)) || ((((0*32+22))>>5)==6 && (1UL<<(((0*32+22))&31) & 0)) || ((((0*32+22))>>5)==7 && (1UL<<(((0*32+22))&31) & 0)) || ((((0*32+22))>>5)==8 && (1UL<<(((0*32+22))&31) & 0)) || ((((0*32+22))>>5)==9 && (1UL<<(((0*32+22))&31) & 0)) ) ? 1 : (__builtin_constant_p(((0*32+22))) ? constant_test_bit(((0*32+22)), ((unsigned long *)((c)->x86_capability))) : variable_test_bit(((0*32+22)), ((unsigned long *)((c)->x86_capability))))))
  buf[2] |= (0x0004);




 if (!(__builtin_constant_p((4*32+ 3)) && ( ((((4*32+ 3))>>5)==0 && (1UL<<(((4*32+ 3))&31) & ((1<<((0*32+ 0) & 31))|0|(1<<((0*32+ 5) & 31))|(1<<((0*32+ 6) & 31))| (1<<((0*32+ 8) & 31))|0|(1<<((0*32+24) & 31))|(1<<((0*32+15) & 31))| (1<<((0*32+25) & 31))|(1<<((0*32+26) & 31))))) || ((((4*32+ 3))>>5)==1 && (1UL<<(((4*32+ 3))&31) & ((1<<((1*32+29) & 31))|0))) || ((((4*32+ 3))>>5)==2 && (1UL<<(((4*32+ 3))&31) & 0)) || ((((4*32+ 3))>>5)==3 && (1UL<<(((4*32+ 3))&31) & ((1<<((3*32+20) & 31))))) || ((((4*32+ 3))>>5)==4 && (1UL<<(((4*32+ 3))&31) & (0))) || ((((4*32+ 3))>>5)==5 && (1UL<<(((4*32+ 3))&31) & 0)) || ((((4*32+ 3))>>5)==6 && (1UL<<(((4*32+ 3))&31) & 0)) || ((((4*32+ 3))>>5)==7 && (1UL<<(((4*32+ 3))&31) & 0)) || ((((4*32+ 3))>>5)==8 && (1UL<<(((4*32+ 3))&31) & 0)) || ((((4*32+ 3))>>5)==9 && (1UL<<(((4*32+ 3))&31) & 0)) ) ? 1 : (__builtin_constant_p(((4*32+ 3))) ? constant_test_bit(((4*32+ 3)), ((unsigned long *)((c)->x86_capability))) : variable_test_bit(((4*32+ 3)), ((unsigned long *)((c)->x86_capability))))))
  buf[2] &= ~((0x0200));
}
extern int acpi_numa;
extern int x86_acpi_numa_init(void);





typedef u64 cycle_t;
struct clocksource;
struct module;


struct arch_clocksource_data {
  template <typename, int = 0> struct __BYPASSarch_clocksource_data {};
  template <typename, int> friend struct __BYPASSarch_clocksource_data;
 int vclock_mode;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct cyclecounter {
  template <typename, int = 0> struct __BYPASScyclecounter {};
  template <typename, int> friend struct __BYPASScyclecounter;
 cycle_t (*read)( struct cyclecounter *cc);
 cycle_t mask;
 u32 mult;
 u32 shift;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct timecounter {
  template <typename, int = 0> struct __BYPASStimecounter {};
  template <typename, int> friend struct __BYPASStimecounter;
 struct cyclecounter *cc;
 cycle_t cycle_last;
 u64 nsec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline u64 cyclecounter_cyc2ns( struct cyclecounter *cc,
          cycle_t cycles)
{
 u64 ret = (u64)cycles;
 ret = (ret * cc->mult) >> cc->shift;
 return ret;
}
extern void timecounter_init(struct timecounter *tc,
        struct cyclecounter *cc,
        u64 start_tstamp);
extern u64 timecounter_read(struct timecounter *tc);
extern u64 timecounter_cyc2time(struct timecounter *tc,
    cycle_t cycle_tstamp);
struct clocksource {
  template <typename, int = 0> struct __BYPASSclocksource {};
  template <typename, int> friend struct __BYPASSclocksource;




 cycle_t (*read)(struct clocksource *cs);
 cycle_t cycle_last;
 cycle_t mask;
 u32 mult;
 u32 shift;
 u64 max_idle_ns;
 u32 maxadj;

 struct arch_clocksource_data archdata;


 char *name;
 struct list_head list;
 int rating;
 int (*enable)(struct clocksource *cs);
 void (*disable)(struct clocksource *cs);
 unsigned long flags;
 void (*suspend)(struct clocksource *cs);
 void (*resume)(struct clocksource *cs);




 struct list_head wd_list;
 cycle_t cs_last;
 cycle_t wd_last;

 struct module *owner;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));
static inline u32 clocksource_khz2mult(u32 khz, u32 shift_constant)
{







 u64 tmp = ((u64)1000000) << shift_constant;

 tmp += khz/2;
 ({ uint32_t __base = (khz); uint32_t __rem; __rem = ((uint64_t)(tmp)) % __base; (tmp) = ((uint64_t)(tmp)) / __base; __rem; });

 return (u32)tmp;
}
static inline u32 clocksource_hz2mult(u32 hz, u32 shift_constant)
{







 u64 tmp = ((u64)1000000000) << shift_constant;

 tmp += hz/2;
 ({ uint32_t __base = (hz); uint32_t __rem; __rem = ((uint64_t)(tmp)) % __base; (tmp) = ((uint64_t)(tmp)) / __base; __rem; });

 return (u32)tmp;
}
static inline s64 clocksource_cyc2ns(cycle_t cycles, u32 mult, u32 shift)
{
 return ((u64) cycles * mult) >> shift;
}


extern int clocksource_register(struct clocksource*);
extern int clocksource_unregister(struct clocksource*);
extern void clocksource_touch_watchdog(void);
extern struct clocksource* clocksource_get_next(void);
extern void clocksource_change_rating(struct clocksource *cs, int rating);
extern void clocksource_suspend(void);
extern void clocksource_resume(void);
extern struct clocksource * __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) __attribute__((weak)) clocksource_default_clock(void);
extern void clocksource_mark_unstable(struct clocksource *cs);

extern u64
clocks_calc_max_nsecs(u32 mult, u32 shift, u32 maxadj, u64 mask);
extern void
clocks_calc_mult_shift(u32 *mult, u32 *shift, u32 from, u32 to, u32 minsec);





extern int
__clocksource_register_scale(struct clocksource *cs, u32 scale, u32 freq);
extern void
__clocksource_updatefreq_scale(struct clocksource *cs, u32 scale, u32 freq);

static inline int clocksource_register_hz(struct clocksource *cs, u32 hz)
{
 return __clocksource_register_scale(cs, 1, hz);
}

static inline int clocksource_register_khz(struct clocksource *cs, u32 khz)
{
 return __clocksource_register_scale(cs, 1000, khz);
}

static inline void __clocksource_updatefreq_hz(struct clocksource *cs, u32 hz)
{
 __clocksource_updatefreq_scale(cs, 1, hz);
}

static inline void __clocksource_updatefreq_khz(struct clocksource *cs, u32 khz)
{
 __clocksource_updatefreq_scale(cs, 1000, khz);
}


extern int timekeeping_notify(struct clocksource *clock);

extern cycle_t clocksource_mmio_readl_up(struct clocksource *);
extern cycle_t clocksource_mmio_readl_down(struct clocksource *);
extern cycle_t clocksource_mmio_readw_up(struct clocksource *);
extern cycle_t clocksource_mmio_readw_down(struct clocksource *);

extern int clocksource_mmio_init(void *, char *,
 unsigned long, int, unsigned, cycle_t (*)(struct clocksource *));

extern int clocksource_i8253_init(void);

struct device_node;
typedef void(*clocksource_of_init_fn)(struct device_node *);
static inline void clocksource_of_init(void) {}



cycle_t pvclock_clocksource_read(struct pvclock_vcpu_time_info *src);
u8 pvclock_read_flags(struct pvclock_vcpu_time_info *src);
void pvclock_set_flags(u8 flags);
unsigned long pvclock_tsc_khz(struct pvclock_vcpu_time_info *src);
void pvclock_read_wallclock(struct pvclock_wall_clock *wall,
       struct pvclock_vcpu_time_info *vcpu,
       struct timespec *ts);
void pvclock_resume(void);

void pvclock_touch_watchdogs(void);





static inline u64 pvclock_scale_delta(u64 delta, u32 mul_frac, int shift)
{
 u64 product;



 ulong tmp;


 if (shift < 0)
  delta >>= -shift;
 else
  delta <<= shift;
 __asm__ (
  "mulq %[mul_frac] ; shrd $32, %[hi], %[lo]"
  : [lo]"=a"(product),
    [hi]"=d"(tmp)
  : "0"(delta),
    [mul_frac]"rm"((u64)mul_frac));




 return product;
}

static inline __attribute__((always_inline))
u64 pvclock_get_nsec_offset( struct pvclock_vcpu_time_info *src)
{
 u64 delta = __native_read_tsc() - src->tsc_timestamp;
 return pvclock_scale_delta(delta, src->tsc_to_system_mul,
       src->tsc_shift);
}

static inline __attribute__((always_inline))
unsigned __pvclock_read_cycles( struct pvclock_vcpu_time_info *src,
          cycle_t *cycles, u8 *flags)
{
 unsigned version;
 cycle_t ret, offset;
 u8 ret_flags;

 version = src->version;






 rdtsc_barrier();
 offset = pvclock_get_nsec_offset(src);
 ret = src->system_time + offset;
 ret_flags = src->flags;
 rdtsc_barrier();

 *cycles = ret;
 *flags = ret_flags;
 return version;
}

struct pvclock_vsyscall_time_info {
  template <typename, int = 0> struct __BYPASSpvclock_vsyscall_time_info {};
  template <typename, int> friend struct __BYPASSpvclock_vsyscall_time_info;
 struct pvclock_vcpu_time_info pvti;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));




int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pvclock_init_vsyscall(struct pvclock_vsyscall_time_info *i,
     int size);
struct pvclock_vcpu_time_info *pvclock_get_vsyscall_time_info(int cpu);











enum vsyscall_num {
 __NR_vgettimeofday,
 __NR_vtime,
 __NR_vgetcpu,
};





extern int vgetcpu_mode;
extern struct timezone sys_tz;

static unsigned long * vvaraddr_jiffies = (void *)((-10*1024*1024 - 4096) + (0));
static int * vvaraddr_vgetcpu_mode = (void *)((-10*1024*1024 - 4096) + (16));
static struct vsyscall_gtod_data * vvaraddr_vsyscall_gtod_data = (void *)((-10*1024*1024 - 4096) + (128));

extern void map_vsyscall(void);





extern bool emulate_vsyscall(struct pt_regs *regs, unsigned long address);





static inline unsigned int __getcpu(void)
{
 unsigned int p;

 if ((*vvaraddr_vgetcpu_mode) == 1) {

  native_read_tscp(&p);
 } else {

  asm("lsl %1,%0" : "=r" (p) : "r" ((15 * 8 + 3)));
 }

 return p;
}
enum fixed_addresses {




 VSYSCALL_LAST_PAGE,
 VSYSCALL_FIRST_PAGE = VSYSCALL_LAST_PAGE
       + (((-2UL << 20)-(-10UL << 20)) >> 12) - 1,
 VVAR_PAGE,
 VSYSCALL_HPET,

 PVCLOCK_FIXMAP_BEGIN,
 PVCLOCK_FIXMAP_END = PVCLOCK_FIXMAP_BEGIN+(((256 -1)/(((1UL) << 12)/sizeof(struct pvclock_vsyscall_time_info)))+1)-1,


 FIX_DBGP_BASE,
 FIX_EARLYCON_MEM_BASE,




 FIX_APIC_BASE,


 FIX_IO_APIC_BASE_0,
 FIX_IO_APIC_BASE_END = FIX_IO_APIC_BASE_0 + 128 - 1,







 FIX_RO_IDT,
 FIX_PARAVIRT_BOOTMAP,

 FIX_TEXT_POKE1,
 FIX_TEXT_POKE0,



 __end_of_permanent_fixed_addresses,
 FIX_BTMAP_END =
  (__end_of_permanent_fixed_addresses ^
   (__end_of_permanent_fixed_addresses + (64 * 4) - 1)) &
  -512
  ? __end_of_permanent_fixed_addresses + (64 * 4) -
    (__end_of_permanent_fixed_addresses & ((64 * 4) - 1))
  : __end_of_permanent_fixed_addresses,
 FIX_BTMAP_BEGIN = FIX_BTMAP_END + (64 * 4) - 1,




 FIX_TBOOT_BASE,

 __end_of_fixed_addresses
};


extern void reserve_top_address(unsigned long reserve);






extern int fixmaps_set;

extern pte_t *kmap_pte;
extern pgprot_t kmap_prot;
extern pte_t *pkmap_page_table;

void __native_set_fixmap(enum fixed_addresses idx, pte_t pte);
void native_set_fixmap(enum fixed_addresses idx,
         phys_addr_t phys, pgprot_t flags);
extern void __this_fixmap_does_not_exist(void);






static inline __attribute__((always_inline)) unsigned long fix_to_virt( unsigned int idx)
{
 if (idx >= __end_of_fixed_addresses)
  __this_fixmap_does_not_exist();

 return (((-2UL << 20)-((1UL) << 12)) - ((idx) << 12));
}

static inline unsigned long virt_to_fix( unsigned long vaddr)
{
 (vaddr >= ((-2UL << 20)-((1UL) << 12)) || vaddr < (((-2UL << 20)-((1UL) << 12)) - (__end_of_permanent_fixed_addresses << 12)));
 return ((((-2UL << 20)-((1UL) << 12)) - ((vaddr)&(~(((1UL) << 12)-1)))) >> 12);
}


static inline __attribute__((always_inline)) unsigned long
__set_fixmap_offset(enum fixed_addresses idx, phys_addr_t phys, pgprot_t flags)
{
 __set_fixmap(idx, phys, flags);
 return fix_to_virt(idx) + (phys & (((1UL) << 12) - 1));
}








struct notifier_block;
void idle_notifier_register(struct notifier_block *n);
void idle_notifier_unregister(struct notifier_block *n);


void enter_idle(void);
void exit_idle(void);






void amd_e400_remove_cpu(int cpu);
static inline void generic_apic_probe(void)
{
}




extern unsigned int apic_verbosity;
extern int local_apic_timer_c2_ok;

extern int disable_apic;
extern unsigned int lapic_timer_frequency;


extern void __inquire_remote_apic(int apicid);






static inline void default_inquire_remote_apic(int apicid)
{
 if (apic_verbosity >= 2)
  __inquire_remote_apic(apicid);
}
static inline bool apic_from_smp_config(void)
{
 return smp_found_config && !disable_apic;
}
extern int is_vsmp_box(void);






extern void xapic_wait_icr_idle(void);
extern u32 safe_xapic_wait_icr_idle(void);
extern void xapic_icr_write(u32, u32);
extern int setup_profiling_timer(unsigned int);

static inline void native_apic_mem_write(u32 reg, u32 v)
{
 u32 *addr = ( u32 *)((fix_to_virt(FIX_APIC_BASE)) + reg);

 asm ("661:\n\t" "movl %0, %1" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(3*32+19)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" "xchgl %0, %1" "\n" "664""1" ":\n\t" ".popsection" : "=r" (v), "=m" (*addr) : "i" (0), "0" (v), "m" (*addr))

                                           ;
}

static inline u32 native_apic_mem_read(u32 reg)
{
 return *(( u32 *)((fix_to_virt(FIX_APIC_BASE)) + reg));
}

extern void native_apic_wait_icr_idle(void);
extern u32 native_safe_apic_wait_icr_idle(void);
extern void native_apic_icr_write(u32 low, u32 id);
extern u64 native_apic_icr_read(void);

extern int x2apic_mode;







static inline void x2apic_wrmsr_fence(void)
{
 asm ("mfence" : : : "memory");
}

static inline void native_apic_msr_write(u32 reg, u32 v)
{
 if (reg == 0xE0 || reg == 0x20 || reg == 0xD0 ||
     reg == 0x30)
  return;

 do { paravirt_write_msr(0x800 + (reg >> 4), v, 0); } while (0);
}

static inline void native_apic_msr_eoi_write(u32 reg, u32 v)
{
 do { paravirt_write_msr(0x800 + (0xB0 >> 4), 0x0, 0); } while (0);
}

static inline u32 native_apic_msr_read(u32 reg)
{
 u64 msr;

 if (reg == 0xE0)
  return -1;

 do { int _err; msr = paravirt_read_msr(0x800 + (reg >> 4), &_err); } while (0);
 return (u32)msr;
}

static inline void native_x2apic_wait_icr_idle(void)
{

 return;
}

static inline u32 native_safe_x2apic_wait_icr_idle(void)
{

 return 0;
}

static inline void native_x2apic_icr_write(u32 low, u32 id)
{
 do { paravirt_write_msr(0x800 + (0x300 >> 4), (u32)((u64)(((__u64) id) << 32 | low)), ((u64)(((__u64) id) << 32 | low))>>32); } while (0);
}

static inline u64 native_x2apic_icr_read(void)
{
 unsigned long val;

 do { int _err; val = paravirt_read_msr(0x800 + (0x300 >> 4), &_err); } while (0);
 return val;
}

extern int x2apic_phys;
extern int x2apic_preenabled;
extern void check_x2apic(void);
extern void enable_x2apic(void);
extern void x2apic_icr_write(u32 low, u32 id);
static inline int x2apic_enabled(void)
{
 u64 msr;

 if (!(__builtin_constant_p((4*32+21)) && ( ((((4*32+21))>>5)==0 && (1UL<<(((4*32+21))&31) & ((1<<((0*32+ 0) & 31))|0|(1<<((0*32+ 5) & 31))|(1<<((0*32+ 6) & 31))| (1<<((0*32+ 8) & 31))|0|(1<<((0*32+24) & 31))|(1<<((0*32+15) & 31))| (1<<((0*32+25) & 31))|(1<<((0*32+26) & 31))))) || ((((4*32+21))>>5)==1 && (1UL<<(((4*32+21))&31) & ((1<<((1*32+29) & 31))|0))) || ((((4*32+21))>>5)==2 && (1UL<<(((4*32+21))&31) & 0)) || ((((4*32+21))>>5)==3 && (1UL<<(((4*32+21))&31) & ((1<<((3*32+20) & 31))))) || ((((4*32+21))>>5)==4 && (1UL<<(((4*32+21))&31) & (0))) || ((((4*32+21))>>5)==5 && (1UL<<(((4*32+21))&31) & 0)) || ((((4*32+21))>>5)==6 && (1UL<<(((4*32+21))&31) & 0)) || ((((4*32+21))>>5)==7 && (1UL<<(((4*32+21))&31) & 0)) || ((((4*32+21))>>5)==8 && (1UL<<(((4*32+21))&31) & 0)) || ((((4*32+21))>>5)==9 && (1UL<<(((4*32+21))&31) & 0)) ) ? 1 : (__builtin_constant_p(((4*32+21))) ? constant_test_bit(((4*32+21)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((4*32+21)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return 0;

 do { int _err; msr = paravirt_read_msr(0x0000001b, &_err); } while (0);
 if (msr & (1UL << 10))
  return 1;
 return 0;
}


static inline void x2apic_force_phys(void)
{
 x2apic_phys = 1;
}
extern void enable_IR_x2apic(void);

extern int get_physical_broadcast(void);

extern int lapic_get_maxlvt(void);
extern void clear_local_APIC(void);
extern void connect_bsp_APIC(void);
extern void disconnect_bsp_APIC(int virt_wire_setup);
extern void disable_local_APIC(void);
extern void lapic_shutdown(void);
extern int verify_local_APIC(void);
extern void sync_Arb_IDs(void);
extern void init_bsp_APIC(void);
extern void setup_local_APIC(void);
extern void end_local_APIC_setup(void);
extern void bsp_end_local_APIC_setup(void);
extern void init_apic_mappings(void);
void register_lapic_address(unsigned long address);
extern void setup_boot_APIC_clock(void);
extern void setup_secondary_APIC_clock(void);
extern int APIC_init_uniprocessor(void);
extern int apic_force_enable(unsigned long addr);





extern int apic_is_clustered_box(void);







extern int setup_APIC_eilvt(u8 lvt_off, u8 vector, u8 msg_type, u8 mask);
struct apic {
  template <typename, int = 0> struct __BYPASSapic {};
  template <typename, int> friend struct __BYPASSapic;
 char *name;

 int (*probe)(void);
 int (*acpi_madt_oem_check)(char *oem_id, char *oem_table_id);
 int (*apic_id_valid)(int apicid);
 int (*apic_id_registered)(void);

 u32 irq_delivery_mode;
 u32 irq_dest_mode;

 struct cpumask *(*target_cpus)(void);

 int disable_esr;

 int dest_logical;
 unsigned long (*check_apicid_used)(physid_mask_t *map, int apicid);
 unsigned long (*check_apicid_present)(int apicid);

 void (*vector_allocation_domain)(int cpu, struct cpumask *retmask,
      struct cpumask *mask);
 void (*init_apic_ldr)(void);

 void (*ioapic_phys_id_map)(physid_mask_t *phys_map, physid_mask_t *retmap);

 void (*setup_apic_routing)(void);
 int (*multi_timer_check)(int apic, int irq);
 int (*cpu_present_to_apicid)(int mps_cpu);
 void (*apicid_to_cpu_present)(int phys_apicid, physid_mask_t *retmap);
 void (*setup_portio_remap)(void);
 int (*check_phys_apicid_present)(int phys_apicid);
 void (*enable_apic_mode)(void);
 int (*phys_pkg_id)(int cpuid_apic, int index_msb);






 int (*mps_oem_check)(struct mpc_table *mpc, char *oem, char *productid);

 unsigned int (*get_apic_id)(unsigned long x);
 unsigned long (*set_apic_id)(unsigned int id);
 unsigned long apic_id_mask;

 int (*cpu_mask_to_apicid_and)( struct cpumask *cpumask,
          struct cpumask *andmask,
          unsigned int *apicid);


 void (*send_IPI_mask)( struct cpumask *mask, int vector);
 void (*send_IPI_mask_allbutself)( struct cpumask *mask,
      int vector);
 void (*send_IPI_allbutself)(int vector);
 void (*send_IPI_all)(int vector);
 void (*send_IPI_self)(int vector);


 int (*wakeup_secondary_cpu)(int apicid, unsigned long start_eip);

 int trampoline_phys_low;
 int trampoline_phys_high;

 void (*wait_for_init_deassert)(atomic_t *deassert);
 void (*smp_callin_clear_local_apic)(void);
 void (*inquire_remote_apic)(int apicid);


 u32 (*read)(u32 reg);
 void (*write)(u32 reg, u32 v);







 void (*eoi_write)(u32 reg, u32 v);
 u64 (*icr_read)(void);
 void (*icr_write)(u32 low, u32 high);
 void (*wait_icr_idle)(void);
 u32 (*safe_wait_icr_idle)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






extern struct apic *apic;
extern struct apic *__apicdrivers[], *__apicdrivers_end[];





extern atomic_t init_deasserted;
extern int wakeup_secondary_cpu_via_nmi(int apicid, unsigned long start_eip);




static inline u32 apic_read(u32 reg)
{
 return apic->read(reg);
}

static inline void apic_write(u32 reg, u32 val)
{
 apic->write(reg, val);
}

static inline void apic_eoi(void)
{
 apic->eoi_write(0xB0, 0x0);
}

static inline u64 apic_icr_read(void)
{
 return apic->icr_read();
}

static inline void apic_icr_write(u32 low, u32 high)
{
 apic->icr_write(low, high);
}

static inline void apic_wait_icr_idle(void)
{
 apic->wait_icr_idle();
}

static inline u32 safe_apic_wait_icr_idle(void)
{
 return apic->safe_wait_icr_idle();
}

extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) apic_set_eoi_write(void (*eoi_write)(u32 reg, u32 v));
static inline void ack_APIC_irq(void)
{




 apic_eoi();
}

static inline unsigned default_get_apic_id(unsigned long x)
{
 unsigned int ver = ((apic_read(0x30)) & 0xFFu);

 if (((ver) >= 0x14) || (__builtin_constant_p((3*32+26)) && ( ((((3*32+26))>>5)==0 && (1UL<<(((3*32+26))&31) & ((1<<((0*32+ 0) & 31))|0|(1<<((0*32+ 5) & 31))|(1<<((0*32+ 6) & 31))| (1<<((0*32+ 8) & 31))|0|(1<<((0*32+24) & 31))|(1<<((0*32+15) & 31))| (1<<((0*32+25) & 31))|(1<<((0*32+26) & 31))))) || ((((3*32+26))>>5)==1 && (1UL<<(((3*32+26))&31) & ((1<<((1*32+29) & 31))|0))) || ((((3*32+26))>>5)==2 && (1UL<<(((3*32+26))&31) & 0)) || ((((3*32+26))>>5)==3 && (1UL<<(((3*32+26))&31) & ((1<<((3*32+20) & 31))))) || ((((3*32+26))>>5)==4 && (1UL<<(((3*32+26))&31) & (0))) || ((((3*32+26))>>5)==5 && (1UL<<(((3*32+26))&31) & 0)) || ((((3*32+26))>>5)==6 && (1UL<<(((3*32+26))&31) & 0)) || ((((3*32+26))>>5)==7 && (1UL<<(((3*32+26))&31) & 0)) || ((((3*32+26))>>5)==8 && (1UL<<(((3*32+26))&31) & 0)) || ((((3*32+26))>>5)==9 && (1UL<<(((3*32+26))&31) & 0)) ) ? 1 : (__builtin_constant_p(((3*32+26))) ? constant_test_bit(((3*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((3*32+26)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))))
  return (x >> 24) & 0xFF;
 else
  return (x >> 24) & 0x0F;
}
extern int default_acpi_madt_oem_check(char *, char *);

extern void apic_send_IPI_self(int vector);

extern __attribute__((section(".data..percpu" ""))) __typeof__(int) x2apic_extra_bits;

extern int default_cpu_present_to_apicid(int mps_cpu);
extern int default_check_phys_apicid_present(int phys_apicid);


static inline void default_wait_for_init_deassert(atomic_t *deassert)
{
 while (!atomic_read(deassert))
  cpu_relax();
 return;
}

extern void generic_bigsmp_probe(void);








template <typename TResult, typename TThat, typename TTarget> struct TJP_cpu_online_mask_418_0 {
  typedef TJP_cpu_online_mask_418_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cpumask * __get_cpu_online_mask_418(cpumask * *source) {
  ::cpumask *__result_buffer;
  typedef TJP_cpu_online_mask_418_0< ::cpumask *, void *, ::cpumask * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cpumask *&)__result_buffer;
}
static inline struct cpumask *default_target_cpus(void)
{

 return __get_cpu_online_mask_418(&cpu_online_mask);



}


template <typename TResult, typename TThat, typename TTarget> struct TJP_cpu_online_mask_419_0 {
  typedef TJP_cpu_online_mask_419_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cpumask * __get_cpu_online_mask_419(cpumask * *source) {
  ::cpumask *__result_buffer;
  typedef TJP_cpu_online_mask_419_0< ::cpumask *, void *, ::cpumask * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cpumask *&)__result_buffer;
}
static inline struct cpumask *online_target_cpus(void)
{
 return __get_cpu_online_mask_419(&cpu_online_mask);
}

extern __attribute__((section(".data..percpu" "..readmostly"))) __typeof__(u16) x86_bios_cpu_apicid; extern __typeof__(u16) *x86_bios_cpu_apicid_early_ptr; extern __typeof__(u16) x86_bios_cpu_apicid_early_map[];


static inline unsigned int read_apic_id(void)
{
 unsigned int reg;

 reg = apic_read(0x20);

 return apic->get_apic_id(reg);
}

static inline int default_apic_id_valid(int apicid)
{
 return (apicid < 255);
}

extern void default_setup_apic_routing(void);

extern struct apic apic_noop;

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_422_0 {
  typedef TJP__ZN7cpumask4bitsE_422_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_422(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_422_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_423_0 {
  typedef TJP__ZN7cpumask4bitsE_423_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_423(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_423_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_424_0 {
  typedef TJP__ZN7cpumask4bitsE_424_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_424(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_424_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP_cpu_online_mask_425_0 {
  typedef TJP_cpu_online_mask_425_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cpumask * __get_cpu_online_mask_425(cpumask * *source) {
  ::cpumask *__result_buffer;
  typedef TJP_cpu_online_mask_425_0< ::cpumask *, void *, ::cpumask * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cpumask *&)__result_buffer;
}
static inline int
flat_cpu_mask_to_apicid_and( struct cpumask *cpumask,
       struct cpumask *andmask,
       unsigned int *apicid)
{
 unsigned long cpu_mask = (__get__ZN7cpumask4bitsE_422((cpumask)->bits))[0] &
     (__get__ZN7cpumask4bitsE_423((andmask)->bits))[0] &
     (__get__ZN7cpumask4bitsE_424((__get_cpu_online_mask_425(&cpu_online_mask))->bits))[0] &
     0xFFu;

 if (__builtin_expect(!!(cpu_mask), 1)) {
  *apicid = (unsigned int)cpu_mask;
  return 0;
 } else {
  return -22;
 }
}

extern int
default_cpu_mask_to_apicid_and( struct cpumask *cpumask,
          struct cpumask *andmask,
          unsigned int *apicid);

static inline void
flat_vector_allocation_domain(int cpu, struct cpumask *retmask,
         struct cpumask *mask)
{
 cpumask_clear(retmask);
 ((retmask)->bits)[0] = 0xFFu;
}

static inline void
default_vector_allocation_domain(int cpu, struct cpumask *retmask,
     struct cpumask *mask)
{
 cpumask_copy(retmask, (get_cpu_mask(cpu)));
}

static inline unsigned long default_check_apicid_used(physid_mask_t *map, int apicid)
{
 return (__builtin_constant_p((apicid)) ? constant_test_bit((apicid), ((*map).mask)) : variable_test_bit((apicid), ((*map).mask)));
}

static inline unsigned long default_check_apicid_present(int bit)
{
 return (__builtin_constant_p((bit)) ? constant_test_bit((bit), ((phys_cpu_present_map).mask)) : variable_test_bit((bit), ((phys_cpu_present_map).mask)));
}

static inline void default_ioapic_phys_id_map(physid_mask_t *phys_map, physid_mask_t *retmap)
{
 *retmap = *phys_map;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP_nr_cpu_ids_432_0 {
  typedef TJP_nr_cpu_ids_432_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get_nr_cpu_ids_432(int *source) {
  int __result_buffer;
  typedef TJP_nr_cpu_ids_432_0< int , void *, int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_433_0 {
  typedef TJP__ZN7cpumask4bitsE_433_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_433(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_433_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_435_0 {
  typedef TJP__ZN7cpumask4bitsE_435_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_435(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_435_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP___per_cpu_offset_437_0 {
  typedef TJP___per_cpu_offset_437_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get___per_cpu_offset_437(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP___per_cpu_offset_437_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int __default_cpu_present_to_apicid(int mps_cpu)
{
 if (mps_cpu < __get_nr_cpu_ids_432(&nr_cpu_ids) && (__builtin_constant_p((cpumask_check((mps_cpu)))) ? constant_test_bit((cpumask_check((mps_cpu))), ((__get__ZN7cpumask4bitsE_433(((cpu_present_mask))->bits)))) : variable_test_bit((cpumask_check((mps_cpu))), ((__get__ZN7cpumask4bitsE_435(((cpu_present_mask))->bits))))))
  return (int)(*({ do { void *__vpp_verify = (typeof(((&(x86_bios_cpu_apicid))) + 0))0; (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(x86_bios_cpu_apicid))) *)(&(x86_bios_cpu_apicid)))); (typeof((typeof(*(&(x86_bios_cpu_apicid))) *)(&(x86_bios_cpu_apicid)))) (__ptr + (((__get___per_cpu_offset_437(&__per_cpu_offset[mps_cpu]))))); }); }));
 else
  return 0xFFFFu;
}

static inline int
__default_check_phys_apicid_present(int phys_apicid)
{
 return (__builtin_constant_p((phys_apicid)) ? constant_test_bit((phys_apicid), ((phys_cpu_present_map).mask)) : variable_test_bit((phys_apicid), ((phys_cpu_present_map).mask)));
}
extern int default_cpu_present_to_apicid(int mps_cpu);
extern int default_check_phys_apicid_present(int phys_apicid);



extern void irq_enter(void);
extern void irq_exit(void);

static inline void entering_irq(void)
{
 irq_enter();
 exit_idle();
}

static inline void entering_ack_irq(void)
{
 ack_APIC_irq();
 entering_irq();
}

static inline void exiting_irq(void)
{
 irq_exit();
}

static inline void exiting_ack_irq(void)
{
 irq_exit();

 ack_APIC_irq();
}

extern void ioapic_zap_locks(void);







static inline int invalid_vm86_irq(int irq)
{
 return irq < 3 || irq > 15;
}
union IO_APIC_reg_00 {
 u32 raw;
 struct {
  u32 __reserved_2 : 14,
   LTS : 1,
   delivery_type : 1,
   __reserved_1 : 8,
   ID : 8;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) bits;
};

union IO_APIC_reg_01 {
 u32 raw;
 struct {
  u32 version : 8,
   __reserved_2 : 7,
   PRQ : 1,
   entries : 8,
   __reserved_1 : 8;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) bits;
};

union IO_APIC_reg_02 {
 u32 raw;
 struct {
  u32 __reserved_2 : 24,
   arbitration : 4,
   __reserved_1 : 4;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) bits;
};

union IO_APIC_reg_03 {
 u32 raw;
 struct {
  u32 boot_DT : 1,
   __reserved_1 : 31;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed)) bits;
};

struct IO_APIC_route_entry {
  template <typename, int = 0> struct __BYPASSIO_APIC_route_entry {};
  template <typename, int> friend struct __BYPASSIO_APIC_route_entry;
 __u32 vector : 8,
  delivery_mode : 3,



  dest_mode : 1,
  delivery_status : 1,
  polarity : 1,
  irr : 1,
  trigger : 1,
  mask : 1,
  __reserved_2 : 15;

 __u32 __reserved_3 : 24,
  dest : 8;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed));

struct IR_IO_APIC_route_entry {
  template <typename, int = 0> struct __BYPASSIR_IO_APIC_route_entry {};
  template <typename, int> friend struct __BYPASSIR_IO_APIC_route_entry;
 __u64 vector : 8,
  zero : 3,
  index2 : 1,
  delivery_status : 1,
  polarity : 1,
  irr : 1,
  trigger : 1,
  mask : 1,
  reserved : 31,
  format : 1,
  index : 15;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed));
extern int nr_ioapics;

extern int mpc_ioapic_id(int ioapic);
extern unsigned int mpc_ioapic_addr(int ioapic);
extern struct mp_ioapic_gsi *mp_ioapic_gsi_routing(int ioapic);




extern int mp_irq_entries;


extern struct mpc_intsrc mp_irqs[(256 * 4)];


extern int mpc_default_type;


extern int sis_apic_bug;


extern int skip_ioapic_setup;


extern int noioapicquirk;


extern int noioapicreroute;


extern int timer_through_8259;
struct io_apic_irq_attr;
struct irq_cfg;
extern int io_apic_set_pci_routing(struct device *dev, int irq,
   struct io_apic_irq_attr *irq_attr);
void setup_IO_APIC_irq_extra(u32 gsi);
extern void ioapic_insert_resources(void);

extern int native_setup_ioapic_entry(int, struct IO_APIC_route_entry *,
         unsigned int, int,
         struct io_apic_irq_attr *);
extern int native_setup_ioapic_entry(int, struct IO_APIC_route_entry *,
         unsigned int, int,
         struct io_apic_irq_attr *);
extern void eoi_ioapic_irq(unsigned int irq, struct irq_cfg *cfg);

extern void native_compose_msi_msg(struct pci_dev *pdev,
       unsigned int irq, unsigned int dest,
       struct msi_msg *msg, u8 hpet_id);
extern void native_eoi_ioapic_pin(int apic, int pin, int vector);
int io_apic_setup_irq_pin_once(unsigned int irq, int node, struct io_apic_irq_attr *attr);

extern int save_ioapic_entries(void);
extern void mask_ioapic_entries(void);
extern int restore_ioapic_entries(void);

extern int get_nr_irqs_gsi(void);

extern void setup_ioapic_ids_from_mpc(void);
extern void setup_ioapic_ids_from_mpc_nocheck(void);

struct mp_ioapic_gsi{
  template <typename, int = 0> struct __BYPASSmp_ioapic_gsi {};
  template <typename, int> friend struct __BYPASSmp_ioapic_gsi;
 u32 gsi_base;
 u32 gsi_end;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct mp_ioapic_gsi mp_gsi_routing[];
extern u32 gsi_top;
int mp_find_ioapic(u32 gsi);
int mp_find_ioapic_pin(int ioapic, u32 gsi);
void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) mp_register_ioapic(int id, u32 address, u32 gsi_base);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pre_init_apic_IRQ0(void);

extern void mp_save_irq(struct mpc_intsrc *m);

extern void disable_ioapic_support(void);

extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) native_io_apic_init_mappings(void);
extern unsigned int native_io_apic_read(unsigned int apic, unsigned int reg);
extern void native_io_apic_write(unsigned int apic, unsigned int reg, unsigned int val);
extern void native_io_apic_modify(unsigned int apic, unsigned int reg, unsigned int val);
extern void native_disable_io_apic(void);
extern void native_io_apic_print_entries(unsigned int apic, unsigned int nr_entries);
extern void intel_ir_io_apic_print_entries(unsigned int apic, unsigned int nr_entries);
extern int native_ioapic_set_affinity(struct irq_data *,
          struct cpumask *,
          bool);

static inline unsigned int io_apic_read(unsigned int apic, unsigned int reg)
{
 return x86_io_apic_ops.read(apic, reg);
}

static inline void io_apic_write(unsigned int apic, unsigned int reg, unsigned int value)
{
 x86_io_apic_ops.write(apic, reg, value);
}
static inline void io_apic_modify(unsigned int apic, unsigned int reg, unsigned int value)
{
 x86_io_apic_ops.modify(apic, reg, value);
}

extern void io_apic_eoi(unsigned int apic, unsigned int vector);






extern int smp_num_siblings;
extern unsigned int num_processors;

static inline bool cpu_has_ht_siblings(void)
{
 bool has_siblings = _false;

 has_siblings = (__builtin_constant_p((0*32+28)) && ( ((((0*32+28))>>5)==0 && (1UL<<(((0*32+28))&31) & ((1<<((0*32+ 0) & 31))|0|(1<<((0*32+ 5) & 31))|(1<<((0*32+ 6) & 31))| (1<<((0*32+ 8) & 31))|0|(1<<((0*32+24) & 31))|(1<<((0*32+15) & 31))| (1<<((0*32+25) & 31))|(1<<((0*32+26) & 31))))) || ((((0*32+28))>>5)==1 && (1UL<<(((0*32+28))&31) & ((1<<((1*32+29) & 31))|0))) || ((((0*32+28))>>5)==2 && (1UL<<(((0*32+28))&31) & 0)) || ((((0*32+28))>>5)==3 && (1UL<<(((0*32+28))&31) & ((1<<((3*32+20) & 31))))) || ((((0*32+28))>>5)==4 && (1UL<<(((0*32+28))&31) & (0))) || ((((0*32+28))>>5)==5 && (1UL<<(((0*32+28))&31) & 0)) || ((((0*32+28))>>5)==6 && (1UL<<(((0*32+28))&31) & 0)) || ((((0*32+28))>>5)==7 && (1UL<<(((0*32+28))&31) & 0)) || ((((0*32+28))>>5)==8 && (1UL<<(((0*32+28))&31) & 0)) || ((((0*32+28))>>5)==9 && (1UL<<(((0*32+28))&31) & 0)) ) ? 1 : (__builtin_constant_p(((0*32+28))) ? constant_test_bit(((0*32+28)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((0*32+28)), ((unsigned long *)((&boot_cpu_data)->x86_capability))))) && smp_num_siblings > 1;

 return has_siblings;
}

extern __attribute__((section(".data..percpu" "..readmostly"))) __typeof__(cpumask_var_t) cpu_sibling_map;
extern __attribute__((section(".data..percpu" "..readmostly"))) __typeof__(cpumask_var_t) cpu_core_map;

extern __attribute__((section(".data..percpu" "..readmostly"))) __typeof__(cpumask_var_t) cpu_llc_shared_map;
extern __attribute__((section(".data..percpu" "..readmostly"))) __typeof__(u16) cpu_llc_id;
extern __attribute__((section(".data..percpu" "..readmostly"))) __typeof__(int) cpu_number;


template <typename TResult, typename TThat, typename TTarget> struct TJP___per_cpu_offset_452_0 {
  typedef TJP___per_cpu_offset_452_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get___per_cpu_offset_452(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP___per_cpu_offset_452_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline struct cpumask *cpu_sibling_mask(int cpu)
{
 return (*({ do { void *__vpp_verify = (typeof(((&(cpu_sibling_map))) + 0))0; (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(cpu_sibling_map))) *)(&(cpu_sibling_map)))); (typeof((typeof(*(&(cpu_sibling_map))) *)(&(cpu_sibling_map)))) (__ptr + (((__get___per_cpu_offset_452(&__per_cpu_offset[cpu]))))); }); }));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP___per_cpu_offset_453_0 {
  typedef TJP___per_cpu_offset_453_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get___per_cpu_offset_453(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP___per_cpu_offset_453_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline struct cpumask *cpu_core_mask(int cpu)
{
 return (*({ do { void *__vpp_verify = (typeof(((&(cpu_core_map))) + 0))0; (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(cpu_core_map))) *)(&(cpu_core_map)))); (typeof((typeof(*(&(cpu_core_map))) *)(&(cpu_core_map)))) (__ptr + (((__get___per_cpu_offset_453(&__per_cpu_offset[cpu]))))); }); }));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP___per_cpu_offset_454_0 {
  typedef TJP___per_cpu_offset_454_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get___per_cpu_offset_454(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP___per_cpu_offset_454_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline struct cpumask *cpu_llc_shared_mask(int cpu)
{
 return (*({ do { void *__vpp_verify = (typeof(((&(cpu_llc_shared_map))) + 0))0; (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(cpu_llc_shared_map))) *)(&(cpu_llc_shared_map)))); (typeof((typeof(*(&(cpu_llc_shared_map))) *)(&(cpu_llc_shared_map)))) (__ptr + (((__get___per_cpu_offset_454(&__per_cpu_offset[cpu]))))); }); }));
}

extern __attribute__((section(".data..percpu" "..readmostly"))) __typeof__(u16) x86_cpu_to_apicid; extern __typeof__(u16) *x86_cpu_to_apicid_early_ptr; extern __typeof__(u16) x86_cpu_to_apicid_early_map[];
extern __attribute__((section(".data..percpu" "..readmostly"))) __typeof__(u16) x86_bios_cpu_apicid; extern __typeof__(u16) *x86_bios_cpu_apicid_early_ptr; extern __typeof__(u16) x86_bios_cpu_apicid_early_map[];





extern unsigned long stack_start;

struct task_struct;

struct smp_ops {
  template <typename, int = 0> struct __BYPASSsmp_ops {};
  template <typename, int> friend struct __BYPASSsmp_ops;
 void (*smp_prepare_boot_cpu)(void);
 void (*smp_prepare_cpus)(unsigned max_cpus);
 void (*smp_cpus_done)(unsigned max_cpus);

 void (*stop_other_cpus)(int wait);
 void (*smp_send_reschedule)(int cpu);

 int (*cpu_up)(unsigned cpu, struct task_struct *tidle);
 int (*cpu_disable)(void);
 void (*cpu_die)(unsigned int cpu);
 void (*play_dead)(void);

 void (*send_call_func_ipi)( struct cpumask *mask);
 void (*send_call_func_single_ipi)(int cpu);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern void set_cpu_sibling_map(int cpu);





extern struct smp_ops smp_ops;

static inline void smp_send_stop(void)
{
 smp_ops.stop_other_cpus(0);
}

static inline void stop_other_cpus(void)
{
 smp_ops.stop_other_cpus(1);
}

static inline void smp_prepare_boot_cpu(void)
{
 smp_ops.smp_prepare_boot_cpu();
}

static inline void smp_prepare_cpus(unsigned int max_cpus)
{
 smp_ops.smp_prepare_cpus(max_cpus);
}

static inline void smp_cpus_done(unsigned int max_cpus)
{
 smp_ops.smp_cpus_done(max_cpus);
}

static inline int __cpu_up(unsigned int cpu, struct task_struct *tidle)
{
 return smp_ops.cpu_up(cpu, tidle);
}

static inline int __cpu_disable(void)
{
 return smp_ops.cpu_disable();
}

static inline void __cpu_die(unsigned int cpu)
{
 smp_ops.cpu_die(cpu);
}

static inline void play_dead(void)
{
 smp_ops.play_dead();
}

static inline void smp_send_reschedule(int cpu)
{
 smp_ops.smp_send_reschedule(cpu);
}

static inline void arch_send_call_function_single_ipi(int cpu)
{
 smp_ops.send_call_func_single_ipi(cpu);
}

static inline void arch_send_call_function_ipi_mask( struct cpumask *mask)
{
 smp_ops.send_call_func_ipi(mask);
}

void cpu_disable_common(void);
void native_smp_prepare_boot_cpu(void);
void native_smp_prepare_cpus(unsigned int max_cpus);
void native_smp_cpus_done(unsigned int max_cpus);
int native_cpu_up(unsigned int cpunum, struct task_struct *tidle);
int native_cpu_disable(void);
void native_cpu_die(unsigned int cpu);
void native_play_dead(void);
void play_dead_common(void);
void wbinvd_on_cpu(int cpu);
int wbinvd_on_all_cpus(void);

void native_send_call_func_ipi( struct cpumask *mask);
void native_send_call_func_single_ipi(int cpu);
void x86_idle_thread_init(unsigned int cpu, struct task_struct *idle);

void smp_store_boot_cpu_info(void);
void smp_store_cpu_info(int id);
extern unsigned disabled_cpus;
extern int hard_smp_processor_id(void);

extern struct pglist_data *node_data[];



extern struct pglist_data *first_online_pgdat(void);
extern struct pglist_data *next_online_pgdat(struct pglist_data *pgdat);
extern struct zone *next_zone(struct zone *zone);
static inline struct zone *zonelist_zone(struct zoneref *zoneref)
{
 return zoneref->zone;
}

static inline int zonelist_zone_idx(struct zoneref *zoneref)
{
 return zoneref->zone_idx;
}

static inline int zonelist_node_idx(struct zoneref *zoneref)
{


 return zoneref->zone->node;



}
struct zoneref *next_zones_zonelist(struct zoneref *z,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes,
     struct zone **zone);
static inline struct zoneref *first_zones_zonelist(struct zonelist *zonelist,
     enum zone_type highest_zoneidx,
     nodemask_t *nodes,
     struct zone **zone)
{
 return next_zones_zonelist(zonelist->_zonerefs, highest_zoneidx, nodes,
        zone);
}
struct page;
struct page_cgroup;
struct mem_section {
  template <typename, int = 0> struct __BYPASSmem_section {};
  template <typename, int> friend struct __BYPASSmem_section;
 unsigned long section_mem_map;


 unsigned long *pageblock_flags;





 struct page_cgroup *page_cgroup;
 unsigned long pad;






  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct mem_section *mem_section[((((1UL << (46 - 27))) + ((((1UL) << 12) / sizeof (struct mem_section))) - 1) / ((((1UL) << 12) / sizeof (struct mem_section))))];




static inline struct mem_section *__nr_to_section(unsigned long nr)
{
 if (!mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))])
  return 0;
 return &mem_section[((nr) / (((1UL) << 12) / sizeof (struct mem_section)))][nr & ((((1UL) << 12) / sizeof (struct mem_section)) - 1)];
}
extern int __section_nr(struct mem_section* ms);
extern unsigned long usemap_size(void);
static inline struct page *__section_mem_map_addr(struct mem_section *section)
{
 unsigned long map = section->section_mem_map;
 map &= (~((1UL<<2)-1));
 return (struct page *)map;
}

static inline int present_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<0)));
}

static inline int present_section_nr(unsigned long nr)
{
 return present_section(__nr_to_section(nr));
}

static inline int valid_section(struct mem_section *section)
{
 return (section && (section->section_mem_map & (1UL<<1)));
}

static inline int valid_section_nr(unsigned long nr)
{
 return valid_section(__nr_to_section(nr));
}

static inline struct mem_section *__pfn_to_section(unsigned long pfn)
{
 return __nr_to_section(((pfn) >> (27 - 12)));
}


static inline int pfn_valid(unsigned long pfn)
{
 if (((pfn) >> (27 - 12)) >= (1UL << (46 - 27)))
  return 0;
 return valid_section(__nr_to_section(((pfn) >> (27 - 12))));
}


static inline int pfn_present(unsigned long pfn)
{
 if (((pfn) >> (27 - 12)) >= (1UL << (46 - 27)))
  return 0;
 return present_section(__nr_to_section(((pfn) >> (27 - 12))));
}
void sparse_init(void);






bool early_pfn_in_nid(unsigned long pfn, int nid);
void memory_present(int nid, unsigned long start, unsigned long end);
unsigned long __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) node_memmap_size_bytes(int, unsigned long, unsigned long);
static inline int memmap_valid_within(unsigned long pfn,
     struct page *page, struct zone *zone)
{
 return 1;
}


extern void cpu_idle(void);

typedef void (*smp_call_func_t)(void *info);
struct call_single_data {
  template <typename, int = 0> struct __BYPASScall_single_data {};
  template <typename, int> friend struct __BYPASScall_single_data;
 struct list_head list;
 smp_call_func_t func;
 void *info;
 u16 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern unsigned int total_cpus;

int smp_call_function_single(int cpuid, smp_call_func_t func, void *info,
        int wait);




int on_each_cpu(smp_call_func_t func, void *info, int wait);





void on_each_cpu_mask( struct cpumask *mask, smp_call_func_t func,
  void *info, bool wait);






void on_each_cpu_cond(bool (*cond_func)(int cpu, void *info),
  smp_call_func_t func, void *info, bool wait,
  gfp_t gfp_flags);

void __smp_call_function_single(int cpuid, struct call_single_data *data,
    int wait);
extern void smp_send_stop(void);




extern void smp_send_reschedule(int cpu);





extern void smp_prepare_cpus(unsigned int max_cpus);




extern int __cpu_up(unsigned int cpunum, struct task_struct *tidle);




extern void smp_cpus_done(unsigned int max_cpus);




int smp_call_function(smp_call_func_t func, void *info, int wait);
void smp_call_function_many( struct cpumask *mask,
       smp_call_func_t func, void *info, bool wait);

int smp_call_function_any( struct cpumask *mask,
     smp_call_func_t func, void *info, int wait);

void kick_all_cpus_sync(void);




void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) call_function_init(void);
void generic_smp_call_function_single_interrupt(void);







void smp_prepare_boot_cpu(void);

extern unsigned int setup_max_cpus;
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) setup_nr_cpu_ids(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) smp_init(void);
extern void arch_disable_smp_support(void);

void smp_setup_processor_id(void);






extern void *pcpu_base_addr;
extern unsigned long *pcpu_unit_offsets;

struct pcpu_group_info {
  template <typename, int = 0> struct __BYPASSpcpu_group_info {};
  template <typename, int> friend struct __BYPASSpcpu_group_info;
 int nr_units;
 unsigned long base_offset;
 unsigned int *cpu_map;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pcpu_alloc_info {
  template <typename, int = 0> struct __BYPASSpcpu_alloc_info {};
  template <typename, int> friend struct __BYPASSpcpu_alloc_info;
 size_t static_size;
 size_t reserved_size;
 size_t dyn_size;
 size_t unit_size;
 size_t atom_size;
 size_t alloc_size;
 size_t __ai_size;
 int nr_groups;
 struct pcpu_group_info groups[];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum pcpu_fc {
 PCPU_FC_AUTO,
 PCPU_FC_EMBED,
 PCPU_FC_PAGE,

 PCPU_FC_NR,
};
extern char * pcpu_fc_names[PCPU_FC_NR];

extern enum pcpu_fc pcpu_chosen_fc;

typedef void * (*pcpu_fc_alloc_fn_t)(unsigned int cpu, size_t size,
         size_t align);
typedef void (*pcpu_fc_free_fn_t)(void *ptr, size_t size);
typedef void (*pcpu_fc_populate_pte_fn_t)(unsigned long addr);
typedef int (pcpu_fc_cpu_distance_fn_t)(unsigned int from, unsigned int to);

extern struct pcpu_alloc_info * __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pcpu_alloc_alloc_info(int nr_groups,
            int nr_units);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pcpu_free_alloc_info(struct pcpu_alloc_info *ai);

extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pcpu_setup_first_chunk( struct pcpu_alloc_info *ai,
      void *base_addr);


extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,
    size_t atom_size,
    pcpu_fc_cpu_distance_fn_t cpu_distance_fn,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn);



extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pcpu_page_first_chunk(size_t reserved_size,
    pcpu_fc_alloc_fn_t alloc_fn,
    pcpu_fc_free_fn_t free_fn,
    pcpu_fc_populate_pte_fn_t populate_pte_fn);
extern void *__alloc_reserved_percpu(size_t size, size_t align);
extern bool is_kernel_percpu_address(unsigned long addr);




extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) percpu_init_late(void);

extern void *__alloc_percpu(size_t size, size_t align);
extern void free_percpu(void *__pdata);
extern phys_addr_t per_cpu_ptr_to_phys(void *addr);
extern void __bad_size_call_parameter(void);
int arch_update_cpu_topology(void);
extern __attribute__((section(".data..percpu" ""))) __typeof__(int) numa_node;



static inline int numa_node_id(void)
{
 return ({ typeof((numa_node)) pscr_ret__; do { void *__vpp_verify = (typeof((&((numa_node))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((numa_node))) { case 1: pscr_ret__ = ({ typeof(((numa_node))) pfo_ret__; switch (sizeof(((numa_node)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((numa_node))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 2: pscr_ret__ = ({ typeof(((numa_node))) pfo_ret__; switch (sizeof(((numa_node)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((numa_node))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 4: pscr_ret__ = ({ typeof(((numa_node))) pfo_ret__; switch (sizeof(((numa_node)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((numa_node))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 8: pscr_ret__ = ({ typeof(((numa_node))) pfo_ret__; switch (sizeof(((numa_node)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((numa_node))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((numa_node))); break; default: __bad_percpu_size(); } pfo_ret__; });break; default: __bad_size_call_parameter();break; } pscr_ret__; });
}




template <typename TResult, typename TThat, typename TTarget> struct TJP___per_cpu_offset_490_0 {
  typedef TJP___per_cpu_offset_490_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get___per_cpu_offset_490(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP___per_cpu_offset_490_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int cpu_to_node(int cpu)
{
 return (*({ do { void *__vpp_verify = (typeof(((&(numa_node))) + 0))0; (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(numa_node))) *)(&(numa_node)))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + (((__get___per_cpu_offset_490(&__per_cpu_offset[cpu]))))); }); }));
}



static inline void set_numa_node(int node)
{
 do { do { void *__vpp_verify = (typeof((&((numa_node))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((numa_node))) { case 1: do { typedef typeof(((numa_node))) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = ((node)); (void)pto_tmp__; } switch (sizeof(((numa_node)))) { case 1: asm("mov" "b %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "qi" ((pto_T__)((node)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "ri" ((pto_T__)((node)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "ri" ((pto_T__)((node)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "re" ((pto_T__)((node)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof(((numa_node))) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = ((node)); (void)pto_tmp__; } switch (sizeof(((numa_node)))) { case 1: asm("mov" "b %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "qi" ((pto_T__)((node)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "ri" ((pto_T__)((node)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "ri" ((pto_T__)((node)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "re" ((pto_T__)((node)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof(((numa_node))) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = ((node)); (void)pto_tmp__; } switch (sizeof(((numa_node)))) { case 1: asm("mov" "b %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "qi" ((pto_T__)((node)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "ri" ((pto_T__)((node)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "ri" ((pto_T__)((node)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "re" ((pto_T__)((node)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof(((numa_node))) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = ((node)); (void)pto_tmp__; } switch (sizeof(((numa_node)))) { case 1: asm("mov" "b %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "qi" ((pto_T__)((node)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "ri" ((pto_T__)((node)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "ri" ((pto_T__)((node)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%P" "0" : "+m" (((numa_node))) : "re" ((pto_T__)((node)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}



static inline void set_cpu_numa_node(int cpu, int node)
{
 (*({ do { void *__vpp_verify = (typeof(((&(numa_node))) + 0))0; (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*(&(numa_node))) *)(&(numa_node)))); (typeof((typeof(*(&(numa_node))) *)(&(numa_node)))) (__ptr + (((__per_cpu_offset[cpu])))); }); })) = node;
}
static inline int numa_mem_id(void)
{
 return numa_node_id();
}



static inline int cpu_to_mem(int cpu)
{
 return cpu_to_node(cpu);
}


struct vm_area_struct;
static inline int allocflags_to_migratetype(gfp_t gfp_flags)
{
 ((gfp_flags & ((( gfp_t)0x80000u)|(( gfp_t)0x08u))) == ((( gfp_t)0x80000u)|(( gfp_t)0x08u)));

 if (__builtin_expect(!!(page_group_by_mobility_disabled), 0))
  return MIGRATE_UNMOVABLE;


 return (((gfp_flags & (( gfp_t)0x08u)) != 0) << 1) |
  ((gfp_flags & (( gfp_t)0x80000u)) != 0);
}
static inline enum zone_type gfp_zone(gfp_t flags)
{
 enum zone_type z;
 int bit = ( int) (flags & ((( gfp_t)0x01u)|(( gfp_t)0x02u)|(( gfp_t)0x04u)|(( gfp_t)0x08u)));

 z = (( (ZONE_NORMAL << 0 * 2) | (ZONE_DMA << 0x01u * 2) | (ZONE_NORMAL << 0x02u * 2) | (ZONE_DMA32 << 0x04u * 2) | (ZONE_NORMAL << 0x08u * 2) | (ZONE_DMA << (0x08u | 0x01u) * 2) | (ZONE_MOVABLE << (0x08u | 0x02u) * 2) | (ZONE_DMA32 << (0x08u | 0x04u) * 2) ) >> (bit * 2)) &
      ((1 << 2) - 1);
 (0);
 return z;
}
static inline int gfp_zonelist(gfp_t flags)
{
 if ((1 || 0) && __builtin_expect(!!(flags & (( gfp_t)0x40000u)), 0))
  return 1;

 return 0;
}
static inline struct zonelist *node_zonelist(int nid, gfp_t flags)
{
 return (node_data[nid])->node_zonelists + gfp_zonelist(flags);
}


static inline void arch_free_page(struct page *page, int order) { }


static inline void arch_alloc_page(struct page *page, int order) { }


struct page *
__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order,
         struct zonelist *zonelist, nodemask_t *nodemask);

static inline struct page *
__alloc_pages(gfp_t gfp_mask, unsigned int order,
  struct zonelist *zonelist)
{
 return __alloc_pages_nodemask(gfp_mask, order, zonelist, 0);
}

static inline struct page *alloc_pages_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{

 if (nid < 0)
  nid = numa_node_id();

 return __alloc_pages(gfp_mask, order, node_zonelist(nid, gfp_mask));
}

static inline struct page *alloc_pages_exact_node(int nid, gfp_t gfp_mask,
      unsigned int order)
{
 (0);

 return __alloc_pages(gfp_mask, order, node_zonelist(nid, gfp_mask));
}


extern struct page *alloc_pages_current(gfp_t gfp_mask, unsigned order);

static inline struct page *
alloc_pages(gfp_t gfp_mask, unsigned int order)
{
 return alloc_pages_current(gfp_mask, order);
}
extern struct page *alloc_pages_vma(gfp_t gfp_mask, int order,
   struct vm_area_struct *vma, unsigned long addr,
   int node);
extern unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order);
extern unsigned long get_zeroed_page(gfp_t gfp_mask);

void *alloc_pages_exact(size_t size, gfp_t gfp_mask);
void free_pages_exact(void *virt, size_t size);

void *alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask);







extern void __free_pages(struct page *page, unsigned int order);
extern void free_pages(unsigned long addr, unsigned int order);
extern void free_hot_cold_page(struct page *page, int cold);
extern void free_hot_cold_page_list(struct list_head *list, int cold);

extern void __free_memcg_kmem_pages(struct page *page, unsigned int order);
extern void free_memcg_kmem_pages(unsigned long addr, unsigned int order);




void page_alloc_init(void);
void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp);
void drain_all_pages(void);
void drain_local_pages(void *dummy);
extern gfp_t gfp_allowed_mask;


bool gfp_pfmemalloc_allowed(gfp_t gfp_mask);

extern void pm_restrict_gfp_mask(void);
extern void pm_restore_gfp_mask(void);


extern bool pm_suspended_storage(void);
extern int alloc_contig_range(unsigned long start, unsigned long end,
         unsigned migratetype);
extern void free_contig_range(unsigned long pfn, unsigned nr_pages);


extern void init_cma_reserved_pageblock(struct page *page);












struct task_struct;

extern int debug_locks;
extern int debug_locks_silent;


static inline int __debug_locks_off(void)
{
 return ({ __typeof__ (*((&debug_locks))) __ret = ((0)); switch (sizeof(*((&debug_locks)))) { case 1: asm ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&debug_locks))) : : "memory", "cc"); break; case 2: asm ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&debug_locks))) : : "memory", "cc"); break; case 4: asm ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&debug_locks))) : : "memory", "cc"); break; case 8: asm ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&debug_locks))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}




extern int debug_locks_off(void);
struct task_struct;







static inline void debug_show_all_locks(void)
{
}

static inline void debug_show_held_locks(struct task_struct *task)
{
}

static inline void
debug_check_no_locks_freed( void *from, unsigned long len)
{
}

static inline void
debug_check_no_locks_held(void)
{
}









enum page_debug_flags {
 PAGE_DEBUG_FLAG_POISON,
 PAGE_DEBUG_FLAG_GUARD,
};
struct vm_area_struct;
struct mm_struct;
struct inode;
struct notifier_block;


typedef u8 uprobe_opcode_t;







struct arch_uprobe {
  template <typename, int = 0> struct __BYPASSarch_uprobe {};
  template <typename, int> friend struct __BYPASSarch_uprobe;
 u16 fixups;
 union {
  u8 insn[16];
  u8 ixol[16];
 };

 unsigned long rip_rela_target_address;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct arch_uprobe_task {
  template <typename, int = 0> struct __BYPASSarch_uprobe_task {};
  template <typename, int> friend struct __BYPASSarch_uprobe_task;

 unsigned long saved_scratch_register;

 unsigned int saved_trap_nr;
 unsigned int saved_tf;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







enum uprobe_filter_ctx {
 UPROBE_FILTER_REGISTER,
 UPROBE_FILTER_UNREGISTER,
 UPROBE_FILTER_MMAP,
};

struct uprobe_consumer {
  template <typename, int = 0> struct __BYPASSuprobe_consumer {};
  template <typename, int> friend struct __BYPASSuprobe_consumer;
 int (*handler)(struct uprobe_consumer *self, struct pt_regs *regs);
 int (*ret_handler)(struct uprobe_consumer *self,
    unsigned long func,
    struct pt_regs *regs);
 bool (*filter)(struct uprobe_consumer *self,
    enum uprobe_filter_ctx ctx,
    struct mm_struct *mm);

 struct uprobe_consumer *next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum uprobe_task_state {
 UTASK_RUNNING,
 UTASK_SSTEP,
 UTASK_SSTEP_ACK,
 UTASK_SSTEP_TRAPPED,
};




struct uprobe_task {
  template <typename, int = 0> struct __BYPASSuprobe_task {};
  template <typename, int> friend struct __BYPASSuprobe_task;
 enum uprobe_task_state state;
 struct arch_uprobe_task autask;

 struct return_instance *return_instances;
 unsigned int depth;
 struct uprobe *active_uprobe;

 unsigned long xol_vaddr;
 unsigned long vaddr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct xol_area {
  template <typename, int = 0> struct __BYPASSxol_area {};
  template <typename, int> friend struct __BYPASSxol_area;
 wait_queue_head_t wq;
 atomic_t slot_count;
 unsigned long *bitmap;
 struct page *page;






 unsigned long vaddr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct uprobes_state {
  template <typename, int = 0> struct __BYPASSuprobes_state {};
  template <typename, int> friend struct __BYPASSuprobes_state;
 struct xol_area *xol_area;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int __attribute__((weak)) set_swbp(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern int __attribute__((weak)) set_orig_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long vaddr);
extern bool __attribute__((weak)) is_swbp_insn(uprobe_opcode_t *insn);
extern bool __attribute__((weak)) is_trap_insn(uprobe_opcode_t *insn);
extern int uprobe_write_opcode(struct mm_struct *mm, unsigned long vaddr, uprobe_opcode_t);
extern int uprobe_register(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_apply(struct inode *inode, loff_t offset, struct uprobe_consumer *uc, bool);
extern void uprobe_unregister(struct inode *inode, loff_t offset, struct uprobe_consumer *uc);
extern int uprobe_mmap(struct vm_area_struct *vma);
extern void uprobe_munmap(struct vm_area_struct *vma, unsigned long start, unsigned long end);
extern void uprobe_start_dup_mmap(void);
extern void uprobe_end_dup_mmap(void);
extern void uprobe_dup_mmap(struct mm_struct *oldmm, struct mm_struct *newmm);
extern void uprobe_free_utask(struct task_struct *t);
extern void uprobe_copy_process(struct task_struct *t, unsigned long flags);
extern unsigned long __attribute__((weak)) uprobe_get_swbp_addr(struct pt_regs *regs);
extern int uprobe_post_sstep_notifier(struct pt_regs *regs);
extern int uprobe_pre_sstep_notifier(struct pt_regs *regs);
extern void uprobe_notify_resume(struct pt_regs *regs);
extern bool uprobe_deny_signal(void);
extern bool arch_uprobe_skip_sstep(struct arch_uprobe *aup, struct pt_regs *regs);
extern void uprobe_clear_state(struct mm_struct *mm);
extern int arch_uprobe_analyze_insn(struct arch_uprobe *aup, struct mm_struct *mm, unsigned long addr);
extern int arch_uprobe_pre_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern int arch_uprobe_post_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern bool arch_uprobe_xol_was_trapped(struct task_struct *tsk);
extern int arch_uprobe_exception_notify(struct notifier_block *self, unsigned long val, void *data);
extern void arch_uprobe_abort_xol(struct arch_uprobe *aup, struct pt_regs *regs);
extern unsigned long arch_uretprobe_hijack_return_addr(unsigned long trampoline_vaddr, struct pt_regs *regs);
struct address_space;
struct page {
  template <typename, int = 0> struct __BYPASSpage {};
  template <typename, int> friend struct __BYPASSpage;

 unsigned long flags;

 union {
  struct address_space *mapping;






  void *s_mem;
 };


 struct {
  union {
   unsigned long index;
   void *freelist;
   bool pfmemalloc;
  };

  union {



   unsigned long counters;
   struct {

    union {
     atomic_t _mapcount;

     struct {
      unsigned inuse:16;
      unsigned objects:15;
      unsigned frozen:1;
     
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
     int units;
    };
    atomic_t _count;
   
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
   unsigned int active;
  };
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
};


 union {
  struct list_head lru;


  struct {
   struct page *next;

   int pages;
   int pobjects;




  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};

  struct list_head list;
  struct slab *slab_page;
  struct callback_head callback_head;



  pgtable_t pmd_huge_pte;

 };


 union {
  unsigned long _private;
  spinlock_t ptl;


  struct kmem_cache *slab_cache;
  struct page *first_page;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
}





 __attribute__((aligned(2 * sizeof(unsigned long))))

;

struct page_frag {
  template <typename, int = 0> struct __BYPASSpage_frag {};
  template <typename, int> friend struct __BYPASSpage_frag;
 struct page *page;

 __u32 offset;
 __u32 size;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef unsigned long vm_flags_t;






struct vm_region {
  template <typename, int = 0> struct __BYPASSvm_region {};
  template <typename, int> friend struct __BYPASSvm_region;
 struct rb_node vm_rb;
 vm_flags_t vm_flags;
 unsigned long vm_start;
 unsigned long vm_end;
 unsigned long vm_top;
 unsigned long vm_pgoff;
 struct file *vm_file;
 struct file *vm_prfile;

 int vm_usage;
 bool vm_icache_flushed : 1;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct vm_area_struct {
  template <typename, int = 0> struct __BYPASSvm_area_struct {};
  template <typename, int> friend struct __BYPASSvm_area_struct;


 unsigned long vm_start;
 unsigned long vm_end;



 struct vm_area_struct *vm_next, *vm_prev;

 struct rb_node vm_rb;







 unsigned long rb_subtree_gap;



 struct mm_struct *vm_mm;
 pgprot_t vm_page_prot;
 unsigned long vm_flags;






 union {
  struct {
   struct rb_node rb;
   unsigned long rb_subtree_last;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} linear;
  struct list_head nonlinear;
 } shared;







 struct list_head anon_vma_chain;

 struct anon_vma *anon_vma;


 struct vm_operations_struct *vm_ops;


 unsigned long vm_pgoff;

 struct file * vm_file;
 struct file *vm_prfile;
 void * vm_private_data;





 struct mempolicy *vm_policy;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct core_thread {
  template <typename, int = 0> struct __BYPASScore_thread {};
  template <typename, int> friend struct __BYPASScore_thread;
 struct task_struct *task;
 struct core_thread *next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct core_state {
  template <typename, int = 0> struct __BYPASScore_state {};
  template <typename, int> friend struct __BYPASScore_state;
 atomic_t nr_threads;
 struct core_thread dumper;
 struct completion startup;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 MM_FILEPAGES,
 MM_ANONPAGES,
 MM_SWAPENTS,
 NR_MM_COUNTERS
};




struct task_rss_stat {
  template <typename, int = 0> struct __BYPASStask_rss_stat {};
  template <typename, int> friend struct __BYPASStask_rss_stat;
 int events;
 int count[NR_MM_COUNTERS];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct mm_rss_stat {
  template <typename, int = 0> struct __BYPASSmm_rss_stat {};
  template <typename, int> friend struct __BYPASSmm_rss_stat;
 atomic_long_t count[NR_MM_COUNTERS];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kioctx_table;
struct mm_struct {
  template <typename, int = 0> struct __BYPASSmm_struct {};
  template <typename, int> friend struct __BYPASSmm_struct;
 struct vm_area_struct * mmap;
 struct rb_root mm_rb;
 struct vm_area_struct * mmap_cache;

 unsigned long (*get_unmapped_area) (struct file *filp,
    unsigned long addr, unsigned long len,
    unsigned long pgoff, unsigned long flags);

 unsigned long mmap_base;
 unsigned long mmap_legacy_base;
 unsigned long task_size;
 unsigned long highest_vm_end;
 pgd_t * pgd;
 atomic_t mm_users;
 atomic_t mm_count;
 atomic_long_t nr_ptes;
 int map_count;

 spinlock_t page_table_lock;
 struct rw_semaphore mmap_sem;

 struct list_head mmlist;





 unsigned long hiwater_rss;
 unsigned long hiwater_vm;

 unsigned long total_vm;
 unsigned long locked_vm;
 unsigned long pinned_vm;
 unsigned long shared_vm;
 unsigned long exec_vm;
 unsigned long stack_vm;
 unsigned long def_flags;
 unsigned long start_code, end_code, start_data, end_data;
 unsigned long start_brk, brk, start_stack;
 unsigned long arg_start, arg_end, env_start, env_end;

 unsigned long saved_auxv[(2*(2 + 20 + 1))];





 struct mm_rss_stat rss_stat;

 struct linux_binfmt *binfmt;

 cpumask_var_t cpu_vm_mask_var;


 mm_context_t context;

 unsigned long flags;

 struct core_state *core_state;

 spinlock_t ioctx_lock;
 struct kioctx_table *ioctx_table;
 struct task_struct *owner;



 struct file *exe_file;

 struct mmu_notifier_mm *mmu_notifier_mm;
 unsigned long numa_next_scan;


 unsigned long numa_scan_offset;


 int numa_scan_seq;







 bool tlb_flush_pending;

 struct uprobes_state uprobes_state;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void mm_init_cpumask(struct mm_struct *mm)
{



}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct15cpu_vm_mask_varE_503_0 {
  typedef TJP__ZN9mm_struct15cpu_vm_mask_varE_503_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return sizeof(cpumask);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cpumask * __get__ZN9mm_struct15cpu_vm_mask_varE_503(cpumask *source) {
  ::cpumask *__result_buffer;
  typedef TJP__ZN9mm_struct15cpu_vm_mask_varE_503_0< ::cpumask *, ::mm_struct , ::cpumask_var_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cpumask *&)__result_buffer;
}
static inline cpumask_t *mm_cpumask(struct mm_struct *mm)
{
 return __get__ZN9mm_struct15cpu_vm_mask_varE_503(mm->cpu_vm_mask_var);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct17tlb_flush_pendingE_504_0 {
  typedef TJP__ZN9mm_struct17tlb_flush_pendingE_504_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline bool __get__ZN9mm_struct17tlb_flush_pendingE_504(bool *source) {
  bool __result_buffer;
  typedef TJP__ZN9mm_struct17tlb_flush_pendingE_504_0< bool , ::mm_struct , bool  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (bool &)__result_buffer;
}
static inline bool mm_tlb_flush_pending(struct mm_struct *mm)
{
 __asm__ __volatile__("": : :"memory");
 return __get__ZN9mm_struct17tlb_flush_pendingE_504(&mm->tlb_flush_pending);
}
static inline void set_tlb_flush_pending(struct mm_struct *mm)
{
 mm->tlb_flush_pending = _true;





 ;
}

static inline void clear_tlb_flush_pending(struct mm_struct *mm)
{
 __asm__ __volatile__("": : :"memory");
 mm->tlb_flush_pending = _false;
}


static inline void bit_spin_lock(int bitnum, unsigned long *addr)
{







 __asm__ __volatile__("": : :"memory");

 while (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  __asm__ __volatile__("": : :"memory");
  do {
   cpu_relax();
  } while ((__builtin_constant_p((bitnum)) ? constant_test_bit((bitnum), (addr)) : variable_test_bit((bitnum), (addr))));
  __asm__ __volatile__("": : :"memory");
 }

 (void)0;
}




static inline int bit_spin_trylock(int bitnum, unsigned long *addr)
{
 __asm__ __volatile__("": : :"memory");

 if (__builtin_expect(!!(test_and_set_bit_lock(bitnum, addr)), 0)) {
  __asm__ __volatile__("": : :"memory");
  return 0;
 }

 (void)0;
 return 1;
}




static inline void bit_spin_unlock(int bitnum, unsigned long *addr)
{




 clear_bit_unlock(bitnum, addr);

 __asm__ __volatile__("": : :"memory");
 (void)0;
}






static inline void __bit_spin_unlock(int bitnum, unsigned long *addr)
{




 __clear_bit_unlock(bitnum, addr);

 __asm__ __volatile__("": : :"memory");
 (void)0;
}




static inline int bit_spin_is_locked(int bitnum, unsigned long *addr)
{

 return (__builtin_constant_p((bitnum)) ? constant_test_bit((bitnum), (addr)) : variable_test_bit((bitnum), (addr)));





}
struct shrink_control {
  template <typename, int = 0> struct __BYPASSshrink_control {};
  template <typename, int> friend struct __BYPASSshrink_control;
 gfp_t gfp_mask;






 unsigned long nr_to_scan;


 nodemask_t nodes_to_scan;

 int nid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct shrinker {
  template <typename, int = 0> struct __BYPASSshrinker {};
  template <typename, int> friend struct __BYPASSshrinker;
 unsigned long (*count_objects)(struct shrinker *,
           struct shrink_control *sc);
 unsigned long (*scan_objects)(struct shrinker *,
          struct shrink_control *sc);

 int seeks;
 long batch;
 unsigned long flags;


 struct list_head list;

 atomic_long_t *nr_deferred;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern int register_shrinker(struct shrinker *);
extern void unregister_shrinker(struct shrinker *);





static inline void INIT_LIST_HEAD_RCU(struct list_head *list)
{
 (list->next) = list;
 (list->prev) = list;
}
static inline void __list_add_rcu(struct list_head *_new,
  struct list_head *prev, struct list_head *next)
{
 _new->next = next;
 _new->prev = prev;
 ({ ((*((struct list_head **)(&(prev)->next)))) = (_new); });
 next->prev = _new;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_507_0 {
  typedef TJP__ZN9list_head4nextE_507_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_507(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_507_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_add_rcu(struct list_head *_new, struct list_head *head)
{
 __list_add_rcu(_new, head, __get__ZN9list_head4nextE_507(&head->next));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_508_0 {
  typedef TJP__ZN9list_head4prevE_508_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_508(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_508_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_add_tail_rcu(struct list_head *_new,
     struct list_head *head)
{
 __list_add_rcu(_new, __get__ZN9list_head4prevE_508(&head->prev), head);
}
static inline void list_del_rcu(struct list_head *entry)
{
 __list_del_entry(entry);
 entry->prev = ((void *) 0x00200200 + (0xdead000000000000UL));
}
static inline void hlist_del_init_rcu(struct hlist_node *n)
{
 if (!hlist_unhashed(n)) {
  __hlist_del(n);
  n->pprev = 0;
 }
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_509_0 {
  typedef TJP__ZN9list_head4nextE_509_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_509(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_509_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_510_0 {
  typedef TJP__ZN9list_head4prevE_510_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_510(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_510_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_replace_rcu(struct list_head *old,
    struct list_head *_new)
{
 _new->next = __get__ZN9list_head4nextE_509(&old->next);
 _new->prev = __get__ZN9list_head4prevE_510(&old->prev);
 ({ ((*((struct list_head **)(&(_new->prev)->next)))) = (_new); });
 _new->next->prev = _new;
 old->prev = ((void *) 0x00200200 + (0xdead000000000000UL));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_511_0 {
  typedef TJP__ZN9list_head4nextE_511_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_511(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_511_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_512_0 {
  typedef TJP__ZN9list_head4prevE_512_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_512(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_512_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_513_0 {
  typedef TJP__ZN9list_head4nextE_513_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_513(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_513_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void list_splice_init_rcu(struct list_head *list,
     struct list_head *head,
     void (*sync)(void))
{
 struct list_head *first = __get__ZN9list_head4nextE_511(&list->next);
 struct list_head *last = __get__ZN9list_head4prevE_512(&list->prev);
 struct list_head *at = __get__ZN9list_head4nextE_513(&head->next);

 if (list_empty(list))
  return;







 INIT_LIST_HEAD_RCU(list);
 sync();
 last->next = at;
 ({ ((*((struct list_head **)(&(head)->next)))) = (first); });
 first->prev = head;
 at->prev = last;
}
static inline void hlist_del_rcu(struct hlist_node *n)
{
 __hlist_del(n);
 n->pprev = ((void *) 0x00200200 + (0xdead000000000000UL));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_514_0 {
  typedef TJP__ZN10hlist_node4nextE_514_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_514(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_514_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node5pprevE_515_0 {
  typedef TJP__ZN10hlist_node5pprevE_515_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node ** __get__ZN10hlist_node5pprevE_515(hlist_node ** *source) {
  ::hlist_node **__result_buffer;
  typedef TJP__ZN10hlist_node5pprevE_515_0< ::hlist_node **, ::hlist_node , ::hlist_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node **&)__result_buffer;
}
static inline void hlist_replace_rcu(struct hlist_node *old,
     struct hlist_node *_new)
{
 struct hlist_node *next = __get__ZN10hlist_node4nextE_514(&old->next);

 _new->next = next;
 _new->pprev = __get__ZN10hlist_node5pprevE_515(&old->pprev);
 ({ (*(struct hlist_node **)_new->pprev) = (_new); });
 if (next)
  _new->next->pprev = &_new->next;
 old->pprev = ((void *) 0x00200200 + (0xdead000000000000UL));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_516_0 {
  typedef TJP__ZN10hlist_head5firstE_516_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_516(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_516_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline void hlist_add_head_rcu(struct hlist_node *n,
     struct hlist_head *h)
{
 struct hlist_node *first = __get__ZN10hlist_head5firstE_516(&h->first);

 n->next = first;
 n->pprev = &h->first;
 ({ (((h)->first)) = (n); });
 if (first)
  first->pprev = &n->next;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node5pprevE_517_0 {
  typedef TJP__ZN10hlist_node5pprevE_517_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node ** __get__ZN10hlist_node5pprevE_517(hlist_node ** *source) {
  ::hlist_node **__result_buffer;
  typedef TJP__ZN10hlist_node5pprevE_517_0< ::hlist_node **, ::hlist_node , ::hlist_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node **&)__result_buffer;
}
static inline void hlist_add_before_rcu(struct hlist_node *n,
     struct hlist_node *next)
{
 n->pprev = __get__ZN10hlist_node5pprevE_517(&next->pprev);
 n->next = next;
 ({ ((*((n)->pprev))) = (n); });
 next->pprev = &n->next;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_518_0 {
  typedef TJP__ZN10hlist_node4nextE_518_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_518(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_518_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_519_0 {
  typedef TJP__ZN10hlist_node4nextE_519_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_519(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_519_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline void hlist_add_after_rcu(struct hlist_node *prev,
           struct hlist_node *n)
{
 n->next = __get__ZN10hlist_node4nextE_518(&prev->next);
 n->pprev = &prev->next;
 ({ (((prev)->next)) = (n); });
 if (__get__ZN10hlist_node4nextE_519(&n->next))
  n->next->pprev = &n->next;
}






struct hlist_bl_head {
  template <typename, int = 0> struct __BYPASShlist_bl_head {};
  template <typename, int> friend struct __BYPASShlist_bl_head;
 struct hlist_bl_node *first;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct hlist_bl_node {
  template <typename, int = 0> struct __BYPASShlist_bl_node {};
  template <typename, int> friend struct __BYPASShlist_bl_node;
 struct hlist_bl_node *next, **pprev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



static inline void INIT_HLIST_BL_NODE(struct hlist_bl_node *h)
{
 h->next = 0;
 h->pprev = 0;
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13hlist_bl_node5pprevE_520_0 {
  typedef TJP__ZN13hlist_bl_node5pprevE_520_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_bl_node ** __get__ZN13hlist_bl_node5pprevE_520(hlist_bl_node ** *source) {
  ::hlist_bl_node **__result_buffer;
  typedef TJP__ZN13hlist_bl_node5pprevE_520_0< ::hlist_bl_node **, ::hlist_bl_node , ::hlist_bl_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_bl_node **&)__result_buffer;
}
static inline int hlist_bl_unhashed( struct hlist_bl_node *h)
{
 return !__get__ZN13hlist_bl_node5pprevE_520(&h->pprev);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13hlist_bl_head5firstE_521_0 {
  typedef TJP__ZN13hlist_bl_head5firstE_521_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_bl_node * __get__ZN13hlist_bl_head5firstE_521(hlist_bl_node * *source) {
  ::hlist_bl_node *__result_buffer;
  typedef TJP__ZN13hlist_bl_head5firstE_521_0< ::hlist_bl_node *, ::hlist_bl_head , ::hlist_bl_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_bl_node *&)__result_buffer;
}
static inline struct hlist_bl_node *hlist_bl_first(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)__get__ZN13hlist_bl_head5firstE_521(&h->first) & ~1UL);
}

static inline void hlist_bl_set_first(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 ;

                        ;
 h->first = (struct hlist_bl_node *)((unsigned long)n | 1UL);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13hlist_bl_head5firstE_522_0 {
  typedef TJP__ZN13hlist_bl_head5firstE_522_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_bl_node * __get__ZN13hlist_bl_head5firstE_522(hlist_bl_node * *source) {
  ::hlist_bl_node *__result_buffer;
  typedef TJP__ZN13hlist_bl_head5firstE_522_0< ::hlist_bl_node *, ::hlist_bl_head , ::hlist_bl_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_bl_node *&)__result_buffer;
}
static inline int hlist_bl_empty( struct hlist_bl_head *h)
{
 return !((unsigned long)__get__ZN13hlist_bl_head5firstE_522(&h->first) & ~1UL);
}

static inline void hlist_bl_add_head(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;
 hlist_bl_set_first(h, n);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13hlist_bl_node4nextE_523_0 {
  typedef TJP__ZN13hlist_bl_node4nextE_523_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_bl_node * __get__ZN13hlist_bl_node4nextE_523(hlist_bl_node * *source) {
  ::hlist_bl_node *__result_buffer;
  typedef TJP__ZN13hlist_bl_node4nextE_523_0< ::hlist_bl_node *, ::hlist_bl_node , ::hlist_bl_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_bl_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13hlist_bl_node5pprevE_524_0 {
  typedef TJP__ZN13hlist_bl_node5pprevE_524_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_bl_node ** __get__ZN13hlist_bl_node5pprevE_524(hlist_bl_node ** *source) {
  ::hlist_bl_node **__result_buffer;
  typedef TJP__ZN13hlist_bl_node5pprevE_524_0< ::hlist_bl_node **, ::hlist_bl_node , ::hlist_bl_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_bl_node **&)__result_buffer;
}
static inline void __hlist_bl_del(struct hlist_bl_node *n)
{
 struct hlist_bl_node *next = __get__ZN13hlist_bl_node4nextE_523(&n->next);
 struct hlist_bl_node **pprev = __get__ZN13hlist_bl_node5pprevE_524(&n->pprev);

 ;


 *pprev = (struct hlist_bl_node *)
   ((unsigned long)next |
    ((unsigned long)*pprev & 1UL));
 if (next)
  next->pprev = pprev;
}

static inline void hlist_bl_del(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->next = ((void *) 0x00100100 + (0xdead000000000000UL));
 n->pprev = ((void *) 0x00200200 + (0xdead000000000000UL));
}

static inline void hlist_bl_del_init(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  INIT_HLIST_BL_NODE(n);
 }
}

static inline void hlist_bl_lock(struct hlist_bl_head *b)
{
 bit_spin_lock(0, (unsigned long *)b);
}

static inline void hlist_bl_unlock(struct hlist_bl_head *b)
{
 __bit_spin_unlock(0, (unsigned long *)b);
}

static inline bool hlist_bl_is_locked(struct hlist_bl_head *b)
{
 return bit_spin_is_locked(0, (unsigned long *)b);
}


static inline void hlist_bl_set_first_rcu(struct hlist_bl_head *h,
     struct hlist_bl_node *n)
{
 ;

                        ;
 ({ (h->first) = ((struct hlist_bl_node *)((unsigned long)n | 1UL)); })
                                                                ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13hlist_bl_head5firstE_525_0 {
  typedef TJP__ZN13hlist_bl_head5firstE_525_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_bl_node * __get__ZN13hlist_bl_head5firstE_525(hlist_bl_node * *source) {
  ::hlist_bl_node *__result_buffer;
  typedef TJP__ZN13hlist_bl_head5firstE_525_0< ::hlist_bl_node *, ::hlist_bl_head , ::hlist_bl_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_bl_node *&)__result_buffer;
}
static inline struct hlist_bl_node *hlist_bl_first_rcu(struct hlist_bl_head *h)
{
 return (struct hlist_bl_node *)
  ((unsigned long)(__get__ZN13hlist_bl_head5firstE_525(&h->first)) & ~1UL);
}
static inline void hlist_bl_del_init_rcu(struct hlist_bl_node *n)
{
 if (!hlist_bl_unhashed(n)) {
  __hlist_bl_del(n);
  n->pprev = 0;
 }
}
static inline void hlist_bl_del_rcu(struct hlist_bl_node *n)
{
 __hlist_bl_del(n);
 n->pprev = ((void *) 0x00200200 + (0xdead000000000000UL));
}
static inline void hlist_bl_add_head_rcu(struct hlist_bl_node *n,
     struct hlist_bl_head *h)
{
 struct hlist_bl_node *first;


 first = hlist_bl_first(h);

 n->next = first;
 if (first)
  first->pprev = &n->next;
 n->pprev = &h->first;


 hlist_bl_set_first_rcu(h, n);
}




struct lockref {
  template <typename, int = 0> struct __BYPASSlockref {};
  template <typename, int> friend struct __BYPASSlockref;
 union {

  __u64 __attribute__((aligned(8))) lock_count;

  struct {
   spinlock_t lock;
   unsigned int count;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void lockref_get(struct lockref *);
extern int lockref_get_not_zero(struct lockref *);
extern int lockref_get_or_lock(struct lockref *);
extern int lockref_put_or_lock(struct lockref *);

extern void lockref_mark_dead(struct lockref *);
extern int lockref_get_not_dead(struct lockref *);


static inline int __lockref_is_dead( struct lockref *l)
{
 return ((int)l->count < 0);
}

struct nameidata;
struct path;
struct vfsmount;
struct qstr {
  template <typename, int = 0> struct __BYPASSqstr {};
  template <typename, int> friend struct __BYPASSqstr;
 union {
  struct {
   u32 hash; u32 len;;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  u64 hash_len;
 };
 unsigned char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct dentry_stat_t {
  template <typename, int = 0> struct __BYPASSdentry_stat_t {};
  template <typename, int> friend struct __BYPASSdentry_stat_t;
 long nr_dentry;
 long nr_unused;
 long age_limit;
 long want_pages;
 long dummy[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct dentry_stat_t dentry_stat;






static inline unsigned long
partial_name_hash(unsigned long c, unsigned long prevhash)
{
 return (prevhash + (c << 4) + (c >> 4)) * 11;
}





static inline unsigned long end_name_hash(unsigned long hash)
{
 return (unsigned int) hash;
}


extern unsigned int full_name_hash( unsigned char *, unsigned int);
struct dentry {
  template <typename, int = 0> struct __BYPASSdentry {};
  template <typename, int> friend struct __BYPASSdentry;

 unsigned int d_flags;
 seqcount_t d_seq;
 struct hlist_bl_node d_hash;
 struct dentry *d_parent;
 struct qstr d_name;
 struct inode *d_inode;

 unsigned char d_iname[32];


 struct lockref d_lockref;
 struct dentry_operations *d_op;
 struct super_block *d_sb;
 unsigned long d_time;
 void *d_fsdata;

 struct list_head d_lru;






 union _d_u {

  struct list_head d_child;
   struct callback_head d_rcu;
 } d_u;
 struct list_head d_subdirs;
 struct hlist_node d_alias;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







enum dentry_d_lock_class
{
 DENTRY_D_LOCK_NORMAL,
 DENTRY_D_LOCK_NESTED
};

struct dentry_operations {
  template <typename, int = 0> struct __BYPASSdentry_operations {};
  template <typename, int> friend struct __BYPASSdentry_operations;
 int (*d_revalidate)(struct dentry *, unsigned int);
 int (*d_weak_revalidate)(struct dentry *, unsigned int);
 int (*d_hash)( struct dentry *, struct qstr *);
 int (*d_compare)( struct dentry *, struct dentry *,
   unsigned int, char *, struct qstr *);
 int (*d_delete)( struct dentry *);
 void (*d_release)(struct dentry *);
 void (*d_prune)(struct dentry *);
 void (*d_iput)(struct dentry *, struct inode *);
 char *(*d_dname)(struct dentry *, char *, int);
 struct vfsmount *(*d_automount)(struct path *);
 int (*d_manage)(struct dentry *, bool);

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));
extern seqlock_t rename_lock;


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4qstr4nameE_527_0 {
  typedef TJP__ZN4qstr4nameE_527_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char * __get__ZN4qstr4nameE_527(unsigned char * *source) {
  unsigned char *__result_buffer;
  typedef TJP__ZN4qstr4nameE_527_0< unsigned char *, ::qstr , unsigned char * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry6d_nameE_528_0 {
  typedef TJP__ZN6dentry6d_nameE_528_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline qstr __get__ZN6dentry6d_nameE_528(qstr *source) {
  AC::ResultBuffer< ::qstr  > __result_buffer;
  typedef TJP__ZN6dentry6d_nameE_528_0< ::qstr , ::dentry , ::qstr  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::qstr &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_inameE_529_0 {
  typedef TJP__ZN6dentry7d_inameE_529_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 32;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned char);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char * __get__ZN6dentry7d_inameE_529(unsigned char *source) {
  unsigned char *__result_buffer;
  typedef TJP__ZN6dentry7d_inameE_529_0< unsigned char *, ::dentry , unsigned char [32] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char *&)__result_buffer;
}
static inline int dname_external( struct dentry *dentry)
{
 return __get__ZN4qstr4nameE_527(&__get__ZN6dentry6d_nameE_528(&dentry->d_name).name) != __get__ZN6dentry7d_inameE_529(dentry->d_iname);
}




extern void d_instantiate(struct dentry *, struct inode *);
extern struct dentry * d_instantiate_unique(struct dentry *, struct inode *);
extern struct dentry * d_materialise_unique(struct dentry *, struct inode *);
extern int d_instantiate_no_diralias(struct dentry *, struct inode *);
extern void __d_drop(struct dentry *dentry);
extern void d_drop(struct dentry *dentry);
extern void d_delete(struct dentry *);
extern void d_set_d_op(struct dentry *dentry, struct dentry_operations *op);


extern struct dentry * d_alloc(struct dentry *, struct qstr *);
extern struct dentry * d_alloc_pseudo(struct super_block *, struct qstr *);
extern struct dentry * d_splice_alias(struct inode *, struct dentry *);
extern struct dentry * d_add_ci(struct dentry *, struct inode *, struct qstr *);
extern struct dentry *d_find_any_alias(struct inode *inode);
extern struct dentry * d_obtain_alias(struct inode *);
extern void shrink_dcache_sb(struct super_block *);
extern void shrink_dcache_parent(struct dentry *);
extern void shrink_dcache_for_umount(struct super_block *);
extern int d_invalidate(struct dentry *);


extern struct dentry * d_make_root(struct inode *);


extern void d_genocide(struct dentry *);

extern void d_tmpfile(struct dentry *, struct inode *);

extern struct dentry *d_find_alias(struct inode *);
extern void d_prune_aliases(struct inode *);


extern int have_submounts(struct dentry *);
extern int check_submounts_and_drop(struct dentry *);




extern void d_rehash(struct dentry *);
static inline void d_add(struct dentry *entry, struct inode *inode)
{
 d_instantiate(entry, inode);
 d_rehash(entry);
}
static inline struct dentry *d_add_unique(struct dentry *entry, struct inode *inode)
{
 struct dentry *res;

 res = d_instantiate_unique(entry, inode);
 d_rehash(res != 0 ? res : entry);
 return res;
}

extern void dentry_update_name_case(struct dentry *, struct qstr *);


extern void d_move(struct dentry *, struct dentry *);
extern struct dentry *d_ancestor(struct dentry *, struct dentry *);


extern struct dentry *d_lookup( struct dentry *, struct qstr *);
extern struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
extern struct dentry *__d_lookup( struct dentry *, struct qstr *);
extern struct dentry *__d_lookup_rcu( struct dentry *parent,
    struct qstr *name, unsigned *seq);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry9d_lockrefE_531_0 {
  typedef TJP__ZN6dentry9d_lockrefE_531_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline lockref __get__ZN6dentry9d_lockrefE_531(lockref *source) {
  AC::ResultBuffer< ::lockref  > __result_buffer;
  typedef TJP__ZN6dentry9d_lockrefE_531_0< ::lockref , ::dentry , ::lockref  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::lockref &)__result_buffer;
}
static inline unsigned d_count( struct dentry *dentry)
{
 return __get__ZN6dentry9d_lockrefE_531(&dentry->d_lockref).count;
}


extern int d_validate(struct dentry *, struct dentry *);




extern char *dynamic_dname(struct dentry *, char *, int, char *, ...);
extern char *simple_dname(struct dentry *, char *, int);

extern char *__d_path( struct path *, struct path *, char *, int);
extern char *d_absolute_path( struct path *, char *, int);
extern char *d_path( struct path *, char *, int);
extern char *dentry_path_raw(struct dentry *, char *, int);
extern char *dentry_path(struct dentry *, char *, int);
static inline struct dentry *dget_dlock(struct dentry *dentry)
{
 if (dentry)
  dentry->d_lockref.count++;
 return dentry;
}

static inline struct dentry *dget(struct dentry *dentry)
{
 if (dentry)
  lockref_get(&dentry->d_lockref);
 return dentry;
}

extern struct dentry *dget_parent(struct dentry *dentry);
static inline int d_unhashed( struct dentry *dentry)
{
 return hlist_bl_unhashed(&dentry->d_hash);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry8d_parentE_532_0 {
  typedef TJP__ZN6dentry8d_parentE_532_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dentry * __get__ZN6dentry8d_parentE_532(dentry * *source) {
  ::dentry *__result_buffer;
  typedef TJP__ZN6dentry8d_parentE_532_0< ::dentry *, ::dentry , ::dentry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dentry *&)__result_buffer;
}
static inline int d_unlinked( struct dentry *dentry)
{
 return d_unhashed(dentry) && !((dentry) == __get__ZN6dentry8d_parentE_532(&(dentry)->d_parent));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_flagsE_533_0 {
  typedef TJP__ZN6dentry7d_flagsE_533_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN6dentry7d_flagsE_533(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN6dentry7d_flagsE_533_0< unsigned int , ::dentry , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int cant_mount( struct dentry *dentry)
{
 return (__get__ZN6dentry7d_flagsE_533(&dentry->d_flags) & 0x00000100);
}

static inline void dont_mount(struct dentry *dentry)
{
 ;
 dentry->d_flags |= 0x00000100;
 ;
}

extern void dput(struct dentry *);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_flagsE_534_0 {
  typedef TJP__ZN6dentry7d_flagsE_534_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN6dentry7d_flagsE_534(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN6dentry7d_flagsE_534_0< unsigned int , ::dentry , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool d_managed( struct dentry *dentry)
{
 return __get__ZN6dentry7d_flagsE_534(&dentry->d_flags) & (0x00010000|0x00020000|0x00040000);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_flagsE_535_0 {
  typedef TJP__ZN6dentry7d_flagsE_535_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN6dentry7d_flagsE_535(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN6dentry7d_flagsE_535_0< unsigned int , ::dentry , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool d_mountpoint( struct dentry *dentry)
{
 return __get__ZN6dentry7d_flagsE_535(&dentry->d_flags) & 0x00010000;
}





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_flagsE_536_0 {
  typedef TJP__ZN6dentry7d_flagsE_536_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN6dentry7d_flagsE_536(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN6dentry7d_flagsE_536_0< unsigned int , ::dentry , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void __d_set_type(struct dentry *dentry, unsigned type)
{
 dentry->d_flags = (__get__ZN6dentry7d_flagsE_536(&dentry->d_flags) & ~0x00700000) | type;
}

static inline void __d_clear_type(struct dentry *dentry)
{
 __d_set_type(dentry, 0x00000000);
}

static inline void d_set_type(struct dentry *dentry, unsigned type)
{
 ;
 __d_set_type(dentry, type);
 ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_flagsE_537_0 {
  typedef TJP__ZN6dentry7d_flagsE_537_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN6dentry7d_flagsE_537(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN6dentry7d_flagsE_537_0< unsigned int , ::dentry , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline unsigned __d_entry_type( struct dentry *dentry)
{
 return __get__ZN6dentry7d_flagsE_537(&dentry->d_flags) & 0x00700000;
}

static inline bool d_is_directory( struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00100000;
}

static inline bool d_is_autodir( struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00200000;
}

static inline bool d_is_symlink( struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00300000;
}

static inline bool d_is_file( struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00400000;
}

static inline bool d_is_negative( struct dentry *dentry)
{
 return __d_entry_type(dentry) == 0x00000000;
}

static inline bool d_is_positive( struct dentry *dentry)
{
 return !d_is_negative(dentry);
}

extern int sysctl_vfs_cache_pressure;

static inline unsigned long vfs_pressure_ratio(unsigned long val)
{
 return ( { typeof(val) quot = (val) / (100); typeof(val) rem = (val) % (100); (quot * (sysctl_vfs_cache_pressure)) + ((rem * (sysctl_vfs_cache_pressure)) / (100)); } );
}
struct file;

extern void fput(struct file *);

struct file_operations;
struct vfsmount;
struct dentry;
struct path;
extern struct file *alloc_file(struct path *, fmode_t mode,
 struct file_operations *fop);

static inline void fput_light(struct file *file, int fput_needed)
{
 if (fput_needed)
  fput(file);
}

struct fd {
  template <typename, int = 0> struct __BYPASSfd {};
  template <typename, int> friend struct __BYPASSfd;
 struct file *file;
 int need_put;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void fdput(struct fd fd)
{
 if (fd.need_put)
  fput(fd.file);
}

extern struct file *fget(unsigned int fd);
extern struct file *fget_light(unsigned int fd, int *fput_needed);

static inline struct fd fdget(unsigned int fd)
{
 int b;
 struct file *f = fget_light(fd, &b);
 return (struct fd){f,b};
}

extern struct file *fget_raw(unsigned int fd);
extern struct file *fget_raw_light(unsigned int fd, int *fput_needed);

static inline struct fd fdget_raw(unsigned int fd)
{
 int b;
 struct file *f = fget_raw_light(fd, &b);
 return (struct fd){f,b};
}

extern int f_dupfd(unsigned int from, struct file *file, unsigned flags);
extern int replace_fd(unsigned fd, struct file *file, unsigned flags);
extern void set_close_on_exec(unsigned int fd, int flag);
extern bool get_close_on_exec(unsigned int fd);
extern void put_filp(struct file *);
extern int get_unused_fd_flags(unsigned flags);

extern void put_unused_fd(unsigned int fd);

extern void fd_install(unsigned int fd, struct file *file);

extern void flush_delayed_fput(void);
extern void __fput_sync(struct file *);









static inline int old_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < 256 && ((unsigned int) ((dev) & ((1U << 20) - 1))) < 256;
}

static inline u16 old_encode_dev(dev_t dev)
{
 return (((unsigned int) ((dev) >> 20)) << 8) | ((unsigned int) ((dev) & ((1U << 20) - 1)));
}

static inline dev_t old_decode_dev(u16 val)
{
 return ((((val >> 8) & 255) << 20) | (val & 255));
}

static inline int new_valid_dev(dev_t dev)
{
 return 1;
}

static inline u32 new_encode_dev(dev_t dev)
{
 unsigned major = ((unsigned int) ((dev) >> 20));
 unsigned minor = ((unsigned int) ((dev) & ((1U << 20) - 1)));
 return (minor & 0xff) | (major << 8) | ((minor & ~0xff) << 12);
}

static inline dev_t new_decode_dev(u32 dev)
{
 unsigned major = (dev & 0xfff00) >> 8;
 unsigned minor = (dev & 0xff) | ((dev >> 12) & 0xfff00);
 return (((major) << 20) | (minor));
}

static inline int huge_valid_dev(dev_t dev)
{
 return 1;
}

static inline u64 huge_encode_dev(dev_t dev)
{
 return new_encode_dev(dev);
}

static inline dev_t huge_decode_dev(u64 dev)
{
 return new_decode_dev(dev);
}

static inline int sysv_valid_dev(dev_t dev)
{
 return ((unsigned int) ((dev) >> 20)) < (1<<14) && ((unsigned int) ((dev) & ((1U << 20) - 1))) < (1<<18);
}

static inline u32 sysv_encode_dev(dev_t dev)
{
 return ((unsigned int) ((dev) & ((1U << 20) - 1))) | (((unsigned int) ((dev) >> 20)) << 18);
}

static inline unsigned sysv_major(u32 dev)
{
 return (dev >> 18) & 0x3fff;
}

static inline unsigned sysv_minor(u32 dev)
{
 return dev & 0x3ffff;
}




struct dentry;
struct vfsmount;

struct path {
  template <typename, int = 0> struct __BYPASSpath {};
  template <typename, int> friend struct __BYPASSpath;
 struct vfsmount *mnt;
 struct dentry *dentry;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4path3mntE_542_0 {
  typedef TJP__ZN4path3mntE_542_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline vfsmount * __get__ZN4path3mntE_542(vfsmount * *source) {
  ::vfsmount *__result_buffer;
  typedef TJP__ZN4path3mntE_542_0< ::vfsmount *, ::path , ::vfsmount * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::vfsmount *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4path3mntE_543_0 {
  typedef TJP__ZN4path3mntE_543_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline vfsmount * __get__ZN4path3mntE_543(vfsmount * *source) {
  ::vfsmount *__result_buffer;
  typedef TJP__ZN4path3mntE_543_0< ::vfsmount *, ::path , ::vfsmount * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::vfsmount *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4path6dentryE_544_0 {
  typedef TJP__ZN4path6dentryE_544_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dentry * __get__ZN4path6dentryE_544(dentry * *source) {
  ::dentry *__result_buffer;
  typedef TJP__ZN4path6dentryE_544_0< ::dentry *, ::path , ::dentry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dentry *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4path6dentryE_545_0 {
  typedef TJP__ZN4path6dentryE_545_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dentry * __get__ZN4path6dentryE_545(dentry * *source) {
  ::dentry *__result_buffer;
  typedef TJP__ZN4path6dentryE_545_0< ::dentry *, ::path , ::dentry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dentry *&)__result_buffer;
}
static inline int path_equal( struct path *path1, struct path *path2)
{
 return __get__ZN4path3mntE_542(&path1->mnt) == __get__ZN4path3mntE_543(&path2->mnt) && __get__ZN4path6dentryE_544(&path1->dentry) == __get__ZN4path6dentryE_545(&path2->dentry);
}




struct stat {
  template <typename, int = 0> struct __BYPASSstat {};
  template <typename, int> friend struct __BYPASSstat;
 unsigned long st_dev;
 unsigned long st_ino;
 unsigned long st_nlink;

 unsigned int st_mode;
 unsigned int st_uid;
 unsigned int st_gid;
 unsigned int __pad0;
 unsigned long st_rdev;
 long st_size;
 long st_blksize;
 long st_blocks;

 unsigned long st_atime;
 unsigned long st_atime_nsec;
 unsigned long st_mtime;
 unsigned long st_mtime_nsec;
 unsigned long st_ctime;
 unsigned long st_ctime_nsec;
 long __unused[3];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct __old_kernel_stat {
  template <typename, int = 0> struct __BYPASS__old_kernel_stat {};
  template <typename, int> friend struct __BYPASS__old_kernel_stat;
 unsigned short st_dev;
 unsigned short st_ino;
 unsigned short st_mode;
 unsigned short st_nlink;
 unsigned short st_uid;
 unsigned short st_gid;
 unsigned short st_rdev;






 unsigned int st_size;
 unsigned int st_atime;
 unsigned int st_mtime;
 unsigned int st_ctime;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern int overflowuid;
extern int overflowgid;

extern void __bad_uid(void);
extern void __bad_gid(void);
extern int fs_overflowuid;
extern int fs_overflowgid;

struct user_namespace;
extern struct user_namespace init_user_ns;



typedef struct {
 uid_t val;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} kuid_t;


typedef struct {
 gid_t val;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} kgid_t;




static inline uid_t __kuid_val(kuid_t uid)
{
 return uid.val;
}

static inline gid_t __kgid_val(kgid_t gid)
{
 return gid.val;
}
static inline bool uid_eq(kuid_t left, kuid_t right)
{
 return __kuid_val(left) == __kuid_val(right);
}

static inline bool gid_eq(kgid_t left, kgid_t right)
{
 return __kgid_val(left) == __kgid_val(right);
}

static inline bool uid_gt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) > __kuid_val(right);
}

static inline bool gid_gt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) > __kgid_val(right);
}

static inline bool uid_gte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) >= __kuid_val(right);
}

static inline bool gid_gte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) >= __kgid_val(right);
}

static inline bool uid_lt(kuid_t left, kuid_t right)
{
 return __kuid_val(left) < __kuid_val(right);
}

static inline bool gid_lt(kgid_t left, kgid_t right)
{
 return __kgid_val(left) < __kgid_val(right);
}

static inline bool uid_lte(kuid_t left, kuid_t right)
{
 return __kuid_val(left) <= __kuid_val(right);
}

static inline bool gid_lte(kgid_t left, kgid_t right)
{
 return __kgid_val(left) <= __kgid_val(right);
}

static inline bool uid_valid(kuid_t uid)
{
 return !uid_eq(uid, (kuid_t){ -1 });
}

static inline bool gid_valid(kgid_t gid)
{
 return !gid_eq(gid, (kgid_t){ -1 });
}



extern kuid_t make_kuid(struct user_namespace *from, uid_t uid);
extern kgid_t make_kgid(struct user_namespace *from, gid_t gid);

extern uid_t from_kuid(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid(struct user_namespace *to, kgid_t gid);
extern uid_t from_kuid_munged(struct user_namespace *to, kuid_t uid);
extern gid_t from_kgid_munged(struct user_namespace *to, kgid_t gid);

static inline bool kuid_has_mapping(struct user_namespace *ns, kuid_t uid)
{
 return from_kuid(ns, uid) != (uid_t) -1;
}

static inline bool kgid_has_mapping(struct user_namespace *ns, kgid_t gid)
{
 return from_kgid(ns, gid) != (gid_t) -1;
}

struct kstat {
  template <typename, int = 0> struct __BYPASSkstat {};
  template <typename, int> friend struct __BYPASSkstat;
 u64 ino;
 dev_t dev;
 umode_t mode;
 unsigned int nlink;
 kuid_t uid;
 kgid_t gid;
 dev_t rdev;
 loff_t size;
 struct timespec atime;
 struct timespec mtime;
 struct timespec ctime;
 unsigned long blksize;
 unsigned long long blocks;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum lru_status {
 LRU_REMOVED,
 LRU_ROTATE,
 LRU_SKIP,
 LRU_RETRY,

};

struct list_lru_node {
  template <typename, int = 0> struct __BYPASSlist_lru_node {};
  template <typename, int> friend struct __BYPASSlist_lru_node;
 spinlock_t lock;
 struct list_head list;

 long nr_items;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));

struct list_lru {
  template <typename, int = 0> struct __BYPASSlist_lru {};
  template <typename, int> friend struct __BYPASSlist_lru;
 struct list_lru_node *node;
 nodemask_t active_nodes;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void list_lru_destroy(struct list_lru *lru);
int list_lru_init(struct list_lru *lru);
bool list_lru_add(struct list_lru *lru, struct list_head *item);
bool list_lru_del(struct list_lru *lru, struct list_head *item);
unsigned long list_lru_count_node(struct list_lru *lru, int nid);
static inline unsigned long list_lru_count(struct list_lru *lru)
{
 long count = 0;
 int nid;

 for ((nid) = __first_node(&(lru->active_nodes)); (nid) < (1 << 6); (nid) = __next_node(((nid)), &((lru->active_nodes))))
  count += list_lru_count_node(lru, nid);

 return count;
}

typedef enum lru_status
(*list_lru_walk_cb)(struct list_head *item, spinlock_t *lock, void *cb_arg);
unsigned long list_lru_walk_node(struct list_lru *lru, int nid,
     list_lru_walk_cb isolate, void *cb_arg,
     unsigned long *nr_to_walk);

static inline unsigned long
list_lru_walk(struct list_lru *lru, list_lru_walk_cb isolate,
       void *cb_arg, unsigned long nr_to_walk)
{
 long isolated = 0;
 int nid;

 for ((nid) = __first_node(&(lru->active_nodes)); (nid) < (1 << 6); (nid) = __next_node(((nid)), &((lru->active_nodes)))) {
  isolated += list_lru_walk_node(lru, nid, isolate,
            cb_arg, &nr_to_walk);
  if (nr_to_walk <= 0)
   break;
 }
 return isolated;
}
struct llist_head {
  template <typename, int = 0> struct __BYPASSllist_head {};
  template <typename, int> friend struct __BYPASSllist_head;
 struct llist_node *first;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct llist_node {
  template <typename, int = 0> struct __BYPASSllist_node {};
  template <typename, int> friend struct __BYPASSllist_node;
 struct llist_node *next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void init_llist_head(struct llist_head *list)
{
 list->first = 0;
}
static inline bool llist_empty( struct llist_head *head)
{
 return (head->first) == 0;
}

static inline struct llist_node *llist_next(struct llist_node *node)
{
 return node->next;
}

extern bool llist_add_batch(struct llist_node *new_first,
       struct llist_node *new_last,
       struct llist_head *head);







static inline bool llist_add(struct llist_node *_new, struct llist_head *head)
{
 return llist_add_batch(_new, _new, head);
}
static inline struct llist_node *llist_del_all(struct llist_head *head)
{
 return ({ __typeof__ (*((&head->first))) __ret = ((0)); switch (sizeof(*((&head->first)))) { case 1: asm ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&head->first))) : : "memory", "cc"); break; case 2: asm ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&head->first))) : : "memory", "cc"); break; case 4: asm ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&head->first))) : : "memory", "cc"); break; case 8: asm ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&head->first))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
}

extern struct llist_node *llist_del_first(struct llist_head *head);

struct llist_node *llist_reverse_order(struct llist_node *head);
static inline int radix_tree_is_indirect_ptr(void *ptr)
{
 return (int)((unsigned long)ptr & 1);
}






struct radix_tree_root {
  template <typename, int = 0> struct __BYPASSradix_tree_root {};
  template <typename, int> friend struct __BYPASSradix_tree_root;
 unsigned int height;
 gfp_t gfp_mask;
 struct radix_tree_node *rnode;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void *radix_tree_deref_slot(void **pslot)
{



        return *(typeof(pslot))g_map(pslot, sizeof(*(pslot)));

}
static inline void *radix_tree_deref_slot_protected(void **pslot,
       spinlock_t *treelock)
{
 return (*pslot);
}
static inline int radix_tree_deref_retry(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & 1), 0);
}






static inline int radix_tree_exceptional_entry(void *arg)
{

 return (unsigned long)arg & 2;
}






static inline int radix_tree_exception(void *arg)
{
 return __builtin_expect(!!((unsigned long)arg & (1 | 2)), 0)
                                                           ;
}
static inline void radix_tree_replace_slot(void **pslot, void *item)
{
 (radix_tree_is_indirect_ptr(item));
 ({ (*pslot) = (item); });
}

int radix_tree_insert(struct radix_tree_root *, unsigned long, void *);
void *radix_tree_lookup(struct radix_tree_root *, unsigned long);
void **radix_tree_lookup_slot(struct radix_tree_root *, unsigned long);
void *radix_tree_delete(struct radix_tree_root *, unsigned long);
unsigned int
radix_tree_gang_lookup(struct radix_tree_root *root, void **results,
   unsigned long first_index, unsigned int max_items);
unsigned int radix_tree_gang_lookup_slot(struct radix_tree_root *root,
   void ***results, unsigned long *indices,
   unsigned long first_index, unsigned int max_items);
unsigned long radix_tree_next_hole(struct radix_tree_root *root,
    unsigned long index, unsigned long max_scan);
unsigned long radix_tree_prev_hole(struct radix_tree_root *root,
    unsigned long index, unsigned long max_scan);
int radix_tree_preload(gfp_t gfp_mask);
int radix_tree_maybe_preload(gfp_t gfp_mask);
void radix_tree_init(void);
void *radix_tree_tag_set(struct radix_tree_root *root,
   unsigned long index, unsigned int tag);
void *radix_tree_tag_clear(struct radix_tree_root *root,
   unsigned long index, unsigned int tag);
int radix_tree_tag_get(struct radix_tree_root *root,
   unsigned long index, unsigned int tag);
unsigned int
radix_tree_gang_lookup_tag(struct radix_tree_root *root, void **results,
  unsigned long first_index, unsigned int max_items,
  unsigned int tag);
unsigned int
radix_tree_gang_lookup_tag_slot(struct radix_tree_root *root, void ***results,
  unsigned long first_index, unsigned int max_items,
  unsigned int tag);
unsigned long radix_tree_range_tag_if_tagged(struct radix_tree_root *root,
  unsigned long *first_indexp, unsigned long last_index,
  unsigned long nr_to_tag,
  unsigned int fromtag, unsigned int totag);
int radix_tree_tagged(struct radix_tree_root *root, unsigned int tag);
unsigned long radix_tree_locate_item(struct radix_tree_root *root, void *item);

static inline void radix_tree_preload_end(void)
{
 __asm__ __volatile__("": : :"memory");
}
struct radix_tree_iter {
  template <typename, int = 0> struct __BYPASSradix_tree_iter {};
  template <typename, int> friend struct __BYPASSradix_tree_iter;
 unsigned long index;
 unsigned long next_index;
 unsigned long tags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline __attribute__((always_inline)) void **
radix_tree_iter_init(struct radix_tree_iter *iter, unsigned long start)
{
 iter->index = 0;
 iter->next_index = start;
 return 0;
}
void **radix_tree_next_chunk(struct radix_tree_root *root,
        struct radix_tree_iter *iter, unsigned flags);







static inline __attribute__((always_inline)) unsigned
radix_tree_chunk_size(struct radix_tree_iter *iter)
{
 return iter->next_index - iter->index;
}
static inline __attribute__((always_inline)) void **
radix_tree_next_slot(void **slot, struct radix_tree_iter *iter, unsigned flags)
{
 if (flags & 0x0100) {
  iter->tags >>= 1;
  if (__builtin_expect(!!(iter->tags & 1ul), 1)) {
   iter->index++;
   return slot + 1;
  }
  if (!(flags & 0x0200) && __builtin_expect(!!(iter->tags), 1)) {
   unsigned offset = __ffs(iter->tags);

   iter->tags >>= offset;
   iter->index += offset + 1;
   return slot + offset + 1;
  }
 } else {
  unsigned size = radix_tree_chunk_size(iter) - 1;

  while (size--) {
   slot++;
   iter->index++;
   if (__builtin_expect(!!(*slot), 1))
    return slot;
   if (flags & 0x0200) {

    iter->next_index = 0;
    break;
   }
  }
 }
 return 0;
}







enum pid_type
{
 PIDTYPE_PID,
 PIDTYPE_PGID,
 PIDTYPE_SID,
 PIDTYPE_MAX
};
struct upid {
  template <typename, int = 0> struct __BYPASSupid {};
  template <typename, int> friend struct __BYPASSupid;

 int nr;
 struct pid_namespace *ns;
 struct hlist_node pid_chain;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pid
{
  template <typename, int = 0> struct __BYPASSpid {};
  template <typename, int> friend struct __BYPASSpid;
 atomic_t count;
 unsigned int level;

 struct hlist_head tasks[PIDTYPE_MAX];
 struct callback_head rcu;
 struct upid numbers[1];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct pid init_struct_pid;

struct pid_link
{
  template <typename, int = 0> struct __BYPASSpid_link {};
  template <typename, int> friend struct __BYPASSpid_link;
 struct hlist_node node;
 struct pid *pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct task_struct *pid_task(struct pid *pid, enum pid_type);
extern struct task_struct *get_pid_task(struct pid *pid, enum pid_type);

extern struct pid *get_task_pid(struct task_struct *task, enum pid_type type);




extern void attach_pid(struct task_struct *task, enum pid_type);
extern void detach_pid(struct task_struct *task, enum pid_type);
extern void change_pid(struct task_struct *task, enum pid_type,
   struct pid *pid);
extern void transfer_pid(struct task_struct *old, struct task_struct *_new,
    enum pid_type);

struct pid_namespace;
extern struct pid_namespace init_pid_ns;
extern struct pid *find_pid_ns(int nr, struct pid_namespace *ns);
extern struct pid *find_vpid(int nr);




extern struct pid *find_get_pid(int nr);
extern struct pid *find_ge_pid(int nr, struct pid_namespace *);
int next_pidmap(struct pid_namespace *pid_ns, unsigned int last);

extern struct pid *alloc_pid(struct pid_namespace *ns);
extern void free_pid(struct pid *pid);
extern void disable_pid_allocation(struct pid_namespace *ns);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4upid2nsE_559_0 {
  typedef TJP__ZN4upid2nsE_559_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_namespace * __get__ZN4upid2nsE_559(pid_namespace * *source) {
  ::pid_namespace *__result_buffer;
  typedef TJP__ZN4upid2nsE_559_0< ::pid_namespace *, ::upid , ::pid_namespace * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_namespace *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3pid7numbersE_560_0 {
  typedef TJP__ZN3pid7numbersE_560_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline upid __get__ZN3pid7numbersE_560(upid *source) {
  AC::ResultBuffer< ::upid  > __result_buffer;
  typedef TJP__ZN3pid7numbersE_560_0< ::upid , ::pid , ::upid  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::upid &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3pid5levelE_561_0 {
  typedef TJP__ZN3pid5levelE_561_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN3pid5levelE_561(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN3pid5levelE_561_0< unsigned int , ::pid , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline struct pid_namespace *ns_of_pid(struct pid *pid)
{
 struct pid_namespace *ns = 0;
 if (pid)
  ns = __get__ZN4upid2nsE_559(&__get__ZN3pid7numbersE_560(&pid->numbers[__get__ZN3pid5levelE_561(&pid->level)]).ns);
 return ns;
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4upid2nrE_562_0 {
  typedef TJP__ZN4upid2nrE_562_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4upid2nrE_562(int *source) {
  int __result_buffer;
  typedef TJP__ZN4upid2nrE_562_0< int , ::upid , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3pid7numbersE_563_0 {
  typedef TJP__ZN3pid7numbersE_563_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline upid __get__ZN3pid7numbersE_563(upid *source) {
  AC::ResultBuffer< ::upid  > __result_buffer;
  typedef TJP__ZN3pid7numbersE_563_0< ::upid , ::pid , ::upid  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::upid &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3pid5levelE_564_0 {
  typedef TJP__ZN3pid5levelE_564_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN3pid5levelE_564(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN3pid5levelE_564_0< unsigned int , ::pid , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool is_child_reaper(struct pid *pid)
{
 return __get__ZN4upid2nrE_562(&__get__ZN3pid7numbersE_563(&pid->numbers[__get__ZN3pid5levelE_564(&pid->level)]).nr) == 1;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4upid2nrE_565_0 {
  typedef TJP__ZN4upid2nrE_565_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4upid2nrE_565(int *source) {
  int __result_buffer;
  typedef TJP__ZN4upid2nrE_565_0< int , ::upid , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3pid7numbersE_566_0 {
  typedef TJP__ZN3pid7numbersE_566_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline upid __get__ZN3pid7numbersE_566(upid *source) {
  AC::ResultBuffer< ::upid  > __result_buffer;
  typedef TJP__ZN3pid7numbersE_566_0< ::upid , ::pid , ::upid  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::upid &)__result_buffer;
}
static inline pid_t pid_nr(struct pid *pid)
{
 pid_t nr = 0;
 if (pid)
  nr = __get__ZN4upid2nrE_565(&__get__ZN3pid7numbersE_566(&pid->numbers[0]).nr);
 return nr;
}

pid_t pid_nr_ns(struct pid *pid, struct pid_namespace *ns);
pid_t pid_vnr(struct pid *pid);


struct task_struct;
typedef struct __user_cap_header_struct {
  template <typename, int = 0> struct __BYPASS__user_cap_header_struct {};
  template <typename, int> friend struct __BYPASS__user_cap_header_struct;
 __u32 version;
 int pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
  template <typename, int = 0> struct __BYPASS__user_cap_data_struct {};
  template <typename, int> friend struct __BYPASS__user_cap_data_struct;
        __u32 effective;
        __u32 permitted;
        __u32 inheritable;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} *cap_user_data_t;
struct vfs_cap_data {
  template <typename, int = 0> struct __BYPASSvfs_cap_data {};
  template <typename, int> friend struct __BYPASSvfs_cap_data;
 __le32 magic_etc;
 struct {
  __le32 permitted;
  __le32 inheritable;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} data[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern int file_caps_enabled;

typedef struct kernel_cap_struct {
  template <typename, int = 0> struct __BYPASSkernel_cap_struct {};
  template <typename, int> friend struct __BYPASSkernel_cap_struct;
 __u32 cap[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} kernel_cap_t;


struct cpu_vfs_cap_data {
  template <typename, int = 0> struct __BYPASScpu_vfs_cap_data {};
  template <typename, int> friend struct __BYPASScpu_vfs_cap_data;
 __u32 magic_etc;
 kernel_cap_t permitted;
 kernel_cap_t inheritable;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct file;
struct inode;
struct dentry;
struct user_namespace;

struct user_namespace *current_user_ns(void);

extern kernel_cap_t __cap_empty_set;
extern kernel_cap_t __cap_init_eff_set;

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_567_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_567_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_567(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_567_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_568_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_568_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_568(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_568_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline kernel_cap_t cap_combine( kernel_cap_t a,
           kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = __get__ZN17kernel_cap_struct3capE_567(a.cap)[__capi] | __get__ZN17kernel_cap_struct3capE_568(b.cap)[__capi]; } } while (0);
 return dest;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_569_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_569_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_569(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_569_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_570_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_570_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_570(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_570_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline kernel_cap_t cap_intersect( kernel_cap_t a,
      kernel_cap_t b)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = __get__ZN17kernel_cap_struct3capE_569(a.cap)[__capi] & __get__ZN17kernel_cap_struct3capE_570(b.cap)[__capi]; } } while (0);
 return dest;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_571_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_571_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_571(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_571_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_572_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_572_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_572(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_572_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline kernel_cap_t cap_drop( kernel_cap_t a,
        kernel_cap_t drop)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = __get__ZN17kernel_cap_struct3capE_571(a.cap)[__capi] &~ __get__ZN17kernel_cap_struct3capE_572(drop.cap)[__capi]; } } while (0);
 return dest;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_573_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_573_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_573(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_573_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline kernel_cap_t cap_invert( kernel_cap_t c)
{
 kernel_cap_t dest;
 do { unsigned __capi; for (__capi = 0; __capi < 2; ++__capi) { dest.cap[__capi] = ~ __get__ZN17kernel_cap_struct3capE_573(c.cap)[__capi]; } } while (0);
 return dest;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_574_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_574_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_574(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_574_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline int cap_isclear( kernel_cap_t a)
{
 unsigned __capi;
 for (__capi = 0; __capi < 2; ++__capi) {
  if (__get__ZN17kernel_cap_struct3capE_574(a.cap)[__capi] != 0)
   return 0;
 }
 return 1;
}
static inline int cap_issubset( kernel_cap_t a, kernel_cap_t set)
{
 kernel_cap_t dest;
 dest = cap_drop(a, set);
 return cap_isclear(dest);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN17kernel_cap_struct3capE_575_0 {
  typedef TJP__ZN17kernel_cap_struct3capE_575_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 2;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN17kernel_cap_struct3capE_575(unsigned int *source) {
  ::__u32 *__result_buffer;
  typedef TJP__ZN17kernel_cap_struct3capE_575_0< ::__u32 *, ::kernel_cap_struct , ::__u32 [2] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 *&)__result_buffer;
}
static inline int cap_is_fs_cap(int cap)
{
 kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return !!((1 << ((cap) & 31)) & __get__ZN17kernel_cap_struct3capE_575(__cap_fs_set.cap)[((cap) >> 5)]);
}

static inline kernel_cap_t cap_drop_fs_set( kernel_cap_t a)
{
 kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline kernel_cap_t cap_raise_fs_set( kernel_cap_t a,
         kernel_cap_t permitted)
{
 kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((9) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_fs_set));
}

static inline kernel_cap_t cap_drop_nfsd_set( kernel_cap_t a)
{
 kernel_cap_t __cap_fs_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_drop(a, __cap_fs_set);
}

static inline kernel_cap_t cap_raise_nfsd_set( kernel_cap_t a,
           kernel_cap_t permitted)
{
 kernel_cap_t __cap_nfsd_set = ((kernel_cap_t){{ ((1 << ((0) & 31)) | (1 << ((27) & 31)) | (1 << ((1) & 31)) | (1 << ((2) & 31)) | (1 << ((3) & 31)) | (1 << ((4) & 31))) | (1 << ((24) & 31)), ((1 << ((32) & 31))) } });
 return cap_combine(a,
      cap_intersect(permitted, __cap_nfsd_set));
}

extern bool has_capability(struct task_struct *t, int cap);
extern bool has_ns_capability(struct task_struct *t,
         struct user_namespace *ns, int cap);
extern bool has_capability_noaudit(struct task_struct *t, int cap);
extern bool has_ns_capability_noaudit(struct task_struct *t,
          struct user_namespace *ns, int cap);
extern bool capable(int cap);
extern bool ns_capable(struct user_namespace *ns, int cap);
extern bool inode_capable( struct inode *inode, int cap);
extern bool file_ns_capable( struct file *file, struct user_namespace *ns, int cap);


extern int get_vfs_caps_from_disk( struct dentry *dentry, struct cpu_vfs_cap_data *cpu_caps);
struct semaphore {
  template <typename, int = 0> struct __BYPASSsemaphore {};
  template <typename, int> friend struct __BYPASSsemaphore;
 raw_spinlock_t lock;
 unsigned int count;
 struct list_head wait_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void sema_init(struct semaphore *sem, int val)
{





}

extern void down(struct semaphore *sem);
extern int down_interruptible(struct semaphore *sem);
extern int down_killable(struct semaphore *sem);
extern int down_trylock(struct semaphore *sem);
extern int down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
struct fiemap_extent {
  template <typename, int = 0> struct __BYPASSfiemap_extent {};
  template <typename, int> friend struct __BYPASSfiemap_extent;
 __u64 fe_logical;

 __u64 fe_physical;

 __u64 fe_length;
 __u64 fe_reserved64[2];
 __u32 fe_flags;
 __u32 fe_reserved[3];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct fiemap {
  template <typename, int = 0> struct __BYPASSfiemap {};
  template <typename, int> friend struct __BYPASSfiemap;
 __u64 fm_start;

 __u64 fm_length;

 __u32 fm_flags;
 __u32 fm_mapped_extents;
 __u32 fm_extent_count;
 __u32 fm_reserved;
 struct fiemap_extent fm_extents[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum migrate_mode {
 MIGRATE_ASYNC,
 MIGRATE_SYNC_LIGHT,
 MIGRATE_SYNC,
};


struct percpu_rw_semaphore {
  template <typename, int = 0> struct __BYPASSpercpu_rw_semaphore {};
  template <typename, int> friend struct __BYPASSpercpu_rw_semaphore;
 unsigned int *fast_read_ctr;
 atomic_t write_ctr;
 struct rw_semaphore rw_sem;
 atomic_t slow_read_ctr;
 wait_queue_head_t write_waitq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void percpu_down_read(struct percpu_rw_semaphore *);
extern void percpu_up_read(struct percpu_rw_semaphore *);

extern void percpu_down_write(struct percpu_rw_semaphore *);
extern void percpu_up_write(struct percpu_rw_semaphore *);

extern int __percpu_init_rwsem(struct percpu_rw_semaphore *,
    char *, struct lock_class_key *);
extern void percpu_free_rwsem(struct percpu_rw_semaphore *);
struct bio_set;
struct bio;
struct bio_integrity_payload;
struct page;
struct block_device;
struct io_context;
struct cgroup_subsys_state;
typedef void (bio_end_io_t) (struct bio *, int);
typedef void (bio_destructor_t) (struct bio *);




struct bio_vec {
  template <typename, int = 0> struct __BYPASSbio_vec {};
  template <typename, int> friend struct __BYPASSbio_vec;
 struct page *bv_page;
 unsigned int bv_len;
 unsigned int bv_offset;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct bio {
  template <typename, int = 0> struct __BYPASSbio {};
  template <typename, int> friend struct __BYPASSbio;
 sector_t bi_sector;

 struct bio *bi_next;
 struct block_device *bi_bdev;
 unsigned long bi_flags;
 unsigned long bi_rw;



 unsigned short bi_vcnt;
 unsigned short bi_idx;




 unsigned int bi_phys_segments;

 unsigned int bi_size;





 unsigned int bi_seg_front_size;
 unsigned int bi_seg_back_size;

 bio_end_io_t *bi_end_io;

 void *bi_private;





 struct io_context *bi_ioc;
 struct cgroup_subsys_state *bi_css;


 struct bio_integrity_payload *bi_integrity;






 unsigned int bi_max_vecs;

 atomic_t bi_cnt;

 struct bio_vec *bi_io_vec;

 struct bio_set *bi_pool;






 struct bio_vec bi_inline_vecs[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum rq_flag_bits {

 __REQ_WRITE,
 __REQ_FAILFAST_DEV,
 __REQ_FAILFAST_TRANSPORT,
 __REQ_FAILFAST_DRIVER,

 __REQ_SYNC,
 __REQ_META,
 __REQ_PRIO,
 __REQ_DISCARD,
 __REQ_SECURE,
 __REQ_WRITE_SAME,

 __REQ_NOIDLE,
 __REQ_FUA,
 __REQ_FLUSH,


 __REQ_RAHEAD,
 __REQ_THROTTLED,



 __REQ_SORTED,
 __REQ_SOFTBARRIER,
 __REQ_NOMERGE,
 __REQ_STARTED,
 __REQ_DONTPREP,
 __REQ_QUEUED,
 __REQ_ELVPRIV,
 __REQ_FAILED,
 __REQ_QUIET,
 __REQ_PREEMPT,
 __REQ_ALLOCED,
 __REQ_COPY_USER,
 __REQ_FLUSH_SEQ,
 __REQ_IO_STAT,
 __REQ_MIXED_MERGE,
 __REQ_KERNEL,
 __REQ_PM,
 __REQ_END,
 __REQ_NR_BITS,
};


struct fstrim_range {
  template <typename, int = 0> struct __BYPASSfstrim_range {};
  template <typename, int> friend struct __BYPASSfstrim_range;
 __u64 start;
 __u64 len;
 __u64 minlen;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct files_stat_struct {
  template <typename, int = 0> struct __BYPASSfiles_stat_struct {};
  template <typename, int> friend struct __BYPASSfiles_stat_struct;
 unsigned long nr_files;
 unsigned long nr_free_files;
 unsigned long max_files;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inodes_stat_t {
  template <typename, int = 0> struct __BYPASSinodes_stat_t {};
  template <typename, int> friend struct __BYPASSinodes_stat_t;
 long nr_inodes;
 long nr_unused;
 long dummy[5];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct export_operations;
struct hd_geometry;
struct iovec;
struct nameidata;
struct kiocb;
struct kobject;
struct pipe_inode_info;
struct poll_table_struct;
struct kstatfs;
struct vm_area_struct;
struct vfsmount;
struct cred;
struct swap_info_struct;
struct seq_file;
struct workqueue_struct;

extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) inode_init(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) inode_init_early(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) files_init(unsigned long);

extern struct files_stat_struct files_stat;
extern unsigned long get_max_files(void);
extern int sysctl_nr_open;
extern struct inodes_stat_t inodes_stat;
extern int leases_enable, lease_break_time;
extern int sysctl_protected_symlinks;
extern int sysctl_protected_hardlinks;

struct buffer_head;
typedef int (get_block_t)(struct inode *inode, sector_t iblock,
   struct buffer_head *bh_result, int create);
typedef void (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
   ssize_t bytes, void *_private);
struct iattr {
  template <typename, int = 0> struct __BYPASSiattr {};
  template <typename, int> friend struct __BYPASSiattr;
 unsigned int ia_valid;
 umode_t ia_mode;
 kuid_t ia_uid;
 kgid_t ia_gid;
 loff_t ia_size;
 struct timespec ia_atime;
 struct timespec ia_mtime;
 struct timespec ia_ctime;






 struct file *ia_file;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct percpu_counter {
  template <typename, int = 0> struct __BYPASSpercpu_counter {};
  template <typename, int> friend struct __BYPASSpercpu_counter;
 raw_spinlock_t lock;
 s64 count;

 struct list_head list;

 s32 *counters;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int percpu_counter_batch;

int __percpu_counter_init(struct percpu_counter *fbc, s64 amount,
     struct lock_class_key *key);
void percpu_counter_destroy(struct percpu_counter *fbc);
void percpu_counter_set(struct percpu_counter *fbc, s64 amount);
void __percpu_counter_add(struct percpu_counter *fbc, s64 amount, s32 batch);
s64 __percpu_counter_sum(struct percpu_counter *fbc);
int percpu_counter_compare(struct percpu_counter *fbc, s64 rhs);

static inline void percpu_counter_add(struct percpu_counter *fbc, s64 amount)
{
 __percpu_counter_add(fbc, amount, percpu_counter_batch);
}

static inline s64 percpu_counter_sum_positive(struct percpu_counter *fbc)
{
 s64 ret = __percpu_counter_sum(fbc);
 return ret < 0 ? 0 : ret;
}

static inline s64 percpu_counter_sum(struct percpu_counter *fbc)
{
 return __percpu_counter_sum(fbc);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14percpu_counter5countE_577_0 {
  typedef TJP__ZN14percpu_counter5countE_577_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN14percpu_counter5countE_577(long long int *source) {
  ::s64 __result_buffer;
  typedef TJP__ZN14percpu_counter5countE_577_0< ::s64 , ::percpu_counter , ::s64  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::s64 &)__result_buffer;
}
static inline s64 percpu_counter_read(struct percpu_counter *fbc)
{
 return __get__ZN14percpu_counter5countE_577(&fbc->count);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14percpu_counter5countE_578_0 {
  typedef TJP__ZN14percpu_counter5countE_578_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN14percpu_counter5countE_578(long long int *source) {
  ::s64 __result_buffer;
  typedef TJP__ZN14percpu_counter5countE_578_0< ::s64 , ::percpu_counter , ::s64  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::s64 &)__result_buffer;
}
static inline s64 percpu_counter_read_positive(struct percpu_counter *fbc)
{
 s64 ret = __get__ZN14percpu_counter5countE_578(&fbc->count);

 __asm__ __volatile__("": : :"memory");
 if (ret >= 0)
  return ret;
 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14percpu_counter8countersE_579_0 {
  typedef TJP__ZN14percpu_counter8countersE_579_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int * __get__ZN14percpu_counter8countersE_579(int * *source) {
  ::s32 *__result_buffer;
  typedef TJP__ZN14percpu_counter8countersE_579_0< ::s32 *, ::percpu_counter , ::s32 * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::s32 *&)__result_buffer;
}
static inline int percpu_counter_initialized(struct percpu_counter *fbc)
{
 return (__get__ZN14percpu_counter8countersE_579(&fbc->counters) != 0);
}
static inline void percpu_counter_inc(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, 1);
}

static inline void percpu_counter_dec(struct percpu_counter *fbc)
{
 percpu_counter_add(fbc, -1);
}

static inline void percpu_counter_sub(struct percpu_counter *fbc, s64 amount)
{
 percpu_counter_add(fbc, -amount);
}

typedef struct fs_disk_quota {
  template <typename, int = 0> struct __BYPASSfs_disk_quota {};
  template <typename, int> friend struct __BYPASSfs_disk_quota;
 __s8 d_version;
 __s8 d_flags;
 __u16 d_fieldmask;
 __u32 d_id;
 __u64 d_blk_hardlimit;
 __u64 d_blk_softlimit;
 __u64 d_ino_hardlimit;
 __u64 d_ino_softlimit;
 __u64 d_bcount;
 __u64 d_icount;
 __s32 d_itimer;

 __s32 d_btimer;
 __u16 d_iwarns;
 __u16 d_bwarns;
 __s32 d_padding2;
 __u64 d_rtb_hardlimit;
 __u64 d_rtb_softlimit;
 __u64 d_rtbcount;
 __s32 d_rtbtimer;
 __u16 d_rtbwarns;
 __s16 d_padding3;
 char d_padding4[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fs_disk_quota_t;
typedef struct fs_qfilestat {
  template <typename, int = 0> struct __BYPASSfs_qfilestat {};
  template <typename, int> friend struct __BYPASSfs_qfilestat;
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fs_qfilestat_t;

typedef struct fs_quota_stat {
  template <typename, int = 0> struct __BYPASSfs_quota_stat {};
  template <typename, int> friend struct __BYPASSfs_quota_stat;
 __s8 qs_version;
 __u16 qs_flags;
 __s8 qs_pad;
 fs_qfilestat_t qs_uquota;
 fs_qfilestat_t qs_gquota;
 __u32 qs_incoredqs;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fs_quota_stat_t;
struct fs_qfilestatv {
  template <typename, int = 0> struct __BYPASSfs_qfilestatv {};
  template <typename, int> friend struct __BYPASSfs_qfilestatv;
 __u64 qfs_ino;
 __u64 qfs_nblks;
 __u32 qfs_nextents;
 __u32 qfs_pad;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct fs_quota_statv {
  template <typename, int = 0> struct __BYPASSfs_quota_statv {};
  template <typename, int> friend struct __BYPASSfs_quota_statv;
 __s8 qs_version;
 __u8 qs_pad1;
 __u16 qs_flags;
 __u32 qs_incoredqs;
 struct fs_qfilestatv qs_uquota;
 struct fs_qfilestatv qs_gquota;
 struct fs_qfilestatv qs_pquota;
 __s32 qs_btimelimit;
 __s32 qs_itimelimit;
 __s32 qs_rtbtimelimit;
 __u16 qs_bwarnlimit;
 __u16 qs_iwarnlimit;
 __u64 qs_pad2[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct dquot;


struct qtree_fmt_operations {
  template <typename, int = 0> struct __BYPASSqtree_fmt_operations {};
  template <typename, int> friend struct __BYPASSqtree_fmt_operations;
 void (*mem2disk_dqblk)(void *disk, struct dquot *dquot);
 void (*disk2mem_dqblk)(struct dquot *dquot, void *disk);
 int (*is_id)(void *disk, struct dquot *dquot);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct qtree_mem_dqinfo {
  template <typename, int = 0> struct __BYPASSqtree_mem_dqinfo {};
  template <typename, int> friend struct __BYPASSqtree_mem_dqinfo;
 struct super_block *dqi_sb;
 int dqi_type;
 unsigned int dqi_blocks;
 unsigned int dqi_free_blk;
 unsigned int dqi_free_entry;
 unsigned int dqi_blocksize_bits;
 unsigned int dqi_entry_size;
 unsigned int dqi_usable_bs;
 unsigned int dqi_qtree_depth;
 struct qtree_fmt_operations *dqi_ops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int qtree_write_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_read_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_delete_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_release_dquot(struct qtree_mem_dqinfo *info, struct dquot *dquot);
int qtree_entry_unused(struct qtree_mem_dqinfo *info, char *disk);
static inline int qtree_depth(struct qtree_mem_dqinfo *info)
{
 unsigned int epb = info->dqi_usable_bs >> 2;
 unsigned long long entries = epb;
 int i;

 for (i = 1; entries < (1ULL << 32); i++)
  entries *= epb;
 return i;
}



struct user_namespace;
extern struct user_namespace init_user_ns;

typedef __kernel_uid32_t projid_t;



typedef struct {
 projid_t val;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} kprojid_t;

static inline projid_t __kprojid_val(kprojid_t projid)
{
 return projid.val;
}
static inline bool projid_eq(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) == __kprojid_val(right);
}

static inline bool projid_lt(kprojid_t left, kprojid_t right)
{
 return __kprojid_val(left) < __kprojid_val(right);
}

static inline bool projid_valid(kprojid_t projid)
{
 return !projid_eq(projid, (kprojid_t){ -1 });
}



extern kprojid_t make_kprojid(struct user_namespace *from, projid_t projid);

extern projid_t from_kprojid(struct user_namespace *to, kprojid_t projid);
extern projid_t from_kprojid_munged(struct user_namespace *to, kprojid_t projid);

static inline bool kprojid_has_mapping(struct user_namespace *ns, kprojid_t projid)
{
 return from_kprojid(ns, projid) != (projid_t)-1;
}
enum {
 QIF_BLIMITS_B = 0,
 QIF_SPACE_B,
 QIF_ILIMITS_B,
 QIF_INODES_B,
 QIF_BTIME_B,
 QIF_ITIME_B,
};
struct if_dqblk {
  template <typename, int = 0> struct __BYPASSif_dqblk {};
  template <typename, int> friend struct __BYPASSif_dqblk;
 __u64 dqb_bhardlimit;
 __u64 dqb_bsoftlimit;
 __u64 dqb_curspace;
 __u64 dqb_ihardlimit;
 __u64 dqb_isoftlimit;
 __u64 dqb_curinodes;
 __u64 dqb_btime;
 __u64 dqb_itime;
 __u32 dqb_valid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct if_dqinfo {
  template <typename, int = 0> struct __BYPASSif_dqinfo {};
  template <typename, int> friend struct __BYPASSif_dqinfo;
 __u64 dqi_bgrace;
 __u64 dqi_igrace;
 __u32 dqi_flags;
 __u32 dqi_valid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 QUOTA_NL_C_UNSPEC,
 QUOTA_NL_C_WARNING,
 __QUOTA_NL_C_MAX,
};


enum {
 QUOTA_NL_A_UNSPEC,
 QUOTA_NL_A_QTYPE,
 QUOTA_NL_A_EXCESS_ID,
 QUOTA_NL_A_WARNING,
 QUOTA_NL_A_DEV_MAJOR,
 QUOTA_NL_A_DEV_MINOR,
 QUOTA_NL_A_CAUSED_ID,
 __QUOTA_NL_A_MAX,
};



enum quota_type {
 USRQUOTA = 0,
 GRPQUOTA = 1,
 PRJQUOTA = 2,
};

typedef __kernel_uid32_t qid_t;
typedef long long qsize_t;

struct kqid {
  template <typename, int = 0> struct __BYPASSkqid {};
  template <typename, int> friend struct __BYPASSkqid;
 union {
  kuid_t uid;
  kgid_t gid;
  kprojid_t projid;
 };
 enum quota_type type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern bool qid_eq(struct kqid left, struct kqid right);
extern bool qid_lt(struct kqid left, struct kqid right);
extern qid_t from_kqid(struct user_namespace *to, struct kqid qid);
extern qid_t from_kqid_munged(struct user_namespace *to, struct kqid qid);
extern bool qid_valid(struct kqid qid);
static inline struct kqid make_kqid(struct user_namespace *from,
        enum quota_type type, qid_t qid)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = make_kuid(from, qid);
  break;
 case GRPQUOTA:
  kqid.gid = make_kgid(from, qid);
  break;
 case PRJQUOTA:
  kqid.projid = make_kprojid(from, qid);
  break;
 default:
  ;
 }
 return kqid;
}







static inline struct kqid make_kqid_invalid(enum quota_type type)
{
 struct kqid kqid;

 kqid.type = type;
 switch (type) {
 case USRQUOTA:
  kqid.uid = (kuid_t){ -1 };
  break;
 case GRPQUOTA:
  kqid.gid = (kgid_t){ -1 };
  break;
 case PRJQUOTA:
  kqid.projid = (kprojid_t){ -1 };
  break;
 default:
  ;
 }
 return kqid;
}





static inline struct kqid make_kqid_uid(kuid_t uid)
{
 struct kqid kqid;
 kqid.type = USRQUOTA;
 kqid.uid = uid;
 return kqid;
}





static inline struct kqid make_kqid_gid(kgid_t gid)
{
 struct kqid kqid;
 kqid.type = GRPQUOTA;
 kqid.gid = gid;
 return kqid;
}





static inline struct kqid make_kqid_projid(kprojid_t projid)
{
 struct kqid kqid;
 kqid.type = PRJQUOTA;
 kqid.projid = projid;
 return kqid;
}


extern spinlock_t dq_data_lock;
struct mem_dqblk {
  template <typename, int = 0> struct __BYPASSmem_dqblk {};
  template <typename, int> friend struct __BYPASSmem_dqblk;
 qsize_t dqb_bhardlimit;
 qsize_t dqb_bsoftlimit;
 qsize_t dqb_curspace;
 qsize_t dqb_rsvspace;
 qsize_t dqb_ihardlimit;
 qsize_t dqb_isoftlimit;
 qsize_t dqb_curinodes;
 time_t dqb_btime;
 time_t dqb_itime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct quota_format_type;

struct mem_dqinfo {
  template <typename, int = 0> struct __BYPASSmem_dqinfo {};
  template <typename, int> friend struct __BYPASSmem_dqinfo;
 struct quota_format_type *dqi_format;
 int dqi_fmt_id;

 struct list_head dqi_dirty_list;
 unsigned long dqi_flags;
 unsigned int dqi_bgrace;
 unsigned int dqi_igrace;
 qsize_t dqi_maxblimit;
 qsize_t dqi_maxilimit;
 void *dqi_priv;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct super_block;
extern void mark_info_dirty(struct super_block *sb, int type);
static inline int info_dirty(struct mem_dqinfo *info)
{
 return (__builtin_constant_p((31)) ? constant_test_bit((31), (&info->dqi_flags)) : variable_test_bit((31), (&info->dqi_flags)));
}

enum {
 DQST_LOOKUPS,
 DQST_DROPS,
 DQST_READS,
 DQST_WRITES,
 DQST_CACHE_HITS,
 DQST_ALLOC_DQUOTS,
 DQST_FREE_DQUOTS,
 DQST_SYNCS,
 _DQST_DQSTAT_LAST
};

struct dqstats {
  template <typename, int = 0> struct __BYPASSdqstats {};
  template <typename, int> friend struct __BYPASSdqstats;
 int stat[_DQST_DQSTAT_LAST];
 struct percpu_counter counter[_DQST_DQSTAT_LAST];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct dqstats *dqstats_pcpu;
extern struct dqstats dqstats;

static inline void dqstats_inc(unsigned int type)
{
 percpu_counter_inc(&dqstats.counter[type]);
}

static inline void dqstats_dec(unsigned int type)
{
 percpu_counter_dec(&dqstats.counter[type]);
}
struct dquot {
  template <typename, int = 0> struct __BYPASSdquot {};
  template <typename, int> friend struct __BYPASSdquot;
 struct hlist_node dq_hash;
 struct list_head dq_inuse;
 struct list_head dq_free;
 struct list_head dq_dirty;
 struct mutex dq_lock;
 atomic_t dq_count;
 wait_queue_head_t dq_wait_unused;
 struct super_block *dq_sb;
 struct kqid dq_id;
 loff_t dq_off;
 unsigned long dq_flags;
 struct mem_dqblk dq_dqb;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct quota_format_ops {
  template <typename, int = 0> struct __BYPASSquota_format_ops {};
  template <typename, int> friend struct __BYPASSquota_format_ops;
 int (*check_quota_file)(struct super_block *sb, int type);
 int (*read_file_info)(struct super_block *sb, int type);
 int (*write_file_info)(struct super_block *sb, int type);
 int (*free_file_info)(struct super_block *sb, int type);
 int (*read_dqblk)(struct dquot *dquot);
 int (*commit_dqblk)(struct dquot *dquot);
 int (*release_dqblk)(struct dquot *dquot);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct dquot_operations {
  template <typename, int = 0> struct __BYPASSdquot_operations {};
  template <typename, int> friend struct __BYPASSdquot_operations;
 int (*write_dquot) (struct dquot *);
 struct dquot *(*alloc_dquot)(struct super_block *, int);
 void (*destroy_dquot)(struct dquot *);
 int (*acquire_dquot) (struct dquot *);
 int (*release_dquot) (struct dquot *);
 int (*mark_dirty) (struct dquot *);
 int (*write_info) (struct super_block *, int);


 qsize_t *(*get_reserved_space) (struct inode *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct path;


struct quotactl_ops {
  template <typename, int = 0> struct __BYPASSquotactl_ops {};
  template <typename, int> friend struct __BYPASSquotactl_ops;
 int (*quota_on)(struct super_block *, int, int, struct path *);
 int (*quota_on_meta)(struct super_block *, int, int);
 int (*quota_off)(struct super_block *, int);
 int (*quota_sync)(struct super_block *, int);
 int (*get_info)(struct super_block *, int, struct if_dqinfo *);
 int (*set_info)(struct super_block *, int, struct if_dqinfo *);
 int (*get_dqblk)(struct super_block *, struct kqid, struct fs_disk_quota *);
 int (*set_dqblk)(struct super_block *, struct kqid, struct fs_disk_quota *);
 int (*get_xstate)(struct super_block *, struct fs_quota_stat *);
 int (*set_xstate)(struct super_block *, unsigned int, int);
 int (*get_xstatev)(struct super_block *, struct fs_quota_statv *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct quota_format_type {
  template <typename, int = 0> struct __BYPASSquota_format_type {};
  template <typename, int> friend struct __BYPASSquota_format_type;
 int qf_fmt_id;
 struct quota_format_ops *qf_ops;
 struct module *qf_owner;
 struct quota_format_type *qf_next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum {
 _DQUOT_USAGE_ENABLED = 0,
 _DQUOT_LIMITS_ENABLED,
 _DQUOT_SUSPENDED,


 _DQUOT_STATE_FLAGS
};
static inline unsigned int dquot_state_flag(unsigned int flags, int type)
{
 return flags << _DQUOT_STATE_FLAGS * type;
}

static inline unsigned int dquot_generic_flag(unsigned int flags, int type)
{
 return (flags >> _DQUOT_STATE_FLAGS * type) & ((1 << _DQUOT_USAGE_ENABLED) | (1 << _DQUOT_LIMITS_ENABLED) | (1 << _DQUOT_SUSPENDED));
}


extern void quota_send_warning(struct kqid qid, dev_t dev,
          char warntype);
struct quota_info {
  template <typename, int = 0> struct __BYPASSquota_info {};
  template <typename, int> friend struct __BYPASSquota_info;
 unsigned int flags;
 struct mutex dqio_mutex;
 struct mutex dqonoff_mutex;
 struct rw_semaphore dqptr_sem;
 struct inode *files[2];
 struct mem_dqinfo info[2];
 struct quota_format_ops *ops[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int register_quota_format(struct quota_format_type *fmt);
void unregister_quota_format(struct quota_format_type *fmt);

struct quota_module_name {
  template <typename, int = 0> struct __BYPASSquota_module_name {};
  template <typename, int> friend struct __BYPASSquota_module_name;
 int qm_fmt_id;
 char *qm_mod_name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum positive_aop_returns {
 AOP_WRITEPAGE_ACTIVATE = 0x80000,
 AOP_TRUNCATED_PAGE = 0x80001,
};
struct page;
struct address_space;
struct writeback_control;

struct iov_iter {
  template <typename, int = 0> struct __BYPASSiov_iter {};
  template <typename, int> friend struct __BYPASSiov_iter;
 struct iovec *iov;
 unsigned long nr_segs;
 size_t iov_offset;
 size_t count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

size_t iov_iter_copy_from_user_atomic(struct page *page,
  struct iov_iter *i, unsigned long offset, size_t bytes);
size_t iov_iter_copy_from_user(struct page *page,
  struct iov_iter *i, unsigned long offset, size_t bytes);
void iov_iter_advance(struct iov_iter *i, size_t bytes);
int iov_iter_fault_in_readable(struct iov_iter *i, size_t bytes);
size_t iov_iter_single_seg_count( struct iov_iter *i);

static inline void iov_iter_init(struct iov_iter *i,
   struct iovec *iov, unsigned long nr_segs,
   size_t count, size_t written)
{
 i->iov = iov;
 i->nr_segs = nr_segs;
 i->iov_offset = 0;
 i->count = count + written;

 iov_iter_advance(i, written);
}

static inline size_t iov_iter_count(struct iov_iter *i)
{
 return i->count;
}
typedef struct {
 size_t written;
 size_t count;
 union {
  char *buf;
  void *data;
 } arg;
 int error;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} read_descriptor_t;

typedef int (*read_actor_t)(read_descriptor_t *, struct page *,
  unsigned long, unsigned long);

struct address_space_operations {
  template <typename, int = 0> struct __BYPASSaddress_space_operations {};
  template <typename, int> friend struct __BYPASSaddress_space_operations;
 int (*writepage)(struct page *page, struct writeback_control *wbc);
 int (*readpage)(struct file *, struct page *);


 int (*writepages)(struct address_space *, struct writeback_control *);


 int (*set_page_dirty)(struct page *page);

 int (*readpages)(struct file *filp, struct address_space *mapping,
   struct list_head *pages, unsigned nr_pages);

 int (*write_begin)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);
 int (*write_end)(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);


 sector_t (*bmap)(struct address_space *, sector_t);
 void (*invalidatepage) (struct page *, unsigned int, unsigned int);
 int (*releasepage) (struct page *, gfp_t);
 void (*freepage)(struct page *);
 ssize_t (*direct_IO)(int, struct kiocb *, struct iovec *iov,
   loff_t offset, unsigned long nr_segs);
 int (*get_xip_mem)(struct address_space *, unsigned long, int,
      void **, unsigned long *);




 int (*migratepage) (struct address_space *,
   struct page *, struct page *, enum migrate_mode);
 int (*launder_page) (struct page *);
 int (*is_partially_uptodate) (struct page *, read_descriptor_t *,
     unsigned long);
 void (*is_dirty_writeback) (struct page *, bool *, bool *);
 int (*error_remove_page)(struct address_space *, struct page *);


 int (*swap_activate)(struct swap_info_struct *sis, struct file *file,
    sector_t *span);
 void (*swap_deactivate)(struct file *file);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct address_space_operations empty_aops;





int pagecache_write_begin(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned flags,
    struct page **pagep, void **fsdata);

int pagecache_write_end(struct file *, struct address_space *mapping,
    loff_t pos, unsigned len, unsigned copied,
    struct page *page, void *fsdata);

struct backing_dev_info;
struct address_space {
  template <typename, int = 0> struct __BYPASSaddress_space {};
  template <typename, int> friend struct __BYPASSaddress_space;
 struct inode *host;
 struct radix_tree_root page_tree;
 spinlock_t tree_lock;
 unsigned int i_mmap_writable;
 struct rb_root i_mmap;
 struct list_head i_mmap_nonlinear;
 struct mutex i_mmap_mutex;

 unsigned long nrpages;
 unsigned long writeback_index;
 struct address_space_operations *a_ops;
 unsigned long flags;
 struct backing_dev_info *backing_dev_info;
 spinlock_t private_lock;
 struct list_head private_list;
 void *private_data;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((aligned(sizeof(long))));





struct request_queue;

struct block_device {
  template <typename, int = 0> struct __BYPASSblock_device {};
  template <typename, int> friend struct __BYPASSblock_device;
 dev_t bd_dev;
 int bd_openers;
 struct inode * bd_inode;
 struct super_block * bd_super;
 struct mutex bd_mutex;
 struct list_head bd_inodes;
 void * bd_claiming;
 void * bd_holder;
 int bd_holders;
 bool bd_write_holder;

 struct list_head bd_holder_disks;

 struct block_device * bd_contains;
 unsigned bd_block_size;
 struct hd_struct * bd_part;

 unsigned bd_part_count;
 int bd_invalidated;
 struct gendisk * bd_disk;
 struct request_queue * bd_queue;
 struct list_head bd_list;






 unsigned long bd_private;


 int bd_fsfreeze_count;

 struct mutex bd_fsfreeze_mutex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
int mapping_tagged(struct address_space *mapping, int tag);




static inline int mapping_mapped(struct address_space *mapping)
{
 return !((&mapping->i_mmap)->rb_node == 0) ||
  !list_empty(&mapping->i_mmap_nonlinear);
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13address_space15i_mmap_writableE_602_0 {
  typedef TJP__ZN13address_space15i_mmap_writableE_602_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN13address_space15i_mmap_writableE_602(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN13address_space15i_mmap_writableE_602_0< unsigned int , ::address_space , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int mapping_writably_mapped(struct address_space *mapping)
{
 return __get__ZN13address_space15i_mmap_writableE_602(&mapping->i_mmap_writable) != 0;
}
struct posix_acl;
struct inode {
  template <typename, int = 0> struct __BYPASSinode {};
  template <typename, int> friend struct __BYPASSinode;
 umode_t i_mode;
 unsigned short i_opflags;
 kuid_t i_uid;
 kgid_t i_gid;
 unsigned int i_flags;


 struct posix_acl *i_acl;
 struct posix_acl *i_default_acl;


 struct inode_operations *i_op;
 struct super_block *i_sb;
 struct address_space *i_mapping;


 void *i_security;



 unsigned long i_ino;







 union {
  unsigned int i_nlink;
  unsigned int __i_nlink;
 };
 dev_t i_rdev;
 loff_t i_size;
 struct timespec i_atime;
 struct timespec i_mtime;
 struct timespec i_ctime;
 spinlock_t i_lock;
 unsigned short i_bytes;
 unsigned int i_blkbits;
 blkcnt_t i_blocks;






 unsigned long i_state;
 struct mutex i_mutex;

 unsigned long dirtied_when;

 struct hlist_node i_hash;
 struct list_head i_wb_list;
 struct list_head i_lru;
 struct list_head i_sb_list;
 union {
  struct hlist_head i_dentry;
  struct callback_head i_rcu;
 };
 u64 i_version;
 atomic_t i_count;
 atomic_t i_dio_count;
 atomic_t i_writecount;
 struct file_operations *i_fop;
 struct file_lock *i_flock;
 struct address_space i_data;

 struct dquot *i_dquot[2];

 struct list_head i_devices;
 union {
  struct pipe_inode_info *i_pipe;
  struct block_device *i_bdev;
  struct cdev *i_cdev;
 };

 __u32 i_generation;


 __u32 i_fsnotify_mask;
 struct hlist_head i_fsnotify_marks;



 atomic_t i_readcount;

 void *i_private;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline int inode_unhashed(struct inode *inode)
{
 return hlist_unhashed(&inode->i_hash);
}
enum inode_i_mutex_lock_class
{
 I_MUTEX_NORMAL,
 I_MUTEX_PARENT,
 I_MUTEX_CHILD,
 I_MUTEX_XATTR,
 I_MUTEX_NONDIR2
};

void lock_two_nondirectories(struct inode *, struct inode*);
void unlock_two_nondirectories(struct inode *, struct inode*);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_603_0 {
  typedef TJP__ZN5inode6i_sizeE_603_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_603(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_603_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}
static inline loff_t i_size_read( struct inode *inode)
{
 return __get__ZN5inode6i_sizeE_603(&inode->i_size);

}






static inline void i_size_write(struct inode *inode, loff_t i_size)
{
 inode->i_size = i_size;

}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode5i_uidE_604_0 {
  typedef TJP__ZN5inode5i_uidE_604_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline kuid_t __get__ZN5inode5i_uidE_604(kuid_t *source) {
  AC::ResultBuffer< ::kuid_t  > __result_buffer;
  typedef TJP__ZN5inode5i_uidE_604_0< ::kuid_t , ::inode , ::kuid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::kuid_t &)__result_buffer;
}
static inline uid_t i_uid_read( struct inode *inode)
{
 return from_kuid(&init_user_ns, __get__ZN5inode5i_uidE_604(&inode->i_uid));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode5i_gidE_605_0 {
  typedef TJP__ZN5inode5i_gidE_605_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline kgid_t __get__ZN5inode5i_gidE_605(kgid_t *source) {
  AC::ResultBuffer< ::kgid_t  > __result_buffer;
  typedef TJP__ZN5inode5i_gidE_605_0< ::kgid_t , ::inode , ::kgid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::kgid_t &)__result_buffer;
}
static inline gid_t i_gid_read( struct inode *inode)
{
 return from_kgid(&init_user_ns, __get__ZN5inode5i_gidE_605(&inode->i_gid));
}

static inline void i_uid_write(struct inode *inode, uid_t uid)
{
 inode->i_uid = make_kuid(&init_user_ns, uid);
}

static inline void i_gid_write(struct inode *inode, gid_t gid)
{
 inode->i_gid = make_kgid(&init_user_ns, gid);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_rdevE_606_0 {
  typedef TJP__ZN5inode6i_rdevE_606_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN5inode6i_rdevE_606(unsigned int *source) {
  ::dev_t __result_buffer;
  typedef TJP__ZN5inode6i_rdevE_606_0< ::dev_t , ::inode , ::dev_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dev_t &)__result_buffer;
}
static inline unsigned iminor( struct inode *inode)
{
 return ((unsigned int) ((__get__ZN5inode6i_rdevE_606(&inode->i_rdev)) & ((1U << 20) - 1)));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_rdevE_607_0 {
  typedef TJP__ZN5inode6i_rdevE_607_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN5inode6i_rdevE_607(unsigned int *source) {
  ::dev_t __result_buffer;
  typedef TJP__ZN5inode6i_rdevE_607_0< ::dev_t , ::inode , ::dev_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dev_t &)__result_buffer;
}
static inline unsigned imajor( struct inode *inode)
{
 return ((unsigned int) ((__get__ZN5inode6i_rdevE_607(&inode->i_rdev)) >> 20));
}

extern struct block_device *I_BDEV(struct inode *inode);

struct fown_struct {
  template <typename, int = 0> struct __BYPASSfown_struct {};
  template <typename, int> friend struct __BYPASSfown_struct;
 rwlock_t lock;
 struct pid *pid;
 enum pid_type pid_type;
 kuid_t uid, euid;
 int signum;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct file_ra_state {
  template <typename, int = 0> struct __BYPASSfile_ra_state {};
  template <typename, int> friend struct __BYPASSfile_ra_state;
 unsigned long start;
 unsigned int size;
 unsigned int async_size;


 unsigned int ra_pages;
 unsigned int mmap_miss;
 loff_t prev_pos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline int ra_has_index(struct file_ra_state *ra, unsigned long index)
{
 return (index >= ra->start &&
  index < ra->start + ra->size);
}




struct file {
  template <typename, int = 0> struct __BYPASSfile {};
  template <typename, int> friend struct __BYPASSfile;
 union {
  struct llist_node fu_llist;
  struct callback_head fu_rcuhead;
 } f_u;
 struct path f_path;

 struct inode *f_inode;
 struct file_operations *f_op;





 spinlock_t f_lock;
 atomic_long_t f_count;
 unsigned int f_flags;
 fmode_t f_mode;
 loff_t f_pos;
 struct fown_struct f_owner;
 struct cred *f_cred;
 struct file_ra_state f_ra;

 u64 f_version;

 void *f_security;


 void *private_data;



 struct list_head f_ep_links;
 struct list_head f_tfile_llink;

 struct address_space *f_mapping;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct file_handle {
  template <typename, int = 0> struct __BYPASSfile_handle {};
  template <typename, int> friend struct __BYPASSfile_handle;
 __u32 handle_bytes;
 int handle_type;

 unsigned char f_handle[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct file *get_file(struct file *f)
{



 return f;
}
static inline void file_take_write(struct file *filp) {}
static inline void file_release_write(struct file *filp) {}
static inline void file_reset_write(struct file *filp) {}
static inline void file_check_state(struct file *filp) {}
static inline int file_check_writeable(struct file *filp)
{
 return 0;
}
typedef struct files_struct *fl_owner_t;

struct file_lock_operations {
  template <typename, int = 0> struct __BYPASSfile_lock_operations {};
  template <typename, int> friend struct __BYPASSfile_lock_operations;
 void (*fl_copy_lock)(struct file_lock *, struct file_lock *);
 void (*fl_release_private)(struct file_lock *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct lock_manager_operations {
  template <typename, int = 0> struct __BYPASSlock_manager_operations {};
  template <typename, int> friend struct __BYPASSlock_manager_operations;
 int (*lm_compare_owner)(struct file_lock *, struct file_lock *);
 unsigned long (*lm_owner_key)(struct file_lock *);
 void (*lm_notify)(struct file_lock *);
 int (*lm_grant)(struct file_lock *, struct file_lock *, int);
 void (*lm_break)(struct file_lock *);
 int (*lm_change)(struct file_lock **, int);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct lock_manager {
  template <typename, int = 0> struct __BYPASSlock_manager {};
  template <typename, int> friend struct __BYPASSlock_manager;
 struct list_head list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct net;
void locks_start_grace(struct net *, struct lock_manager *);
void locks_end_grace(struct lock_manager *);
int locks_in_grace(struct net *);





struct nlm_lockowner;




struct nfs_lock_info {
  template <typename, int = 0> struct __BYPASSnfs_lock_info {};
  template <typename, int> friend struct __BYPASSnfs_lock_info;
 u32 state;
 struct nlm_lockowner *owner;
 struct list_head list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nfs4_lock_state;
struct nfs4_lock_info {
  template <typename, int = 0> struct __BYPASSnfs4_lock_info {};
  template <typename, int> friend struct __BYPASSnfs4_lock_info;
 struct nfs4_lock_state *owner;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct file_lock {
  template <typename, int = 0> struct __BYPASSfile_lock {};
  template <typename, int> friend struct __BYPASSfile_lock;
 struct file_lock *fl_next;
 struct hlist_node fl_link;
 struct list_head fl_block;
 fl_owner_t fl_owner;
 unsigned int fl_flags;
 unsigned char fl_type;
 unsigned int fl_pid;
 int fl_link_cpu;
 struct pid *fl_nspid;
 wait_queue_head_t fl_wait;
 struct file *fl_file;
 loff_t fl_start;
 loff_t fl_end;

 struct fasync_struct * fl_fasync;

 unsigned long fl_break_time;
 unsigned long fl_downgrade_time;

 struct file_lock_operations *fl_ops;
 struct lock_manager_operations *fl_lmops;
 union {
  struct nfs_lock_info nfs_fl;
  struct nfs4_lock_info nfs4_fl;
  struct {
   struct list_head link;
   int state;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} afs;
 } fl_u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct f_owner_ex {
  template <typename, int = 0> struct __BYPASSf_owner_ex {};
  template <typename, int> friend struct __BYPASSf_owner_ex;
 int type;
 __kernel_pid_t pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct flock {
  template <typename, int = 0> struct __BYPASSflock {};
  template <typename, int> friend struct __BYPASSflock;
 short l_type;
 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void send_sigio(struct fown_struct *fown, int fd, int band);


extern int fcntl_getlk(struct file *, struct flock *);
extern int fcntl_setlk(unsigned int, struct file *, unsigned int,
   struct flock *);







extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
extern int fcntl_getlease(struct file *filp);


void locks_free_lock(struct file_lock *fl);
extern void locks_init_lock(struct file_lock *);
extern struct file_lock * locks_alloc_lock(void);
extern void locks_copy_lock(struct file_lock *, struct file_lock *);
extern void __locks_copy_lock(struct file_lock *, struct file_lock *);
extern void locks_remove_posix(struct file *, fl_owner_t);
extern void locks_remove_flock(struct file *);
extern void locks_release_private(struct file_lock *);
extern void posix_test_lock(struct file *, struct file_lock *);
extern int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
extern int posix_lock_file_wait(struct file *, struct file_lock *);
extern int posix_unblock_lock(struct file_lock *);
extern int vfs_test_lock(struct file *, struct file_lock *);
extern int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
extern int vfs_cancel_lock(struct file *filp, struct file_lock *fl);
extern int flock_lock_file_wait(struct file *filp, struct file_lock *fl);
extern int __break_lease(struct inode *inode, unsigned int flags, unsigned int type);
extern void lease_get_mtime(struct inode *, struct timespec *time);
extern int generic_setlease(struct file *, long, struct file_lock **);
extern int vfs_setlease(struct file *, long, struct file_lock **);
extern int lease_modify(struct file_lock **, int);
extern int lock_may_read(struct inode *, loff_t start, unsigned long count);
extern int lock_may_write(struct inode *, loff_t start, unsigned long count);
struct fasync_struct {
  template <typename, int = 0> struct __BYPASSfasync_struct {};
  template <typename, int> friend struct __BYPASSfasync_struct;
 spinlock_t fa_lock;
 int magic;
 int fa_fd;
 struct fasync_struct *fa_next;
 struct file *fa_file;
 struct callback_head fa_rcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern int fasync_helper(int, struct file *, int, struct fasync_struct **);
extern struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
extern int fasync_remove_entry(struct file *, struct fasync_struct **);
extern struct fasync_struct *fasync_alloc(void);
extern void fasync_free(struct fasync_struct *);


extern void kill_fasync(struct fasync_struct **, int, int);

extern int __f_setown(struct file *filp, struct pid *, enum pid_type, int force);
extern int f_setown(struct file *filp, unsigned long arg, int force);
extern void f_delown(struct file *filp);
extern pid_t f_getown(struct file *filp);
extern int send_sigurg(struct fown_struct *fown);

struct mm_struct;
extern struct list_head super_blocks;
extern spinlock_t sb_lock;


enum {
 SB_UNFROZEN = 0,
 SB_FREEZE_WRITE = 1,
 SB_FREEZE_PAGEFAULT = 2,
 SB_FREEZE_FS = 3,

 SB_FREEZE_COMPLETE = 4,
};



struct sb_writers {
  template <typename, int = 0> struct __BYPASSsb_writers {};
  template <typename, int> friend struct __BYPASSsb_writers;

 struct percpu_counter counter[(SB_FREEZE_COMPLETE - 1)];
 wait_queue_head_t wait;

 int frozen;
 wait_queue_head_t wait_unfrozen;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct super_block {
  template <typename, int = 0> struct __BYPASSsuper_block {};
  template <typename, int> friend struct __BYPASSsuper_block;
 struct list_head s_list;
 dev_t s_dev;
 unsigned char s_blocksize_bits;
 unsigned long s_blocksize;
 loff_t s_maxbytes;
 struct file_system_type *s_type;
 struct super_operations *s_op;
 struct dquot_operations *dq_op;
 struct quotactl_ops *s_qcop;
 struct export_operations *s_export_op;
 unsigned long s_flags;
 unsigned long s_magic;
 struct dentry *s_root;
 struct rw_semaphore s_umount;
 int s_count;
 atomic_t s_active;

 void *s_security;

 struct xattr_handler **s_xattr;

 struct list_head s_inodes;
 struct hlist_bl_head s_anon;
 struct list_head s_mounts;
 struct block_device *s_bdev;
 struct backing_dev_info *s_bdi;
 struct mtd_info *s_mtd;
 struct hlist_node s_instances;
 struct quota_info s_dquot;

 struct sb_writers s_writers;

 char s_id[32];
 u8 s_uuid[16];

 void *s_fs_info;
 unsigned int s_max_links;
 fmode_t s_mode;



 u32 s_time_gran;





 struct mutex s_vfs_rename_mutex;





 char *s_subtype;





 char *s_options;
 struct dentry_operations *s_d_op;




 int cleancache_poolid;

 struct shrinker s_shrink;


 atomic_long_t s_remove_count;


 int s_readonly_remount;


 struct workqueue_struct *s_dio_done_wq;





 struct list_lru s_dentry_lru __attribute__((__aligned__((1 << (6)))));
 struct list_lru s_inode_lru __attribute__((__aligned__((1 << (6)))));
 struct callback_head rcu;




 int s_stack_depth;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct timespec current_fs_time(struct super_block *sb);





void __sb_end_write(struct super_block *sb, int level);
int __sb_start_write(struct super_block *sb, int level, bool wait);
static inline void sb_end_write(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_WRITE);
}
static inline void sb_end_pagefault(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_PAGEFAULT);
}
static inline void sb_end_intwrite(struct super_block *sb)
{
 __sb_end_write(sb, SB_FREEZE_FS);
}
static inline void sb_start_write(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_WRITE, _true);
}

static inline int sb_start_write_trylock(struct super_block *sb)
{
 return __sb_start_write(sb, SB_FREEZE_WRITE, _false);
}
static inline void sb_start_pagefault(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_PAGEFAULT, _true);
}
static inline void sb_start_intwrite(struct super_block *sb)
{
 __sb_start_write(sb, SB_FREEZE_FS, _true);
}


extern bool inode_owner_or_capable( struct inode *inode);




extern int vfs_create(struct inode *, struct dentry *, umode_t, bool);
extern int vfs_mkdir(struct inode *, struct dentry *, umode_t);
extern int vfs_mknod(struct inode *, struct dentry *, umode_t, dev_t);
extern int vfs_symlink(struct inode *, struct dentry *, char *);
extern int vfs_link(struct dentry *, struct inode *, struct dentry *, struct inode **);
extern int vfs_rmdir(struct inode *, struct dentry *);
extern int vfs_unlink(struct inode *, struct dentry *, struct inode **);
extern int vfs_rename(struct inode *, struct dentry *, struct inode *, struct dentry *, struct inode **);




extern void dentry_unhash(struct dentry *dentry);




extern void inode_init_owner(struct inode *inode, struct inode *dir,
   umode_t mode);



struct fiemap_extent_info {
  template <typename, int = 0> struct __BYPASSfiemap_extent_info {};
  template <typename, int> friend struct __BYPASSfiemap_extent_info;
 unsigned int fi_flags;
 unsigned int fi_extents_mapped;
 unsigned int fi_extents_max;
 struct fiemap_extent *fi_extents_start;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
int fiemap_fill_next_extent(struct fiemap_extent_info *info, u64 logical,
       u64 phys, u64 len, u32 flags);
int fiemap_check_flags(struct fiemap_extent_info *fieinfo, u32 fs_flags);
typedef int (*filldir_t)(void *, char *, int, loff_t, u64, unsigned);
struct dir_context {
  template <typename, int = 0> struct __BYPASSdir_context {};
  template <typename, int> friend struct __BYPASSdir_context;
 filldir_t actor;
 loff_t pos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct block_device_operations;







struct file_operations {
  template <typename, int = 0> struct __BYPASSfile_operations {};
  template <typename, int> friend struct __BYPASSfile_operations;
 struct module *owner;
 loff_t (*llseek) (struct file *, loff_t, int);
 ssize_t (*read) (struct file *, char *, size_t, loff_t *);
 ssize_t (*write) (struct file *, char *, size_t, loff_t *);
 ssize_t (*aio_read) (struct kiocb *, struct iovec *, unsigned long, loff_t);
 ssize_t (*aio_write) (struct kiocb *, struct iovec *, unsigned long, loff_t);
 int (*iterate) (struct file *, struct dir_context *);
 unsigned int (*poll) (struct file *, struct poll_table_struct *);
 long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
 int (*mmap) (struct file *, struct vm_area_struct *);
 int (*open) (struct inode *, struct file *);
 int (*flush) (struct file *, fl_owner_t id);
 int (*release) (struct inode *, struct file *);
 int (*fsync) (struct file *, loff_t, loff_t, int datasync);
 int (*aio_fsync) (struct kiocb *, int datasync);
 int (*fasync) (int, struct file *, int);
 int (*lock) (struct file *, int, struct file_lock *);
 ssize_t (*sendpage) (struct file *, struct page *, int, size_t, loff_t *, int);
 unsigned long (*get_unmapped_area)(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
 int (*check_flags)(int);
 int (*flock) (struct file *, int, struct file_lock *);
 ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
 ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
 int (*setlease)(struct file *, long, struct file_lock **);
 long (*fallocate)(struct file *file, int mode, loff_t offset,
     loff_t len);
 int (*show_fdinfo)(struct seq_file *m, struct file *f);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inode_operations {
  template <typename, int = 0> struct __BYPASSinode_operations {};
  template <typename, int> friend struct __BYPASSinode_operations;
 struct dentry * (*lookup) (struct inode *,struct dentry *, unsigned int);
 void * (*follow_link) (struct dentry *, struct nameidata *);
 int (*permission) (struct inode *, int);
 struct posix_acl * (*get_acl)(struct inode *, int);

 int (*readlink) (struct dentry *, char *,int);
 void (*put_link) (struct dentry *, struct nameidata *, void *);

 int (*create) (struct inode *,struct dentry *, umode_t, bool);
 int (*link) (struct dentry *,struct inode *,struct dentry *);
 int (*unlink) (struct inode *,struct dentry *);
 int (*symlink) (struct inode *,struct dentry *, char *);
 int (*mkdir) (struct inode *,struct dentry *,umode_t);
 int (*rmdir) (struct inode *,struct dentry *);
 int (*mknod) (struct inode *,struct dentry *,umode_t,dev_t);
 int (*rename) (struct inode *, struct dentry *,
   struct inode *, struct dentry *);
 int (*setattr) (struct dentry *, struct iattr *);
 int (*getattr) (struct vfsmount *mnt, struct dentry *, struct kstat *);
 int (*setxattr) (struct dentry *, char *, void *,size_t,int);
 ssize_t (*getxattr) (struct dentry *, char *, void *, size_t);
 ssize_t (*listxattr) (struct dentry *, char *, size_t);
 int (*removexattr) (struct dentry *, char *);
 int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 start,
        u64 len);
 int (*update_time)(struct inode *, struct timespec *, int);
 int (*atomic_open)(struct inode *, struct dentry *,
      struct file *, unsigned open_flag,
      umode_t create_mode, int *opened);
 int (*tmpfile) (struct inode *, struct dentry *, umode_t);
 int (*dentry_open)(struct dentry *, struct file *, struct cred *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));

ssize_t rw_copy_check_uvector(int type, struct iovec * uvector,
         unsigned long nr_segs, unsigned long fast_segs,
         struct iovec *fast_pointer,
         struct iovec **ret_pointer);

extern ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_write(struct file *, char *, size_t, loff_t *);
extern ssize_t vfs_readv(struct file *, struct iovec *,
  unsigned long, loff_t *);
extern ssize_t vfs_writev(struct file *, struct iovec *,
  unsigned long, loff_t *);

struct super_operations {
  template <typename, int = 0> struct __BYPASSsuper_operations {};
  template <typename, int> friend struct __BYPASSsuper_operations;
    struct inode *(*alloc_inode)(struct super_block *sb);
 void (*destroy_inode)(struct inode *);

    void (*dirty_inode) (struct inode *, int flags);
 int (*write_inode) (struct inode *, struct writeback_control *wbc);
 int (*drop_inode) (struct inode *);
 void (*evict_inode) (struct inode *);
 void (*put_super) (struct super_block *);
 int (*sync_fs)(struct super_block *sb, int wait);
 int (*freeze_fs) (struct super_block *);
 int (*unfreeze_fs) (struct super_block *);
 int (*statfs) (struct dentry *, struct kstatfs *);
 int (*remount_fs) (struct super_block *, int *, char *);
 void (*umount_begin) (struct super_block *);

 int (*show_options)(struct seq_file *, struct dentry *);
 int (*show_devname)(struct seq_file *, struct dentry *);
 int (*show_path)(struct seq_file *, struct dentry *);
 int (*show_stats)(struct seq_file *, struct dentry *);

 ssize_t (*quota_read)(struct super_block *, int, char *, size_t, loff_t);
 ssize_t (*quota_write)(struct super_block *, int, char *, size_t, loff_t);

 int (*bdev_try_to_free_page)(struct super_block*, struct page*, gfp_t);
 long (*nr_cached_objects)(struct super_block *, int);
 long (*free_cached_objects)(struct super_block *, long, int);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void __mark_inode_dirty(struct inode *, int);
static inline void mark_inode_dirty(struct inode *inode)
{
 __mark_inode_dirty(inode, ((1 << 0) | (1 << 1) | (1 << 2)));
}

static inline void mark_inode_dirty_sync(struct inode *inode)
{
 __mark_inode_dirty(inode, (1 << 0));
}

extern void inc_nlink(struct inode *inode);
extern void drop_nlink(struct inode *inode);
extern void clear_nlink(struct inode *inode);
extern void set_nlink(struct inode *inode, unsigned int nlink);

static inline void inode_inc_link_count(struct inode *inode)
{
 inc_nlink(inode);
 mark_inode_dirty(inode);
}

static inline void inode_dec_link_count(struct inode *inode)
{
 drop_nlink(inode);
 mark_inode_dirty(inode);
}
static inline void inode_inc_iversion(struct inode *inode)
{
       ;
       inode->i_version++;
       ;
}

enum file_time_flags {
 S_ATIME = 1,
 S_MTIME = 2,
 S_CTIME = 4,
 S_VERSION = 8,
};

extern void touch_atime( struct path *);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4file7f_flagsE_622_0 {
  typedef TJP__ZN4file7f_flagsE_622_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4file7f_flagsE_622(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN4file7f_flagsE_622_0< unsigned int , ::file , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void file_accessed(struct file *file)
{
 if (!(__get__ZN4file7f_flagsE_622(&file->f_flags) & 01000000))
  touch_atime(&file->f_path);
}

int sync_inode(struct inode *inode, struct writeback_control *wbc);
int sync_inode_metadata(struct inode *inode, int wait);

struct file_system_type {
  template <typename, int = 0> struct __BYPASSfile_system_type {};
  template <typename, int> friend struct __BYPASSfile_system_type;
 char *name;
 int fs_flags;






 struct dentry *(*mount) (struct file_system_type *, int,
         char *, void *);
 void (*kill_sb) (struct super_block *);
 struct module *owner;
 struct file_system_type * next;
 struct hlist_head fs_supers;

 struct lock_class_key s_lock_key;
 struct lock_class_key s_umount_key;
 struct lock_class_key s_vfs_rename_key;
 struct lock_class_key s_writers_key[(SB_FREEZE_COMPLETE - 1)];

 struct lock_class_key i_lock_key;
 struct lock_class_key i_mutex_key;
 struct lock_class_key i_mutex_dir_key;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



extern struct dentry *mount_ns(struct file_system_type *fs_type, int flags,
 void *data, int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_bdev(struct file_system_type *fs_type,
 int flags, char *dev_name, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_single(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_nodev(struct file_system_type *fs_type,
 int flags, void *data,
 int (*fill_super)(struct super_block *, void *, int));
extern struct dentry *mount_subtree(struct vfsmount *mnt, char *path);
void generic_shutdown_super(struct super_block *sb);
void kill_block_super(struct super_block *sb);
void kill_anon_super(struct super_block *sb);
void kill_litter_super(struct super_block *sb);
void deactivate_super(struct super_block *sb);
void deactivate_locked_super(struct super_block *sb);
int set_anon_super(struct super_block *s, void *data);
int get_anon_bdev(dev_t *);
void free_anon_bdev(dev_t);
struct super_block *sget(struct file_system_type *type,
   int (*test)(struct super_block *,void *),
   int (*set)(struct super_block *,void *),
   int flags, void *data);
extern struct dentry *mount_pseudo(struct file_system_type *, char *,
 struct super_operations *ops,
 struct dentry_operations *dops,
 unsigned long);
extern int register_filesystem(struct file_system_type *);
extern int unregister_filesystem(struct file_system_type *);
extern struct vfsmount *kern_mount_data(struct file_system_type *, void *data);

extern void kern_unmount(struct vfsmount *mnt);
extern int may_umount_tree(struct vfsmount *);
extern int may_umount(struct vfsmount *);
extern long do_mount( char *, char *, char *, unsigned long, void *);
extern struct vfsmount *collect_mounts(struct path *);
extern void drop_collected_mounts(struct vfsmount *);
extern int iterate_mounts(int (*)(struct vfsmount *, void *), void *,
     struct vfsmount *);
extern int vfs_statfs(struct path *, struct kstatfs *);
extern int user_statfs( char *, struct kstatfs *);
extern int fd_statfs(int, struct kstatfs *);
extern int vfs_ustat(dev_t, struct kstatfs *);
extern int freeze_super(struct super_block *super);
extern int thaw_super(struct super_block *super);
extern bool our_mnt(struct vfsmount *mnt);
extern bool fs_fully_visible(struct file_system_type *);

extern int current_umask(void);

extern void ihold(struct inode * inode);
extern void iput(struct inode *);


extern struct kobject *fs_kobj;







extern int locks_mandatory_locked(struct inode *);
extern int locks_mandatory_area(int, struct inode *, struct file *, loff_t, size_t);







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_623_0 {
  typedef TJP__ZN5inode6i_modeE_623_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_623(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_623_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}
static inline int __mandatory_lock(struct inode *ino)
{
 return (__get__ZN5inode6i_modeE_623(&ino->i_mode) & (0002000 | 00010)) == 0002000;
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11super_block7s_flagsE_624_0 {
  typedef TJP__ZN11super_block7s_flagsE_624_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11super_block7s_flagsE_624(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN11super_block7s_flagsE_624_0< unsigned long int , ::super_block , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode4i_sbE_625_0 {
  typedef TJP__ZN5inode4i_sbE_625_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline super_block * __get__ZN5inode4i_sbE_625(super_block * *source) {
  ::super_block *__result_buffer;
  typedef TJP__ZN5inode4i_sbE_625_0< ::super_block *, ::inode , ::super_block * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::super_block *&)__result_buffer;
}
static inline int mandatory_lock(struct inode *ino)
{
 return (__get__ZN11super_block7s_flagsE_624(&__get__ZN5inode4i_sbE_625(&(ino)->i_sb)->s_flags) & (64)) && __mandatory_lock(ino);
}

static inline int locks_verify_locked(struct inode *inode)
{
 if (mandatory_lock(inode))
  return locks_mandatory_locked(inode);
 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode7i_flockE_626_0 {
  typedef TJP__ZN5inode7i_flockE_626_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file_lock * __get__ZN5inode7i_flockE_626(file_lock * *source) {
  ::file_lock *__result_buffer;
  typedef TJP__ZN5inode7i_flockE_626_0< ::file_lock *, ::inode , ::file_lock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file_lock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_627_0 {
  typedef TJP__ZN5inode6i_sizeE_627_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_627(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_627_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_628_0 {
  typedef TJP__ZN5inode6i_sizeE_628_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_628(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_628_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_629_0 {
  typedef TJP__ZN5inode6i_sizeE_629_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_629(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_629_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_630_0 {
  typedef TJP__ZN5inode6i_sizeE_630_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_630(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_630_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_sizeE_631_0 {
  typedef TJP__ZN5inode6i_sizeE_631_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long long int __get__ZN5inode6i_sizeE_631(long long int *source) {
  ::loff_t __result_buffer;
  typedef TJP__ZN5inode6i_sizeE_631_0< ::loff_t , ::inode , ::loff_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::loff_t &)__result_buffer;
}
static inline int locks_verify_truncate(struct inode *inode,
        struct file *filp,
        loff_t size)
{
 if (__get__ZN5inode7i_flockE_626(&inode->i_flock) && mandatory_lock(inode))
  return locks_mandatory_area(
   2, inode, filp,
   size < __get__ZN5inode6i_sizeE_627(&inode->i_size) ? size : __get__ZN5inode6i_sizeE_628(&inode->i_size),
   (size < __get__ZN5inode6i_sizeE_629(&inode->i_size) ? __get__ZN5inode6i_sizeE_630(&inode->i_size) - size
    : size - __get__ZN5inode6i_sizeE_631(&inode->i_size))
  );
 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode7i_flockE_632_0 {
  typedef TJP__ZN5inode7i_flockE_632_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file_lock * __get__ZN5inode7i_flockE_632(file_lock * *source) {
  ::file_lock *__result_buffer;
  typedef TJP__ZN5inode7i_flockE_632_0< ::file_lock *, ::inode , ::file_lock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file_lock *&)__result_buffer;
}
static inline int break_lease(struct inode *inode, unsigned int mode)
{
 if (__get__ZN5inode7i_flockE_632(&inode->i_flock))
  return __break_lease(inode, mode, 32);
 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode7i_flockE_633_0 {
  typedef TJP__ZN5inode7i_flockE_633_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file_lock * __get__ZN5inode7i_flockE_633(file_lock * *source) {
  ::file_lock *__result_buffer;
  typedef TJP__ZN5inode7i_flockE_633_0< ::file_lock *, ::inode , ::file_lock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file_lock *&)__result_buffer;
}
static inline int break_deleg(struct inode *inode, unsigned int mode)
{
 if (__get__ZN5inode7i_flockE_633(&inode->i_flock))
  return __break_lease(inode, mode, 4);
 return 0;
}

static inline int try_break_deleg(struct inode *inode, struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(inode, 00000001|00004000);
 if (ret == -11 && delegated_inode) {
  *delegated_inode = inode;
  ihold(inode);
 }
 return ret;
}

static inline int break_deleg_wait(struct inode **delegated_inode)
{
 int ret;

 ret = break_deleg(*delegated_inode, 00000001);
 iput(*delegated_inode);
 *delegated_inode = 0;
 return ret;
}
struct audit_names;
struct filename {
  template <typename, int = 0> struct __BYPASSfilename {};
  template <typename, int> friend struct __BYPASSfilename;
 char *name;
 char *uptr;
 struct audit_names *aname;
 bool separate;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern long vfs_truncate(struct path *, loff_t);
extern int do_truncate(struct dentry *, loff_t start, unsigned int time_attrs,
         struct file *filp);
extern int do_fallocate(struct file *file, int mode, loff_t offset,
   loff_t len);
extern long do_sys_open(int dfd, char *filename, int flags,
   umode_t mode);
extern struct file *file_open_name(struct filename *, int, umode_t);
extern struct file *filp_open( char *, int, umode_t);
extern struct file *file_open_root(struct dentry *, struct vfsmount *,
       char *, int);
extern int vfs_open( struct path *, struct file *, struct cred *);
extern struct file * dentry_open( struct path *, int, struct cred *);
extern int filp_close(struct file *, fl_owner_t id);

extern struct filename *getname( char *);

enum {
 FILE_CREATED = 1,
 FILE_OPENED = 2
};
extern int finish_open(struct file *file, struct dentry *dentry,
   int (*open)(struct inode *, struct file *),
   int *opened);
extern int finish_no_open(struct file *file, struct dentry *dentry);



extern int ioctl_preallocate(struct file *filp, void *argp);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init_early(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) vfs_caches_init(unsigned long);

extern struct kmem_cache *names_cachep;

extern void final_putname(struct filename *name);






extern void putname(struct filename *name);



extern int register_blkdev(unsigned int, char *);
extern void unregister_blkdev(unsigned int, char *);
extern struct block_device *bdget(dev_t);
extern struct block_device *bdgrab(struct block_device *bdev);
extern void bd_set_size(struct block_device *, loff_t size);
extern void bd_forget(struct inode *inode);
extern void bdput(struct block_device *);
extern void invalidate_bdev(struct block_device *);
extern void iterate_bdevs(void (*)(struct block_device *, void *), void *);
extern int sync_blockdev(struct block_device *bdev);
extern void kill_bdev(struct block_device *);
extern struct super_block *freeze_bdev(struct block_device *);
extern void emergency_thaw_all(void);
extern int thaw_bdev(struct block_device *bdev, struct super_block *sb);
extern int fsync_bdev(struct block_device *);
extern int sb_is_blkdev_sb(struct super_block *sb);
extern int sync_filesystem(struct super_block *);
extern struct file_operations def_blk_fops;
extern struct file_operations def_chr_fops;
extern struct file_operations bad_sock_fops;

extern int ioctl_by_bdev(struct block_device *, unsigned, unsigned long);
extern int blkdev_ioctl(struct block_device *, fmode_t, unsigned, unsigned long);
extern long compat_blkdev_ioctl(struct file *, unsigned, unsigned long);
extern int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder);
extern struct block_device *blkdev_get_by_path( char *path, fmode_t mode,
            void *holder);
extern struct block_device *blkdev_get_by_dev(dev_t dev, fmode_t mode,
           void *holder);
extern void blkdev_put(struct block_device *bdev, fmode_t mode);

extern int bd_link_disk_holder(struct block_device *bdev, struct gendisk *disk);
extern void bd_unlink_disk_holder(struct block_device *bdev,
      struct gendisk *disk);
extern int alloc_chrdev_region(dev_t *, unsigned, unsigned, char *);
extern int register_chrdev_region(dev_t, unsigned, char *);
extern int __register_chrdev(unsigned int major, unsigned int baseminor,
        unsigned int count, char *name,
        struct file_operations *fops);
extern void __unregister_chrdev(unsigned int major, unsigned int baseminor,
    unsigned int count, char *name);
extern void unregister_chrdev_region(dev_t, unsigned);
extern void chrdev_show(struct seq_file *,off_t);

static inline int register_chrdev(unsigned int major, char *name,
      struct file_operations *fops)
{
 return __register_chrdev(major, 0, 256, name, fops);
}

static inline void unregister_chrdev(unsigned int major, char *name)
{
 __unregister_chrdev(major, 0, 256, name);
}







extern char *__bdevname(dev_t, char *buffer);
extern char *bdevname(struct block_device *bdev, char *buffer);
extern struct block_device *lookup_bdev( char *);
extern void blkdev_show(struct seq_file *,off_t);





extern void init_special_inode(struct inode *, umode_t, dev_t);


extern void make_bad_inode(struct inode *);
extern int is_bad_inode(struct inode *);
extern void check_disk_size_change(struct gendisk *disk,
       struct block_device *bdev);
extern int revalidate_disk(struct gendisk *);
extern int check_disk_change(struct block_device *);
extern int __invalidate_device(struct block_device *, bool);
extern int invalidate_partition(struct gendisk *, int);

unsigned long invalidate_mapping_pages(struct address_space *mapping,
     unsigned long start, unsigned long end);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_634_0 {
  typedef TJP__ZN5inode6i_modeE_634_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_634(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_634_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_635_0 {
  typedef TJP__ZN5inode6i_modeE_635_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_635(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_635_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_636_0 {
  typedef TJP__ZN5inode6i_modeE_636_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_636(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_636_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode9i_mappingE_637_0 {
  typedef TJP__ZN5inode9i_mappingE_637_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline address_space * __get__ZN5inode9i_mappingE_637(address_space * *source) {
  ::address_space *__result_buffer;
  typedef TJP__ZN5inode9i_mappingE_637_0< ::address_space *, ::inode , ::address_space * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::address_space *&)__result_buffer;
}
static inline void invalidate_remote_inode(struct inode *inode)
{
 if ((((__get__ZN5inode6i_modeE_634(&inode->i_mode)) & 00170000) == 0100000) || (((__get__ZN5inode6i_modeE_635(&inode->i_mode)) & 00170000) == 0040000) ||
     (((__get__ZN5inode6i_modeE_636(&inode->i_mode)) & 00170000) == 0120000))
  invalidate_mapping_pages(__get__ZN5inode9i_mappingE_637(&inode->i_mapping), 0, -1);
}
extern int invalidate_inode_pages2(struct address_space *mapping);
extern int invalidate_inode_pages2_range(struct address_space *mapping,
      unsigned long start, unsigned long end);
extern int write_inode_now(struct inode *, int);
extern int filemap_fdatawrite(struct address_space *);
extern int filemap_flush(struct address_space *);
extern int filemap_fdatawait(struct address_space *);
extern int filemap_fdatawait_range(struct address_space *, loff_t lstart,
       loff_t lend);
extern int filemap_write_and_wait(struct address_space *mapping);
extern int filemap_write_and_wait_range(struct address_space *mapping,
            loff_t lstart, loff_t lend);
extern int __filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end, int sync_mode);
extern int filemap_fdatawrite_range(struct address_space *mapping,
    loff_t start, loff_t end);

extern int vfs_fsync_range(struct file *file, loff_t start, loff_t end,
      int datasync);
extern int vfs_fsync(struct file *file, int datasync);
extern int generic_write_sync(struct file *file, loff_t pos, loff_t count);
extern void emergency_sync(void);
extern void emergency_remount(void);

extern sector_t bmap(struct inode *, sector_t);

extern int notify_change(struct dentry *, struct iattr *, struct inode **);
extern int inode_permission(struct inode *, int);
extern int __inode_permission(struct inode *, int);
extern int generic_permission(struct inode *, int);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_638_0 {
  typedef TJP__ZN5inode6i_modeE_638_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_638(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_638_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_639_0 {
  typedef TJP__ZN5inode6i_modeE_639_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_639(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_639_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}
static inline bool execute_ok(struct inode *inode)
{
 return (__get__ZN5inode6i_modeE_638(&inode->i_mode) & (00100|00010|00001)) || (((__get__ZN5inode6i_modeE_639(&inode->i_mode)) & 00170000) == 0040000);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4file7f_inodeE_640_0 {
  typedef TJP__ZN4file7f_inodeE_640_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inode * __get__ZN4file7f_inodeE_640(inode * *source) {
  ::inode *__result_buffer;
  typedef TJP__ZN4file7f_inodeE_640_0< ::inode *, ::file , ::inode * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inode *&)__result_buffer;
}
static inline struct inode *file_inode(struct file *f)
{
 return __get__ZN4file7f_inodeE_640(&f->f_inode);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_641_0 {
  typedef TJP__ZN5inode6i_modeE_641_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_641(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_641_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode4i_sbE_642_0 {
  typedef TJP__ZN5inode4i_sbE_642_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline super_block * __get__ZN5inode4i_sbE_642(super_block * *source) {
  ::super_block *__result_buffer;
  typedef TJP__ZN5inode4i_sbE_642_0< ::super_block *, ::inode , ::super_block * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::super_block *&)__result_buffer;
}
static inline void file_start_write(struct file *file)
{
 if (!(((__get__ZN5inode6i_modeE_641(&file_inode(file)->i_mode)) & 00170000) == 0100000))
  return;
 __sb_start_write(__get__ZN5inode4i_sbE_642(&file_inode(file)->i_sb), SB_FREEZE_WRITE, _true);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_645_0 {
  typedef TJP__ZN5inode6i_modeE_645_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_645(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_645_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode4i_sbE_647_0 {
  typedef TJP__ZN5inode4i_sbE_647_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline super_block * __get__ZN5inode4i_sbE_647(super_block * *source) {
  ::super_block *__result_buffer;
  typedef TJP__ZN5inode4i_sbE_647_0< ::super_block *, ::inode , ::super_block * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::super_block *&)__result_buffer;
}
static inline bool file_start_write_trylock(struct file *file)
{
 if (!(((__get__ZN5inode6i_modeE_645(&file_inode(file)->i_mode)) & 00170000) == 0100000))
  return _true;
 return __sb_start_write(__get__ZN5inode4i_sbE_647(&file_inode(file)->i_sb), SB_FREEZE_WRITE, _false);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_650_0 {
  typedef TJP__ZN5inode6i_modeE_650_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_650(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_650_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode4i_sbE_651_0 {
  typedef TJP__ZN5inode4i_sbE_651_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline super_block * __get__ZN5inode4i_sbE_651(super_block * *source) {
  ::super_block *__result_buffer;
  typedef TJP__ZN5inode4i_sbE_651_0< ::super_block *, ::inode , ::super_block * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::super_block *&)__result_buffer;
}
static inline void file_end_write(struct file *file)
{
 if (!(((__get__ZN5inode6i_modeE_650(&file_inode(file)->i_mode)) & 00170000) == 0100000))
  return;
 __sb_end_write(__get__ZN5inode4i_sbE_651(&file_inode(file)->i_sb), SB_FREEZE_WRITE);
}
static inline int get_write_access(struct inode *inode)
{
 return atomic_inc_unless_negative(&inode->i_writecount) ? 0 : -26;
}
static inline int deny_write_access(struct file *file)
{
 struct inode *inode = file_inode(file);
 return atomic_dec_unless_positive(&inode->i_writecount) ? 0 : -26;
}
static inline void put_write_access(struct inode * inode)
{
 ;
}
static inline void allow_write_access(struct file *file)
{
 if (file)
  ;
}
static inline bool inode_is_open_for_write( struct inode *inode)
{
 return atomic_read(&inode->i_writecount) > 0;
}


static inline void i_readcount_dec(struct inode *inode)
{
 (!atomic_read(&inode->i_readcount));
 ;
}
static inline void i_readcount_inc(struct inode *inode)
{
 ;
}
extern int do_pipe_flags(int *, int);

extern int kernel_read(struct file *, loff_t, char *, unsigned long);
extern ssize_t kernel_write(struct file *, char *, size_t, loff_t);
extern struct file * open_exec( char *);


extern int is_subdir(struct dentry *, struct dentry *);
extern int path_is_under(struct path *, struct path *);




extern loff_t default_llseek(struct file *file, loff_t offset, int whence);

extern loff_t vfs_llseek(struct file *file, loff_t offset, int whence);

extern int inode_init_always(struct super_block *, struct inode *);
extern void inode_init_once(struct inode *);
extern void address_space_init_once(struct address_space *mapping);
extern struct inode * igrab(struct inode *);
extern ino_t iunique(struct super_block *, ino_t);
extern int inode_needs_sync(struct inode *inode);
extern int generic_delete_inode(struct inode *inode);
static inline int generic_drop_inode(struct inode *inode)
{
 return !inode->i_nlink || inode_unhashed(inode);
}

extern struct inode *ilookup5_nowait(struct super_block *sb,
  unsigned long hashval, int (*test)(struct inode *, void *),
  void *data);
extern struct inode *ilookup5(struct super_block *sb, unsigned long hashval,
  int (*test)(struct inode *, void *), void *data);
extern struct inode *ilookup(struct super_block *sb, unsigned long ino);

extern struct inode * iget5_locked(struct super_block *, unsigned long, int (*test)(struct inode *, void *), int (*set)(struct inode *, void *), void *);
extern struct inode * iget_locked(struct super_block *, unsigned long);
extern int insert_inode_locked4(struct inode *, unsigned long, int (*test)(struct inode *, void *), void *);
extern int insert_inode_locked(struct inode *);



static inline void lockdep_annotate_inode_mutex_key(struct inode *inode) { };

extern void unlock_new_inode(struct inode *);
extern unsigned int get_next_ino(void);

extern void __iget(struct inode * inode);
extern void iget_failed(struct inode *);
extern void clear_inode(struct inode *);
extern void __destroy_inode(struct inode *);
extern struct inode *new_inode_pseudo(struct super_block *sb);
extern struct inode *new_inode(struct super_block *sb);
extern void free_inode_nonrcu(struct inode *inode);
extern int should_remove_suid(struct dentry *);
extern int file_remove_suid(struct file *);

extern void __insert_inode_hash(struct inode *, unsigned long hashval);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode5i_inoE_654_0 {
  typedef TJP__ZN5inode5i_inoE_654_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN5inode5i_inoE_654(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN5inode5i_inoE_654_0< unsigned long int , ::inode , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void insert_inode_hash(struct inode *inode)
{
 __insert_inode_hash(inode, __get__ZN5inode5i_inoE_654(&inode->i_ino));
}

extern void __remove_inode_hash(struct inode *);
static inline void remove_inode_hash(struct inode *inode)
{
 if (!inode_unhashed(inode))
  __remove_inode_hash(inode);
}

extern void inode_sb_list_add(struct inode *inode);


extern void submit_bio(int, struct bio *);
extern int bdev_read_only(struct block_device *);

extern int set_blocksize(struct block_device *, int);
extern int sb_set_blocksize(struct super_block *, int);
extern int sb_min_blocksize(struct super_block *, int);

extern int generic_file_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
extern int generic_file_remap_pages(struct vm_area_struct *, unsigned long addr,
  unsigned long size, unsigned long pgoff);
extern int file_read_actor(read_descriptor_t * desc, struct page *page, unsigned long offset, unsigned long size);
int generic_write_checks(struct file *file, loff_t *pos, size_t *count, int isblk);
extern ssize_t generic_file_aio_read(struct kiocb *, struct iovec *, unsigned long, loff_t);
extern ssize_t __generic_file_aio_write(struct kiocb *, struct iovec *, unsigned long,
  loff_t *);
extern ssize_t generic_file_aio_write(struct kiocb *, struct iovec *, unsigned long, loff_t);
extern ssize_t generic_file_direct_write(struct kiocb *, struct iovec *,
  unsigned long *, loff_t, loff_t *, size_t, size_t);
extern ssize_t generic_file_buffered_write(struct kiocb *, struct iovec *,
  unsigned long, loff_t, loff_t *, size_t, ssize_t);
extern ssize_t do_sync_read(struct file *filp, char *buf, size_t len, loff_t *ppos);
extern ssize_t do_sync_write(struct file *filp, char *buf, size_t len, loff_t *ppos);
extern int generic_segment_checks( struct iovec *iov,
  unsigned long *nr_segs, size_t *count, int access_flags);


extern ssize_t blkdev_aio_write(struct kiocb *iocb, struct iovec *iov,
    unsigned long nr_segs, loff_t pos);
extern int blkdev_fsync(struct file *filp, loff_t start, loff_t end,
   int datasync);
extern void block_sync_page(struct page *page);


extern ssize_t generic_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t default_file_splice_read(struct file *, loff_t *,
  struct pipe_inode_info *, size_t, unsigned int);
extern ssize_t generic_file_splice_write(struct pipe_inode_info *,
  struct file *, loff_t *, size_t, unsigned int);
extern ssize_t generic_splice_sendpage(struct pipe_inode_info *pipe,
  struct file *out, loff_t *, size_t len, unsigned int flags);
extern long do_splice_direct(struct file *in, loff_t *ppos, struct file *out,
  loff_t *opos, size_t len, unsigned int flags);


extern void
file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping);
extern loff_t noop_llseek(struct file *file, loff_t offset, int whence);
extern loff_t no_llseek(struct file *file, loff_t offset, int whence);
extern loff_t vfs_setpos(struct file *file, loff_t offset, loff_t maxsize);
extern loff_t generic_file_llseek(struct file *file, loff_t offset, int whence);
extern loff_t generic_file_llseek_size(struct file *file, loff_t offset,
  int whence, loff_t maxsize, loff_t eof);
extern loff_t fixed_size_llseek(struct file *file, loff_t offset,
  int whence, loff_t size);
extern int generic_file_open(struct inode * inode, struct file * filp);
extern int nonseekable_open(struct inode * inode, struct file * filp);
static inline int xip_truncate_page(struct address_space *mapping, loff_t from)
{
 return 0;
}



typedef void (dio_submit_t)(int rw, struct bio *bio, struct inode *inode,
       loff_t file_offset);

enum {

 DIO_LOCKING = 0x01,


 DIO_SKIP_HOLES = 0x02,
};

void dio_end_io(struct bio *bio, int error);

ssize_t __blockdev_direct_IO(int rw, struct kiocb *iocb, struct inode *inode,
 struct block_device *bdev, struct iovec *iov, loff_t offset,
 unsigned long nr_segs, get_block_t get_block, dio_iodone_t end_io,
 dio_submit_t submit_io, int flags);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11super_block6s_bdevE_655_0 {
  typedef TJP__ZN11super_block6s_bdevE_655_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline block_device * __get__ZN11super_block6s_bdevE_655(block_device * *source) {
  ::block_device *__result_buffer;
  typedef TJP__ZN11super_block6s_bdevE_655_0< ::block_device *, ::super_block , ::block_device * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::block_device *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode4i_sbE_656_0 {
  typedef TJP__ZN5inode4i_sbE_656_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline super_block * __get__ZN5inode4i_sbE_656(super_block * *source) {
  ::super_block *__result_buffer;
  typedef TJP__ZN5inode4i_sbE_656_0< ::super_block *, ::inode , ::super_block * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::super_block *&)__result_buffer;
}
static inline ssize_t blockdev_direct_IO(int rw, struct kiocb *iocb,
  struct inode *inode, struct iovec *iov, loff_t offset,
  unsigned long nr_segs, get_block_t get_block)
{
 return __blockdev_direct_IO(rw, iocb, inode, __get__ZN11super_block6s_bdevE_655(&__get__ZN5inode4i_sbE_656(&inode->i_sb)->s_bdev), iov,
        offset, nr_segs, get_block, 0, 0,
        DIO_LOCKING | DIO_SKIP_HOLES);
}


void inode_dio_wait(struct inode *inode);
void inode_dio_done(struct inode *inode);

extern struct file_operations generic_ro_fops;



extern int vfs_readlink(struct dentry *, char *, int, char *);
extern int page_readlink(struct dentry *, char *, int);
extern void *page_follow_link_light(struct dentry *, struct nameidata *);
extern void page_put_link(struct dentry *, struct nameidata *, void *);
extern int __page_symlink(struct inode *inode, char *symname, int len,
  int nofs);
extern int page_symlink(struct inode *inode, char *symname, int len);
extern struct inode_operations page_symlink_inode_operations;
extern void kfree_put_link(struct dentry *, struct nameidata *, void *);
extern int generic_readlink(struct dentry *, char *, int);
extern void generic_fillattr(struct inode *, struct kstat *);
int vfs_getattr_nosec(struct path *path, struct kstat *stat);
extern int vfs_getattr(struct path *, struct kstat *);
void __inode_add_bytes(struct inode *inode, loff_t bytes);
void inode_add_bytes(struct inode *inode, loff_t bytes);
void __inode_sub_bytes(struct inode *inode, loff_t bytes);
void inode_sub_bytes(struct inode *inode, loff_t bytes);
loff_t inode_get_bytes(struct inode *inode);
void inode_set_bytes(struct inode *inode, loff_t bytes);

extern int vfs_readdir(struct file *, filldir_t, void *);
extern int iterate_dir(struct file *, struct dir_context *);

extern int vfs_stat( char *, struct kstat *);
extern int vfs_lstat( char *, struct kstat *);
extern int vfs_fstat(unsigned int, struct kstat *);
extern int vfs_fstatat(int , char *, struct kstat *, int);

extern int do_vfs_ioctl(struct file *filp, unsigned int fd, unsigned int cmd,
      unsigned long arg);
extern int __generic_block_fiemap(struct inode *inode,
      struct fiemap_extent_info *fieinfo,
      loff_t start, loff_t len,
      get_block_t *get_block);
extern int generic_block_fiemap(struct inode *inode,
    struct fiemap_extent_info *fieinfo, u64 start,
    u64 len, get_block_t *get_block);

extern void get_filesystem(struct file_system_type *fs);
extern void put_filesystem(struct file_system_type *fs);
extern struct file_system_type *get_fs_type( char *name);
extern struct super_block *get_super(struct block_device *);
extern struct super_block *get_super_thawed(struct block_device *);
extern struct super_block *get_active_super(struct block_device *bdev);
extern void drop_super(struct super_block *sb);
extern void iterate_supers(void (*)(struct super_block *, void *), void *);
extern void iterate_supers_type(struct file_system_type *,
           void (*)(struct super_block *, void *), void *);

extern int dcache_dir_open(struct inode *, struct file *);
extern int dcache_dir_close(struct inode *, struct file *);
extern loff_t dcache_dir_lseek(struct file *, loff_t, int);
extern int dcache_readdir(struct file *, struct dir_context *);
extern int simple_setattr(struct dentry *, struct iattr *);
extern int simple_getattr(struct vfsmount *, struct dentry *, struct kstat *);
extern int simple_statfs(struct dentry *, struct kstatfs *);
extern int simple_open(struct inode *inode, struct file *file);
extern int simple_link(struct dentry *, struct inode *, struct dentry *);
extern int simple_unlink(struct inode *, struct dentry *);
extern int simple_rmdir(struct inode *, struct dentry *);
extern int simple_rename(struct inode *, struct dentry *, struct inode *, struct dentry *);
extern int noop_fsync(struct file *, loff_t, loff_t, int);
extern int simple_empty(struct dentry *);
extern int simple_readpage(struct file *file, struct page *page);
extern int simple_write_begin(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned flags,
   struct page **pagep, void **fsdata);
extern int simple_write_end(struct file *file, struct address_space *mapping,
   loff_t pos, unsigned len, unsigned copied,
   struct page *page, void *fsdata);
extern int always_delete_dentry( struct dentry *);
extern struct inode *alloc_anon_inode(struct super_block *);
extern struct dentry_operations simple_dentry_operations;

extern struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int flags);
extern ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
extern struct file_operations simple_dir_operations;
extern struct inode_operations simple_dir_inode_operations;
struct tree_descr {
  template <typename, int = 0> struct __BYPASStree_descr {};
  template <typename, int> friend struct __BYPASStree_descr; char *name; struct file_operations *ops; int mode; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dentry *d_alloc_name(struct dentry *, char *);
extern int simple_fill_super(struct super_block *, unsigned long, struct tree_descr *);
extern int simple_pin_fs(struct file_system_type *, struct vfsmount **mount, int *count);
extern void simple_release_fs(struct vfsmount **mount, int *count);

extern ssize_t simple_read_from_buffer(void *to, size_t count,
   loff_t *ppos, void *from, size_t available);
extern ssize_t simple_write_to_buffer(void *to, size_t available, loff_t *ppos,
  void *from, size_t count);

extern int generic_file_fsync(struct file *, loff_t, loff_t, int);

extern int generic_check_addressable(unsigned, u64);


extern int buffer_migrate_page(struct address_space *,
    struct page *, struct page *,
    enum migrate_mode);




extern int inode_change_ok( struct inode *, struct iattr *);
extern int inode_newsize_ok( struct inode *, loff_t offset);
extern void setattr_copy(struct inode *inode, struct iattr *attr);

extern int update_time(struct inode *, struct timespec *, int);
extern int file_update_time(struct file *file);

extern int generic_show_options(struct seq_file *m, struct dentry *root);
extern void save_mount_options(struct super_block *sb, char *options);
extern void replace_mount_options(struct super_block *sb, char *options);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode5i_inoE_659_0 {
  typedef TJP__ZN5inode5i_inoE_659_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN5inode5i_inoE_659(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN5inode5i_inoE_659_0< unsigned long int , ::inode , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_inodeE_660_0 {
  typedef TJP__ZN6dentry7d_inodeE_660_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inode * __get__ZN6dentry7d_inodeE_660(inode * *source) {
  ::inode *__result_buffer;
  typedef TJP__ZN6dentry7d_inodeE_660_0< ::inode *, ::dentry , ::inode * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inode *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry8d_parentE_661_0 {
  typedef TJP__ZN6dentry8d_parentE_661_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dentry * __get__ZN6dentry8d_parentE_661(dentry * *source) {
  ::dentry *__result_buffer;
  typedef TJP__ZN6dentry8d_parentE_661_0< ::dentry *, ::dentry , ::dentry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dentry *&)__result_buffer;
}
static inline ino_t parent_ino(struct dentry *dentry)
{
 ino_t res;





 ;
 res = __get__ZN5inode5i_inoE_659(&__get__ZN6dentry7d_inodeE_660(&__get__ZN6dentry8d_parentE_661(&dentry->d_parent)->d_inode)->i_ino);
 ;
 return res;
}







struct simple_transaction_argresp {
  template <typename, int = 0> struct __BYPASSsimple_transaction_argresp {};
  template <typename, int> friend struct __BYPASSsimple_transaction_argresp;
 ssize_t size;
 char data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



char *simple_transaction_get(struct file *file, char *buf,
    size_t size);
ssize_t simple_transaction_read(struct file *file, char *buf,
    size_t size, loff_t *pos);
int simple_transaction_release(struct inode *inode, struct file *file);

void simple_transaction_set(struct file *file, size_t n);
static inline __attribute__((format(printf, 1, 2)))
void __simple_attr_check_format( char *fmt, ...)
{

}

int simple_attr_open(struct inode *inode, struct file *file,
       int (*get)(void *, u64 *), int (*set)(void *, u64),
       char *fmt);
int simple_attr_release(struct inode *inode, struct file *file);
ssize_t simple_attr_read(struct file *file, char *buf,
    size_t len, loff_t *ppos);
ssize_t simple_attr_write(struct file *file, char *buf,
     size_t len, loff_t *ppos);

struct ctl_table;
int proc_nr_files(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_dentry(struct ctl_table *table, int write,
    void *buffer, size_t *lenp, loff_t *ppos);
int proc_nr_inodes(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);
int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) get_filesystem_list(char *buf);
static inline int is_sxid(umode_t mode)
{
 return (mode & 0004000) || ((mode & 0002000) && (mode & 00010));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode6i_modeE_662_0 {
  typedef TJP__ZN5inode6i_modeE_662_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN5inode6i_modeE_662(unsigned short int *source) {
  ::umode_t __result_buffer;
  typedef TJP__ZN5inode6i_modeE_662_0< ::umode_t , ::inode , ::umode_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::umode_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11super_block7s_flagsE_663_0 {
  typedef TJP__ZN11super_block7s_flagsE_663_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11super_block7s_flagsE_663(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN11super_block7s_flagsE_663_0< unsigned long int , ::super_block , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode4i_sbE_664_0 {
  typedef TJP__ZN5inode4i_sbE_664_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline super_block * __get__ZN5inode4i_sbE_664(super_block * *source) {
  ::super_block *__result_buffer;
  typedef TJP__ZN5inode4i_sbE_664_0< ::super_block *, ::inode , ::super_block * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::super_block *&)__result_buffer;
}
static inline void inode_has_no_xattr(struct inode *inode)
{
 if (!is_sxid(__get__ZN5inode6i_modeE_662(&inode->i_mode)) && (__get__ZN11super_block7s_flagsE_663(&__get__ZN5inode4i_sbE_664(&inode->i_sb)->s_flags) & (1<<28)))
  inode->i_flags |= 4096;
}

static inline bool dir_emit(struct dir_context *ctx,
       char *name, int namelen,
       u64 ino, unsigned type)
{
 return ctx->actor(ctx, name, namelen, ctx->pos, ino, type) == 0;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode5i_inoE_669_0 {
  typedef TJP__ZN5inode5i_inoE_669_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN5inode5i_inoE_669(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN5inode5i_inoE_669_0< unsigned long int , ::inode , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_inodeE_670_0 {
  typedef TJP__ZN6dentry7d_inodeE_670_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inode * __get__ZN6dentry7d_inodeE_670(inode * *source) {
  ::inode *__result_buffer;
  typedef TJP__ZN6dentry7d_inodeE_670_0< ::inode *, ::dentry , ::inode * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inode *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4path6dentryE_671_0 {
  typedef TJP__ZN4path6dentryE_671_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dentry * __get__ZN4path6dentryE_671(dentry * *source) {
  ::dentry *__result_buffer;
  typedef TJP__ZN4path6dentryE_671_0< ::dentry *, ::path , ::dentry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dentry *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4file6f_pathE_672_0 {
  typedef TJP__ZN4file6f_pathE_672_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline path __get__ZN4file6f_pathE_672(path *source) {
  AC::ResultBuffer< ::path  > __result_buffer;
  typedef TJP__ZN4file6f_pathE_672_0< ::path , ::file , ::path  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::path &)__result_buffer;
}
static inline bool dir_emit_dot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, ".", 1, ctx->pos,
     __get__ZN5inode5i_inoE_669(&__get__ZN6dentry7d_inodeE_670(&__get__ZN4path6dentryE_671(&__get__ZN4file6f_pathE_672(&file->f_path).dentry)->d_inode)->i_ino), 4) == 0;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4path6dentryE_675_0 {
  typedef TJP__ZN4path6dentryE_675_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dentry * __get__ZN4path6dentryE_675(dentry * *source) {
  ::dentry *__result_buffer;
  typedef TJP__ZN4path6dentryE_675_0< ::dentry *, ::path , ::dentry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dentry *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4file6f_pathE_676_0 {
  typedef TJP__ZN4file6f_pathE_676_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline path __get__ZN4file6f_pathE_676(path *source) {
  AC::ResultBuffer< ::path  > __result_buffer;
  typedef TJP__ZN4file6f_pathE_676_0< ::path , ::file , ::path  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::path &)__result_buffer;
}
static inline bool dir_emit_dotdot(struct file *file, struct dir_context *ctx)
{
 return ctx->actor(ctx, "..", 2, ctx->pos,
     parent_ino(__get__ZN4path6dentryE_675(&__get__ZN4file6f_pathE_676(&file->f_path).dentry)), 4) == 0;
}
static inline bool dir_emit_dots(struct file *file, struct dir_context *ctx)
{
 if (ctx->pos == 0) {
  if (!dir_emit_dot(file, ctx))
   return _false;
  ctx->pos = 1;
 }
 if (ctx->pos == 1) {
  if (!dir_emit_dotdot(file, ctx))
   return _false;
  ctx->pos = 2;
 }
 return _true;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode7i_flagsE_682_0 {
  typedef TJP__ZN5inode7i_flagsE_682_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN5inode7i_flagsE_682(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN5inode7i_flagsE_682_0< unsigned int , ::inode , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool dir_relax(struct inode *inode)
{
 ;
 ;
 return !(__get__ZN5inode7i_flagsE_682(&(inode)->i_flags) & 16);
}

struct mempolicy;
struct anon_vma;
struct anon_vma_chain;
struct file_ra_state;
struct user_struct;
struct writeback_control;
static inline void set_max_mapnr(unsigned long limit) { }


extern unsigned long totalram_pages;
extern void * high_memory;
extern int page_cluster;


extern int sysctl_legacy_va_layout;





extern unsigned long empty_zero_page[((1UL) << 12) / sizeof(unsigned long)]
 __attribute__((externally_visible));


extern spinlock_t pgd_lock;
extern struct list_head pgd_list;

extern struct mm_struct *pgd_page_get_mm(struct page *page);
static inline int pte_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 6);
}

static inline int pte_young(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 5);
}

static inline int pmd_young(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 5);
}

static inline int pte_write(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 1);
}

static inline int pte_file(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 6);
}

static inline int pte_huge(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 7);
}

static inline int pte_global(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 8);
}

static inline int pte_exec(pte_t pte)
{
 return !(pte_flags(pte) & (((pteval_t)(1)) << 63));
}

static inline int pte_special(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 9);
}

static inline unsigned long pte_pfn(pte_t pte)
{
 return (pte_val(pte) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1))))) >> 12;
}

static inline unsigned long pmd_pfn(pmd_t pmd)
{
 return (pmd_val(pmd) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1))))) >> 12;
}

static inline unsigned long pud_pfn(pud_t pud)
{
 return (pud_val(pud) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1))))) >> 12;
}



static inline int pmd_large(pmd_t pte)
{
 return pmd_flags(pte) & (((pteval_t)(1)) << 7);
}


static inline int pmd_trans_splitting(pmd_t pmd)
{
 return pmd_val(pmd) & (((pteval_t)(1)) << 9);
}

static inline int pmd_trans_huge(pmd_t pmd)
{
 return pmd_val(pmd) & (((pteval_t)(1)) << 7);
}

static inline int has_transparent_hugepage(void)
{
 return (__builtin_constant_p((0*32+ 3)) && ( ((((0*32+ 3))>>5)==0 && (1UL<<(((0*32+ 3))&31) & ((1<<((0*32+ 0) & 31))|0|(1<<((0*32+ 5) & 31))|(1<<((0*32+ 6) & 31))| (1<<((0*32+ 8) & 31))|0|(1<<((0*32+24) & 31))|(1<<((0*32+15) & 31))| (1<<((0*32+25) & 31))|(1<<((0*32+26) & 31))))) || ((((0*32+ 3))>>5)==1 && (1UL<<(((0*32+ 3))&31) & ((1<<((1*32+29) & 31))|0))) || ((((0*32+ 3))>>5)==2 && (1UL<<(((0*32+ 3))&31) & 0)) || ((((0*32+ 3))>>5)==3 && (1UL<<(((0*32+ 3))&31) & ((1<<((3*32+20) & 31))))) || ((((0*32+ 3))>>5)==4 && (1UL<<(((0*32+ 3))&31) & (0))) || ((((0*32+ 3))>>5)==5 && (1UL<<(((0*32+ 3))&31) & 0)) || ((((0*32+ 3))>>5)==6 && (1UL<<(((0*32+ 3))&31) & 0)) || ((((0*32+ 3))>>5)==7 && (1UL<<(((0*32+ 3))&31) & 0)) || ((((0*32+ 3))>>5)==8 && (1UL<<(((0*32+ 3))&31) & 0)) || ((((0*32+ 3))>>5)==9 && (1UL<<(((0*32+ 3))&31) & 0)) ) ? 1 : (__builtin_constant_p(((0*32+ 3))) ? constant_test_bit(((0*32+ 3)), ((unsigned long *)((&boot_cpu_data)->x86_capability))) : variable_test_bit(((0*32+ 3)), ((unsigned long *)((&boot_cpu_data)->x86_capability)))));
}


static inline pte_t pte_set_flags(pte_t pte, pteval_t set)
{
 pteval_t v = native_pte_val(pte);

 return native_make_pte(v | set);
}

static inline pte_t pte_clear_flags(pte_t pte, pteval_t clear)
{
 pteval_t v = native_pte_val(pte);

 return native_make_pte(v & ~clear);
}

static inline pte_t pte_mkclean(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 6));
}

static inline pte_t pte_mkold(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 5));
}

static inline pte_t pte_wrprotect(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 1));
}

static inline pte_t pte_mkexec(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 63));
}

static inline pte_t pte_mkdirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 11));
}

static inline pte_t pte_mkyoung(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 5));
}

static inline pte_t pte_mkwrite(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 1));
}

static inline pte_t pte_mkhuge(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 7));
}

static inline pte_t pte_clrhuge(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 7));
}

static inline pte_t pte_mkglobal(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 8));
}

static inline pte_t pte_clrglobal(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 8));
}

static inline pte_t pte_mkspecial(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 9));
}

static inline pmd_t pmd_set_flags(pmd_t pmd, pmdval_t set)
{
 pmdval_t v = native_pmd_val(pmd);

 return __pmd(v | set);
}

static inline pmd_t pmd_clear_flags(pmd_t pmd, pmdval_t clear)
{
 pmdval_t v = native_pmd_val(pmd);

 return __pmd(v & ~clear);
}

static inline pmd_t pmd_mkold(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 5));
}

static inline pmd_t pmd_wrprotect(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 1));
}

static inline pmd_t pmd_mkdirty(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 11));
}

static inline pmd_t pmd_mkhuge(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 7));
}

static inline pmd_t pmd_mkyoung(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 5));
}

static inline pmd_t pmd_mkwrite(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 1));
}

static inline pmd_t pmd_mknotpresent(pmd_t pmd)
{
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 0));
}

static inline int pte_soft_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 11);
}

static inline int pmd_soft_dirty(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 11);
}

static inline pte_t pte_mksoft_dirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 11));
}

static inline pmd_t pmd_mksoft_dirty(pmd_t pmd)
{
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 11));
}

static inline pte_t pte_file_clear_soft_dirty(pte_t pte)
{
 return pte_clear_flags(pte, (((pteval_t)(1)) << 11));
}

static inline pte_t pte_file_mksoft_dirty(pte_t pte)
{
 return pte_set_flags(pte, (((pteval_t)(1)) << 11));
}

static inline int pte_file_soft_dirty(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(1)) << 11);
}





static inline pgprotval_t massage_pgprot(pgprot_t pgprot)
{
 pgprotval_t protval = ((pgprot).pgprot);

 if (protval & (((pteval_t)(1)) << 0))
  protval &= __supported_pte_mask;

 return protval;
}

static inline pte_t pfn_pte(unsigned long page_nr, pgprot_t pgprot)
{
 return __pte(((phys_addr_t)page_nr << 12) |
       massage_pgprot(pgprot));
}

static inline pmd_t pfn_pmd(unsigned long page_nr, pgprot_t pgprot)
{
 return __pmd(((phys_addr_t)page_nr << 12) |
       massage_pgprot(pgprot));
}

static inline pte_t pte_modify(pte_t pte, pgprot_t newprot)
{
 pteval_t val = pte_val(pte);





 val &= (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 11));
 val |= massage_pgprot(newprot) & ~(((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 11));

 return __pte(val);
}

static inline pmd_t pmd_modify(pmd_t pmd, pgprot_t newprot)
{
 pmdval_t val = pmd_val(pmd);

 val &= ((((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 11)) | (((pteval_t)(1)) << 7));
 val |= massage_pgprot(newprot) & ~((((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 11)) | (((pteval_t)(1)) << 7));

 return __pmd(val);
}



static inline pgprot_t pgprot_modify(pgprot_t oldprot, pgprot_t newprot)
{
 pgprotval_t preservebits = ((oldprot).pgprot) & (((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))) | (((pteval_t)(1)) << 4) | (((pteval_t)(1)) << 3) | (((pteval_t)(1)) << 9) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6) | (((pteval_t)(1)) << 11));
 pgprotval_t addbits = ((newprot).pgprot);
 return ((pgprot_t) { (preservebits | addbits) } );
}





static inline int is_new_memtype_allowed(u64 paddr, unsigned long size,
      unsigned long flags,
      unsigned long new_flags)
{



 if (x86_platform.is_untracked_pat_range(paddr, paddr + size))
  return 1;







 if ((flags == ((((pteval_t)(1)) << 4)) &&
      new_flags == (0)) ||
     (flags == ((((pteval_t)(1)) << 3)) &&
      new_flags == (0))) {
  return 0;
 }

 return 1;
}

pmd_t *populate_extra_pmd(unsigned long vaddr);
pte_t *populate_extra_pte(unsigned long vaddr);





extern pud_t level3_kernel_pgt[512];
extern pud_t level3_ident_pgt[512];
extern pmd_t level2_kernel_pgt[512];
extern pmd_t level2_fixmap_pgt[512];
extern pmd_t level2_ident_pgt[512];
extern pgd_t init_level4_pgt[];



extern void paging_init(void);
struct mm_struct;

void set_pte_vaddr_pud(pud_t *pud_page, unsigned long vaddr, pte_t new_pte);


static inline void native_pte_clear(struct mm_struct *mm, unsigned long addr,
        pte_t *ptep)
{
 *ptep = native_make_pte(0);
}

static inline void native_set_pte(pte_t *ptep, pte_t pte)
{
 *ptep = pte;
}

static inline void native_set_pte_atomic(pte_t *ptep, pte_t pte)
{
 native_set_pte(ptep, pte);
}

static inline void native_set_pmd(pmd_t *pmdp, pmd_t pmd)
{
 *pmdp = pmd;
}

static inline void native_pmd_clear(pmd_t *pmd)
{
 native_set_pmd(pmd, native_make_pmd(0));
}

static inline pte_t native_ptep_get_and_clear(pte_t *xp)
{

 return native_make_pte(({ __typeof__ (*((&xp->pte))) __ret = ((0)); switch (sizeof(*((&xp->pte)))) { case 1: asm ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&xp->pte))) : : "memory", "cc"); break; case 2: asm ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&xp->pte))) : : "memory", "cc"); break; case 4: asm ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&xp->pte))) : : "memory", "cc"); break; case 8: asm ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&xp->pte))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }));







}

static inline pmd_t native_pmdp_get_and_clear(pmd_t *xp)
{

 return native_make_pmd(({ __typeof__ (*((&xp->pmd))) __ret = ((0)); switch (sizeof(*((&xp->pmd)))) { case 1: asm ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&xp->pmd))) : : "memory", "cc"); break; case 2: asm ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&xp->pmd))) : : "memory", "cc"); break; case 4: asm ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&xp->pmd))) : : "memory", "cc"); break; case 8: asm ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&xp->pmd))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; }));







}

static inline void native_set_pud(pud_t *pudp, pud_t pud)
{
 *pudp = pud;
}

static inline void native_pud_clear(pud_t *pud)
{
 native_set_pud(pud, native_make_pud(0));
}

static inline void native_set_pgd(pgd_t *pgdp, pgd_t pgd)
{
 *pgdp = pgd;
}

static inline void native_pgd_clear(pgd_t *pgd)
{
 native_set_pgd(pgd, native_make_pgd(0));
}

extern void sync_global_pgds(unsigned long start, unsigned long end);
static inline int pgd_large(pgd_t pgd) { return 0; }
extern int kern_addr_valid(unsigned long addr);
extern void cleanup_highmap(void);
extern void init_extra_mapping_uc(unsigned long phys, unsigned long size);
extern void init_extra_mapping_wb(unsigned long phys, unsigned long size);







static inline int pte_none(pte_t pte)
{
 return !pte.pte;
}


static inline int pte_same(pte_t a, pte_t b)
{
 return a.pte == b.pte;
}

static inline int pte_present(pte_t a)
{
 return pte_flags(a) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8) |
          (((pteval_t)(1)) << 8));
}


static inline bool pte_accessible(struct mm_struct *mm, pte_t a)
{
 if (pte_flags(a) & (((pteval_t)(1)) << 0))
  return _true;

 if ((pte_flags(a) & ((((pteval_t)(1)) << 8) | (((pteval_t)(1)) << 8))) &&
   mm_tlb_flush_pending(mm))
  return _true;

 return _false;
}

static inline int pte_hidden(pte_t pte)
{
 return pte_flags(pte) & (((pteval_t)(0)));
}

static inline int pmd_present(pmd_t pmd)
{






 return pmd_flags(pmd) & ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 8) | (((pteval_t)(1)) << 7) |
     (((pteval_t)(1)) << 8));
}

static inline int pmd_none(pmd_t pmd)
{


 return (unsigned long)native_pmd_val(pmd) == 0;
}

static inline unsigned long pmd_page_vaddr(pmd_t pmd)
{
 return (unsigned long)((void *)((unsigned long)(pmd_val(pmd) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))))+((unsigned long)(0xffff880000000000UL))));
}
static inline unsigned long pmd_index(unsigned long address)
{
 return (address >> 21) & (512 - 1);
}
static inline unsigned long pte_index(unsigned long address)
{
 return (address >> 12) & (512 - 1);
}

static inline pte_t *pte_offset_kernel(pmd_t *pmd, unsigned long address)
{
 return (pte_t *)pmd_page_vaddr(*pmd) + pte_index(address);
}

static inline int pmd_bad(pmd_t pmd)
{


 if ((pmd_flags(pmd) & ((((pteval_t)(1)) << 8)|(((pteval_t)(1)) << 0))) == (((pteval_t)(1)) << 8))
  return 0;

 return (pmd_flags(pmd) & ~(((pteval_t)(1)) << 2)) != ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6));
}

static inline unsigned long pages_to_mb(unsigned long npg)
{
 return npg >> (20 - 12);
}


static inline int pud_none(pud_t pud)
{
 return native_pud_val(pud) == 0;
}

static inline int pud_present(pud_t pud)
{
 return pud_flags(pud) & (((pteval_t)(1)) << 0);
}

static inline unsigned long pud_page_vaddr(pud_t pud)
{
 return (unsigned long)((void *)((unsigned long)((unsigned long)pud_val(pud) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))))+((unsigned long)(0xffff880000000000UL))));
}
static inline pmd_t *pmd_offset(pud_t *pud, unsigned long address)
{
 return (pmd_t *)pud_page_vaddr(*pud) + pmd_index(address);
}

static inline int pud_large(pud_t pud)
{
 return (pud_val(pud) & ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0))) ==
  ((((pteval_t)(1)) << 7) | (((pteval_t)(1)) << 0));
}

static inline int pud_bad(pud_t pud)
{
 return (pud_flags(pud) & ~(((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6)) | (((pteval_t)(1)) << 2))) != 0;
}
static inline int pgd_present(pgd_t pgd)
{
 return pgd_flags(pgd) & (((pteval_t)(1)) << 0);
}

static inline unsigned long pgd_page_vaddr(pgd_t pgd)
{
 return (unsigned long)((void *)((unsigned long)((unsigned long)pgd_val(pgd) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1)))))+((unsigned long)(0xffff880000000000UL))));
}
static inline unsigned long pud_index(unsigned long address)
{
 return (address >> 30) & (512 - 1);
}

static inline pud_t *pud_offset(pgd_t *pgd, unsigned long address)
{
 return (pud_t *)pgd_page_vaddr(*pgd) + pud_index(address);
}

static inline int pgd_bad(pgd_t pgd)
{
 return (pgd_flags(pgd) & ~(((pteval_t)(1)) << 2)) != ((((pteval_t)(1)) << 0) | (((pteval_t)(1)) << 1) | (((pteval_t)(1)) << 5) | (((pteval_t)(1)) << 6));
}

static inline int pgd_none(pgd_t pgd)
{
 return !native_pgd_val(pgd);
}
extern int direct_gbpages;
void init_mem_mapping(void);
void early_alloc_pgt_buf(void);


static inline pte_t native_local_ptep_get_and_clear(pte_t *ptep)
{
 pte_t res = *ptep;


 native_pte_clear(0, 0, ptep);
 return res;
}

static inline pmd_t native_local_pmdp_get_and_clear(pmd_t *pmdp)
{
 pmd_t res = *pmdp;

 native_pmd_clear(pmdp);
 return res;
}

static inline void native_set_pte_at(struct mm_struct *mm, unsigned long addr,
         pte_t *ptep , pte_t pte)
{
 native_set_pte(ptep, pte);
}

static inline void native_set_pmd_at(struct mm_struct *mm, unsigned long addr,
         pmd_t *pmdp , pmd_t pmd)
{
 native_set_pmd(pmdp, pmd);
}
struct vm_area_struct;


extern int ptep_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pte_t *ptep,
     pte_t entry, int dirty);


extern int ptep_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pte_t *ptep);


extern int ptep_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pte_t *ptep);


static inline pte_t ptep_get_and_clear(struct mm_struct *mm, unsigned long addr,
           pte_t *ptep)
{
 pte_t pte = native_ptep_get_and_clear(ptep);
 pte_update(mm, addr, ptep);
 return pte;
}


static inline pte_t ptep_get_and_clear_full(struct mm_struct *mm,
         unsigned long addr, pte_t *ptep,
         int full)
{
 pte_t pte;
 if (full) {




  pte = native_local_ptep_get_and_clear(ptep);
 } else {
  pte = ptep_get_and_clear(mm, addr, ptep);
 }
 return pte;
}


static inline void ptep_set_wrprotect(struct mm_struct *mm,
          unsigned long addr, pte_t *ptep)
{
 clear_bit(1, (unsigned long *)&ptep->pte);
 pte_update(mm, addr, ptep);
}






extern int pmdp_set_access_flags(struct vm_area_struct *vma,
     unsigned long address, pmd_t *pmdp,
     pmd_t entry, int dirty);


extern int pmdp_test_and_clear_young(struct vm_area_struct *vma,
         unsigned long addr, pmd_t *pmdp);


extern int pmdp_clear_flush_young(struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmdp);



extern void pmdp_splitting_flush(struct vm_area_struct *vma,
     unsigned long addr, pmd_t *pmdp);


static inline int pmd_write(pmd_t pmd)
{
 return pmd_flags(pmd) & (((pteval_t)(1)) << 1);
}


static inline pmd_t pmdp_get_and_clear(struct mm_struct *mm, unsigned long addr,
           pmd_t *pmdp)
{
 pmd_t pmd = native_pmdp_get_and_clear(pmdp);
 pmd_update(mm, addr, pmdp);
 return pmd;
}


static inline void pmdp_set_wrprotect(struct mm_struct *mm,
          unsigned long addr, pmd_t *pmdp)
{
 clear_bit(1, (unsigned long *)pmdp);
 pmd_update(mm, addr, pmdp);
}
static inline void clone_pgd_range(pgd_t *dst, pgd_t *src, int count)
{
       memcpy(dst, src, count * sizeof(pgd_t));
}


static inline int page_level_shift(enum pg_level level)
{
 return (12 - ( __builtin_constant_p(512) ? ( (512) < 1 ? ____ilog2_NaN() : (512) & (1ULL << 63) ? 63 : (512) & (1ULL << 62) ? 62 : (512) & (1ULL << 61) ? 61 : (512) & (1ULL << 60) ? 60 : (512) & (1ULL << 59) ? 59 : (512) & (1ULL << 58) ? 58 : (512) & (1ULL << 57) ? 57 : (512) & (1ULL << 56) ? 56 : (512) & (1ULL << 55) ? 55 : (512) & (1ULL << 54) ? 54 : (512) & (1ULL << 53) ? 53 : (512) & (1ULL << 52) ? 52 : (512) & (1ULL << 51) ? 51 : (512) & (1ULL << 50) ? 50 : (512) & (1ULL << 49) ? 49 : (512) & (1ULL << 48) ? 48 : (512) & (1ULL << 47) ? 47 : (512) & (1ULL << 46) ? 46 : (512) & (1ULL << 45) ? 45 : (512) & (1ULL << 44) ? 44 : (512) & (1ULL << 43) ? 43 : (512) & (1ULL << 42) ? 42 : (512) & (1ULL << 41) ? 41 : (512) & (1ULL << 40) ? 40 : (512) & (1ULL << 39) ? 39 : (512) & (1ULL << 38) ? 38 : (512) & (1ULL << 37) ? 37 : (512) & (1ULL << 36) ? 36 : (512) & (1ULL << 35) ? 35 : (512) & (1ULL << 34) ? 34 : (512) & (1ULL << 33) ? 33 : (512) & (1ULL << 32) ? 32 : (512) & (1ULL << 31) ? 31 : (512) & (1ULL << 30) ? 30 : (512) & (1ULL << 29) ? 29 : (512) & (1ULL << 28) ? 28 : (512) & (1ULL << 27) ? 27 : (512) & (1ULL << 26) ? 26 : (512) & (1ULL << 25) ? 25 : (512) & (1ULL << 24) ? 24 : (512) & (1ULL << 23) ? 23 : (512) & (1ULL << 22) ? 22 : (512) & (1ULL << 21) ? 21 : (512) & (1ULL << 20) ? 20 : (512) & (1ULL << 19) ? 19 : (512) & (1ULL << 18) ? 18 : (512) & (1ULL << 17) ? 17 : (512) & (1ULL << 16) ? 16 : (512) & (1ULL << 15) ? 15 : (512) & (1ULL << 14) ? 14 : (512) & (1ULL << 13) ? 13 : (512) & (1ULL << 12) ? 12 : (512) & (1ULL << 11) ? 11 : (512) & (1ULL << 10) ? 10 : (512) & (1ULL << 9) ? 9 : (512) & (1ULL << 8) ? 8 : (512) & (1ULL << 7) ? 7 : (512) & (1ULL << 6) ? 6 : (512) & (1ULL << 5) ? 5 : (512) & (1ULL << 4) ? 4 : (512) & (1ULL << 3) ? 3 : (512) & (1ULL << 2) ? 2 : (512) & (1ULL << 1) ? 1 : (512) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(512) <= 4) ? __ilog2_u32(512) : __ilog2_u64(512) )) + level * ( __builtin_constant_p(512) ? ( (512) < 1 ? ____ilog2_NaN() : (512) & (1ULL << 63) ? 63 : (512) & (1ULL << 62) ? 62 : (512) & (1ULL << 61) ? 61 : (512) & (1ULL << 60) ? 60 : (512) & (1ULL << 59) ? 59 : (512) & (1ULL << 58) ? 58 : (512) & (1ULL << 57) ? 57 : (512) & (1ULL << 56) ? 56 : (512) & (1ULL << 55) ? 55 : (512) & (1ULL << 54) ? 54 : (512) & (1ULL << 53) ? 53 : (512) & (1ULL << 52) ? 52 : (512) & (1ULL << 51) ? 51 : (512) & (1ULL << 50) ? 50 : (512) & (1ULL << 49) ? 49 : (512) & (1ULL << 48) ? 48 : (512) & (1ULL << 47) ? 47 : (512) & (1ULL << 46) ? 46 : (512) & (1ULL << 45) ? 45 : (512) & (1ULL << 44) ? 44 : (512) & (1ULL << 43) ? 43 : (512) & (1ULL << 42) ? 42 : (512) & (1ULL << 41) ? 41 : (512) & (1ULL << 40) ? 40 : (512) & (1ULL << 39) ? 39 : (512) & (1ULL << 38) ? 38 : (512) & (1ULL << 37) ? 37 : (512) & (1ULL << 36) ? 36 : (512) & (1ULL << 35) ? 35 : (512) & (1ULL << 34) ? 34 : (512) & (1ULL << 33) ? 33 : (512) & (1ULL << 32) ? 32 : (512) & (1ULL << 31) ? 31 : (512) & (1ULL << 30) ? 30 : (512) & (1ULL << 29) ? 29 : (512) & (1ULL << 28) ? 28 : (512) & (1ULL << 27) ? 27 : (512) & (1ULL << 26) ? 26 : (512) & (1ULL << 25) ? 25 : (512) & (1ULL << 24) ? 24 : (512) & (1ULL << 23) ? 23 : (512) & (1ULL << 22) ? 22 : (512) & (1ULL << 21) ? 21 : (512) & (1ULL << 20) ? 20 : (512) & (1ULL << 19) ? 19 : (512) & (1ULL << 18) ? 18 : (512) & (1ULL << 17) ? 17 : (512) & (1ULL << 16) ? 16 : (512) & (1ULL << 15) ? 15 : (512) & (1ULL << 14) ? 14 : (512) & (1ULL << 13) ? 13 : (512) & (1ULL << 12) ? 12 : (512) & (1ULL << 11) ? 11 : (512) & (1ULL << 10) ? 10 : (512) & (1ULL << 9) ? 9 : (512) & (1ULL << 8) ? 8 : (512) & (1ULL << 7) ? 7 : (512) & (1ULL << 6) ? 6 : (512) & (1ULL << 5) ? 5 : (512) & (1ULL << 4) ? 4 : (512) & (1ULL << 3) ? 3 : (512) & (1ULL << 2) ? 2 : (512) & (1ULL << 1) ? 1 : (512) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(512) <= 4) ? __ilog2_u32(512) : __ilog2_u64(512) );
}
static inline unsigned long page_level_size(enum pg_level level)
{
 return 1UL << page_level_shift(level);
}
static inline unsigned long page_level_mask(enum pg_level level)
{
 return ~(page_level_size(level) - 1);
}





static inline void update_mmu_cache(struct vm_area_struct *vma,
  unsigned long addr, pte_t *ptep)
{
}
static inline void update_mmu_cache_pmd(struct vm_area_struct *vma,
  unsigned long addr, pmd_t *pmd)
{
}

static inline pte_t pte_swp_mksoft_dirty(pte_t pte)
{
 (0);
 return pte_set_flags(pte, (((pteval_t)(1)) << 7));
}

static inline int pte_swp_soft_dirty(pte_t pte)
{
 (0);
 return pte_flags(pte) & (((pteval_t)(1)) << 7);
}

static inline pte_t pte_swp_clear_soft_dirty(pte_t pte)
{
 (0);
 return pte_clear_flags(pte, (((pteval_t)(1)) << 7));
}

static inline void pte_clear_not_present_full(struct mm_struct *mm,
           unsigned long address,
           pte_t *ptep,
           int full)
{
 pte_clear(mm, address, ptep);
}



extern pte_t ptep_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pte_t *ptep);



extern pmd_t pmdp_clear_flush(struct vm_area_struct *vma,
         unsigned long address,
         pmd_t *pmdp);
extern void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,
           pgtable_t pgtable);



extern pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp);



extern void pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,
       pmd_t *pmdp);
static inline int pmd_same(pmd_t pmd_a, pmd_t pmd_b)
{
 return pmd_val(pmd_a) == pmd_val(pmd_b);
}
void pgd_clear_bad(pgd_t *);
void pud_clear_bad(pud_t *);
void pmd_clear_bad(pmd_t *);

static inline int pgd_none_or_clear_bad(pgd_t *pgd)
{
 if (pgd_none(*pgd))
  return 1;
 if (__builtin_expect(!!(pgd_bad(*pgd)), 0)) {
  pgd_clear_bad(pgd);
  return 1;
 }
 return 0;
}

static inline int pud_none_or_clear_bad(pud_t *pud)
{
 if (pud_none(*pud))
  return 1;
 if (__builtin_expect(!!(pud_bad(*pud)), 0)) {
  pud_clear_bad(pud);
  return 1;
 }
 return 0;
}

static inline int pmd_none_or_clear_bad(pmd_t *pmd)
{
 if (pmd_none(*pmd))
  return 1;
 if (__builtin_expect(!!(pmd_bad(*pmd)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}

static inline pte_t __ptep_modify_prot_start(struct mm_struct *mm,
          unsigned long addr,
          pte_t *ptep)
{





 return ptep_get_and_clear(mm, addr, ptep);
}

static inline void __ptep_modify_prot_commit(struct mm_struct *mm,
          unsigned long addr,
          pte_t *ptep, pte_t pte)
{




 set_pte_at(mm, addr, ptep, pte);
}
extern int track_pfn_remap(struct vm_area_struct *vma, pgprot_t *prot,
      unsigned long pfn, unsigned long addr,
      unsigned long size);
extern int track_pfn_insert(struct vm_area_struct *vma, pgprot_t *prot,
       unsigned long pfn);
extern int track_pfn_copy(struct vm_area_struct *vma);
extern void untrack_pfn(struct vm_area_struct *vma, unsigned long pfn,
   unsigned long size);
static inline int is_zero_pfn(unsigned long pfn)
{
 extern unsigned long zero_pfn;
 return pfn == zero_pfn;
}

static inline unsigned long my_zero_pfn(unsigned long addr)
{
 extern unsigned long zero_pfn;
 return zero_pfn;
}
static inline pmd_t pmd_read_atomic(pmd_t *pmdp)
{





 return *pmdp;
}



static inline int pmd_move_must_withdraw(spinlock_t *new_pmd_ptl,
      spinlock_t *old_pmd_ptl)
{




 return new_pmd_ptl != old_pmd_ptl;
}
static inline int pmd_none_or_trans_huge_or_clear_bad(pmd_t *pmd)
{
 pmd_t pmdval = pmd_read_atomic(pmd);
 __asm__ __volatile__("": : :"memory");

 if (pmd_none(pmdval) || pmd_trans_huge(pmdval))
  return 1;
 if (__builtin_expect(!!(pmd_bad(pmdval)), 0)) {
  pmd_clear_bad(pmd);
  return 1;
 }
 return 0;
}
static inline int pmd_trans_unstable(pmd_t *pmd)
{

 return pmd_none_or_trans_huge_or_clear_bad(pmd);



}
static inline int pte_numa(pte_t pte)
{
 return (pte_flags(pte) &
  ((((pteval_t)(1)) << 8)|(((pteval_t)(1)) << 0))) == (((pteval_t)(1)) << 8);
}



static inline int pmd_numa(pmd_t pmd)
{
 return (pmd_flags(pmd) &
  ((((pteval_t)(1)) << 8)|(((pteval_t)(1)) << 0))) == (((pteval_t)(1)) << 8);
}
static inline pte_t pte_mknonnuma(pte_t pte)
{
 pte = pte_clear_flags(pte, (((pteval_t)(1)) << 8));
 return pte_set_flags(pte, (((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 5));
}



static inline pmd_t pmd_mknonnuma(pmd_t pmd)
{
 pmd = pmd_clear_flags(pmd, (((pteval_t)(1)) << 8));
 return pmd_set_flags(pmd, (((pteval_t)(1)) << 0)|(((pteval_t)(1)) << 5));
}



static inline pte_t pte_mknuma(pte_t pte)
{
 pte = pte_set_flags(pte, (((pteval_t)(1)) << 8));
 return pte_clear_flags(pte, (((pteval_t)(1)) << 0));
}



static inline pmd_t pmd_mknuma(pmd_t pmd)
{
 pmd = pmd_set_flags(pmd, (((pteval_t)(1)) << 8));
 return pmd_clear_flags(pmd, (((pteval_t)(1)) << 0));
}






extern unsigned long sysctl_user_reserve_kbytes;
extern unsigned long sysctl_admin_reserve_kbytes;
extern struct kmem_cache *vm_area_cachep;
extern pgprot_t protection_map[16];
struct vm_fault {
  template <typename, int = 0> struct __BYPASSvm_fault {};
  template <typename, int> friend struct __BYPASSvm_fault;
 unsigned int flags;
 unsigned long pgoff;
 void *virtual_address;

 struct page *page;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct vm_operations_struct {
  template <typename, int = 0> struct __BYPASSvm_operations_struct {};
  template <typename, int> friend struct __BYPASSvm_operations_struct;
 void (*open)(struct vm_area_struct * area);
 void (*close)(struct vm_area_struct * area);
 int (*fault)(struct vm_area_struct *vma, struct vm_fault *vmf);



 int (*page_mkwrite)(struct vm_area_struct *vma, struct vm_fault *vmf);




 int (*access)(struct vm_area_struct *vma, unsigned long addr,
        void *buf, int len, int write);
 int (*set_policy)(struct vm_area_struct *vma, struct mempolicy *_new);
 struct mempolicy *(*get_policy)(struct vm_area_struct *vma,
     unsigned long addr);
 int (*migrate)(struct vm_area_struct *vma, nodemask_t *from,
  nodemask_t *to, unsigned long flags);


 int (*remap_pages)(struct vm_area_struct *vma, unsigned long addr,
      unsigned long size, unsigned long pgoff);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct mmu_gather;
struct inode;





static inline void set_freepage_migratetype(struct page *page, int migratetype)
{
 page->index = migratetype;
}


static inline int get_freepage_migratetype(struct page *page)
{
 return page->index;
}





enum pageflags {
 PG_locked,
 PG_error,
 PG_referenced,
 PG_uptodate,
 PG_dirty,
 PG_lru,
 PG_active,
 PG_slab,
 PG_owner_priv_1,
 PG_arch_1,
 PG_reserved,
 PG_private,
 PG_private_2,
 PG_writeback,

 PG_head,
 PG_tail,



 PG_swapcache,
 PG_mappedtodisk,
 PG_reclaim,
 PG_swapbacked,
 PG_unevictable,

 PG_mlocked,


 PG_uncached,


 PG_hwpoison,


 PG_compound_lock,

 PG_readaheadunused,
 __NR_PAGEFLAGS,


 PG_checked = PG_owner_priv_1,





 PG_fscache = PG_private_2,


 PG_pinned = PG_owner_priv_1,
 PG_savepinned = PG_dirty,


 PG_slob_free = PG_private,
};
struct page;

static inline int PageLocked( struct page *page) { return (__builtin_constant_p((PG_locked)) ? constant_test_bit((PG_locked), (&page->flags)) : variable_test_bit((PG_locked), (&page->flags))); }
static inline int PageError( struct page *page) { return (__builtin_constant_p((PG_error)) ? constant_test_bit((PG_error), (&page->flags)) : variable_test_bit((PG_error), (&page->flags))); } static inline void SetPageError(struct page *page) { set_bit(PG_error, &page->flags); } static inline void ClearPageError(struct page *page) { clear_bit(PG_error, &page->flags); } static inline int TestClearPageError(struct page *page) { return test_and_clear_bit(PG_error, &page->flags); }
static inline int PageReferenced( struct page *page) { return (__builtin_constant_p((PG_referenced)) ? constant_test_bit((PG_referenced), (&page->flags)) : variable_test_bit((PG_referenced), (&page->flags))); } static inline void SetPageReferenced(struct page *page) { set_bit(PG_referenced, &page->flags); } static inline void ClearPageReferenced(struct page *page) { clear_bit(PG_referenced, &page->flags); } static inline int TestClearPageReferenced(struct page *page) { return test_and_clear_bit(PG_referenced, &page->flags); }
static inline int PageDirty( struct page *page) { return (__builtin_constant_p((PG_dirty)) ? constant_test_bit((PG_dirty), (&page->flags)) : variable_test_bit((PG_dirty), (&page->flags))); } static inline void SetPageDirty(struct page *page) { set_bit(PG_dirty, &page->flags); } static inline void ClearPageDirty(struct page *page) { clear_bit(PG_dirty, &page->flags); } static inline int TestSetPageDirty(struct page *page) { return test_and_set_bit(PG_dirty, &page->flags); } static inline int TestClearPageDirty(struct page *page) { return test_and_clear_bit(PG_dirty, &page->flags); } static inline void __ClearPageDirty(struct page *page) { __clear_bit(PG_dirty, &page->flags); }
static inline int PageLRU( struct page *page) { return (__builtin_constant_p((PG_lru)) ? constant_test_bit((PG_lru), (&page->flags)) : variable_test_bit((PG_lru), (&page->flags))); } static inline void SetPageLRU(struct page *page) { set_bit(PG_lru, &page->flags); } static inline void ClearPageLRU(struct page *page) { clear_bit(PG_lru, &page->flags); } static inline void __ClearPageLRU(struct page *page) { __clear_bit(PG_lru, &page->flags); }
static inline int PageActive( struct page *page) { return (__builtin_constant_p((PG_active)) ? constant_test_bit((PG_active), (&page->flags)) : variable_test_bit((PG_active), (&page->flags))); } static inline void SetPageActive(struct page *page) { set_bit(PG_active, &page->flags); } static inline void ClearPageActive(struct page *page) { clear_bit(PG_active, &page->flags); } static inline void __ClearPageActive(struct page *page) { __clear_bit(PG_active, &page->flags); }
 static inline int TestClearPageActive(struct page *page) { return test_and_clear_bit(PG_active, &page->flags); }
static inline int PageSlab( struct page *page) { return (__builtin_constant_p((PG_slab)) ? constant_test_bit((PG_slab), (&page->flags)) : variable_test_bit((PG_slab), (&page->flags))); } static inline void __SetPageSlab(struct page *page) { __set_bit(PG_slab, &page->flags); } static inline void __ClearPageSlab(struct page *page) { __clear_bit(PG_slab, &page->flags); }
static inline int PageChecked( struct page *page) { return (__builtin_constant_p((PG_checked)) ? constant_test_bit((PG_checked), (&page->flags)) : variable_test_bit((PG_checked), (&page->flags))); } static inline void SetPageChecked(struct page *page) { set_bit(PG_checked, &page->flags); } static inline void ClearPageChecked(struct page *page) { clear_bit(PG_checked, &page->flags); }
static inline int PagePinned( struct page *page) { return (__builtin_constant_p((PG_pinned)) ? constant_test_bit((PG_pinned), (&page->flags)) : variable_test_bit((PG_pinned), (&page->flags))); } static inline void SetPagePinned(struct page *page) { set_bit(PG_pinned, &page->flags); } static inline void ClearPagePinned(struct page *page) { clear_bit(PG_pinned, &page->flags); } static inline int TestSetPagePinned(struct page *page) { return test_and_set_bit(PG_pinned, &page->flags); } static inline int TestClearPagePinned(struct page *page) { return test_and_clear_bit(PG_pinned, &page->flags); }
static inline int PageSavePinned( struct page *page) { return (__builtin_constant_p((PG_savepinned)) ? constant_test_bit((PG_savepinned), (&page->flags)) : variable_test_bit((PG_savepinned), (&page->flags))); } static inline void SetPageSavePinned(struct page *page) { set_bit(PG_savepinned, &page->flags); } static inline void ClearPageSavePinned(struct page *page) { clear_bit(PG_savepinned, &page->flags); };
static inline int PageReserved( struct page *page) { return (__builtin_constant_p((PG_reserved)) ? constant_test_bit((PG_reserved), (&page->flags)) : variable_test_bit((PG_reserved), (&page->flags))); } static inline void SetPageReserved(struct page *page) { set_bit(PG_reserved, &page->flags); } static inline void ClearPageReserved(struct page *page) { clear_bit(PG_reserved, &page->flags); } static inline void __ClearPageReserved(struct page *page) { __clear_bit(PG_reserved, &page->flags); }
static inline int PageSwapBacked( struct page *page) { return (__builtin_constant_p((PG_swapbacked)) ? constant_test_bit((PG_swapbacked), (&page->flags)) : variable_test_bit((PG_swapbacked), (&page->flags))); } static inline void SetPageSwapBacked(struct page *page) { set_bit(PG_swapbacked, &page->flags); } static inline void ClearPageSwapBacked(struct page *page) { clear_bit(PG_swapbacked, &page->flags); } static inline void __ClearPageSwapBacked(struct page *page) { __clear_bit(PG_swapbacked, &page->flags); }

static inline int PageSlobFree( struct page *page) { return (__builtin_constant_p((PG_slob_free)) ? constant_test_bit((PG_slob_free), (&page->flags)) : variable_test_bit((PG_slob_free), (&page->flags))); } static inline void __SetPageSlobFree(struct page *page) { __set_bit(PG_slob_free, &page->flags); } static inline void __ClearPageSlobFree(struct page *page) { __clear_bit(PG_slob_free, &page->flags); }







       


static inline int PagePrivate( struct page *page) { return (__builtin_constant_p((PG_private)) ? constant_test_bit((PG_private), (&page->flags)) : variable_test_bit((PG_private), (&page->flags))); } static inline void SetPagePrivate(struct page *page) { set_bit(PG_private, &page->flags); } static inline void ClearPagePrivate(struct page *page) { clear_bit(PG_private, &page->flags); } static inline void __SetPagePrivate(struct page *page) { __set_bit(PG_private, &page->flags); }
 static inline void __ClearPagePrivate(struct page *page) { __clear_bit(PG_private, &page->flags); }

       

static inline int PagePrivate2( struct page *page) { return (__builtin_constant_p((PG_private_2)) ? constant_test_bit((PG_private_2), (&page->flags)) : variable_test_bit((PG_private_2), (&page->flags))); } static inline void SetPagePrivate2(struct page *page) { set_bit(PG_private_2, &page->flags); } static inline void ClearPagePrivate2(struct page *page) { clear_bit(PG_private_2, &page->flags); } static inline int TestSetPagePrivate2(struct page *page) { return test_and_set_bit(PG_private_2, &page->flags); } static inline int TestClearPagePrivate2(struct page *page) { return test_and_clear_bit(PG_private_2, &page->flags); }
static inline int PageOwnerPriv1( struct page *page) { return (__builtin_constant_p((PG_owner_priv_1)) ? constant_test_bit((PG_owner_priv_1), (&page->flags)) : variable_test_bit((PG_owner_priv_1), (&page->flags))); } static inline void SetPageOwnerPriv1(struct page *page) { set_bit(PG_owner_priv_1, &page->flags); } static inline void ClearPageOwnerPriv1(struct page *page) { clear_bit(PG_owner_priv_1, &page->flags); } static inline int TestClearPageOwnerPriv1(struct page *page) { return test_and_clear_bit(PG_owner_priv_1, &page->flags); }





static inline int PageWriteback( struct page *page) { return (__builtin_constant_p((PG_writeback)) ? constant_test_bit((PG_writeback), (&page->flags)) : variable_test_bit((PG_writeback), (&page->flags))); } static inline int TestSetPageWriteback(struct page *page) { return test_and_set_bit(PG_writeback, &page->flags); } static inline int TestClearPageWriteback(struct page *page) { return test_and_clear_bit(PG_writeback, &page->flags); }
static inline int PageMappedToDisk( struct page *page) { return (__builtin_constant_p((PG_mappedtodisk)) ? constant_test_bit((PG_mappedtodisk), (&page->flags)) : variable_test_bit((PG_mappedtodisk), (&page->flags))); } static inline void SetPageMappedToDisk(struct page *page) { set_bit(PG_mappedtodisk, &page->flags); } static inline void ClearPageMappedToDisk(struct page *page) { clear_bit(PG_mappedtodisk, &page->flags); }


static inline int PageReclaim( struct page *page) { return (__builtin_constant_p((PG_reclaim)) ? constant_test_bit((PG_reclaim), (&page->flags)) : variable_test_bit((PG_reclaim), (&page->flags))); } static inline void SetPageReclaim(struct page *page) { set_bit(PG_reclaim, &page->flags); } static inline void ClearPageReclaim(struct page *page) { clear_bit(PG_reclaim, &page->flags); } static inline int TestClearPageReclaim(struct page *page) { return test_and_clear_bit(PG_reclaim, &page->flags); }
static inline int PageReadahead( struct page *page) { return (__builtin_constant_p((PG_reclaim)) ? constant_test_bit((PG_reclaim), (&page->flags)) : variable_test_bit((PG_reclaim), (&page->flags))); } static inline void SetPageReadahead(struct page *page) { set_bit(PG_reclaim, &page->flags); } static inline void ClearPageReadahead(struct page *page) { clear_bit(PG_reclaim, &page->flags); }

static inline int PageReadaheadUnused( struct page *page) { return (__builtin_constant_p((PG_readaheadunused)) ? constant_test_bit((PG_readaheadunused), (&page->flags)) : variable_test_bit((PG_readaheadunused), (&page->flags))); } static inline void SetPageReadaheadUnused(struct page *page) { set_bit(PG_readaheadunused, &page->flags); } static inline void ClearPageReadaheadUnused(struct page *page) { clear_bit(PG_readaheadunused, &page->flags); }
static inline int PageHighMem( struct page *page) { return 0; }



static inline int PageSwapCache( struct page *page) { return (__builtin_constant_p((PG_swapcache)) ? constant_test_bit((PG_swapcache), (&page->flags)) : variable_test_bit((PG_swapcache), (&page->flags))); } static inline void SetPageSwapCache(struct page *page) { set_bit(PG_swapcache, &page->flags); } static inline void ClearPageSwapCache(struct page *page) { clear_bit(PG_swapcache, &page->flags); }





static inline int PageUnevictable( struct page *page) { return (__builtin_constant_p((PG_unevictable)) ? constant_test_bit((PG_unevictable), (&page->flags)) : variable_test_bit((PG_unevictable), (&page->flags))); } static inline void SetPageUnevictable(struct page *page) { set_bit(PG_unevictable, &page->flags); } static inline void ClearPageUnevictable(struct page *page) { clear_bit(PG_unevictable, &page->flags); } static inline void __ClearPageUnevictable(struct page *page) { __clear_bit(PG_unevictable, &page->flags); }
 static inline int TestClearPageUnevictable(struct page *page) { return test_and_clear_bit(PG_unevictable, &page->flags); }


static inline int PageMlocked( struct page *page) { return (__builtin_constant_p((PG_mlocked)) ? constant_test_bit((PG_mlocked), (&page->flags)) : variable_test_bit((PG_mlocked), (&page->flags))); } static inline void SetPageMlocked(struct page *page) { set_bit(PG_mlocked, &page->flags); } static inline void ClearPageMlocked(struct page *page) { clear_bit(PG_mlocked, &page->flags); } static inline void __ClearPageMlocked(struct page *page) { __clear_bit(PG_mlocked, &page->flags); }
 static inline int TestSetPageMlocked(struct page *page) { return test_and_set_bit(PG_mlocked, &page->flags); } static inline int TestClearPageMlocked(struct page *page) { return test_and_clear_bit(PG_mlocked, &page->flags); } static inline int __TestClearPageMlocked(struct page *page) { return __test_and_clear_bit(PG_mlocked, &page->flags); }






static inline int PageUncached( struct page *page) { return (__builtin_constant_p((PG_uncached)) ? constant_test_bit((PG_uncached), (&page->flags)) : variable_test_bit((PG_uncached), (&page->flags))); } static inline void SetPageUncached(struct page *page) { set_bit(PG_uncached, &page->flags); } static inline void ClearPageUncached(struct page *page) { clear_bit(PG_uncached, &page->flags); }





static inline int PageHWPoison( struct page *page) { return (__builtin_constant_p((PG_hwpoison)) ? constant_test_bit((PG_hwpoison), (&page->flags)) : variable_test_bit((PG_hwpoison), (&page->flags))); } static inline void SetPageHWPoison(struct page *page) { set_bit(PG_hwpoison, &page->flags); } static inline void ClearPageHWPoison(struct page *page) { clear_bit(PG_hwpoison, &page->flags); }
static inline int TestSetPageHWPoison(struct page *page) { return test_and_set_bit(PG_hwpoison, &page->flags); } static inline int TestClearPageHWPoison(struct page *page) { return test_and_clear_bit(PG_hwpoison, &page->flags); }






u64 stable_page_flags(struct page *page);

static inline int PageUptodate(struct page *page)
{
 int ret = (__builtin_constant_p((PG_uptodate)) ? constant_test_bit((PG_uptodate), (&(page)->flags)) : variable_test_bit((PG_uptodate), (&(page)->flags)));
 if (ret)
  __asm__ __volatile__("": : :"memory");

 return ret;
}

static inline void __SetPageUptodate(struct page *page)
{
 __asm__ __volatile__("": : :"memory");
 __set_bit(PG_uptodate, &(page)->flags);
}

static inline void SetPageUptodate(struct page *page)
{





 __asm__ __volatile__("": : :"memory");
 set_bit(PG_uptodate, &(page)->flags);
}

static inline void ClearPageUptodate(struct page *page) { clear_bit(PG_uptodate, &page->flags); }

extern void cancel_dirty_page(struct page *page, unsigned int account_size);

int test_clear_page_writeback(struct page *page);
int test_set_page_writeback(struct page *page);

static inline void set_page_writeback(struct page *page)
{
 test_set_page_writeback(page);
}
static inline int PageHead( struct page *page) { return (__builtin_constant_p((PG_head)) ? constant_test_bit((PG_head), (&page->flags)) : variable_test_bit((PG_head), (&page->flags))); } static inline void __SetPageHead(struct page *page) { __set_bit(PG_head, &page->flags); } static inline void __ClearPageHead(struct page *page) { __clear_bit(PG_head, &page->flags); } static inline void ClearPageHead(struct page *page) { clear_bit(PG_head, &page->flags); }
static inline int PageTail( struct page *page) { return (__builtin_constant_p((PG_tail)) ? constant_test_bit((PG_tail), (&page->flags)) : variable_test_bit((PG_tail), (&page->flags))); } static inline void __SetPageTail(struct page *page) { __set_bit(PG_tail, &page->flags); } static inline void __ClearPageTail(struct page *page) { __clear_bit(PG_tail, &page->flags); }

static inline int PageCompound(struct page *page)
{
 return page->flags & ((1L << PG_head) | (1L << PG_tail));

}

static inline void ClearPageCompound(struct page *page)
{
 (!PageHead(page));
 ClearPageHead(page);
}
static inline int PageTransHuge(struct page *page)
{
 (0);
 return PageHead(page);
}






static inline int PageTransCompound(struct page *page)
{
 return PageCompound(page);
}






static inline int PageTransTail(struct page *page)
{
 return PageTail(page);
}
static inline int PageSlabPfmemalloc(struct page *page)
{
 (0);
 return PageActive(page);
}

static inline void SetPageSlabPfmemalloc(struct page *page)
{
 (0);
 SetPageActive(page);
}

static inline void __ClearPageSlabPfmemalloc(struct page *page)
{
 (0);
 __ClearPageActive(page);
}

static inline void ClearPageSlabPfmemalloc(struct page *page)
{
 (0);
 ClearPageActive(page);
}
static inline int page_has_private(struct page *page)
{
 return !!(page->flags & (1 << PG_private | 1 << PG_private_2));
}



extern int do_huge_pmd_anonymous_page(struct mm_struct *mm,
          struct vm_area_struct *vma,
          unsigned long address, pmd_t *pmd,
          unsigned int flags);
extern int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,
    pmd_t *dst_pmd, pmd_t *src_pmd, unsigned long addr,
    struct vm_area_struct *vma);
extern void huge_pmd_set_accessed(struct mm_struct *mm,
      struct vm_area_struct *vma,
      unsigned long address, pmd_t *pmd,
      pmd_t orig_pmd, int dirty);
extern int do_huge_pmd_wp_page(struct mm_struct *mm, struct vm_area_struct *vma,
          unsigned long address, pmd_t *pmd,
          pmd_t orig_pmd);
extern struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,
       unsigned long addr,
       pmd_t *pmd,
       unsigned int flags);
extern int zap_huge_pmd(struct mmu_gather *tlb,
   struct vm_area_struct *vma,
   pmd_t *pmd, unsigned long addr);
extern int mincore_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr, unsigned long end,
   unsigned char *vec);
extern int move_huge_pmd(struct vm_area_struct *vma,
    struct vm_area_struct *new_vma,
    unsigned long old_addr,
    unsigned long new_addr, unsigned long old_end,
    pmd_t *old_pmd, pmd_t *new_pmd);
extern int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,
   unsigned long addr, pgprot_t newprot,
   int prot_numa);

enum transparent_hugepage_flag {
 TRANSPARENT_HUGEPAGE_FLAG,
 TRANSPARENT_HUGEPAGE_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_REQ_MADV_FLAG,
 TRANSPARENT_HUGEPAGE_DEFRAG_KHUGEPAGED_FLAG,
 TRANSPARENT_HUGEPAGE_USE_ZERO_PAGE_FLAG,



};

enum page_check_address_pmd_flag {
 PAGE_CHECK_ADDRESS_PMD_FLAG,
 PAGE_CHECK_ADDRESS_PMD_NOTSPLITTING_FLAG,
 PAGE_CHECK_ADDRESS_PMD_SPLITTING_FLAG,
};
extern pmd_t *page_check_address_pmd(struct page *page,
         struct mm_struct *mm,
         unsigned long address,
         enum page_check_address_pmd_flag flag,
         spinlock_t **ptl);
extern bool is_vma_temporary_stack(struct vm_area_struct *vma);
extern unsigned long transparent_hugepage_flags;
extern int copy_pte_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,
     pmd_t *dst_pmd, pmd_t *src_pmd,
     struct vm_area_struct *vma,
     unsigned long addr, unsigned long end);
extern int split_huge_page_to_list(struct page *page, struct list_head *list);
static inline int split_huge_page(struct page *page)
{
 return split_huge_page_to_list(page, 0);
}
extern void __split_huge_page_pmd(struct vm_area_struct *vma,
  unsigned long address, pmd_t *pmd);
extern void split_huge_page_pmd_mm(struct mm_struct *mm, unsigned long address,
  pmd_t *pmd);



extern int hugepage_madvise(struct vm_area_struct *vma,
       unsigned long *vm_flags, int advice);
extern void __vma_adjust_trans_huge(struct vm_area_struct *vma,
        unsigned long start,
        unsigned long end,
        long adjust_next);
extern int __pmd_trans_huge_lock(pmd_t *pmd, struct vm_area_struct *vma,
  spinlock_t **ptl);

static inline int pmd_trans_huge_lock(pmd_t *pmd, struct vm_area_struct *vma,
  spinlock_t **ptl)
{
 (0);
 if (pmd_trans_huge(*pmd))
  return __pmd_trans_huge_lock(pmd, vma, ptl);
 else
  return 0;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8anon_vmaE_875_0 {
  typedef TJP__ZN14vm_area_struct8anon_vmaE_875_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline anon_vma * __get__ZN14vm_area_struct8anon_vmaE_875(anon_vma * *source) {
  ::anon_vma *__result_buffer;
  typedef TJP__ZN14vm_area_struct8anon_vmaE_875_0< ::anon_vma *, ::vm_area_struct , ::anon_vma * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::anon_vma *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct6vm_opsE_876_0 {
  typedef TJP__ZN14vm_area_struct6vm_opsE_876_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline vm_operations_struct * __get__ZN14vm_area_struct6vm_opsE_876(vm_operations_struct * *source) {
  ::vm_operations_struct *__result_buffer;
  typedef TJP__ZN14vm_area_struct6vm_opsE_876_0< ::vm_operations_struct *, ::vm_area_struct , ::vm_operations_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::vm_operations_struct *&)__result_buffer;
}
static inline void vma_adjust_trans_huge(struct vm_area_struct *vma,
      unsigned long start,
      unsigned long end,
      long adjust_next)
{
 if (!__get__ZN14vm_area_struct8anon_vmaE_875(&vma->anon_vma) || __get__ZN14vm_area_struct6vm_opsE_876(&vma->vm_ops))
  return;
 __vma_adjust_trans_huge(vma, start, end, adjust_next);
}
static inline int hpage_nr_pages(struct page *page)
{
 if (__builtin_expect(!!(PageTransHuge(page)), 0))
  return (1<<(21 -12));
 return 1;
}

extern int do_huge_pmd_numa_page(struct mm_struct *mm, struct vm_area_struct *vma,
    unsigned long addr, pmd_t pmd, pmd_t *pmdp);
static inline int put_page_testzero(struct page *page)
{
 (0);
 return 1;
}







static inline int get_page_unless_zero(struct page *page)
{
 return atomic_add_unless((&page->_count), 1, 0);
}
static inline int put_page_unless_one(struct page *page)
{
 return atomic_add_unless(&page->_count, -1, 1);
}

extern int page_is_ram(unsigned long pfn);


struct page *vmalloc_to_page( void *addr);
unsigned long vmalloc_to_pfn( void *addr);







static inline int is_vmalloc_addr( void *x)
{

 unsigned long addr = (unsigned long)x;

 return addr >= (0xffffc90000000000UL) && addr < (0xffffe8ffffffffffUL);



}

extern int is_vmalloc_or_module_addr( void *x);







static inline void compound_lock(struct page *page)
{

 (0);
 bit_spin_lock(PG_compound_lock, &page->flags);

}

static inline void compound_unlock(struct page *page)
{

 (0);
 bit_spin_unlock(PG_compound_lock, &page->flags);

}

static inline unsigned long compound_lock_irqsave(struct page *page)
{
 unsigned long flags = flags;

 ;
 compound_lock(page);

 return flags;
}

static inline void compound_unlock_irqrestore(struct page *page,
           unsigned long flags)
{

 compound_unlock(page);
 ;

}

static inline struct page *compound_head(struct page *page)
{
 if (__builtin_expect(!!(PageTail(page)), 0)) {
  struct page *head = page->first_page;






  __asm__ __volatile__("": : :"memory");
  if (__builtin_expect(!!(PageTail(page)), 1))
   return head;
 }
 return page;
}






static inline void page_mapcount_reset(struct page *page)
{
 ;
}

static inline int page_mapcount(struct page *page)
{
 return atomic_read(&(page)->_mapcount) + 1;
}

static inline int page_count(struct page *page)
{
 return atomic_read(&compound_head(page)->_count);
}

static inline void get_huge_page_tail(struct page *page)
{




 (0);
 (0);
 ;
}

extern bool __get_page_tail(struct page *page);

static inline void get_page(struct page *page)
{
 if (__builtin_expect(!!(PageTail(page)), 0))
  if (__builtin_expect(!!(__get_page_tail(page)), 1))
   return;




 (0);
 ;
}

static inline struct page *virt_to_head_page( void *x)
{
 struct page *page = (((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)(x)) >> 12));
 return compound_head(page);
}





static inline void init_page_count(struct page *page)
{
 ;
}
static inline int PageBuddy(struct page *page)
{
 return atomic_read(&page->_mapcount) == (-128);
}

static inline void __SetPageBuddy(struct page *page)
{
 (0);
 ;
}

static inline void __ClearPageBuddy(struct page *page)
{
 (0);
 ;
}






void put_pages_list(struct list_head *pages);

void split_page(struct page *page, unsigned int order);
int split_free_page(struct page *page);






typedef void compound_page_dtor(struct page *);

static inline void set_compound_page_dtor(struct page *page,
      compound_page_dtor *dtor)
{
 page[1].lru.next = (void *)dtor;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_880_0 {
  typedef TJP__ZN9list_head4nextE_880_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_880(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_880_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline compound_page_dtor *get_compound_page_dtor(struct page *page)
{
 return (compound_page_dtor *)__get__ZN9list_head4nextE_880(&page[1].lru.next);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_882_0 {
  typedef TJP__ZN9list_head4prevE_882_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_882(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_882_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline int compound_order(struct page *page)
{
 if (!PageHead(page))
  return 0;
 return (unsigned long)__get__ZN9list_head4prevE_882(&page[1].lru.prev);
}

static inline void set_compound_order(struct page *page, unsigned long order)
{
 page[1].lru.prev = (void *)order;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_flagsE_884_0 {
  typedef TJP__ZN14vm_area_struct8vm_flagsE_884_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_flagsE_884(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_flagsE_884_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline pte_t maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
{
 if (__builtin_expect(!!(__get__ZN14vm_area_struct8vm_flagsE_884(&vma->vm_flags) & 0x00000002), 1))
  pte = pte_mkwrite(pte);
 return pte;
}
static inline enum zone_type page_zonenum( struct page *page)
{
 return (page->flags >> (((((sizeof(unsigned long)*8) - 0) - 6) - 2) * (2 != 0))) & ((1UL << 2) - 1);
}
static inline int page_zone_id(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 6) < ((((sizeof(unsigned long)*8) - 0) - 6) - 2))? (((sizeof(unsigned long)*8) - 0) - 6) : ((((sizeof(unsigned long)*8) - 0) - 6) - 2)) * ((6 + 2) != 0))) & ((1UL << (6 + 2)) - 1);
}

static inline int zone_to_nid(struct zone *zone)
{

 return zone->node;



}




static inline int page_to_nid( struct page *page)
{
 return (page->flags >> ((((sizeof(unsigned long)*8) - 0) - 6) * (6 != 0))) & ((1UL << 6) - 1);
}



static inline int cpu_pid_to_cpupid(int cpu, int pid)
{
 return ((cpu & ((1 << 8)-1)) << 8) | (pid & ((1 << 8)-1));
}

static inline int cpupid_to_pid(int cpupid)
{
 return cpupid & ((1 << 8)-1);
}

static inline int cpupid_to_cpu(int cpupid)
{
 return (cpupid >> 8) & ((1 << 8)-1);
}

static inline int cpupid_to_nid(int cpupid)
{
 return cpu_to_node(cpupid_to_cpu(cpupid));
}

static inline bool cpupid_pid_unset(int cpupid)
{
 return cpupid_to_pid(cpupid) == (-1 & ((1 << 8)-1));
}

static inline bool cpupid_cpu_unset(int cpupid)
{
 return cpupid_to_cpu(cpupid) == (-1 & ((1 << 8)-1));
}

static inline bool __cpupid_match_pid(pid_t task_pid, int cpupid)
{
 return (task_pid & ((1 << 8)-1)) == cpupid_to_pid(cpupid);
}
static inline int page_cpupid_last(struct page *page)
{
 return (page->flags >> ((((((sizeof(unsigned long)*8) - 0) - 6) - 2) - (8 +8)) * ((8 +8) != 0))) & ((1UL << (8 +8)) - 1);
}

extern int page_cpupid_xchg_last(struct page *page, int cpupid);

static inline void page_cpupid_reset_last(struct page *page)
{
 int cpupid = (1 << (8 +8)) - 1;

 page->flags &= ~(((1UL << (8 +8)) - 1) << ((((((sizeof(unsigned long)*8) - 0) - 6) - 2) - (8 +8)) * ((8 +8) != 0)));
 page->flags |= (cpupid & ((1UL << (8 +8)) - 1)) << ((((((sizeof(unsigned long)*8) - 0) - 6) - 2) - (8 +8)) * ((8 +8) != 0));
}
static inline struct zone *page_zone( struct page *page)
{
 return &(node_data[page_to_nid(page)])->node_zones[page_zonenum(page)];
}
static inline void set_page_zone(struct page *page, enum zone_type zone)
{
 page->flags &= ~(((1UL << 2) - 1) << (((((sizeof(unsigned long)*8) - 0) - 6) - 2) * (2 != 0)));
 page->flags |= (zone & ((1UL << 2) - 1)) << (((((sizeof(unsigned long)*8) - 0) - 6) - 2) * (2 != 0));
}

static inline void set_page_node(struct page *page, unsigned long node)
{
 page->flags &= ~(((1UL << 6) - 1) << ((((sizeof(unsigned long)*8) - 0) - 6) * (6 != 0)));
 page->flags |= (node & ((1UL << 6) - 1)) << ((((sizeof(unsigned long)*8) - 0) - 6) * (6 != 0));
}

static inline void set_page_links(struct page *page, enum zone_type zone,
 unsigned long node, unsigned long pfn)
{
 set_page_zone(page, zone);
 set_page_node(page, node);



}










enum vm_event_item { PGPGIN, PGPGOUT, PSWPIN, PSWPOUT,
  PGALLOC_DMA, PGALLOC_DMA32, PGALLOC_NORMAL , PGALLOC_MOVABLE,
  PGFREE, PGACTIVATE, PGDEACTIVATE,
  PGFAULT, PGMAJFAULT,
  PGREFILL_DMA, PGREFILL_DMA32, PGREFILL_NORMAL , PGREFILL_MOVABLE,
  PGSTEAL_KSWAPD_DMA, PGSTEAL_KSWAPD_DMA32, PGSTEAL_KSWAPD_NORMAL , PGSTEAL_KSWAPD_MOVABLE,
  PGSTEAL_DIRECT_DMA, PGSTEAL_DIRECT_DMA32, PGSTEAL_DIRECT_NORMAL , PGSTEAL_DIRECT_MOVABLE,
  PGSCAN_KSWAPD_DMA, PGSCAN_KSWAPD_DMA32, PGSCAN_KSWAPD_NORMAL , PGSCAN_KSWAPD_MOVABLE,
  PGSCAN_DIRECT_DMA, PGSCAN_DIRECT_DMA32, PGSCAN_DIRECT_NORMAL , PGSCAN_DIRECT_MOVABLE,
  PGSCAN_DIRECT_THROTTLE,

  PGSCAN_ZONE_RECLAIM_FAILED,

  PGINODESTEAL, SLABS_SCANNED, KSWAPD_INODESTEAL,
  KSWAPD_LOW_WMARK_HIT_QUICKLY, KSWAPD_HIGH_WMARK_HIT_QUICKLY,
  PAGEOUTRUN, ALLOCSTALL, PGROTATED,

  NUMA_PTE_UPDATES,
  NUMA_HUGE_PTE_UPDATES,
  NUMA_HINT_FAULTS,
  NUMA_HINT_FAULTS_LOCAL,
  NUMA_PAGE_MIGRATE,


  PGMIGRATE_SUCCESS, PGMIGRATE_FAIL,


  COMPACTMIGRATE_SCANNED, COMPACTFREE_SCANNED,
  COMPACTISOLATED,
  COMPACTSTALL, COMPACTFAIL, COMPACTSUCCESS,


  HTLB_BUDDY_PGALLOC, HTLB_BUDDY_PGALLOC_FAIL,

  UNEVICTABLE_PGCULLED,
  UNEVICTABLE_PGSCANNED,
  UNEVICTABLE_PGRESCUED,
  UNEVICTABLE_PGMLOCKED,
  UNEVICTABLE_PGMUNLOCKED,
  UNEVICTABLE_PGCLEARED,
  UNEVICTABLE_PGSTRANDED,

  THP_FAULT_ALLOC,
  THP_FAULT_FALLBACK,
  THP_COLLAPSE_ALLOC,
  THP_COLLAPSE_ALLOC_FAILED,
  THP_SPLIT,
  THP_ZERO_PAGE_ALLOC,
  THP_ZERO_PAGE_ALLOC_FAILED,


  NR_TLB_REMOTE_FLUSH,
  NR_TLB_REMOTE_FLUSH_RECEIVED,

  NR_TLB_LOCAL_FLUSH_ALL,
  NR_TLB_LOCAL_FLUSH_ONE,
  NR_VM_EVENT_ITEMS
};


extern int sysctl_stat_interval;
struct vm_event_state {
  template <typename, int = 0> struct __BYPASSvm_event_state {};
  template <typename, int> friend struct __BYPASSvm_event_state;
 unsigned long event[NR_VM_EVENT_ITEMS];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct vm_event_state) vm_event_states;

static inline void __count_vm_event(enum vm_event_item item)
{
 do { do { void *__vpp_verify = (typeof((&(((vm_event_states.event[item])))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof(((vm_event_states.event[item])))) { case 1: do { typedef typeof((((vm_event_states.event[item])))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((vm_event_states.event[item]))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((((vm_event_states.event[item])))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((vm_event_states.event[item]))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((((vm_event_states.event[item])))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((vm_event_states.event[item]))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((((vm_event_states.event[item])))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((vm_event_states.event[item]))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline void count_vm_event(enum vm_event_item item)
{
 do { do { void *__vpp_verify = (typeof((&(((vm_event_states.event[item])))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof(((vm_event_states.event[item])))) { case 1: do { typedef typeof((((vm_event_states.event[item])))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((vm_event_states.event[item]))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((((vm_event_states.event[item])))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((vm_event_states.event[item]))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((((vm_event_states.event[item])))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((vm_event_states.event[item]))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((((vm_event_states.event[item])))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((vm_event_states.event[item]))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item]))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((vm_event_states.event[item])))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline void __count_vm_events(enum vm_event_item item, long delta)
{
 do { do { void *__vpp_verify = (typeof((&((vm_event_states.event[item]))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((vm_event_states.event[item]))) { case 1: do { typedef typeof(((vm_event_states.event[item]))) pao_T__; int pao_ID__ = (__builtin_constant_p((delta)) && (((delta)) == 1 || ((delta)) == -1)) ? (int)((delta)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((delta)); (void)pao_tmp__; } switch (sizeof(((vm_event_states.event[item])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "qi" ((pao_T__)((delta)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "re" ((pao_T__)((delta)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof(((vm_event_states.event[item]))) pao_T__; int pao_ID__ = (__builtin_constant_p((delta)) && (((delta)) == 1 || ((delta)) == -1)) ? (int)((delta)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((delta)); (void)pao_tmp__; } switch (sizeof(((vm_event_states.event[item])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "qi" ((pao_T__)((delta)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "re" ((pao_T__)((delta)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof(((vm_event_states.event[item]))) pao_T__; int pao_ID__ = (__builtin_constant_p((delta)) && (((delta)) == 1 || ((delta)) == -1)) ? (int)((delta)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((delta)); (void)pao_tmp__; } switch (sizeof(((vm_event_states.event[item])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "qi" ((pao_T__)((delta)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "re" ((pao_T__)((delta)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof(((vm_event_states.event[item]))) pao_T__; int pao_ID__ = (__builtin_constant_p((delta)) && (((delta)) == 1 || ((delta)) == -1)) ? (int)((delta)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((delta)); (void)pao_tmp__; } switch (sizeof(((vm_event_states.event[item])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "qi" ((pao_T__)((delta)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "re" ((pao_T__)((delta)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

static inline void count_vm_events(enum vm_event_item item, long delta)
{
 do { do { void *__vpp_verify = (typeof((&((vm_event_states.event[item]))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((vm_event_states.event[item]))) { case 1: do { typedef typeof(((vm_event_states.event[item]))) pao_T__; int pao_ID__ = (__builtin_constant_p((delta)) && (((delta)) == 1 || ((delta)) == -1)) ? (int)((delta)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((delta)); (void)pao_tmp__; } switch (sizeof(((vm_event_states.event[item])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "qi" ((pao_T__)((delta)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "re" ((pao_T__)((delta)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof(((vm_event_states.event[item]))) pao_T__; int pao_ID__ = (__builtin_constant_p((delta)) && (((delta)) == 1 || ((delta)) == -1)) ? (int)((delta)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((delta)); (void)pao_tmp__; } switch (sizeof(((vm_event_states.event[item])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "qi" ((pao_T__)((delta)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "re" ((pao_T__)((delta)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof(((vm_event_states.event[item]))) pao_T__; int pao_ID__ = (__builtin_constant_p((delta)) && (((delta)) == 1 || ((delta)) == -1)) ? (int)((delta)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((delta)); (void)pao_tmp__; } switch (sizeof(((vm_event_states.event[item])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "qi" ((pao_T__)((delta)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "re" ((pao_T__)((delta)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof(((vm_event_states.event[item]))) pao_T__; int pao_ID__ = (__builtin_constant_p((delta)) && (((delta)) == 1 || ((delta)) == -1)) ? (int)((delta)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((delta)); (void)pao_tmp__; } switch (sizeof(((vm_event_states.event[item])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "qi" ((pao_T__)((delta)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "ri" ((pao_T__)((delta)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((vm_event_states.event[item]))) : "re" ((pao_T__)((delta)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}

extern void all_vm_events(unsigned long *);

extern void vm_events_fold_cpu(int cpu);
extern atomic_long_t vm_stat[NR_VM_ZONE_STAT_ITEMS];


template <typename TResult, typename TThat, typename TTarget> struct TJP_vm_stat_1085_0 {
  typedef TJP_vm_stat_1085_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline _atomic64 __get_vm_stat_1085(_atomic64 *source) {
  AC::ResultBuffer< ::atomic_long_t  > __result_buffer;
  typedef TJP_vm_stat_1085_0< ::atomic_long_t , void *, ::atomic_long_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::atomic_long_t &)__result_buffer;
}
static inline void zone_page_state_add(long x, struct zone *zone,
     enum zone_stat_item item)
{
 atomic_long_add(x, &zone->vm_stat[item]);
 atomic_long_add(x, &__get_vm_stat_1085(&vm_stat[item]));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP_vm_stat_1086_0 {
  typedef TJP_vm_stat_1086_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline _atomic64 __get_vm_stat_1086(_atomic64 *source) {
  AC::ResultBuffer< ::atomic_long_t  > __result_buffer;
  typedef TJP_vm_stat_1086_0< ::atomic_long_t , void *, ::atomic_long_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::atomic_long_t &)__result_buffer;
}
static inline unsigned long global_page_state(enum zone_stat_item item)
{
 long x = atomic_long_read(&__get_vm_stat_1086(&vm_stat[item]));

 if (x < 0)
  x = 0;

 return x;
}

static inline unsigned long zone_page_state(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);

 if (x < 0)
  x = 0;

 return x;
}








template <typename TResult, typename TThat, typename TTarget> struct TJP_cpu_online_mask_1089_0 {
  typedef TJP_cpu_online_mask_1089_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cpumask * __get_cpu_online_mask_1089(cpumask * *source) {
  ::cpumask *__result_buffer;
  typedef TJP_cpu_online_mask_1089_0< ::cpumask *, void *, ::cpumask * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cpumask *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP_nr_cpu_ids_1090_0 {
  typedef TJP_nr_cpu_ids_1090_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get_nr_cpu_ids_1090(int *source) {
  int __result_buffer;
  typedef TJP_nr_cpu_ids_1090_0< int , void *, int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP___per_cpu_offset_1092_0 {
  typedef TJP___per_cpu_offset_1092_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get___per_cpu_offset_1092(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP___per_cpu_offset_1092_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long zone_page_state_snapshot(struct zone *zone,
     enum zone_stat_item item)
{
 long x = atomic_long_read(&zone->vm_stat[item]);


 int cpu;
 for (((cpu)) = -1; ((cpu)) = cpumask_next(((cpu)), (__get_cpu_online_mask_1089(&cpu_online_mask))), ((cpu)) < __get_nr_cpu_ids_1090(&nr_cpu_ids);)
  x += ({ do { void *__vpp_verify = (typeof((((zone->pageset))) + 0))0; (void)__vpp_verify; } while (0); ({ unsigned long __ptr; __asm__ ("" : "=r"(__ptr) : "0"((typeof(*((zone->pageset))) *)((zone->pageset)))); (typeof((typeof(*((zone->pageset))) *)((zone->pageset)))) (__ptr + (((__get___per_cpu_offset_1092(&__per_cpu_offset[(cpu)]))))); }); })->vm_stat_diff[item];

 if (x < 0)
  x = 0;

 return x;
}







static inline unsigned long node_page_state(int node,
     enum zone_stat_item item)
{
 struct zone *zones = (node_data[node])->node_zones;

 return

  zone_page_state(&zones[ZONE_DMA], item) +


  zone_page_state(&zones[ZONE_DMA32], item) +




  zone_page_state(&zones[ZONE_NORMAL], item) +
  zone_page_state(&zones[ZONE_MOVABLE], item);
}

extern void zone_statistics(struct zone *, struct zone *, gfp_t gfp);
extern void inc_zone_state(struct zone *, enum zone_stat_item);


void __mod_zone_page_state(struct zone *, enum zone_stat_item item, int);
void __inc_zone_page_state(struct page *, enum zone_stat_item);
void __dec_zone_page_state(struct page *, enum zone_stat_item);

void mod_zone_page_state(struct zone *, enum zone_stat_item, int);
void inc_zone_page_state(struct page *, enum zone_stat_item);
void dec_zone_page_state(struct page *, enum zone_stat_item);

extern void inc_zone_state(struct zone *, enum zone_stat_item);
extern void __inc_zone_state(struct zone *, enum zone_stat_item);
extern void dec_zone_state(struct zone *, enum zone_stat_item);
extern void __dec_zone_state(struct zone *, enum zone_stat_item);

void cpu_vm_stats_fold(int cpu);
void refresh_zone_stat_thresholds(void);

void drain_zonestat(struct zone *zone, struct per_cpu_pageset *);

int calculate_pressure_threshold(struct zone *zone);
int calculate_normal_threshold(struct zone *zone);
void set_pgdat_percpu_threshold(pg_data_t *pgdat,
    int (*calculate_pressure)(struct zone *));
static inline void __mod_zone_freepage_state(struct zone *zone, int nr_pages,
          int migratetype)
{
 __mod_zone_page_state(zone, NR_FREE_PAGES, nr_pages);
 if (__builtin_expect(!!((migratetype) == MIGRATE_CMA), 0))
  __mod_zone_page_state(zone, NR_FREE_CMA_PAGES, nr_pages);
}

extern char * vmstat_text[];

static inline __attribute__((always_inline)) void *lowmem_page_address( struct page *page)
{
 return ((void *)((unsigned long)(((phys_addr_t)((unsigned long)((page) - ((struct page *)(0xffffea0000000000UL)))) << 12))+((unsigned long)(0xffff880000000000UL))));
}
extern struct address_space *page_mapping(struct page *page);


static inline void *page_rmapping(struct page *page)
{
 return (void *)((unsigned long)page->mapping & ~(1 | 2));
}

extern struct address_space *__page_file_mapping(struct page *);

static inline
struct address_space *page_file_mapping(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_mapping(page);

 return page->mapping;
}

static inline int PageAnon(struct page *page)
{
 return ((unsigned long)page->mapping & 1) != 0;
}





static inline unsigned long page_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return ((page)->_private);
 return page->index;
}

extern unsigned long __page_file_index(struct page *page);





static inline unsigned long page_file_index(struct page *page)
{
 if (__builtin_expect(!!(PageSwapCache(page)), 0))
  return __page_file_index(page);

 return page->index;
}




static inline int page_mapped(struct page *page)
{
 return atomic_read(&(page)->_mapcount) >= 0;
}
extern void pagefault_out_of_memory(void);
extern void show_free_areas(unsigned int flags);
extern bool skip_free_areas_node(unsigned int flags, int nid);

int shmem_zero_setup(struct vm_area_struct *);

extern int can_do_mlock(void);
extern int user_shm_lock(size_t, struct user_struct *);
extern void user_shm_unlock(size_t, struct user_struct *);




struct zap_details {
  template <typename, int = 0> struct __BYPASSzap_details {};
  template <typename, int> friend struct __BYPASSzap_details;
 struct vm_area_struct *nonlinear_vma;
 struct address_space *check_mapping;
 unsigned long first_index;
 unsigned long last_index;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,
  pte_t pte);

int zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,
  unsigned long size);
void zap_page_range(struct vm_area_struct *vma, unsigned long address,
  unsigned long size, struct zap_details *);
void unmap_vmas(struct mmu_gather *tlb, struct vm_area_struct *start_vma,
  unsigned long start, unsigned long end);
struct mm_walk {
  template <typename, int = 0> struct __BYPASSmm_walk {};
  template <typename, int> friend struct __BYPASSmm_walk;
 int (*pgd_entry)(pgd_t *pgd, unsigned long addr,
    unsigned long next, struct mm_walk *walk);
 int (*pud_entry)(pud_t *pud, unsigned long addr,
                  unsigned long next, struct mm_walk *walk);
 int (*pmd_entry)(pmd_t *pmd, unsigned long addr,
    unsigned long next, struct mm_walk *walk);
 int (*pte_entry)(pte_t *pte, unsigned long addr,
    unsigned long next, struct mm_walk *walk);
 int (*pte_hole)(unsigned long addr, unsigned long next,
   struct mm_walk *walk);
 int (*hugetlb_entry)(pte_t *pte, unsigned long hmask,
        unsigned long addr, unsigned long next,
        struct mm_walk *walk);
 struct mm_struct *mm;
 void *_private;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int walk_page_range(unsigned long addr, unsigned long end,
  struct mm_walk *walk);
void free_pgd_range(struct mmu_gather *tlb, unsigned long addr,
  unsigned long end, unsigned long floor, unsigned long ceiling);
int copy_page_range(struct mm_struct *dst, struct mm_struct *src,
   struct vm_area_struct *vma);
void unmap_mapping_range(struct address_space *mapping,
  loff_t holebegin, loff_t holelen, int even_cows);
int follow_pfn(struct vm_area_struct *vma, unsigned long address,
 unsigned long *pfn);
int follow_phys(struct vm_area_struct *vma, unsigned long address,
  unsigned int flags, unsigned long *prot, resource_size_t *phys);
int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,
   void *buf, int len, int write);

static inline void unmap_shared_mapping_range(struct address_space *mapping,
  loff_t holebegin, loff_t holelen)
{
 unmap_mapping_range(mapping, holebegin, holelen, 0);
}

extern void truncate_pagecache(struct inode *inode, loff_t _new);
extern void truncate_setsize(struct inode *inode, loff_t newsize);
void truncate_pagecache_range(struct inode *inode, loff_t offset, loff_t end);
int truncate_inode_page(struct address_space *mapping, struct page *page);
int generic_error_remove_page(struct address_space *mapping, struct page *page);
int invalidate_inode_page(struct page *page);


extern int handle_mm_fault(struct mm_struct *mm, struct vm_area_struct *vma,
   unsigned long address, unsigned int flags);
extern int fixup_user_fault(struct task_struct *tsk, struct mm_struct *mm,
       unsigned long address, unsigned int fault_flags);
static inline void aufs_trace(struct file *f, struct file *pr,
         char func[], int line, char func2[])
{





}

static inline struct file *vmr_do_pr_or_file(struct vm_region *region,
          char func[], int line)
{
 struct file *f = region->vm_file, *pr = region->vm_prfile;



 aufs_trace(f, pr, func, line, (char *)__func__);

 return (f && pr) ? pr : f;
}

static inline void vmr_do_fput(struct vm_region *region,
          char func[], int line)
{
 struct file *f = region->vm_file, *pr = region->vm_prfile;



 aufs_trace(f, pr, func, line, (char *)__func__);

 fput(f);
 if (f && pr)
  fput(pr);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct7vm_fileE_1114_0 {
  typedef TJP__ZN14vm_area_struct7vm_fileE_1114_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file * __get__ZN14vm_area_struct7vm_fileE_1114(file * *source) {
  ::file *__result_buffer;
  typedef TJP__ZN14vm_area_struct7vm_fileE_1114_0< ::file *, ::vm_area_struct , ::file * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct9vm_prfileE_1115_0 {
  typedef TJP__ZN14vm_area_struct9vm_prfileE_1115_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file * __get__ZN14vm_area_struct9vm_prfileE_1115(file * *source) {
  ::file *__result_buffer;
  typedef TJP__ZN14vm_area_struct9vm_prfileE_1115_0< ::file *, ::vm_area_struct , ::file * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file *&)__result_buffer;
}
static inline void vma_do_file_update_time(struct vm_area_struct *vma,
        char func[], int line)
{
 struct file *f = __get__ZN14vm_area_struct7vm_fileE_1114(&vma->vm_file), *pr = __get__ZN14vm_area_struct9vm_prfileE_1115(&vma->vm_prfile);



 aufs_trace(f, pr, func, line, (char *)__func__);

 file_update_time(f);
 if (f && pr)
  file_update_time(pr);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct7vm_fileE_1117_0 {
  typedef TJP__ZN14vm_area_struct7vm_fileE_1117_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file * __get__ZN14vm_area_struct7vm_fileE_1117(file * *source) {
  ::file *__result_buffer;
  typedef TJP__ZN14vm_area_struct7vm_fileE_1117_0< ::file *, ::vm_area_struct , ::file * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct9vm_prfileE_1118_0 {
  typedef TJP__ZN14vm_area_struct9vm_prfileE_1118_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file * __get__ZN14vm_area_struct9vm_prfileE_1118(file * *source) {
  ::file *__result_buffer;
  typedef TJP__ZN14vm_area_struct9vm_prfileE_1118_0< ::file *, ::vm_area_struct , ::file * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file *&)__result_buffer;
}
static inline struct file *vma_do_pr_or_file(struct vm_area_struct *vma,
          char func[], int line)
{
 struct file *f = __get__ZN14vm_area_struct7vm_fileE_1117(&vma->vm_file), *pr = __get__ZN14vm_area_struct9vm_prfileE_1118(&vma->vm_prfile);



 aufs_trace(f, pr, func, line, (char *)__func__);

 return (f && pr) ? pr : f;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct7vm_fileE_1120_0 {
  typedef TJP__ZN14vm_area_struct7vm_fileE_1120_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file * __get__ZN14vm_area_struct7vm_fileE_1120(file * *source) {
  ::file *__result_buffer;
  typedef TJP__ZN14vm_area_struct7vm_fileE_1120_0< ::file *, ::vm_area_struct , ::file * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct9vm_prfileE_1121_0 {
  typedef TJP__ZN14vm_area_struct9vm_prfileE_1121_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file * __get__ZN14vm_area_struct9vm_prfileE_1121(file * *source) {
  ::file *__result_buffer;
  typedef TJP__ZN14vm_area_struct9vm_prfileE_1121_0< ::file *, ::vm_area_struct , ::file * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file *&)__result_buffer;
}
static inline void vma_do_get_file(struct vm_area_struct *vma,
       char func[], int line)
{
 struct file *f = __get__ZN14vm_area_struct7vm_fileE_1120(&vma->vm_file), *pr = __get__ZN14vm_area_struct9vm_prfileE_1121(&vma->vm_prfile);



 aufs_trace(f, pr, func, line, (char *)__func__);

 get_file(f);
 if (f && pr)
  get_file(pr);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct7vm_fileE_1123_0 {
  typedef TJP__ZN14vm_area_struct7vm_fileE_1123_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file * __get__ZN14vm_area_struct7vm_fileE_1123(file * *source) {
  ::file *__result_buffer;
  typedef TJP__ZN14vm_area_struct7vm_fileE_1123_0< ::file *, ::vm_area_struct , ::file * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct9vm_prfileE_1124_0 {
  typedef TJP__ZN14vm_area_struct9vm_prfileE_1124_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline file * __get__ZN14vm_area_struct9vm_prfileE_1124(file * *source) {
  ::file *__result_buffer;
  typedef TJP__ZN14vm_area_struct9vm_prfileE_1124_0< ::file *, ::vm_area_struct , ::file * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::file *&)__result_buffer;
}
static inline void vma_do_fput(struct vm_area_struct *vma,
          char func[], int line)
{
 struct file *f = __get__ZN14vm_area_struct7vm_fileE_1123(&vma->vm_file), *pr = __get__ZN14vm_area_struct9vm_prfileE_1124(&vma->vm_prfile);



 aufs_trace(f, pr, func, line, (char *)__func__);

 fput(f);
 if (f && pr)
  fput(pr);
}
extern int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len, int write);
extern int access_remote_vm(struct mm_struct *mm, unsigned long addr,
  void *buf, int len, int write);

long __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,
        unsigned long start, unsigned long nr_pages,
        unsigned int foll_flags, struct page **pages,
        struct vm_area_struct **vmas, int *nonblocking);
long get_user_pages(struct task_struct *tsk, struct mm_struct *mm,
      unsigned long start, unsigned long nr_pages,
      int write, int force, struct page **pages,
      struct vm_area_struct **vmas);
int get_user_pages_fast(unsigned long start, int nr_pages, int write,
   struct page **pages);
struct kvec;
int get_kernel_pages( struct kvec *iov, int nr_pages, int write,
   struct page **pages);
int get_kernel_page(unsigned long start, int write, struct page **pages);
struct page *get_dump_page(unsigned long addr);

extern int try_to_release_page(struct page * page, gfp_t gfp_mask);
extern void do_invalidatepage(struct page *page, unsigned int offset,
         unsigned int length);

int __set_page_dirty_nobuffers(struct page *page);
int __set_page_dirty_no_writeback(struct page *page);
int redirty_page_for_writepage(struct writeback_control *wbc,
    struct page *page);
void account_page_dirtied(struct page *page, struct address_space *mapping);
void account_page_writeback(struct page *page);
int set_page_dirty(struct page *page);
int set_page_dirty_lock(struct page *page);
int clear_page_dirty_for_io(struct page *page);



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct6vm_endE_1126_0 {
  typedef TJP__ZN14vm_area_struct6vm_endE_1126_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct6vm_endE_1126(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct6vm_endE_1126_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_flagsE_1127_0 {
  typedef TJP__ZN14vm_area_struct8vm_flagsE_1127_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_flagsE_1127(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_flagsE_1127_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int vma_growsdown(struct vm_area_struct *vma, unsigned long addr)
{
 return vma && (__get__ZN14vm_area_struct6vm_endE_1126(&vma->vm_end) == addr) && (__get__ZN14vm_area_struct8vm_flagsE_1127(&vma->vm_flags) & 0x00000100);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_flagsE_1128_0 {
  typedef TJP__ZN14vm_area_struct8vm_flagsE_1128_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_flagsE_1128(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_flagsE_1128_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_startE_1129_0 {
  typedef TJP__ZN14vm_area_struct8vm_startE_1129_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_startE_1129(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_startE_1129_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct7vm_prevE_1130_0 {
  typedef TJP__ZN14vm_area_struct7vm_prevE_1130_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline vm_area_struct * __get__ZN14vm_area_struct7vm_prevE_1130(vm_area_struct * *source) {
  ::vm_area_struct *__result_buffer;
  typedef TJP__ZN14vm_area_struct7vm_prevE_1130_0< ::vm_area_struct *, ::vm_area_struct , ::vm_area_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::vm_area_struct *&)__result_buffer;
}
static inline int stack_guard_page_start(struct vm_area_struct *vma,
          unsigned long addr)
{
 return (__get__ZN14vm_area_struct8vm_flagsE_1128(&vma->vm_flags) & 0x00000100) &&
  (__get__ZN14vm_area_struct8vm_startE_1129(&vma->vm_start) == addr) &&
  !vma_growsdown(__get__ZN14vm_area_struct7vm_prevE_1130(&vma->vm_prev), addr);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_startE_1131_0 {
  typedef TJP__ZN14vm_area_struct8vm_startE_1131_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_startE_1131(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_startE_1131_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_flagsE_1132_0 {
  typedef TJP__ZN14vm_area_struct8vm_flagsE_1132_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_flagsE_1132(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_flagsE_1132_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int vma_growsup(struct vm_area_struct *vma, unsigned long addr)
{
 return vma && (__get__ZN14vm_area_struct8vm_startE_1131(&vma->vm_start) == addr) && (__get__ZN14vm_area_struct8vm_flagsE_1132(&vma->vm_flags) & 0x00000000);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_flagsE_1133_0 {
  typedef TJP__ZN14vm_area_struct8vm_flagsE_1133_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_flagsE_1133(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_flagsE_1133_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct6vm_endE_1134_0 {
  typedef TJP__ZN14vm_area_struct6vm_endE_1134_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct6vm_endE_1134(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct6vm_endE_1134_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct7vm_nextE_1135_0 {
  typedef TJP__ZN14vm_area_struct7vm_nextE_1135_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline vm_area_struct * __get__ZN14vm_area_struct7vm_nextE_1135(vm_area_struct * *source) {
  ::vm_area_struct *__result_buffer;
  typedef TJP__ZN14vm_area_struct7vm_nextE_1135_0< ::vm_area_struct *, ::vm_area_struct , ::vm_area_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::vm_area_struct *&)__result_buffer;
}
static inline int stack_guard_page_end(struct vm_area_struct *vma,
        unsigned long addr)
{
 return (__get__ZN14vm_area_struct8vm_flagsE_1133(&vma->vm_flags) & 0x00000000) &&
  (__get__ZN14vm_area_struct6vm_endE_1134(&vma->vm_end) == addr) &&
  !vma_growsup(__get__ZN14vm_area_struct7vm_nextE_1135(&vma->vm_next), addr);
}

extern pid_t
vm_is_stack(struct task_struct *task, struct vm_area_struct *vma, int in_group);

extern unsigned long move_page_tables(struct vm_area_struct *vma,
  unsigned long old_addr, struct vm_area_struct *new_vma,
  unsigned long new_addr, unsigned long len,
  bool need_rmap_locks);
extern unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,
         unsigned long end, pgprot_t newprot,
         int dirty_accountable, int prot_numa);
extern int mprotect_fixup(struct vm_area_struct *vma,
     struct vm_area_struct **pprev, unsigned long start,
     unsigned long end, unsigned long newflags);




int __get_user_pages_fast(unsigned long start, int nr_pages, int write,
     struct page **pages);




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct8rss_statE_1137_0 {
  typedef TJP__ZN9mm_struct8rss_statE_1137_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline mm_rss_stat __get__ZN9mm_struct8rss_statE_1137(mm_rss_stat *source) {
  AC::ResultBuffer< ::mm_rss_stat  > __result_buffer;
  typedef TJP__ZN9mm_struct8rss_statE_1137_0< ::mm_rss_stat , ::mm_struct , ::mm_rss_stat  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::mm_rss_stat &)__result_buffer;
}
static inline unsigned long get_mm_counter(struct mm_struct *mm, int member)
{
 long val = atomic_long_read(&__get__ZN9mm_struct8rss_statE_1137(&mm->rss_stat).count[member]);






 if (val < 0)
  val = 0;

 return (unsigned long)val;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct8rss_statE_1139_0 {
  typedef TJP__ZN9mm_struct8rss_statE_1139_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline mm_rss_stat __get__ZN9mm_struct8rss_statE_1139(mm_rss_stat *source) {
  AC::ResultBuffer< ::mm_rss_stat  > __result_buffer;
  typedef TJP__ZN9mm_struct8rss_statE_1139_0< ::mm_rss_stat , ::mm_struct , ::mm_rss_stat  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::mm_rss_stat &)__result_buffer;
}
static inline void add_mm_counter(struct mm_struct *mm, int member, long value)
{
 atomic_long_add(value, &__get__ZN9mm_struct8rss_statE_1139(&mm->rss_stat).count[member]);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct8rss_statE_1141_0 {
  typedef TJP__ZN9mm_struct8rss_statE_1141_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline mm_rss_stat __get__ZN9mm_struct8rss_statE_1141(mm_rss_stat *source) {
  AC::ResultBuffer< ::mm_rss_stat  > __result_buffer;
  typedef TJP__ZN9mm_struct8rss_statE_1141_0< ::mm_rss_stat , ::mm_struct , ::mm_rss_stat  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::mm_rss_stat &)__result_buffer;
}
static inline void inc_mm_counter(struct mm_struct *mm, int member)
{
 atomic_long_inc(&__get__ZN9mm_struct8rss_statE_1141(&mm->rss_stat).count[member]);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct8rss_statE_1143_0 {
  typedef TJP__ZN9mm_struct8rss_statE_1143_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline mm_rss_stat __get__ZN9mm_struct8rss_statE_1143(mm_rss_stat *source) {
  AC::ResultBuffer< ::mm_rss_stat  > __result_buffer;
  typedef TJP__ZN9mm_struct8rss_statE_1143_0< ::mm_rss_stat , ::mm_struct , ::mm_rss_stat  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::mm_rss_stat &)__result_buffer;
}
static inline void dec_mm_counter(struct mm_struct *mm, int member)
{
 atomic_long_dec(&__get__ZN9mm_struct8rss_statE_1143(&mm->rss_stat).count[member]);
}

static inline unsigned long get_mm_rss(struct mm_struct *mm)
{
 return get_mm_counter(mm, MM_FILEPAGES) +
  get_mm_counter(mm, MM_ANONPAGES);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct11hiwater_rssE_1146_0 {
  typedef TJP__ZN9mm_struct11hiwater_rssE_1146_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9mm_struct11hiwater_rssE_1146(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9mm_struct11hiwater_rssE_1146_0< unsigned long int , ::mm_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long get_mm_hiwater_rss(struct mm_struct *mm)
{
 return ({ typeof(mm->hiwater_rss) _max1 = (__get__ZN9mm_struct11hiwater_rssE_1146(&mm->hiwater_rss)); typeof(get_mm_rss(mm)) _max2 = (get_mm_rss(mm)); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; });
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct10hiwater_vmE_1147_0 {
  typedef TJP__ZN9mm_struct10hiwater_vmE_1147_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9mm_struct10hiwater_vmE_1147(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9mm_struct10hiwater_vmE_1147_0< unsigned long int , ::mm_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct8total_vmE_1148_0 {
  typedef TJP__ZN9mm_struct8total_vmE_1148_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9mm_struct8total_vmE_1148(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9mm_struct8total_vmE_1148_0< unsigned long int , ::mm_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long get_mm_hiwater_vm(struct mm_struct *mm)
{
 return ({ typeof(mm->hiwater_vm) _max1 = (__get__ZN9mm_struct10hiwater_vmE_1147(&mm->hiwater_vm)); typeof(mm->total_vm) _max2 = (__get__ZN9mm_struct8total_vmE_1148(&mm->total_vm)); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; });
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct11hiwater_rssE_1149_0 {
  typedef TJP__ZN9mm_struct11hiwater_rssE_1149_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9mm_struct11hiwater_rssE_1149(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9mm_struct11hiwater_rssE_1149_0< unsigned long int , ::mm_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void update_hiwater_rss(struct mm_struct *mm)
{
 unsigned long _rss = get_mm_rss(mm);

 if (__get__ZN9mm_struct11hiwater_rssE_1149(&(mm)->hiwater_rss) < _rss)
  (mm)->hiwater_rss = _rss;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct10hiwater_vmE_1150_0 {
  typedef TJP__ZN9mm_struct10hiwater_vmE_1150_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9mm_struct10hiwater_vmE_1150(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9mm_struct10hiwater_vmE_1150_0< unsigned long int , ::mm_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct8total_vmE_1151_0 {
  typedef TJP__ZN9mm_struct8total_vmE_1151_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9mm_struct8total_vmE_1151(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9mm_struct8total_vmE_1151_0< unsigned long int , ::mm_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct8total_vmE_1152_0 {
  typedef TJP__ZN9mm_struct8total_vmE_1152_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN9mm_struct8total_vmE_1152(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN9mm_struct8total_vmE_1152_0< unsigned long int , ::mm_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void update_hiwater_vm(struct mm_struct *mm)
{
 if (__get__ZN9mm_struct10hiwater_vmE_1150(&mm->hiwater_vm) < __get__ZN9mm_struct8total_vmE_1151(&mm->total_vm))
  mm->hiwater_vm = __get__ZN9mm_struct8total_vmE_1152(&mm->total_vm);
}

static inline void setmax_mm_hiwater_rss(unsigned long *maxrss,
      struct mm_struct *mm)
{
 unsigned long hiwater_rss = get_mm_hiwater_rss(mm);

 if (*maxrss < hiwater_rss)
  *maxrss = hiwater_rss;
}


void sync_mm_rss(struct mm_struct *mm);






int vma_wants_writenotify(struct vm_area_struct *vma);

extern pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,
          spinlock_t **ptl);
static inline pte_t *get_locked_pte(struct mm_struct *mm, unsigned long addr,
        spinlock_t **ptl)
{
 pte_t *ptep;
 (ptep = __get_locked_pte(mm, addr, ptl));
 return ptep;
}
int __pud_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address);
int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address);


int __pte_alloc(struct mm_struct *mm, struct vm_area_struct *vma,
  pmd_t *pmd, unsigned long address);
int __pte_alloc_kernel(pmd_t *pmd, unsigned long address);






static inline pud_t *pud_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address)
{
 return (__builtin_expect(!!(pgd_none(*pgd)), 0) && __pud_alloc(mm, pgd, address))?
  0: pud_offset(pgd, address);
}

static inline pmd_t *pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)
{
 return (__builtin_expect(!!(pud_none(*pud)), 0) && __pmd_alloc(mm, pud, address))?
  0: pmd_offset(pud, address);
}
static inline bool ptlock_alloc(struct page *page)
{
 return _true;
}

static inline void ptlock_free(struct page *page)
{
}

static inline spinlock_t *ptlock_ptr(struct page *page)
{
 return &page->ptl;
}


static inline spinlock_t *pte_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr((((struct page *)(0xffffea0000000000UL)) + ((pmd_val(*pmd) & ((pteval_t)(((signed long)(~(((1UL) << 12)-1))) & ((phys_addr_t)((1ULL << 46) - 1))))) >> 12)));
}

static inline bool ptlock_init(struct page *page)
{
 (0);
 if (!ptlock_alloc(page))
  return _false;
 ;
 return _true;
}


static inline void pte_lock_deinit(struct page *page)
{
 page->mapping = 0;
 ptlock_free(page);
}
static inline bool pgtable_page_ctor(struct page *page)
{
 inc_zone_page_state(page, NR_PAGETABLE);
 return ptlock_init(page);
}

static inline void pgtable_page_dtor(struct page *page)
{
 pte_lock_deinit(page);
 dec_zone_page_state(page, NR_PAGETABLE);
}
static inline spinlock_t *pmd_lockptr(struct mm_struct *mm, pmd_t *pmd)
{
 return ptlock_ptr((((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)(pmd)) >> 12)));
}

static inline bool pgtable_pmd_page_ctor(struct page *page)
{

 page->pmd_huge_pte = 0;

 return ptlock_init(page);
}

static inline void pgtable_pmd_page_dtor(struct page *page)
{

 (0);

 ptlock_free(page);
}
static inline spinlock_t *pmd_lock(struct mm_struct *mm, pmd_t *pmd)
{
 spinlock_t *ptl = pmd_lockptr(mm, pmd);
 ;
 return ptl;
}

extern void free_area_init(unsigned long * zones_size);
extern void free_area_init_node(int nid, unsigned long * zones_size,
  unsigned long zone_start_pfn, unsigned long *zholes_size);
extern void free_initmem(void);







extern unsigned long free_reserved_area(void *start, void *end,
     int poison, char *s);
extern void adjust_managed_page_count(struct page *page, long count);
extern void mem_init_print_info( char *str);


static inline void __free_reserved_page(struct page *page)
{
 ClearPageReserved(page);
 init_page_count(page);
 __free_pages((page), 0);
}

static inline void free_reserved_page(struct page *page)
{
 __free_reserved_page(page);
 adjust_managed_page_count(page, 1);
}

static inline void mark_page_reserved(struct page *page)
{
 SetPageReserved(page);
 adjust_managed_page_count(page, -1);
}







static inline unsigned long free_initmem_default(int poison)
{
 extern char __init_begin[], __init_end[];

 return free_reserved_area(&__init_begin, &__init_end,
      poison, "unused kernel");
}

static inline unsigned long get_num_physpages(void)
{
 int nid;
 unsigned long phys_pages = 0;

 for (((nid)) = __first_node(&(node_states[N_ONLINE])); ((nid)) < (1 << 6); ((nid)) = __next_node((((nid))), &((node_states[N_ONLINE]))))
  phys_pages += ((node_data[nid])->node_present_pages);

 return phys_pages;
}
extern void free_area_init_nodes(unsigned long *max_zone_pfn);
unsigned long node_map_pfn_alignment(void);
unsigned long __absent_pages_in_range(int nid, unsigned long start_pfn,
      unsigned long end_pfn);
extern unsigned long absent_pages_in_range(unsigned long start_pfn,
      unsigned long end_pfn);
extern void get_pfn_range_for_nid(unsigned int nid,
   unsigned long *start_pfn, unsigned long *end_pfn);
extern unsigned long find_min_pfn_with_active_regions(void);
extern void free_bootmem_with_active_regions(int nid,
      unsigned long max_low_pfn);
extern void sparse_memory_present_with_active_regions(int nid);
extern int __attribute__ ((__section__(".meminit.text"))) __attribute__((__cold__)) early_pfn_to_nid(unsigned long pfn);






extern void set_dma_reserve(unsigned long new_dma_reserve);
extern void memmap_init_zone(unsigned long, int, unsigned long,
    unsigned long, enum memmap_context);
extern void setup_per_zone_wmarks(void);
extern int __attribute__ ((__section__(".meminit.text"))) __attribute__((__cold__)) init_per_zone_wmark_min(void);
extern void mem_init(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) mmap_init(void);
extern void show_mem(unsigned int flags);
extern void si_meminfo(struct sysinfo * val);
extern void si_meminfo_node(struct sysinfo *val, int nid);

extern __attribute__((format(printf, 3, 4)))
void warn_alloc_failed(gfp_t gfp_mask, int order, char *fmt, ...);

extern void setup_per_cpu_pageset(void);

extern void zone_pcp_update(struct zone *zone);
extern void zone_pcp_reset(struct zone *zone);


extern int min_free_kbytes;


extern atomic_long_t mmap_pages_allocated;
extern int nommu_shrink_inode_mappings(struct inode *, size_t, size_t);


void vma_interval_tree_insert(struct vm_area_struct *node,
         struct rb_root *root);
void vma_interval_tree_insert_after(struct vm_area_struct *node,
        struct vm_area_struct *prev,
        struct rb_root *root);
void vma_interval_tree_remove(struct vm_area_struct *node,
         struct rb_root *root);
struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root *root,
    unsigned long start, unsigned long last);
struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *node,
    unsigned long start, unsigned long last);





static inline void vma_nonlinear_insert(struct vm_area_struct *vma,
     struct list_head *list)
{
 list_add_tail(&vma->shared.nonlinear, list);
}

void anon_vma_interval_tree_insert(struct anon_vma_chain *node,
       struct rb_root *root);
void anon_vma_interval_tree_remove(struct anon_vma_chain *node,
       struct rb_root *root);
struct anon_vma_chain *anon_vma_interval_tree_iter_first(
 struct rb_root *root, unsigned long start, unsigned long last);
struct anon_vma_chain *anon_vma_interval_tree_iter_next(
 struct anon_vma_chain *node, unsigned long start, unsigned long last);
extern int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin);
extern int vma_adjust(struct vm_area_struct *vma, unsigned long start,
 unsigned long end, unsigned long pgoff, struct vm_area_struct *insert);
extern struct vm_area_struct *vma_merge(struct mm_struct *,
 struct vm_area_struct *prev, unsigned long addr, unsigned long end,
 unsigned long vm_flags, struct anon_vma *, struct file *, unsigned long,
 struct mempolicy *);
extern struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
extern int split_vma(struct mm_struct *,
 struct vm_area_struct *, unsigned long addr, int new_below);
extern int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
extern void __vma_link_rb(struct mm_struct *, struct vm_area_struct *,
 struct rb_node **, struct rb_node *);
extern void unlink_file_vma(struct vm_area_struct *);
extern struct vm_area_struct *copy_vma(struct vm_area_struct **,
 unsigned long addr, unsigned long len, unsigned long pgoff,
 bool *need_rmap_locks);
extern void exit_mmap(struct mm_struct *);

extern int mm_take_all_locks(struct mm_struct *mm);
extern void mm_drop_all_locks(struct mm_struct *mm);

extern void set_mm_exe_file(struct mm_struct *mm, struct file *new_exe_file);
extern struct file *get_mm_exe_file(struct mm_struct *mm);

extern int may_expand_vm(struct mm_struct *mm, unsigned long npages);
extern int install_special_mapping(struct mm_struct *mm,
       unsigned long addr, unsigned long len,
       unsigned long flags, struct page **pages);

extern unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

extern unsigned long mmap_region(struct file *file, unsigned long addr,
 unsigned long len, vm_flags_t vm_flags, unsigned long pgoff);
extern unsigned long do_mmap_pgoff(struct file *file, unsigned long addr,
 unsigned long len, unsigned long prot, unsigned long flags,
 unsigned long pgoff, unsigned long *populate);
extern int do_munmap(struct mm_struct *, unsigned long, size_t);


extern int __mm_populate(unsigned long addr, unsigned long len,
    int ignore_errors);
static inline void mm_populate(unsigned long addr, unsigned long len)
{

 (void) __mm_populate(addr, len, 1);
}





extern unsigned long vm_brk(unsigned long, unsigned long);
extern int vm_munmap(unsigned long, size_t);
extern unsigned long vm_mmap(struct file *, unsigned long,
        unsigned long, unsigned long,
        unsigned long, unsigned long);

struct vm_unmapped_area_info {
  template <typename, int = 0> struct __BYPASSvm_unmapped_area_info {};
  template <typename, int> friend struct __BYPASSvm_unmapped_area_info;

 unsigned long flags;
 unsigned long length;
 unsigned long low_limit;
 unsigned long high_limit;
 unsigned long align_mask;
 unsigned long align_offset;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern unsigned long unmapped_area(struct vm_unmapped_area_info *info);
extern unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *info);
static inline unsigned long
vm_unmapped_area(struct vm_unmapped_area_info *info)
{
 if (!(info->flags & 1))
  return unmapped_area(info);
 else
  return unmapped_area_topdown(info);
}


extern void truncate_inode_pages(struct address_space *, loff_t);
extern void truncate_inode_pages_range(struct address_space *,
           loff_t lstart, loff_t lend);


extern int filemap_fault(struct vm_area_struct *, struct vm_fault *);
extern int filemap_page_mkwrite(struct vm_area_struct *vma, struct vm_fault *vmf);


int write_one_page(struct page *page, int wait);
void task_dirty_inc(struct task_struct *tsk);





int force_page_cache_readahead(struct address_space *mapping, struct file *filp,
   unsigned long offset, unsigned long nr_to_read);

void page_cache_sync_readahead(struct address_space *mapping,
          struct file_ra_state *ra,
          struct file *filp,
          unsigned long offset,
          unsigned long size);

void page_cache_async_readahead(struct address_space *mapping,
    struct file_ra_state *ra,
    struct file *filp,
    struct page *pg,
    unsigned long offset,
    unsigned long size);

unsigned long max_sane_readahead(unsigned long nr);
unsigned long ra_submit(struct file_ra_state *ra,
   struct address_space *mapping,
   struct file *filp);


extern int expand_stack(struct vm_area_struct *vma, unsigned long address);


extern int expand_downwards(struct vm_area_struct *vma,
  unsigned long address);







extern struct vm_area_struct * find_vma(struct mm_struct * mm, unsigned long addr);
extern struct vm_area_struct * find_vma_prev(struct mm_struct * mm, unsigned long addr,
          struct vm_area_struct **pprev);




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_startE_1165_0 {
  typedef TJP__ZN14vm_area_struct8vm_startE_1165_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_startE_1165(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_startE_1165_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * mm, unsigned long start_addr, unsigned long end_addr)
{
 struct vm_area_struct * vma = find_vma(mm,start_addr);

 if (vma && end_addr <= __get__ZN14vm_area_struct8vm_startE_1165(&vma->vm_start))
  vma = 0;
 return vma;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct6vm_endE_1166_0 {
  typedef TJP__ZN14vm_area_struct6vm_endE_1166_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct6vm_endE_1166(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct6vm_endE_1166_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_startE_1167_0 {
  typedef TJP__ZN14vm_area_struct8vm_startE_1167_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_startE_1167(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_startE_1167_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline unsigned long vma_pages(struct vm_area_struct *vma)
{
 return (__get__ZN14vm_area_struct6vm_endE_1166(&vma->vm_end) - __get__ZN14vm_area_struct8vm_startE_1167(&vma->vm_start)) >> 12;
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct8vm_startE_1168_0 {
  typedef TJP__ZN14vm_area_struct8vm_startE_1168_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct8vm_startE_1168(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct8vm_startE_1168_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN14vm_area_struct6vm_endE_1169_0 {
  typedef TJP__ZN14vm_area_struct6vm_endE_1169_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN14vm_area_struct6vm_endE_1169(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN14vm_area_struct6vm_endE_1169_0< unsigned long int , ::vm_area_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline struct vm_area_struct *find_exact_vma(struct mm_struct *mm,
    unsigned long vm_start, unsigned long vm_end)
{
 struct vm_area_struct *vma = find_vma(mm, vm_start);

 if (vma && (__get__ZN14vm_area_struct8vm_startE_1168(&vma->vm_start) != vm_start || __get__ZN14vm_area_struct6vm_endE_1169(&vma->vm_end) != vm_end))
  vma = 0;

 return vma;
}


pgprot_t vm_get_page_prot(unsigned long vm_flags);
unsigned long change_prot_numa(struct vm_area_struct *vma,
   unsigned long start, unsigned long end);


struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long addr);
int remap_pfn_range(struct vm_area_struct *, unsigned long addr,
   unsigned long pfn, unsigned long size, pgprot_t);
int vm_insert_page(struct vm_area_struct *, unsigned long addr, struct page *);
int vm_insert_pfn(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
int vm_insert_mixed(struct vm_area_struct *vma, unsigned long addr,
   unsigned long pfn);
int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len);


struct page *follow_page_mask(struct vm_area_struct *vma,
         unsigned long address, unsigned int foll_flags,
         unsigned int *page_mask);

static inline struct page *follow_page(struct vm_area_struct *vma,
  unsigned long address, unsigned int foll_flags)
{
 unsigned int unused_page_mask;
 return follow_page_mask(vma, address, foll_flags, &unused_page_mask);
}
typedef int (*pte_fn_t)(pte_t *pte, pgtable_t token, unsigned long addr,
   void *data);
extern int apply_to_page_range(struct mm_struct *mm, unsigned long address,
          unsigned long size, pte_fn_t fn, void *data);


void vm_stat_account(struct mm_struct *, unsigned long, struct file *, long);
static inline void
kernel_map_pages(struct page *page, int numpages, int enable) {}

static inline bool kernel_page_present(struct page *page) { return _true; }



extern struct vm_area_struct *get_gate_vma(struct mm_struct *mm);

int in_gate_area_no_mm(unsigned long addr);
int in_gate_area(struct mm_struct *mm, unsigned long addr);






extern int sysctl_drop_caches;
int drop_caches_sysctl_handler(struct ctl_table *, int,
     void *, size_t *, loff_t *);


unsigned long shrink_slab(struct shrink_control *shrink,
     unsigned long nr_pages_scanned,
     unsigned long lru_pages);




extern int randomize_va_space;


 char * arch_vma_name(struct vm_area_struct *vma);
void print_vma_addr(char *prefix, unsigned long rip);

void sparse_mem_maps_populate_node(struct page **map_map,
       unsigned long pnum_begin,
       unsigned long pnum_end,
       unsigned long map_count,
       int nodeid);

struct page *sparse_mem_map_populate(unsigned long pnum, int nid);
pgd_t *vmemmap_pgd_populate(unsigned long addr, int node);
pud_t *vmemmap_pud_populate(pgd_t *pgd, unsigned long addr, int node);
pmd_t *vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node);
pte_t *vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node);
void *vmemmap_alloc_block(unsigned long size, int node);
void *vmemmap_alloc_block_buf(unsigned long size, int node);
void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
int vmemmap_populate_basepages(unsigned long start, unsigned long end,
          int node);
int vmemmap_populate(unsigned long start, unsigned long end, int node);
void vmemmap_populate_print_last(void);

void vmemmap_free(unsigned long start, unsigned long end);

void register_page_bootmem_memmap(unsigned long section_nr, struct page *map,
      unsigned long size);

enum mf_flags {
 MF_COUNT_INCREASED = 1 << 0,
 MF_ACTION_REQUIRED = 1 << 1,
 MF_MUST_KILL = 1 << 2,
 MF_SOFT_OFFLINE = 1 << 3,
};
extern int memory_failure(unsigned long pfn, int trapno, int flags);
extern void memory_failure_queue(unsigned long pfn, int trapno, int flags);
extern int unpoison_memory(unsigned long pfn);
extern int sysctl_memory_failure_early_kill;
extern int sysctl_memory_failure_recovery;
extern void shake_page(struct page *p, int access);
extern atomic_long_t num_poisoned_pages;
extern int soft_offline_page(struct page *page, int flags);

extern void dump_page(struct page *page);


extern void clear_huge_page(struct page *page,
       unsigned long addr,
       unsigned int pages_per_huge_page);
extern void copy_user_huge_page(struct page *dst, struct page *src,
    unsigned long addr, struct vm_area_struct *vma,
    unsigned int pages_per_huge_page);
static inline unsigned int debug_guardpage_minorder(void) { return 0; }
static inline bool page_is_guard(struct page *page) { return _false; }



void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) setup_nr_node_ids(void);







struct iovec
{
  template <typename, int = 0> struct __BYPASSiovec {};
  template <typename, int> friend struct __BYPASSiovec;
 void *iov_base;
 __kernel_size_t iov_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct kvec {
  template <typename, int = 0> struct __BYPASSkvec {};
  template <typename, int> friend struct __BYPASSkvec;
 void *iov_base;
 size_t iov_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline size_t iov_length( struct iovec *iov, unsigned long nr_segs)
{
 unsigned long seg;
 size_t ret = 0;

 for (seg = 0; seg < nr_segs; seg++)
  ret += iov[seg].iov_len;
 return ret;
}

unsigned long iov_shorten(struct iovec *iov, unsigned long nr_segs, size_t to);

int memcpy_fromiovec(unsigned char *kdata, struct iovec *iov, int len);
int memcpy_toiovec(struct iovec *iov, unsigned char *kdata, int len);


typedef unsigned short __kernel_sa_family_t;

struct __kernel_sockaddr_storage {
  template <typename, int = 0> struct __BYPASS__kernel_sockaddr_storage {};
  template <typename, int> friend struct __BYPASS__kernel_sockaddr_storage;
 __kernel_sa_family_t ss_family;

 char __data[128 - sizeof(unsigned short)];



  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((aligned((__alignof__ (struct sockaddr *)))));

struct pid;
struct cred;





struct seq_file;
extern void socket_seq_show(struct seq_file *seq);


typedef __kernel_sa_family_t sa_family_t;





struct sockaddr {
  template <typename, int = 0> struct __BYPASSsockaddr {};
  template <typename, int> friend struct __BYPASSsockaddr;
 sa_family_t sa_family;
 char sa_data[14];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct linger {
  template <typename, int = 0> struct __BYPASSlinger {};
  template <typename, int> friend struct __BYPASSlinger;
 int l_onoff;
 int l_linger;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct msghdr {
  template <typename, int = 0> struct __BYPASSmsghdr {};
  template <typename, int> friend struct __BYPASSmsghdr;
 void * msg_name;
 int msg_namelen;
 struct iovec * msg_iov;
 __kernel_size_t msg_iovlen;
 void * msg_control;
 __kernel_size_t msg_controllen;
 unsigned int msg_flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct mmsghdr {
  template <typename, int = 0> struct __BYPASSmmsghdr {};
  template <typename, int> friend struct __BYPASSmmsghdr;
 struct msghdr msg_hdr;
 unsigned int msg_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct cmsghdr {
  template <typename, int = 0> struct __BYPASScmsghdr {};
  template <typename, int> friend struct __BYPASScmsghdr;
 __kernel_size_t cmsg_len;
        int cmsg_level;
        int cmsg_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline struct cmsghdr * __cmsg_nxthdr(void *__ctl, __kernel_size_t __size,
            struct cmsghdr *__cmsg)
{
 struct cmsghdr * __ptr;

 __ptr = (struct cmsghdr*)(((unsigned char *) __cmsg) + ( ((__cmsg->cmsg_len)+sizeof(long)-1) & ~(sizeof(long)-1) ));
 if ((unsigned long)((char*)(__ptr+1) - (char *) __ctl) > __size)
  return (struct cmsghdr *)0;

 return __ptr;
}

static inline struct cmsghdr * cmsg_nxthdr (struct msghdr *__msg, struct cmsghdr *__cmsg)
{
 return __cmsg_nxthdr(__msg->msg_control, __msg->msg_controllen, __cmsg);
}







struct ucred {
  template <typename, int = 0> struct __BYPASSucred {};
  template <typename, int> friend struct __BYPASSucred;
 __u32 pid;
 __u32 uid;
 __u32 gid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void cred_to_ucred(struct pid *pid, struct cred *cred, struct ucred *ucred);

extern int memcpy_fromiovecend(unsigned char *kdata, struct iovec *iov,
          int offset, int len);
extern int csum_partial_copy_fromiovecend(unsigned char *kdata,
       struct iovec *iov,
       int offset,
       unsigned int len, __wsum *csump);
extern unsigned long iov_pages( struct iovec *iov, int offset,
          unsigned long nr_segs);

extern int verify_iovec(struct msghdr *m, struct iovec *iov, struct __kernel_sockaddr_storage *address, int mode);
extern int memcpy_toiovecend( struct iovec *v, unsigned char *kdata,
        int offset, int len);
extern int move_addr_to_kernel(void *uaddr, int ulen, struct __kernel_sockaddr_storage *kaddr);
extern int put_cmsg(struct msghdr*, int level, int type, int len, void *data);

struct timespec;


extern long __sys_recvmsg(int fd, struct msghdr *msg, unsigned flags);
extern long __sys_sendmsg(int fd, struct msghdr *msg, unsigned flags);
extern int __sys_recvmmsg(int fd, struct mmsghdr *mmsg, unsigned int vlen,
     unsigned int flags, struct timespec *timeout);
extern int __sys_sendmmsg(int fd, struct mmsghdr *mmsg,
     unsigned int vlen, unsigned int flags);






extern int nr_irqs;
extern struct irq_desc *irq_to_desc(unsigned int irq);
unsigned int irq_get_next_irq(unsigned int offset);
struct rand_pool_info {
  template <typename, int = 0> struct __BYPASSrand_pool_info {};
  template <typename, int> friend struct __BYPASSrand_pool_info;
 int entropy_count;
 int buf_size;
 __u32 buf[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern void add_device_randomness( void *, unsigned int);
extern void add_input_randomness(unsigned int type, unsigned int code,
     unsigned int value);
extern void add_interrupt_randomness(int irq, int irq_flags);

extern void get_random_bytes(void *buf, int nbytes);
extern void get_random_bytes_arch(void *buf, int nbytes);
void generate_random_uuid(unsigned char uuid_out[16]);
extern int random_int_secret_init(void);


extern struct file_operations random_fops, urandom_fops;


unsigned int get_random_int(void);
unsigned long randomize_range(unsigned long start, unsigned long end, unsigned long len);

u32 prandom_u32(void);
void prandom_bytes(void *buf, int nbytes);
void prandom_seed(u32 seed);
void prandom_reseed_late(void);

struct rnd_state {
  template <typename, int = 0> struct __BYPASSrnd_state {};
  template <typename, int> friend struct __BYPASSrnd_state;
 __u32 s1, s2, s3, s4;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

u32 prandom_u32_state(struct rnd_state *state);
void prandom_bytes_state(struct rnd_state *state, void *buf, int nbytes);




static inline u32 __seed(u32 x, u32 m)
{
 return (x < m) ? x + m : x;
}






static inline void prandom_seed_state(struct rnd_state *state, u64 seed)
{
 u32 i = (seed >> 32) ^ (seed << 10) ^ seed;

 state->s1 = __seed(i, 2U);
 state->s2 = __seed(i, 8U);
 state->s3 = __seed(i, 16U);
 state->s4 = __seed(i, 128U);
}


static inline int arch_get_random_long(unsigned long *v) { int ok; asm ("661:\n\t" "movl $0, %0\n\t" ".byte " "0x66,0x66,0x90,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(4*32+30)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" "\n1: " ".byte 0x48,0x0f,0xc7,0xf0" "\n\t" "jc 2f\n\t" "decl %0\n\t" "jnz 1b\n\t" "2:" "\n" "664""1" ":\n\t" ".popsection" : "=r" (ok), "=a" (*v) : "i" (0), "0" (10)); return ok; };
static inline int arch_get_random_int(unsigned int *v) { int ok; asm ("661:\n\t" "movl $0, %0\n\t" ".byte " "0x66,0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(4*32+30)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" "\n1: " ".byte 0x0f,0xc7,0xf0" "\n\t" "jc 2f\n\t" "decl %0\n\t" "jnz 1b\n\t" "2:" "\n" "664""1" ":\n\t" ".popsection" : "=r" (ok), "=a" (*v) : "i" (0), "0" (10)); return ok; };
extern void x86_init_rdrand(struct cpuinfo_x86 *c);
static inline u32 next_pseudo_random32(u32 seed)
{
 return seed * 1664525 + 1013904223;
}


static inline void
kmemcheck_alloc_shadow(struct page *page, int order, gfp_t flags, int node)
{
}

static inline void
kmemcheck_free_shadow(struct page *page, int order)
{
}

static inline void
kmemcheck_slab_alloc(struct kmem_cache *s, gfp_t gfpflags, void *object,
       size_t size)
{
}

static inline void kmemcheck_slab_free(struct kmem_cache *s, void *object,
           size_t size)
{
}

static inline void kmemcheck_pagealloc_alloc(struct page *p,
 unsigned int order, gfp_t gfpflags)
{
}

static inline bool kmemcheck_page_is_tracked(struct page *p)
{
 return _false;
}

static inline void kmemcheck_mark_unallocated(void *address, unsigned int n)
{
}

static inline void kmemcheck_mark_uninitialized(void *address, unsigned int n)
{
}

static inline void kmemcheck_mark_initialized(void *address, unsigned int n)
{
}

static inline void kmemcheck_mark_freed(void *address, unsigned int n)
{
}

static inline void kmemcheck_mark_unallocated_pages(struct page *p,
          unsigned int n)
{
}

static inline void kmemcheck_mark_uninitialized_pages(struct page *p,
            unsigned int n)
{
}

static inline void kmemcheck_mark_initialized_pages(struct page *p,
          unsigned int n)
{
}

static inline bool kmemcheck_is_obj_initialized(unsigned long addr, size_t size)
{
 return _true;
}


typedef enum {
 SS_FREE = 0,
 SS_UNCONNECTED,
 SS_CONNECTING,
 SS_CONNECTED,
 SS_DISCONNECTING
} socket_state;

struct poll_table_struct;
struct pipe_inode_info;
struct inode;
struct file;
struct net;
enum sock_type {
 SOCK_STREAM = 1,
 SOCK_DGRAM = 2,
 SOCK_RAW = 3,
 SOCK_RDM = 4,
 SOCK_SEQPACKET = 5,
 SOCK_DCCP = 6,
 SOCK_PACKET = 10,
};
enum sock_shutdown_cmd {
 SHUT_RD,
 SHUT_WR,
 SHUT_RDWR,
};

struct socket_wq {
  template <typename, int = 0> struct __BYPASSsocket_wq {};
  template <typename, int> friend struct __BYPASSsocket_wq;

 wait_queue_head_t wait;
 struct fasync_struct *fasync_list;
 struct callback_head rcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));
struct socket {
  template <typename, int = 0> struct __BYPASSsocket {};
  template <typename, int> friend struct __BYPASSsocket;
 socket_state state;

 ;
 short type;
 ;

 unsigned long flags;

 struct socket_wq *wq;

 struct file *file;
 struct sock *sk;
 struct proto_ops *ops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct vm_area_struct;
struct page;
struct kiocb;
struct sockaddr;
struct msghdr;
struct module;

struct proto_ops {
  template <typename, int = 0> struct __BYPASSproto_ops {};
  template <typename, int> friend struct __BYPASSproto_ops;
 int family;
 struct module *owner;
 int (*release) (struct socket *sock);
 int (*bind) (struct socket *sock,
          struct sockaddr *myaddr,
          int sockaddr_len);
 int (*connect) (struct socket *sock,
          struct sockaddr *vaddr,
          int sockaddr_len, int flags);
 int (*socketpair)(struct socket *sock1,
          struct socket *sock2);
 int (*accept) (struct socket *sock,
          struct socket *newsock, int flags);
 int (*getname) (struct socket *sock,
          struct sockaddr *addr,
          int *sockaddr_len, int peer);
 unsigned int (*poll) (struct file *file, struct socket *sock,
          struct poll_table_struct *wait);
 int (*ioctl) (struct socket *sock, unsigned int cmd,
          unsigned long arg);

 int (*compat_ioctl) (struct socket *sock, unsigned int cmd,
          unsigned long arg);

 int (*listen) (struct socket *sock, int len);
 int (*shutdown) (struct socket *sock, int flags);
 int (*setsockopt)(struct socket *sock, int level,
          int optname, char *optval, unsigned int optlen);
 int (*getsockopt)(struct socket *sock, int level,
          int optname, char *optval, int *optlen);

 int (*compat_setsockopt)(struct socket *sock, int level,
          int optname, char *optval, unsigned int optlen);
 int (*compat_getsockopt)(struct socket *sock, int level,
          int optname, char *optval, int *optlen);

 int (*sendmsg) (struct kiocb *iocb, struct socket *sock,
          struct msghdr *m, size_t total_len);
 int (*recvmsg) (struct kiocb *iocb, struct socket *sock,
          struct msghdr *m, size_t total_len,
          int flags);
 int (*mmap) (struct file *file, struct socket *sock,
          struct vm_area_struct * vma);
 ssize_t (*sendpage) (struct socket *sock, struct page *page,
          int offset, size_t size, int flags);
 ssize_t (*splice_read)(struct socket *sock, loff_t *ppos,
           struct pipe_inode_info *pipe, size_t len, unsigned int flags);
 int (*set_peek_off)(struct sock *sk, int val);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct net_proto_family {
  template <typename, int = 0> struct __BYPASSnet_proto_family {};
  template <typename, int> friend struct __BYPASSnet_proto_family;
 int family;
 int (*create)(struct net *net, struct socket *sock,
      int protocol, int kern);
 struct module *owner;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct iovec;
struct kvec;

enum {
 SOCK_WAKE_IO,
 SOCK_WAKE_WAITD,
 SOCK_WAKE_SPACE,
 SOCK_WAKE_URG,
};

int sock_wake_async(struct socket *sk, int how, int band);
int sock_register( struct net_proto_family *fam);
void sock_unregister(int family);
int __sock_create(struct net *net, int family, int type, int proto,
    struct socket **res, int kern);
int sock_create(int family, int type, int proto, struct socket **res);
int sock_create_kern(int family, int type, int proto, struct socket **res);
int sock_create_lite(int family, int type, int proto, struct socket **res);
void sock_release(struct socket *sock);
int sock_sendmsg(struct socket *sock, struct msghdr *msg, size_t len);
int sock_recvmsg(struct socket *sock, struct msghdr *msg, size_t size,
   int flags);
struct file *sock_alloc_file(struct socket *sock, int flags, char *dname);
struct socket *sockfd_lookup(int fd, int *err);
struct socket *sock_from_file(struct file *file, int *err);

int net_ratelimit(void);
bool __net_get_random_once(void *buf, int nbytes, bool *done,
      struct static_key *done_key);
int kernel_sendmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,
     size_t num, size_t len);
int kernel_recvmsg(struct socket *sock, struct msghdr *msg, struct kvec *vec,
     size_t num, size_t len, int flags);

int kernel_bind(struct socket *sock, struct sockaddr *addr, int addrlen);
int kernel_listen(struct socket *sock, int backlog);
int kernel_accept(struct socket *sock, struct socket **newsock, int flags);
int kernel_connect(struct socket *sock, struct sockaddr *addr, int addrlen,
     int flags);
int kernel_getsockname(struct socket *sock, struct sockaddr *addr,
         int *addrlen);
int kernel_getpeername(struct socket *sock, struct sockaddr *addr,
         int *addrlen);
int kernel_getsockopt(struct socket *sock, int level, int optname, char *optval,
        int *optlen);
int kernel_setsockopt(struct socket *sock, int level, int optname, char *optval,
        unsigned int optlen);
int kernel_sendpage(struct socket *sock, struct page *page, int offset,
      size_t size, int flags);
int kernel_sock_ioctl(struct socket *sock, int cmd, unsigned long arg);
int kernel_sock_shutdown(struct socket *sock, enum sock_shutdown_cmd how);
enum irqreturn {
 IRQ_NONE = (0 << 0),
 IRQ_HANDLED = (1 << 0),
 IRQ_WAKE_THREAD = (1 << 1),
};

typedef enum irqreturn irqreturn_t;












static inline int irq_canonicalize(int irq)
{
 return ((irq == 2) ? 9 : irq);
}
extern void fixup_irqs(void);
extern void irq_force_complete_move(int);


extern void (*x86_platform_ipi_callback)(void);
extern void native_init_IRQ(void);
extern bool handle_irq(unsigned irq, struct pt_regs *regs);

extern __attribute__((externally_visible)) unsigned int do_IRQ(struct pt_regs *regs);


extern unsigned long used_vectors[(((256) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
extern int vector_used_by_percpu_irq(unsigned int vector);

extern void init_ISA_irqs(void);


void arch_trigger_all_cpu_backtrace(void);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct pt_regs *) irq_regs;

static inline struct pt_regs *get_irq_regs(void)
{
 return ({ typeof((irq_regs)) pscr_ret__; do { void *__vpp_verify = (typeof((&((irq_regs))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((irq_regs))) { case 1: pscr_ret__ = ({ typeof(((irq_regs))) pfo_ret__; switch (sizeof(((irq_regs)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((irq_regs))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 2: pscr_ret__ = ({ typeof(((irq_regs))) pfo_ret__; switch (sizeof(((irq_regs)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((irq_regs))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 4: pscr_ret__ = ({ typeof(((irq_regs))) pfo_ret__; switch (sizeof(((irq_regs)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((irq_regs))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 8: pscr_ret__ = ({ typeof(((irq_regs))) pfo_ret__; switch (sizeof(((irq_regs)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((irq_regs))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((irq_regs))); break; default: __bad_percpu_size(); } pfo_ret__; });break; default: __bad_size_call_parameter();break; } pscr_ret__; });
}

static inline struct pt_regs *set_irq_regs(struct pt_regs *new_regs)
{
 struct pt_regs *old_regs;

 old_regs = get_irq_regs();
 do { do { void *__vpp_verify = (typeof((&((irq_regs))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((irq_regs))) { case 1: do { typedef typeof(((irq_regs))) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = ((new_regs)); (void)pto_tmp__; } switch (sizeof(((irq_regs)))) { case 1: asm("mov" "b %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "qi" ((pto_T__)((new_regs)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "ri" ((pto_T__)((new_regs)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "ri" ((pto_T__)((new_regs)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "re" ((pto_T__)((new_regs)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof(((irq_regs))) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = ((new_regs)); (void)pto_tmp__; } switch (sizeof(((irq_regs)))) { case 1: asm("mov" "b %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "qi" ((pto_T__)((new_regs)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "ri" ((pto_T__)((new_regs)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "ri" ((pto_T__)((new_regs)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "re" ((pto_T__)((new_regs)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof(((irq_regs))) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = ((new_regs)); (void)pto_tmp__; } switch (sizeof(((irq_regs)))) { case 1: asm("mov" "b %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "qi" ((pto_T__)((new_regs)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "ri" ((pto_T__)((new_regs)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "ri" ((pto_T__)((new_regs)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "re" ((pto_T__)((new_regs)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof(((irq_regs))) pto_T__; if (0) { pto_T__ pto_tmp__; pto_tmp__ = ((new_regs)); (void)pto_tmp__; } switch (sizeof(((irq_regs)))) { case 1: asm("mov" "b %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "qi" ((pto_T__)((new_regs)))); break; case 2: asm("mov" "w %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "ri" ((pto_T__)((new_regs)))); break; case 4: asm("mov" "l %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "ri" ((pto_T__)((new_regs)))); break; case 8: asm("mov" "q %1,""%%""gs"":" "%P" "0" : "+m" (((irq_regs))) : "re" ((pto_T__)((new_regs)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);

 return old_regs;
}

struct seq_file;
struct module;
struct irq_desc;
struct irq_data;
typedef void (*irq_flow_handler_t)(unsigned int irq,
         struct irq_desc *desc);
typedef void (*irq_preflow_handler_t)(struct irq_data *data);
enum {
 IRQ_TYPE_NONE = 0x00000000,
 IRQ_TYPE_EDGE_RISING = 0x00000001,
 IRQ_TYPE_EDGE_FALLING = 0x00000002,
 IRQ_TYPE_EDGE_BOTH = (IRQ_TYPE_EDGE_FALLING | IRQ_TYPE_EDGE_RISING),
 IRQ_TYPE_LEVEL_HIGH = 0x00000004,
 IRQ_TYPE_LEVEL_LOW = 0x00000008,
 IRQ_TYPE_LEVEL_MASK = (IRQ_TYPE_LEVEL_LOW | IRQ_TYPE_LEVEL_HIGH),
 IRQ_TYPE_SENSE_MASK = 0x0000000f,
 IRQ_TYPE_DEFAULT = IRQ_TYPE_SENSE_MASK,

 IRQ_TYPE_PROBE = 0x00000010,

 IRQ_LEVEL = (1 << 8),
 IRQ_PER_CPU = (1 << 9),
 IRQ_NOPROBE = (1 << 10),
 IRQ_NOREQUEST = (1 << 11),
 IRQ_NOAUTOEN = (1 << 12),
 IRQ_NO_BALANCING = (1 << 13),
 IRQ_MOVE_PCNTXT = (1 << 14),
 IRQ_NESTED_THREAD = (1 << 15),
 IRQ_NOTHREAD = (1 << 16),
 IRQ_PER_CPU_DEVID = (1 << 17),
 IRQ_IS_POLLED = (1 << 18),
};
enum {
 IRQ_SET_MASK_OK = 0,
 IRQ_SET_MASK_OK_NOCOPY,
};

struct msi_desc;
struct irq_domain;
struct irq_data {
  template <typename, int = 0> struct __BYPASSirq_data {};
  template <typename, int> friend struct __BYPASSirq_data;
 u32 mask;
 unsigned int irq;
 unsigned long hwirq;
 unsigned int node;
 unsigned int state_use_accessors;
 struct irq_chip *chip;
 struct irq_domain *domain;
 void *handler_data;
 void *chip_data;
 struct msi_desc *msi_desc;
 cpumask_var_t affinity;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 IRQD_TRIGGER_MASK = 0xf,
 IRQD_SETAFFINITY_PENDING = (1 << 8),
 IRQD_NO_BALANCING = (1 << 10),
 IRQD_PER_CPU = (1 << 11),
 IRQD_AFFINITY_SET = (1 << 12),
 IRQD_LEVEL = (1 << 13),
 IRQD_WAKEUP_STATE = (1 << 14),
 IRQD_MOVE_PCNTXT = (1 << 15),
 IRQD_IRQ_DISABLED = (1 << 16),
 IRQD_IRQ_MASKED = (1 << 17),
 IRQD_IRQ_INPROGRESS = (1 << 18),
};

static inline bool irqd_is_setaffinity_pending(struct irq_data *d)
{
 return d->state_use_accessors & IRQD_SETAFFINITY_PENDING;
}

static inline bool irqd_is_per_cpu(struct irq_data *d)
{
 return d->state_use_accessors & IRQD_PER_CPU;
}

static inline bool irqd_can_balance(struct irq_data *d)
{
 return !(d->state_use_accessors & (IRQD_PER_CPU | IRQD_NO_BALANCING));
}

static inline bool irqd_affinity_was_set(struct irq_data *d)
{
 return d->state_use_accessors & IRQD_AFFINITY_SET;
}

static inline void irqd_mark_affinity_was_set(struct irq_data *d)
{
 d->state_use_accessors |= IRQD_AFFINITY_SET;
}

static inline u32 irqd_get_trigger_type(struct irq_data *d)
{
 return d->state_use_accessors & IRQD_TRIGGER_MASK;
}




static inline void irqd_set_trigger_type(struct irq_data *d, u32 type)
{
 d->state_use_accessors &= ~IRQD_TRIGGER_MASK;
 d->state_use_accessors |= type & IRQD_TRIGGER_MASK;
}

static inline bool irqd_is_level_type(struct irq_data *d)
{
 return d->state_use_accessors & IRQD_LEVEL;
}

static inline bool irqd_is_wakeup_set(struct irq_data *d)
{
 return d->state_use_accessors & IRQD_WAKEUP_STATE;
}

static inline bool irqd_can_move_in_process_context(struct irq_data *d)
{
 return d->state_use_accessors & IRQD_MOVE_PCNTXT;
}

static inline bool irqd_irq_disabled(struct irq_data *d)
{
 return d->state_use_accessors & IRQD_IRQ_DISABLED;
}

static inline bool irqd_irq_masked(struct irq_data *d)
{
 return d->state_use_accessors & IRQD_IRQ_MASKED;
}

static inline bool irqd_irq_inprogress(struct irq_data *d)
{
 return d->state_use_accessors & IRQD_IRQ_INPROGRESS;
}






static inline void irqd_set_chained_irq_inprogress(struct irq_data *d)
{
 d->state_use_accessors |= IRQD_IRQ_INPROGRESS;
}

static inline void irqd_clr_chained_irq_inprogress(struct irq_data *d)
{
 d->state_use_accessors &= ~IRQD_IRQ_INPROGRESS;
}

static inline irq_hw_number_t irqd_to_hwirq(struct irq_data *d)
{
 return d->hwirq;
}
struct irq_chip {
  template <typename, int = 0> struct __BYPASSirq_chip {};
  template <typename, int> friend struct __BYPASSirq_chip;
 char *name;
 unsigned int (*irq_startup)(struct irq_data *data);
 void (*irq_shutdown)(struct irq_data *data);
 void (*irq_enable)(struct irq_data *data);
 void (*irq_disable)(struct irq_data *data);

 void (*irq_ack)(struct irq_data *data);
 void (*irq_mask)(struct irq_data *data);
 void (*irq_mask_ack)(struct irq_data *data);
 void (*irq_unmask)(struct irq_data *data);
 void (*irq_eoi)(struct irq_data *data);

 int (*irq_set_affinity)(struct irq_data *data, struct cpumask *dest, bool force);
 int (*irq_retrigger)(struct irq_data *data);
 int (*irq_set_type)(struct irq_data *data, unsigned int flow_type);
 int (*irq_set_wake)(struct irq_data *data, unsigned int on);

 void (*irq_bus_lock)(struct irq_data *data);
 void (*irq_bus_sync_unlock)(struct irq_data *data);

 void (*irq_cpu_online)(struct irq_data *data);
 void (*irq_cpu_offline)(struct irq_data *data);

 void (*irq_suspend)(struct irq_data *data);
 void (*irq_resume)(struct irq_data *data);
 void (*irq_pm_shutdown)(struct irq_data *data);

 void (*irq_calc_mask)(struct irq_data *data);

 void (*irq_print_chip)(struct irq_data *data, struct seq_file *p);

 unsigned long flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 IRQCHIP_SET_TYPE_MASKED = (1 << 0),
 IRQCHIP_EOI_IF_HANDLED = (1 << 1),
 IRQCHIP_MASK_ON_SUSPEND = (1 << 2),
 IRQCHIP_ONOFFLINE_ENABLED = (1 << 3),
 IRQCHIP_SKIP_SET_WAKE = (1 << 4),
 IRQCHIP_ONESHOT_SAFE = (1 << 5),
};


struct irq_affinity_notify;
struct proc_dir_entry;
struct module;
struct irq_desc;
struct irq_desc {
  template <typename, int = 0> struct __BYPASSirq_desc {};
  template <typename, int> friend struct __BYPASSirq_desc;
 struct irq_data irq_data;
 unsigned int *kstat_irqs;
 irq_flow_handler_t handle_irq;



 struct irqaction *action;
 unsigned int status_use_accessors;
 unsigned int core_internal_state__do_not_mess_with_it;
 unsigned int depth;
 unsigned int wake_depth;
 unsigned int irq_count;
 unsigned long last_unhandled;
 unsigned int irqs_unhandled;
 raw_spinlock_t lock;
 struct cpumask *percpu_enabled;

 struct cpumask *affinity_hint;
 struct irq_affinity_notify *affinity_notify;

 cpumask_var_t pending_mask;


 unsigned long threads_oneshot;
 atomic_t threads_active;
 wait_queue_head_t wait_for_threads;

 struct proc_dir_entry *dir;

 int parent_irq;
 struct module *owner;
 char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(1 << (6))));





static inline struct irq_data *irq_desc_get_irq_data(struct irq_desc *desc)
{
 return &desc->irq_data;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8irq_desc8irq_dataE_1208_0 {
  typedef TJP__ZN8irq_desc8irq_dataE_1208_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline irq_data __get__ZN8irq_desc8irq_dataE_1208(irq_data *source) {
  AC::ResultBuffer< ::irq_data  > __result_buffer;
  typedef TJP__ZN8irq_desc8irq_dataE_1208_0< ::irq_data , ::irq_desc , ::irq_data  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::irq_data &)__result_buffer;
}
static inline struct irq_chip *irq_desc_get_chip(struct irq_desc *desc)
{
 return __get__ZN8irq_desc8irq_dataE_1208(&desc->irq_data).chip;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8irq_desc8irq_dataE_1210_0 {
  typedef TJP__ZN8irq_desc8irq_dataE_1210_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline irq_data __get__ZN8irq_desc8irq_dataE_1210(irq_data *source) {
  AC::ResultBuffer< ::irq_data  > __result_buffer;
  typedef TJP__ZN8irq_desc8irq_dataE_1210_0< ::irq_data , ::irq_desc , ::irq_data  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::irq_data &)__result_buffer;
}
static inline void *irq_desc_get_chip_data(struct irq_desc *desc)
{
 return __get__ZN8irq_desc8irq_dataE_1210(&desc->irq_data).chip_data;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8irq_desc8irq_dataE_1212_0 {
  typedef TJP__ZN8irq_desc8irq_dataE_1212_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline irq_data __get__ZN8irq_desc8irq_dataE_1212(irq_data *source) {
  AC::ResultBuffer< ::irq_data  > __result_buffer;
  typedef TJP__ZN8irq_desc8irq_dataE_1212_0< ::irq_data , ::irq_desc , ::irq_data  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::irq_data &)__result_buffer;
}
static inline void *irq_desc_get_handler_data(struct irq_desc *desc)
{
 return __get__ZN8irq_desc8irq_dataE_1212(&desc->irq_data).handler_data;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8irq_desc8irq_dataE_1214_0 {
  typedef TJP__ZN8irq_desc8irq_dataE_1214_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline irq_data __get__ZN8irq_desc8irq_dataE_1214(irq_data *source) {
  AC::ResultBuffer< ::irq_data  > __result_buffer;
  typedef TJP__ZN8irq_desc8irq_dataE_1214_0< ::irq_data , ::irq_desc , ::irq_data  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::irq_data &)__result_buffer;
}
static inline struct msi_desc *irq_desc_get_msi_desc(struct irq_desc *desc)
{
 return __get__ZN8irq_desc8irq_dataE_1214(&desc->irq_data).msi_desc;
}







static inline void generic_handle_irq_desc(unsigned int irq, struct irq_desc *desc)
{
 desc->handle_irq(irq, desc);
}

int generic_handle_irq(unsigned int irq);



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8irq_desc6actionE_1216_0 {
  typedef TJP__ZN8irq_desc6actionE_1216_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline irqaction * __get__ZN8irq_desc6actionE_1216(irqaction * *source) {
  ::irqaction *__result_buffer;
  typedef TJP__ZN8irq_desc6actionE_1216_0< ::irqaction *, ::irq_desc , ::irqaction * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::irqaction *&)__result_buffer;
}
static inline int irq_has_action(unsigned int irq)
{
 struct irq_desc *desc = irq_to_desc(irq);
 return __get__ZN8irq_desc6actionE_1216(&desc->action) != 0;
}


static inline void __irq_set_handler_locked(unsigned int irq,
         irq_flow_handler_t handler)
{
 struct irq_desc *desc;

 desc = irq_to_desc(irq);
 desc->handle_irq = handler;
}


static inline void
__irq_set_chip_handler_name_locked(unsigned int irq, struct irq_chip *chip,
       irq_flow_handler_t handler, char *name)
{
 struct irq_desc *desc;

 desc = irq_to_desc(irq);
 irq_desc_get_irq_data(desc)->chip = chip;
 desc->handle_irq = handler;
 desc->name = name;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8irq_desc20status_use_accessorsE_1217_0 {
  typedef TJP__ZN8irq_desc20status_use_accessorsE_1217_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN8irq_desc20status_use_accessorsE_1217(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN8irq_desc20status_use_accessorsE_1217_0< unsigned int , ::irq_desc , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int irq_balancing_disabled(unsigned int irq)
{
 struct irq_desc *desc;

 desc = irq_to_desc(irq);
 return __get__ZN8irq_desc20status_use_accessorsE_1217(&desc->status_use_accessors) & (IRQ_PER_CPU | IRQ_NO_BALANCING);
}

static inline void
irq_set_lockdep_class(unsigned int irq, struct lock_class_key *_class)
{
 struct irq_desc *desc = irq_to_desc(irq);

 if (desc)
  do { (void)(_class); } while (0);
}










struct proc_dir_entry;
struct pt_regs;
struct notifier_block;


void create_prof_cpu_mask(void);
int create_proc_profile(void);
enum profile_type {
 PROFILE_TASK_EXIT,
 PROFILE_MUNMAP
};



extern int prof_on __attribute__((__section__(".data..read_mostly")));


int profile_init(void);
int profile_setup(char *str);
void profile_tick(int type);




void profile_hits(int type, void *ip, unsigned int nr_hits);




static inline void profile_hit(int type, void *ip)
{



 if (__builtin_expect(!!(prof_on == type), 0))
  profile_hits(type, ip, 1);
}

struct task_struct;
struct mm_struct;


void profile_task_exit(struct task_struct * task);




int profile_handoff_task(struct task_struct * task);


void profile_munmap(unsigned long addr);

int task_handoff_register(struct notifier_block * n);
int task_handoff_unregister(struct notifier_block * n);

int profile_event_register(enum profile_type, struct notifier_block * n);
int profile_event_unregister(enum profile_type, struct notifier_block * n);

struct pt_regs;







extern char _text[], _stext[], _etext[];
extern char _data[], _sdata[], _edata[];
extern char __bss_start[], __bss_stop[];
extern char __init_begin[], __init_end[];
extern char _sinittext[], _einittext[];
extern char _end[];
extern char __per_cpu_load[], __per_cpu_start[], __per_cpu_end[];
extern char __kprobes_text_start[], __kprobes_text_end[];
extern char __entry_text_start[], __entry_text_end[];
extern char __start_rodata[], __end_rodata[];


extern char __ctors_start[], __ctors_end[];
static inline int arch_is_kernel_text(unsigned long addr)
{
 return 0;
}



static inline int arch_is_kernel_data(unsigned long addr)
{
 return 0;
}
static inline __attribute__((always_inline)) void clac(void)
{

 asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" : : : "memory");
}

static inline __attribute__((always_inline)) void stac(void)
{

 asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" : : : "memory");
}
struct exception_table_entry {
  template <typename, int = 0> struct __BYPASSexception_table_entry {};
  template <typename, int> friend struct __BYPASSexception_table_entry;
 int insn, fixup;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern int fixup_exception(struct pt_regs *regs);
extern int early_fixup_exception(unsigned long *ip);
extern int __get_user_1(void);
extern int __get_user_2(void);
extern int __get_user_4(void);
extern int __get_user_8(void);
extern int __get_user_bad(void);
extern void __put_user_bad(void);





extern void __put_user_1(void);
extern void __put_user_2(void);
extern void __put_user_4(void);
extern void __put_user_8(void);
struct __large_struct {
  template <typename, int = 0> struct __BYPASS__large_struct {};
  template <typename, int> friend struct __BYPASS__large_struct; unsigned long buf[100]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern unsigned long
copy_from_user_nmi(void *to, void *from, unsigned long n);
extern long
strncpy_from_user(char *dst, char *src, long count);

extern long strlen_user( char *str);
extern long strnlen_user( char *str, long n);

unsigned long clear_user(void *mem, unsigned long len);
unsigned long __clear_user(void *mem, unsigned long len);
 unsigned long
copy_user_enhanced_fast_string(void *to, void *from, unsigned len);
 unsigned long
copy_user_generic_string(void *to, void *from, unsigned len);
 unsigned long
copy_user_generic_unrolled(void *to, void *from, unsigned len);

static inline __attribute__((always_inline)) unsigned long
copy_user_generic(void *to, void *from, unsigned len)
{
 unsigned ret;






 asm ("661:\n\t" "call %P[old]" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(3*32+16)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" " .long 661b - .\n" " .long " "663""2""f - .\n" " .word " "(9*32+ 9)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""2""f-""663""2""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" " .byte 0xff + (" "664""2""f-""663""2""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" "call %P[new1]" "\n" "664""1" ":\n\t" "663""2"":\n\t" "call %P[new2]" "\n" "664""2" ":\n\t" ".popsection" : "=a" (ret), "=D" (to), "=S" (from), "=d" (len) : [old] "i" (copy_user_generic_unrolled), [new1] "i" (copy_user_generic_string), [new2] "i" (copy_user_enhanced_fast_string), "1" (to), "2" (from), "3" (len) : "memory", "rcx", "r8", "r9", "r10", "r11")







                                                ;
 return ret;
}

 unsigned long
copy_in_user(void *to, void *from, unsigned len);

static inline __attribute__((always_inline))
int __copy_from_user_nocheck(void *dst, void *src, unsigned size)
{
 int ret = 0;

 if (!__builtin_constant_p(size))
  return copy_user_generic(dst, ( void *)src, size);
 switch (size) {
 case 1:asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""b"" %2,%""b""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""b"" %""b""1,%""b""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=q"(*(u8 *)dst) : "m" ((*(struct __large_struct *)((u8 *)src))), "i" (1), "0" (ret))
                                ;
  return ret;
 case 2:asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""w"" %2,%""w""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""w"" %""w""1,%""w""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u16 *)dst) : "m" ((*(struct __large_struct *)((u16 *)src))), "i" (2), "0" (ret))
                                ;
  return ret;
 case 4:asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""l"" %2,%""k""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""l"" %""k""1,%""k""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u32 *)dst) : "m" ((*(struct __large_struct *)((u32 *)src))), "i" (4), "0" (ret))
                                ;
  return ret;
 case 8:asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""q"" %2,%""""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (8), "0" (ret))
                               ;
  return ret;
 case 10:
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""q"" %2,%""""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (10), "0" (ret))
                                 ;
  if (__builtin_expect(!!(ret), 0))
   return ret;
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""w"" %2,%""w""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""w"" %""w""1,%""w""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u16 *)(8 + (char *)dst)) : "m" ((*(struct __large_struct *)((u16 *)(8 + (char *)src)))), "i" (2), "0" (ret))

                                 ;
  return ret;
 case 16:
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""q"" %2,%""""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)dst) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (16), "0" (ret))
                                 ;
  if (__builtin_expect(!!(ret), 0))
   return ret;
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""q"" %2,%""""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(*(u64 *)(8 + (char *)dst)) : "m" ((*(struct __large_struct *)((u64 *)(8 + (char *)src)))), "i" (8), "0" (ret))

                                ;
  return ret;
 default:
  return copy_user_generic(dst, ( void *)src, size);
 }
}

static inline __attribute__((always_inline))
int __copy_from_user(void *dst, void *src, unsigned size)
{
 might_fault();
 return __copy_from_user_nocheck(dst, src, size);
}

static inline __attribute__((always_inline))
int __copy_to_user_nocheck(void *dst, void *src, unsigned size)
{
 int ret = 0;

 if (!__builtin_constant_p(size))
  return copy_user_generic(( void *)dst, src, size);
 switch (size) {
 case 1:asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""b"" %""b""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "iq"(*(u8 *)src), "m" ((*(struct __large_struct *)((u8 *)dst))), "i" (1), "0" (ret))
                                ;
  return ret;
 case 2:asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""w"" %""w""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(*(u16 *)src), "m" ((*(struct __large_struct *)((u16 *)dst))), "i" (2), "0" (ret))
                                ;
  return ret;
 case 4:asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""l"" %""k""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(*(u32 *)src), "m" ((*(struct __large_struct *)((u32 *)dst))), "i" (4), "0" (ret))
                                ;
  return ret;
 case 8:asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""q"" %""""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (8), "0" (ret))
                               ;
  return ret;
 case 10:
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""q"" %""""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (10), "0" (ret))
                                 ;
  if (__builtin_expect(!!(ret), 0))
   return ret;
  asm("":::"memory");
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""w"" %""w""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(4[(u16 *)src]), "m" ((*(struct __large_struct *)(4 + (u16 *)dst))), "i" (2), "0" (ret))
                                 ;
  return ret;
 case 16:
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""q"" %""""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(*(u64 *)src), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (16), "0" (ret))
                                 ;
  if (__builtin_expect(!!(ret), 0))
   return ret;
  asm("":::"memory");
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""q"" %""""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(1[(u64 *)src]), "m" ((*(struct __large_struct *)(1 + (u64 *)dst))), "i" (8), "0" (ret))
                                ;
  return ret;
 default:
  return copy_user_generic(( void *)dst, src, size);
 }
}

static inline __attribute__((always_inline))
int __copy_to_user(void *dst, void *src, unsigned size)
{
 might_fault();
 return __copy_to_user_nocheck(dst, src, size);
}

static inline __attribute__((always_inline))
int __copy_in_user(void *dst, void *src, unsigned size)
{
 int ret = 0;

 might_fault();
 if (!__builtin_constant_p(size))
  return copy_user_generic(( void *)dst,
      ( void *)src, size);
 switch (size) {
 case 1: {
  u8 tmp;
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""b"" %2,%""b""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""b"" %""b""1,%""b""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=q"(tmp) : "m" ((*(struct __large_struct *)((u8 *)src))), "i" (1), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""b"" %""b""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "iq"(tmp), "m" ((*(struct __large_struct *)((u8 *)dst))), "i" (1), "0" (ret))
                                  ;
  return ret;
 }
 case 2: {
  u16 tmp;
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""w"" %2,%""w""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""w"" %""w""1,%""w""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(tmp) : "m" ((*(struct __large_struct *)((u16 *)src))), "i" (2), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""w"" %""w""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(tmp), "m" ((*(struct __large_struct *)((u16 *)dst))), "i" (2), "0" (ret))
                                  ;
  return ret;
 }

 case 4: {
  u32 tmp;
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""l"" %2,%""k""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""l"" %""k""1,%""k""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(tmp) : "m" ((*(struct __large_struct *)((u32 *)src))), "i" (4), "0" (ret))
                                 ;
  if (__builtin_expect(!!(!ret), 1))
   asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""l"" %""k""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "ir"(tmp), "m" ((*(struct __large_struct *)((u32 *)dst))), "i" (4), "0" (ret))
                                  ;
  return ret;
 }
 case 8: {
  u64 tmp;
  asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""q"" %2,%""""1\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	xor""q"" %""""1,%""""1\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r" (ret), "=r"(tmp) : "m" ((*(struct __large_struct *)((u64 *)src))), "i" (8), "0" (ret))
                                ;
  if (__builtin_expect(!!(!ret), 1))
   asm ("661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xcb" "\n" "664""1" ":\n\t" ".popsection" "\n" "1:	mov""q"" %""""1,%2\n" "2: " "661:\n\t" ".byte " "0x66,0x66,0x90" "\n" "\n662:\n" ".pushsection .altinstructions,\"a\"\n" " .long 661b - .\n" " .long " "663""1""f - .\n" " .word " "(9*32+20)" "\n" " .byte " "662b-661b" "\n" " .byte " "664""1""f-""663""1""f" "\n" ".popsection\n" ".pushsection .discard,\"aw\",@progbits\n" " .byte 0xff + (" "664""1""f-""663""1""f" ") - (" "662b-661b" ")\n" ".popsection\n" ".pushsection .altinstr_replacement, \"ax\"\n" "663""1"":\n\t" ".byte 0x0f,0x01,0xca" "\n" "664""1" ":\n\t" ".popsection" "\n" ".section .fixup,\"ax\"\n" "3:	mov %3,%0\n" "	jmp 2b\n" ".previous\n" " .pushsection \"__ex_table\",\"a\"\n" " .balign 8\n" " .long (" "1b" ") - .\n" " .long (" "3b" ") - .\n" " .popsection\n" : "=r"(ret) : "er"(tmp), "m" ((*(struct __large_struct *)((u64 *)dst))), "i" (8), "0" (ret))
                                 ;
  return ret;
 }
 default:
  return copy_user_generic(( void *)dst,
      ( void *)src, size);
 }
}

static inline __attribute__((always_inline)) int
__copy_from_user_inatomic(void *dst, void *src, unsigned size)
{
 return __copy_from_user_nocheck(dst, ( void *)src, size);
}

static inline __attribute__((always_inline)) int
__copy_to_user_inatomic(void *dst, void *src, unsigned size)
{
 return __copy_to_user_nocheck(( void *)dst, src, size);
}

extern long __copy_user_nocache(void *dst, void *src,
    unsigned size, int zerorest);

static inline int
__copy_from_user_nocache(void *dst, void *src, unsigned size)
{
 might_fault();
 return __copy_user_nocache(dst, src, size, 1);
}

static inline int
__copy_from_user_inatomic_nocache(void *dst, void *src,
      unsigned size)
{
 return __copy_user_nocache(dst, src, size, 0);
}

unsigned long
copy_user_handle_tail(char *to, char *from, unsigned len, unsigned zerorest);


unsigned long _copy_from_user(void *to, void *from,
        unsigned n);
unsigned long _copy_to_user(void *to, void *from,
      unsigned n);







extern void __attribute__((warning("copy_from_user() buffer size is too small")))
copy_from_user_overflow(void);
extern void __attribute__((warning("copy_to_user() buffer size is too small")))
copy_to_user_overflow(void) __asm__("copy_from_user_overflow");
static inline void
__copy_from_user_overflow(int size, unsigned long count)
{
 (1);
}
unsigned long copy_from_user(void *to, void *from, unsigned long n);
unsigned long copy_to_user(void *to, void *from, unsigned long n);

extern char __brk_base[], __brk_limit[];
extern struct exception_table_entry __stop___ex_table[];


extern char __end_rodata_hpage_align[];


extern void apic_timer_interrupt(void);
extern void x86_platform_ipi(void);
extern void kvm_posted_intr_ipi(void);
extern void error_interrupt(void);
extern void irq_work_interrupt(void);

extern void spurious_interrupt(void);
extern void thermal_interrupt(void);
extern void reschedule_interrupt(void);

extern void invalidate_interrupt(void);
extern void invalidate_interrupt0(void);
extern void invalidate_interrupt1(void);
extern void invalidate_interrupt2(void);
extern void invalidate_interrupt3(void);
extern void invalidate_interrupt4(void);
extern void invalidate_interrupt5(void);
extern void invalidate_interrupt6(void);
extern void invalidate_interrupt7(void);
extern void invalidate_interrupt8(void);
extern void invalidate_interrupt9(void);
extern void invalidate_interrupt10(void);
extern void invalidate_interrupt11(void);
extern void invalidate_interrupt12(void);
extern void invalidate_interrupt13(void);
extern void invalidate_interrupt14(void);
extern void invalidate_interrupt15(void);
extern void invalidate_interrupt16(void);
extern void invalidate_interrupt17(void);
extern void invalidate_interrupt18(void);
extern void invalidate_interrupt19(void);
extern void invalidate_interrupt20(void);
extern void invalidate_interrupt21(void);
extern void invalidate_interrupt22(void);
extern void invalidate_interrupt23(void);
extern void invalidate_interrupt24(void);
extern void invalidate_interrupt25(void);
extern void invalidate_interrupt26(void);
extern void invalidate_interrupt27(void);
extern void invalidate_interrupt28(void);
extern void invalidate_interrupt29(void);
extern void invalidate_interrupt30(void);
extern void invalidate_interrupt31(void);

extern void irq_move_cleanup_interrupt(void);
extern void reboot_interrupt(void);
extern void threshold_interrupt(void);

extern void call_function_interrupt(void);
extern void call_function_single_interrupt(void);



extern void trace_apic_timer_interrupt(void);
extern void trace_x86_platform_ipi(void);
extern void trace_error_interrupt(void);
extern void trace_irq_work_interrupt(void);
extern void trace_spurious_interrupt(void);
extern void trace_thermal_interrupt(void);
extern void trace_reschedule_interrupt(void);
extern void trace_threshold_interrupt(void);
extern void trace_call_function_interrupt(void);
extern void trace_call_function_single_interrupt(void);







extern unsigned long io_apic_irqs;

extern void init_VISWS_APIC_irqs(void);
extern void setup_IO_APIC(void);
extern void disable_IO_APIC(void);

struct io_apic_irq_attr {
  template <typename, int = 0> struct __BYPASSio_apic_irq_attr {};
  template <typename, int> friend struct __BYPASSio_apic_irq_attr;
 int ioapic;
 int ioapic_pin;
 int trigger;
 int polarity;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void set_io_apic_irq_attr(struct io_apic_irq_attr *irq_attr,
     int ioapic, int ioapic_pin,
     int trigger, int polarity)
{
 irq_attr->ioapic = ioapic;
 irq_attr->ioapic_pin = ioapic_pin;
 irq_attr->trigger = trigger;
 irq_attr->polarity = polarity;
}


struct irq_2_iommu {
  template <typename, int = 0> struct __BYPASSirq_2_iommu {};
  template <typename, int> friend struct __BYPASSirq_2_iommu;
 struct intel_iommu *iommu;
 u16 irte_index;
 u16 sub_handle;
 u8 irte_mask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct irq_2_irte {
  template <typename, int = 0> struct __BYPASSirq_2_irte {};
  template <typename, int> friend struct __BYPASSirq_2_irte;
 u16 devid;
 u16 index;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct irq_cfg {
  template <typename, int = 0> struct __BYPASSirq_cfg {};
  template <typename, int> friend struct __BYPASSirq_cfg;
 struct irq_pin_list *irq_2_pin;
 cpumask_var_t domain;
 cpumask_var_t old_domain;
 u8 vector;
 u8 move_in_progress : 1;

 u8 remapped : 1;
 union {
  struct irq_2_iommu irq_2_iommu;
  struct irq_2_irte irq_2_irte;
 };


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int assign_irq_vector(int, struct irq_cfg *, struct cpumask *);
extern void send_cleanup_vector(struct irq_cfg *);

struct irq_data;
int __ioapic_set_affinity(struct irq_data *, struct cpumask *,
     unsigned int *dest_id);
extern int IO_APIC_get_PCI_irq_vector(int bus, int devfn, int pin, struct io_apic_irq_attr *irq_attr);
extern void setup_ioapic_dest(void);

extern void enable_IO_APIC(void);


extern atomic_t irq_err_count;
extern atomic_t irq_mis_count;


extern void eisa_set_level_irq(unsigned int irq);


extern __attribute__((externally_visible)) void smp_apic_timer_interrupt(struct pt_regs *);
extern __attribute__((externally_visible)) void smp_spurious_interrupt(struct pt_regs *);
extern __attribute__((externally_visible)) void smp_x86_platform_ipi(struct pt_regs *);
extern __attribute__((externally_visible)) void smp_error_interrupt(struct pt_regs *);

extern void smp_irq_move_cleanup_interrupt(void);


extern __attribute__((externally_visible)) void smp_reschedule_interrupt(struct pt_regs *);
extern __attribute__((externally_visible)) void smp_call_function_interrupt(struct pt_regs *);
extern __attribute__((externally_visible)) void smp_call_function_single_interrupt(struct pt_regs *);
extern __attribute__((externally_visible)) void smp_invalidate_interrupt(struct pt_regs *);


extern void (*__attribute__ ((__section__(".init.rodata"))) interrupt[256 -0x20])(void);




typedef int vector_irq_t[256];
extern __attribute__((section(".data..percpu" ""))) __typeof__(vector_irq_t) vector_irq;
extern void setup_vector_irq(int cpu);


extern void lock_vector_lock(void);
extern void unlock_vector_lock(void);
extern void __setup_vector_irq(int cpu);
struct irqaction;
extern int setup_irq(unsigned int irq, struct irqaction *_new);
extern void remove_irq(unsigned int irq, struct irqaction *act);
extern int setup_percpu_irq(unsigned int irq, struct irqaction *_new);
extern void remove_percpu_irq(unsigned int irq, struct irqaction *act);

extern void irq_cpu_online(void);
extern void irq_cpu_offline(void);
extern int __irq_set_affinity_locked(struct irq_data *data, struct cpumask *cpumask);


void irq_move_irq(struct irq_data *data);
void irq_move_masked_irq(struct irq_data *data);





extern int no_irq_affinity;




static inline int irq_set_parent(int irq, int parent_irq)
{
 return 0;
}






extern void handle_level_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_fasteoi_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_edge_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_edge_eoi_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_simple_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_percpu_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_percpu_devid_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_bad_irq(unsigned int irq, struct irq_desc *desc);
extern void handle_nested_irq(unsigned int irq);


extern void note_interrupt(unsigned int irq, struct irq_desc *desc,
      irqreturn_t action_ret);



extern int noirqdebug_setup(char *str);


extern int can_request_irq(unsigned int irq, unsigned long irqflags);


extern struct irq_chip no_irq_chip;
extern struct irq_chip dummy_irq_chip;

extern void
irq_set_chip_and_handler_name(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle, char *name);

static inline void irq_set_chip_and_handler(unsigned int irq, struct irq_chip *chip,
         irq_flow_handler_t handle)
{
 irq_set_chip_and_handler_name(irq, chip, handle, 0);
}

extern int irq_set_percpu_devid(unsigned int irq);

extern void
__irq_set_handler(unsigned int irq, irq_flow_handler_t handle, int is_chained,
    char *name);

static inline void
irq_set_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 0, 0);
}






static inline void
irq_set_chained_handler(unsigned int irq, irq_flow_handler_t handle)
{
 __irq_set_handler(irq, handle, 1, 0);
}

void irq_modify_status(unsigned int irq, unsigned long clr, unsigned long set);

static inline void irq_set_status_flags(unsigned int irq, unsigned long set)
{
 irq_modify_status(irq, 0, set);
}

static inline void irq_clear_status_flags(unsigned int irq, unsigned long clr)
{
 irq_modify_status(irq, clr, 0);
}

static inline void irq_set_noprobe(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOPROBE);
}

static inline void irq_set_probe(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOPROBE, 0);
}

static inline void irq_set_nothread(unsigned int irq)
{
 irq_modify_status(irq, 0, IRQ_NOTHREAD);
}

static inline void irq_set_thread(unsigned int irq)
{
 irq_modify_status(irq, IRQ_NOTHREAD, 0);
}

static inline void irq_set_nested_thread(unsigned int irq, bool nest)
{
 if (nest)
  irq_set_status_flags(irq, IRQ_NESTED_THREAD);
 else
  irq_clear_status_flags(irq, IRQ_NESTED_THREAD);
}

static inline void irq_set_percpu_devid_flags(unsigned int irq)
{
 irq_set_status_flags(irq,
        IRQ_NOAUTOEN | IRQ_PER_CPU | IRQ_NOTHREAD |
        IRQ_NOPROBE | IRQ_PER_CPU_DEVID);
}


extern unsigned int create_irq_nr(unsigned int irq_want, int node);
extern unsigned int __create_irqs(unsigned int from, unsigned int count,
      int node);
extern int create_irq(void);
extern void destroy_irq(unsigned int irq);
extern void destroy_irqs(unsigned int irq, unsigned int count);





extern void dynamic_irq_cleanup(unsigned int irq);
static inline void dynamic_irq_init(unsigned int irq)
{
 dynamic_irq_cleanup(irq);
}


extern int irq_set_chip(unsigned int irq, struct irq_chip *chip);
extern int irq_set_handler_data(unsigned int irq, void *data);
extern int irq_set_chip_data(unsigned int irq, void *data);
extern int irq_set_irq_type(unsigned int irq, unsigned int type);
extern int irq_set_msi_desc(unsigned int irq, struct msi_desc *entry);
extern int irq_set_msi_desc_off(unsigned int irq_base, unsigned int irq_offset,
    struct msi_desc *entry);
extern struct irq_data *irq_get_irq_data(unsigned int irq);

static inline struct irq_chip *irq_get_chip(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip : 0;
}

static inline struct irq_chip *irq_data_get_irq_chip(struct irq_data *d)
{
 return d->chip;
}

static inline void *irq_get_chip_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->chip_data : 0;
}

static inline void *irq_data_get_irq_chip_data(struct irq_data *d)
{
 return d->chip_data;
}

static inline void *irq_get_handler_data(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->handler_data : 0;
}

static inline void *irq_data_get_irq_handler_data(struct irq_data *d)
{
 return d->handler_data;
}

static inline struct msi_desc *irq_get_msi_desc(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? d->msi_desc : 0;
}

static inline struct msi_desc *irq_data_get_msi(struct irq_data *d)
{
 return d->msi_desc;
}

static inline u32 irq_get_trigger_type(unsigned int irq)
{
 struct irq_data *d = irq_get_irq_data(irq);
 return d ? irqd_get_trigger_type(d) : 0;
}

int __irq_alloc_descs(int irq, unsigned int from, unsigned int cnt, int node,
  struct module *owner);
void irq_free_descs(unsigned int irq, unsigned int cnt);
int irq_reserve_irqs(unsigned int from, unsigned int cnt);

static inline void irq_free_desc(unsigned int irq)
{
 irq_free_descs(irq, 1);
}

static inline int irq_reserve_irq(unsigned int irq)
{
 return irq_reserve_irqs(irq, 1);
}
struct irq_chip_regs {
  template <typename, int = 0> struct __BYPASSirq_chip_regs {};
  template <typename, int> friend struct __BYPASSirq_chip_regs;
 unsigned long enable;
 unsigned long disable;
 unsigned long mask;
 unsigned long ack;
 unsigned long eoi;
 unsigned long type;
 unsigned long polarity;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct irq_chip_type {
  template <typename, int = 0> struct __BYPASSirq_chip_type {};
  template <typename, int> friend struct __BYPASSirq_chip_type;
 struct irq_chip chip;
 struct irq_chip_regs regs;
 irq_flow_handler_t handler;
 u32 type;
 u32 mask_cache_priv;
 u32 *mask_cache;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct irq_chip_generic {
  template <typename, int = 0> struct __BYPASSirq_chip_generic {};
  template <typename, int> friend struct __BYPASSirq_chip_generic;
 raw_spinlock_t lock;
 void *reg_base;
 unsigned int irq_base;
 unsigned int irq_cnt;
 u32 mask_cache;
 u32 type_cache;
 u32 polarity_cache;
 u32 wake_enabled;
 u32 wake_active;
 unsigned int num_ct;
 void *_private;
 unsigned long installed;
 unsigned long unused;
 struct irq_domain *domain;
 struct list_head list;
 struct irq_chip_type chip_types[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum irq_gc_flags {
 IRQ_GC_INIT_MASK_CACHE = 1 << 0,
 IRQ_GC_INIT_NESTED_LOCK = 1 << 1,
 IRQ_GC_MASK_CACHE_PER_TYPE = 1 << 2,
 IRQ_GC_NO_MASK = 1 << 3,
};
struct irq_domain_chip_generic {
  template <typename, int = 0> struct __BYPASSirq_domain_chip_generic {};
  template <typename, int> friend struct __BYPASSirq_domain_chip_generic;
 unsigned int irqs_per_chip;
 unsigned int num_chips;
 unsigned int irq_flags_to_clear;
 unsigned int irq_flags_to_set;
 enum irq_gc_flags gc_flags;
 struct irq_chip_generic *gc[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


void irq_gc_noop(struct irq_data *d);
void irq_gc_mask_disable_reg(struct irq_data *d);
void irq_gc_mask_set_bit(struct irq_data *d);
void irq_gc_mask_clr_bit(struct irq_data *d);
void irq_gc_unmask_enable_reg(struct irq_data *d);
void irq_gc_ack_set_bit(struct irq_data *d);
void irq_gc_ack_clr_bit(struct irq_data *d);
void irq_gc_mask_disable_reg_and_ack(struct irq_data *d);
void irq_gc_eoi(struct irq_data *d);
int irq_gc_set_wake(struct irq_data *d, unsigned int on);


struct irq_chip_generic *
irq_alloc_generic_chip( char *name, int nr_ct, unsigned int irq_base,
         void *reg_base, irq_flow_handler_t handler);
void irq_setup_generic_chip(struct irq_chip_generic *gc, u32 msk,
       enum irq_gc_flags flags, unsigned int clr,
       unsigned int set);
int irq_setup_alt_chip(struct irq_data *d, unsigned int type);
void irq_remove_generic_chip(struct irq_chip_generic *gc, u32 msk,
        unsigned int clr, unsigned int set);

struct irq_chip_generic *irq_get_domain_generic_chip(struct irq_domain *d, unsigned int hw_irq);
int irq_alloc_domain_generic_chips(struct irq_domain *d, int irqs_per_chip,
       int num_ct, char *name,
       irq_flow_handler_t handler,
       unsigned int clr, unsigned int set,
       enum irq_gc_flags flags);


static inline struct irq_chip_type *irq_data_get_chip_type(struct irq_data *d)
{
 return ({ typeof( ((struct irq_chip_type *)0)->chip ) *__mptr = (d->chip); (struct irq_chip_type *)( (char *)__mptr - ((size_t) &((struct irq_chip_type *)0)->chip) );});
}




static inline void irq_gc_lock(struct irq_chip_generic *gc)
{
 ;
}

static inline void irq_gc_unlock(struct irq_chip_generic *gc)
{
 ;
}




typedef struct _irq_cpustat {
  template <typename, int = 0> struct __BYPASS_irq_cpustat {};
  template <typename, int> friend struct __BYPASS_irq_cpustat;

 unsigned int __softirq_pending;
 unsigned int __nmi_count;

 unsigned int apic_timer_irqs;
 unsigned int irq_spurious_count;
 unsigned int icr_read_retry_count;


 unsigned int kvm_posted_intr_ipis;

 unsigned int x86_platform_ipis;
 unsigned int apic_perf_irqs;
 unsigned int apic_irq_work_irqs;

 unsigned int irq_resched_count;
 unsigned int irq_call_count;




 unsigned int irq_tlb_count;


 unsigned int irq_thermal_count;


 unsigned int irq_threshold_count;


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6))))) irq_cpustat_t;

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(irq_cpustat_t) irq_stat __attribute__((__aligned__((1 << (6)))));
extern void ack_bad_irq(unsigned int irq);

extern u64 arch_irq_stat_cpu(unsigned int cpu);


extern u64 arch_irq_stat(void);

static inline void ftrace_nmi_enter(void) { }
static inline void ftrace_nmi_exit(void) { }









enum ctx_state {
    IN_KERNEL = 0,
    IN_USER,
};


struct context_tracking {
  template <typename, int = 0> struct __BYPASScontext_tracking {};
  template <typename, int> friend struct __BYPASScontext_tracking;






 bool active;
 enum ctx_state






        state;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern struct static_key context_tracking_enabled;



extern struct context_tracking context_tracking;


static inline bool context_tracking_in_user(void)
{
 return ({ typeof((context_tracking.state)) pscr_ret__; do { void *__vpp_verify = (typeof((&((context_tracking.state))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((context_tracking.state))) { case 1: pscr_ret__ = ({ typeof(((context_tracking.state))) pfo_ret__; switch (sizeof(((context_tracking.state)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((context_tracking.state))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 2: pscr_ret__ = ({ typeof(((context_tracking.state))) pfo_ret__; switch (sizeof(((context_tracking.state)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((context_tracking.state))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 4: pscr_ret__ = ({ typeof(((context_tracking.state))) pfo_ret__; switch (sizeof(((context_tracking.state)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((context_tracking.state))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 8: pscr_ret__ = ({ typeof(((context_tracking.state))) pfo_ret__; switch (sizeof(((context_tracking.state)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((context_tracking.state))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.state))); break; default: __bad_percpu_size(); } pfo_ret__; });break; default: __bad_size_call_parameter();break; } pscr_ret__; }) == IN_USER;
}

static inline bool context_tracking_active(void)
{
 return ({ typeof((context_tracking.active)) pscr_ret__; do { void *__vpp_verify = (typeof((&((context_tracking.active))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((context_tracking.active))) { case 1: pscr_ret__ = ({ typeof(((context_tracking.active))) pfo_ret__; switch (sizeof(((context_tracking.active)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((context_tracking.active))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 2: pscr_ret__ = ({ typeof(((context_tracking.active))) pfo_ret__; switch (sizeof(((context_tracking.active)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((context_tracking.active))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 4: pscr_ret__ = ({ typeof(((context_tracking.active))) pfo_ret__; switch (sizeof(((context_tracking.active)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((context_tracking.active))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 8: pscr_ret__ = ({ typeof(((context_tracking.active))) pfo_ret__; switch (sizeof(((context_tracking.active)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((context_tracking.active))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((context_tracking.active))); break; default: __bad_percpu_size(); } pfo_ret__; });break; default: __bad_size_call_parameter();break; } pscr_ret__; });
}





struct task_struct;
static inline bool vtime_accounting_enabled(void)
{
 if (static_key_false(&context_tracking_enabled)) {
  if (context_tracking_active())
   return _true;
 }

 return _false;
}
extern void vtime_common_task_switch(struct task_struct *prev);
static inline void vtime_task_switch(struct task_struct *prev)
{
 if (vtime_accounting_enabled())
  vtime_common_task_switch(prev);
}


extern void vtime_account_system(struct task_struct *tsk);
extern void vtime_account_idle(struct task_struct *tsk);
extern void vtime_account_user(struct task_struct *tsk);




extern void vtime_common_account_irq_enter(struct task_struct *tsk);
static inline void vtime_account_irq_enter(struct task_struct *tsk)
{
 if (vtime_accounting_enabled())
  vtime_common_account_irq_enter(tsk);
}
extern void arch_vtime_task_switch(struct task_struct *tsk);
extern void vtime_gen_account_irq_exit(struct task_struct *tsk);

static inline void vtime_account_irq_exit(struct task_struct *tsk)
{
 if (vtime_accounting_enabled())
  vtime_gen_account_irq_exit(tsk);
}

extern void vtime_user_enter(struct task_struct *tsk);

static inline void vtime_user_exit(struct task_struct *tsk)
{
 vtime_account_user(tsk);
}
extern void vtime_guest_enter(struct task_struct *tsk);
extern void vtime_guest_exit(struct task_struct *tsk);
extern void vtime_init_idle(struct task_struct *tsk, int cpu);
static inline void irqtime_account_irq(struct task_struct *tsk) { }


static inline void account_irq_enter_time(struct task_struct *tsk)
{
 vtime_account_irq_enter(tsk);
 irqtime_account_irq(tsk);
}

static inline void account_irq_exit_time(struct task_struct *tsk)
{
 vtime_account_irq_exit(tsk);
 irqtime_account_irq(tsk);
}


extern void synchronize_irq(unsigned int irq);
extern void rcu_nmi_enter(void);
extern void rcu_nmi_exit(void);
extern void irq_enter(void);
extern void irq_exit(void);








struct timerqueue_node {
  template <typename, int = 0> struct __BYPASStimerqueue_node {};
  template <typename, int> friend struct __BYPASStimerqueue_node;
 struct rb_node node;
 ktime_t expires;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct timerqueue_head {
  template <typename, int = 0> struct __BYPASStimerqueue_head {};
  template <typename, int> friend struct __BYPASStimerqueue_head;
 struct rb_root head;
 struct timerqueue_node *next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern void timerqueue_add(struct timerqueue_head *head,
    struct timerqueue_node *node);
extern void timerqueue_del(struct timerqueue_head *head,
    struct timerqueue_node *node);
extern struct timerqueue_node *timerqueue_iterate_next(
      struct timerqueue_node *node);
static inline
struct timerqueue_node *timerqueue_getnext(struct timerqueue_head *head)
{
 return head->next;
}

static inline void timerqueue_init(struct timerqueue_node *node)
{
 ((&node->node)->__rb_parent_color = (unsigned long)(&node->node));
}

static inline void timerqueue_init_head(struct timerqueue_head *head)
{
 head->head = (struct rb_root) { 0, };
 head->next = 0;
}

struct hrtimer_clock_base;
struct hrtimer_cpu_base;




enum hrtimer_mode {
 HRTIMER_MODE_ABS = 0x0,
 HRTIMER_MODE_REL = 0x1,
 HRTIMER_MODE_PINNED = 0x02,
 HRTIMER_MODE_ABS_PINNED = 0x02,
 HRTIMER_MODE_REL_PINNED = 0x03,
};




enum hrtimer_restart {
 HRTIMER_NORESTART,
 HRTIMER_RESTART,
};
struct hrtimer {
  template <typename, int = 0> struct __BYPASShrtimer {};
  template <typename, int> friend struct __BYPASShrtimer;
 struct timerqueue_node node;
 ktime_t _softexpires;
 enum hrtimer_restart (*function)(struct hrtimer *);
 struct hrtimer_clock_base *base;
 unsigned long state;

 int start_pid;
 void *start_site;
 char start_comm[16];


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct hrtimer_sleeper {
  template <typename, int = 0> struct __BYPASShrtimer_sleeper {};
  template <typename, int> friend struct __BYPASShrtimer_sleeper;
 struct hrtimer timer;
 struct task_struct *task;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct hrtimer_clock_base {
  template <typename, int = 0> struct __BYPASShrtimer_clock_base {};
  template <typename, int> friend struct __BYPASShrtimer_clock_base;
 struct hrtimer_cpu_base *cpu_base;
 int index;
 clockid_t clockid;
 struct timerqueue_head active;
 ktime_t resolution;
 ktime_t (*get_time)(void);
 ktime_t softirq_time;
 ktime_t offset;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum hrtimer_base_type {
 HRTIMER_BASE_MONOTONIC,
 HRTIMER_BASE_REALTIME,
 HRTIMER_BASE_BOOTTIME,
 HRTIMER_BASE_TAI,
 HRTIMER_MAX_CLOCK_BASES,
};
struct hrtimer_cpu_base {
  template <typename, int = 0> struct __BYPASShrtimer_cpu_base {};
  template <typename, int> friend struct __BYPASShrtimer_cpu_base;
 raw_spinlock_t lock;
 unsigned int active_bases;
 unsigned int clock_was_set;

 ktime_t expires_next;
 int hres_active;
 int hang_detected;
 unsigned long nr_events;
 unsigned long nr_retries;
 unsigned long nr_hangs;
 ktime_t max_hang_time;

 struct hrtimer_clock_base clock_base[HRTIMER_MAX_CLOCK_BASES];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void hrtimer_set_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = time;
 timer->_softexpires = time;
}

static inline void hrtimer_set_expires_range(struct hrtimer *timer, ktime_t time, ktime_t delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, delta);
}

static inline void hrtimer_set_expires_range_ns(struct hrtimer *timer, ktime_t time, unsigned long delta)
{
 timer->_softexpires = time;
 timer->node.expires = ktime_add_safe(time, ns_to_ktime(delta));
}

static inline void hrtimer_set_expires_tv64(struct hrtimer *timer, s64 tv64)
{
 timer->node.expires.tv64 = tv64;
 timer->_softexpires.tv64 = tv64;
}

static inline void hrtimer_add_expires(struct hrtimer *timer, ktime_t time)
{
 timer->node.expires = ktime_add_safe(timer->node.expires, time);
 timer->_softexpires = ktime_add_safe(timer->_softexpires, time);
}

static inline void hrtimer_add_expires_ns(struct hrtimer *timer, u64 ns)
{
 timer->node.expires = ({ ({ ktime_t var; var.tv64 = (timer->node.expires).tv64 + (ns); var; }); });
 timer->_softexpires = ({ ({ ktime_t var; var.tv64 = (timer->_softexpires).tv64 + (ns); var; }); });
}

static inline ktime_t hrtimer_get_expires( struct hrtimer *timer)
{
 return timer->node.expires;
}

static inline ktime_t hrtimer_get_softexpires( struct hrtimer *timer)
{
 return timer->_softexpires;
}

static inline s64 hrtimer_get_expires_tv64( struct hrtimer *timer)
{
 return timer->node.expires.tv64;
}
static inline s64 hrtimer_get_softexpires_tv64( struct hrtimer *timer)
{
 return timer->_softexpires.tv64;
}

static inline s64 hrtimer_get_expires_ns( struct hrtimer *timer)
{
 return ((timer->node.expires).tv64);
}

static inline ktime_t hrtimer_expires_remaining( struct hrtimer *timer)
{
 return ({ ({ ktime_t var; var.tv64 = (timer->node.expires).tv64 - (timer->base->get_time()).tv64; var; }); });
}


struct clock_event_device;

extern void hrtimer_interrupt(struct clock_event_device *dev);




static inline ktime_t hrtimer_cb_get_time(struct hrtimer *timer)
{
 return timer->base->get_time();
}

static inline int hrtimer_is_hres_active(struct hrtimer *timer)
{
 return timer->base->cpu_base->hres_active;
}

extern void hrtimer_peek_ahead_timers(void);
extern void clock_was_set_delayed(void);
extern void clock_was_set(void);

extern void timerfd_clock_was_set(void);



extern void hrtimers_resume(void);

extern ktime_t ktime_get(void);
extern ktime_t ktime_get_real(void);
extern ktime_t ktime_get_boottime(void);
extern ktime_t ktime_get_monotonic_offset(void);
extern ktime_t ktime_get_clocktai(void);
extern ktime_t ktime_get_update_offsets(ktime_t *offs_real, ktime_t *offs_boot,
      ktime_t *offs_tai);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct tick_device) tick_cpu_device;





extern void hrtimer_init(struct hrtimer *timer, clockid_t which_clock,
    enum hrtimer_mode mode);







static inline void hrtimer_init_on_stack(struct hrtimer *timer,
      clockid_t which_clock,
      enum hrtimer_mode mode)
{
 hrtimer_init(timer, which_clock, mode);
}
static inline void destroy_hrtimer_on_stack(struct hrtimer *timer) { }



extern int hrtimer_start(struct hrtimer *timer, ktime_t tim,
    enum hrtimer_mode mode);
extern int hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
   unsigned long range_ns, enum hrtimer_mode mode);
extern int
__hrtimer_start_range_ns(struct hrtimer *timer, ktime_t tim,
    unsigned long delta_ns,
    enum hrtimer_mode mode, int wakeup);

extern int hrtimer_cancel(struct hrtimer *timer);
extern int hrtimer_try_to_cancel(struct hrtimer *timer);

static inline int hrtimer_start_expires(struct hrtimer *timer,
      enum hrtimer_mode mode)
{
 unsigned long delta;
 ktime_t soft, hard;
 soft = hrtimer_get_softexpires(timer);
 hard = hrtimer_get_expires(timer);
 delta = ((({ ({ ktime_t var; var.tv64 = (hard).tv64 - (soft).tv64; var; }); })).tv64);
 return hrtimer_start_range_ns(timer, soft, delta, mode);
}

static inline int hrtimer_restart(struct hrtimer *timer)
{
 return hrtimer_start_expires(timer, HRTIMER_MODE_ABS);
}


extern ktime_t hrtimer_get_remaining( struct hrtimer *timer);
extern int hrtimer_get_res( clockid_t which_clock, struct timespec *tp);

extern ktime_t hrtimer_get_next_event(void);






static inline int hrtimer_active( struct hrtimer *timer)
{
 return timer->state != 0x00;
}




static inline int hrtimer_is_queued(struct hrtimer *timer)
{
 return timer->state & 0x01;
}





static inline int hrtimer_callback_running(struct hrtimer *timer)
{
 return timer->state & 0x02;
}


extern u64
hrtimer_forward(struct hrtimer *timer, ktime_t now, ktime_t interval);


static inline u64 hrtimer_forward_now(struct hrtimer *timer,
          ktime_t interval)
{
 return hrtimer_forward(timer, timer->base->get_time(), interval);
}


extern long hrtimer_nanosleep(struct timespec *rqtp,
         struct timespec *rmtp,
         enum hrtimer_mode mode,
         clockid_t clockid);
extern long hrtimer_nanosleep_restart(struct restart_block *restart_block);

extern void hrtimer_init_sleeper(struct hrtimer_sleeper *sl,
     struct task_struct *tsk);

extern int schedule_hrtimeout_range(ktime_t *expires, unsigned long delta,
      enum hrtimer_mode mode);
extern int schedule_hrtimeout_range_clock(ktime_t *expires,
  unsigned long delta, enum hrtimer_mode mode, int clock);
extern int schedule_hrtimeout(ktime_t *expires, enum hrtimer_mode mode);


extern void hrtimer_run_queues(void);
extern void hrtimer_run_pending(void);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) hrtimers_init(void);
extern void sysrq_timer_list_show(void);



extern enum hrtimer_restart it_real_fn(struct hrtimer *);
struct kref {
  template <typename, int = 0> struct __BYPASSkref {};
  template <typename, int> friend struct __BYPASSkref;
 atomic_t refcount;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





static inline void kref_init(struct kref *kref)
{
 ;
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7_atomic7counterE_1316_0 {
  typedef TJP__ZN7_atomic7counterE_1316_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN7_atomic7counterE_1316(int *source) {
  int __result_buffer;
  typedef TJP__ZN7_atomic7counterE_1316_0< int , ::_atomic , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline void kref_get(struct kref *kref)
{




 (((__get__ZN7_atomic7counterE_1316(&(&kref->refcount)->counter) + (1))) < 2);
}
static inline int kref_sub(struct kref *kref, unsigned int count,
      void (*release)(struct kref *kref))
{
 (release == 0);

 if (1) {
  release(kref);
  return 1;
 }
 return 0;
}
static inline int kref_put(struct kref *kref, void (*release)(struct kref *kref))
{
 return kref_sub(kref, 1, release);
}
static inline int kref_put_spinlock_irqsave(struct kref *kref,
  void (*release)(struct kref *kref),
  spinlock_t *lock)
{
 unsigned long flags;

 (release == 0);
 if (atomic_add_unless(&kref->refcount, -1, 1))
  return 0;
 ;
 if (1) {
  release(kref);
  ;
  return 1;
 }
 ;
 return 0;
}

static inline int kref_put_mutex(struct kref *kref,
     void (*release)(struct kref *kref),
     struct mutex *lock)
{
 (release == 0);
 if (__builtin_expect(!!(!atomic_add_unless(&kref->refcount, -1, 1)), 0)) {
  ;
  if (__builtin_expect(!!(!1), 0)) {
   ;
   return 0;
  }
  release(kref);
  return 1;
 }
 return 0;
}
static inline int kref_get_unless_zero(struct kref *kref)
{
 return atomic_add_unless(&kref->refcount, 1, 0);
}
enum {
 IRQC_IS_HARDIRQ = 0,
 IRQC_IS_NESTED,
};

typedef irqreturn_t (*irq_handler_t)(int, void *);
struct irqaction {
  template <typename, int = 0> struct __BYPASSirqaction {};
  template <typename, int> friend struct __BYPASSirqaction;
 irq_handler_t handler;
 void *dev_id;
 void *percpu_dev_id;
 struct irqaction *next;
 irq_handler_t thread_fn;
 struct task_struct *thread;
 unsigned int irq;
 unsigned int flags;
 unsigned long thread_flags;
 unsigned long thread_mask;
 char *name;
 struct proc_dir_entry *dir;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(1 << (6))));

extern irqreturn_t no_action(int cpl, void *dev_id);

extern int
request_threaded_irq(unsigned int irq, irq_handler_t handler,
       irq_handler_t thread_fn,
       unsigned long flags, char *name, void *dev);

static inline int
request_irq(unsigned int irq, irq_handler_t handler, unsigned long flags,
     char *name, void *dev)
{
 return request_threaded_irq(irq, handler, 0, flags, name, dev);
}

extern int
request_any_context_irq(unsigned int irq, irq_handler_t handler,
   unsigned long flags, char *name, void *dev_id);

extern int
request_percpu_irq(unsigned int irq, irq_handler_t handler,
     char *devname, void *percpu_dev_id);

extern void free_irq(unsigned int, void *);
extern void free_percpu_irq(unsigned int, void *);

struct device;

extern int
devm_request_threaded_irq(struct device *dev, unsigned int irq,
     irq_handler_t handler, irq_handler_t thread_fn,
     unsigned long irqflags, char *devname,
     void *dev_id);

static inline int
devm_request_irq(struct device *dev, unsigned int irq, irq_handler_t handler,
   unsigned long irqflags, char *devname, void *dev_id)
{
 return devm_request_threaded_irq(dev, irq, handler, 0, irqflags,
      devname, dev_id);
}

extern void devm_free_irq(struct device *dev, unsigned int irq, void *dev_id);
extern void disable_irq_nosync(unsigned int irq);
extern void disable_irq(unsigned int irq);
extern void disable_percpu_irq(unsigned int irq);
extern void enable_irq(unsigned int irq);
extern void enable_percpu_irq(unsigned int irq, unsigned int type);


extern void suspend_device_irqs(void);
extern void resume_device_irqs(void);

extern int check_wakeup_irqs(void);






extern cpumask_var_t irq_default_affinity;

extern int irq_set_affinity(unsigned int irq, struct cpumask *cpumask);
extern int irq_can_set_affinity(unsigned int irq);
extern int irq_select_affinity(unsigned int irq);

extern int irq_set_affinity_hint(unsigned int irq, struct cpumask *m);
struct irq_affinity_notify {
  template <typename, int = 0> struct __BYPASSirq_affinity_notify {};
  template <typename, int> friend struct __BYPASSirq_affinity_notify;
 unsigned int irq;
 struct kref kref;
 struct work_struct work;
 void (*notify)(struct irq_affinity_notify *, cpumask_t *mask);
 void (*release)(struct kref *ref);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int
irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);
static inline void disable_irq_nosync_lockdep(unsigned int irq)
{
 disable_irq_nosync(irq);



}

static inline void disable_irq_nosync_lockdep_irqsave(unsigned int irq, unsigned long *flags)
{
 disable_irq_nosync(irq);



}

static inline void disable_irq_lockdep(unsigned int irq)
{
 disable_irq(irq);



}

static inline void enable_irq_lockdep(unsigned int irq)
{



 enable_irq(irq);
}

static inline void enable_irq_lockdep_irqrestore(unsigned int irq, unsigned long *flags)
{



 enable_irq(irq);
}


extern int irq_set_irq_wake(unsigned int irq, unsigned int on);

static inline int enable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 1);
}

static inline int disable_irq_wake(unsigned int irq)
{
 return irq_set_irq_wake(irq, 0);
}



extern bool force_irqthreads;
enum
{
 HI_SOFTIRQ=0,
 TIMER_SOFTIRQ,
 NET_TX_SOFTIRQ,
 NET_RX_SOFTIRQ,
 BLOCK_SOFTIRQ,
 BLOCK_IOPOLL_SOFTIRQ,
 TASKLET_SOFTIRQ,
 SCHED_SOFTIRQ,
 HRTIMER_SOFTIRQ,
 RCU_SOFTIRQ,

 NR_SOFTIRQS
};






extern char *softirq_to_name[NR_SOFTIRQS];





struct softirq_action
{
  template <typename, int = 0> struct __BYPASSsoftirq_action {};
  template <typename, int> friend struct __BYPASSsoftirq_action;
 void (*action)(struct softirq_action *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

 void do_softirq(void);
 void __do_softirq(void);


void do_softirq_own_stack(void);







extern void open_softirq(int nr, void (*action)(struct softirq_action *));
extern void softirq_init(void);
extern void __raise_softirq_irqoff(unsigned int nr);

extern void raise_softirq_irqoff(unsigned int nr);
extern void raise_softirq(unsigned int nr);

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct task_struct *) ksoftirqd;

static inline struct task_struct *this_cpu_ksoftirqd(void)
{
 return ({ typeof((ksoftirqd)) pscr_ret__; do { void *__vpp_verify = (typeof((&((ksoftirqd))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((ksoftirqd))) { case 1: pscr_ret__ = ({ typeof(((ksoftirqd))) pfo_ret__; switch (sizeof(((ksoftirqd)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((ksoftirqd))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 2: pscr_ret__ = ({ typeof(((ksoftirqd))) pfo_ret__; switch (sizeof(((ksoftirqd)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((ksoftirqd))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 4: pscr_ret__ = ({ typeof(((ksoftirqd))) pfo_ret__; switch (sizeof(((ksoftirqd)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((ksoftirqd))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 8: pscr_ret__ = ({ typeof(((ksoftirqd))) pfo_ret__; switch (sizeof(((ksoftirqd)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((ksoftirqd))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((ksoftirqd))); break; default: __bad_percpu_size(); } pfo_ret__; });break; default: __bad_size_call_parameter();break; } pscr_ret__; });
}
struct tasklet_struct
{
  template <typename, int = 0> struct __BYPASStasklet_struct {};
  template <typename, int> friend struct __BYPASStasklet_struct;
 struct tasklet_struct *next;
 unsigned long state;
 atomic_t count;
 void (*func)(unsigned long);
 unsigned long data;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum
{
 TASKLET_STATE_SCHED,
 TASKLET_STATE_RUN
};


static inline int tasklet_trylock(struct tasklet_struct *t)
{
 return !test_and_set_bit(TASKLET_STATE_RUN, &(t)->state);
}

static inline void tasklet_unlock(struct tasklet_struct *t)
{
 __asm__ __volatile__("": : :"memory");
 clear_bit(TASKLET_STATE_RUN, &(t)->state);
}

static inline void tasklet_unlock_wait(struct tasklet_struct *t)
{
 while ((__builtin_constant_p((TASKLET_STATE_RUN)) ? constant_test_bit((TASKLET_STATE_RUN), (&(t)->state)) : variable_test_bit((TASKLET_STATE_RUN), (&(t)->state)))) { __asm__ __volatile__("": : :"memory"); }
}






extern void __tasklet_schedule(struct tasklet_struct *t);

static inline void tasklet_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_schedule(t);
}

extern void __tasklet_hi_schedule(struct tasklet_struct *t);

static inline void tasklet_hi_schedule(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule(t);
}

extern void __tasklet_hi_schedule_first(struct tasklet_struct *t);







static inline void tasklet_hi_schedule_first(struct tasklet_struct *t)
{
 if (!test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
  __tasklet_hi_schedule_first(t);
}


static inline void tasklet_disable_nosync(struct tasklet_struct *t)
{
 ;
 __asm__ __volatile__("": : :"memory");
}

static inline void tasklet_disable(struct tasklet_struct *t)
{
 tasklet_disable_nosync(t);
 tasklet_unlock_wait(t);
 asm ("mfence":::"memory");
}

static inline void tasklet_enable(struct tasklet_struct *t)
{
 __asm__ __volatile__("": : :"memory");
 ;
}

static inline void tasklet_hi_enable(struct tasklet_struct *t)
{
 __asm__ __volatile__("": : :"memory");
 ;
}

extern void tasklet_kill(struct tasklet_struct *t);
extern void tasklet_kill_immediate(struct tasklet_struct *t, unsigned int cpu);
extern void tasklet_init(struct tasklet_struct *t,
    void (*func)(unsigned long), unsigned long data);

struct tasklet_hrtimer {
  template <typename, int = 0> struct __BYPASStasklet_hrtimer {};
  template <typename, int> friend struct __BYPASStasklet_hrtimer;
 struct hrtimer timer;
 struct tasklet_struct tasklet;
 enum hrtimer_restart (*function)(struct hrtimer *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void
tasklet_hrtimer_init(struct tasklet_hrtimer *ttimer,
       enum hrtimer_restart (*function)(struct hrtimer *),
       clockid_t which_clock, enum hrtimer_mode mode);

static inline
int tasklet_hrtimer_start(struct tasklet_hrtimer *ttimer, ktime_t time,
     enum hrtimer_mode mode)
{
 return hrtimer_start(&ttimer->timer, time, mode);
}

static inline
void tasklet_hrtimer_cancel(struct tasklet_hrtimer *ttimer)
{
 hrtimer_cancel(&ttimer->timer);
 tasklet_kill(&ttimer->tasklet);
}
extern unsigned long probe_irq_on(void);
extern int probe_irq_off(unsigned long);
extern unsigned int probe_irq_mask(unsigned long);




extern void init_irq_proc(void);






struct seq_file;
int show_interrupts(struct seq_file *p, void *v);
int arch_show_interrupts(struct seq_file *p, int prec);

extern int early_irq_init(void);
extern int arch_probe_nr_irqs(void);
extern int arch_early_irq_init(void);








struct plist_head {
  template <typename, int = 0> struct __BYPASSplist_head {};
  template <typename, int> friend struct __BYPASSplist_head;
 struct list_head node_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct plist_node {
  template <typename, int = 0> struct __BYPASSplist_node {};
  template <typename, int> friend struct __BYPASSplist_node;
 int prio;
 struct list_head prio_list;
 struct list_head node_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void
plist_head_init(struct plist_head *head)
{
 INIT_LIST_HEAD(&head->node_list);
}






static inline void plist_node_init(struct plist_node *node, int prio)
{
 node->prio = prio;
 INIT_LIST_HEAD(&node->prio_list);
 INIT_LIST_HEAD(&node->node_list);
}

extern void plist_add(struct plist_node *node, struct plist_head *head);
extern void plist_del(struct plist_node *node, struct plist_head *head);
static inline int plist_head_empty( struct plist_head *head)
{
 return list_empty(&head->node_list);
}





static inline int plist_node_empty( struct plist_node *node)
{
 return list_empty(&node->node_list);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1325_0 {
  typedef TJP__ZN9list_head4nextE_1325_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1325(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1325_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline struct plist_node *plist_first( struct plist_head *head)
{
 return ({ typeof( ((struct plist_node *)0)->node_list ) *__mptr = (__get__ZN9list_head4nextE_1325(&head->node_list.next)); (struct plist_node *)( (char *)__mptr - ((size_t) &((struct plist_node *)0)->node_list) );})
                                  ;
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4prevE_1327_0 {
  typedef TJP__ZN9list_head4prevE_1327_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4prevE_1327(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4prevE_1327_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline struct plist_node *plist_last( struct plist_head *head)
{
 return ({ typeof( ((struct plist_node *)0)->node_list ) *__mptr = (__get__ZN9list_head4prevE_1327(&head->node_list.prev)); (struct plist_node *)( (char *)__mptr - ((size_t) &((struct plist_node *)0)->node_list) );})
                                  ;
}



struct device;

struct miscdevice {
  template <typename, int = 0> struct __BYPASSmiscdevice {};
  template <typename, int> friend struct __BYPASSmiscdevice;
 int minor;
 char *name;
 struct file_operations *fops;
 struct list_head list;
 struct device *parent;
 struct device *this_device;
 char *nodename;
 umode_t mode;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int misc_register(struct miscdevice * misc);
extern int misc_deregister(struct miscdevice *misc);
struct sock;
struct kobject;





enum kobj_ns_type {
 KOBJ_NS_TYPE_NONE = 0,
 KOBJ_NS_TYPE_NET,
 KOBJ_NS_TYPES
};
struct kobj_ns_type_operations {
  template <typename, int = 0> struct __BYPASSkobj_ns_type_operations {};
  template <typename, int> friend struct __BYPASSkobj_ns_type_operations;
 enum kobj_ns_type type;
 bool (*current_may_mount)(void);
 void *(*grab_current_ns)(void);
 void *(*netlink_ns)(struct sock *sk);
 void *(*initial_ns)(void);
 void (*drop_ns)(void *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int kobj_ns_type_register( struct kobj_ns_type_operations *ops);
int kobj_ns_type_registered(enum kobj_ns_type type);
 struct kobj_ns_type_operations *kobj_child_ns_ops(struct kobject *parent);
 struct kobj_ns_type_operations *kobj_ns_ops(struct kobject *kobj);

bool kobj_ns_current_may_mount(enum kobj_ns_type type);
void *kobj_ns_grab_current(enum kobj_ns_type type);
 void *kobj_ns_netlink(enum kobj_ns_type type, struct sock *sk);
 void *kobj_ns_initial(enum kobj_ns_type type);
void kobj_ns_drop(enum kobj_ns_type type, void *ns);



struct kobject;
struct module;
struct bin_attribute;
enum kobj_ns_type;

struct attribute {
  template <typename, int = 0> struct __BYPASSattribute {};
  template <typename, int> friend struct __BYPASSattribute;
 char *name;
 umode_t mode;






  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct attribute_group {
  template <typename, int = 0> struct __BYPASSattribute_group {};
  template <typename, int> friend struct __BYPASSattribute_group;
 char *name;
 umode_t (*is_visible)(struct kobject *,
           struct attribute *, int);
 struct attribute **attrs;
 struct bin_attribute **bin_attrs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct file;
struct vm_area_struct;

struct bin_attribute {
  template <typename, int = 0> struct __BYPASSbin_attribute {};
  template <typename, int> friend struct __BYPASSbin_attribute;
 struct attribute attr;
 size_t size;
 void *_private;
 ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,
   char *, loff_t, size_t);
 ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,
    char *, loff_t, size_t);
 int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,
      struct vm_area_struct *vma);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct sysfs_ops {
  template <typename, int = 0> struct __BYPASSsysfs_ops {};
  template <typename, int> friend struct __BYPASSsysfs_ops;
 ssize_t (*show)(struct kobject *, struct attribute *, char *);
 ssize_t (*store)(struct kobject *, struct attribute *, char *, size_t);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sysfs_dirent;



int sysfs_schedule_callback(struct kobject *kobj, void (*func)(void *),
       void *data, struct module *owner);

int sysfs_create_dir_ns(struct kobject *kobj, void *ns);
void sysfs_remove_dir(struct kobject *kobj);
int sysfs_rename_dir_ns(struct kobject *kobj, char *new_name,
         void *new_ns);
int sysfs_move_dir_ns(struct kobject *kobj,
       struct kobject *new_parent_kobj,
       void *new_ns);

int sysfs_create_file_ns(struct kobject *kobj,
          struct attribute *attr,
          void *ns);
int sysfs_create_files(struct kobject *kobj,
       struct attribute **attr);
int sysfs_chmod_file(struct kobject *kobj,
      struct attribute *attr, umode_t mode);
void sysfs_remove_file_ns(struct kobject *kobj, struct attribute *attr,
     void *ns);
void sysfs_remove_files(struct kobject *kobj, struct attribute **attr);

int sysfs_create_bin_file(struct kobject *kobj,
           struct bin_attribute *attr);
void sysfs_remove_bin_file(struct kobject *kobj,
      struct bin_attribute *attr);

int sysfs_create_link(struct kobject *kobj, struct kobject *target,
       char *name);
int sysfs_create_link_nowarn(struct kobject *kobj,
       struct kobject *target,
       char *name);
void sysfs_remove_link(struct kobject *kobj, char *name);

int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,
    char *old_name, char *new_name,
    void *new_ns);

void sysfs_delete_link(struct kobject *dir, struct kobject *targ,
   char *name);

int sysfs_create_group(struct kobject *kobj,
        struct attribute_group *grp);
int sysfs_create_groups(struct kobject *kobj,
         struct attribute_group **groups);
int sysfs_update_group(struct kobject *kobj,
         struct attribute_group *grp);
void sysfs_remove_group(struct kobject *kobj,
   struct attribute_group *grp);
void sysfs_remove_groups(struct kobject *kobj,
    struct attribute_group **groups);
int sysfs_add_file_to_group(struct kobject *kobj,
   struct attribute *attr, char *group);
void sysfs_remove_file_from_group(struct kobject *kobj,
   struct attribute *attr, char *group);
int sysfs_merge_group(struct kobject *kobj,
         struct attribute_group *grp);
void sysfs_unmerge_group(struct kobject *kobj,
         struct attribute_group *grp);
int sysfs_add_link_to_group(struct kobject *kobj, char *group_name,
       struct kobject *target, char *link_name);
void sysfs_remove_link_from_group(struct kobject *kobj, char *group_name,
      char *link_name);

void sysfs_notify(struct kobject *kobj, char *dir, char *attr);
void sysfs_notify_dirent(struct sysfs_dirent *sd);
struct sysfs_dirent *sysfs_get_dirent_ns(struct sysfs_dirent *parent_sd,
      unsigned char *name,
      void *ns);
struct sysfs_dirent *sysfs_get(struct sysfs_dirent *sd);
void sysfs_put(struct sysfs_dirent *sd);

int sysfs_init(void);
static inline int sysfs_create_file(struct kobject *kobj,
       struct attribute *attr)
{
 return sysfs_create_file_ns(kobj, attr, 0);
}

static inline void sysfs_remove_file(struct kobject *kobj,
         struct attribute *attr)
{
 return sysfs_remove_file_ns(kobj, attr, 0);
}

static inline int sysfs_rename_link(struct kobject *kobj, struct kobject *target,
        char *old_name, char *new_name)
{
 return sysfs_rename_link_ns(kobj, target, old_name, new_name, 0);
}

static inline struct sysfs_dirent *
sysfs_get_dirent(struct sysfs_dirent *parent_sd, unsigned char *name)
{
 return sysfs_get_dirent_ns(parent_sd, name, 0);
}
extern char uevent_helper[];


extern u64 uevent_seqnum;
enum kobject_action {
 KOBJ_ADD,
 KOBJ_REMOVE,
 KOBJ_CHANGE,
 KOBJ_MOVE,
 KOBJ_ONLINE,
 KOBJ_OFFLINE,
 KOBJ_MAX
};

struct kobject {
  template <typename, int = 0> struct __BYPASSkobject {};
  template <typename, int> friend struct __BYPASSkobject;
 char *name;
 struct list_head entry;
 struct kobject *parent;
 struct kset *kset;
 struct kobj_type *ktype;
 struct sysfs_dirent *sd;
 struct kref kref;



 unsigned int state_initialized:1;
 unsigned int state_in_sysfs:1;
 unsigned int state_add_uevent_sent:1;
 unsigned int state_remove_uevent_sent:1;
 unsigned int uevent_suppress:1;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern __attribute__((format(printf, 2, 3)))
int kobject_set_name(struct kobject *kobj, char *name, ...);
extern int kobject_set_name_vargs(struct kobject *kobj, char *fmt,
      va_list vargs);

static inline char *kobject_name( struct kobject *kobj)
{
 return kobj->name;
}

extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);
extern __attribute__((format(printf, 3, 4)))
int kobject_add(struct kobject *kobj, struct kobject *parent,
  char *fmt, ...);
extern __attribute__((format(printf, 4, 5)))
int kobject_init_and_add(struct kobject *kobj,
    struct kobj_type *ktype, struct kobject *parent,
    char *fmt, ...);

extern void kobject_del(struct kobject *kobj);

extern struct kobject * kobject_create(void);
extern struct kobject * kobject_create_and_add( char *name,
      struct kobject *parent);

extern int kobject_rename(struct kobject *, char *new_name);
extern int kobject_move(struct kobject *, struct kobject *);

extern struct kobject *kobject_get(struct kobject *kobj);
extern void kobject_put(struct kobject *kobj);

extern void *kobject_namespace(struct kobject *kobj);
extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);

struct kobj_type {
  template <typename, int = 0> struct __BYPASSkobj_type {};
  template <typename, int> friend struct __BYPASSkobj_type;
 void (*release)(struct kobject *kobj);
 struct sysfs_ops *sysfs_ops;
 struct attribute **default_attrs;
 struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
 void *(*_namespace)(struct kobject *kobj);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kobj_uevent_env {
  template <typename, int = 0> struct __BYPASSkobj_uevent_env {};
  template <typename, int> friend struct __BYPASSkobj_uevent_env;
 char *envp[32];
 int envp_idx;
 char buf[2048];
 int buflen;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kset_uevent_ops {
  template <typename, int = 0> struct __BYPASSkset_uevent_ops {};
  template <typename, int> friend struct __BYPASSkset_uevent_ops;
 int (* filter)(struct kset *kset, struct kobject *kobj);
 char *(* name)(struct kset *kset, struct kobject *kobj);
 int (* uevent)(struct kset *kset, struct kobject *kobj,
        struct kobj_uevent_env *env);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kobj_attribute {
  template <typename, int = 0> struct __BYPASSkobj_attribute {};
  template <typename, int> friend struct __BYPASSkobj_attribute;
 struct attribute attr;
 ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,
   char *buf);
 ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,
    char *buf, size_t count);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct sysfs_ops kobj_sysfs_ops;

struct sock;
struct kset {
  template <typename, int = 0> struct __BYPASSkset {};
  template <typename, int> friend struct __BYPASSkset;
 struct list_head list;
 spinlock_t list_lock;
 struct kobject kobj;
 struct kset_uevent_ops *uevent_ops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void kset_init(struct kset *kset);
extern int kset_register(struct kset *kset);
extern void kset_unregister(struct kset *kset);
extern struct kset * kset_create_and_add( char *name,
      struct kset_uevent_ops *u,
      struct kobject *parent_kobj);

static inline struct kset *to_kset(struct kobject *kobj)
{
 return kobj ? ({ typeof( ((struct kset *)0)->kobj ) *__mptr = (kobj); (struct kset *)( (char *)__mptr - ((size_t) &((struct kset *)0)->kobj) );}) : 0;
}

static inline struct kset *kset_get(struct kset *k)
{
 return k ? to_kset(kobject_get(&k->kobj)) : 0;
}

static inline void kset_put(struct kset *k)
{
 kobject_put(&k->kobj);
}

static inline struct kobj_type *get_ktype(struct kobject *kobj)
{
 return kobj->ktype;
}

extern struct kobject *kset_find_obj(struct kset *, char *);


extern struct kobject *kernel_kobj;

extern struct kobject *mm_kobj;

extern struct kobject *hypervisor_kobj;

extern struct kobject *power_kobj;

extern struct kobject *firmware_kobj;

int kobject_uevent(struct kobject *kobj, enum kobject_action action);
int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,
   char *envp[]);

__attribute__((format(printf, 2, 3)))
int add_uevent_var(struct kobj_uevent_env *env, char *format, ...);

int kobject_action_type( char *buf, size_t count,
   enum kobject_action *type);
struct klist_node;
struct klist {
  template <typename, int = 0> struct __BYPASSklist {};
  template <typename, int> friend struct __BYPASSklist;
 spinlock_t k_lock;
 struct list_head k_list;
 void (*get)(struct klist_node *);
 void (*put)(struct klist_node *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((aligned (sizeof(void *))));
extern void klist_init(struct klist *k, void (*get)(struct klist_node *),
         void (*put)(struct klist_node *));

struct klist_node {
  template <typename, int = 0> struct __BYPASSklist_node {};
  template <typename, int> friend struct __BYPASSklist_node;
 void *n_klist;
 struct list_head n_node;
 struct kref n_ref;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void klist_add_tail(struct klist_node *n, struct klist *k);
extern void klist_add_head(struct klist_node *n, struct klist *k);
extern void klist_add_after(struct klist_node *n, struct klist_node *pos);
extern void klist_add_before(struct klist_node *n, struct klist_node *pos);

extern void klist_del(struct klist_node *n);
extern void klist_remove(struct klist_node *n);

extern int klist_node_attached(struct klist_node *n);


struct klist_iter {
  template <typename, int = 0> struct __BYPASSklist_iter {};
  template <typename, int> friend struct __BYPASSklist_iter;
 struct klist *i_klist;
 struct klist_node *i_cur;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern void klist_iter_init(struct klist *k, struct klist_iter *i);
extern void klist_iter_init_node(struct klist *k, struct klist_iter *i,
     struct klist_node *n);
extern void klist_iter_exit(struct klist_iter *i);
extern struct klist_node *klist_next(struct klist_iter *i);





struct seq_operations;
struct file;
struct path;
struct inode;
struct dentry;
struct user_namespace;

struct seq_file {
  template <typename, int = 0> struct __BYPASSseq_file {};
  template <typename, int> friend struct __BYPASSseq_file;
 char *buf;
 size_t size;
 size_t from;
 size_t count;
 size_t pad_until;
 loff_t index;
 loff_t read_pos;
 u64 version;
 struct mutex lock;
 struct seq_operations *op;
 int poll_event;

 struct user_namespace *user_ns;

 void *_private;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct seq_operations {
  template <typename, int = 0> struct __BYPASSseq_operations {};
  template <typename, int> friend struct __BYPASSseq_operations;
 void * (*start) (struct seq_file *m, loff_t *pos);
 void (*stop) (struct seq_file *m, void *v);
 void * (*next) (struct seq_file *m, void *v, loff_t *pos);
 int (*show) (struct seq_file *m, void *v);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline size_t seq_get_buf(struct seq_file *m, char **bufp)
{
 (m->count > m->size);
 if (m->count < m->size)
  *bufp = m->buf + m->count;
 else
  *bufp = 0;

 return m->size - m->count;
}
static inline void seq_commit(struct seq_file *m, int num)
{
 if (num < 0) {
  m->count = m->size;
 } else {
  (m->count + num > m->size);
  m->count += num;
 }
}
static inline void seq_setwidth(struct seq_file *m, size_t size)
{
 m->pad_until = m->count + size;
}
void seq_pad(struct seq_file *m, char c);

char *mangle_path(char *s, char *p, char *esc);
int seq_open(struct file *, struct seq_operations *);
ssize_t seq_read(struct file *, char *, size_t, loff_t *);
loff_t seq_lseek(struct file *, loff_t, int);
int seq_release(struct inode *, struct file *);
int seq_escape(struct seq_file *, char *, char *);
int seq_putc(struct seq_file *m, char c);
int seq_puts(struct seq_file *m, char *s);
int seq_write(struct seq_file *seq, void *data, size_t len);

__attribute__((format(printf, 2, 3))) int seq_printf(struct seq_file *, char *, ...);
__attribute__((format(printf, 2, 0))) int seq_vprintf(struct seq_file *, char *, va_list args);

int seq_path(struct seq_file *, struct path *, char *);
int seq_dentry(struct seq_file *, struct dentry *, char *);
int seq_path_root(struct seq_file *m, struct path *path,
    struct path *root, char *esc);
int seq_bitmap(struct seq_file *m, unsigned long *bits,
       unsigned int nr_bits);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_1343_0 {
  typedef TJP__ZN7cpumask4bitsE_1343_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_1343(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_1343_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP_nr_cpu_ids_1344_0 {
  typedef TJP_nr_cpu_ids_1344_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get_nr_cpu_ids_1344(int *source) {
  int __result_buffer;
  typedef TJP_nr_cpu_ids_1344_0< int , void *, int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int seq_cpumask(struct seq_file *m, struct cpumask *mask)
{
 return seq_bitmap(m, (__get__ZN7cpumask4bitsE_1343((mask)->bits)), __get_nr_cpu_ids_1344(&nr_cpu_ids));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_1345_0 {
  typedef TJP__ZN9_nodemask4bitsE_1345_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_1345(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_1345_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int seq_nodemask(struct seq_file *m, nodemask_t *mask)
{



        return seq_bitmap(m, (typeof(mask->bits))g_map(__get__ZN9_nodemask4bitsE_1345(mask->bits), sizeof(*(mask->bits))), (1 << 6));

}

int seq_bitmap_list(struct seq_file *m, unsigned long *bits,
  unsigned int nr_bits);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7cpumask4bitsE_1346_0 {
  typedef TJP__ZN7cpumask4bitsE_1346_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 4;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN7cpumask4bitsE_1346(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN7cpumask4bitsE_1346_0< unsigned long int *, ::cpumask , unsigned long int [4] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP_nr_cpu_ids_1347_0 {
  typedef TJP_nr_cpu_ids_1347_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get_nr_cpu_ids_1347(int *source) {
  int __result_buffer;
  typedef TJP_nr_cpu_ids_1347_0< int , void *, int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int seq_cpumask_list(struct seq_file *m,
       struct cpumask *mask)
{
 return seq_bitmap_list(m, (__get__ZN7cpumask4bitsE_1346((mask)->bits)), __get_nr_cpu_ids_1347(&nr_cpu_ids));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9_nodemask4bitsE_1348_0 {
  typedef TJP__ZN9_nodemask4bitsE_1348_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 1;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned long int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int * __get__ZN9_nodemask4bitsE_1348(unsigned long int *source) {
  unsigned long int *__result_buffer;
  typedef TJP__ZN9_nodemask4bitsE_1348_0< unsigned long int *, ::_nodemask , unsigned long int [1] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int *&)__result_buffer;
}
static inline int seq_nodemask_list(struct seq_file *m, nodemask_t *mask)
{
 return seq_bitmap_list(m, __get__ZN9_nodemask4bitsE_1348(mask->bits), (1 << 6));
}

int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
int single_release(struct inode *, struct file *);
void *__seq_open_private(struct file *, struct seq_operations *, int);
int seq_open_private(struct file *, struct seq_operations *, int);
int seq_release_private(struct inode *, struct file *);
int seq_put_decimal_ull(struct seq_file *m, char delimiter,
   unsigned long long num);
int seq_put_decimal_ll(struct seq_file *m, char delimiter,
   long long num);

static inline struct user_namespace *seq_user_ns(struct seq_file *seq)
{
 extern struct user_namespace init_user_ns;
 return &init_user_ns;

}






extern struct list_head *seq_list_start(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_start_head(struct list_head *head,
  loff_t pos);
extern struct list_head *seq_list_next(void *v, struct list_head *head,
  loff_t *ppos);





extern struct hlist_node *seq_hlist_start(struct hlist_head *head,
       loff_t pos);
extern struct hlist_node *seq_hlist_start_head(struct hlist_head *head,
            loff_t pos);
extern struct hlist_node *seq_hlist_next(void *v, struct hlist_head *head,
      loff_t *ppos);

extern struct hlist_node *seq_hlist_start_rcu(struct hlist_head *head,
           loff_t pos);
extern struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *head,
         loff_t pos);
extern struct hlist_node *seq_hlist_next_rcu(void *v,
         struct hlist_head *head,
         loff_t *ppos);


extern struct hlist_node *seq_hlist_start_percpu(struct hlist_head *head, int *cpu, loff_t pos);

extern struct hlist_node *seq_hlist_next_percpu(void *v, struct hlist_head *head, int *cpu, loff_t *pos);


struct pinctrl;
struct pinctrl_state;
struct device;




extern int pinctrl_request_gpio(unsigned gpio);
extern void pinctrl_free_gpio(unsigned gpio);
extern int pinctrl_gpio_direction_input(unsigned gpio);
extern int pinctrl_gpio_direction_output(unsigned gpio);

extern struct pinctrl * pinctrl_get(struct device *dev);
extern void pinctrl_put(struct pinctrl *p);
extern struct pinctrl_state * pinctrl_lookup_state(
       struct pinctrl *p,
       char *name);
extern int pinctrl_select_state(struct pinctrl *p, struct pinctrl_state *s);

extern struct pinctrl * devm_pinctrl_get(struct device *dev);
extern void devm_pinctrl_put(struct pinctrl *p);


extern int pinctrl_pm_select_default_state(struct device *dev);
extern int pinctrl_pm_select_sleep_state(struct device *dev);
extern int pinctrl_pm_select_idle_state(struct device *dev);
static inline struct pinctrl * pinctrl_get_select(
     struct device *dev, char *name)
{
 struct pinctrl *p;
 struct pinctrl_state *s;
 int ret;

 p = pinctrl_get(dev);
 if (IS_ERR(p))
  return p;

 s = pinctrl_lookup_state(p, name);
 if (IS_ERR(s)) {
  pinctrl_put(p);
  return ERR_PTR(PTR_ERR(s));
 }

 ret = pinctrl_select_state(p, s);
 if (ret < 0) {
  pinctrl_put(p);
  return ERR_PTR(ret);
 }

 return p;
}

static inline struct pinctrl * pinctrl_get_select_default(
     struct device *dev)
{
 return pinctrl_get_select(dev, "default");
}

static inline struct pinctrl * devm_pinctrl_get_select(
     struct device *dev, char *name)
{
 struct pinctrl *p;
 struct pinctrl_state *s;
 int ret;

 p = devm_pinctrl_get(dev);
 if (IS_ERR(p))
  return p;

 s = pinctrl_lookup_state(p, name);
 if (IS_ERR(s)) {
  devm_pinctrl_put(p);
  return ERR_CAST(s);
 }

 ret = pinctrl_select_state(p, s);
 if (ret < 0) {
  devm_pinctrl_put(p);
  return ERR_PTR(ret);
 }

 return p;
}

static inline struct pinctrl * devm_pinctrl_get_select_default(
     struct device *dev)
{
 return devm_pinctrl_get_select(dev, "default");
}






struct dev_pin_info {
  template <typename, int = 0> struct __BYPASSdev_pin_info {};
  template <typename, int> friend struct __BYPASSdev_pin_info;
 struct pinctrl *p;
 struct pinctrl_state *default_state;

 struct pinctrl_state *sleep_state;
 struct pinctrl_state *idle_state;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int pinctrl_bind_pins(struct device *dev);


struct ratelimit_state {
  template <typename, int = 0> struct __BYPASSratelimit_state {};
  template <typename, int> friend struct __BYPASSratelimit_state;
 raw_spinlock_t lock;

 int interval;
 int burst;
 int printed;
 int missed;
 unsigned long begin;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void ratelimit_state_init(struct ratelimit_state *rs,
     int interval, int burst)
{
 ;
 rs->interval = interval;
 rs->burst = burst;
 rs->printed = 0;
 rs->missed = 0;
 rs->begin = 0;
}

extern struct ratelimit_state printk_ratelimit_state;

extern int ___ratelimit(struct ratelimit_state *rs, char *func);





struct dev_archdata {
  template <typename, int = 0> struct __BYPASSdev_archdata {};
  template <typename, int> friend struct __BYPASSdev_archdata;

 struct dma_map_ops *dma_ops;


 void *iommu;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pdev_archdata {
  template <typename, int = 0> struct __BYPASSpdev_archdata {};
  template <typename, int> friend struct __BYPASSpdev_archdata;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct device;
struct device_private;
struct device_driver;
struct driver_private;
struct module;
struct _class;
struct subsys_private;
struct bus_type;
struct device_node;
struct iommu_ops;
struct iommu_group;

struct bus_attribute {
  template <typename, int = 0> struct __BYPASSbus_attribute {};
  template <typename, int> friend struct __BYPASSbus_attribute;
 struct attribute attr;
 ssize_t (*show)(struct bus_type *bus, char *buf);
 ssize_t (*store)(struct bus_type *bus, char *buf, size_t count);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern int bus_create_file(struct bus_type *,
     struct bus_attribute *);
extern void bus_remove_file(struct bus_type *, struct bus_attribute *);
struct bus_type {
  template <typename, int = 0> struct __BYPASSbus_type {};
  template <typename, int> friend struct __BYPASSbus_type;
 char *name;
 char *dev_name;
 struct device *dev_root;
 struct device_attribute *dev_attrs;
 struct attribute_group **bus_groups;
 struct attribute_group **dev_groups;
 struct attribute_group **drv_groups;

 int (*match)(struct device *dev, struct device_driver *drv);
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 int (*probe)(struct device *dev);
 int (*remove)(struct device *dev);
 void (*shutdown)(struct device *dev);

 int (*online)(struct device *dev);
 int (*offline)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 struct dev_pm_ops *pm;

 struct iommu_ops *iommu_ops;

 struct subsys_private *p;
 struct lock_class_key lock_key;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int bus_register(struct bus_type *bus);

extern void bus_unregister(struct bus_type *bus);

extern int bus_rescan_devices(struct bus_type *bus);


struct subsys_dev_iter {
  template <typename, int = 0> struct __BYPASSsubsys_dev_iter {};
  template <typename, int> friend struct __BYPASSsubsys_dev_iter;
 struct klist_iter ki;
 struct device_type *type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
void subsys_dev_iter_init(struct subsys_dev_iter *iter,
    struct bus_type *subsys,
    struct device *start,
    struct device_type *type);
struct device *subsys_dev_iter_next(struct subsys_dev_iter *iter);
void subsys_dev_iter_exit(struct subsys_dev_iter *iter);

int bus_for_each_dev(struct bus_type *bus, struct device *start, void *data,
       int (*fn)(struct device *dev, void *data));
struct device *bus_find_device(struct bus_type *bus, struct device *start,
          void *data,
          int (*match)(struct device *dev, void *data));
struct device *bus_find_device_by_name(struct bus_type *bus,
           struct device *start,
           char *name);
struct device *subsys_find_device_by_id(struct bus_type *bus, unsigned int id,
     struct device *hint);
int bus_for_each_drv(struct bus_type *bus, struct device_driver *start,
       void *data, int (*fn)(struct device_driver *, void *));
void bus_sort_breadthfirst(struct bus_type *bus,
      int (*compare)( struct device *a,
       struct device *b));






struct notifier_block;

extern int bus_register_notifier(struct bus_type *bus,
     struct notifier_block *nb);
extern int bus_unregister_notifier(struct bus_type *bus,
       struct notifier_block *nb);
extern struct kset *bus_get_kset(struct bus_type *bus);
extern struct klist *bus_get_device_klist(struct bus_type *bus);
struct device_driver {
  template <typename, int = 0> struct __BYPASSdevice_driver {};
  template <typename, int> friend struct __BYPASSdevice_driver;
 char *name;
 struct bus_type *bus;

 struct module *owner;
 char *mod_name;

 bool suppress_bind_attrs;

 struct of_device_id *of_match_table;
 struct acpi_device_id *acpi_match_table;

 int (*probe) (struct device *dev);
 int (*remove) (struct device *dev);
 void (*shutdown) (struct device *dev);
 int (*suspend) (struct device *dev, pm_message_t state);
 int (*resume) (struct device *dev);
 struct attribute_group **groups;

 struct dev_pm_ops *pm;

 struct driver_private *p;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern int driver_register(struct device_driver *drv);
extern void driver_unregister(struct device_driver *drv);

extern struct device_driver *driver_find( char *name,
      struct bus_type *bus);
extern int driver_probe_done(void);
extern void wait_for_device_probe(void);




struct driver_attribute {
  template <typename, int = 0> struct __BYPASSdriver_attribute {};
  template <typename, int> friend struct __BYPASSdriver_attribute;
 struct attribute attr;
 ssize_t (*show)(struct device_driver *driver, char *buf);
 ssize_t (*store)(struct device_driver *driver, char *buf,
    size_t count);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern int driver_create_file(struct device_driver *driver,
     struct driver_attribute *attr);
extern void driver_remove_file(struct device_driver *driver,
          struct driver_attribute *attr);

extern int driver_for_each_device(struct device_driver *drv,
            struct device *start,
            void *data,
            int (*fn)(struct device *dev,
        void *));
struct device *driver_find_device(struct device_driver *drv,
      struct device *start, void *data,
      int (*match)(struct device *dev, void *data));
struct subsys_interface {
  template <typename, int = 0> struct __BYPASSsubsys_interface {};
  template <typename, int> friend struct __BYPASSsubsys_interface;
 char *name;
 struct bus_type *subsys;
 struct list_head node;
 int (*add_dev)(struct device *dev, struct subsys_interface *sif);
 int (*remove_dev)(struct device *dev, struct subsys_interface *sif);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int subsys_interface_register(struct subsys_interface *sif);
void subsys_interface_unregister(struct subsys_interface *sif);

int subsys_system_register(struct bus_type *subsys,
      struct attribute_group **groups);
int subsys_virtual_register(struct bus_type *subsys,
       struct attribute_group **groups);
struct _class {
  template <typename, int = 0> struct __BYPASS_class {};
  template <typename, int> friend struct __BYPASS_class;
 char *name;
 struct module *owner;

 struct class_attribute *class_attrs;
 struct attribute_group **dev_groups;
 struct kobject *dev_kobj;

 int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode);

 void (*class_release)(struct _class *_class);
 void (*dev_release)(struct device *dev);

 int (*suspend)(struct device *dev, pm_message_t state);
 int (*resume)(struct device *dev);

 struct kobj_ns_type_operations *ns_type;
 void *(*_namespace)(struct device *dev);

 struct dev_pm_ops *pm;

 struct subsys_private *p;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct class_dev_iter {
  template <typename, int = 0> struct __BYPASSclass_dev_iter {};
  template <typename, int> friend struct __BYPASSclass_dev_iter;
 struct klist_iter ki;
 struct device_type *type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct kobject *sysfs_dev_block_kobj;
extern struct kobject *sysfs_dev_char_kobj;
extern int __class_register(struct _class *_class,
      struct lock_class_key *key);
extern void class_unregister(struct _class *_class);
struct class_compat;
struct class_compat *class_compat_register( char *name);
void class_compat_unregister(struct class_compat *cls);
int class_compat_create_link(struct class_compat *cls, struct device *dev,
        struct device *device_link);
void class_compat_remove_link(struct class_compat *cls, struct device *dev,
         struct device *device_link);

extern void class_dev_iter_init(struct class_dev_iter *iter,
    struct _class *_class,
    struct device *start,
    struct device_type *type);
extern struct device *class_dev_iter_next(struct class_dev_iter *iter);
extern void class_dev_iter_exit(struct class_dev_iter *iter);

extern int class_for_each_device(struct _class *_class, struct device *start,
     void *data,
     int (*fn)(struct device *dev, void *data));
extern struct device *class_find_device(struct _class *_class,
     struct device *start, void *data,
     int (*match)(struct device *, void *));

struct class_attribute {
  template <typename, int = 0> struct __BYPASSclass_attribute {};
  template <typename, int> friend struct __BYPASSclass_attribute;
 struct attribute attr;
 ssize_t (*show)(struct _class *_class, struct class_attribute *attr,
   char *buf);
 ssize_t (*store)(struct _class *_class, struct class_attribute *attr,
   char *buf, size_t count);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern int class_create_file_ns(struct _class *_class,
          struct class_attribute *attr,
          void *ns);
extern void class_remove_file_ns(struct _class *_class,
     struct class_attribute *attr,
     void *ns);

static inline int class_create_file(struct _class *_class,
     struct class_attribute *attr)
{
 return class_create_file_ns(_class, attr, 0);
}

static inline void class_remove_file(struct _class *_class,
         struct class_attribute *attr)
{
 return class_remove_file_ns(_class, attr, 0);
}


struct class_attribute_string {
  template <typename, int = 0> struct __BYPASSclass_attribute_string {};
  template <typename, int> friend struct __BYPASSclass_attribute_string;
 struct class_attribute attr;
 char *str;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern ssize_t show_class_attr_string(struct _class *_class, struct class_attribute *attr,
                        char *buf);

struct class_interface {
  template <typename, int = 0> struct __BYPASSclass_interface {};
  template <typename, int> friend struct __BYPASSclass_interface;
 struct list_head node;
 struct _class *_class;

 int (*add_dev) (struct device *, struct class_interface *);
 void (*remove_dev) (struct device *, struct class_interface *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int class_interface_register(struct class_interface *);
extern void class_interface_unregister(struct class_interface *);

extern struct _class * __class_create(struct module *owner,
        char *name,
        struct lock_class_key *key);
extern void class_destroy(struct _class *cls);
struct device_type {
  template <typename, int = 0> struct __BYPASSdevice_type {};
  template <typename, int> friend struct __BYPASSdevice_type;
 char *name;
 struct attribute_group **groups;
 int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
 char *(*devnode)(struct device *dev, umode_t *mode,
    kuid_t *uid, kgid_t *gid);
 void (*release)(struct device *dev);

 struct dev_pm_ops *pm;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct device_attribute {
  template <typename, int = 0> struct __BYPASSdevice_attribute {};
  template <typename, int> friend struct __BYPASSdevice_attribute;
 struct attribute attr;
 ssize_t (*show)(struct device *dev, struct device_attribute *attr,
   char *buf);
 ssize_t (*store)(struct device *dev, struct device_attribute *attr,
    char *buf, size_t count);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dev_ext_attribute {
  template <typename, int = 0> struct __BYPASSdev_ext_attribute {};
  template <typename, int> friend struct __BYPASSdev_ext_attribute;
 struct device_attribute attr;
 void *var;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

ssize_t device_show_ulong(struct device *dev, struct device_attribute *attr,
     char *buf);
ssize_t device_store_ulong(struct device *dev, struct device_attribute *attr,
      char *buf, size_t count);
ssize_t device_show_int(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_int(struct device *dev, struct device_attribute *attr,
    char *buf, size_t count);
ssize_t device_show_bool(struct device *dev, struct device_attribute *attr,
   char *buf);
ssize_t device_store_bool(struct device *dev, struct device_attribute *attr,
    char *buf, size_t count);
extern int device_create_file(struct device *device,
         struct device_attribute *entry);
extern void device_remove_file(struct device *dev,
          struct device_attribute *attr);
extern int device_create_bin_file(struct device *dev,
     struct bin_attribute *attr);
extern void device_remove_bin_file(struct device *dev,
       struct bin_attribute *attr);
extern int device_schedule_callback_owner(struct device *dev,
  void (*func)(struct device *dev), struct module *owner);






typedef void (*dr_release_t)(struct device *dev, void *res);
typedef int (*dr_match_t)(struct device *dev, void *res, void *match_data);







extern void *devres_alloc(dr_release_t release, size_t size, gfp_t gfp);

extern void devres_for_each_res(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data,
    void (*fn)(struct device *, void *, void *),
    void *data);
extern void devres_free(void *res);
extern void devres_add(struct device *dev, void *res);
extern void *devres_find(struct device *dev, dr_release_t release,
    dr_match_t match, void *match_data);
extern void *devres_get(struct device *dev, void *new_res,
   dr_match_t match, void *match_data);
extern void *devres_remove(struct device *dev, dr_release_t release,
      dr_match_t match, void *match_data);
extern int devres_destroy(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);
extern int devres_release(struct device *dev, dr_release_t release,
     dr_match_t match, void *match_data);


extern void * devres_open_group(struct device *dev, void *id,
          gfp_t gfp);
extern void devres_close_group(struct device *dev, void *id);
extern void devres_remove_group(struct device *dev, void *id);
extern int devres_release_group(struct device *dev, void *id);


extern void *devm_kmalloc(struct device *dev, size_t size, gfp_t gfp);
static inline void *devm_kzalloc(struct device *dev, size_t size, gfp_t gfp)
{
 return devm_kmalloc(dev, size, gfp | (( gfp_t)0x8000u));
}
static inline void *devm_kmalloc_array(struct device *dev,
           size_t n, size_t size, gfp_t flags)
{
 if (size != 0 && n > (~(size_t)0) / size)
  return 0;
 return devm_kmalloc(dev, n * size, flags);
}
static inline void *devm_kcalloc(struct device *dev,
     size_t n, size_t size, gfp_t flags)
{
 return devm_kmalloc_array(dev, n, size, flags | (( gfp_t)0x8000u));
}
extern void devm_kfree(struct device *dev, void *p);

void *devm_ioremap_resource(struct device *dev, struct resource *res);
void *devm_request_and_ioremap(struct device *dev,
   struct resource *res);


int devm_add_action(struct device *dev, void (*action)(void *), void *data);
void devm_remove_action(struct device *dev, void (*action)(void *), void *data);

struct device_dma_parameters {
  template <typename, int = 0> struct __BYPASSdevice_dma_parameters {};
  template <typename, int> friend struct __BYPASSdevice_dma_parameters;




 unsigned int max_segment_size;
 unsigned long segment_boundary_mask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct acpi_device;

struct acpi_dev_node {
  template <typename, int = 0> struct __BYPASSacpi_dev_node {};
  template <typename, int> friend struct __BYPASSacpi_dev_node;

 struct acpi_device *companion;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct device {
  template <typename, int = 0> struct __BYPASSdevice {};
  template <typename, int> friend struct __BYPASSdevice;
 struct device *parent;

 struct device_private *p;

 struct kobject kobj;
 char *init_name;
 struct device_type *type;

 struct mutex mutex;



 struct bus_type *bus;
 struct device_driver *driver;

 void *platform_data;

 struct dev_pm_info power;
 struct dev_pm_domain *pm_domain;


 struct dev_pin_info *pins;



 int numa_node;

 u64 *dma_mask;
 u64 coherent_dma_mask;





 struct device_dma_parameters *dma_parms;

 struct list_head dma_pools;

 struct dma_coherent_mem *dma_mem;






 struct dev_archdata archdata;

 struct device_node *of_node;
 struct acpi_dev_node acpi_node;

 dev_t devt;
 u32 id;

 spinlock_t devres_lock;
 struct list_head devres_head;

 struct klist_node knode_class;
 struct _class *_class;
 struct attribute_group **groups;

 void (*release)(struct device *dev);
 struct iommu_group *iommu_group;

 bool offline_disabled:1;
 bool offline:1;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct device *kobj_to_dev(struct kobject *kobj)
{
 return ({ typeof( ((struct device *)0)->kobj ) *__mptr = (kobj); (struct device *)( (char *)__mptr - ((size_t) &((struct device *)0)->kobj) );});
}


struct wakeup_source {
  template <typename, int = 0> struct __BYPASSwakeup_source {};
  template <typename, int> friend struct __BYPASSwakeup_source;
 char *name;
 struct list_head entry;
 spinlock_t lock;
 struct timer_list timer;
 unsigned long timer_expires;
 ktime_t total_time;
 ktime_t max_time;
 ktime_t last_time;
 ktime_t start_prevent_time;
 ktime_t prevent_sleep_time;
 unsigned long event_count;
 unsigned long active_count;
 unsigned long relax_count;
 unsigned long expire_count;
 unsigned long wakeup_count;
 bool active:1;
 bool autosleep_enabled:1;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







static inline bool device_can_wakeup(struct device *dev)
{
 return dev->power.can_wakeup;
}

static inline bool device_may_wakeup(struct device *dev)
{
 return dev->power.can_wakeup && !!dev->power.wakeup;
}


extern void wakeup_source_prepare(struct wakeup_source *ws, char *name);
extern struct wakeup_source *wakeup_source_create( char *name);
extern void wakeup_source_drop(struct wakeup_source *ws);
extern void wakeup_source_destroy(struct wakeup_source *ws);
extern void wakeup_source_add(struct wakeup_source *ws);
extern void wakeup_source_remove(struct wakeup_source *ws);
extern struct wakeup_source *wakeup_source_register( char *name);
extern void wakeup_source_unregister(struct wakeup_source *ws);
extern int device_wakeup_enable(struct device *dev);
extern int device_wakeup_disable(struct device *dev);
extern void device_set_wakeup_capable(struct device *dev, bool capable);
extern int device_init_wakeup(struct device *dev, bool val);
extern int device_set_wakeup_enable(struct device *dev, bool enable);
extern void __pm_stay_awake(struct wakeup_source *ws);
extern void pm_stay_awake(struct device *dev);
extern void __pm_relax(struct wakeup_source *ws);
extern void pm_relax(struct device *dev);
extern void __pm_wakeup_event(struct wakeup_source *ws, unsigned int msec);
extern void pm_wakeup_event(struct device *dev, unsigned int msec);
static inline void wakeup_source_init(struct wakeup_source *ws,
          char *name)
{
 wakeup_source_prepare(ws, name);
 wakeup_source_add(ws);
}

static inline void wakeup_source_trash(struct wakeup_source *ws)
{
 wakeup_source_remove(ws);
 wakeup_source_drop(ws);
}

static inline char *dev_name( struct device *dev)
{

 if (dev->init_name)
  return dev->init_name;

 return kobject_name(&dev->kobj);
}

extern __attribute__((format(printf, 2, 3)))
int dev_set_name(struct device *dev, char *name, ...);


static inline int dev_to_node(struct device *dev)
{
 return dev->numa_node;
}
static inline void set_dev_node(struct device *dev, int node)
{
 dev->numa_node = node;
}
static inline struct pm_subsys_data *dev_to_psd(struct device *dev)
{
 return dev ? dev->power.subsys_data : 0;
}

static inline unsigned int dev_get_uevent_suppress( struct device *dev)
{
 return dev->kobj.uevent_suppress;
}

static inline void dev_set_uevent_suppress(struct device *dev, int val)
{
 dev->kobj.uevent_suppress = val;
}

static inline int device_is_registered(struct device *dev)
{
 return dev->kobj.state_in_sysfs;
}

static inline void device_enable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = _true;
}

static inline void device_disable_async_suspend(struct device *dev)
{
 if (!dev->power.is_prepared)
  dev->power.async_suspend = _false;
}

static inline bool device_async_suspend_enabled(struct device *dev)
{
 return !!dev->power.async_suspend;
}

static inline void pm_suspend_ignore_children(struct device *dev, bool enable)
{
 dev->power.ignore_children = enable;
}

static inline void dev_pm_syscore_device(struct device *dev, bool val)
{

 dev->power.syscore = val;

}

static inline void device_lock(struct device *dev)
{
 ;
}

static inline int device_trylock(struct device *dev)
{
 return 1;
}

static inline void device_unlock(struct device *dev)
{
 ;
}

void driver_init(void);




extern int device_register(struct device *dev);
extern void device_unregister(struct device *dev);
extern void device_initialize(struct device *dev);
extern int device_add(struct device *dev);
extern void device_del(struct device *dev);
extern int device_for_each_child(struct device *dev, void *data,
       int (*fn)(struct device *dev, void *data));
extern struct device *device_find_child(struct device *dev, void *data,
    int (*match)(struct device *dev, void *data));
extern int device_rename(struct device *dev, char *new_name);
extern int device_move(struct device *dev, struct device *new_parent,
         enum dpm_order dpm_order);
extern char *device_get_devnode(struct device *dev,
          umode_t *mode, kuid_t *uid, kgid_t *gid,
          char **tmp);
extern void *dev_get_drvdata( struct device *dev);
extern int dev_set_drvdata(struct device *dev, void *data);

static inline bool device_supports_offline(struct device *dev)
{
 return dev->bus && dev->bus->offline && dev->bus->online;
}

extern void lock_device_hotplug(void);
extern void unlock_device_hotplug(void);
extern int lock_device_hotplug_sysfs(void);
extern int device_offline(struct device *dev);
extern int device_online(struct device *dev);



extern struct device *__root_device_register( char *name,
          struct module *owner);
extern void root_device_unregister(struct device *root);

static inline void *dev_get_platdata( struct device *dev)
{
 return dev->platform_data;
}





extern int device_bind_driver(struct device *dev);
extern void device_release_driver(struct device *dev);
extern int device_attach(struct device *dev);
extern int driver_attach(struct device_driver *drv);
extern int device_reprobe(struct device *dev);




extern struct device *device_create_vargs(struct _class *cls,
       struct device *parent,
       dev_t devt,
       void *drvdata,
       char *fmt,
       va_list vargs);
extern __attribute__((format(printf, 5, 6)))
struct device *device_create(struct _class *cls, struct device *parent,
        dev_t devt, void *drvdata,
        char *fmt, ...);
extern __attribute__((format(printf, 6, 7)))
struct device *device_create_with_groups(struct _class *cls,
        struct device *parent, dev_t devt, void *drvdata,
        struct attribute_group **groups,
        char *fmt, ...);
extern void device_destroy(struct _class *cls, dev_t devt);







extern int (*platform_notify)(struct device *dev);

extern int (*platform_notify_remove)(struct device *dev);






extern struct device *get_device(struct device *dev);
extern void put_device(struct device *dev);


extern int devtmpfs_create_node(struct device *dev);
extern int devtmpfs_delete_node(struct device *dev);
extern int devtmpfs_mount( char *mntdir);







extern void device_shutdown(void);


extern char *dev_driver_string( struct device *dev);




extern __attribute__((format(printf, 3, 0)))
int dev_vprintk_emit(int level, struct device *dev,
       char *fmt, va_list args);
extern __attribute__((format(printf, 3, 4)))
int dev_printk_emit(int level, struct device *dev, char *fmt, ...);

extern __attribute__((format(printf, 3, 4)))
int dev_printk( char *level, struct device *dev,
        char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
int dev_emerg( struct device *dev, char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
int dev_alert( struct device *dev, char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
int dev_crit( struct device *dev, char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
int dev_err( struct device *dev, char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
int dev_warn( struct device *dev, char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
int dev_notice( struct device *dev, char *fmt, ...);
extern __attribute__((format(printf, 2, 3)))
int _dev_info( struct device *dev, char *fmt, ...);


enum {
 PM_QOS_RESERVED = 0,
 PM_QOS_CPU_DMA_LATENCY,
 PM_QOS_NETWORK_LATENCY,
 PM_QOS_NETWORK_THROUGHPUT,


 PM_QOS_NUM_CLASSES,
};

enum pm_qos_flags_status {
 PM_QOS_FLAGS_UNDEFINED = -1,
 PM_QOS_FLAGS_NONE,
 PM_QOS_FLAGS_SOME,
 PM_QOS_FLAGS_ALL,
};
struct pm_qos_request {
  template <typename, int = 0> struct __BYPASSpm_qos_request {};
  template <typename, int> friend struct __BYPASSpm_qos_request;
 struct plist_node node;
 int pm_qos_class;
 struct delayed_work work;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pm_qos_flags_request {
  template <typename, int = 0> struct __BYPASSpm_qos_flags_request {};
  template <typename, int> friend struct __BYPASSpm_qos_flags_request;
 struct list_head node;
 s32 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum dev_pm_qos_req_type {
 DEV_PM_QOS_LATENCY = 1,
 DEV_PM_QOS_FLAGS,
};

struct dev_pm_qos_request {
  template <typename, int = 0> struct __BYPASSdev_pm_qos_request {};
  template <typename, int> friend struct __BYPASSdev_pm_qos_request;
 enum dev_pm_qos_req_type type;
 union {
  struct plist_node pnode;
  struct pm_qos_flags_request flr;
 } data;
 struct device *dev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum pm_qos_type {
 PM_QOS_UNITIALIZED,
 PM_QOS_MAX,
 PM_QOS_MIN
};






struct pm_qos_constraints {
  template <typename, int = 0> struct __BYPASSpm_qos_constraints {};
  template <typename, int> friend struct __BYPASSpm_qos_constraints;
 struct plist_head list;
 s32 target_value;
 s32 default_value;
 enum pm_qos_type type;
 struct blocking_notifier_head *notifiers;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pm_qos_flags {
  template <typename, int = 0> struct __BYPASSpm_qos_flags {};
  template <typename, int> friend struct __BYPASSpm_qos_flags;
 struct list_head list;
 s32 effective_flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dev_pm_qos {
  template <typename, int = 0> struct __BYPASSdev_pm_qos {};
  template <typename, int> friend struct __BYPASSdev_pm_qos;
 struct pm_qos_constraints latency;
 struct pm_qos_flags flags;
 struct dev_pm_qos_request *latency_req;
 struct dev_pm_qos_request *flags_req;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum pm_qos_req_action {
 PM_QOS_ADD_REQ,
 PM_QOS_UPDATE_REQ,
 PM_QOS_REMOVE_REQ
};

static inline int dev_pm_qos_request_active(struct dev_pm_qos_request *req)
{
 return req->dev != 0;
}

int pm_qos_update_target(struct pm_qos_constraints *c, struct plist_node *node,
    enum pm_qos_req_action action, int value);
bool pm_qos_update_flags(struct pm_qos_flags *pqf,
    struct pm_qos_flags_request *req,
    enum pm_qos_req_action action, s32 val);
void pm_qos_add_request(struct pm_qos_request *req, int pm_qos_class,
   s32 value);
void pm_qos_update_request(struct pm_qos_request *req,
      s32 new_value);
void pm_qos_update_request_timeout(struct pm_qos_request *req,
       s32 new_value, unsigned long timeout_us);
void pm_qos_remove_request(struct pm_qos_request *req);

int pm_qos_request(int pm_qos_class);
int pm_qos_add_notifier(int pm_qos_class, struct notifier_block *notifier);
int pm_qos_remove_notifier(int pm_qos_class, struct notifier_block *notifier);
int pm_qos_request_active(struct pm_qos_request *req);
s32 pm_qos_read_value(struct pm_qos_constraints *c);


enum pm_qos_flags_status __dev_pm_qos_flags(struct device *dev, s32 mask);
enum pm_qos_flags_status dev_pm_qos_flags(struct device *dev, s32 mask);
s32 __dev_pm_qos_read_value(struct device *dev);
s32 dev_pm_qos_read_value(struct device *dev);
int dev_pm_qos_add_request(struct device *dev, struct dev_pm_qos_request *req,
      enum dev_pm_qos_req_type type, s32 value);
int dev_pm_qos_update_request(struct dev_pm_qos_request *req, s32 new_value);
int dev_pm_qos_remove_request(struct dev_pm_qos_request *req);
int dev_pm_qos_add_notifier(struct device *dev,
       struct notifier_block *notifier);
int dev_pm_qos_remove_notifier(struct device *dev,
          struct notifier_block *notifier);
int dev_pm_qos_add_global_notifier(struct notifier_block *notifier);
int dev_pm_qos_remove_global_notifier(struct notifier_block *notifier);
void dev_pm_qos_constraints_init(struct device *dev);
void dev_pm_qos_constraints_destroy(struct device *dev);
int dev_pm_qos_add_ancestor_request(struct device *dev,
        struct dev_pm_qos_request *req, s32 value);
int dev_pm_qos_expose_latency_limit(struct device *dev, s32 value);
void dev_pm_qos_hide_latency_limit(struct device *dev);
int dev_pm_qos_expose_flags(struct device *dev, s32 value);
void dev_pm_qos_hide_flags(struct device *dev);
int dev_pm_qos_update_flags(struct device *dev, s32 mask, bool set);

static inline s32 dev_pm_qos_requested_latency(struct device *dev)
{
 return dev->power.qos->latency_req->data.pnode.prio;
}

static inline s32 dev_pm_qos_requested_flags(struct device *dev)
{
 return dev->power.qos->flags_req->data.flr.flags;
}


extern unsigned long loops_per_jiffy;








extern void __bad_udelay(void);
extern void __bad_ndelay(void);

extern void __udelay(unsigned long usecs);
extern void __ndelay(unsigned long nsecs);
extern void __const_udelay(unsigned long xloops);
extern void __delay(unsigned long loops);

void use_tsc_delay(void);
extern unsigned long lpj_fine;
void calibrate_delay(void);
void msleep(unsigned int msecs);
unsigned long msleep_interruptible(unsigned int msecs);
void usleep_range(unsigned long min, unsigned long max);

static inline void ssleep(unsigned int seconds)
{
 msleep(seconds * 1000);
}














struct scatterlist {
  template <typename, int = 0> struct __BYPASSscatterlist {};
  template <typename, int> friend struct __BYPASSscatterlist;



 unsigned long page_link;
 unsigned int offset;
 unsigned int length;
 dma_addr_t dma_address;

 unsigned int dma_length;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sg_table {
  template <typename, int = 0> struct __BYPASSsg_table {};
  template <typename, int> friend struct __BYPASSsg_table;
 struct scatterlist *sgl;
 unsigned int nents;
 unsigned int orig_nents;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void sg_assign_page(struct scatterlist *sg, struct page *page)
{
 unsigned long page_link = sg->page_link & 0x3;





 ((unsigned long) page & 0x03);




 sg->page_link = page_link | (unsigned long) page;
}
static inline void sg_set_page(struct scatterlist *sg, struct page *page,
          unsigned int len, unsigned int offset)
{
 sg_assign_page(sg, page);
 sg->offset = offset;
 sg->length = len;
}

static inline struct page *sg_page(struct scatterlist *sg)
{




 return (struct page *)((sg)->page_link & ~0x3);
}
static inline void sg_set_buf(struct scatterlist *sg, void *buf,
         unsigned int buflen)
{



 sg_set_page(sg, (((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)(buf)) >> 12)), buflen, ((unsigned long)(buf) & ~(~(((1UL) << 12)-1))));
}
static inline void sg_chain(struct scatterlist *prv, unsigned int prv_nents,
       struct scatterlist *sgl)
{







 prv[prv_nents - 1].offset = 0;
 prv[prv_nents - 1].length = 0;





 prv[prv_nents - 1].page_link = ((unsigned long) sgl | 0x01) & ~0x02;
}
static inline void sg_mark_end(struct scatterlist *sg)
{






 sg->page_link |= 0x02;
 sg->page_link &= ~0x01;
}
static inline void sg_unmark_end(struct scatterlist *sg)
{



 sg->page_link &= ~0x02;
}
static inline dma_addr_t sg_phys(struct scatterlist *sg)
{
 return ((dma_addr_t)(unsigned long)((sg_page(sg)) - ((struct page *)(0xffffea0000000000UL))) << 12) + sg->offset;
}
static inline void *sg_virt(struct scatterlist *sg)
{
 return lowmem_page_address(sg_page(sg)) + sg->offset;
}

int sg_nents(struct scatterlist *sg);
struct scatterlist *sg_next(struct scatterlist *);
struct scatterlist *sg_last(struct scatterlist *s, unsigned int);
void sg_init_table(struct scatterlist *, unsigned int);
void sg_init_one(struct scatterlist *, void *, unsigned int);

typedef struct scatterlist *(sg_alloc_fn)(unsigned int, gfp_t);
typedef void (sg_free_fn)(struct scatterlist *, unsigned int);

void __sg_free_table(struct sg_table *, unsigned int, sg_free_fn *);
void sg_free_table(struct sg_table *);
int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int, gfp_t,
       sg_alloc_fn *);
int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
int sg_alloc_table_from_pages(struct sg_table *sgt,
 struct page **pages, unsigned int n_pages,
 unsigned long offset, unsigned long size,
 gfp_t gfp_mask);

size_t sg_copy_from_buffer(struct scatterlist *sgl, unsigned int nents,
      void *buf, size_t buflen);
size_t sg_copy_to_buffer(struct scatterlist *sgl, unsigned int nents,
    void *buf, size_t buflen);

size_t sg_pcopy_from_buffer(struct scatterlist *sgl, unsigned int nents,
       void *buf, size_t buflen, off_t skip);
size_t sg_pcopy_to_buffer(struct scatterlist *sgl, unsigned int nents,
     void *buf, size_t buflen, off_t skip);
struct sg_page_iter {
  template <typename, int = 0> struct __BYPASSsg_page_iter {};
  template <typename, int> friend struct __BYPASSsg_page_iter;
 struct scatterlist *sg;
 unsigned int sg_pgoffset;


 unsigned int __nents;
 int __pg_advance;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

bool __sg_page_iter_next(struct sg_page_iter *piter);
void __sg_page_iter_start(struct sg_page_iter *piter,
     struct scatterlist *sglist, unsigned int nents,
     unsigned long pgoffset);




static inline struct page *sg_page_iter_page(struct sg_page_iter *piter)
{
 return (((struct page *)(0xffffea0000000000UL)) + ((unsigned long)(((sg_page(piter->sg))) - ((struct page *)(0xffffea0000000000UL))) + (piter->sg_pgoffset)));
}






static inline dma_addr_t sg_page_iter_dma_address(struct sg_page_iter *piter)
{
 return ((piter->sg)->dma_address) + (piter->sg_pgoffset << 12);
}
struct sg_mapping_iter {
  template <typename, int = 0> struct __BYPASSsg_mapping_iter {};
  template <typename, int> friend struct __BYPASSsg_mapping_iter;

 struct page *page;
 void *addr;
 size_t length;
 size_t consumed;
 struct sg_page_iter piter;


 unsigned int __offset;
 unsigned int __remaining;
 unsigned int __flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void sg_miter_start(struct sg_mapping_iter *miter, struct scatterlist *sgl,
      unsigned int nents, unsigned int flags);
bool sg_miter_next(struct sg_mapping_iter *miter);
void sg_miter_stop(struct sg_mapping_iter *miter);
typedef s32 dma_cookie_t;



static inline int dma_submit_error(dma_cookie_t cookie)
{
 return cookie < 0 ? cookie : 0;
}
enum dma_status {
 DMA_COMPLETE,
 DMA_IN_PROGRESS,
 DMA_PAUSED,
 DMA_ERROR,
};







enum dma_transaction_type {
 DMA_MEMCPY,
 DMA_XOR,
 DMA_PQ,
 DMA_XOR_VAL,
 DMA_PQ_VAL,
 DMA_INTERRUPT,
 DMA_SG,
 DMA_PRIVATE,
 DMA_ASYNC_TX,
 DMA_SLAVE,
 DMA_CYCLIC,
 DMA_INTERLEAVE,

 DMA_TX_TYPE_END,
};
enum dma_transfer_direction {
 DMA_MEM_TO_MEM,
 DMA_MEM_TO_DEV,
 DMA_DEV_TO_MEM,
 DMA_DEV_TO_DEV,
 DMA_TRANS_NONE,
};
struct data_chunk {
  template <typename, int = 0> struct __BYPASSdata_chunk {};
  template <typename, int> friend struct __BYPASSdata_chunk;
 size_t size;
 size_t icg;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dma_interleaved_template {
  template <typename, int = 0> struct __BYPASSdma_interleaved_template {};
  template <typename, int> friend struct __BYPASSdma_interleaved_template;
 dma_addr_t src_start;
 dma_addr_t dst_start;
 enum dma_transfer_direction dir;
 bool src_inc;
 bool dst_inc;
 bool src_sgl;
 bool dst_sgl;
 size_t numf;
 size_t frame_size;
 struct data_chunk sgl[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum dma_ctrl_flags {
 DMA_PREP_INTERRUPT = (1 << 0),
 DMA_CTRL_ACK = (1 << 1),
 DMA_PREP_PQ_DISABLE_P = (1 << 2),
 DMA_PREP_PQ_DISABLE_Q = (1 << 3),
 DMA_PREP_CONTINUE = (1 << 4),
 DMA_PREP_FENCE = (1 << 5),
};
enum dma_ctrl_cmd {
 DMA_TERMINATE_ALL,
 DMA_PAUSE,
 DMA_RESUME,
 DMA_SLAVE_CONFIG,
 FSLDMA_EXTERNAL_START,
};




enum sum_check_bits {
 SUM_CHECK_P = 0,
 SUM_CHECK_Q = 1,
};






enum sum_check_flags {
 SUM_CHECK_P_RESULT = (1 << SUM_CHECK_P),
 SUM_CHECK_Q_RESULT = (1 << SUM_CHECK_Q),
};






typedef struct { unsigned long bits[(((DMA_TX_TYPE_END) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))]; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} dma_cap_mask_t;







struct dma_chan_percpu {
  template <typename, int = 0> struct __BYPASSdma_chan_percpu {};
  template <typename, int> friend struct __BYPASSdma_chan_percpu;

 unsigned long memcpy_count;
 unsigned long bytes_transferred;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dma_chan {
  template <typename, int = 0> struct __BYPASSdma_chan {};
  template <typename, int> friend struct __BYPASSdma_chan;
 struct dma_device *device;
 dma_cookie_t cookie;
 dma_cookie_t completed_cookie;


 int chan_id;
 struct dma_chan_dev *dev;

 struct list_head device_node;
 struct dma_chan_percpu *local;
 int client_count;
 int table_count;
 void *_private;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dma_chan_dev {
  template <typename, int = 0> struct __BYPASSdma_chan_dev {};
  template <typename, int> friend struct __BYPASSdma_chan_dev;
 struct dma_chan *chan;
 struct device device;
 int dev_id;
 atomic_t *idr_ref;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





enum dma_slave_buswidth {
 DMA_SLAVE_BUSWIDTH_UNDEFINED = 0,
 DMA_SLAVE_BUSWIDTH_1_BYTE = 1,
 DMA_SLAVE_BUSWIDTH_2_BYTES = 2,
 DMA_SLAVE_BUSWIDTH_4_BYTES = 4,
 DMA_SLAVE_BUSWIDTH_8_BYTES = 8,
};
struct dma_slave_config {
  template <typename, int = 0> struct __BYPASSdma_slave_config {};
  template <typename, int> friend struct __BYPASSdma_slave_config;
 enum dma_transfer_direction direction;
 dma_addr_t src_addr;
 dma_addr_t dst_addr;
 enum dma_slave_buswidth src_addr_width;
 enum dma_slave_buswidth dst_addr_width;
 u32 src_maxburst;
 u32 dst_maxburst;
 bool device_fc;
 unsigned int slave_id;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dma_slave_caps {
  template <typename, int = 0> struct __BYPASSdma_slave_caps {};
  template <typename, int> friend struct __BYPASSdma_slave_caps;
 u32 src_addr_widths;
 u32 dstn_addr_widths;
 u32 directions;
 bool cmd_pause;
 bool cmd_terminate;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline char *dma_chan_name(struct dma_chan *chan)
{
 return dev_name(&chan->dev->device);
}

void dma_chan_cleanup(struct kref *kref);
typedef bool (*dma_filter_fn)(struct dma_chan *chan, void *filter_param);

typedef void (*dma_async_tx_callback)(void *dma_async_param);

struct dmaengine_unmap_data {
  template <typename, int = 0> struct __BYPASSdmaengine_unmap_data {};
  template <typename, int> friend struct __BYPASSdmaengine_unmap_data;
 u8 to_cnt;
 u8 from_cnt;
 u8 bidi_cnt;
 struct device *dev;
 struct kref kref;
 size_t len;
 dma_addr_t addr[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dma_async_tx_descriptor {
  template <typename, int = 0> struct __BYPASSdma_async_tx_descriptor {};
  template <typename, int> friend struct __BYPASSdma_async_tx_descriptor;
 dma_cookie_t cookie;
 enum dma_ctrl_flags flags;
 dma_addr_t phys;
 struct dma_chan *chan;
 dma_cookie_t (*tx_submit)(struct dma_async_tx_descriptor *tx);
 dma_async_tx_callback callback;
 void *callback_param;
 struct dmaengine_unmap_data *unmap;






  friend class ::Introspect;
  friend class ::MyIntrospect;
};


static inline void dma_set_unmap(struct dma_async_tx_descriptor *tx,
     struct dmaengine_unmap_data *unmap)
{
 kref_get(&unmap->kref);
 tx->unmap = unmap;
}

struct dmaengine_unmap_data *
dmaengine_get_unmap_data(struct device *dev, int nr, gfp_t flags);
void dmaengine_unmap_put(struct dmaengine_unmap_data *unmap);
static inline void dma_descriptor_unmap(struct dma_async_tx_descriptor *tx)
{
 if (tx->unmap) {
  dmaengine_unmap_put(tx->unmap);
  tx->unmap = 0;
 }
}


static inline void txd_lock(struct dma_async_tx_descriptor *txd)
{
}
static inline void txd_unlock(struct dma_async_tx_descriptor *txd)
{
}
static inline void txd_chain(struct dma_async_tx_descriptor *txd, struct dma_async_tx_descriptor *next)
{
 ;
}
static inline void txd_clear_parent(struct dma_async_tx_descriptor *txd)
{
}
static inline void txd_clear_next(struct dma_async_tx_descriptor *txd)
{
}
static inline struct dma_async_tx_descriptor *txd_next(struct dma_async_tx_descriptor *txd)
{
 return 0;
}
static inline struct dma_async_tx_descriptor *txd_parent(struct dma_async_tx_descriptor *txd)
{
 return 0;
}
struct dma_tx_state {
  template <typename, int = 0> struct __BYPASSdma_tx_state {};
  template <typename, int> friend struct __BYPASSdma_tx_state;
 dma_cookie_t last;
 dma_cookie_t used;
 u32 residue;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dma_device {
  template <typename, int = 0> struct __BYPASSdma_device {};
  template <typename, int> friend struct __BYPASSdma_device;

 unsigned int chancnt;
 unsigned int privatecnt;
 struct list_head channels;
 struct list_head global_node;
 dma_cap_mask_t cap_mask;
 unsigned short max_xor;
 unsigned short max_pq;
 u8 copy_align;
 u8 xor_align;
 u8 pq_align;
 u8 fill_align;


 int dev_id;
 struct device *dev;

 int (*device_alloc_chan_resources)(struct dma_chan *chan);
 void (*device_free_chan_resources)(struct dma_chan *chan);

 struct dma_async_tx_descriptor *(*device_prep_dma_memcpy)(
  struct dma_chan *chan, dma_addr_t dest, dma_addr_t src,
  size_t len, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_xor)(
  struct dma_chan *chan, dma_addr_t dest, dma_addr_t *src,
  unsigned int src_cnt, size_t len, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_xor_val)(
  struct dma_chan *chan, dma_addr_t *src, unsigned int src_cnt,
  size_t len, enum sum_check_flags *result, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_pq)(
  struct dma_chan *chan, dma_addr_t *dst, dma_addr_t *src,
  unsigned int src_cnt, unsigned char *scf,
  size_t len, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_pq_val)(
  struct dma_chan *chan, dma_addr_t *pq, dma_addr_t *src,
  unsigned int src_cnt, unsigned char *scf, size_t len,
  enum sum_check_flags *pqres, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_interrupt)(
  struct dma_chan *chan, unsigned long flags);
 struct dma_async_tx_descriptor *(*device_prep_dma_sg)(
  struct dma_chan *chan,
  struct scatterlist *dst_sg, unsigned int dst_nents,
  struct scatterlist *src_sg, unsigned int src_nents,
  unsigned long flags);

 struct dma_async_tx_descriptor *(*device_prep_slave_sg)(
  struct dma_chan *chan, struct scatterlist *sgl,
  unsigned int sg_len, enum dma_transfer_direction direction,
  unsigned long flags, void *context);
 struct dma_async_tx_descriptor *(*device_prep_dma_cyclic)(
  struct dma_chan *chan, dma_addr_t buf_addr, size_t buf_len,
  size_t period_len, enum dma_transfer_direction direction,
  unsigned long flags, void *context);
 struct dma_async_tx_descriptor *(*device_prep_interleaved_dma)(
  struct dma_chan *chan, struct dma_interleaved_template *xt,
  unsigned long flags);
 int (*device_control)(struct dma_chan *chan, enum dma_ctrl_cmd cmd,
  unsigned long arg);

 enum dma_status (*device_tx_status)(struct dma_chan *chan,
         dma_cookie_t cookie,
         struct dma_tx_state *txstate);
 void (*device_issue_pending)(struct dma_chan *chan);
 int (*device_slave_caps)(struct dma_chan *chan, struct dma_slave_caps *caps);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline int dmaengine_device_control(struct dma_chan *chan,
        enum dma_ctrl_cmd cmd,
        unsigned long arg)
{
 if (chan->device->device_control)
  return chan->device->device_control(chan, cmd, arg);

 return -38;
}

static inline int dmaengine_slave_config(struct dma_chan *chan,
       struct dma_slave_config *config)
{
 return dmaengine_device_control(chan, DMA_SLAVE_CONFIG,
   (unsigned long)config);
}

static inline bool is_slave_direction(enum dma_transfer_direction direction)
{
 return (direction == DMA_MEM_TO_DEV) || (direction == DMA_DEV_TO_MEM);
}

static inline struct dma_async_tx_descriptor *dmaengine_prep_slave_single(
 struct dma_chan *chan, dma_addr_t buf, size_t len,
 enum dma_transfer_direction dir, unsigned long flags)
{
 struct scatterlist sg;
 sg_init_table(&sg, 1);
 ((&sg)->dma_address) = buf;
 ((&sg)->dma_length) = len;

 return chan->device->device_prep_slave_sg(chan, &sg, 1,
        dir, flags, 0);
}

static inline struct dma_async_tx_descriptor *dmaengine_prep_slave_sg(
 struct dma_chan *chan, struct scatterlist *sgl, unsigned int sg_len,
 enum dma_transfer_direction dir, unsigned long flags)
{
 return chan->device->device_prep_slave_sg(chan, sgl, sg_len,
        dir, flags, 0);
}


struct rio_dma_ext;
static inline struct dma_async_tx_descriptor *dmaengine_prep_rio_sg(
 struct dma_chan *chan, struct scatterlist *sgl, unsigned int sg_len,
 enum dma_transfer_direction dir, unsigned long flags,
 struct rio_dma_ext *rio_ext)
{
 return chan->device->device_prep_slave_sg(chan, sgl, sg_len,
        dir, flags, rio_ext);
}


static inline struct dma_async_tx_descriptor *dmaengine_prep_dma_cyclic(
  struct dma_chan *chan, dma_addr_t buf_addr, size_t buf_len,
  size_t period_len, enum dma_transfer_direction dir,
  unsigned long flags)
{
 return chan->device->device_prep_dma_cyclic(chan, buf_addr, buf_len,
      period_len, dir, flags, 0);
}

static inline struct dma_async_tx_descriptor *dmaengine_prep_interleaved_dma(
  struct dma_chan *chan, struct dma_interleaved_template *xt,
  unsigned long flags)
{
 return chan->device->device_prep_interleaved_dma(chan, xt, flags);
}

static inline int dma_get_slave_caps(struct dma_chan *chan, struct dma_slave_caps *caps)
{
 if (!chan || !caps)
  return -22;


 if (!(__builtin_constant_p((DMA_SLAVE)) ? constant_test_bit((DMA_SLAVE), (chan->device->cap_mask.bits)) : variable_test_bit((DMA_SLAVE), (chan->device->cap_mask.bits))))
  return -6;

 if (chan->device->device_slave_caps)
  return chan->device->device_slave_caps(chan, caps);

 return -6;
}

static inline int dmaengine_terminate_all(struct dma_chan *chan)
{
 return dmaengine_device_control(chan, DMA_TERMINATE_ALL, 0);
}

static inline int dmaengine_pause(struct dma_chan *chan)
{
 return dmaengine_device_control(chan, DMA_PAUSE, 0);
}

static inline int dmaengine_resume(struct dma_chan *chan)
{
 return dmaengine_device_control(chan, DMA_RESUME, 0);
}

static inline enum dma_status dmaengine_tx_status(struct dma_chan *chan,
 dma_cookie_t cookie, struct dma_tx_state *state)
{
 return chan->device->device_tx_status(chan, cookie, state);
}

static inline dma_cookie_t dmaengine_submit(struct dma_async_tx_descriptor *desc)
{
 return desc->tx_submit(desc);
}

static inline bool dmaengine_check_align(u8 align, size_t off1, size_t off2, size_t len)
{
 size_t mask;

 if (!align)
  return _true;
 mask = (1 << align) - 1;
 if (mask & (off1 | off2 | len))
  return _false;
 return _true;
}

static inline bool is_dma_copy_aligned(struct dma_device *dev, size_t off1,
           size_t off2, size_t len)
{
 return dmaengine_check_align(dev->copy_align, off1, off2, len);
}

static inline bool is_dma_xor_aligned(struct dma_device *dev, size_t off1,
          size_t off2, size_t len)
{
 return dmaengine_check_align(dev->xor_align, off1, off2, len);
}

static inline bool is_dma_pq_aligned(struct dma_device *dev, size_t off1,
         size_t off2, size_t len)
{
 return dmaengine_check_align(dev->pq_align, off1, off2, len);
}

static inline bool is_dma_fill_aligned(struct dma_device *dev, size_t off1,
           size_t off2, size_t len)
{
 return dmaengine_check_align(dev->fill_align, off1, off2, len);
}

static inline void
dma_set_maxpq(struct dma_device *dma, int maxpq, int has_pq_continue)
{
 dma->max_pq = maxpq;
 if (has_pq_continue)
  dma->max_pq |= (1 << 15);
}

static inline bool dmaf_continue(enum dma_ctrl_flags flags)
{
 return (flags & DMA_PREP_CONTINUE) == DMA_PREP_CONTINUE;
}

static inline bool dmaf_p_disabled_continue(enum dma_ctrl_flags flags)
{
 enum dma_ctrl_flags mask = DMA_PREP_CONTINUE | DMA_PREP_PQ_DISABLE_P;

 return (flags & mask) == mask;
}

static inline bool dma_dev_has_pq_continue(struct dma_device *dma)
{
 return (dma->max_pq & (1 << 15)) == (1 << 15);
}

static inline unsigned short dma_dev_to_maxpq(struct dma_device *dma)
{
 return dma->max_pq & ~(1 << 15);
}
static inline int dma_maxpq(struct dma_device *dma, enum dma_ctrl_flags flags)
{
 if (dma_dev_has_pq_continue(dma) || !dmaf_continue(flags))
  return dma_dev_to_maxpq(dma);
 else if (dmaf_p_disabled_continue(flags))
  return dma_dev_to_maxpq(dma) - 1;
 else if (dmaf_continue(flags))
  return dma_dev_to_maxpq(dma) - 3;
 ;
}




void dmaengine_get(void);
void dmaengine_put(void);
static inline void net_dmaengine_get(void)
{
}
static inline void net_dmaengine_put(void)
{
}
static inline void async_dmaengine_get(void)
{
}
static inline void async_dmaengine_put(void)
{
}
static inline struct dma_chan *
async_dma_find_channel(enum dma_transaction_type type)
{
 return 0;
}


dma_cookie_t dma_async_memcpy_buf_to_buf(struct dma_chan *chan,
 void *dest, void *src, size_t len);
dma_cookie_t dma_async_memcpy_buf_to_pg(struct dma_chan *chan,
 struct page *page, unsigned int offset, void *kdata, size_t len);
dma_cookie_t dma_async_memcpy_pg_to_pg(struct dma_chan *chan,
 struct page *dest_pg, unsigned int dest_off, struct page *src_pg,
 unsigned int src_off, size_t len);
void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *tx,
 struct dma_chan *chan);

static inline void async_tx_ack(struct dma_async_tx_descriptor *tx)
{
 tx->flags |= DMA_CTRL_ACK;
}

static inline void async_tx_clear_ack(struct dma_async_tx_descriptor *tx)
{
 tx->flags &= ~DMA_CTRL_ACK;
}

static inline bool async_tx_test_ack(struct dma_async_tx_descriptor *tx)
{
 return (tx->flags & DMA_CTRL_ACK) == DMA_CTRL_ACK;
}


static inline void
__dma_cap_set(enum dma_transaction_type tx_type, dma_cap_mask_t *dstp)
{
 set_bit(tx_type, dstp->bits);
}


static inline void
__dma_cap_clear(enum dma_transaction_type tx_type, dma_cap_mask_t *dstp)
{
 clear_bit(tx_type, dstp->bits);
}


static inline void __dma_cap_zero(dma_cap_mask_t *dstp)
{
 bitmap_zero(dstp->bits, DMA_TX_TYPE_END);
}


static inline int
__dma_has_cap(enum dma_transaction_type tx_type, dma_cap_mask_t *srcp)
{
 return (__builtin_constant_p((tx_type)) ? constant_test_bit((tx_type), (srcp->bits)) : variable_test_bit((tx_type), (srcp->bits)));
}
static inline void dma_async_issue_pending(struct dma_chan *chan)
{
 chan->device->device_issue_pending(chan);
}
static inline enum dma_status dma_async_is_tx_complete(struct dma_chan *chan,
 dma_cookie_t cookie, dma_cookie_t *last, dma_cookie_t *used)
{
 struct dma_tx_state state;
 enum dma_status status;

 status = chan->device->device_tx_status(chan, cookie, &state);
 if (last)
  *last = state.last;
 if (used)
  *used = state.used;
 return status;
}
static inline enum dma_status dma_async_is_complete(dma_cookie_t cookie,
   dma_cookie_t last_complete, dma_cookie_t last_used)
{
 if (last_complete <= last_used) {
  if ((cookie <= last_complete) || (cookie > last_used))
   return DMA_COMPLETE;
 } else {
  if ((cookie <= last_complete) && (cookie > last_used))
   return DMA_COMPLETE;
 }
 return DMA_IN_PROGRESS;
}

static inline void
dma_set_tx_state(struct dma_tx_state *st, dma_cookie_t last, dma_cookie_t used, u32 residue)
{
 if (st) {
  st->last = last;
  st->used = used;
  st->residue = residue;
 }
}


struct dma_chan *dma_find_channel(enum dma_transaction_type tx_type);
enum dma_status dma_sync_wait(struct dma_chan *chan, dma_cookie_t cookie);
enum dma_status dma_wait_for_async_tx(struct dma_async_tx_descriptor *tx);
void dma_issue_pending_all(void);
struct dma_chan *__dma_request_channel( dma_cap_mask_t *mask,
     dma_filter_fn fn, void *fn_param);
struct dma_chan *dma_request_slave_channel(struct device *dev, char *name);
void dma_release_channel(struct dma_chan *chan);
int dma_async_device_register(struct dma_device *device);
void dma_async_device_unregister(struct dma_device *device);
void dma_run_dependencies(struct dma_async_tx_descriptor *tx);
struct dma_chan *dma_get_slave_channel(struct dma_chan *chan);
struct dma_chan *net_dma_find_channel(void);




static inline struct dma_chan
*__dma_request_slave_channel_compat( dma_cap_mask_t *mask,
      dma_filter_fn fn, void *fn_param,
      struct device *dev, char *name)
{
 struct dma_chan *chan;

 chan = dma_request_slave_channel(dev, name);
 if (chan)
  return chan;

 return __dma_request_channel(mask, fn, fn_param);
}



struct dma_page_list {
  template <typename, int = 0> struct __BYPASSdma_page_list {};
  template <typename, int> friend struct __BYPASSdma_page_list;
 char *base_address;
 int nr_pages;
 struct page **pages;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dma_pinned_list {
  template <typename, int = 0> struct __BYPASSdma_pinned_list {};
  template <typename, int> friend struct __BYPASSdma_pinned_list;
 int nr_iovecs;
 struct dma_page_list page_list[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dma_pinned_list *dma_pin_iovec_pages(struct iovec *iov, size_t len);
void dma_unpin_iovec_pages(struct dma_pinned_list* pinned_list);

dma_cookie_t dma_memcpy_to_iovec(struct dma_chan *chan, struct iovec *iov,
 struct dma_pinned_list *pinned_list, unsigned char *kdata, size_t len);
dma_cookie_t dma_memcpy_pg_to_iovec(struct dma_chan *chan, struct iovec *iov,
 struct dma_pinned_list *pinned_list, struct page *page,
 unsigned int offset, size_t len);

struct dql {
  template <typename, int = 0> struct __BYPASSdql {};
  template <typename, int> friend struct __BYPASSdql;

 unsigned int num_queued;
 unsigned int adj_limit;
 unsigned int last_obj_cnt;



 unsigned int limit __attribute__((__aligned__((1 << (6)))));
 unsigned int num_completed;

 unsigned int prev_ovlimit;
 unsigned int prev_num_queued;
 unsigned int prev_last_obj_cnt;

 unsigned int lowest_slack;
 unsigned long slack_start_time;


 unsigned int max_limit;
 unsigned int min_limit;
 unsigned int slack_hold_time;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void dql_queued(struct dql *dql, unsigned int count)
{
 (count > ((~0U) / 16));

 dql->num_queued += count;
 dql->last_obj_cnt = count;
}


static inline int dql_avail( struct dql *dql)
{
 return dql->adj_limit - dql->num_queued;
}


void dql_completed(struct dql *dql, unsigned int count);


void dql_reset(struct dql *dql);


int dql_init(struct dql *dql, unsigned hold_time);















struct ipc_perm
{
  template <typename, int = 0> struct __BYPASSipc_perm {};
  template <typename, int> friend struct __BYPASSipc_perm;
 __kernel_key_t key;
 __kernel_uid_t uid;
 __kernel_gid_t gid;
 __kernel_uid_t cuid;
 __kernel_gid_t cgid;
 __kernel_mode_t mode;
 unsigned short seq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ipc64_perm {
  template <typename, int = 0> struct __BYPASSipc64_perm {};
  template <typename, int> friend struct __BYPASSipc64_perm;
 __kernel_key_t key;
 __kernel_uid32_t uid;
 __kernel_gid32_t gid;
 __kernel_uid32_t cuid;
 __kernel_gid32_t cgid;
 __kernel_mode_t mode;

 unsigned char __pad1[4 - sizeof(__kernel_mode_t)];
 unsigned short seq;
 unsigned short __pad2;
 unsigned long __unused1;
 unsigned long __unused2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ipc_kludge {
  template <typename, int = 0> struct __BYPASSipc_kludge {};
  template <typename, int> friend struct __BYPASSipc_kludge;
 struct msgbuf *msgp;
 long msgtyp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct kern_ipc_perm
{
  template <typename, int = 0> struct __BYPASSkern_ipc_perm {};
  template <typename, int> friend struct __BYPASSkern_ipc_perm;
 spinlock_t lock;
 int deleted;
 int id;
 key_t key;
 kuid_t uid;
 kgid_t gid;
 kuid_t cuid;
 kgid_t cgid;
 umode_t mode;
 unsigned long seq;
 void *security;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct semid_ds {
  template <typename, int = 0> struct __BYPASSsemid_ds {};
  template <typename, int> friend struct __BYPASSsemid_ds;
 struct ipc_perm sem_perm;
 __kernel_time_t sem_otime;
 __kernel_time_t sem_ctime;
 struct sem *sem_base;
 struct sem_queue *sem_pending;
 struct sem_queue **sem_pending_last;
 struct sem_undo *undo;
 unsigned short sem_nsems;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct semid64_ds {
  template <typename, int = 0> struct __BYPASSsemid64_ds {};
  template <typename, int> friend struct __BYPASSsemid64_ds;
 struct ipc64_perm sem_perm;
 __kernel_time_t sem_otime;
 unsigned long __unused1;
 __kernel_time_t sem_ctime;
 unsigned long __unused2;
 unsigned long sem_nsems;
 unsigned long __unused3;
 unsigned long __unused4;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sembuf {
  template <typename, int = 0> struct __BYPASSsembuf {};
  template <typename, int> friend struct __BYPASSsembuf;
 unsigned short sem_num;
 short sem_op;
 short sem_flg;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


union semun {
 int val;
 struct semid_ds *buf;
 unsigned short *array;
 struct seminfo *__buf;
 void *__pad;
};

struct seminfo {
  template <typename, int = 0> struct __BYPASSseminfo {};
  template <typename, int> friend struct __BYPASSseminfo;
 int semmap;
 int semmni;
 int semmns;
 int semmnu;
 int semmsl;
 int semopm;
 int semume;
 int semusz;
 int semvmx;
 int semaem;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct task_struct;


struct sem_array {
  template <typename, int = 0> struct __BYPASSsem_array {};
  template <typename, int> friend struct __BYPASSsem_array;
 struct kern_ipc_perm __attribute__((__aligned__((1 << (6)))))
    sem_perm;
 time_t sem_ctime;
 struct sem *sem_base;
 struct list_head pending_alter;

 struct list_head pending_const;

 struct list_head list_id;
 int sem_nsems;
 int complex_count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct sysv_sem {
  template <typename, int = 0> struct __BYPASSsysv_sem {};
  template <typename, int> friend struct __BYPASSsysv_sem;
 struct sem_undo_list *undo_list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int copy_semundo(unsigned long clone_flags, struct task_struct *tsk);
extern void exit_sem(struct task_struct *tsk);

typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} sync_serial_settings;

typedef struct {
 unsigned int clock_rate;
 unsigned int clock_type;
 unsigned short loopback;
 unsigned int slot_map;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} te1_settings;

typedef struct {
 unsigned short encoding;
 unsigned short parity;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} raw_hdlc_proto;

typedef struct {
 unsigned int t391;
 unsigned int t392;
 unsigned int n391;
 unsigned int n392;
 unsigned int n393;
 unsigned short lmi;
 unsigned short dce;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fr_proto;

typedef struct {
 unsigned int dlci;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fr_proto_pvc;

typedef struct {
 unsigned int dlci;
 char master[16];

  friend class ::Introspect;
  friend class ::MyIntrospect;
}fr_proto_pvc_info;

typedef struct {
    unsigned int interval;
    unsigned int timeout;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} cisco_proto;
enum {
 IF_OPER_UNKNOWN,
 IF_OPER_NOTPRESENT,
 IF_OPER_DOWN,
 IF_OPER_LOWERLAYERDOWN,
 IF_OPER_TESTING,
 IF_OPER_DORMANT,
 IF_OPER_UP,
};


enum {
 IF_LINK_MODE_DEFAULT,
 IF_LINK_MODE_DORMANT,
};
struct ifmap {
  template <typename, int = 0> struct __BYPASSifmap {};
  template <typename, int> friend struct __BYPASSifmap;
 unsigned long mem_start;
 unsigned long mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct if_settings {
  template <typename, int = 0> struct __BYPASSif_settings {};
  template <typename, int> friend struct __BYPASSif_settings;
 unsigned int type;
 unsigned int size;
 union {

  raw_hdlc_proto *raw_hdlc;
  cisco_proto *cisco;
  fr_proto *fr;
  fr_proto_pvc *fr_pvc;
  fr_proto_pvc_info *fr_pvc_info;


  sync_serial_settings *sync;
  te1_settings *te1;
 } ifs_ifsu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ifreq {
  template <typename, int = 0> struct __BYPASSifreq {};
  template <typename, int> friend struct __BYPASSifreq;

 union
 {
  char ifrn_name[16];
 } ifr_ifrn;

 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  int ifru_ivalue;
  int ifru_mtu;
  struct ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  void * ifru_data;
  struct if_settings ifru_settings;
 } ifr_ifru;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ifconf {
  template <typename, int = 0> struct __BYPASSifconf {};
  template <typename, int> friend struct __BYPASSifconf;
 int ifc_len;
 union {
  char *ifcu_buf;
  struct ifreq *ifcu_req;
 } ifc_ifcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef __kernel_ulong_t aio_context_t;

enum {
 IOCB_CMD_PREAD = 0,
 IOCB_CMD_PWRITE = 1,
 IOCB_CMD_FSYNC = 2,
 IOCB_CMD_FDSYNC = 3,




 IOCB_CMD_NOOP = 6,
 IOCB_CMD_PREADV = 7,
 IOCB_CMD_PWRITEV = 8,
};
struct io_event {
  template <typename, int = 0> struct __BYPASSio_event {};
  template <typename, int> friend struct __BYPASSio_event;
 __u64 data;
 __u64 obj;
 __s64 res;
 __s64 res2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iocb {
  template <typename, int = 0> struct __BYPASSiocb {};
  template <typename, int> friend struct __BYPASSiocb;

 __u64 aio_data;
 __u32 aio_key, aio_reserved1;



 __u16 aio_lio_opcode;
 __s16 aio_reqprio;
 __u32 aio_fildes;

 __u64 aio_buf;
 __u64 aio_nbytes;
 __s64 aio_offset;


 __u64 aio_reserved2;


 __u32 aio_flags;





 __u32 aio_resfd;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};













struct sched_param {
  template <typename, int = 0> struct __BYPASSsched_param {};
  template <typename, int> friend struct __BYPASSsched_param;
 int sched_priority;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef u64 cputime_t;
typedef u64 cputime64_t;
static inline cputime_t timespec_to_cputime( struct timespec *val)
{
 u64 ret = val->tv_sec * 1000000000L + val->tv_nsec;
 return ( cputime_t) ret;
}
static inline void cputime_to_timespec( cputime_t ct, struct timespec *val)
{
 u32 rem;

 val->tv_sec = div_u64_rem(( u64)ct, 1000000000L, &rem);;
 val->tv_nsec = rem;
}




static inline cputime_t timeval_to_cputime( struct timeval *val)
{
 u64 ret = val->tv_sec * 1000000000L + val->tv_usec * 1000L;
 return ( cputime_t) ret;
}
static inline void cputime_to_timeval( cputime_t ct, struct timeval *val)
{
 u32 rem;

 val->tv_sec = div_u64_rem(( u64)ct, 1000000000L, &rem);;
 val->tv_usec = rem / 1000L;
}










typedef unsigned long old_sigset_t;

typedef struct {
 unsigned long sig[(64 / 64)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} sigset_t;






struct siginfo;
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
typedef struct sigaltstack {
  template <typename, int = 0> struct __BYPASSsigaltstack {};
  template <typename, int> friend struct __BYPASSsigaltstack;
 void *ss_sp;
 int ss_flags;
 size_t ss_size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} stack_t;

extern void do_notify_resume(struct pt_regs *, void *, __u32);









typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
typedef struct siginfo {
  template <typename, int = 0> struct __BYPASSsiginfo {};
  template <typename, int> friend struct __BYPASSsiginfo;
 int si_signo;
 int si_errno;
 int si_code;

 union {
  int _pad[((128 - (4 * sizeof(int))) / sizeof(int))];


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _kill;


  struct {
   __kernel_timer_t _tid;
   int _overrun;
   char _pad[sizeof( __kernel_uid32_t) - sizeof(int)];
   sigval_t _sigval;
   int _sys_private;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _timer;


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
   sigval_t _sigval;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _rt;


  struct {
   __kernel_pid_t _pid;
   __kernel_uid32_t _uid;
   int _status;
   __kernel_clock_t _utime;
   __kernel_clock_t _stime;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigchld;


  struct {
   void *_addr;



   short _addr_lsb;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigfault;


  struct {
   long _band;
   int _fd;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigpoll;


  struct {
   void *_call_addr;
   int _syscall;
   unsigned int _arch;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigsys;
 } _sifields;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} siginfo_t;
typedef struct sigevent {
  template <typename, int = 0> struct __BYPASSsigevent {};
  template <typename, int> friend struct __BYPASSsigevent;
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
  int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
   int _tid;

  struct {
   void (*_function)(sigval_t);
   void *_attribute;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigev_thread;
 } _sigev_un;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} sigevent_t;
struct siginfo;
void do_schedule_next_timer(struct siginfo *info);





static inline void copy_siginfo(struct siginfo *to, struct siginfo *from)
{
 if (from->si_code < 0)
  memcpy(to, from, sizeof(*to));
 else

  memcpy(to, from, (4 * sizeof(int)) + sizeof(from->_sifields._sigchld));
}



extern int copy_siginfo_to_user(struct siginfo *to, struct siginfo *from);

struct task_struct;


extern int print_fatal_signals;




struct sigqueue {
  template <typename, int = 0> struct __BYPASSsigqueue {};
  template <typename, int> friend struct __BYPASSsigqueue;
 struct list_head list;
 int flags;
 siginfo_t info;
 struct user_struct *user;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct sigpending {
  template <typename, int = 0> struct __BYPASSsigpending {};
  template <typename, int> friend struct __BYPASSsigpending;
 struct list_head list;
 sigset_t signal;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void sigaddset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] |= 1UL << sig;
 else
  set->sig[sig / 64] |= 1UL << (sig % 64);
}

static inline void sigdelset(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  set->sig[0] &= ~(1UL << sig);
 else
  set->sig[sig / 64] &= ~(1UL << (sig % 64));
}

static inline int sigismember(sigset_t *set, int _sig)
{
 unsigned long sig = _sig - 1;
 if ((64 / 64) == 1)
  return 1 & (set->sig[0] >> sig);
 else
  return 1 & (set->sig[sig / 64] >> (sig % 64));
}

static inline int sigfindinword(unsigned long word)
{
 return ffz(~word);
}



static inline int sigisemptyset(sigset_t *set)
{
 extern void _NSIG_WORDS_is_unsupported_size(void);
 switch ((64 / 64)) {
 case 4:
  return (set->sig[3] | set->sig[2] |
   set->sig[1] | set->sig[0]) == 0;
 case 2:
  return (set->sig[1] | set->sig[0]) == 0;
 case 1:
  return set->sig[0] == 0;
 default:
  _NSIG_WORDS_is_unsupported_size();
  return 0;
 }
}
static inline void sigorsets(sigset_t *r, sigset_t *a, sigset_t *b) { extern void _NSIG_WORDS_is_unsupported_size(void); unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) | (b3)); r->sig[2] = ((a2) | (b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) | (b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) | (b0)); break; default: _NSIG_WORDS_is_unsupported_size(); } }


static inline void sigandsets(sigset_t *r, sigset_t *a, sigset_t *b) { extern void _NSIG_WORDS_is_unsupported_size(void); unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & (b3)); r->sig[2] = ((a2) & (b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & (b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & (b0)); break; default: _NSIG_WORDS_is_unsupported_size(); } }


static inline void sigandnsets(sigset_t *r, sigset_t *a, sigset_t *b) { extern void _NSIG_WORDS_is_unsupported_size(void); unsigned long a0, a1, a2, a3, b0, b1, b2, b3; switch ((64 / 64)) { case 4: a3 = a->sig[3]; a2 = a->sig[2]; b3 = b->sig[3]; b2 = b->sig[2]; r->sig[3] = ((a3) & ~(b3)); r->sig[2] = ((a2) & ~(b2)); case 2: a1 = a->sig[1]; b1 = b->sig[1]; r->sig[1] = ((a1) & ~(b1)); case 1: a0 = a->sig[0]; b0 = b->sig[0]; r->sig[0] = ((a0) & ~(b0)); break; default: _NSIG_WORDS_is_unsupported_size(); } }
static inline void signotset(sigset_t *set) { extern void _NSIG_WORDS_is_unsupported_size(void); switch ((64 / 64)) { case 4: set->sig[3] = (~(set->sig[3])); set->sig[2] = (~(set->sig[2])); case 2: set->sig[1] = (~(set->sig[1])); case 1: set->sig[0] = (~(set->sig[0])); break; default: _NSIG_WORDS_is_unsupported_size(); } }




static inline void sigemptyset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, 0, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = 0;
 case 1: set->sig[0] = 0;
  break;
 }
}

static inline void sigfillset(sigset_t *set)
{
 switch ((64 / 64)) {
 default:
  memset(set, -1, sizeof(sigset_t));
  break;
 case 2: set->sig[1] = -1;
 case 1: set->sig[0] = -1;
  break;
 }
}



static inline void sigaddsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] |= mask;
}

static inline void sigdelsetmask(sigset_t *set, unsigned long mask)
{
 set->sig[0] &= ~mask;
}

static inline int sigtestsetmask(sigset_t *set, unsigned long mask)
{
 return (set->sig[0] & mask) != 0;
}

static inline void siginitset(sigset_t *set, unsigned long mask)
{
 set->sig[0] = mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], 0, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = 0;
 case 1: ;
 }
}

static inline void siginitsetinv(sigset_t *set, unsigned long mask)
{
 set->sig[0] = ~mask;
 switch ((64 / 64)) {
 default:
  memset(&set->sig[1], -1, sizeof(long)*((64 / 64)-1));
  break;
 case 2: set->sig[1] = -1;
 case 1: ;
 }
}



static inline void init_sigpending(struct sigpending *sig)
{
 sigemptyset(&sig->signal);
 INIT_LIST_HEAD(&sig->list);
}

extern void flush_sigqueue(struct sigpending *queue);


static inline int valid_signal(unsigned long sig)
{
 return sig <= 64 ? 1 : 0;
}

struct timespec;
struct pt_regs;

extern int next_signal(struct sigpending *pending, sigset_t *mask);
extern int do_send_sig_info(int sig, struct siginfo *info,
    struct task_struct *p, bool group);
extern int group_send_sig_info(int sig, struct siginfo *info, struct task_struct *p);
extern int __group_send_sig_info(int, struct siginfo *, struct task_struct *);
extern int do_sigtimedwait( sigset_t *, siginfo_t *,
    struct timespec *);
extern int sigprocmask(int, sigset_t *, sigset_t *);
extern void set_current_blocked(sigset_t *);
extern void __set_current_blocked( sigset_t *);
extern int show_unhandled_signals;
extern int sigsuspend(sigset_t *);

struct sigaction {
  template <typename, int = 0> struct __BYPASSsigaction {};
  template <typename, int> friend struct __BYPASSsigaction;

 __sighandler_t sa_handler;
 unsigned long sa_flags;





 __sigrestore_t sa_restorer;

 sigset_t sa_mask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct k_sigaction {
  template <typename, int = 0> struct __BYPASSk_sigaction {};
  template <typename, int> friend struct __BYPASSk_sigaction;
 struct sigaction sa;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ksignal {
  template <typename, int = 0> struct __BYPASSksignal {};
  template <typename, int> friend struct __BYPASSksignal;
 struct k_sigaction ka;
 siginfo_t info;
 int sig;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int get_signal_to_deliver(siginfo_t *info, struct k_sigaction *return_ka, struct pt_regs *regs, void *cookie);
extern void signal_setup_done(int failed, struct ksignal *ksig, int stepping);
extern void signal_delivered(int sig, siginfo_t *info, struct k_sigaction *ka, struct pt_regs *regs, int stepping);
extern void exit_signals(struct task_struct *tsk);
extern struct kmem_cache *sighand_cachep;

int unhandled_signal(struct task_struct *tsk, int sig);
void signals_init(void);

int restore_altstack( stack_t *);
int __save_altstack(stack_t *, unsigned long);
struct seq_file;
extern void render_sigset_t(struct seq_file *, char *, sigset_t *);





struct prop_global {
  template <typename, int = 0> struct __BYPASSprop_global {};
  template <typename, int> friend struct __BYPASSprop_global;





 int shift;






 struct percpu_counter events;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct prop_descriptor {
  template <typename, int = 0> struct __BYPASSprop_descriptor {};
  template <typename, int> friend struct __BYPASSprop_descriptor;
 int index;
 struct prop_global pg[2];
 struct mutex mutex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int prop_descriptor_init(struct prop_descriptor *pd, int shift);
void prop_change_shift(struct prop_descriptor *pd, int new_shift);





struct prop_local_percpu {
  template <typename, int = 0> struct __BYPASSprop_local_percpu {};
  template <typename, int> friend struct __BYPASSprop_local_percpu;



 struct percpu_counter events;




 int shift;
 unsigned long period;
 raw_spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int prop_local_init_percpu(struct prop_local_percpu *pl);
void prop_local_destroy_percpu(struct prop_local_percpu *pl);
void __prop_inc_percpu(struct prop_descriptor *pd, struct prop_local_percpu *pl);
void prop_fraction_percpu(struct prop_descriptor *pd, struct prop_local_percpu *pl,
  long *numerator, long *denominator);

static inline
void prop_inc_percpu(struct prop_descriptor *pd, struct prop_local_percpu *pl)
{
 unsigned long flags;

 ;
 __prop_inc_percpu(pd, pl);
 ;
}
void __prop_inc_percpu_max(struct prop_descriptor *pd,
      struct prop_local_percpu *pl, long frac);






struct prop_local_single {
  template <typename, int = 0> struct __BYPASSprop_local_single {};
  template <typename, int> friend struct __BYPASSprop_local_single;



 unsigned long events;





 unsigned long period;
 int shift;
 raw_spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





int prop_local_init_single(struct prop_local_single *pl);
void prop_local_destroy_single(struct prop_local_single *pl);
void __prop_inc_single(struct prop_descriptor *pd, struct prop_local_single *pl);
void prop_fraction_single(struct prop_descriptor *pd, struct prop_local_single *pl,
  long *numerator, long *denominator);

static inline
void prop_inc_single(struct prop_descriptor *pd, struct prop_local_single *pl)
{
 unsigned long flags;

 ;
 __prop_inc_single(pd, pl);
 ;
}



struct seccomp_data {
  template <typename, int = 0> struct __BYPASSseccomp_data {};
  template <typename, int> friend struct __BYPASSseccomp_data;
 int nr;
 __u32 arch;
 __u64 instruction_pointer;
 __u64 args[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




















struct seccomp_filter;
struct seccomp {
  template <typename, int = 0> struct __BYPASSseccomp {};
  template <typename, int> friend struct __BYPASSseccomp;
 int mode;
 struct seccomp_filter *filter;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int __secure_computing(int);
static inline int secure_computing(int this_syscall)
{
 if (__builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 8)), 0))
  return __secure_computing(this_syscall);
 return 0;
}


static inline void secure_computing_strict(int this_syscall)
{
 (secure_computing(this_syscall) != 0);
}

extern long prctl_get_seccomp(void);
extern long prctl_set_seccomp(unsigned long, char *);

static inline int seccomp_mode(struct seccomp *s)
{
 return s->mode;
}
extern void put_seccomp_filter(struct task_struct *tsk);
extern void get_seccomp_filter(struct task_struct *tsk);
extern u32 seccomp_bpf_load(int off);


extern int max_lock_depth;
struct rt_mutex {
  template <typename, int = 0> struct __BYPASSrt_mutex {};
  template <typename, int> friend struct __BYPASSrt_mutex;
 raw_spinlock_t wait_lock;
 struct plist_head wait_list;
 struct task_struct *owner;







  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rt_mutex_waiter;
struct hrtimer_sleeper;






 static inline int rt_mutex_debug_check_no_locks_freed( void *from,
             unsigned long len)
 {
 return 0;
 }
static inline int rt_mutex_is_locked(struct rt_mutex *lock)
{
 return lock->owner != 0;
}

extern void __rt_mutex_init(struct rt_mutex *lock, char *name);
extern void rt_mutex_destroy(struct rt_mutex *lock);

extern void rt_mutex_lock(struct rt_mutex *lock);
extern int rt_mutex_lock_interruptible(struct rt_mutex *lock,
      int detect_deadlock);
extern int rt_mutex_timed_lock(struct rt_mutex *lock,
     struct hrtimer_sleeper *timeout,
     int detect_deadlock);

extern int rt_mutex_trylock(struct rt_mutex *lock);

extern void rt_mutex_unlock(struct rt_mutex *lock);






struct rusage {
  template <typename, int = 0> struct __BYPASSrusage {};
  template <typename, int> friend struct __BYPASSrusage;
 struct timeval ru_utime;
 struct timeval ru_stime;
 long ru_maxrss;
 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rlimit {
  template <typename, int = 0> struct __BYPASSrlimit {};
  template <typename, int> friend struct __BYPASSrlimit;
 unsigned long rlim_cur;
 unsigned long rlim_max;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct rlimit64 {
  template <typename, int = 0> struct __BYPASSrlimit64 {};
  template <typename, int> friend struct __BYPASSrlimit64;
 __u64 rlim_cur;
 __u64 rlim_max;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct task_struct;

int getrusage(struct task_struct *p, int who, struct rusage *ru);
int do_prlimit(struct task_struct *tsk, unsigned int resource,
  struct rlimit *new_rlim, struct rlimit *old_rlim);


struct task_io_accounting {
  template <typename, int = 0> struct __BYPASStask_io_accounting {};
  template <typename, int> friend struct __BYPASStask_io_accounting;


 u64 rchar;

 u64 wchar;

 u64 syscr;

 u64 syscw;







 u64 read_bytes;





 u64 write_bytes;
 u64 cancelled_write_bytes;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct task_struct;






struct latency_record {
  template <typename, int = 0> struct __BYPASSlatency_record {};
  template <typename, int> friend struct __BYPASSlatency_record;
 unsigned long backtrace[12];
 unsigned int count;
 unsigned long time;
 unsigned long max;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



extern int latencytop_enabled;
void __account_scheduler_latency(struct task_struct *task, int usecs, int inter);
static inline void
account_scheduler_latency(struct task_struct *task, int usecs, int inter)
{
 if (__builtin_expect(!!(latencytop_enabled), 0))
  __account_scheduler_latency(task, usecs, inter);
}

void clear_all_latency_tracing(struct task_struct *p);
struct completion;






struct __sysctl_args {
  template <typename, int = 0> struct __BYPASS__sysctl_args {};
  template <typename, int> friend struct __BYPASS__sysctl_args;
 int *name;
 int nlen;
 void *oldval;
 size_t *oldlenp;
 void *newval;
 size_t newlen;
 unsigned long __unused[4];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





enum
{
 CTL_KERN=1,
 CTL_VM=2,
 CTL_NET=3,
 CTL_PROC=4,
 CTL_FS=5,
 CTL_DEBUG=6,
 CTL_DEV=7,
 CTL_BUS=8,
 CTL_ABI=9,
 CTL_CPU=10,
 CTL_ARLAN=254,
 CTL_S390DBF=5677,
 CTL_SUNRPC=7249,
 CTL_PM=9899,
 CTL_FRV=9898,
};


enum
{
 CTL_BUS_ISA=1
};


enum
{
 INOTIFY_MAX_USER_INSTANCES=1,
 INOTIFY_MAX_USER_WATCHES=2,
 INOTIFY_MAX_QUEUED_EVENTS=3
};


enum
{
 KERN_OSTYPE=1,
 KERN_OSRELEASE=2,
 KERN_OSREV=3,
 KERN_VERSION=4,
 KERN_SECUREMASK=5,
 KERN_PROF=6,
 KERN_NODENAME=7,
 KERN_DOMAINNAME=8,

 KERN_PANIC=15,
 KERN_REALROOTDEV=16,

 KERN_SPARC_REBOOT=21,
 KERN_CTLALTDEL=22,
 KERN_PRINTK=23,
 KERN_NAMETRANS=24,
 KERN_PPC_HTABRECLAIM=25,
 KERN_PPC_ZEROPAGED=26,
 KERN_PPC_POWERSAVE_NAP=27,
 KERN_MODPROBE=28,
 KERN_SG_BIG_BUFF=29,
 KERN_ACCT=30,
 KERN_PPC_L2CR=31,

 KERN_RTSIGNR=32,
 KERN_RTSIGMAX=33,

 KERN_SHMMAX=34,
 KERN_MSGMAX=35,
 KERN_MSGMNB=36,
 KERN_MSGPOOL=37,
 KERN_SYSRQ=38,
 KERN_MAX_THREADS=39,
  KERN_RANDOM=40,
  KERN_SHMALL=41,
  KERN_MSGMNI=42,
  KERN_SEM=43,
  KERN_SPARC_STOP_A=44,
  KERN_SHMMNI=45,
 KERN_OVERFLOWUID=46,
 KERN_OVERFLOWGID=47,
 KERN_SHMPATH=48,
 KERN_HOTPLUG=49,
 KERN_IEEE_EMULATION_WARNINGS=50,
 KERN_S390_USER_DEBUG_LOGGING=51,
 KERN_CORE_USES_PID=52,
 KERN_TAINTED=53,
 KERN_CADPID=54,
 KERN_PIDMAX=55,
   KERN_CORE_PATTERN=56,
 KERN_PANIC_ON_OOPS=57,
 KERN_HPPA_PWRSW=58,
 KERN_HPPA_UNALIGNED=59,
 KERN_PRINTK_RATELIMIT=60,
 KERN_PRINTK_RATELIMIT_BURST=61,
 KERN_PTY=62,
 KERN_NGROUPS_MAX=63,
 KERN_SPARC_SCONS_PWROFF=64,
 KERN_HZ_TIMER=65,
 KERN_UNKNOWN_NMI_PANIC=66,
 KERN_BOOTLOADER_TYPE=67,
 KERN_RANDOMIZE=68,
 KERN_SETUID_DUMPABLE=69,
 KERN_SPIN_RETRY=70,
 KERN_ACPI_VIDEO_FLAGS=71,
 KERN_IA64_UNALIGNED=72,
 KERN_COMPAT_LOG=73,
 KERN_MAX_LOCK_DEPTH=74,
 KERN_NMI_WATCHDOG=75,
 KERN_PANIC_ON_NMI=76,
};




enum
{
 VM_UNUSED1=1,
 VM_UNUSED2=2,
 VM_UNUSED3=3,
 VM_UNUSED4=4,
 VM_OVERCOMMIT_MEMORY=5,
 VM_UNUSED5=6,
 VM_UNUSED7=7,
 VM_UNUSED8=8,
 VM_UNUSED9=9,
 VM_PAGE_CLUSTER=10,
 VM_DIRTY_BACKGROUND=11,
 VM_DIRTY_RATIO=12,
 VM_DIRTY_WB_CS=13,
 VM_DIRTY_EXPIRE_CS=14,
 VM_NR_PDFLUSH_THREADS=15,
 VM_OVERCOMMIT_RATIO=16,
 VM_PAGEBUF=17,
 VM_HUGETLB_PAGES=18,
 VM_SWAPPINESS=19,
 VM_LOWMEM_RESERVE_RATIO=20,
 VM_MIN_FREE_KBYTES=21,
 VM_MAX_MAP_COUNT=22,
 VM_LAPTOP_MODE=23,
 VM_BLOCK_DUMP=24,
 VM_HUGETLB_GROUP=25,
 VM_VFS_CACHE_PRESSURE=26,
 VM_LEGACY_VA_LAYOUT=27,
 VM_SWAP_TOKEN_TIMEOUT=28,
 VM_DROP_PAGECACHE=29,
 VM_PERCPU_PAGELIST_FRACTION=30,
 VM_ZONE_RECLAIM_MODE=31,
 VM_MIN_UNMAPPED=32,
 VM_PANIC_ON_OOM=33,
 VM_VDSO_ENABLED=34,
 VM_MIN_SLAB=35,
};



enum
{
 NET_CORE=1,
 NET_ETHER=2,
 NET_802=3,
 NET_UNIX=4,
 NET_IPV4=5,
 NET_IPX=6,
 NET_ATALK=7,
 NET_NETROM=8,
 NET_AX25=9,
 NET_BRIDGE=10,
 NET_ROSE=11,
 NET_IPV6=12,
 NET_X25=13,
 NET_TR=14,
 NET_DECNET=15,
 NET_ECONET=16,
 NET_SCTP=17,
 NET_LLC=18,
 NET_NETFILTER=19,
 NET_DCCP=20,
 NET_IRDA=412,
};


enum
{
 RANDOM_POOLSIZE=1,
 RANDOM_ENTROPY_COUNT=2,
 RANDOM_READ_THRESH=3,
 RANDOM_WRITE_THRESH=4,
 RANDOM_BOOT_ID=5,
 RANDOM_UUID=6
};


enum
{
 PTY_MAX=1,
 PTY_NR=2
};


enum
{
 BUS_ISA_MEM_BASE=1,
 BUS_ISA_PORT_BASE=2,
 BUS_ISA_PORT_SHIFT=3
};


enum
{
 NET_CORE_WMEM_MAX=1,
 NET_CORE_RMEM_MAX=2,
 NET_CORE_WMEM_DEFAULT=3,
 NET_CORE_RMEM_DEFAULT=4,

 NET_CORE_MAX_BACKLOG=6,
 NET_CORE_FASTROUTE=7,
 NET_CORE_MSG_COST=8,
 NET_CORE_MSG_BURST=9,
 NET_CORE_OPTMEM_MAX=10,
 NET_CORE_HOT_LIST_LENGTH=11,
 NET_CORE_DIVERT_VERSION=12,
 NET_CORE_NO_CONG_THRESH=13,
 NET_CORE_NO_CONG=14,
 NET_CORE_LO_CONG=15,
 NET_CORE_MOD_CONG=16,
 NET_CORE_DEV_WEIGHT=17,
 NET_CORE_SOMAXCONN=18,
 NET_CORE_BUDGET=19,
 NET_CORE_AEVENT_ETIME=20,
 NET_CORE_AEVENT_RSEQTH=21,
 NET_CORE_WARNINGS=22,
};







enum
{
 NET_UNIX_DESTROY_DELAY=1,
 NET_UNIX_DELETE_DELAY=2,
 NET_UNIX_MAX_DGRAM_QLEN=3,
};


enum
{
 NET_NF_CONNTRACK_MAX=1,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_NF_CONNTRACK_BUCKETS=14,
 NET_NF_CONNTRACK_LOG_INVALID=15,
 NET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_NF_CONNTRACK_TCP_LOOSE=17,
 NET_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_NF_CONNTRACK_TCP_MAX_RETRANS=19,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
 NET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_NF_CONNTRACK_COUNT=27,
 NET_NF_CONNTRACK_ICMPV6_TIMEOUT=28,
 NET_NF_CONNTRACK_FRAG6_TIMEOUT=29,
 NET_NF_CONNTRACK_FRAG6_LOW_THRESH=30,
 NET_NF_CONNTRACK_FRAG6_HIGH_THRESH=31,
 NET_NF_CONNTRACK_CHECKSUM=32,
};


enum
{

 NET_IPV4_FORWARD=8,
 NET_IPV4_DYNADDR=9,

 NET_IPV4_CONF=16,
 NET_IPV4_NEIGH=17,
 NET_IPV4_ROUTE=18,
 NET_IPV4_FIB_HASH=19,
 NET_IPV4_NETFILTER=20,

 NET_IPV4_TCP_TIMESTAMPS=33,
 NET_IPV4_TCP_WINDOW_SCALING=34,
 NET_IPV4_TCP_SACK=35,
 NET_IPV4_TCP_RETRANS_COLLAPSE=36,
 NET_IPV4_DEFAULT_TTL=37,
 NET_IPV4_AUTOCONFIG=38,
 NET_IPV4_NO_PMTU_DISC=39,
 NET_IPV4_TCP_SYN_RETRIES=40,
 NET_IPV4_IPFRAG_HIGH_THRESH=41,
 NET_IPV4_IPFRAG_LOW_THRESH=42,
 NET_IPV4_IPFRAG_TIME=43,
 NET_IPV4_TCP_MAX_KA_PROBES=44,
 NET_IPV4_TCP_KEEPALIVE_TIME=45,
 NET_IPV4_TCP_KEEPALIVE_PROBES=46,
 NET_IPV4_TCP_RETRIES1=47,
 NET_IPV4_TCP_RETRIES2=48,
 NET_IPV4_TCP_FIN_TIMEOUT=49,
 NET_IPV4_IP_MASQ_DEBUG=50,
 NET_TCP_SYNCOOKIES=51,
 NET_TCP_STDURG=52,
 NET_TCP_RFC1337=53,
 NET_TCP_SYN_TAILDROP=54,
 NET_TCP_MAX_SYN_BACKLOG=55,
 NET_IPV4_LOCAL_PORT_RANGE=56,
 NET_IPV4_ICMP_ECHO_IGNORE_ALL=57,
 NET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS=58,
 NET_IPV4_ICMP_SOURCEQUENCH_RATE=59,
 NET_IPV4_ICMP_DESTUNREACH_RATE=60,
 NET_IPV4_ICMP_TIMEEXCEED_RATE=61,
 NET_IPV4_ICMP_PARAMPROB_RATE=62,
 NET_IPV4_ICMP_ECHOREPLY_RATE=63,
 NET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES=64,
 NET_IPV4_IGMP_MAX_MEMBERSHIPS=65,
 NET_TCP_TW_RECYCLE=66,
 NET_IPV4_ALWAYS_DEFRAG=67,
 NET_IPV4_TCP_KEEPALIVE_INTVL=68,
 NET_IPV4_INET_PEER_THRESHOLD=69,
 NET_IPV4_INET_PEER_MINTTL=70,
 NET_IPV4_INET_PEER_MAXTTL=71,
 NET_IPV4_INET_PEER_GC_MINTIME=72,
 NET_IPV4_INET_PEER_GC_MAXTIME=73,
 NET_TCP_ORPHAN_RETRIES=74,
 NET_TCP_ABORT_ON_OVERFLOW=75,
 NET_TCP_SYNACK_RETRIES=76,
 NET_TCP_MAX_ORPHANS=77,
 NET_TCP_MAX_TW_BUCKETS=78,
 NET_TCP_FACK=79,
 NET_TCP_REORDERING=80,
 NET_TCP_ECN=81,
 NET_TCP_DSACK=82,
 NET_TCP_MEM=83,
 NET_TCP_WMEM=84,
 NET_TCP_RMEM=85,
 NET_TCP_APP_WIN=86,
 NET_TCP_ADV_WIN_SCALE=87,
 NET_IPV4_NONLOCAL_BIND=88,
 NET_IPV4_ICMP_RATELIMIT=89,
 NET_IPV4_ICMP_RATEMASK=90,
 NET_TCP_TW_REUSE=91,
 NET_TCP_FRTO=92,
 NET_TCP_LOW_LATENCY=93,
 NET_IPV4_IPFRAG_SECRET_INTERVAL=94,
 NET_IPV4_IGMP_MAX_MSF=96,
 NET_TCP_NO_METRICS_SAVE=97,
 NET_TCP_DEFAULT_WIN_SCALE=105,
 NET_TCP_MODERATE_RCVBUF=106,
 NET_TCP_TSO_WIN_DIVISOR=107,
 NET_TCP_BIC_BETA=108,
 NET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR=109,
 NET_TCP_CONG_CONTROL=110,
 NET_TCP_ABC=111,
 NET_IPV4_IPFRAG_MAX_DIST=112,
  NET_TCP_MTU_PROBING=113,
 NET_TCP_BASE_MSS=114,
 NET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS=115,
 NET_TCP_DMA_COPYBREAK=116,
 NET_TCP_SLOW_START_AFTER_IDLE=117,
 NET_CIPSOV4_CACHE_ENABLE=118,
 NET_CIPSOV4_CACHE_BUCKET_SIZE=119,
 NET_CIPSOV4_RBM_OPTFMT=120,
 NET_CIPSOV4_RBM_STRICTVALID=121,
 NET_TCP_AVAIL_CONG_CONTROL=122,
 NET_TCP_ALLOWED_CONG_CONTROL=123,
 NET_TCP_MAX_SSTHRESH=124,
 NET_TCP_FRTO_RESPONSE=125,
};

enum {
 NET_IPV4_ROUTE_FLUSH=1,
 NET_IPV4_ROUTE_MIN_DELAY=2,
 NET_IPV4_ROUTE_MAX_DELAY=3,
 NET_IPV4_ROUTE_GC_THRESH=4,
 NET_IPV4_ROUTE_MAX_SIZE=5,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL=6,
 NET_IPV4_ROUTE_GC_TIMEOUT=7,
 NET_IPV4_ROUTE_GC_INTERVAL=8,
 NET_IPV4_ROUTE_REDIRECT_LOAD=9,
 NET_IPV4_ROUTE_REDIRECT_NUMBER=10,
 NET_IPV4_ROUTE_REDIRECT_SILENCE=11,
 NET_IPV4_ROUTE_ERROR_COST=12,
 NET_IPV4_ROUTE_ERROR_BURST=13,
 NET_IPV4_ROUTE_GC_ELASTICITY=14,
 NET_IPV4_ROUTE_MTU_EXPIRES=15,
 NET_IPV4_ROUTE_MIN_PMTU=16,
 NET_IPV4_ROUTE_MIN_ADVMSS=17,
 NET_IPV4_ROUTE_SECRET_INTERVAL=18,
 NET_IPV4_ROUTE_GC_MIN_INTERVAL_MS=19,
};

enum
{
 NET_PROTO_CONF_ALL=-2,
 NET_PROTO_CONF_DEFAULT=-3


};

enum
{
 NET_IPV4_CONF_FORWARDING=1,
 NET_IPV4_CONF_MC_FORWARDING=2,
 NET_IPV4_CONF_PROXY_ARP=3,
 NET_IPV4_CONF_ACCEPT_REDIRECTS=4,
 NET_IPV4_CONF_SECURE_REDIRECTS=5,
 NET_IPV4_CONF_SEND_REDIRECTS=6,
 NET_IPV4_CONF_SHARED_MEDIA=7,
 NET_IPV4_CONF_RP_FILTER=8,
 NET_IPV4_CONF_ACCEPT_SOURCE_ROUTE=9,
 NET_IPV4_CONF_BOOTP_RELAY=10,
 NET_IPV4_CONF_LOG_MARTIANS=11,
 NET_IPV4_CONF_TAG=12,
 NET_IPV4_CONF_ARPFILTER=13,
 NET_IPV4_CONF_MEDIUM_ID=14,
 NET_IPV4_CONF_NOXFRM=15,
 NET_IPV4_CONF_NOPOLICY=16,
 NET_IPV4_CONF_FORCE_IGMP_VERSION=17,
 NET_IPV4_CONF_ARP_ANNOUNCE=18,
 NET_IPV4_CONF_ARP_IGNORE=19,
 NET_IPV4_CONF_PROMOTE_SECONDARIES=20,
 NET_IPV4_CONF_ARP_ACCEPT=21,
 NET_IPV4_CONF_ARP_NOTIFY=22,
};


enum
{
 NET_IPV4_NF_CONNTRACK_MAX=1,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT=2,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV=3,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED=4,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT=5,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT=6,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK=7,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT=8,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE=9,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT=10,
 NET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM=11,
 NET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT=12,
 NET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT=13,
 NET_IPV4_NF_CONNTRACK_BUCKETS=14,
 NET_IPV4_NF_CONNTRACK_LOG_INVALID=15,
 NET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS=16,
 NET_IPV4_NF_CONNTRACK_TCP_LOOSE=17,
 NET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL=18,
 NET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS=19,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED=20,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT=21,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED=22,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED=23,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT=24,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD=25,
  NET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT=26,
 NET_IPV4_NF_CONNTRACK_COUNT=27,
 NET_IPV4_NF_CONNTRACK_CHECKSUM=28,
};


enum {
 NET_IPV6_CONF=16,
 NET_IPV6_NEIGH=17,
 NET_IPV6_ROUTE=18,
 NET_IPV6_ICMP=19,
 NET_IPV6_BINDV6ONLY=20,
 NET_IPV6_IP6FRAG_HIGH_THRESH=21,
 NET_IPV6_IP6FRAG_LOW_THRESH=22,
 NET_IPV6_IP6FRAG_TIME=23,
 NET_IPV6_IP6FRAG_SECRET_INTERVAL=24,
 NET_IPV6_MLD_MAX_MSF=25,
};

enum {
 NET_IPV6_ROUTE_FLUSH=1,
 NET_IPV6_ROUTE_GC_THRESH=2,
 NET_IPV6_ROUTE_MAX_SIZE=3,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL=4,
 NET_IPV6_ROUTE_GC_TIMEOUT=5,
 NET_IPV6_ROUTE_GC_INTERVAL=6,
 NET_IPV6_ROUTE_GC_ELASTICITY=7,
 NET_IPV6_ROUTE_MTU_EXPIRES=8,
 NET_IPV6_ROUTE_MIN_ADVMSS=9,
 NET_IPV6_ROUTE_GC_MIN_INTERVAL_MS=10
};

enum {
 NET_IPV6_FORWARDING=1,
 NET_IPV6_HOP_LIMIT=2,
 NET_IPV6_MTU=3,
 NET_IPV6_ACCEPT_RA=4,
 NET_IPV6_ACCEPT_REDIRECTS=5,
 NET_IPV6_AUTOCONF=6,
 NET_IPV6_DAD_TRANSMITS=7,
 NET_IPV6_RTR_SOLICITS=8,
 NET_IPV6_RTR_SOLICIT_INTERVAL=9,
 NET_IPV6_RTR_SOLICIT_DELAY=10,
 NET_IPV6_USE_TEMPADDR=11,
 NET_IPV6_TEMP_VALID_LFT=12,
 NET_IPV6_TEMP_PREFERED_LFT=13,
 NET_IPV6_REGEN_MAX_RETRY=14,
 NET_IPV6_MAX_DESYNC_FACTOR=15,
 NET_IPV6_MAX_ADDRESSES=16,
 NET_IPV6_FORCE_MLD_VERSION=17,
 NET_IPV6_ACCEPT_RA_DEFRTR=18,
 NET_IPV6_ACCEPT_RA_PINFO=19,
 NET_IPV6_ACCEPT_RA_RTR_PREF=20,
 NET_IPV6_RTR_PROBE_INTERVAL=21,
 NET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN=22,
 NET_IPV6_PROXY_NDP=23,
 NET_IPV6_ACCEPT_SOURCE_ROUTE=25,
 __NET_IPV6_MAX
};


enum {
 NET_IPV6_ICMP_RATELIMIT=1
};


enum {
 NET_NEIGH_MCAST_SOLICIT=1,
 NET_NEIGH_UCAST_SOLICIT=2,
 NET_NEIGH_APP_SOLICIT=3,
 NET_NEIGH_RETRANS_TIME=4,
 NET_NEIGH_REACHABLE_TIME=5,
 NET_NEIGH_DELAY_PROBE_TIME=6,
 NET_NEIGH_GC_STALE_TIME=7,
 NET_NEIGH_UNRES_QLEN=8,
 NET_NEIGH_PROXY_QLEN=9,
 NET_NEIGH_ANYCAST_DELAY=10,
 NET_NEIGH_PROXY_DELAY=11,
 NET_NEIGH_LOCKTIME=12,
 NET_NEIGH_GC_INTERVAL=13,
 NET_NEIGH_GC_THRESH1=14,
 NET_NEIGH_GC_THRESH2=15,
 NET_NEIGH_GC_THRESH3=16,
 NET_NEIGH_RETRANS_TIME_MS=17,
 NET_NEIGH_REACHABLE_TIME_MS=18,
};


enum {
 NET_DCCP_DEFAULT=1,
};


enum {
 NET_IPX_PPROP_BROADCASTING=1,
 NET_IPX_FORWARDING=2
};


enum {
 NET_LLC2=1,
 NET_LLC_STATION=2,
};


enum {
 NET_LLC2_TIMEOUT=1,
};


enum {
 NET_LLC_STATION_ACK_TIMEOUT=1,
};


enum {
 NET_LLC2_ACK_TIMEOUT=1,
 NET_LLC2_P_TIMEOUT=2,
 NET_LLC2_REJ_TIMEOUT=3,
 NET_LLC2_BUSY_TIMEOUT=4,
};


enum {
 NET_ATALK_AARP_EXPIRY_TIME=1,
 NET_ATALK_AARP_TICK_TIME=2,
 NET_ATALK_AARP_RETRANSMIT_LIMIT=3,
 NET_ATALK_AARP_RESOLVE_TIME=4
};



enum {
 NET_NETROM_DEFAULT_PATH_QUALITY=1,
 NET_NETROM_OBSOLESCENCE_COUNT_INITIALISER=2,
 NET_NETROM_NETWORK_TTL_INITIALISER=3,
 NET_NETROM_TRANSPORT_TIMEOUT=4,
 NET_NETROM_TRANSPORT_MAXIMUM_TRIES=5,
 NET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY=6,
 NET_NETROM_TRANSPORT_BUSY_DELAY=7,
 NET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE=8,
 NET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT=9,
 NET_NETROM_ROUTING_CONTROL=10,
 NET_NETROM_LINK_FAILS_COUNT=11,
 NET_NETROM_RESET=12
};


enum {
 NET_AX25_IP_DEFAULT_MODE=1,
 NET_AX25_DEFAULT_MODE=2,
 NET_AX25_BACKOFF_TYPE=3,
 NET_AX25_CONNECT_MODE=4,
 NET_AX25_STANDARD_WINDOW=5,
 NET_AX25_EXTENDED_WINDOW=6,
 NET_AX25_T1_TIMEOUT=7,
 NET_AX25_T2_TIMEOUT=8,
 NET_AX25_T3_TIMEOUT=9,
 NET_AX25_IDLE_TIMEOUT=10,
 NET_AX25_N2=11,
 NET_AX25_PACLEN=12,
 NET_AX25_PROTOCOL=13,
 NET_AX25_DAMA_SLAVE_TIMEOUT=14
};


enum {
 NET_ROSE_RESTART_REQUEST_TIMEOUT=1,
 NET_ROSE_CALL_REQUEST_TIMEOUT=2,
 NET_ROSE_RESET_REQUEST_TIMEOUT=3,
 NET_ROSE_CLEAR_REQUEST_TIMEOUT=4,
 NET_ROSE_ACK_HOLD_BACK_TIMEOUT=5,
 NET_ROSE_ROUTING_CONTROL=6,
 NET_ROSE_LINK_FAIL_TIMEOUT=7,
 NET_ROSE_MAX_VCS=8,
 NET_ROSE_WINDOW_SIZE=9,
 NET_ROSE_NO_ACTIVITY_TIMEOUT=10
};


enum {
 NET_X25_RESTART_REQUEST_TIMEOUT=1,
 NET_X25_CALL_REQUEST_TIMEOUT=2,
 NET_X25_RESET_REQUEST_TIMEOUT=3,
 NET_X25_CLEAR_REQUEST_TIMEOUT=4,
 NET_X25_ACK_HOLD_BACK_TIMEOUT=5,
 NET_X25_FORWARD=6
};


enum
{
 NET_TR_RIF_TIMEOUT=1
};


enum {
 NET_DECNET_NODE_TYPE = 1,
 NET_DECNET_NODE_ADDRESS = 2,
 NET_DECNET_NODE_NAME = 3,
 NET_DECNET_DEFAULT_DEVICE = 4,
 NET_DECNET_TIME_WAIT = 5,
 NET_DECNET_DN_COUNT = 6,
 NET_DECNET_DI_COUNT = 7,
 NET_DECNET_DR_COUNT = 8,
 NET_DECNET_DST_GC_INTERVAL = 9,
 NET_DECNET_CONF = 10,
 NET_DECNET_NO_FC_MAX_CWND = 11,
 NET_DECNET_MEM = 12,
 NET_DECNET_RMEM = 13,
 NET_DECNET_WMEM = 14,
 NET_DECNET_DEBUG_LEVEL = 255
};


enum {
 NET_DECNET_CONF_LOOPBACK = -2,
 NET_DECNET_CONF_DDCMP = -3,
 NET_DECNET_CONF_PPP = -4,
 NET_DECNET_CONF_X25 = -5,
 NET_DECNET_CONF_GRE = -6,
 NET_DECNET_CONF_ETHER = -7


};


enum {
 NET_DECNET_CONF_DEV_PRIORITY = 1,
 NET_DECNET_CONF_DEV_T1 = 2,
 NET_DECNET_CONF_DEV_T2 = 3,
 NET_DECNET_CONF_DEV_T3 = 4,
 NET_DECNET_CONF_DEV_FORWARDING = 5,
 NET_DECNET_CONF_DEV_BLKSIZE = 6,
 NET_DECNET_CONF_DEV_STATE = 7
};


enum {
 NET_SCTP_RTO_INITIAL = 1,
 NET_SCTP_RTO_MIN = 2,
 NET_SCTP_RTO_MAX = 3,
 NET_SCTP_RTO_ALPHA = 4,
 NET_SCTP_RTO_BETA = 5,
 NET_SCTP_VALID_COOKIE_LIFE = 6,
 NET_SCTP_ASSOCIATION_MAX_RETRANS = 7,
 NET_SCTP_PATH_MAX_RETRANS = 8,
 NET_SCTP_MAX_INIT_RETRANSMITS = 9,
 NET_SCTP_HB_INTERVAL = 10,
 NET_SCTP_PRESERVE_ENABLE = 11,
 NET_SCTP_MAX_BURST = 12,
 NET_SCTP_ADDIP_ENABLE = 13,
 NET_SCTP_PRSCTP_ENABLE = 14,
 NET_SCTP_SNDBUF_POLICY = 15,
 NET_SCTP_SACK_TIMEOUT = 16,
 NET_SCTP_RCVBUF_POLICY = 17,
};


enum {
 NET_BRIDGE_NF_CALL_ARPTABLES = 1,
 NET_BRIDGE_NF_CALL_IPTABLES = 2,
 NET_BRIDGE_NF_CALL_IP6TABLES = 3,
 NET_BRIDGE_NF_FILTER_VLAN_TAGGED = 4,
 NET_BRIDGE_NF_FILTER_PPPOE_TAGGED = 5,
};


enum {
 NET_IRDA_DISCOVERY=1,
 NET_IRDA_DEVNAME=2,
 NET_IRDA_DEBUG=3,
 NET_IRDA_FAST_POLL=4,
 NET_IRDA_DISCOVERY_SLOTS=5,
 NET_IRDA_DISCOVERY_TIMEOUT=6,
 NET_IRDA_SLOT_TIMEOUT=7,
 NET_IRDA_MAX_BAUD_RATE=8,
 NET_IRDA_MIN_TX_TURN_TIME=9,
 NET_IRDA_MAX_TX_DATA_SIZE=10,
 NET_IRDA_MAX_TX_WINDOW=11,
 NET_IRDA_MAX_NOREPLY_TIME=12,
 NET_IRDA_WARN_NOREPLY_TIME=13,
 NET_IRDA_LAP_KEEPALIVE_TIME=14,
};



enum
{
 FS_NRINODE=1,
 FS_STATINODE=2,
 FS_MAXINODE=3,
 FS_NRDQUOT=4,
 FS_MAXDQUOT=5,
 FS_NRFILE=6,
 FS_MAXFILE=7,
 FS_DENTRY=8,
 FS_NRSUPER=9,
 FS_MAXSUPER=10,
 FS_OVERFLOWUID=11,
 FS_OVERFLOWGID=12,
 FS_LEASES=13,
 FS_DIR_NOTIFY=14,
 FS_LEASE_TIME=15,
 FS_DQSTATS=16,
 FS_XFS=17,
 FS_AIO_NR=18,
 FS_AIO_MAX_NR=19,
 FS_INOTIFY=20,
 FS_OCFS2=988,
};


enum {
 FS_DQ_LOOKUPS = 1,
 FS_DQ_DROPS = 2,
 FS_DQ_READS = 3,
 FS_DQ_WRITES = 4,
 FS_DQ_CACHE_HITS = 5,
 FS_DQ_ALLOCATED = 6,
 FS_DQ_FREE = 7,
 FS_DQ_SYNCS = 8,
 FS_DQ_WARNINGS = 9,
};




enum {
 DEV_CDROM=1,
 DEV_HWMON=2,
 DEV_PARPORT=3,
 DEV_RAID=4,
 DEV_MAC_HID=5,
 DEV_SCSI=6,
 DEV_IPMI=7,
};


enum {
 DEV_CDROM_INFO=1,
 DEV_CDROM_AUTOCLOSE=2,
 DEV_CDROM_AUTOEJECT=3,
 DEV_CDROM_DEBUG=4,
 DEV_CDROM_LOCK=5,
 DEV_CDROM_CHECK_MEDIA=6
};


enum {
 DEV_PARPORT_DEFAULT=-3
};


enum {
 DEV_RAID_SPEED_LIMIT_MIN=1,
 DEV_RAID_SPEED_LIMIT_MAX=2
};


enum {
 DEV_PARPORT_DEFAULT_TIMESLICE=1,
 DEV_PARPORT_DEFAULT_SPINTIME=2
};


enum {
 DEV_PARPORT_SPINTIME=1,
 DEV_PARPORT_BASE_ADDR=2,
 DEV_PARPORT_IRQ=3,
 DEV_PARPORT_DMA=4,
 DEV_PARPORT_MODES=5,
 DEV_PARPORT_DEVICES=6,
 DEV_PARPORT_AUTOPROBE=16
};


enum {
 DEV_PARPORT_DEVICES_ACTIVE=-3,
};


enum {
 DEV_PARPORT_DEVICE_TIMESLICE=1,
};


enum {
 DEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES=1,
 DEV_MAC_HID_KEYBOARD_LOCK_KEYCODES=2,
 DEV_MAC_HID_MOUSE_BUTTON_EMULATION=3,
 DEV_MAC_HID_MOUSE_BUTTON2_KEYCODE=4,
 DEV_MAC_HID_MOUSE_BUTTON3_KEYCODE=5,
 DEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES=6
};


enum {
 DEV_SCSI_LOGGING_LEVEL=1,
};


enum {
 DEV_IPMI_POWEROFF_POWERCYCLE=1,
};


enum
{
 ABI_DEFHANDLER_COFF=1,
 ABI_DEFHANDLER_ELF=2,
 ABI_DEFHANDLER_LCALL7=3,
 ABI_DEFHANDLER_LIBCSO=4,
 ABI_TRACE=5,
 ABI_FAKE_UTSNAME=6,
};


struct ctl_table;
struct nsproxy;
struct ctl_table_root;
struct ctl_table_header;
struct ctl_dir;

typedef struct ctl_table ctl_table;

typedef int proc_handler (struct ctl_table *ctl, int write,
     void *buffer, size_t *lenp, loff_t *ppos);

extern int proc_dostring(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec_minmax(struct ctl_table *, int,
    void *, size_t *, loff_t *);
extern int proc_dointvec_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_userhz_jiffies(struct ctl_table *, int,
     void *, size_t *, loff_t *);
extern int proc_dointvec_ms_jiffies(struct ctl_table *, int,
        void *, size_t *, loff_t *);
extern int proc_doulongvec_minmax(struct ctl_table *, int,
      void *, size_t *, loff_t *);
extern int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *table, int,
          void *, size_t *, loff_t *);
extern int proc_do_large_bitmap(struct ctl_table *, int,
    void *, size_t *, loff_t *);
struct ctl_table_poll {
  template <typename, int = 0> struct __BYPASSctl_table_poll {};
  template <typename, int> friend struct __BYPASSctl_table_poll;
 atomic_t event;
 wait_queue_head_t wait;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void *proc_sys_poll_event(struct ctl_table_poll *poll)
{
 return (void *)(unsigned long)atomic_read(&poll->event);
}
struct ctl_table
{
  template <typename, int = 0> struct __BYPASSctl_table {};
  template <typename, int> friend struct __BYPASSctl_table;
 char *procname;
 void *data;
 int maxlen;
 umode_t mode;
 struct ctl_table *child;
 proc_handler *proc_handler;
 struct ctl_table_poll *poll;
 void *extra1;
 void *extra2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ctl_node {
  template <typename, int = 0> struct __BYPASSctl_node {};
  template <typename, int> friend struct __BYPASSctl_node;
 struct rb_node node;
 struct ctl_table_header *header;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct ctl_table_header
{
  template <typename, int = 0> struct __BYPASSctl_table_header {};
  template <typename, int> friend struct __BYPASSctl_table_header;
 union {
  struct {
   struct ctl_table *ctl_table;
   int used;
   int count;
   int nreg;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  struct callback_head rcu;
 };
 struct completion *unregistering;
 struct ctl_table *ctl_table_arg;
 struct ctl_table_root *root;
 struct ctl_table_set *set;
 struct ctl_dir *parent;
 struct ctl_node *node;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ctl_dir {
  template <typename, int = 0> struct __BYPASSctl_dir {};
  template <typename, int> friend struct __BYPASSctl_dir;

 struct ctl_table_header header;
 struct rb_root root;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ctl_table_set {
  template <typename, int = 0> struct __BYPASSctl_table_set {};
  template <typename, int> friend struct __BYPASSctl_table_set;
 int (*is_seen)(struct ctl_table_set *);
 struct ctl_dir dir;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ctl_table_root {
  template <typename, int = 0> struct __BYPASSctl_table_root {};
  template <typename, int> friend struct __BYPASSctl_table_root;
 struct ctl_table_set default_set;
 struct ctl_table_set *(*lookup)(struct ctl_table_root *root,
        struct nsproxy *namespaces);
 int (*permissions)(struct ctl_table_header *head, struct ctl_table *table);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ctl_path {
  template <typename, int = 0> struct __BYPASSctl_path {};
  template <typename, int> friend struct __BYPASSctl_path;
 char *procname;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



void proc_sys_poll_notify(struct ctl_table_poll *poll);

extern void setup_sysctl_set(struct ctl_table_set *p,
 struct ctl_table_root *root,
 int (*is_seen)(struct ctl_table_set *));
extern void retire_sysctl_set(struct ctl_table_set *set);

void register_sysctl_root(struct ctl_table_root *root);
struct ctl_table_header *__register_sysctl_table(
 struct ctl_table_set *set,
 char *path, struct ctl_table *table);
struct ctl_table_header *__register_sysctl_paths(
 struct ctl_table_set *set,
 struct ctl_path *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl( char *path, struct ctl_table *table);
struct ctl_table_header *register_sysctl_table(struct ctl_table * table);
struct ctl_table_header *register_sysctl_paths( struct ctl_path *path,
      struct ctl_table *table);

void unregister_sysctl_table(struct ctl_table_header * table);

extern int sysctl_init(void);


struct assoc_array {
  template <typename, int = 0> struct __BYPASSassoc_array {};
  template <typename, int> friend struct __BYPASSassoc_array;
 struct assoc_array_ptr *root;
 unsigned long nr_leaves_on_tree;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct assoc_array_ops {
  template <typename, int = 0> struct __BYPASSassoc_array_ops {};
  template <typename, int> friend struct __BYPASSassoc_array_ops;

 unsigned long (*get_key_chunk)( void *index_key, int level);


 unsigned long (*get_object_key_chunk)( void *object, int level);


 bool (*compare_object)( void *object, void *index_key);




 int (*diff_objects)( void *object, void *index_key);


 void (*free_object)(void *object);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct assoc_array_edit;

static inline void assoc_array_init(struct assoc_array *array)
{
 array->root = 0;
 array->nr_leaves_on_tree = 0;
}

extern int assoc_array_iterate( struct assoc_array *array,
          int (*iterator)( void *object,
            void *iterator_data),
          void *iterator_data);
extern void *assoc_array_find( struct assoc_array *array,
         struct assoc_array_ops *ops,
         void *index_key);
extern void assoc_array_destroy(struct assoc_array *array,
    struct assoc_array_ops *ops);
extern struct assoc_array_edit *assoc_array_insert(struct assoc_array *array,
         struct assoc_array_ops *ops,
         void *index_key,
         void *object);
extern void assoc_array_insert_set_object(struct assoc_array_edit *edit,
       void *object);
extern struct assoc_array_edit *assoc_array_delete(struct assoc_array *array,
         struct assoc_array_ops *ops,
         void *index_key);
extern struct assoc_array_edit *assoc_array_clear(struct assoc_array *array,
        struct assoc_array_ops *ops);
extern void assoc_array_apply_edit(struct assoc_array_edit *edit);
extern void assoc_array_cancel_edit(struct assoc_array_edit *edit);
extern int assoc_array_gc(struct assoc_array *array,
     struct assoc_array_ops *ops,
     bool (*iterator)(void *object, void *iterator_data),
     void *iterator_data);





typedef int32_t key_serial_t;


typedef uint32_t key_perm_t;

struct key;
struct seq_file;
struct user_struct;
struct signal_struct;
struct cred;

struct key_type;
struct key_owner;
struct keyring_list;
struct keyring_name;

struct keyring_index_key {
  template <typename, int = 0> struct __BYPASSkeyring_index_key {};
  template <typename, int> friend struct __BYPASSkeyring_index_key;
 struct key_type *type;
 char *description;
 size_t desc_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct __key_reference_with_attributes *key_ref_t;

static inline key_ref_t make_key_ref( struct key *key,
         bool possession)
{
 return (key_ref_t) ((unsigned long) key | possession);
}

static inline struct key *key_ref_to_ptr( key_ref_t key_ref)
{
 return (struct key *) ((unsigned long) key_ref & ~1UL);
}

static inline bool is_key_possessed( key_ref_t key_ref)
{
 return (unsigned long) key_ref & 1UL;
}
struct key {
  template <typename, int = 0> struct __BYPASSkey {};
  template <typename, int> friend struct __BYPASSkey;
 atomic_t usage;
 key_serial_t serial;
 union {
  struct list_head graveyard_link;
  struct rb_node serial_node;
 };
 struct rw_semaphore sem;
 struct key_user *user;
 void *security;
 union {
  time_t expiry;
  time_t revoked_at;
 };
 time_t last_used_at;
 kuid_t uid;
 kgid_t gid;
 key_perm_t perm;
 unsigned short quotalen;
 unsigned short datalen;
 unsigned long flags;
 union {
  struct keyring_index_key index_key;
  struct {
   struct key_type *type;
   char *description;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };




 union {
  struct list_head link;
  unsigned long x[2];
  void *p[2];
  int reject_error;
 } type_data;





 union {
  union {
   unsigned long value;
   void *rcudata;
   void *data;
   void *data2[2];
  } payload;
  struct assoc_array keys;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct key *key_alloc(struct key_type *type,
        char *desc,
        kuid_t uid, kgid_t gid,
        struct cred *cred,
        key_perm_t perm,
        unsigned long flags);







extern void key_revoke(struct key *key);
extern void key_invalidate(struct key *key);
extern void key_put(struct key *key);

static inline struct key *__key_get(struct key *key)
{
 ;
 return key;
}

static inline struct key *key_get(struct key *key)
{
 return key ? __key_get(key) : key;
}

static inline void key_ref_put(key_ref_t key_ref)
{
 key_put(key_ref_to_ptr(key_ref));
}

extern struct key *request_key(struct key_type *type,
          char *description,
          char *callout_info);

extern struct key *request_key_with_auxdata(struct key_type *type,
         char *description,
         void *callout_info,
         size_t callout_len,
         void *aux);

extern struct key *request_key_async(struct key_type *type,
         char *description,
         void *callout_info,
         size_t callout_len);

extern struct key *request_key_async_with_auxdata(struct key_type *type,
        char *description,
        void *callout_info,
        size_t callout_len,
        void *aux);

extern int wait_for_key_construction(struct key *key, bool intr);

extern int key_validate( struct key *key);

extern key_ref_t key_create_or_update(key_ref_t keyring,
          char *type,
          char *description,
          void *payload,
          size_t plen,
          key_perm_t perm,
          unsigned long flags);

extern int key_update(key_ref_t key,
        void *payload,
        size_t plen);

extern int key_link(struct key *keyring,
      struct key *key);

extern int key_unlink(struct key *keyring,
        struct key *key);

extern struct key *keyring_alloc( char *description, kuid_t uid, kgid_t gid,
     struct cred *cred,
     key_perm_t perm,
     unsigned long flags,
     struct key *dest);

extern int keyring_clear(struct key *keyring);

extern key_ref_t keyring_search(key_ref_t keyring,
    struct key_type *type,
    char *description);

extern int keyring_add_key(struct key *keyring,
      struct key *key);

extern struct key *key_lookup(key_serial_t id);

static inline key_serial_t key_serial( struct key *key)
{
 return key ? key->serial : 0;
}

extern void key_set_timeout(struct key *, unsigned);
static inline bool key_is_instantiated( struct key *key)
{
 return (__builtin_constant_p((0)) ? constant_test_bit((0), (&key->flags)) : variable_test_bit((0), (&key->flags))) &&
  !(__builtin_constant_p((5)) ? constant_test_bit((5), (&key->flags)) : variable_test_bit((5), (&key->flags)));
}
extern ctl_table key_sysctls[];




extern int install_thread_keyring_to_cred(struct cred *cred);
extern void key_fsuid_changed(struct task_struct *tsk);
extern void key_fsgid_changed(struct task_struct *tsk);
extern void key_init(void);
struct selinux_audit_rule;
struct audit_context;
struct kern_ipc_perm;






bool selinux_is_enabled(void);



struct user_struct;
struct cred;
struct inode;







struct group_info {
  template <typename, int = 0> struct __BYPASSgroup_info {};
  template <typename, int> friend struct __BYPASSgroup_info;
 atomic_t usage;
 int ngroups;
 int nblocks;
 kgid_t small_block[32];
 kgid_t *blocks[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline struct group_info *get_group_info(struct group_info *gi)
{
 ;
 return gi;
}
extern struct group_info *groups_alloc(int);
extern struct group_info init_groups;





extern int set_current_groups(struct group_info *);
extern int set_groups(struct cred *, struct group_info *);
extern int groups_search( struct group_info *, kgid_t);





extern int in_group_p(kgid_t);
extern int in_egroup_p(kgid_t);
struct cred {
  template <typename, int = 0> struct __BYPASScred {};
  template <typename, int> friend struct __BYPASScred;
 atomic_t usage;







 kuid_t uid;
 kgid_t gid;
 kuid_t suid;
 kgid_t sgid;
 kuid_t euid;
 kgid_t egid;
 kuid_t fsuid;
 kgid_t fsgid;
 unsigned securebits;
 kernel_cap_t cap_inheritable;
 kernel_cap_t cap_permitted;
 kernel_cap_t cap_effective;
 kernel_cap_t cap_bset;

 unsigned char jit_keyring;

 struct key *session_keyring;
 struct key *process_keyring;
 struct key *thread_keyring;
 struct key *request_key_auth;


 void *security;

 struct user_struct *user;
 struct user_namespace *user_ns;
 struct group_info *group_info;
 struct callback_head rcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void __put_cred(struct cred *);
extern void exit_creds(struct task_struct *);
extern int copy_creds(struct task_struct *, unsigned long);
extern struct cred *get_task_cred(struct task_struct *);
extern struct cred *cred_alloc_blank(void);
extern struct cred *prepare_creds(void);
extern struct cred *prepare_exec_creds(void);
extern int commit_creds(struct cred *);
extern void abort_creds(struct cred *);
extern struct cred *override_creds( struct cred *);
extern void revert_creds( struct cred *);
extern struct cred *prepare_kernel_cred(struct task_struct *);
extern int change_create_files_as(struct cred *, struct inode *);
extern int set_security_override(struct cred *, u32);
extern int set_security_override_from_ctx(struct cred *, char *);
extern int set_create_files_as(struct cred *, struct inode *);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) cred_init(void);
static inline void validate_creds( struct cred *cred)
{
}
static inline void validate_creds_for_do_exit(struct task_struct *tsk)
{
}
static inline void validate_process_creds(void)
{
}
static inline struct cred *get_new_cred(struct cred *cred)
{
 ;
 return cred;
}
static inline struct cred *get_cred( struct cred *cred)
{
 struct cred *nonconst_cred = (struct cred *) cred;
 validate_creds(cred);
 return get_new_cred(nonconst_cred);
}
static inline void put_cred( struct cred *_cred)
{
 struct cred *cred = (struct cred *) _cred;

 validate_creds(cred);
 if (1)
  __put_cred(cred);
}
extern struct user_namespace init_user_ns;






struct exec_domain;
struct futex_pi_state;
struct robust_list_head;
struct bio_list;
struct fs_struct;
struct perf_event_context;
struct blk_plug;
extern unsigned long avenrun[];
extern void get_avenrun(unsigned long *loads, unsigned long offset, int shift);
extern unsigned long total_forks;
extern int nr_threads;
extern __attribute__((section(".data..percpu" ""))) __typeof__(unsigned long) process_counts;
extern int nr_processes(void);
extern unsigned long nr_running(void);
extern unsigned long nr_iowait(void);
extern unsigned long nr_iowait_cpu(int cpu);
extern unsigned long this_cpu_load(void);


extern void calc_global_load(unsigned long ticks);
extern void update_cpu_load_nohz(void);

extern unsigned long get_parent_ip(unsigned long addr);

extern void dump_cpu_task(int cpu);

struct seq_file;
struct cfs_rq;
struct task_group;

extern void proc_sched_show_task(struct task_struct *p, struct seq_file *m);
extern void proc_sched_set_task(struct task_struct *p);
extern void
print_cfs_rq(struct seq_file *m, int cpu, struct cfs_rq *cfs_rq);
extern rwlock_t tasklist_lock;
extern spinlock_t mmlist_lock;

struct task_struct;





extern void sched_init(void);
extern void sched_init_smp(void);
extern void schedule_tail(struct task_struct *prev);
extern void init_idle(struct task_struct *idle, int cpu);
extern void init_idle_bootup_task(struct task_struct *idle);

extern int runqueue_is_locked(int cpu);


extern void nohz_balance_enter_idle(int cpu);
extern void set_cpu_sd_state_idle(void);
extern int get_nohz_timer_target(void);
extern void show_state_filter(unsigned long state_filter);

static inline void show_state(void)
{
 show_state_filter(0);
}

extern void show_regs(struct pt_regs *);






extern void show_stack(struct task_struct *task, unsigned long *sp);

void io_schedule(void);
long io_schedule_timeout(long timeout);

extern void cpu_init (void);
extern void trap_init(void);
extern void update_process_times(int user);
extern void scheduler_tick(void);

extern void sched_show_task(struct task_struct *p);


extern void touch_softlockup_watchdog(void);
extern void touch_softlockup_watchdog_sync(void);
extern void touch_all_softlockup_watchdogs(void);
extern int proc_dowatchdog_thresh(struct ctl_table *table, int write,
      void *buffer,
      size_t *lenp, loff_t *ppos);
extern unsigned int softlockup_panic;
void lockup_detector_init(void);
void reset_hung_task_detector(void);
extern char __sched_text_start[], __sched_text_end[];


extern int in_sched_functions(unsigned long addr);


extern signed long schedule_timeout(signed long timeout);
extern signed long schedule_timeout_interruptible(signed long timeout);
extern signed long schedule_timeout_killable(signed long timeout);
extern signed long schedule_timeout_uninterruptible(signed long timeout);
 void schedule(void);
extern void schedule_preempt_disabled(void);

struct nsproxy;
struct user_namespace;


extern void arch_pick_mmap_layout(struct mm_struct *mm);
extern unsigned long
arch_get_unmapped_area(struct file *, unsigned long, unsigned long,
         unsigned long, unsigned long);
extern unsigned long
arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,
     unsigned long len, unsigned long pgoff,
     unsigned long flags);





extern void set_dumpable(struct mm_struct *mm, int value);
extern int get_dumpable(struct mm_struct *mm);
struct sighand_struct {
  template <typename, int = 0> struct __BYPASSsighand_struct {};
  template <typename, int> friend struct __BYPASSsighand_struct;
 atomic_t count;
 struct k_sigaction action[64];
 spinlock_t siglock;
 wait_queue_head_t signalfd_wqh;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pacct_struct {
  template <typename, int = 0> struct __BYPASSpacct_struct {};
  template <typename, int> friend struct __BYPASSpacct_struct;
 int ac_flag;
 long ac_exitcode;
 unsigned long ac_mem;
 cputime_t ac_utime, ac_stime;
 unsigned long ac_minflt, ac_majflt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct cpu_itimer {
  template <typename, int = 0> struct __BYPASScpu_itimer {};
  template <typename, int> friend struct __BYPASScpu_itimer;
 cputime_t expires;
 cputime_t incr;
 u32 error;
 u32 incr_error;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct cputime {
  template <typename, int = 0> struct __BYPASScputime {};
  template <typename, int> friend struct __BYPASScputime;
 cputime_t utime;
 cputime_t stime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct task_cputime {
  template <typename, int = 0> struct __BYPASStask_cputime {};
  template <typename, int> friend struct __BYPASStask_cputime;
 cputime_t utime;
 cputime_t stime;
 unsigned long long sum_exec_runtime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct thread_group_cputimer {
  template <typename, int = 0> struct __BYPASSthread_group_cputimer {};
  template <typename, int> friend struct __BYPASSthread_group_cputimer;
 struct task_cputime cputime;
 int running;
 raw_spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct autogroup;
struct signal_struct {
  template <typename, int = 0> struct __BYPASSsignal_struct {};
  template <typename, int> friend struct __BYPASSsignal_struct;
 atomic_t sigcnt;
 atomic_t live;
 int nr_threads;

 wait_queue_head_t wait_chldexit;


 struct task_struct *curr_target;


 struct sigpending shared_pending;


 int group_exit_code;





 int notify_count;
 struct task_struct *group_exit_task;


 int group_stop_count;
 unsigned int flags;
 unsigned int is_child_subreaper:1;
 unsigned int has_child_subreaper:1;


 int posix_timer_id;
 struct list_head posix_timers;


 struct hrtimer real_timer;
 struct pid *leader_pid;
 ktime_t it_real_incr;






 struct cpu_itimer it[2];





 struct thread_group_cputimer cputimer;


 struct task_cputime cputime_expires;

 struct list_head cpu_timers[3];

 struct pid *tty_old_pgrp;


 int leader;

 struct tty_struct *tty;


 struct autogroup *autogroup;







 cputime_t utime, stime, cutime, cstime;
 cputime_t gtime;
 cputime_t cgtime;

 struct cputime prev_cputime;

 unsigned long nvcsw, nivcsw, cnvcsw, cnivcsw;
 unsigned long min_flt, maj_flt, cmin_flt, cmaj_flt;
 unsigned long inblock, oublock, cinblock, coublock;
 unsigned long maxrss, cmaxrss;
 struct task_io_accounting ioac;







 unsigned long long sum_sched_runtime;
 struct rlimit rlim[16];


 struct pacct_struct pacct;


 struct taskstats *stats;


 unsigned audit_tty;
 unsigned audit_tty_log_passwd;
 struct tty_audit_buf *tty_audit_buf;
 struct rw_semaphore group_rwsem;


 oom_flags_t oom_flags;
 short oom_score_adj;
 short oom_score_adj_min;


 struct mutex cred_guard_mutex;



  friend class ::Introspect;
  friend class ::MyIntrospect;
};

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13signal_struct5flagsE_1522_0 {
  typedef TJP__ZN13signal_struct5flagsE_1522_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN13signal_struct5flagsE_1522(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN13signal_struct5flagsE_1522_0< unsigned int , ::signal_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13signal_struct15group_exit_taskE_1523_0 {
  typedef TJP__ZN13signal_struct15group_exit_taskE_1523_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN13signal_struct15group_exit_taskE_1523(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN13signal_struct15group_exit_taskE_1523_0< ::task_struct *, ::signal_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline int signal_group_exit( struct signal_struct *sig)
{
 return (__get__ZN13signal_struct5flagsE_1522(&sig->flags) & 0x00000004) ||
  (__get__ZN13signal_struct15group_exit_taskE_1523(&sig->group_exit_task) != 0);
}




struct user_struct {
  template <typename, int = 0> struct __BYPASSuser_struct {};
  template <typename, int> friend struct __BYPASSuser_struct;
 atomic_t __count;
 atomic_t processes;
 atomic_t files;
 atomic_t sigpending;

 atomic_t inotify_watches;
 atomic_t inotify_devs;


 atomic_t fanotify_listeners;


 atomic_long_t epoll_watches;



 unsigned long mq_bytes;

 unsigned long locked_shm;


 struct key *uid_keyring;
 struct key *session_keyring;



 struct hlist_node uidhash_node;
 kuid_t uid;


 atomic_long_t locked_vm;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int uids_sysfs_init(void);

extern struct user_struct *find_user(kuid_t);

extern struct user_struct root_user;



struct backing_dev_info;
struct reclaim_state;


struct sched_info {
  template <typename, int = 0> struct __BYPASSsched_info {};
  template <typename, int> friend struct __BYPASSsched_info;

 unsigned long pcount;
 unsigned long long run_delay;


 unsigned long long last_arrival,
      last_queued;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct task_delay_info {
  template <typename, int = 0> struct __BYPASStask_delay_info {};
  template <typename, int> friend struct __BYPASStask_delay_info;
 spinlock_t lock;
 unsigned int flags;
 struct timespec blkio_start, blkio_end;
 u64 blkio_delay;
 u64 swapin_delay;
 u32 blkio_count;

 u32 swapin_count;


 struct timespec freepages_start, freepages_end;
 u64 freepages_delay;
 u32 freepages_count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


static inline int sched_info_on(void)
{

 return 1;






}

enum cpu_idle_type {
 CPU_IDLE,
 CPU_NOT_IDLE,
 CPU_NEWLY_IDLE,
 CPU_MAX_IDLE_TYPES
};
extern int __attribute__((weak)) arch_sd_sibiling_asym_packing(void);

struct sched_domain_attr {
  template <typename, int = 0> struct __BYPASSsched_domain_attr {};
  template <typename, int> friend struct __BYPASSsched_domain_attr;
 int relax_domain_level;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern int sched_domain_level_max;

struct sched_group;

struct sched_domain {
  template <typename, int = 0> struct __BYPASSsched_domain {};
  template <typename, int> friend struct __BYPASSsched_domain;

 struct sched_domain *parent;
 struct sched_domain *child;
 struct sched_group *groups;
 unsigned long min_interval;
 unsigned long max_interval;
 unsigned int busy_factor;
 unsigned int imbalance_pct;
 unsigned int cache_nice_tries;
 unsigned int busy_idx;
 unsigned int idle_idx;
 unsigned int newidle_idx;
 unsigned int wake_idx;
 unsigned int forkexec_idx;
 unsigned int smt_gain;

 int nohz_idle;
 int flags;
 int level;


 unsigned long last_balance;
 unsigned int balance_interval;
 unsigned int nr_balance_failed;


 u64 max_newidle_lb_cost;
 unsigned long next_decay_max_lb_cost;



 unsigned int lb_count[CPU_MAX_IDLE_TYPES];
 unsigned int lb_failed[CPU_MAX_IDLE_TYPES];
 unsigned int lb_balanced[CPU_MAX_IDLE_TYPES];
 unsigned int lb_imbalance[CPU_MAX_IDLE_TYPES];
 unsigned int lb_gained[CPU_MAX_IDLE_TYPES];
 unsigned int lb_hot_gained[CPU_MAX_IDLE_TYPES];
 unsigned int lb_nobusyg[CPU_MAX_IDLE_TYPES];
 unsigned int lb_nobusyq[CPU_MAX_IDLE_TYPES];


 unsigned int alb_count;
 unsigned int alb_failed;
 unsigned int alb_pushed;


 unsigned int sbe_count;
 unsigned int sbe_balanced;
 unsigned int sbe_pushed;


 unsigned int sbf_count;
 unsigned int sbf_balanced;
 unsigned int sbf_pushed;


 unsigned int ttwu_wake_remote;
 unsigned int ttwu_move_affine;
 unsigned int ttwu_move_balance;


 char *name;

 union {
  void *_private;
  struct callback_head rcu;
 };

 unsigned int span_weight;







 unsigned long span[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct cpumask *sched_domain_span(struct sched_domain *sd)
{
 return ((struct cpumask *)(1 ? (sd->span) : (void *)sizeof(__check_is_bitmap(sd->span))));
}

extern void partition_sched_domains(int ndoms_new, cpumask_var_t doms_new[],
        struct sched_domain_attr *dattr_new);


cpumask_var_t *alloc_sched_domains(unsigned int ndoms);
void free_sched_domains(cpumask_var_t doms[], unsigned int ndoms);

bool cpus_share_cache(int this_cpu, int that_cpu);
struct io_context;





static inline void prefetch_stack(struct task_struct *t) { }


struct audit_context;
struct mempolicy;
struct pipe_inode_info;
struct uts_namespace;

struct load_weight {
  template <typename, int = 0> struct __BYPASSload_weight {};
  template <typename, int> friend struct __BYPASSload_weight;
 unsigned long weight;
 u32 inv_weight;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sched_avg {
  template <typename, int = 0> struct __BYPASSsched_avg {};
  template <typename, int> friend struct __BYPASSsched_avg;





 u32 runnable_avg_sum, runnable_avg_period;
 u64 last_runnable_update;
 s64 decay_count;
 unsigned long load_avg_contrib;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sched_statistics {
  template <typename, int = 0> struct __BYPASSsched_statistics {};
  template <typename, int> friend struct __BYPASSsched_statistics;
 u64 wait_start;
 u64 wait_max;
 u64 wait_count;
 u64 wait_sum;
 u64 iowait_count;
 u64 iowait_sum;

 u64 sleep_start;
 u64 sleep_max;
 s64 sum_sleep_runtime;

 u64 block_start;
 u64 block_max;
 u64 exec_max;
 u64 slice_max;

 u64 nr_migrations_cold;
 u64 nr_failed_migrations_affine;
 u64 nr_failed_migrations_running;
 u64 nr_failed_migrations_hot;
 u64 nr_forced_migrations;

 u64 nr_wakeups;
 u64 nr_wakeups_sync;
 u64 nr_wakeups_migrate;
 u64 nr_wakeups_local;
 u64 nr_wakeups_remote;
 u64 nr_wakeups_affine;
 u64 nr_wakeups_affine_attempts;
 u64 nr_wakeups_passive;
 u64 nr_wakeups_idle;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sched_entity {
  template <typename, int = 0> struct __BYPASSsched_entity {};
  template <typename, int> friend struct __BYPASSsched_entity;
 struct load_weight load;
 struct rb_node run_node;
 struct list_head group_node;
 unsigned int on_rq;

 u64 exec_start;
 u64 sum_exec_runtime;
 u64 vruntime;
 u64 prev_sum_exec_runtime;

 u64 nr_migrations;


 struct sched_statistics statistics;



 struct sched_entity *parent;

 struct cfs_rq *cfs_rq;

 struct cfs_rq *my_q;




 struct sched_avg avg;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sched_rt_entity {
  template <typename, int = 0> struct __BYPASSsched_rt_entity {};
  template <typename, int> friend struct __BYPASSsched_rt_entity;
 struct list_head run_list;
 unsigned long timeout;
 unsigned long watchdog_stamp;
 unsigned int time_slice;

 struct sched_rt_entity *back;








  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct rcu_node;

enum perf_event_task_context {
 perf_invalid_context = -1,
 perf_hw_context = 0,
 perf_sw_context,
 perf_nr_task_contexts,
};


enum _vtime {
  VTIME_SLEEPING = 0,
  VTIME_USER,
  VTIME_SYS,
};


struct task_struct {
  template <typename, int = 0> struct __BYPASStask_struct {};
  template <typename, int> friend struct __BYPASStask_struct;
 long state;
 void *stack;
 atomic_t usage;
 unsigned int flags;
 unsigned int ptrace;


 struct llist_node wake_entry;
 int on_cpu;
 struct task_struct *last_wakee;
 unsigned long wakee_flips;
 unsigned long wakee_flip_decay_ts;

 int wake_cpu;

 int on_rq;

 int prio, static_prio, normal_prio;
 unsigned int rt_priority;
 struct sched_class *sched_class;
 struct sched_entity se;
 struct sched_rt_entity rt;

 struct task_group *sched_task_group;




 struct hlist_head preempt_notifiers;



 unsigned int btrace_seq;


 unsigned int policy;
 int nr_cpus_allowed;
 cpumask_t cpus_allowed;
 struct sched_info sched_info;


 struct list_head tasks;

 struct plist_node pushable_tasks;


 struct mm_struct *mm, *active_mm;




 struct task_rss_stat rss_stat;


 int exit_state;
 int exit_code, exit_signal;
 int pdeath_signal;
 unsigned int jobctl;


 unsigned int personality;

 unsigned did_exec:1;
 unsigned in_execve:1;

 unsigned in_iowait:1;


 unsigned no_new_privs:1;


 unsigned sched_reset_on_fork:1;
 unsigned sched_contributes_to_load:1;

 pid_t pid;
 pid_t tgid;



 unsigned long stack_canary;






 struct task_struct *real_parent;
 struct task_struct *parent;



 struct list_head children;
 struct list_head sibling;
 struct task_struct *group_leader;






 struct list_head ptraced;
 struct list_head ptrace_entry;


 struct pid_link pids[PIDTYPE_MAX];
 struct list_head thread_group;

 struct completion *vfork_done;
 int *set_child_tid;
 int *clear_child_tid;

 cputime_t utime, stime, utimescaled, stimescaled;
 cputime_t gtime;

 struct cputime prev_cputime;


 seqlock_t vtime_seqlock;
 unsigned long long vtime_snap;







        enum _vtime vtime_snap_whence;


 unsigned long nvcsw, nivcsw;
 struct timespec start_time;
 struct timespec real_start_time;

 unsigned long min_flt, maj_flt;

 struct task_cputime cputime_expires;
 struct list_head cpu_timers[3];


 struct cred *real_cred;

 struct cred *cred;

 char comm[16];




 int link_count, total_link_count;


 struct sysv_sem sysvsem;



 unsigned long last_switch_count;


 struct thread_struct thread;

 struct fs_struct *fs;

 struct files_struct *files;

 struct nsproxy *nsproxy;

 struct signal_struct *signal;
 struct sighand_struct *sighand;

 sigset_t blocked, real_blocked;
 sigset_t saved_sigmask;
 struct sigpending pending;

 unsigned long sas_ss_sp;
 size_t sas_ss_size;
 int (*notifier)(void *priv);
 void *notifier_data;
 sigset_t *notifier_mask;
 struct callback_head *task_works;

 struct audit_context *audit_context;

 kuid_t loginuid;
 unsigned int sessionid;

 struct seccomp seccomp;


    u32 parent_exec_id;
    u32 self_exec_id;


 spinlock_t alloc_lock;


 raw_spinlock_t pi_lock;



 struct plist_head pi_waiters;

 struct rt_mutex_waiter *pi_blocked_on;
 void *journal_info;


 struct bio_list *bio_list;



 struct blk_plug *plug;



 struct reclaim_state *reclaim_state;

 struct backing_dev_info *backing_dev_info;

 struct io_context *io_context;

 unsigned long ptrace_message;
 siginfo_t *last_siginfo;
 struct task_io_accounting ioac;

 u64 acct_rss_mem1;
 u64 acct_vm_mem1;
 cputime_t acct_timexpd;


 nodemask_t mems_allowed;
 seqcount_t mems_allowed_seq;
 int cpuset_mem_spread_rotor;
 int cpuset_slab_spread_rotor;



 struct css_set *cgroups;

 struct list_head cg_list;


 struct robust_list_head *robust_list;

 struct compat_robust_list_head *compat_robust_list;

 struct list_head pi_state_list;
 struct futex_pi_state *pi_state_cache;


 struct perf_event_context *perf_event_ctxp[perf_nr_task_contexts];
 struct mutex perf_event_mutex;
 struct list_head perf_event_list;


 struct mempolicy *mempolicy;
 short il_next;
 short pref_node_fork;


 int numa_scan_seq;
 unsigned int numa_scan_period;
 unsigned int numa_scan_period_max;
 int numa_preferred_nid;
 int numa_migrate_deferred;
 unsigned long numa_migrate_retry;
 u64 node_stamp;
 struct callback_head numa_work;

 struct list_head numa_entry;
 struct numa_group *numa_group;






 unsigned long *numa_faults;
 unsigned long total_numa_faults;






 unsigned long *numa_faults_buffer;







 unsigned long numa_faults_locality[2];

 unsigned long numa_pages_migrated;


 struct callback_head rcu;




 struct pipe_inode_info *splice_pipe;

 struct page_frag task_frag;


 struct task_delay_info *delays;
 int nr_dirtied;
 int nr_dirtied_pause;
 unsigned long dirty_paused_when;


 int latency_record_count;
 struct latency_record latency_record[32];





 unsigned long timer_slack_ns;
 unsigned long default_timer_slack_ns;



 int curr_ret_stack;

 struct ftrace_ret_stack *ret_stack;

 unsigned long long ftrace_timestamp;




 atomic_t trace_overrun;

 atomic_t tracing_graph_pause;



 unsigned long trace;

 unsigned long trace_recursion;


 struct memcg_batch_info {
  template <typename, int = 0> struct __BYPASS_ZN11task_struct16memcg_batch_infoE {};
  template <typename, int> friend struct __BYPASS_ZN11task_struct16memcg_batch_infoE;
  int do_batch;
  struct mem_cgroup *memcg;
  unsigned long nr_pages;
  unsigned long memsw_nr_pages;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} memcg_batch;
 unsigned int memcg_kmem_skip_account;
 struct memcg_oom_info {
  template <typename, int = 0> struct __BYPASS_ZN11task_struct14memcg_oom_infoE {};
  template <typename, int> friend struct __BYPASS_ZN11task_struct14memcg_oom_infoE;
  struct mem_cgroup *memcg;
  gfp_t gfp_mask;
  int order;
  unsigned int may_oom:1;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} memcg_oom;


 struct uprobe_task *utask;


 unsigned int sequential_io;
 unsigned int sequential_io_avg;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void task_numa_fault(int last_node, int node, int pages, int flags);
extern pid_t task_numa_group_id(struct task_struct *p);
extern void set_numabalancing_state(bool enabled);
extern void task_numa_free(struct task_struct *p);

extern unsigned int sysctl_numa_balancing_migrate_deferred;

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4pidsE_1526_0 {
  typedef TJP__ZN11task_struct4pidsE_1526_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_link __get__ZN11task_struct4pidsE_1526(pid_link *source) {
  AC::ResultBuffer< ::pid_link  > __result_buffer;
  typedef TJP__ZN11task_struct4pidsE_1526_0< ::pid_link , ::task_struct , ::pid_link  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_link &)__result_buffer;
}
static inline struct pid *task_pid(struct task_struct *task)
{
 return __get__ZN11task_struct4pidsE_1526(&task->pids[PIDTYPE_PID]).pid;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4pidsE_1529_0 {
  typedef TJP__ZN11task_struct4pidsE_1529_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_link __get__ZN11task_struct4pidsE_1529(pid_link *source) {
  AC::ResultBuffer< ::pid_link  > __result_buffer;
  typedef TJP__ZN11task_struct4pidsE_1529_0< ::pid_link , ::task_struct , ::pid_link  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_link &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct12group_leaderE_1530_0 {
  typedef TJP__ZN11task_struct12group_leaderE_1530_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct12group_leaderE_1530(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct12group_leaderE_1530_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline struct pid *task_tgid(struct task_struct *task)
{
 return __get__ZN11task_struct4pidsE_1529(&__get__ZN11task_struct12group_leaderE_1530(&task->group_leader)->pids[PIDTYPE_PID]).pid;
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4pidsE_1533_0 {
  typedef TJP__ZN11task_struct4pidsE_1533_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_link __get__ZN11task_struct4pidsE_1533(pid_link *source) {
  AC::ResultBuffer< ::pid_link  > __result_buffer;
  typedef TJP__ZN11task_struct4pidsE_1533_0< ::pid_link , ::task_struct , ::pid_link  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_link &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct12group_leaderE_1534_0 {
  typedef TJP__ZN11task_struct12group_leaderE_1534_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct12group_leaderE_1534(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct12group_leaderE_1534_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline struct pid *task_pgrp(struct task_struct *task)
{
 return __get__ZN11task_struct4pidsE_1533(&__get__ZN11task_struct12group_leaderE_1534(&task->group_leader)->pids[PIDTYPE_PGID]).pid;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4pidsE_1537_0 {
  typedef TJP__ZN11task_struct4pidsE_1537_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_link __get__ZN11task_struct4pidsE_1537(pid_link *source) {
  AC::ResultBuffer< ::pid_link  > __result_buffer;
  typedef TJP__ZN11task_struct4pidsE_1537_0< ::pid_link , ::task_struct , ::pid_link  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_link &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct12group_leaderE_1538_0 {
  typedef TJP__ZN11task_struct12group_leaderE_1538_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct12group_leaderE_1538(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct12group_leaderE_1538_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline struct pid *task_session(struct task_struct *task)
{
 return __get__ZN11task_struct4pidsE_1537(&__get__ZN11task_struct12group_leaderE_1538(&task->group_leader)->pids[PIDTYPE_SID]).pid;
}

struct pid_namespace;
pid_t __task_pid_nr_ns(struct task_struct *task, enum pid_type type,
   struct pid_namespace *ns);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct3pidE_1540_0 {
  typedef TJP__ZN11task_struct3pidE_1540_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct3pidE_1540(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct3pidE_1540_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}
static inline pid_t task_pid_nr(struct task_struct *tsk)
{
 return __get__ZN11task_struct3pidE_1540(&tsk->pid);
}

static inline pid_t task_pid_nr_ns(struct task_struct *tsk,
     struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, ns);
}

static inline pid_t task_pid_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PID, 0);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4tgidE_1543_0 {
  typedef TJP__ZN11task_struct4tgidE_1543_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct4tgidE_1543(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct4tgidE_1543_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}
static inline pid_t task_tgid_nr(struct task_struct *tsk)
{
 return __get__ZN11task_struct4tgidE_1543(&tsk->tgid);
}

pid_t task_tgid_nr_ns(struct task_struct *tsk, struct pid_namespace *ns);

static inline pid_t task_tgid_vnr(struct task_struct *tsk)
{
 return pid_vnr(task_tgid(tsk));
}


static int pid_alive( struct task_struct *p);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct11real_parentE_1544_0 {
  typedef TJP__ZN11task_struct11real_parentE_1544_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct11real_parentE_1544(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct11real_parentE_1544_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline pid_t task_ppid_nr_ns( struct task_struct *tsk, struct pid_namespace *ns)
{
 pid_t pid = 0;

 ;
 if (pid_alive(tsk))
  pid = task_tgid_nr_ns((__get__ZN11task_struct11real_parentE_1544(&tsk->real_parent)), ns);
 ;

 return pid;
}

static inline pid_t task_ppid_nr( struct task_struct *tsk)
{
 return task_ppid_nr_ns(tsk, &init_pid_ns);
}

static inline pid_t task_pgrp_nr_ns(struct task_struct *tsk,
     struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, ns);
}

static inline pid_t task_pgrp_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_PGID, 0);
}


static inline pid_t task_session_nr_ns(struct task_struct *tsk,
     struct pid_namespace *ns)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, ns);
}

static inline pid_t task_session_vnr(struct task_struct *tsk)
{
 return __task_pid_nr_ns(tsk, PIDTYPE_SID, 0);
}


static inline pid_t task_pgrp_nr(struct task_struct *tsk)
{
 return task_pgrp_nr_ns(tsk, &init_pid_ns);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4pidsE_1550_0 {
  typedef TJP__ZN11task_struct4pidsE_1550_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid_link __get__ZN11task_struct4pidsE_1550(pid_link *source) {
  AC::ResultBuffer< ::pid_link  > __result_buffer;
  typedef TJP__ZN11task_struct4pidsE_1550_0< ::pid_link , ::task_struct , ::pid_link  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_link &)__result_buffer;
}
static inline int pid_alive( struct task_struct *p)
{
 return __get__ZN11task_struct4pidsE_1550(&p->pids[PIDTYPE_PID]).pid != 0;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct3pidE_1552_0 {
  typedef TJP__ZN11task_struct3pidE_1552_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct3pidE_1552(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct3pidE_1552_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}
static inline int is_global_init(struct task_struct *tsk)
{
 return __get__ZN11task_struct3pidE_1552(&tsk->pid) == 1;
}

extern struct pid *cad_pid;

extern void free_task(struct task_struct *tsk);


extern void __put_task_struct(struct task_struct *t);

static inline void put_task_struct(struct task_struct *t)
{
 if (1)
  __put_task_struct(t);
}


extern void task_cputime(struct task_struct *t,
    cputime_t *utime, cputime_t *stime);
extern void task_cputime_scaled(struct task_struct *t,
    cputime_t *utimescaled, cputime_t *stimescaled);
extern cputime_t task_gtime(struct task_struct *t);
extern void task_cputime_adjusted(struct task_struct *p, cputime_t *ut, cputime_t *st);
extern void thread_group_cputime_adjusted(struct task_struct *p, cputime_t *ut, cputime_t *st);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5flagsE_1553_0 {
  typedef TJP__ZN11task_struct5flagsE_1553_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct5flagsE_1553(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct5flagsE_1553_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline gfp_t memalloc_noio_flags(gfp_t flags)
{
 if (__builtin_expect(!!(__get__ZN11task_struct5flagsE_1553(&get_current()->flags) & 0x00080000), 0))
  flags &= ~(( gfp_t)0x40u);
 return flags;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5flagsE_1554_0 {
  typedef TJP__ZN11task_struct5flagsE_1554_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct5flagsE_1554(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct5flagsE_1554_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline unsigned int memalloc_noio_save(void)
{
 unsigned int flags = __get__ZN11task_struct5flagsE_1554(&get_current()->flags) & 0x00080000;
 get_current()->flags |= 0x00080000;
 return flags;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5flagsE_1555_0 {
  typedef TJP__ZN11task_struct5flagsE_1555_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct5flagsE_1555(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct5flagsE_1555_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void memalloc_noio_restore(unsigned int flags)
{
 get_current()->flags = (__get__ZN11task_struct5flagsE_1555(&get_current()->flags) & ~0x00080000) | flags;
}
extern bool task_set_jobctl_pending(struct task_struct *task,
        unsigned int mask);
extern void task_clear_jobctl_trapping(struct task_struct *task);
extern void task_clear_jobctl_pending(struct task_struct *task,
          unsigned int mask);
static inline void rcu_copy_process(struct task_struct *p)
{
}



static inline void tsk_restore_flags(struct task_struct *task,
    unsigned long orig_flags, unsigned long flags)
{
 task->flags &= ~flags;
 task->flags |= orig_flags & flags;
}


extern void do_set_cpus_allowed(struct task_struct *p,
          struct cpumask *new_mask);

extern int set_cpus_allowed_ptr(struct task_struct *p,
    struct cpumask *new_mask);
void calc_load_enter_idle(void);
void calc_load_exit_idle(void);






static inline int set_cpus_allowed(struct task_struct *p, cpumask_t new_mask)
{
 return set_cpus_allowed_ptr(p, &new_mask);
}
extern unsigned long long sched_clock(void);



extern u64 cpu_clock(int cpu);
extern u64 local_clock(void);
extern u64 sched_clock_cpu(int cpu);


extern void sched_clock_init(void);
extern int sched_clock_stable;

extern void sched_clock_tick(void);
extern void sched_clock_idle_sleep_event(void);
extern void sched_clock_idle_wakeup_event(u64 delta_ns);
static inline void enable_sched_clock_irqtime(void) {}
static inline void disable_sched_clock_irqtime(void) {}


extern unsigned long long
task_sched_runtime(struct task_struct *task);



extern void sched_exec(void);




extern void sched_clock_idle_sleep_event(void);
extern void sched_clock_idle_wakeup_event(u64 delta_ns);


extern void idle_task_exit(void);





extern void wake_up_nohz_cpu(int cpu);





extern bool sched_can_stop_tick(void);
extern u64 scheduler_tick_max_deferment(void);





extern void sched_autogroup_create_attach(struct task_struct *p);
extern void sched_autogroup_detach(struct task_struct *p);
extern void sched_autogroup_fork(struct signal_struct *sig);
extern void sched_autogroup_exit(struct signal_struct *sig);

extern void proc_sched_autogroup_show_task(struct task_struct *p, struct seq_file *m);
extern int proc_sched_autogroup_set_nice(struct task_struct *p, int nice);
extern bool yield_to(struct task_struct *p, bool preempt);
extern void set_user_nice(struct task_struct *p, long nice);
extern int task_prio( struct task_struct *p);
extern int task_nice( struct task_struct *p);
extern int can_nice( struct task_struct *p, int nice);
extern int task_curr( struct task_struct *p);
extern int idle_cpu(int cpu);
extern int sched_setscheduler(struct task_struct *, int,
         struct sched_param *);
extern int sched_setscheduler_nocheck(struct task_struct *, int,
          struct sched_param *);
extern struct task_struct *idle_task(int cpu);







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct3pidE_1556_0 {
  typedef TJP__ZN11task_struct3pidE_1556_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct3pidE_1556(int *source) {
  ::pid_t __result_buffer;
  typedef TJP__ZN11task_struct3pidE_1556_0< ::pid_t , ::task_struct , ::pid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid_t &)__result_buffer;
}
static inline bool is_idle_task( struct task_struct *p)
{
 return __get__ZN11task_struct3pidE_1556(&p->pid) == 0;
}
extern struct task_struct *curr_task(int cpu);
extern void set_curr_task(int cpu, struct task_struct *p);

void yield(void);




extern struct exec_domain default_exec_domain;

union thread_union {
 struct thread_info thread_info;
 unsigned long stack[(((1UL) << 12) << 1)/sizeof(long)];
};


static inline int kstack_end(void *addr)
{



 return !(((unsigned long)addr+sizeof(void*)-1) & ((((1UL) << 12) << 1)-sizeof(void*)));
}


extern union thread_union init_thread_union;
extern struct task_struct init_task;

extern struct mm_struct init_mm;

extern struct pid_namespace init_pid_ns;
extern struct task_struct *find_task_by_vpid(pid_t nr);
extern struct task_struct *find_task_by_pid_ns(pid_t nr,
  struct pid_namespace *ns);


extern struct user_struct * alloc_uid(kuid_t);
static inline struct user_struct *get_uid(struct user_struct *u)
{
 ;
 return u;
}
extern void free_uid(struct user_struct *);



extern void xtime_update(unsigned long ticks);

extern int wake_up_state(struct task_struct *tsk, unsigned int state);
extern int wake_up_process(struct task_struct *tsk);
extern void wake_up_new_task(struct task_struct *tsk);

 extern void kick_process(struct task_struct *tsk);



extern void sched_fork(unsigned long clone_flags, struct task_struct *p);
extern void sched_dead(struct task_struct *p);

extern void proc_caches_init(void);
extern void flush_signals(struct task_struct *);
extern void __flush_signals(struct task_struct *);
extern void ignore_signals(struct task_struct *);
extern void flush_signal_handlers(struct task_struct *, int force_default);
extern int dequeue_signal(struct task_struct *tsk, sigset_t *mask, siginfo_t *info);

static inline int dequeue_signal_lock(struct task_struct *tsk, sigset_t *mask, siginfo_t *info)
{
 unsigned long flags;
 int ret;

 ;
 ret = dequeue_signal(tsk, mask, info);
 ;

 return ret;
}

extern void block_all_signals(int (*notifier)(void *priv), void *priv,
         sigset_t *mask);
extern void unblock_all_signals(void);
extern void release_task(struct task_struct * p);
extern int send_sig_info(int, struct siginfo *, struct task_struct *);
extern int force_sigsegv(int, struct task_struct *);
extern int force_sig_info(int, struct siginfo *, struct task_struct *);
extern int __kill_pgrp_info(int sig, struct siginfo *info, struct pid *pgrp);
extern int kill_pid_info(int sig, struct siginfo *info, struct pid *pid);
extern int kill_pid_info_as_cred(int, struct siginfo *, struct pid *,
    struct cred *, u32);
extern int kill_pgrp(struct pid *pid, int sig, int priv);
extern int kill_pid(struct pid *pid, int sig, int priv);
extern int kill_proc_info(int, struct siginfo *, pid_t);
extern bool do_notify_parent(struct task_struct *, int);
extern void __wake_up_parent(struct task_struct *p, struct task_struct *parent);
extern void force_sig(int, struct task_struct *);
extern int send_sig(int, struct task_struct *, int);
extern int zap_other_threads(struct task_struct *p);
extern struct sigqueue *sigqueue_alloc(void);
extern void sigqueue_free(struct sigqueue *);
extern int send_sigqueue(struct sigqueue *, struct task_struct *, int group);
extern int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);

static inline void restore_saved_sigmask(void)
{
 if (test_and_clear_restore_sigmask())
  __set_current_blocked(&get_current()->saved_sigmask);
}

static inline sigset_t *sigmask_to_save(void)
{
 sigset_t *res = &get_current()->blocked;
 if (__builtin_expect(!!(test_restore_sigmask()), 0))
  res = &get_current()->saved_sigmask;
 return res;
}

static inline int kill_cad_pid(int sig, int priv)
{
 return kill_pid(cad_pid, sig, priv);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct9sas_ss_spE_1558_0 {
  typedef TJP__ZN11task_struct9sas_ss_spE_1558_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct9sas_ss_spE_1558(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN11task_struct9sas_ss_spE_1558_0< unsigned long int , ::task_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct9sas_ss_spE_1559_0 {
  typedef TJP__ZN11task_struct9sas_ss_spE_1559_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct9sas_ss_spE_1559(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN11task_struct9sas_ss_spE_1559_0< unsigned long int , ::task_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct11sas_ss_sizeE_1560_0 {
  typedef TJP__ZN11task_struct11sas_ss_sizeE_1560_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct11sas_ss_sizeE_1560(unsigned long int *source) {
  ::size_t __result_buffer;
  typedef TJP__ZN11task_struct11sas_ss_sizeE_1560_0< ::size_t , ::task_struct , ::size_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::size_t &)__result_buffer;
}
static inline int on_sig_stack(unsigned long sp)
{




 return sp > __get__ZN11task_struct9sas_ss_spE_1558(&get_current()->sas_ss_sp) &&
  sp - __get__ZN11task_struct9sas_ss_spE_1559(&get_current()->sas_ss_sp) <= __get__ZN11task_struct11sas_ss_sizeE_1560(&get_current()->sas_ss_size);

}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct11sas_ss_sizeE_1561_0 {
  typedef TJP__ZN11task_struct11sas_ss_sizeE_1561_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct11sas_ss_sizeE_1561(unsigned long int *source) {
  ::size_t __result_buffer;
  typedef TJP__ZN11task_struct11sas_ss_sizeE_1561_0< ::size_t , ::task_struct , ::size_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::size_t &)__result_buffer;
}
static inline int sas_ss_flags(unsigned long sp)
{
 return (__get__ZN11task_struct11sas_ss_sizeE_1561(&get_current()->sas_ss_size) == 0 ? 2
  : on_sig_stack(sp) ? 1 : 0);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct9sas_ss_spE_1565_0 {
  typedef TJP__ZN11task_struct9sas_ss_spE_1565_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct9sas_ss_spE_1565(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN11task_struct9sas_ss_spE_1565_0< unsigned long int , ::task_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct11sas_ss_sizeE_1566_0 {
  typedef TJP__ZN11task_struct11sas_ss_sizeE_1566_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct11sas_ss_sizeE_1566(unsigned long int *source) {
  ::size_t __result_buffer;
  typedef TJP__ZN11task_struct11sas_ss_sizeE_1566_0< ::size_t , ::task_struct , ::size_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::size_t &)__result_buffer;
}
static inline unsigned long sigsp(unsigned long sp, struct ksignal *ksig)
{
 if (__builtin_expect(!!((ksig->ka.sa.sa_flags & 0x08000000u)), 0) && ! sas_ss_flags(sp))



  return __get__ZN11task_struct9sas_ss_spE_1565(&get_current()->sas_ss_sp) + __get__ZN11task_struct11sas_ss_sizeE_1566(&get_current()->sas_ss_size);

 return sp;
}




extern struct mm_struct * mm_alloc(void);


extern void __mmdrop(struct mm_struct *);
static inline void mmdrop(struct mm_struct * mm)
{
 if (__builtin_expect(!!(1), 0))
  __mmdrop(mm);
}


extern void mmput(struct mm_struct *);

extern struct mm_struct *get_task_mm(struct task_struct *task);





extern struct mm_struct *mm_access(struct task_struct *task, unsigned int mode);

extern void mm_release(struct task_struct *, struct mm_struct *);

extern struct mm_struct *dup_mm(struct task_struct *tsk);

extern int copy_thread(unsigned long, unsigned long, unsigned long,
   struct task_struct *);
extern void flush_thread(void);
extern void exit_thread(void);

extern void exit_files(struct task_struct *);
extern void __cleanup_sighand(struct sighand_struct *);

extern void exit_itimers(struct signal_struct *);
extern void flush_itimer_signals(void);

extern void do_group_exit(int);

extern int allow_signal(int);
extern int disallow_signal(int);

extern int do_execve( char *,
       char * *,
       char * *);
extern long do_fork(unsigned long, unsigned long, unsigned long, int *, int *);
struct task_struct *fork_idle(int);
extern pid_t kernel_thread(int (*fn)(void *), void *arg, unsigned long flags);

extern void set_task_comm(struct task_struct *tsk, char *from);
extern char *get_task_comm(char *to, struct task_struct *tsk);


void scheduler_ipi(void);
extern unsigned long wait_task_inactive(struct task_struct *, long match_state);
extern bool current_is_single_threaded(void);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13signal_struct10nr_threadsE_1567_0 {
  typedef TJP__ZN13signal_struct10nr_threadsE_1567_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN13signal_struct10nr_threadsE_1567(int *source) {
  int __result_buffer;
  typedef TJP__ZN13signal_struct10nr_threadsE_1567_0< int , ::signal_struct , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6signalE_1568_0 {
  typedef TJP__ZN11task_struct6signalE_1568_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline signal_struct * __get__ZN11task_struct6signalE_1568(signal_struct * *source) {
  ::signal_struct *__result_buffer;
  typedef TJP__ZN11task_struct6signalE_1568_0< ::signal_struct *, ::task_struct , ::signal_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::signal_struct *&)__result_buffer;
}
static inline int get_nr_threads(struct task_struct *tsk)
{
 return __get__ZN13signal_struct10nr_threadsE_1567(&__get__ZN11task_struct6signalE_1568(&tsk->signal)->nr_threads);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct11exit_signalE_1569_0 {
  typedef TJP__ZN11task_struct11exit_signalE_1569_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct11exit_signalE_1569(int *source) {
  int __result_buffer;
  typedef TJP__ZN11task_struct11exit_signalE_1569_0< int , ::task_struct , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline bool thread_group_leader(struct task_struct *p)
{
 return __get__ZN11task_struct11exit_signalE_1569(&p->exit_signal) >= 0;
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13signal_struct10leader_pidE_1570_0 {
  typedef TJP__ZN13signal_struct10leader_pidE_1570_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline pid * __get__ZN13signal_struct10leader_pidE_1570(pid * *source) {
  ::pid *__result_buffer;
  typedef TJP__ZN13signal_struct10leader_pidE_1570_0< ::pid *, ::signal_struct , ::pid * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::pid *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6signalE_1571_0 {
  typedef TJP__ZN11task_struct6signalE_1571_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline signal_struct * __get__ZN11task_struct6signalE_1571(signal_struct * *source) {
  ::signal_struct *__result_buffer;
  typedef TJP__ZN11task_struct6signalE_1571_0< ::signal_struct *, ::task_struct , ::signal_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::signal_struct *&)__result_buffer;
}
static inline bool has_group_leader_pid(struct task_struct *p)
{
 return task_pid(p) == __get__ZN13signal_struct10leader_pidE_1570(&__get__ZN11task_struct6signalE_1571(&p->signal)->leader_pid);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6signalE_1572_0 {
  typedef TJP__ZN11task_struct6signalE_1572_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline signal_struct * __get__ZN11task_struct6signalE_1572(signal_struct * *source) {
  ::signal_struct *__result_buffer;
  typedef TJP__ZN11task_struct6signalE_1572_0< ::signal_struct *, ::task_struct , ::signal_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::signal_struct *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6signalE_1573_0 {
  typedef TJP__ZN11task_struct6signalE_1573_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline signal_struct * __get__ZN11task_struct6signalE_1573(signal_struct * *source) {
  ::signal_struct *__result_buffer;
  typedef TJP__ZN11task_struct6signalE_1573_0< ::signal_struct *, ::task_struct , ::signal_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::signal_struct *&)__result_buffer;
}
static inline
bool same_thread_group(struct task_struct *p1, struct task_struct *p2)
{
 return __get__ZN11task_struct6signalE_1572(&p1->signal) == __get__ZN11task_struct6signalE_1573(&p2->signal);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1574_0 {
  typedef TJP__ZN9list_head4nextE_1574_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1574(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1574_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct12thread_groupE_1575_0 {
  typedef TJP__ZN11task_struct12thread_groupE_1575_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head __get__ZN11task_struct12thread_groupE_1575(list_head *source) {
  AC::ResultBuffer< ::list_head  > __result_buffer;
  typedef TJP__ZN11task_struct12thread_groupE_1575_0< ::list_head , ::task_struct , ::list_head  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head &)__result_buffer;
}
static inline struct task_struct *next_thread( struct task_struct *p)
{
 return ({typeof (*p->thread_group.next) *__ptr = (typeof (*p->thread_group.next) *)__get__ZN9list_head4nextE_1574(&__get__ZN11task_struct12thread_groupE_1575(&p->thread_group).next); ({ typeof( ((struct task_struct *)0)->thread_group ) *__mptr = ((typeof(p->thread_group.next))(__ptr)); (struct task_struct *)( (char *)__mptr - ((size_t) &((struct task_struct *)0)->thread_group) );}); })
                                          ;
}

static inline int thread_group_empty(struct task_struct *p)
{
 return list_empty(&p->thread_group);
}
static inline void threadgroup_change_begin(struct task_struct *tsk)
{
 ;
}
static inline void threadgroup_change_end(struct task_struct *tsk)
{
 ;
}
static inline void threadgroup_lock(struct task_struct *tsk)
{
 ;
}







static inline void threadgroup_unlock(struct task_struct *tsk)
{
 ;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1576_0 {
  typedef TJP__ZN11task_struct5stackE_1576_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1576(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1576_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline void setup_thread_stack(struct task_struct *p, struct task_struct *org)
{
 *((struct thread_info *)(p)->stack) = *((struct thread_info *)__get__ZN11task_struct5stackE_1576(&(org)->stack));
 ((struct thread_info *)(p)->stack)->task = p;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1577_0 {
  typedef TJP__ZN11task_struct5stackE_1577_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1577(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1577_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline unsigned long *end_of_stack(struct task_struct *p)
{
 return (unsigned long *)(((struct thread_info *)__get__ZN11task_struct5stackE_1577(&(p)->stack)) + 1);
}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1578_0 {
  typedef TJP__ZN11task_struct5stackE_1578_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1578(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1578_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline int object_is_on_stack(void *obj)
{
 void *stack = (__get__ZN11task_struct5stackE_1578(&(get_current())->stack));

 return (obj >= stack) && (obj < (stack + (((1UL) << 12) << 1)));
}

extern void thread_info_cache_init(void);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1579_0 {
  typedef TJP__ZN11task_struct5stackE_1579_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1579(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1579_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline void set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 set_ti_thread_flag(((struct thread_info *)__get__ZN11task_struct5stackE_1579(&(tsk)->stack)), flag);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1580_0 {
  typedef TJP__ZN11task_struct5stackE_1580_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1580(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1580_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline void clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 clear_ti_thread_flag(((struct thread_info *)__get__ZN11task_struct5stackE_1580(&(tsk)->stack)), flag);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1581_0 {
  typedef TJP__ZN11task_struct5stackE_1581_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1581(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1581_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline int test_and_set_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_set_ti_thread_flag(((struct thread_info *)__get__ZN11task_struct5stackE_1581(&(tsk)->stack)), flag);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1582_0 {
  typedef TJP__ZN11task_struct5stackE_1582_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1582(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1582_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline int test_and_clear_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_and_clear_ti_thread_flag(((struct thread_info *)__get__ZN11task_struct5stackE_1582(&(tsk)->stack)), flag);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1583_0 {
  typedef TJP__ZN11task_struct5stackE_1583_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1583(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1583_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline int test_tsk_thread_flag(struct task_struct *tsk, int flag)
{
 return test_ti_thread_flag(((struct thread_info *)__get__ZN11task_struct5stackE_1583(&(tsk)->stack)), flag);
}

static inline void set_tsk_need_resched(struct task_struct *tsk)
{
 set_tsk_thread_flag(tsk,3);
}

static inline void clear_tsk_need_resched(struct task_struct *tsk)
{
 clear_tsk_thread_flag(tsk,3);
}

static inline int test_tsk_need_resched(struct task_struct *tsk)
{
 return __builtin_expect(!!(test_tsk_thread_flag(tsk,3)), 0);
}

static inline int restart_syscall(void)
{
 set_tsk_thread_flag(get_current(), 2);
 return -513;
}

static inline int signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(test_tsk_thread_flag(p,2)), 0);
}

static inline int __fatal_signal_pending(struct task_struct *p)
{
 return __builtin_expect(!!(sigismember(&p->pending.signal, 9)), 0);
}

static inline int fatal_signal_pending(struct task_struct *p)
{
 return signal_pending(p) && __fatal_signal_pending(p);
}

static inline int signal_pending_state(long state, struct task_struct *p)
{
 if (!(state & (1 | 128)))
  return 0;
 if (!signal_pending(p))
  return 0;

 return (state & 1) || __fatal_signal_pending(p);
}
extern int _cond_resched(void);






extern int __cond_resched_lock(spinlock_t *lock);
extern int __cond_resched_softirq(void);






static inline void cond_resched_rcu(void)
{

 ;
 ({ __might_sleep("../../libos/3.13.11/include/linux/sched.h", 2547, 0); _cond_resched(); });
 ;

}






static inline int spin_needbreak(spinlock_t *lock)
{



 return 0;

}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11thread_info6statusE_1584_0 {
  typedef TJP__ZN11thread_info6statusE_1584_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11thread_info6statusE_1584(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN11thread_info6statusE_1584_0< ::__u32 , ::thread_info , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1585_0 {
  typedef TJP__ZN11task_struct5stackE_1585_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1585(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1585_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline int tsk_is_polling(struct task_struct *p)
{
 return __get__ZN11thread_info6statusE_1584(&((struct thread_info *)__get__ZN11task_struct5stackE_1585(&(p)->stack))->status) & 0x0004;
}
static inline void __current_set_polling(void)
{
 current_thread_info()->status |= 0x0004;
}

static inline bool current_set_polling_and_test(void)
{
 __current_set_polling();





 asm ("mfence":::"memory");

 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 3)), 0);
}

static inline void __current_clr_polling(void)
{
 current_thread_info()->status &= ~0x0004;
}

static inline bool current_clr_polling_and_test(void)
{
 __current_clr_polling();





 asm ("mfence":::"memory");

 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 3)), 0);
}
static inline __attribute__((always_inline)) bool need_resched(void)
{
 return __builtin_expect(!!(test_ti_thread_flag(current_thread_info(), 3)), 0);
}




void thread_group_cputime(struct task_struct *tsk, struct task_cputime *times);
void thread_group_cputimer(struct task_struct *tsk, struct task_cputime *times);

static inline void thread_group_cputime_init(struct signal_struct *sig)
{
 ;
}







extern void recalc_sigpending_and_wake(struct task_struct *t);
extern void recalc_sigpending(void);

extern void signal_wake_up_state(struct task_struct *t, unsigned int state);

static inline void signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 128 : 0);
}
static inline void ptrace_signal_wake_up(struct task_struct *t, bool resume)
{
 signal_wake_up_state(t, resume ? 8 : 0);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11thread_info3cpuE_1586_0 {
  typedef TJP__ZN11thread_info3cpuE_1586_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11thread_info3cpuE_1586(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN11thread_info3cpuE_1586_0< ::__u32 , ::thread_info , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5stackE_1587_0 {
  typedef TJP__ZN11task_struct5stackE_1587_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN11task_struct5stackE_1587(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN11task_struct5stackE_1587_0< void *, ::task_struct , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline unsigned int task_cpu( struct task_struct *p)
{
 return __get__ZN11thread_info3cpuE_1586(&((struct thread_info *)__get__ZN11task_struct5stackE_1587(&(p)->stack))->cpu);
}

static inline int task_node( struct task_struct *p)
{
 return cpu_to_node(task_cpu(p));
}

extern void set_task_cpu(struct task_struct *p, unsigned int cpu);
extern long sched_setaffinity(pid_t pid, struct cpumask *new_mask);
extern long sched_getaffinity(pid_t pid, struct cpumask *mask);


extern struct task_group root_task_group;


extern int task_can_switch_user(struct user_struct *up,
     struct task_struct *tsk);


static inline void add_rchar(struct task_struct *tsk, ssize_t amt)
{
 tsk->ioac.rchar += amt;
}

static inline void add_wchar(struct task_struct *tsk, ssize_t amt)
{
 tsk->ioac.wchar += amt;
}

static inline void inc_syscr(struct task_struct *tsk)
{
 tsk->ioac.syscr++;
}

static inline void inc_syscw(struct task_struct *tsk)
{
 tsk->ioac.syscw++;
}
extern void mm_update_next_owner(struct mm_struct *mm);
extern void mm_init_owner(struct mm_struct *mm, struct task_struct *p);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13signal_struct4rlimE_1589_0 {
  typedef TJP__ZN13signal_struct4rlimE_1589_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline rlimit __get__ZN13signal_struct4rlimE_1589(rlimit *source) {
  AC::ResultBuffer< ::rlimit  > __result_buffer;
  typedef TJP__ZN13signal_struct4rlimE_1589_0< ::rlimit , ::signal_struct , ::rlimit  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::rlimit &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6signalE_1590_0 {
  typedef TJP__ZN11task_struct6signalE_1590_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline signal_struct * __get__ZN11task_struct6signalE_1590(signal_struct * *source) {
  ::signal_struct *__result_buffer;
  typedef TJP__ZN11task_struct6signalE_1590_0< ::signal_struct *, ::task_struct , ::signal_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::signal_struct *&)__result_buffer;
}
static inline unsigned long task_rlimit( struct task_struct *tsk,
  unsigned int limit)
{
 return (__get__ZN13signal_struct4rlimE_1589(&__get__ZN11task_struct6signalE_1590(&tsk->signal)->rlim[limit]).rlim_cur);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13signal_struct4rlimE_1592_0 {
  typedef TJP__ZN13signal_struct4rlimE_1592_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline rlimit __get__ZN13signal_struct4rlimE_1592(rlimit *source) {
  AC::ResultBuffer< ::rlimit  > __result_buffer;
  typedef TJP__ZN13signal_struct4rlimE_1592_0< ::rlimit , ::signal_struct , ::rlimit  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::rlimit &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6signalE_1593_0 {
  typedef TJP__ZN11task_struct6signalE_1593_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline signal_struct * __get__ZN11task_struct6signalE_1593(signal_struct * *source) {
  ::signal_struct *__result_buffer;
  typedef TJP__ZN11task_struct6signalE_1593_0< ::signal_struct *, ::task_struct , ::signal_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::signal_struct *&)__result_buffer;
}
static inline unsigned long task_rlimit_max( struct task_struct *tsk,
  unsigned int limit)
{
 return (__get__ZN13signal_struct4rlimE_1592(&__get__ZN11task_struct6signalE_1593(&tsk->signal)->rlim[limit]).rlim_max);
}




static inline unsigned long _rlimit(unsigned int limit)

{
 return task_rlimit(get_current(), limit);
}

static inline unsigned long rlimit_max(unsigned int limit)
{
 return task_rlimit_max(get_current(), limit);
}







struct user_i387_ia32_struct {
  template <typename, int = 0> struct __BYPASSuser_i387_ia32_struct {};
  template <typename, int> friend struct __BYPASSuser_i387_ia32_struct;
 u32 cwd;
 u32 swd;
 u32 twd;
 u32 fip;
 u32 fcs;
 u32 foo;
 u32 fos;
 u32 st_space[20];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct user32_fxsr_struct {
  template <typename, int = 0> struct __BYPASSuser32_fxsr_struct {};
  template <typename, int> friend struct __BYPASSuser32_fxsr_struct;
 unsigned short cwd;
 unsigned short swd;
 unsigned short twd;
 unsigned short fop;
 int fip;
 int fcs;
 int foo;
 int fos;
 int mxcsr;
 int reserved;
 int st_space[32];
 int xmm_space[32];
 int padding[56];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct user_regs_struct32 {
  template <typename, int = 0> struct __BYPASSuser_regs_struct32 {};
  template <typename, int> friend struct __BYPASSuser_regs_struct32;
 __u32 ebx, ecx, edx, esi, edi, ebp, eax;
 unsigned short ds, __ds, es, __es;
 unsigned short fs, __fs, gs, __gs;
 __u32 orig_eax, eip;
 unsigned short cs, __cs;
 __u32 eflags, esp;
 unsigned short ss, __ss;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct user32 {
  template <typename, int = 0> struct __BYPASSuser32 {};
  template <typename, int> friend struct __BYPASSuser32;
  struct user_regs_struct32 regs;
  int u_fpvalid;

  struct user_i387_ia32_struct i387;

  __u32 u_tsize;
  __u32 u_dsize;
  __u32 u_ssize;
  __u32 start_code;
  __u32 start_stack;



  __u32 signal;
  int reserved;
  __u32 u_ar0;

  __u32 u_fpstate;
  __u32 magic;
  char u_comm[32];
  int u_debugreg[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





typedef u32 compat_size_t;
typedef s32 compat_ssize_t;
typedef s32 compat_time_t;
typedef s32 compat_clock_t;
typedef s32 compat_pid_t;
typedef u16 __compat_uid_t;
typedef u16 __compat_gid_t;
typedef u32 __compat_uid32_t;
typedef u32 __compat_gid32_t;
typedef u16 compat_mode_t;
typedef u32 compat_ino_t;
typedef u16 compat_dev_t;
typedef s32 compat_off_t;
typedef s64 compat_loff_t;
typedef u16 compat_nlink_t;
typedef u16 compat_ipc_pid_t;
typedef s32 compat_daddr_t;
typedef u32 compat_caddr_t;
typedef __kernel_fsid_t compat_fsid_t;
typedef s32 compat_timer_t;
typedef s32 compat_key_t;

typedef s32 compat_int_t;
typedef s32 compat_long_t;
typedef s64 __attribute__((aligned(4))) compat_s64;
typedef u32 compat_uint_t;
typedef u32 compat_ulong_t;
typedef u64 __attribute__((aligned(4))) compat_u64;
typedef u32 compat_uptr_t;

struct compat_timespec {
  template <typename, int = 0> struct __BYPASScompat_timespec {};
  template <typename, int> friend struct __BYPASScompat_timespec;
 compat_time_t tv_sec;
 s32 tv_nsec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_timeval {
  template <typename, int = 0> struct __BYPASScompat_timeval {};
  template <typename, int> friend struct __BYPASScompat_timeval;
 compat_time_t tv_sec;
 s32 tv_usec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_stat {
  template <typename, int = 0> struct __BYPASScompat_stat {};
  template <typename, int> friend struct __BYPASScompat_stat;
 compat_dev_t st_dev;
 u16 __pad1;
 compat_ino_t st_ino;
 compat_mode_t st_mode;
 compat_nlink_t st_nlink;
 __compat_uid_t st_uid;
 __compat_gid_t st_gid;
 compat_dev_t st_rdev;
 u16 __pad2;
 u32 st_size;
 u32 st_blksize;
 u32 st_blocks;
 u32 st_atime;
 u32 st_atime_nsec;
 u32 st_mtime;
 u32 st_mtime_nsec;
 u32 st_ctime;
 u32 st_ctime_nsec;
 u32 __unused4;
 u32 __unused5;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_flock {
  template <typename, int = 0> struct __BYPASScompat_flock {};
  template <typename, int> friend struct __BYPASScompat_flock;
 short l_type;
 short l_whence;
 compat_off_t l_start;
 compat_off_t l_len;
 compat_pid_t l_pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct compat_flock64 {
  template <typename, int = 0> struct __BYPASScompat_flock64 {};
  template <typename, int> friend struct __BYPASScompat_flock64;
 short l_type;
 short l_whence;
 compat_loff_t l_start;
 compat_loff_t l_len;
 compat_pid_t l_pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

struct compat_statfs {
  template <typename, int = 0> struct __BYPASScompat_statfs {};
  template <typename, int> friend struct __BYPASScompat_statfs;
 int f_type;
 int f_bsize;
 int f_blocks;
 int f_bfree;
 int f_bavail;
 int f_files;
 int f_ffree;
 compat_fsid_t f_fsid;
 int f_namelen;
 int f_frsize;
 int f_flags;
 int f_spare[4];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




typedef u32 compat_old_sigset_t;




typedef u32 compat_sigset_word;

typedef union compat_sigval {
 compat_int_t sival_int;
 compat_uptr_t sival_ptr;
} compat_sigval_t;

typedef struct compat_siginfo {
  template <typename, int = 0> struct __BYPASScompat_siginfo {};
  template <typename, int> friend struct __BYPASScompat_siginfo;
 int si_signo;
 int si_errno;
 int si_code;

 union {
  int _pad[128/sizeof(int) - 3];


  struct {
   unsigned int _pid;
   unsigned int _uid;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _kill;


  struct {
   compat_timer_t _tid;
   int _overrun;
   compat_sigval_t _sigval;
   int _sys_private;
   int _overrun_incr;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _timer;


  struct {
   unsigned int _pid;
   unsigned int _uid;
   compat_sigval_t _sigval;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _rt;


  struct {
   unsigned int _pid;
   unsigned int _uid;
   int _status;
   compat_clock_t _utime;
   compat_clock_t _stime;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigchld;


  struct {
   unsigned int _pid;
   unsigned int _uid;
   int _status;
   compat_s64 _utime;
   compat_s64 _stime;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigchld_x32;


  struct {
   unsigned int _addr;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigfault;


  struct {
   int _band;
   int _fd;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigpoll;

  struct {
   unsigned int _call_addr;
   int _syscall;
   unsigned int _arch;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigsys;
 } _sifields;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} compat_siginfo_t;




struct compat_ipc64_perm {
  template <typename, int = 0> struct __BYPASScompat_ipc64_perm {};
  template <typename, int> friend struct __BYPASScompat_ipc64_perm;
 compat_key_t key;
 __compat_uid32_t uid;
 __compat_gid32_t gid;
 __compat_uid32_t cuid;
 __compat_gid32_t cgid;
 unsigned short mode;
 unsigned short __pad1;
 unsigned short seq;
 unsigned short __pad2;
 compat_ulong_t unused1;
 compat_ulong_t unused2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_semid64_ds {
  template <typename, int = 0> struct __BYPASScompat_semid64_ds {};
  template <typename, int> friend struct __BYPASScompat_semid64_ds;
 struct compat_ipc64_perm sem_perm;
 compat_time_t sem_otime;
 compat_ulong_t __unused1;
 compat_time_t sem_ctime;
 compat_ulong_t __unused2;
 compat_ulong_t sem_nsems;
 compat_ulong_t __unused3;
 compat_ulong_t __unused4;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_msqid64_ds {
  template <typename, int = 0> struct __BYPASScompat_msqid64_ds {};
  template <typename, int> friend struct __BYPASScompat_msqid64_ds;
 struct compat_ipc64_perm msg_perm;
 compat_time_t msg_stime;
 compat_ulong_t __unused1;
 compat_time_t msg_rtime;
 compat_ulong_t __unused2;
 compat_time_t msg_ctime;
 compat_ulong_t __unused3;
 compat_ulong_t msg_cbytes;
 compat_ulong_t msg_qnum;
 compat_ulong_t msg_qbytes;
 compat_pid_t msg_lspid;
 compat_pid_t msg_lrpid;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_shmid64_ds {
  template <typename, int = 0> struct __BYPASScompat_shmid64_ds {};
  template <typename, int> friend struct __BYPASScompat_shmid64_ds;
 struct compat_ipc64_perm shm_perm;
 compat_size_t shm_segsz;
 compat_time_t shm_atime;
 compat_ulong_t __unused1;
 compat_time_t shm_dtime;
 compat_ulong_t __unused2;
 compat_time_t shm_ctime;
 compat_ulong_t __unused3;
 compat_pid_t shm_cpid;
 compat_pid_t shm_lpid;
 compat_ulong_t shm_nattch;
 compat_ulong_t __unused4;
 compat_ulong_t __unused5;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
typedef struct user_regs_struct32 compat_elf_gregset_t;
static inline void *compat_ptr(compat_uptr_t uptr)
{
 return (void *)(unsigned long)uptr;
}

static inline compat_uptr_t ptr_to_compat(void *uptr)
{
 return (u32)(unsigned long)uptr;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2spE_1594_0 {
  typedef TJP__ZN7pt_regs2spE_1594_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2spE_1594(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2spE_1594_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13thread_struct3sp0E_1595_0 {
  typedef TJP__ZN13thread_struct3sp0E_1595_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN13thread_struct3sp0E_1595(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN13thread_struct3sp0E_1595_0< unsigned long int , ::thread_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6threadE_1596_0 {
  typedef TJP__ZN11task_struct6threadE_1596_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline thread_struct __get__ZN11task_struct6threadE_1596(thread_struct *source) {
  AC::ResultBuffer< ::thread_struct  > __result_buffer;
  typedef TJP__ZN11task_struct6threadE_1596_0< ::thread_struct , ::task_struct , ::thread_struct  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::thread_struct &)__result_buffer;
}
static inline void *arch_compat_alloc_user_space(long len)
{
 compat_uptr_t sp;

 if (test_ti_thread_flag(current_thread_info(), 17)) {
  sp = __get__ZN7pt_regs2spE_1594(&((struct pt_regs *)__get__ZN13thread_struct3sp0E_1595(&__get__ZN11task_struct6threadE_1596(&(get_current())->thread).sp0) - 1)->sp);
 } else {

  sp = ({ typeof((old_rsp)) pscr_ret__; do { void *__vpp_verify = (typeof((&((old_rsp))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((old_rsp))) { case 1: pscr_ret__ = ({ typeof(((old_rsp))) pfo_ret__; switch (sizeof(((old_rsp)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((old_rsp))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 2: pscr_ret__ = ({ typeof(((old_rsp))) pfo_ret__; switch (sizeof(((old_rsp)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((old_rsp))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 4: pscr_ret__ = ({ typeof(((old_rsp))) pfo_ret__; switch (sizeof(((old_rsp)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((old_rsp))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 8: pscr_ret__ = ({ typeof(((old_rsp))) pfo_ret__; switch (sizeof(((old_rsp)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((old_rsp))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((old_rsp))); break; default: __bad_percpu_size(); } pfo_ret__; });break; default: __bad_size_call_parameter();break; } pscr_ret__; }) - 128;
 }

 return (void *)((sp - len) & ~((__typeof__(sp - len))((16)-1)));
}

static inline bool is_x32_task(void)
{




 return _false;
}

static inline bool is_compat_task(void)
{
 return is_ia32_task() || is_x32_task();
}
typedef struct compat_sigaltstack {
  template <typename, int = 0> struct __BYPASScompat_sigaltstack {};
  template <typename, int> friend struct __BYPASScompat_sigaltstack;
 compat_uptr_t ss_sp;
 int ss_flags;
 compat_size_t ss_size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} compat_stack_t;





typedef __compat_uid32_t compat_uid_t;
typedef __compat_gid32_t compat_gid_t;

struct compat_sel_arg_struct;
struct rusage;

struct compat_itimerspec {
  template <typename, int = 0> struct __BYPASScompat_itimerspec {};
  template <typename, int> friend struct __BYPASScompat_itimerspec;
 struct compat_timespec it_interval;
 struct compat_timespec it_value;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_utimbuf {
  template <typename, int = 0> struct __BYPASScompat_utimbuf {};
  template <typename, int> friend struct __BYPASScompat_utimbuf;
 compat_time_t actime;
 compat_time_t modtime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_itimerval {
  template <typename, int = 0> struct __BYPASScompat_itimerval {};
  template <typename, int> friend struct __BYPASScompat_itimerval;
 struct compat_timeval it_interval;
 struct compat_timeval it_value;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_tms {
  template <typename, int = 0> struct __BYPASScompat_tms {};
  template <typename, int> friend struct __BYPASScompat_tms;
 compat_clock_t tms_utime;
 compat_clock_t tms_stime;
 compat_clock_t tms_cutime;
 compat_clock_t tms_cstime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_timex {
  template <typename, int = 0> struct __BYPASScompat_timex {};
  template <typename, int> friend struct __BYPASScompat_timex;
 compat_uint_t modes;
 compat_long_t offset;
 compat_long_t freq;
 compat_long_t maxerror;
 compat_long_t esterror;
 compat_int_t status;
 compat_long_t constant;
 compat_long_t precision;
 compat_long_t tolerance;
 struct compat_timeval time;
 compat_long_t tick;
 compat_long_t ppsfreq;
 compat_long_t jitter;
 compat_int_t shift;
 compat_long_t stabil;
 compat_long_t jitcnt;
 compat_long_t calcnt;
 compat_long_t errcnt;
 compat_long_t stbcnt;
 compat_int_t tai;

 compat_int_t:32; compat_int_t:32; compat_int_t:32; compat_int_t:32;
 compat_int_t:32; compat_int_t:32; compat_int_t:32; compat_int_t:32;
 compat_int_t:32; compat_int_t:32; compat_int_t:32;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



typedef struct {
 compat_sigset_word sig[(64 / 32)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
} compat_sigset_t;

struct compat_sigaction {
  template <typename, int = 0> struct __BYPASScompat_sigaction {};
  template <typename, int> friend struct __BYPASScompat_sigaction;

 compat_uptr_t sa_handler;
 compat_ulong_t sa_flags;





 compat_uptr_t sa_restorer;

 compat_sigset_t sa_mask __attribute__((packed));

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern int get_compat_timespec(struct timespec *,
          struct compat_timespec *);
extern int put_compat_timespec( struct timespec *,
          struct compat_timespec *);
extern int get_compat_timeval(struct timeval *,
         struct compat_timeval *);
extern int put_compat_timeval( struct timeval *,
         struct compat_timeval *);





extern int compat_get_timespec(struct timespec *, void *);
extern int compat_put_timespec( struct timespec *, void *);
extern int compat_get_timeval(struct timeval *, void *);
extern int compat_put_timeval( struct timeval *, void *);

struct compat_iovec {
  template <typename, int = 0> struct __BYPASScompat_iovec {};
  template <typename, int> friend struct __BYPASScompat_iovec;
 compat_uptr_t iov_base;
 compat_size_t iov_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_rlimit {
  template <typename, int = 0> struct __BYPASScompat_rlimit {};
  template <typename, int> friend struct __BYPASScompat_rlimit;
 compat_ulong_t rlim_cur;
 compat_ulong_t rlim_max;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_rusage {
  template <typename, int = 0> struct __BYPASScompat_rusage {};
  template <typename, int> friend struct __BYPASScompat_rusage;
 struct compat_timeval ru_utime;
 struct compat_timeval ru_stime;
 compat_long_t ru_maxrss;
 compat_long_t ru_ixrss;
 compat_long_t ru_idrss;
 compat_long_t ru_isrss;
 compat_long_t ru_minflt;
 compat_long_t ru_majflt;
 compat_long_t ru_nswap;
 compat_long_t ru_inblock;
 compat_long_t ru_oublock;
 compat_long_t ru_msgsnd;
 compat_long_t ru_msgrcv;
 compat_long_t ru_nsignals;
 compat_long_t ru_nvcsw;
 compat_long_t ru_nivcsw;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int put_compat_rusage( struct rusage *,
        struct compat_rusage *);

struct compat_siginfo;

extern long compat_sys_waitid(int, compat_pid_t,
  struct compat_siginfo *, int,
  struct compat_rusage *);

struct compat_dirent {
  template <typename, int = 0> struct __BYPASScompat_dirent {};
  template <typename, int> friend struct __BYPASScompat_dirent;
 u32 d_ino;
 compat_off_t d_off;
 u16 d_reclen;
 char d_name[256];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_ustat {
  template <typename, int = 0> struct __BYPASScompat_ustat {};
  template <typename, int> friend struct __BYPASScompat_ustat;
 compat_daddr_t f_tfree;
 compat_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



typedef struct compat_sigevent {
  template <typename, int = 0> struct __BYPASScompat_sigevent {};
  template <typename, int> friend struct __BYPASScompat_sigevent;
 compat_sigval_t sigev_value;
 compat_int_t sigev_signo;
 compat_int_t sigev_notify;
 union {
  compat_int_t _pad[((64/sizeof(int)) - 3)];
  compat_int_t _tid;

  struct {
   compat_uptr_t _function;
   compat_uptr_t _attribute;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} _sigev_thread;
 } _sigev_un;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} compat_sigevent_t;

struct compat_ifmap {
  template <typename, int = 0> struct __BYPASScompat_ifmap {};
  template <typename, int> friend struct __BYPASScompat_ifmap;
 compat_ulong_t mem_start;
 compat_ulong_t mem_end;
 unsigned short base_addr;
 unsigned char irq;
 unsigned char dma;
 unsigned char port;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_if_settings {
  template <typename, int = 0> struct __BYPASScompat_if_settings {};
  template <typename, int> friend struct __BYPASScompat_if_settings;
 unsigned int type;
 unsigned int size;
 compat_uptr_t ifs_ifsu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_ifreq {
  template <typename, int = 0> struct __BYPASScompat_ifreq {};
  template <typename, int> friend struct __BYPASScompat_ifreq;
 union {
  char ifrn_name[16];
 } ifr_ifrn;
 union {
  struct sockaddr ifru_addr;
  struct sockaddr ifru_dstaddr;
  struct sockaddr ifru_broadaddr;
  struct sockaddr ifru_netmask;
  struct sockaddr ifru_hwaddr;
  short ifru_flags;
  compat_int_t ifru_ivalue;
  compat_int_t ifru_mtu;
  struct compat_ifmap ifru_map;
  char ifru_slave[16];
  char ifru_newname[16];
  compat_caddr_t ifru_data;
  struct compat_if_settings ifru_settings;
 } ifr_ifru;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_ifconf {
  template <typename, int = 0> struct __BYPASScompat_ifconf {};
  template <typename, int> friend struct __BYPASScompat_ifconf;
 compat_int_t ifc_len;
 compat_caddr_t ifcbuf;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_robust_list {
  template <typename, int = 0> struct __BYPASScompat_robust_list {};
  template <typename, int> friend struct __BYPASScompat_robust_list;
 compat_uptr_t next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_robust_list_head {
  template <typename, int = 0> struct __BYPASScompat_robust_list_head {};
  template <typename, int> friend struct __BYPASScompat_robust_list_head;
 struct compat_robust_list list;
 compat_long_t futex_offset;
 compat_uptr_t list_op_pending;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct compat_old_sigaction {
  template <typename, int = 0> struct __BYPASScompat_old_sigaction {};
  template <typename, int> friend struct __BYPASScompat_old_sigaction;
 compat_uptr_t sa_handler;
 compat_old_sigset_t sa_mask;
 compat_ulong_t sa_flags;
 compat_uptr_t sa_restorer;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct compat_statfs;
struct compat_statfs64;
struct compat_old_linux_dirent;
struct compat_linux_dirent;
struct linux_dirent64;
struct compat_msghdr;
struct compat_mmsghdr;
struct compat_sysinfo;
struct compat_sysctl_args;
struct compat_kexec_segment;
struct compat_mq_attr;
struct compat_msgbuf;

extern void compat_exit_robust_list(struct task_struct *curr);

 long
compat_sys_set_robust_list(struct compat_robust_list_head *head,
      compat_size_t len);
 long
compat_sys_get_robust_list(int pid, compat_uptr_t *head_ptr,
      compat_size_t *len_ptr);

 long compat_sys_ipc(u32, int, int, u32, compat_uptr_t, u32);
 long compat_sys_shmat(int shmid, compat_uptr_t shmaddr, int shmflg);
 long compat_sys_semctl(int semid, int semnum, int cmd, int arg);
 long compat_sys_msgsnd(int msqid, compat_uptr_t msgp,
  compat_ssize_t msgsz, int msgflg);
 long compat_sys_msgrcv(int msqid, compat_uptr_t msgp,
  compat_ssize_t msgsz, long msgtyp, int msgflg);
long compat_sys_msgctl(int first, int second, void *uptr);
long compat_sys_shmctl(int first, int second, void *uptr);
long compat_sys_semtimedop(int semid, struct sembuf *tsems,
  unsigned nsems, struct compat_timespec *timeout);
 long compat_sys_keyctl(u32 option,
         u32 arg2, u32 arg3, u32 arg4, u32 arg5);
 long compat_sys_ustat(unsigned dev, struct compat_ustat *u32);

 ssize_t compat_sys_readv(compat_ulong_t fd,
  struct compat_iovec *vec, compat_ulong_t vlen);
 ssize_t compat_sys_writev(compat_ulong_t fd,
  struct compat_iovec *vec, compat_ulong_t vlen);
 ssize_t compat_sys_preadv(compat_ulong_t fd,
  struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high);
 ssize_t compat_sys_pwritev(compat_ulong_t fd,
  struct compat_iovec *vec,
  compat_ulong_t vlen, u32 pos_low, u32 pos_high);
 long comat_sys_lseek(unsigned int, compat_off_t, unsigned int);

 long compat_sys_execve( char *filename, compat_uptr_t *argv,
       compat_uptr_t *envp);

 long compat_sys_select(int n, compat_ulong_t *inp,
  compat_ulong_t *outp, compat_ulong_t *exp,
  struct compat_timeval *tvp);

 long compat_sys_old_select(struct compat_sel_arg_struct *arg);

 long compat_sys_wait4(compat_pid_t pid,
     compat_uint_t *stat_addr, int options,
     struct compat_rusage *ru);






long compat_get_bitmap(unsigned long *mask, compat_ulong_t *umask,
         unsigned long bitmap_size);
long compat_put_bitmap(compat_ulong_t *umask, unsigned long *mask,
         unsigned long bitmap_size);
int copy_siginfo_from_user32(siginfo_t *to, struct compat_siginfo *from);
int copy_siginfo_to_user32(struct compat_siginfo *to, siginfo_t *from);
int get_compat_sigevent(struct sigevent *event,
  struct compat_sigevent *u_event);
long compat_sys_rt_tgsigqueueinfo(compat_pid_t tgid, compat_pid_t pid, int sig,
      struct compat_siginfo *uinfo);

 long compat_sys_sigaction(int sig,
                                   struct compat_old_sigaction *act,
                                   struct compat_old_sigaction *oact);


static inline int compat_timeval_compare(struct compat_timeval *lhs,
     struct compat_timeval *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_usec - rhs->tv_usec;
}

static inline int compat_timespec_compare(struct compat_timespec *lhs,
     struct compat_timespec *rhs)
{
 if (lhs->tv_sec < rhs->tv_sec)
  return -1;
 if (lhs->tv_sec > rhs->tv_sec)
  return 1;
 return lhs->tv_nsec - rhs->tv_nsec;
}

extern int get_compat_itimerspec(struct itimerspec *dst,
     struct compat_itimerspec *src);
extern int put_compat_itimerspec(struct compat_itimerspec *dst,
     struct itimerspec *src);

 long compat_sys_gettimeofday(struct compat_timeval *tv,
  struct timezone *tz);
 long compat_sys_settimeofday(struct compat_timeval *tv,
  struct timezone *tz);

 long compat_sys_adjtimex(struct compat_timex *utp);

extern int compat_printk( char *fmt, ...);
extern void sigset_from_compat(sigset_t *set, compat_sigset_t *compat);
extern void sigset_to_compat(compat_sigset_t *compat, sigset_t *set);

 long compat_sys_migrate_pages(compat_pid_t pid,
  compat_ulong_t maxnode, compat_ulong_t *old_nodes,
  compat_ulong_t *new_nodes);

extern int compat_ptrace_request(struct task_struct *child,
     compat_long_t request,
     compat_ulong_t addr, compat_ulong_t data);

extern long compat_arch_ptrace(struct task_struct *child, compat_long_t request,
          compat_ulong_t addr, compat_ulong_t data);
 long compat_sys_ptrace(compat_long_t request, compat_long_t pid,
      compat_long_t addr, compat_long_t data);

 long compat_sys_lookup_dcookie(u32, u32, char *, compat_size_t);



struct epoll_event;
 long compat_sys_epoll_pwait(int epfd,
   struct epoll_event *events,
   int maxevents, int timeout,
   compat_sigset_t *sigmask,
   compat_size_t sigsetsize);

 long compat_sys_utime( char *filename,
     struct compat_utimbuf *t);
 long compat_sys_utimensat(unsigned int dfd,
         char *filename,
         struct compat_timespec *t,
         int flags);

 long compat_sys_time(compat_time_t *tloc);
 long compat_sys_stime(compat_time_t *tptr);
 long compat_sys_signalfd(int ufd,
        compat_sigset_t *sigmask,
        compat_size_t sigsetsize);
 long compat_sys_timerfd_settime(int ufd, int flags,
       struct compat_itimerspec *utmr,
       struct compat_itimerspec *otmr);
 long compat_sys_timerfd_gettime(int ufd,
       struct compat_itimerspec *otmr);

 long compat_sys_move_pages(pid_t pid, unsigned long nr_page,
          __u32 *pages,
          int *nodes,
          int *status,
          int flags);
 long compat_sys_futimesat(unsigned int dfd,
         char *filename,
         struct compat_timeval *t);
 long compat_sys_utimes( char *filename,
      struct compat_timeval *t);
 long compat_sys_newstat( char *filename,
       struct compat_stat *statbuf);
 long compat_sys_newlstat( char *filename,
        struct compat_stat *statbuf);
 long compat_sys_newfstatat(unsigned int dfd,
          char *filename,
          struct compat_stat *statbuf,
          int flag);
 long compat_sys_newfstat(unsigned int fd,
        struct compat_stat *statbuf);
 long compat_sys_statfs( char *pathname,
      struct compat_statfs *buf);
 long compat_sys_fstatfs(unsigned int fd,
       struct compat_statfs *buf);
 long compat_sys_statfs64( char *pathname,
        compat_size_t sz,
        struct compat_statfs64 *buf);
 long compat_sys_fstatfs64(unsigned int fd, compat_size_t sz,
         struct compat_statfs64 *buf);
 long compat_sys_fcntl64(unsigned int fd, unsigned int cmd,
       unsigned long arg);
 long compat_sys_fcntl(unsigned int fd, unsigned int cmd,
     unsigned long arg);
 long compat_sys_io_setup(unsigned nr_reqs, u32 *ctx32p);
 long compat_sys_io_getevents(aio_context_t ctx_id,
     unsigned long min_nr,
     unsigned long nr,
     struct io_event *events,
     struct compat_timespec *timeout);
 long compat_sys_io_submit(aio_context_t ctx_id, int nr,
         u32 *iocb);
 long compat_sys_mount( char *dev_name,
     char *dir_name,
     char *type, unsigned long flags,
     void *data);
 long compat_sys_old_readdir(unsigned int fd,
           struct compat_old_linux_dirent *,
           unsigned int count);
 long compat_sys_getdents(unsigned int fd,
        struct compat_linux_dirent *dirent,
        unsigned int count);
 long compat_sys_getdents64(unsigned int fd,
          struct linux_dirent64 *dirent,
          unsigned int count);
 long compat_sys_vmsplice(int fd, struct compat_iovec *,
        unsigned int nr_segs, unsigned int flags);
 long compat_sys_open( char *filename, int flags,
    umode_t mode);
 long compat_sys_openat(int dfd, char *filename,
      int flags, umode_t mode);
 long compat_sys_open_by_handle_at(int mountdirfd,
          struct file_handle *handle,
          int flags);
 long compat_sys_truncate( char *, compat_off_t);
 long compat_sys_ftruncate(unsigned int, compat_ulong_t);
 long compat_sys_pselect6(int n, compat_ulong_t *inp,
        compat_ulong_t *outp,
        compat_ulong_t *exp,
        struct compat_timespec *tsp,
        void *sig);
 long compat_sys_ppoll(struct pollfd *ufds,
     unsigned int nfds,
     struct compat_timespec *tsp,
     compat_sigset_t *sigmask,
     compat_size_t sigsetsize);
 long compat_sys_signalfd4(int ufd,
         compat_sigset_t *sigmask,
         compat_size_t sigsetsize, int flags);
 long compat_sys_get_mempolicy(int *policy,
      compat_ulong_t *nmask,
      compat_ulong_t maxnode,
      compat_ulong_t addr,
      compat_ulong_t flags);
 long compat_sys_set_mempolicy(int mode, compat_ulong_t *nmask,
      compat_ulong_t maxnode);
 long compat_sys_mbind(compat_ulong_t start, compat_ulong_t len,
     compat_ulong_t mode,
     compat_ulong_t *nmask,
     compat_ulong_t maxnode, compat_ulong_t flags);

 long compat_sys_setsockopt(int fd, int level, int optname,
          char *optval, unsigned int optlen);
 long compat_sys_sendmsg(int fd, struct compat_msghdr *msg,
       unsigned flags);
 long compat_sys_sendmmsg(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags);
 long compat_sys_recvmsg(int fd, struct compat_msghdr *msg,
       unsigned int flags);
 long compat_sys_recv(int fd, void *buf, size_t len,
    unsigned flags);
 long compat_sys_recvfrom(int fd, void *buf, size_t len,
       unsigned flags, struct sockaddr *addr,
       int *addrlen);
 long compat_sys_recvmmsg(int fd, struct compat_mmsghdr *mmsg,
        unsigned vlen, unsigned int flags,
        struct compat_timespec *timeout);
 long compat_sys_nanosleep(struct compat_timespec *rqtp,
         struct compat_timespec *rmtp);
 long compat_sys_getitimer(int which,
         struct compat_itimerval *it);
 long compat_sys_setitimer(int which,
         struct compat_itimerval *in,
         struct compat_itimerval *out);
 long compat_sys_times(struct compat_tms *tbuf);
 long compat_sys_setrlimit(unsigned int resource,
         struct compat_rlimit *rlim);
 long compat_sys_getrlimit(unsigned int resource,
         struct compat_rlimit *rlim);
 long compat_sys_getrusage(int who, struct compat_rusage *ru);
 long compat_sys_sched_setaffinity(compat_pid_t pid,
         unsigned int len,
         compat_ulong_t *user_mask_ptr);
 long compat_sys_sched_getaffinity(compat_pid_t pid,
         unsigned int len,
         compat_ulong_t *user_mask_ptr);
 long compat_sys_timer_create(clockid_t which_clock,
   struct compat_sigevent *timer_event_spec,
   timer_t *created_timer_id);
 long compat_sys_timer_settime(timer_t timer_id, int flags,
      struct compat_itimerspec *_new,
      struct compat_itimerspec *old);
 long compat_sys_timer_gettime(timer_t timer_id,
     struct compat_itimerspec *setting);
 long compat_sys_clock_settime(clockid_t which_clock,
      struct compat_timespec *tp);
 long compat_sys_clock_gettime(clockid_t which_clock,
      struct compat_timespec *tp);
 long compat_sys_clock_adjtime(clockid_t which_clock,
      struct compat_timex *tp);
 long compat_sys_clock_getres(clockid_t which_clock,
     struct compat_timespec *tp);
 long compat_sys_clock_nanosleep(clockid_t which_clock, int flags,
        struct compat_timespec *rqtp,
        struct compat_timespec *rmtp);
 long compat_sys_rt_sigtimedwait(compat_sigset_t *uthese,
  struct compat_siginfo *uinfo,
  struct compat_timespec *uts, compat_size_t sigsetsize);
 long compat_sys_rt_sigsuspend(compat_sigset_t *unewset,
      compat_size_t sigsetsize);
 long compat_sys_rt_sigprocmask(int how, compat_sigset_t *set,
       compat_sigset_t *oset,
       compat_size_t sigsetsize);
 long compat_sys_rt_sigpending(compat_sigset_t *uset,
      compat_size_t sigsetsize);

 long compat_sys_rt_sigaction(int,
     struct compat_sigaction *,
     struct compat_sigaction *,
     compat_size_t);

 long compat_sys_rt_sigqueueinfo(compat_pid_t pid, int sig,
    struct compat_siginfo *uinfo);
 long compat_sys_sysinfo(struct compat_sysinfo *info);
 long compat_sys_ioctl(unsigned int fd, unsigned int cmd,
     unsigned long arg);
 long compat_sys_futex(u32 *uaddr, int op, u32 val,
  struct compat_timespec *utime, u32 *uaddr2,
  u32 val3);
 long compat_sys_getsockopt(int fd, int level, int optname,
          char *optval, int *optlen);
 long compat_sys_kexec_load(unsigned long entry,
          unsigned long nr_segments,
          struct compat_kexec_segment *,
          unsigned long flags);
 long compat_sys_mq_getsetattr(mqd_t mqdes,
   struct compat_mq_attr *u_mqstat,
   struct compat_mq_attr *u_omqstat);
 long compat_sys_mq_notify(mqd_t mqdes,
   struct compat_sigevent *u_notification);
 long compat_sys_mq_open( char *u_name,
   int oflag, compat_mode_t mode,
   struct compat_mq_attr *u_attr);
 long compat_sys_mq_timedsend(mqd_t mqdes,
   char *u_msg_ptr,
   size_t msg_len, unsigned int msg_prio,
   struct compat_timespec *u_abs_timeout);
 ssize_t compat_sys_mq_timedreceive(mqd_t mqdes,
   char *u_msg_ptr,
   size_t msg_len, unsigned int *u_msg_prio,
   struct compat_timespec *u_abs_timeout);
 long compat_sys_socketcall(int call, u32 *args);
 long compat_sys_sysctl(struct compat_sysctl_args *args);

extern ssize_t compat_rw_copy_check_uvector(int type,
  struct compat_iovec *uvector,
  unsigned long nr_segs,
  unsigned long fast_segs, struct iovec *fast_pointer,
  struct iovec **ret_pointer);

extern void *compat_alloc_user_space(unsigned long len);

 ssize_t compat_sys_process_vm_readv(compat_pid_t pid,
  struct compat_iovec *lvec,
  unsigned long liovcnt, struct compat_iovec *rvec,
  unsigned long riovcnt, unsigned long flags);
 ssize_t compat_sys_process_vm_writev(compat_pid_t pid,
  struct compat_iovec *lvec,
  unsigned long liovcnt, struct compat_iovec *rvec,
  unsigned long riovcnt, unsigned long flags);

 long compat_sys_sendfile(int out_fd, int in_fd,
        compat_off_t *offset, compat_size_t count);
 long compat_sys_sendfile64(int out_fd, int in_fd,
        compat_loff_t *offset, compat_size_t count);
 long compat_sys_sigaltstack( compat_stack_t *uss_ptr,
           compat_stack_t *uoss_ptr);

int compat_restore_altstack( compat_stack_t *uss);
int __compat_save_altstack(compat_stack_t *, unsigned long);
 long compat_sys_sched_rr_get_interval(compat_pid_t pid,
       struct compat_timespec *interval);

 long compat_sys_fanotify_mark(int, unsigned int, __u32, __u32,
         int, char *);







static inline void kmemleak_init(void)
{
}
static inline void kmemleak_alloc( void *ptr, size_t size, int min_count,
      gfp_t gfp)
{
}
static inline void kmemleak_alloc_recursive( void *ptr, size_t size,
         int min_count, unsigned long flags,
         gfp_t gfp)
{
}
static inline void kmemleak_alloc_percpu( void *ptr, size_t size)
{
}
static inline void kmemleak_free( void *ptr)
{
}
static inline void kmemleak_free_part( void *ptr, size_t size)
{
}
static inline void kmemleak_free_recursive( void *ptr, unsigned long flags)
{
}
static inline void kmemleak_free_percpu( void *ptr)
{
}
static inline void kmemleak_not_leak( void *ptr)
{
}
static inline void kmemleak_ignore( void *ptr)
{
}
static inline void kmemleak_scan_area( void *ptr, size_t size, gfp_t gfp)
{
}
static inline void kmemleak_erase(void **ptr)
{
}
static inline void kmemleak_no_scan( void *ptr)
{
}

struct mem_cgroup;



void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) kmem_cache_init(void);
int slab_is_available(void);

struct kmem_cache *kmem_cache_create( char *, size_t, size_t,
   unsigned long,
   void (*)(void *));
struct kmem_cache *
kmem_cache_create_memcg(struct mem_cgroup *, char *, size_t, size_t,
   unsigned long, void (*)(void *), struct kmem_cache *);
void kmem_cache_destroy(struct kmem_cache *);
int kmem_cache_shrink(struct kmem_cache *);
void kmem_cache_free(struct kmem_cache *, void *);
void * __krealloc( void *, size_t, gfp_t);
void * krealloc( void *, size_t, gfp_t);
void kfree( void *);
void kzfree( void *);
size_t ksize( void *);
extern struct kmem_cache *kmalloc_caches[(12 + 1) + 1];

extern struct kmem_cache *kmalloc_dma_caches[(12 + 1) + 1];
static inline __attribute__((always_inline)) int kmalloc_index(size_t size)
{
 if (!size)
  return 0;

 if (size <= (1 << 3))
  return 3;

 if ((1 << 3) <= 32 && size > 64 && size <= 96)
  return 1;
 if ((1 << 3) <= 64 && size > 128 && size <= 192)
  return 2;
 if (size <= 8) return 3;
 if (size <= 16) return 4;
 if (size <= 32) return 5;
 if (size <= 64) return 6;
 if (size <= 128) return 7;
 if (size <= 256) return 8;
 if (size <= 512) return 9;
 if (size <= 1024) return 10;
 if (size <= 2 * 1024) return 11;
 if (size <= 4 * 1024) return 12;
 if (size <= 8 * 1024) return 13;
 if (size <= 16 * 1024) return 14;
 if (size <= 32 * 1024) return 15;
 if (size <= 64 * 1024) return 16;
 if (size <= 128 * 1024) return 17;
 if (size <= 256 * 1024) return 18;
 if (size <= 512 * 1024) return 19;
 if (size <= 1024 * 1024) return 20;
 if (size <= 2 * 1024 * 1024) return 21;
 if (size <= 4 * 1024 * 1024) return 22;
 if (size <= 8 * 1024 * 1024) return 23;
 if (size <= 16 * 1024 * 1024) return 24;
 if (size <= 32 * 1024 * 1024) return 25;
 if (size <= 64 * 1024 * 1024) return 26;
 ;


 return -1;
}


void *__kmalloc(size_t size, gfp_t flags);
void *kmem_cache_alloc(struct kmem_cache *, gfp_t flags);


void *__kmalloc_node(size_t size, gfp_t flags, int node);
void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t flags, int node);
extern void *kmem_cache_alloc_trace(struct kmem_cache *, gfp_t, size_t);


extern void *kmem_cache_alloc_node_trace(struct kmem_cache *s,
        gfp_t gfpflags,
        int node, size_t size);
enum stat_item {
 ALLOC_FASTPATH,
 ALLOC_SLOWPATH,
 FREE_FASTPATH,
 FREE_SLOWPATH,
 FREE_FROZEN,
 FREE_ADD_PARTIAL,
 FREE_REMOVE_PARTIAL,
 ALLOC_FROM_PARTIAL,
 ALLOC_SLAB,
 ALLOC_REFILL,
 ALLOC_NODE_MISMATCH,
 FREE_SLAB,
 CPUSLAB_FLUSH,
 DEACTIVATE_FULL,
 DEACTIVATE_EMPTY,
 DEACTIVATE_TO_HEAD,
 DEACTIVATE_TO_TAIL,
 DEACTIVATE_REMOTE_FREES,
 DEACTIVATE_BYPASS,
 ORDER_FALLBACK,
 CMPXCHG_DOUBLE_CPU_FAIL,
 CMPXCHG_DOUBLE_FAIL,
 CPU_PARTIAL_ALLOC,
 CPU_PARTIAL_FREE,
 CPU_PARTIAL_NODE,
 CPU_PARTIAL_DRAIN,
 NR_SLUB_STAT_ITEMS };

struct kmem_cache_cpu {
  template <typename, int = 0> struct __BYPASSkmem_cache_cpu {};
  template <typename, int> friend struct __BYPASSkmem_cache_cpu;
 void **freelist;
 unsigned long tid;
 struct page *page;
 struct page *partial;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct kmem_cache_order_objects {
  template <typename, int = 0> struct __BYPASSkmem_cache_order_objects {};
  template <typename, int> friend struct __BYPASSkmem_cache_order_objects;
 unsigned long x;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct kmem_cache {
  template <typename, int = 0> struct __BYPASSkmem_cache {};
  template <typename, int> friend struct __BYPASSkmem_cache;
 struct kmem_cache_cpu *cpu_slab;

 unsigned long flags;
 unsigned long min_partial;
 int size;
 int object_size;
 int offset;
 int cpu_partial;
 struct kmem_cache_order_objects oo;


 struct kmem_cache_order_objects max;
 struct kmem_cache_order_objects min;
 gfp_t allocflags;
 int refcount;
 void (*ctor)(void *);
 int inuse;
 int align;
 int reserved;
 char *name;
 struct list_head list;

 struct kobject kobj;
 int remote_node_defrag_ratio;

 struct kmem_cache_node *node[(1 << 6)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


static inline __attribute__((always_inline)) void *
kmalloc_order(size_t size, gfp_t flags, unsigned int order)
{
 void *ret;

 flags |= ((( gfp_t)0x4000u) | (( gfp_t)0x100000u));
 ret = (void *) __get_free_pages(flags, order);
 kmemleak_alloc(ret, size, 1, flags);
 return ret;
}


extern void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order);
static inline __attribute__((always_inline)) void *kmalloc_large(size_t size, gfp_t flags)
{
 unsigned int order = ( __builtin_constant_p(size) ? ( ((size) == 0UL) ? 64 - 12 : (((size) < (1UL << 12)) ? 0 : ( __builtin_constant_p((size) - 1) ? ( ((size) - 1) < 1 ? ____ilog2_NaN() : ((size) - 1) & (1ULL << 63) ? 63 : ((size) - 1) & (1ULL << 62) ? 62 : ((size) - 1) & (1ULL << 61) ? 61 : ((size) - 1) & (1ULL << 60) ? 60 : ((size) - 1) & (1ULL << 59) ? 59 : ((size) - 1) & (1ULL << 58) ? 58 : ((size) - 1) & (1ULL << 57) ? 57 : ((size) - 1) & (1ULL << 56) ? 56 : ((size) - 1) & (1ULL << 55) ? 55 : ((size) - 1) & (1ULL << 54) ? 54 : ((size) - 1) & (1ULL << 53) ? 53 : ((size) - 1) & (1ULL << 52) ? 52 : ((size) - 1) & (1ULL << 51) ? 51 : ((size) - 1) & (1ULL << 50) ? 50 : ((size) - 1) & (1ULL << 49) ? 49 : ((size) - 1) & (1ULL << 48) ? 48 : ((size) - 1) & (1ULL << 47) ? 47 : ((size) - 1) & (1ULL << 46) ? 46 : ((size) - 1) & (1ULL << 45) ? 45 : ((size) - 1) & (1ULL << 44) ? 44 : ((size) - 1) & (1ULL << 43) ? 43 : ((size) - 1) & (1ULL << 42) ? 42 : ((size) - 1) & (1ULL << 41) ? 41 : ((size) - 1) & (1ULL << 40) ? 40 : ((size) - 1) & (1ULL << 39) ? 39 : ((size) - 1) & (1ULL << 38) ? 38 : ((size) - 1) & (1ULL << 37) ? 37 : ((size) - 1) & (1ULL << 36) ? 36 : ((size) - 1) & (1ULL << 35) ? 35 : ((size) - 1) & (1ULL << 34) ? 34 : ((size) - 1) & (1ULL << 33) ? 33 : ((size) - 1) & (1ULL << 32) ? 32 : ((size) - 1) & (1ULL << 31) ? 31 : ((size) - 1) & (1ULL << 30) ? 30 : ((size) - 1) & (1ULL << 29) ? 29 : ((size) - 1) & (1ULL << 28) ? 28 : ((size) - 1) & (1ULL << 27) ? 27 : ((size) - 1) & (1ULL << 26) ? 26 : ((size) - 1) & (1ULL << 25) ? 25 : ((size) - 1) & (1ULL << 24) ? 24 : ((size) - 1) & (1ULL << 23) ? 23 : ((size) - 1) & (1ULL << 22) ? 22 : ((size) - 1) & (1ULL << 21) ? 21 : ((size) - 1) & (1ULL << 20) ? 20 : ((size) - 1) & (1ULL << 19) ? 19 : ((size) - 1) & (1ULL << 18) ? 18 : ((size) - 1) & (1ULL << 17) ? 17 : ((size) - 1) & (1ULL << 16) ? 16 : ((size) - 1) & (1ULL << 15) ? 15 : ((size) - 1) & (1ULL << 14) ? 14 : ((size) - 1) & (1ULL << 13) ? 13 : ((size) - 1) & (1ULL << 12) ? 12 : ((size) - 1) & (1ULL << 11) ? 11 : ((size) - 1) & (1ULL << 10) ? 10 : ((size) - 1) & (1ULL << 9) ? 9 : ((size) - 1) & (1ULL << 8) ? 8 : ((size) - 1) & (1ULL << 7) ? 7 : ((size) - 1) & (1ULL << 6) ? 6 : ((size) - 1) & (1ULL << 5) ? 5 : ((size) - 1) & (1ULL << 4) ? 4 : ((size) - 1) & (1ULL << 3) ? 3 : ((size) - 1) & (1ULL << 2) ? 2 : ((size) - 1) & (1ULL << 1) ? 1 : ((size) - 1) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof((size) - 1) <= 4) ? __ilog2_u32((size) - 1) : __ilog2_u64((size) - 1) ) - 12 + 1) ) : __get_order(size) );
 return kmalloc_order_trace(size, flags, order);
}
extern void *kmalloc(size_t size, gfp_t flags);







static inline __attribute__((always_inline)) int kmalloc_size(int n)
{

 if (n > 2)
  return 1 << n;

 if (n == 1 && (1 << 3) <= 32)
  return 96;

 if (n == 2 && (1 << 3) <= 64)
  return 192;

 return 0;
}

static inline __attribute__((always_inline)) void *kmalloc_node(size_t size, gfp_t flags, int node)
{

 if (__builtin_constant_p(size) &&
  size <= (1UL << (12 + 1)) && !(flags & (( gfp_t)0x01u))) {
  int i = kmalloc_index(size);

  if (!i)
   return ((void *)16);

  return kmem_cache_alloc_node_trace(kmalloc_caches[i],
      flags, node, size);
 }

 return __kmalloc_node(size, flags, node);
}
struct memcg_cache_params {
  template <typename, int = 0> struct __BYPASSmemcg_cache_params {};
  template <typename, int> friend struct __BYPASSmemcg_cache_params;
 bool is_root_cache;
 union {
  struct kmem_cache *memcg_caches[0];
  struct {
   struct mem_cgroup *memcg;
   struct list_head list;
   struct kmem_cache *root_cache;
   bool dead;
   atomic_t nr_pages;
   struct work_struct destroy;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int memcg_update_all_caches(int num_memcgs);

struct seq_file;
int cache_show(struct kmem_cache *s, struct seq_file *m);
void print_slabinfo_header(struct seq_file *m);







static inline void *kmalloc_array(size_t n, size_t size, gfp_t flags)
{
 if (size != 0 && n > (~(size_t)0) / size)
  return 0;
 return __kmalloc(n * size, flags);
}







static inline void *kcalloc(size_t n, size_t size, gfp_t flags)
{
 return kmalloc_array(n, size, flags | (( gfp_t)0x8000u));
}
extern void *__kmalloc_track_caller(size_t, gfp_t, unsigned long);
extern void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long);
static inline void *kmem_cache_zalloc(struct kmem_cache *k, gfp_t flags)
{
 return kmem_cache_alloc(k, flags | (( gfp_t)0x8000u));
}






static inline void *kzalloc(size_t size, gfp_t flags)
{
 return kmalloc(size, flags | (( gfp_t)0x8000u));
}







static inline void *kzalloc_node(size_t size, gfp_t flags, int node)
{
 return kmalloc_node(size, flags | (( gfp_t)0x8000u), node);
}




static inline unsigned int kmem_cache_size(struct kmem_cache *s)
{
 return s->object_size;
}

void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) kmem_cache_init_late(void);

struct module;

struct ts_config;
struct ts_state
{
  template <typename, int = 0> struct __BYPASSts_state {};
  template <typename, int> friend struct __BYPASSts_state;
 unsigned int offset;
 char cb[40];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ts_ops
{
  template <typename, int = 0> struct __BYPASSts_ops {};
  template <typename, int> friend struct __BYPASSts_ops;
 char *name;
 struct ts_config * (*init)( void *, unsigned int, gfp_t, int);
 unsigned int (*find)(struct ts_config *,
     struct ts_state *);
 void (*destroy)(struct ts_config *);
 void * (*get_pattern)(struct ts_config *);
 unsigned int (*get_pattern_len)(struct ts_config *);
 struct module *owner;
 struct list_head list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ts_config
{
  template <typename, int = 0> struct __BYPASSts_config {};
  template <typename, int> friend struct __BYPASSts_config;
 struct ts_ops *ops;
 int flags;
 unsigned int (*get_next_block)(unsigned int consumed,
        u8 **dst,
        struct ts_config *conf,
        struct ts_state *state);
 void (*finish)(struct ts_config *conf,
       struct ts_state *state);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline unsigned int textsearch_next(struct ts_config *conf,
        struct ts_state *state)
{
 unsigned int ret = conf->ops->find(conf, state);

 if (conf->finish)
  conf->finish(conf, state);

 return ret;
}
static inline unsigned int textsearch_find(struct ts_config *conf,
        struct ts_state *state)
{
 state->offset = 0;
 return textsearch_next(conf, state);
}





static inline void *textsearch_get_pattern(struct ts_config *conf)
{
 return conf->ops->get_pattern(conf);
}





static inline unsigned int textsearch_get_pattern_len(struct ts_config *conf)
{
 return conf->ops->get_pattern_len(conf);
}

extern int textsearch_register(struct ts_ops *);
extern int textsearch_unregister(struct ts_ops *);
extern struct ts_config *textsearch_prepare( char *, void *,
         unsigned int, gfp_t, int);
extern void textsearch_destroy(struct ts_config *conf);
extern unsigned int textsearch_find_continuous(struct ts_config *,
            struct ts_state *,
            void *, unsigned int);





static inline struct ts_config *alloc_ts_config(size_t payload,
      gfp_t gfp_mask)
{
 struct ts_config *conf;

 conf = kzalloc((((sizeof(*conf)) + 8 -1) & ~(8 -1)) + payload, gfp_mask);
 if (conf == 0)
  return ERR_PTR(-12);

 return conf;
}

static inline void *ts_config_priv(struct ts_config *conf)
{
 return ((u8 *) conf + (((sizeof(struct ts_config)) + 8 -1) & ~(8 -1)));
}



static inline __sum16 csum_fold(__wsum sum)
{
 asm("  addl %1,%0\n"
     "  adcl $0xffff,%0"
     : "=r" (sum)
     : "r" (( u32)sum << 16),
       "0" (( u32)sum & 0xffff0000));
 return ( __sum16)(~( u32)sum >> 16);
}
static inline __sum16 ip_fast_csum( void *iph, unsigned int ihl)
{
 unsigned int sum;

 asm("  movl (%1), %0\n"
     "  subl $4, %2\n"
     "  jbe 2f\n"
     "  addl 4(%1), %0\n"
     "  adcl 8(%1), %0\n"
     "  adcl 12(%1), %0\n"
     "1: adcl 16(%1), %0\n"
     "  lea 4(%1), %1\n"
     "  decl %2\n"
     "  jne	1b\n"
     "  adcl $0, %0\n"
     "  movl %0, %2\n"
     "  shrl $16, %0\n"
     "  addw %w2, %w0\n"
     "  adcl $0, %0\n"
     "  notl %0\n"
     "2:"



     : "=r" (sum), "=r" (iph), "=r" (ihl)
     : "1" (iph), "2" (ihl)
     : "memory");
 return ( __sum16)sum;
}
static inline __wsum
csum_tcpudp_nofold(__be32 saddr, __be32 daddr, unsigned short len,
     unsigned short proto, __wsum sum)
{
 asm("  addl %1, %0\n"
     "  adcl %2, %0\n"
     "  adcl %3, %0\n"
     "  adcl $0, %0\n"
     : "=r" (sum)
     : "g" (daddr), "g" (saddr),
       "g" ((len + proto)<<8), "0" (sum));
 return sum;
}
static inline __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr,
     unsigned short len,
     unsigned short proto, __wsum sum)
{
 return csum_fold(csum_tcpudp_nofold(saddr, daddr, len, proto, sum));
}
extern __wsum csum_partial( void *buff, int len, __wsum sum);






extern __attribute__((externally_visible)) __wsum csum_partial_copy_generic( void *src, void *dst,
     int len, __wsum sum,
     int *src_err_ptr, int *dst_err_ptr);


extern __wsum csum_partial_copy_from_user( void *src, void *dst,
       int len, __wsum isum, int *errp);
extern __wsum csum_partial_copy_to_user( void *src, void *dst,
     int len, __wsum isum, int *errp);
extern __wsum csum_partial_copy_nocheck( void *src, void *dst,
     int len, __wsum sum);
extern __sum16 ip_compute_csum( void *buff, int len);
struct in6_addr;


extern __sum16
csum_ipv6_magic( struct in6_addr *saddr, struct in6_addr *daddr,
  __u32 len, unsigned short proto, __wsum sum);

static inline unsigned add32_with_carry(unsigned a, unsigned b)
{
 asm("addl %2,%0\n\t"
     "adcl $0,%0"
     : "=r" (a)
     : "0" (a), "r" (b));
 return a;
}
static inline __wsum csum_add(__wsum csum, __wsum addend)
{
 u32 res = ( u32)csum;
 res += ( u32)addend;
 return ( __wsum)(res + (res < ( u32)addend));
}

static inline __wsum csum_sub(__wsum csum, __wsum addend)
{
 return csum_add(csum, ~addend);
}

static inline __wsum
csum_block_add(__wsum csum, __wsum csum2, int offset)
{
 u32 sum = ( u32)csum2;
 if (offset&1)
  sum = ((sum&0xFF00FF)<<8)+((sum>>8)&0xFF00FF);
 return csum_add(csum, ( __wsum)sum);
}

static inline __wsum
csum_block_add_ext(__wsum csum, __wsum csum2, int offset, int len)
{
 return csum_block_add(csum, csum2, offset);
}

static inline __wsum
csum_block_sub(__wsum csum, __wsum csum2, int offset)
{
 u32 sum = ( u32)csum2;
 if (offset&1)
  sum = ((sum&0xFF00FF)<<8)+((sum>>8)&0xFF00FF);
 return csum_sub(csum, ( __wsum)sum);
}

static inline __wsum csum_unfold(__sum16 n)
{
 return ( __wsum)n;
}

static inline __wsum csum_partial_ext( void *buff, int len, __wsum sum)
{
 return csum_partial(buff, len, sum);
}



static inline void csum_replace4(__sum16 *sum, __be32 from, __be32 to)
{
 __be32 diff[] = { ~from, to };

 *sum = csum_fold(csum_partial(diff, sizeof(diff), ~csum_unfold(*sum)));
}

static inline void csum_replace2(__sum16 *sum, __be16 from, __be16 to)
{
 csum_replace4(sum, ( __be32)from, ( __be32)to);
}

struct sk_buff;
void inet_proto_csum_replace4(__sum16 *sum, struct sk_buff *skb,
         __be32 from, __be32 to, int pseudohdr);
void inet_proto_csum_replace16(__sum16 *sum, struct sk_buff *skb,
          __be32 *from, __be32 *to,
          int pseudohdr);

static inline void inet_proto_csum_replace2(__sum16 *sum, struct sk_buff *skb,
         __be16 from, __be16 to,
         int pseudohdr)
{
 inet_proto_csum_replace4(sum, skb, ( __be32)from,
     ( __be32)to, pseudohdr);
}









enum dma_attr {
 DMA_ATTR_WRITE_BARRIER,
 DMA_ATTR_WEAK_ORDERING,
 DMA_ATTR_WRITE_COMBINE,
 DMA_ATTR_NON_CONSISTENT,
 DMA_ATTR_NO_KERNEL_MAPPING,
 DMA_ATTR_SKIP_CPU_SYNC,
 DMA_ATTR_FORCE_CONTIGUOUS,
 DMA_ATTR_MAX,
};







struct dma_attrs {
  template <typename, int = 0> struct __BYPASSdma_attrs {};
  template <typename, int> friend struct __BYPASSdma_attrs;
 unsigned long flags[(((DMA_ATTR_MAX) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void init_dma_attrs(struct dma_attrs *attrs)
{
 bitmap_zero(attrs->flags, (((DMA_ATTR_MAX) + (8 * sizeof(long)) - 1) / (8 * sizeof(long))));
}







static inline void dma_set_attr(enum dma_attr attr, struct dma_attrs *attrs)
{
 if (attrs == 0)
  return;
 (attr >= DMA_ATTR_MAX);
 __set_bit(attr, attrs->flags);
}






static inline int dma_get_attr(enum dma_attr attr, struct dma_attrs *attrs)
{
 if (attrs == 0)
  return 0;
 (attr >= DMA_ATTR_MAX);
 return (__builtin_constant_p((attr)) ? constant_test_bit((attr), (attrs->flags)) : variable_test_bit((attr), (attrs->flags)));
}






enum dma_data_direction {
 DMA_BIDIRECTIONAL = 0,
 DMA_TO_DEVICE = 1,
 DMA_FROM_DEVICE = 2,
 DMA_NONE = 3,
};


struct dma_map_ops {
  template <typename, int = 0> struct __BYPASSdma_map_ops {};
  template <typename, int> friend struct __BYPASSdma_map_ops;
 void* (*alloc)(struct device *dev, size_t size,
    dma_addr_t *dma_handle, gfp_t gfp,
    struct dma_attrs *attrs);
 void (*free)(struct device *dev, size_t size,
         void *vaddr, dma_addr_t dma_handle,
         struct dma_attrs *attrs);
 int (*mmap)(struct device *, struct vm_area_struct *,
     void *, dma_addr_t, size_t, struct dma_attrs *attrs);

 int (*get_sgtable)(struct device *dev, struct sg_table *sgt, void *,
      dma_addr_t, size_t, struct dma_attrs *attrs);

 dma_addr_t (*map_page)(struct device *dev, struct page *page,
          unsigned long offset, size_t size,
          enum dma_data_direction dir,
          struct dma_attrs *attrs);
 void (*unmap_page)(struct device *dev, dma_addr_t dma_handle,
      size_t size, enum dma_data_direction dir,
      struct dma_attrs *attrs);
 int (*map_sg)(struct device *dev, struct scatterlist *sg,
        int nents, enum dma_data_direction dir,
        struct dma_attrs *attrs);
 void (*unmap_sg)(struct device *dev,
    struct scatterlist *sg, int nents,
    enum dma_data_direction dir,
    struct dma_attrs *attrs);
 void (*sync_single_for_cpu)(struct device *dev,
        dma_addr_t dma_handle, size_t size,
        enum dma_data_direction dir);
 void (*sync_single_for_device)(struct device *dev,
           dma_addr_t dma_handle, size_t size,
           enum dma_data_direction dir);
 void (*sync_sg_for_cpu)(struct device *dev,
    struct scatterlist *sg, int nents,
    enum dma_data_direction dir);
 void (*sync_sg_for_device)(struct device *dev,
       struct scatterlist *sg, int nents,
       enum dma_data_direction dir);
 int (*mapping_error)(struct device *dev, dma_addr_t dma_addr);
 int (*dma_supported)(struct device *dev, u64 mask);
 int (*set_dma_mask)(struct device *dev, u64 mask);



 int is_phys;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





static inline int valid_dma_direction(int dma_direction)
{
 return ((dma_direction == DMA_BIDIRECTIONAL) ||
  (dma_direction == DMA_TO_DEVICE) ||
  (dma_direction == DMA_FROM_DEVICE));
}

static inline int is_device_dma_capable(struct device *dev)
{
 return dev->dma_mask != 0 && *dev->dma_mask != 0x0ULL;
}


struct device;
struct scatterlist;
struct bus_type;
static inline void dma_debug_add_bus(struct bus_type *bus)
{
}

static inline void dma_debug_init(u32 num_entries)
{
}

static inline int dma_debug_resize_entries(u32 num_entries)
{
 return 0;
}

static inline void debug_dma_map_page(struct device *dev, struct page *page,
          size_t offset, size_t size,
          int direction, dma_addr_t dma_addr,
          bool map_single)
{
}

static inline void debug_dma_mapping_error(struct device *dev,
       dma_addr_t dma_addr)
{
}

static inline void debug_dma_unmap_page(struct device *dev, dma_addr_t addr,
     size_t size, int direction,
     bool map_single)
{
}

static inline void debug_dma_map_sg(struct device *dev, struct scatterlist *sg,
        int nents, int mapped_ents, int direction)
{
}

static inline void debug_dma_unmap_sg(struct device *dev,
          struct scatterlist *sglist,
          int nelems, int dir)
{
}

static inline void debug_dma_alloc_coherent(struct device *dev, size_t size,
         dma_addr_t dma_addr, void *virt)
{
}

static inline void debug_dma_free_coherent(struct device *dev, size_t size,
        void *virt, dma_addr_t addr)
{
}

static inline void debug_dma_sync_single_for_cpu(struct device *dev,
       dma_addr_t dma_handle,
       size_t size, int direction)
{
}

static inline void debug_dma_sync_single_for_device(struct device *dev,
          dma_addr_t dma_handle,
          size_t size, int direction)
{
}

static inline void debug_dma_sync_single_range_for_cpu(struct device *dev,
             dma_addr_t dma_handle,
             unsigned long offset,
             size_t size,
             int direction)
{
}

static inline void debug_dma_sync_single_range_for_device(struct device *dev,
         dma_addr_t dma_handle,
         unsigned long offset,
         size_t size,
         int direction)
{
}

static inline void debug_dma_sync_sg_for_cpu(struct device *dev,
          struct scatterlist *sg,
          int nelems, int direction)
{
}

static inline void debug_dma_sync_sg_for_device(struct device *dev,
      struct scatterlist *sg,
      int nelems, int direction)
{
}

static inline void debug_dma_dump_mappings(struct device *dev)
{
}










struct device;
struct dma_attrs;
struct scatterlist;

extern int swiotlb_force;
extern void swiotlb_init(int verbose);
int swiotlb_init_with_tbl(char *tlb, unsigned long nslabs, int verbose);
extern unsigned long swiotlb_nr_tbl(void);
unsigned long swiotlb_size_or_default(void);
extern int swiotlb_late_init_with_tbl(char *tlb, unsigned long nslabs);




enum dma_sync_target {
 SYNC_FOR_CPU = 0,
 SYNC_FOR_DEVICE = 1,
};




extern phys_addr_t swiotlb_tbl_map_single(struct device *hwdev,
       dma_addr_t tbl_dma_addr,
       phys_addr_t phys, size_t size,
       enum dma_data_direction dir);

extern void swiotlb_tbl_unmap_single(struct device *hwdev,
         phys_addr_t tlb_addr,
         size_t size, enum dma_data_direction dir);

extern void swiotlb_tbl_sync_single(struct device *hwdev,
        phys_addr_t tlb_addr,
        size_t size, enum dma_data_direction dir,
        enum dma_sync_target target);


extern void
*swiotlb_alloc_coherent(struct device *hwdev, size_t size,
   dma_addr_t *dma_handle, gfp_t flags);

extern void
swiotlb_free_coherent(struct device *hwdev, size_t size,
        void *vaddr, dma_addr_t dma_handle);

extern dma_addr_t swiotlb_map_page(struct device *dev, struct page *page,
       unsigned long offset, size_t size,
       enum dma_data_direction dir,
       struct dma_attrs *attrs);
extern void swiotlb_unmap_page(struct device *hwdev, dma_addr_t dev_addr,
          size_t size, enum dma_data_direction dir,
          struct dma_attrs *attrs);

extern int
swiotlb_map_sg(struct device *hwdev, struct scatterlist *sg, int nents,
        enum dma_data_direction dir);

extern void
swiotlb_unmap_sg(struct device *hwdev, struct scatterlist *sg, int nents,
   enum dma_data_direction dir);

extern int
swiotlb_map_sg_attrs(struct device *hwdev, struct scatterlist *sgl, int nelems,
       enum dma_data_direction dir, struct dma_attrs *attrs);

extern void
swiotlb_unmap_sg_attrs(struct device *hwdev, struct scatterlist *sgl,
         int nelems, enum dma_data_direction dir,
         struct dma_attrs *attrs);

extern void
swiotlb_sync_single_for_cpu(struct device *hwdev, dma_addr_t dev_addr,
       size_t size, enum dma_data_direction dir);

extern void
swiotlb_sync_sg_for_cpu(struct device *hwdev, struct scatterlist *sg,
   int nelems, enum dma_data_direction dir);

extern void
swiotlb_sync_single_for_device(struct device *hwdev, dma_addr_t dev_addr,
          size_t size, enum dma_data_direction dir);

extern void
swiotlb_sync_sg_for_device(struct device *hwdev, struct scatterlist *sg,
      int nelems, enum dma_data_direction dir);

extern int
swiotlb_dma_mapping_error(struct device *hwdev, dma_addr_t dma_addr);

extern int
swiotlb_dma_supported(struct device *hwdev, u64 mask);


extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) swiotlb_free(void);




extern void swiotlb_print_info(void);


extern int swiotlb;
extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pci_swiotlb_detect_override(void);
extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pci_swiotlb_detect_4gb(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pci_swiotlb_init(void);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) pci_swiotlb_late_init(void);
static inline void dma_mark_clean(void *addr, size_t size) {}
struct cma;
struct page;
struct device;
static inline struct cma *dev_get_cma_area(struct device *dev)
{
 return 0;
}

static inline void dev_set_cma_area(struct device *dev, struct cma *cma) { }

static inline void dma_contiguous_set_default(struct cma *cma) { }

static inline void dma_contiguous_reserve(phys_addr_t limit) { }

static inline int dma_contiguous_reserve_area(phys_addr_t size, phys_addr_t base,
           phys_addr_t limit, struct cma **res_cma) {
 return -38;
}

static inline
int dma_declare_contiguous(struct device *dev, phys_addr_t size,
      phys_addr_t base, phys_addr_t limit)
{
 return -38;
}

static inline
struct page *dma_alloc_from_contiguous(struct device *dev, int count,
           unsigned int order)
{
 return 0;
}

static inline
bool dma_release_from_contiguous(struct device *dev, struct page *pages,
     int count)
{
 return _false;
}
extern int iommu_merge;
extern struct device x86_dma_fallback_dev;
extern int panic_on_overflow;

extern struct dma_map_ops *dma_ops;

static inline struct dma_map_ops *get_dma_ops(struct device *dev)
{



 if (__builtin_expect(!!(!dev), 0) || !dev->archdata.dma_ops)
  return dma_ops;
 else
  return dev->archdata.dma_ops;

}

static inline dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr,
           size_t size,
           enum dma_data_direction dir,
           struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 dma_addr_t addr;

 kmemcheck_mark_initialized(ptr, size);
 (!valid_dma_direction(dir));
 addr = ops->map_page(dev, (((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)(ptr)) >> 12)),
        (unsigned long)ptr & ~(~(((1UL) << 12)-1)), size,
        dir, attrs);
 debug_dma_map_page(dev, (((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)(ptr)) >> 12)),
      (unsigned long)ptr & ~(~(((1UL) << 12)-1)), size,
      dir, addr, _true);
 return addr;
}

static inline void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr,
       size_t size,
       enum dma_data_direction dir,
       struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 (!valid_dma_direction(dir));
 if (ops->unmap_page)
  ops->unmap_page(dev, addr, size, dir, attrs);
 debug_dma_unmap_page(dev, addr, size, dir, _true);
}

static inline int dma_map_sg_attrs(struct device *dev, struct scatterlist *sg,
       int nents, enum dma_data_direction dir,
       struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 int i, ents;
 struct scatterlist *s;

 for (i = 0, s = (sg); i < (nents); i++, s = sg_next(s))
  kmemcheck_mark_initialized(sg_virt(s), s->length);
 (!valid_dma_direction(dir));
 ents = ops->map_sg(dev, sg, nents, dir, attrs);
 debug_dma_map_sg(dev, sg, nents, ents, dir);

 return ents;
}

static inline void dma_unmap_sg_attrs(struct device *dev, struct scatterlist *sg,
          int nents, enum dma_data_direction dir,
          struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 (!valid_dma_direction(dir));
 debug_dma_unmap_sg(dev, sg, nents, dir);
 if (ops->unmap_sg)
  ops->unmap_sg(dev, sg, nents, dir, attrs);
}

static inline dma_addr_t dma_map_page(struct device *dev, struct page *page,
          size_t offset, size_t size,
          enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 dma_addr_t addr;

 kmemcheck_mark_initialized(lowmem_page_address(page) + offset, size);
 (!valid_dma_direction(dir));
 addr = ops->map_page(dev, page, offset, size, dir, 0);
 debug_dma_map_page(dev, page, offset, size, dir, addr, _false);

 return addr;
}

static inline void dma_unmap_page(struct device *dev, dma_addr_t addr,
      size_t size, enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 (!valid_dma_direction(dir));
 if (ops->unmap_page)
  ops->unmap_page(dev, addr, size, dir, 0);
 debug_dma_unmap_page(dev, addr, size, dir, _false);
}

static inline void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr,
        size_t size,
        enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 (!valid_dma_direction(dir));
 if (ops->sync_single_for_cpu)
  ops->sync_single_for_cpu(dev, addr, size, dir);
 debug_dma_sync_single_for_cpu(dev, addr, size, dir);
}

static inline void dma_sync_single_for_device(struct device *dev,
           dma_addr_t addr, size_t size,
           enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 (!valid_dma_direction(dir));
 if (ops->sync_single_for_device)
  ops->sync_single_for_device(dev, addr, size, dir);
 debug_dma_sync_single_for_device(dev, addr, size, dir);
}

static inline void dma_sync_single_range_for_cpu(struct device *dev,
       dma_addr_t addr,
       unsigned long offset,
       size_t size,
       enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 (!valid_dma_direction(dir));
 if (ops->sync_single_for_cpu)
  ops->sync_single_for_cpu(dev, addr + offset, size, dir);
 debug_dma_sync_single_range_for_cpu(dev, addr, offset, size, dir);
}

static inline void dma_sync_single_range_for_device(struct device *dev,
          dma_addr_t addr,
          unsigned long offset,
          size_t size,
          enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 (!valid_dma_direction(dir));
 if (ops->sync_single_for_device)
  ops->sync_single_for_device(dev, addr + offset, size, dir);
 debug_dma_sync_single_range_for_device(dev, addr, offset, size, dir);
}

static inline void
dma_sync_sg_for_cpu(struct device *dev, struct scatterlist *sg,
      int nelems, enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 (!valid_dma_direction(dir));
 if (ops->sync_sg_for_cpu)
  ops->sync_sg_for_cpu(dev, sg, nelems, dir);
 debug_dma_sync_sg_for_cpu(dev, sg, nelems, dir);
}

static inline void
dma_sync_sg_for_device(struct device *dev, struct scatterlist *sg,
         int nelems, enum dma_data_direction dir)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 (!valid_dma_direction(dir));
 if (ops->sync_sg_for_device)
  ops->sync_sg_for_device(dev, sg, nelems, dir);
 debug_dma_sync_sg_for_device(dev, sg, nelems, dir);

}






extern int dma_common_mmap(struct device *dev, struct vm_area_struct *vma,
      void *cpu_addr, dma_addr_t dma_addr, size_t size);
static inline int
dma_mmap_attrs(struct device *dev, struct vm_area_struct *vma, void *cpu_addr,
        dma_addr_t dma_addr, size_t size, struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 (!ops);
 if (ops->mmap)
  return ops->mmap(dev, vma, cpu_addr, dma_addr, size, attrs);
 return dma_common_mmap(dev, vma, cpu_addr, dma_addr, size);
}



static inline int dma_mmap_writecombine(struct device *dev, struct vm_area_struct *vma,
        void *cpu_addr, dma_addr_t dma_addr, size_t size)
{
 struct dma_attrs attrs = { { 0 } };
 dma_set_attr(DMA_ATTR_WRITE_COMBINE, &attrs);
 return dma_mmap_attrs(dev, vma, cpu_addr, dma_addr, size, &attrs);
}

int
dma_common_get_sgtable(struct device *dev, struct sg_table *sgt,
         void *cpu_addr, dma_addr_t dma_addr, size_t size);

static inline int
dma_get_sgtable_attrs(struct device *dev, struct sg_table *sgt, void *cpu_addr,
        dma_addr_t dma_addr, size_t size, struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 (!ops);
 if (ops->get_sgtable)
  return ops->get_sgtable(dev, sgt, cpu_addr, dma_addr, size,
     attrs);
 return dma_common_get_sgtable(dev, sgt, cpu_addr, dma_addr, size);
}


static inline int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 debug_dma_mapping_error(dev, dma_addr);
 if (ops->mapping_error)
  return ops->mapping_error(dev, dma_addr);

 return (dma_addr == 0);
}




extern int dma_supported(struct device *hwdev, u64 mask);
extern int dma_set_mask(struct device *dev, u64 mask);

extern void *dma_generic_alloc_coherent(struct device *dev, size_t size,
     dma_addr_t *dma_addr, gfp_t flag,
     struct dma_attrs *attrs);

extern void dma_generic_free_coherent(struct device *dev, size_t size,
          void *vaddr, dma_addr_t dma_addr,
          struct dma_attrs *attrs);







static inline bool dma_capable(struct device *dev, dma_addr_t addr, size_t size)
{
 if (!dev->dma_mask)
  return 0;

 return addr + size - 1 <= *dev->dma_mask;
}

static inline dma_addr_t phys_to_dma(struct device *dev, phys_addr_t paddr)
{
 return paddr;
}

static inline phys_addr_t dma_to_phys(struct device *dev, dma_addr_t daddr)
{
 return daddr;
}


static inline void
dma_cache_sync(struct device *dev, void *vaddr, size_t size,
 enum dma_data_direction dir)
{
 flush_write_buffers();
}

static inline unsigned long dma_alloc_coherent_mask(struct device *dev,
          gfp_t gfp)
{
 unsigned long dma_mask = 0;

 dma_mask = dev->coherent_dma_mask;
 if (!dma_mask)
  dma_mask = (gfp & (( gfp_t)0x01u)) ? (((24) == 64) ? ~0ULL : ((1ULL<<(24))-1)) : (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1));

 return dma_mask;
}

static inline gfp_t dma_alloc_coherent_gfp_flags(struct device *dev, gfp_t gfp)
{
 unsigned long dma_mask = dma_alloc_coherent_mask(dev, gfp);

 if (dma_mask <= (((24) == 64) ? ~0ULL : ((1ULL<<(24))-1)))
  gfp |= (( gfp_t)0x01u);

 if (dma_mask <= (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1)) && !(gfp & (( gfp_t)0x01u)))
  gfp |= (( gfp_t)0x04u);

       return gfp;
}



static inline void *
dma_alloc_attrs(struct device *dev, size_t size, dma_addr_t *dma_handle,
  gfp_t gfp, struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);
 void *memory;

 gfp &= ~((( gfp_t)0x01u) | (( gfp_t)0x02u) | (( gfp_t)0x04u));

 if ((0))
  return memory;

 if (!dev)
  dev = &x86_dma_fallback_dev;

 if (!is_device_dma_capable(dev))
  return 0;

 if (!ops->alloc)
  return 0;

 memory = ops->alloc(dev, size, dma_handle,
       dma_alloc_coherent_gfp_flags(dev, gfp), attrs);
 debug_dma_alloc_coherent(dev, size, *dma_handle, memory);

 return memory;
}



static inline void dma_free_attrs(struct device *dev, size_t size,
      void *vaddr, dma_addr_t bus,
      struct dma_attrs *attrs)
{
 struct dma_map_ops *ops = get_dma_ops(dev);

 if ((0))
  return;

 debug_dma_free_coherent(dev, size, vaddr, bus);
 if (ops->free)
  ops->free(dev, size, vaddr, bus, attrs);
}




static inline u64 dma_get_mask(struct device *dev)
{
 if (dev && dev->dma_mask && *dev->dma_mask)
  return *dev->dma_mask;
 return (((32) == 64) ? ~0ULL : ((1ULL<<(32))-1));
}




static inline int dma_set_coherent_mask(struct device *dev, u64 mask)
{
 if (!dma_supported(dev, mask))
  return -5;
 dev->coherent_dma_mask = mask;
 return 0;
}
static inline int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
 int rc = dma_set_mask(dev, mask);
 if (rc == 0)
  dma_set_coherent_mask(dev, mask);
 return rc;
}





static inline int dma_coerce_mask_and_coherent(struct device *dev, u64 mask)
{
 dev->dma_mask = &dev->coherent_dma_mask;
 return dma_set_mask_and_coherent(dev, mask);
}

extern u64 dma_get_required_mask(struct device *dev);

static inline unsigned int dma_get_max_seg_size(struct device *dev)
{
 return dev->dma_parms ? dev->dma_parms->max_segment_size : 65536;
}

static inline unsigned int dma_set_max_seg_size(struct device *dev,
      unsigned int size)
{
 if (dev->dma_parms) {
  dev->dma_parms->max_segment_size = size;
  return 0;
 } else
  return -5;
}

static inline unsigned long dma_get_seg_boundary(struct device *dev)
{
 return dev->dma_parms ?
  dev->dma_parms->segment_boundary_mask : 0xffffffff;
}

static inline int dma_set_seg_boundary(struct device *dev, unsigned long mask)
{
 if (dev->dma_parms) {
  dev->dma_parms->segment_boundary_mask = mask;
  return 0;
 } else
  return -5;
}


static inline unsigned long dma_max_pfn(struct device *dev)
{
 return *dev->dma_mask >> 12;
}


static inline void *dma_zalloc_coherent(struct device *dev, size_t size,
     dma_addr_t *dma_handle, gfp_t flag)
{
 void *ret = dma_alloc_attrs(dev,size,dma_handle,flag | (( gfp_t)0x8000u),0)
                             ;
 return ret;
}


static inline int dma_get_cache_alignment(void)
{



 return 1;
}
static inline int
dma_declare_coherent_memory(struct device *dev, dma_addr_t bus_addr,
       dma_addr_t device_addr, size_t size, int flags)
{
 return 0;
}

static inline void
dma_release_declared_memory(struct device *dev)
{
}

static inline void *
dma_mark_declared_memory_occupied(struct device *dev,
      dma_addr_t device_addr, size_t size)
{
 return ERR_PTR(-16);
}





extern void *dmam_alloc_coherent(struct device *dev, size_t size,
     dma_addr_t *dma_handle, gfp_t gfp);
extern void dmam_free_coherent(struct device *dev, size_t size, void *vaddr,
          dma_addr_t dma_handle);
extern void *dmam_alloc_noncoherent(struct device *dev, size_t size,
        dma_addr_t *dma_handle, gfp_t gfp);
extern void dmam_free_noncoherent(struct device *dev, size_t size, void *vaddr,
      dma_addr_t dma_handle);






static inline int dmam_declare_coherent_memory(struct device *dev,
    dma_addr_t bus_addr, dma_addr_t device_addr,
    size_t size, gfp_t gfp)
{
 return 0;
}

static inline void dmam_release_declared_memory(struct device *dev)
{
}
typedef u64 netdev_features_t;

enum {
 NETIF_F_SG_BIT,
 NETIF_F_IP_CSUM_BIT,
 __UNUSED_NETIF_F_1,
 NETIF_F_HW_CSUM_BIT,
 NETIF_F_IPV6_CSUM_BIT,
 NETIF_F_HIGHDMA_BIT,
 NETIF_F_FRAGLIST_BIT,
 NETIF_F_HW_VLAN_CTAG_TX_BIT,
 NETIF_F_HW_VLAN_CTAG_RX_BIT,
 NETIF_F_HW_VLAN_CTAG_FILTER_BIT,
 NETIF_F_VLAN_CHALLENGED_BIT,
 NETIF_F_GSO_BIT,
 NETIF_F_LLTX_BIT,

 NETIF_F_NETNS_LOCAL_BIT,
 NETIF_F_GRO_BIT,
 NETIF_F_LRO_BIT,

     NETIF_F_GSO_SHIFT,
 NETIF_F_TSO_BIT
  = NETIF_F_GSO_SHIFT,
 NETIF_F_UFO_BIT,
 NETIF_F_GSO_ROBUST_BIT,
 NETIF_F_TSO_ECN_BIT,
 NETIF_F_TSO6_BIT,
 NETIF_F_FSO_BIT,
 NETIF_F_GSO_GRE_BIT,
 NETIF_F_GSO_IPIP_BIT,
 NETIF_F_GSO_SIT_BIT,
 NETIF_F_GSO_UDP_TUNNEL_BIT,
 NETIF_F_GSO_MPLS_BIT,
     NETIF_F_GSO_LAST =
  NETIF_F_GSO_MPLS_BIT,

 NETIF_F_FCOE_CRC_BIT,
 NETIF_F_SCTP_CSUM_BIT,
 NETIF_F_FCOE_MTU_BIT,
 NETIF_F_NTUPLE_BIT,
 NETIF_F_RXHASH_BIT,
 NETIF_F_RXCSUM_BIT,
 NETIF_F_NOCACHE_COPY_BIT,
 NETIF_F_LOOPBACK_BIT,
 NETIF_F_RXFCS_BIT,
 NETIF_F_RXALL_BIT,
 NETIF_F_HW_VLAN_STAG_TX_BIT,
 NETIF_F_HW_VLAN_STAG_RX_BIT,
 NETIF_F_HW_VLAN_STAG_FILTER_BIT,
 NETIF_F_HW_L2FW_DOFFLOAD_BIT,
 NETIF_F_HW_QDISC_BIT,
     NETDEV_FEATURE_COUNT
};



struct flow_keys {
  template <typename, int = 0> struct __BYPASSflow_keys {};
  template <typename, int> friend struct __BYPASSflow_keys;

 __be32 src;
 __be32 dst;
 union {
  __be32 ports;
  __be16 port16[2];
 };
 u16 thoff;
 u8 ip_proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

bool skb_flow_dissect( struct sk_buff *skb, struct flow_keys *flow);
__be32 skb_flow_get_ports( struct sk_buff *skb, int thoff, u8 ip_proto);
struct net_device;
struct scatterlist;
struct pipe_inode_info;


struct nf_conntrack {
  template <typename, int = 0> struct __BYPASSnf_conntrack {};
  template <typename, int> friend struct __BYPASSnf_conntrack;
 atomic_t use;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct nf_bridge_info {
  template <typename, int = 0> struct __BYPASSnf_bridge_info {};
  template <typename, int> friend struct __BYPASSnf_bridge_info;
 atomic_t use;
 unsigned int mask;
 struct net_device *physindev;
 struct net_device *physoutdev;
 unsigned long data[32 / sizeof(unsigned long)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sk_buff_head {
  template <typename, int = 0> struct __BYPASSsk_buff_head {};
  template <typename, int> friend struct __BYPASSsk_buff_head;

 struct sk_buff *next;
 struct sk_buff *prev;

 __u32 qlen;
 spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sk_buff;
typedef struct skb_frag_struct skb_frag_t;

struct skb_frag_struct {
  template <typename, int = 0> struct __BYPASSskb_frag_struct {};
  template <typename, int> friend struct __BYPASSskb_frag_struct;
 struct {
  struct page *p;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} page;

 __u32 page_offset;
 __u32 size;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline unsigned int skb_frag_size( skb_frag_t *frag)
{
 return frag->size;
}

static inline void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
 frag->size = size;
}

static inline void skb_frag_size_add(skb_frag_t *frag, int delta)
{
 frag->size += delta;
}

static inline void skb_frag_size_sub(skb_frag_t *frag, int delta)
{
 frag->size -= delta;
}
struct skb_shared_hwtstamps {
  template <typename, int = 0> struct __BYPASSskb_shared_hwtstamps {};
  template <typename, int> friend struct __BYPASSskb_shared_hwtstamps;
 ktime_t hwtstamp;
 ktime_t syststamp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum {

 SKBTX_HW_TSTAMP = 1 << 0,


 SKBTX_SW_TSTAMP = 1 << 1,


 SKBTX_IN_PROGRESS = 1 << 2,


 SKBTX_DEV_ZEROCOPY = 1 << 3,


 SKBTX_WIFI_STATUS = 1 << 4,






 SKBTX_SHARED_FRAG = 1 << 5,
};
struct ubuf_info {
  template <typename, int = 0> struct __BYPASSubuf_info {};
  template <typename, int> friend struct __BYPASSubuf_info;
 void (*callback)(struct ubuf_info *, bool zerocopy_success);
 void *ctx;
 unsigned long desc;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct skb_shared_info {
  template <typename, int = 0> struct __BYPASSskb_shared_info {};
  template <typename, int> friend struct __BYPASSskb_shared_info;
 unsigned char nr_frags;
 __u8 tx_flags;
 unsigned short gso_size;

 unsigned short gso_segs;
 unsigned short gso_type;
 struct sk_buff *frag_list;
 struct skb_shared_hwtstamps hwtstamps;
 __be32 ip6_frag_id;




 atomic_t dataref;



 void * destructor_arg;


 skb_frag_t frags[(65536/((1UL) << 12) + 1)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 SKB_FCLONE_UNAVAILABLE,
 SKB_FCLONE_ORIG,
 SKB_FCLONE_CLONE,
};

enum {
 SKB_GSO_TCPV4 = 1 << 0,
 SKB_GSO_UDP = 1 << 1,


 SKB_GSO_DODGY = 1 << 2,


 SKB_GSO_TCP_ECN = 1 << 3,

 SKB_GSO_TCPV6 = 1 << 4,

 SKB_GSO_FCOE = 1 << 5,

 SKB_GSO_GRE = 1 << 6,

 SKB_GSO_IPIP = 1 << 7,

 SKB_GSO_SIT = 1 << 8,

 SKB_GSO_UDP_TUNNEL = 1 << 9,

 SKB_GSO_MPLS = 1 << 10,
};






typedef unsigned int sk_buff_data_t;
struct sk_buff {
  template <typename, int = 0> struct __BYPASSsk_buff {};
  template <typename, int> friend struct __BYPASSsk_buff;

 struct sk_buff *next;
 struct sk_buff *prev;

 ktime_t tstamp;

 struct sock *sk;
 struct net_device *dev;







 char cb[48] __attribute__((aligned(8)));

 unsigned long _skb_refdst;

 struct sec_path *sp;

 unsigned int len,
    data_len;
 __u16 mac_len,
    hdr_len;
 union {
  __wsum csum;
  struct {
   __u16 csum_start;
   __u16 csum_offset;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };
 __u32 priority;
 ;
 __u8 local_df:1,
    cloned:1,
    ip_summed:2,
    nohdr:1,
    nfctinfo:3;
 __u8 pkt_type:3,
    fclone:2,
    ipvs_property:1,
    peeked:1,
    nf_trace:1;
 ;
 __be16 protocol;

 void (*destructor)(struct sk_buff *skb);

 struct nf_conntrack *nfct;


 struct nf_bridge_info *nf_bridge;


 int skb_iif;

 __u32 rxhash;

 __be16 vlan_proto;
 __u16 vlan_tci;


 __u16 tc_index;

 __u16 tc_verd;



 __u16 queue_mapping;
 ;

 __u8 ndisc_nodetype:2;

 __u8 pfmemalloc:1;
 __u8 ooo_okay:1;
 __u8 l4_rxhash:1;
 __u8 wifi_acked_valid:1;
 __u8 wifi_acked:1;
 __u8 no_fcs:1;
 __u8 head_frag:1;





 __u8 encapsulation:1;

 ;


 union {
  unsigned int napi_id;
  dma_cookie_t dma_cookie;
 };


 __u32 secmark;

 union {
  __u32 mark;
  __u32 dropcount;
  __u32 reserved_tailroom;
 };

 __be16 inner_protocol;
 __u16 inner_transport_header;
 __u16 inner_network_header;
 __u16 inner_mac_header;
 __u16 transport_header;
 __u16 network_header;
 __u16 mac_header;

 sk_buff_data_t tail;
 sk_buff_data_t end;
 unsigned char *head,
    *data;
 unsigned int truesize;
 atomic_t users;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline bool skb_pfmemalloc( struct sk_buff *skb)
{
 return __builtin_expect(!!(skb->pfmemalloc), 0);
}
static inline struct dst_entry *skb_dst( struct sk_buff *skb)
{



 ((skb->_skb_refdst & 1UL) && !1 && !1)

                           ;
 return (struct dst_entry *)(skb->_skb_refdst & ~(1UL));
}
static inline void skb_dst_set(struct sk_buff *skb, struct dst_entry *dst)
{
 skb->_skb_refdst = (unsigned long)dst;
}

void __skb_dst_set_noref(struct sk_buff *skb, struct dst_entry *dst,
    bool force);
static inline void skb_dst_set_noref(struct sk_buff *skb, struct dst_entry *dst)
{
 __skb_dst_set_noref(skb, dst, _false);
}
static inline void skb_dst_set_noref_force(struct sk_buff *skb,
        struct dst_entry *dst)
{
 __skb_dst_set_noref(skb, dst, _true);
}





static inline bool skb_dst_is_noref( struct sk_buff *skb)
{
 return (skb->_skb_refdst & 1UL) && skb_dst(skb);
}

static inline struct rtable *skb_rtable( struct sk_buff *skb)
{
 return (struct rtable *)skb_dst(skb);
}

void kfree_skb(struct sk_buff *skb);
void kfree_skb_list(struct sk_buff *segs);
void skb_tx_error(struct sk_buff *skb);
void consume_skb(struct sk_buff *skb);
void __kfree_skb(struct sk_buff *skb);
extern struct kmem_cache *skbuff_head_cache;

void kfree_skb_partial(struct sk_buff *skb, bool head_stolen);
bool skb_try_coalesce(struct sk_buff *to, struct sk_buff *from,
        bool *fragstolen, int *delta_truesize);

struct sk_buff *__alloc_skb(unsigned int size, gfp_t priority, int flags,
       int node);
struct sk_buff *build_skb(void *data, unsigned int frag_size);
static inline struct sk_buff *alloc_skb(unsigned int size,
     gfp_t priority)
{
 return __alloc_skb(size, priority, 0, (-1));
}

static inline struct sk_buff *alloc_skb_fclone(unsigned int size,
            gfp_t priority)
{
 return __alloc_skb(size, priority, 0x01, (-1));
}

struct sk_buff *__alloc_skb_head(gfp_t priority, int node);
static inline struct sk_buff *alloc_skb_head(gfp_t priority)
{
 return __alloc_skb_head(priority, -1);
}

struct sk_buff *skb_morph(struct sk_buff *dst, struct sk_buff *src);
int skb_copy_ubufs(struct sk_buff *skb, gfp_t gfp_mask);
struct sk_buff *skb_clone(struct sk_buff *skb, gfp_t priority);
struct sk_buff *skb_copy( struct sk_buff *skb, gfp_t priority);
struct sk_buff *__pskb_copy(struct sk_buff *skb, int headroom, gfp_t gfp_mask);

int pskb_expand_head(struct sk_buff *skb, int nhead, int ntail, gfp_t gfp_mask);
struct sk_buff *skb_realloc_headroom(struct sk_buff *skb,
         unsigned int headroom);
struct sk_buff *skb_copy_expand( struct sk_buff *skb, int newheadroom,
    int newtailroom, gfp_t priority);
int skb_to_sgvec(struct sk_buff *skb, struct scatterlist *sg, int offset,
   int len);
int skb_cow_data(struct sk_buff *skb, int tailbits, struct sk_buff **trailer);
int skb_pad(struct sk_buff *skb, int pad);


int skb_append_datato_frags(struct sock *sk, struct sk_buff *skb,
       int getfrag(void *from, char *to, int offset,
     int len, int odd, struct sk_buff *skb),
       void *from, int length);

struct skb_seq_state {
  template <typename, int = 0> struct __BYPASSskb_seq_state {};
  template <typename, int> friend struct __BYPASSskb_seq_state;
 __u32 lower_offset;
 __u32 upper_offset;
 __u32 frag_idx;
 __u32 stepped_offset;
 struct sk_buff *root_skb;
 struct sk_buff *cur_skb;
 __u8 *frag_data;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void skb_prepare_seq_read(struct sk_buff *skb, unsigned int from,
     unsigned int to, struct skb_seq_state *st);
unsigned int skb_seq_read(unsigned int consumed, u8 **data,
     struct skb_seq_state *st);
void skb_abort_seq_read(struct skb_seq_state *st);

unsigned int skb_find_text(struct sk_buff *skb, unsigned int from,
      unsigned int to, struct ts_config *config,
      struct ts_state *state);

void __skb_get_rxhash(struct sk_buff *skb);
static inline __u32 skb_get_rxhash(struct sk_buff *skb)
{
 if (!skb->l4_rxhash)
  __skb_get_rxhash(skb);

 return skb->rxhash;
}


static inline unsigned char *skb_end_pointer( struct sk_buff *skb)
{
 return skb->head + skb->end;
}

static inline unsigned int skb_end_offset( struct sk_buff *skb)
{
 return skb->end;
}
static inline struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
 return &((struct skb_shared_info *)(skb_end_pointer(skb)))->hwtstamps;
}







static inline int skb_queue_empty( struct sk_buff_head *list)
{
 return list->next == (struct sk_buff *)list;
}
static inline bool skb_queue_is_last( struct sk_buff_head *list,
         struct sk_buff *skb)
{
 return skb->next == (struct sk_buff *)list;
}
static inline bool skb_queue_is_first( struct sk_buff_head *list,
          struct sk_buff *skb)
{
 return skb->prev == (struct sk_buff *)list;
}
static inline struct sk_buff *skb_queue_next( struct sk_buff_head *list,
          struct sk_buff *skb)
{



 (skb_queue_is_last(list, skb));
 return skb->next;
}
static inline struct sk_buff *skb_queue_prev( struct sk_buff_head *list,
          struct sk_buff *skb)
{



 (skb_queue_is_first(list, skb));
 return skb->prev;
}
static inline struct sk_buff *skb_get(struct sk_buff *skb)
{
 ;
 return skb;
}
static inline int skb_cloned( struct sk_buff *skb)
{
 return skb->cloned &&
        (atomic_read(&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref) & ((1 << 16) - 1)) != 1;
}

static inline int skb_unclone(struct sk_buff *skb, gfp_t pri)
{
 do { if (pri & (( gfp_t)0x10u)) do { _cond_resched(); } while (0); } while (0);

 if (skb_cloned(skb))
  return pskb_expand_head(skb, 0, 0, pri);

 return 0;
}
static inline int skb_header_cloned( struct sk_buff *skb)
{
 int dataref;

 if (!skb->cloned)
  return 0;

 dataref = atomic_read(&((struct skb_shared_info *)(skb_end_pointer(skb)))->dataref);
 dataref = (dataref & ((1 << 16) - 1)) - (dataref >> 16);
 return dataref != 1;
}
static inline void skb_header_release(struct sk_buff *skb)
{
 (skb->nohdr);
 skb->nohdr = 1;
 ;
}
static inline int skb_shared( struct sk_buff *skb)
{
 return atomic_read(&skb->users) != 1;
}
static inline struct sk_buff *skb_share_check(struct sk_buff *skb, gfp_t pri)
{
 do { if (pri & (( gfp_t)0x10u)) do { _cond_resched(); } while (0); } while (0);
 if (skb_shared(skb)) {
  struct sk_buff *nskb = skb_clone(skb, pri);

  if (__builtin_expect(!!(nskb), 1))
   consume_skb(skb);
  else
   kfree_skb(skb);
  skb = nskb;
 }
 return skb;
}
static inline struct sk_buff *skb_unshare(struct sk_buff *skb,
       gfp_t pri)
{
 do { if (pri & (( gfp_t)0x10u)) do { _cond_resched(); } while (0); } while (0);
 if (skb_cloned(skb)) {
  struct sk_buff *nskb = skb_copy(skb, pri);
  kfree_skb(skb);
  skb = nskb;
 }
 return skb;
}
static inline struct sk_buff *skb_peek( struct sk_buff_head *list_)
{
 struct sk_buff *skb = list_->next;

 if (skb == (struct sk_buff *)list_)
  skb = 0;
 return skb;
}
static inline struct sk_buff *skb_peek_next(struct sk_buff *skb,
  struct sk_buff_head *list_)
{
 struct sk_buff *next = skb->next;

 if (next == (struct sk_buff *)list_)
  next = 0;
 return next;
}
static inline struct sk_buff *skb_peek_tail( struct sk_buff_head *list_)
{
 struct sk_buff *skb = list_->prev;

 if (skb == (struct sk_buff *)list_)
  skb = 0;
 return skb;

}







static inline __u32 skb_queue_len( struct sk_buff_head *list_)
{
 return list_->qlen;
}
static inline void __skb_queue_head_init(struct sk_buff_head *list)
{
 list->prev = list->next = (struct sk_buff *)list;
 list->qlen = 0;
}
static inline void skb_queue_head_init(struct sk_buff_head *list)
{
 ;
 __skb_queue_head_init(list);
}

static inline void skb_queue_head_init_class(struct sk_buff_head *list,
  struct lock_class_key *_class)
{
 skb_queue_head_init(list);
 do { (void)(_class); } while (0);
}







void skb_insert(struct sk_buff *old, struct sk_buff *newsk,
  struct sk_buff_head *list);
static inline void __skb_insert(struct sk_buff *newsk,
    struct sk_buff *prev, struct sk_buff *next,
    struct sk_buff_head *list)
{
 newsk->next = next;
 newsk->prev = prev;
 next->prev = prev->next = newsk;
 list->qlen++;
}

static inline void __skb_queue_splice( struct sk_buff_head *list,
          struct sk_buff *prev,
          struct sk_buff *next)
{
 struct sk_buff *first = list->next;
 struct sk_buff *last = list->prev;

 first->prev = prev;
 prev->next = first;

 last->next = next;
 next->prev = last;
}






static inline void skb_queue_splice( struct sk_buff_head *list,
        struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, (struct sk_buff *) head, head->next);
  head->qlen += list->qlen;
 }
}
static inline void skb_queue_splice_init(struct sk_buff_head *list,
      struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, (struct sk_buff *) head, head->next);
  head->qlen += list->qlen;
  __skb_queue_head_init(list);
 }
}






static inline void skb_queue_splice_tail( struct sk_buff_head *list,
      struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, head->prev, (struct sk_buff *) head);
  head->qlen += list->qlen;
 }
}
static inline void skb_queue_splice_tail_init(struct sk_buff_head *list,
           struct sk_buff_head *head)
{
 if (!skb_queue_empty(list)) {
  __skb_queue_splice(list, head->prev, (struct sk_buff *) head);
  head->qlen += list->qlen;
  __skb_queue_head_init(list);
 }
}
static inline void __skb_queue_after(struct sk_buff_head *list,
         struct sk_buff *prev,
         struct sk_buff *newsk)
{
 __skb_insert(newsk, prev, prev->next, list);
}

void skb_append(struct sk_buff *old, struct sk_buff *newsk,
  struct sk_buff_head *list);

static inline void __skb_queue_before(struct sk_buff_head *list,
          struct sk_buff *next,
          struct sk_buff *newsk)
{
 __skb_insert(newsk, next->prev, next, list);
}
void skb_queue_head(struct sk_buff_head *list, struct sk_buff *newsk);
static inline void __skb_queue_head(struct sk_buff_head *list,
        struct sk_buff *newsk)
{
 __skb_queue_after(list, (struct sk_buff *)list, newsk);
}
void skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk);
static inline void __skb_queue_tail(struct sk_buff_head *list,
       struct sk_buff *newsk)
{
 __skb_queue_before(list, (struct sk_buff *)list, newsk);
}





void skb_unlink(struct sk_buff *skb, struct sk_buff_head *list);
static inline void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
 struct sk_buff *next, *prev;

 list->qlen--;
 next = skb->next;
 prev = skb->prev;
 skb->next = skb->prev = 0;
 next->prev = prev;
 prev->next = next;
}
struct sk_buff *skb_dequeue(struct sk_buff_head *list);
static inline struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
 struct sk_buff *skb = skb_peek(list);
 if (skb)
  __skb_unlink(skb, list);
 return skb;
}
struct sk_buff *skb_dequeue_tail(struct sk_buff_head *list);
static inline struct sk_buff *__skb_dequeue_tail(struct sk_buff_head *list)
{
 struct sk_buff *skb = skb_peek_tail(list);
 if (skb)
  __skb_unlink(skb, list);
 return skb;
}


static inline bool skb_is_nonlinear( struct sk_buff *skb)
{
 return skb->data_len;
}

static inline unsigned int skb_headlen( struct sk_buff *skb)
{
 return skb->len - skb->data_len;
}

static inline int skb_pagelen( struct sk_buff *skb)
{
 int i, len = 0;

 for (i = (int)((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags - 1; i >= 0; i--)
  len += skb_frag_size(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i]);
 return len + skb_headlen(skb);
}
static inline void __skb_fill_page_desc(struct sk_buff *skb, int i,
     struct page *page, int off, int size)
{
 skb_frag_t *frag = &((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i];
 frag->page.p = page;
 frag->page_offset = off;
 skb_frag_size_set(frag, size);

 page = compound_head(page);
 if (page->pfmemalloc && !page->mapping)
  skb->pfmemalloc = _true;
}
static inline void skb_fill_page_desc(struct sk_buff *skb, int i,
          struct page *page, int off, int size)
{
 __skb_fill_page_desc(skb, i, page, off, size);
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->nr_frags = i + 1;
}

void skb_add_rx_frag(struct sk_buff *skb, int i, struct page *page, int off,
       int size, unsigned int truesize);

void skb_coalesce_rx_frag(struct sk_buff *skb, int i, int size,
     unsigned int truesize);






static inline unsigned char *skb_tail_pointer( struct sk_buff *skb)
{
 return skb->head + skb->tail;
}

static inline void skb_reset_tail_pointer(struct sk_buff *skb)
{
 skb->tail = skb->data - skb->head;
}

static inline void skb_set_tail_pointer(struct sk_buff *skb, int offset)
{
 skb_reset_tail_pointer(skb);
 skb->tail += offset;
}
unsigned char *pskb_put(struct sk_buff *skb, struct sk_buff *tail, int len);
unsigned char *skb_put(struct sk_buff *skb, unsigned int len);
static inline unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
{
 unsigned char *tmp = skb_tail_pointer(skb);
 (skb_is_nonlinear(skb));
 skb->tail += len;
 skb->len += len;
 return tmp;
}

unsigned char *skb_push(struct sk_buff *skb, unsigned int len);
static inline unsigned char *__skb_push(struct sk_buff *skb, unsigned int len)
{
 skb->data -= len;
 skb->len += len;
 return skb->data;
}

unsigned char *skb_pull(struct sk_buff *skb, unsigned int len);
static inline unsigned char *__skb_pull(struct sk_buff *skb, unsigned int len)
{
 skb->len -= len;
 (skb->len < skb->data_len);
 return skb->data += len;
}

static inline unsigned char *skb_pull_inline(struct sk_buff *skb, unsigned int len)
{
 return __builtin_expect(!!(len > skb->len), 0) ? 0 : __skb_pull(skb, len);
}

unsigned char *__pskb_pull_tail(struct sk_buff *skb, int delta);

static inline unsigned char *__pskb_pull(struct sk_buff *skb, unsigned int len)
{
 if (len > skb_headlen(skb) &&
     !__pskb_pull_tail(skb, len - skb_headlen(skb)))
  return 0;
 skb->len -= len;
 return skb->data += len;
}

static inline unsigned char *pskb_pull(struct sk_buff *skb, unsigned int len)
{
 return __builtin_expect(!!(len > skb->len), 0) ? 0 : __pskb_pull(skb, len);
}

static inline int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(len <= skb_headlen(skb)), 1))
  return 1;
 if (__builtin_expect(!!(len > skb->len), 0))
  return 0;
 return __pskb_pull_tail(skb, len - skb_headlen(skb)) != 0;
}







static inline unsigned int skb_headroom( struct sk_buff *skb)
{
 return skb->data - skb->head;
}







static inline int skb_tailroom( struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) ? 0 : skb->end - skb->tail;
}
static inline int skb_availroom( struct sk_buff *skb)
{
 if (skb_is_nonlinear(skb))
  return 0;

 return skb->end - skb->tail - skb->reserved_tailroom;
}
static inline void skb_reserve(struct sk_buff *skb, int len)
{
 skb->data += len;
 skb->tail += len;
}

static inline void skb_reset_inner_headers(struct sk_buff *skb)
{
 skb->inner_mac_header = skb->mac_header;
 skb->inner_network_header = skb->network_header;
 skb->inner_transport_header = skb->transport_header;
}

static inline void skb_reset_mac_len(struct sk_buff *skb)
{
 skb->mac_len = skb->network_header - skb->mac_header;
}

static inline unsigned char *skb_inner_transport_header( struct sk_buff
       *skb)
{
 return skb->head + skb->inner_transport_header;
}

static inline void skb_reset_inner_transport_header(struct sk_buff *skb)
{
 skb->inner_transport_header = skb->data - skb->head;
}

static inline void skb_set_inner_transport_header(struct sk_buff *skb,
         int offset)
{
 skb_reset_inner_transport_header(skb);
 skb->inner_transport_header += offset;
}

static inline unsigned char *skb_inner_network_header( struct sk_buff *skb)
{
 return skb->head + skb->inner_network_header;
}

static inline void skb_reset_inner_network_header(struct sk_buff *skb)
{
 skb->inner_network_header = skb->data - skb->head;
}

static inline void skb_set_inner_network_header(struct sk_buff *skb,
      int offset)
{
 skb_reset_inner_network_header(skb);
 skb->inner_network_header += offset;
}

static inline unsigned char *skb_inner_mac_header( struct sk_buff *skb)
{
 return skb->head + skb->inner_mac_header;
}

static inline void skb_reset_inner_mac_header(struct sk_buff *skb)
{
 skb->inner_mac_header = skb->data - skb->head;
}

static inline void skb_set_inner_mac_header(struct sk_buff *skb,
         int offset)
{
 skb_reset_inner_mac_header(skb);
 skb->inner_mac_header += offset;
}
static inline bool skb_transport_header_was_set( struct sk_buff *skb)
{
 return skb->transport_header != (typeof(skb->transport_header))~0U;
}

static inline unsigned char *skb_transport_header( struct sk_buff *skb)
{
 return skb->head + skb->transport_header;
}

static inline void skb_reset_transport_header(struct sk_buff *skb)
{
 skb->transport_header = skb->data - skb->head;
}

static inline void skb_set_transport_header(struct sk_buff *skb,
         int offset)
{
 skb_reset_transport_header(skb);
 skb->transport_header += offset;
}

static inline unsigned char *skb_network_header( struct sk_buff *skb)
{
 return skb->head + skb->network_header;
}

static inline void skb_reset_network_header(struct sk_buff *skb)
{
 skb->network_header = skb->data - skb->head;
}

static inline void skb_set_network_header(struct sk_buff *skb, int offset)
{
 skb_reset_network_header(skb);
 skb->network_header += offset;
}

static inline unsigned char *skb_mac_header( struct sk_buff *skb)
{
 return skb->head + skb->mac_header;
}

static inline int skb_mac_header_was_set( struct sk_buff *skb)
{
 return skb->mac_header != (typeof(skb->mac_header))~0U;
}

static inline void skb_reset_mac_header(struct sk_buff *skb)
{
 skb->mac_header = skb->data - skb->head;
}

static inline void skb_set_mac_header(struct sk_buff *skb, int offset)
{
 skb_reset_mac_header(skb);
 skb->mac_header += offset;
}

static inline void skb_pop_mac_header(struct sk_buff *skb)
{
 skb->mac_header = skb->network_header;
}

static inline void skb_probe_transport_header(struct sk_buff *skb,
           int offset_hint)
{
 struct flow_keys keys;

 if (skb_transport_header_was_set(skb))
  return;
 else if (skb_flow_dissect(skb, &keys))
  skb_set_transport_header(skb, keys.thoff);
 else
  skb_set_transport_header(skb, offset_hint);
}

static inline void skb_mac_header_rebuild(struct sk_buff *skb)
{
 if (skb_mac_header_was_set(skb)) {
  unsigned char *old_mac = skb_mac_header(skb);

  skb_set_mac_header(skb, -skb->mac_len);
  memmove(skb_mac_header(skb), old_mac, skb->mac_len);
 }
}

static inline int skb_checksum_start_offset( struct sk_buff *skb)
{
 return skb->csum_start - skb_headroom(skb);
}

static inline int skb_transport_offset( struct sk_buff *skb)
{
 return skb_transport_header(skb) - skb->data;
}

static inline u32 skb_network_header_len( struct sk_buff *skb)
{
 return skb->transport_header - skb->network_header;
}

static inline u32 skb_inner_network_header_len( struct sk_buff *skb)
{
 return skb->inner_transport_header - skb->inner_network_header;
}

static inline int skb_network_offset( struct sk_buff *skb)
{
 return skb_network_header(skb) - skb->data;
}

static inline int skb_inner_network_offset( struct sk_buff *skb)
{
 return skb_inner_network_header(skb) - skb->data;
}

static inline int pskb_network_may_pull(struct sk_buff *skb, unsigned int len)
{
 return pskb_may_pull(skb, skb_network_offset(skb) + len);
}
int ___pskb_trim(struct sk_buff *skb, unsigned int len);

static inline void __skb_trim(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(skb_is_nonlinear(skb)), 0)) {
  (1);
  return;
 }
 skb->len = len;
 skb_set_tail_pointer(skb, len);
}

void skb_trim(struct sk_buff *skb, unsigned int len);

static inline int __pskb_trim(struct sk_buff *skb, unsigned int len)
{
 if (skb->data_len)
  return ___pskb_trim(skb, len);
 __skb_trim(skb, len);
 return 0;
}

static inline int pskb_trim(struct sk_buff *skb, unsigned int len)
{
 return (len < skb->len) ? __pskb_trim(skb, len) : 0;
}
static inline void pskb_trim_unique(struct sk_buff *skb, unsigned int len)
{
 int err = pskb_trim(skb, len);
 (err);
}
static inline void skb_orphan(struct sk_buff *skb)
{
 if (skb->destructor) {
  skb->destructor(skb);
  skb->destructor = 0;
  skb->sk = 0;
 } else {
  (skb->sk);
 }
}
static inline int skb_orphan_frags(struct sk_buff *skb, gfp_t gfp_mask)
{
 if (__builtin_expect(!!(!(((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_DEV_ZEROCOPY)), 1))
  return 0;
 return skb_copy_ubufs(skb, gfp_mask);
}
void skb_queue_purge(struct sk_buff_head *list);
static inline void __skb_queue_purge(struct sk_buff_head *list)
{
 struct sk_buff *skb;
 while ((skb = __skb_dequeue(list)) != 0)
  kfree_skb(skb);
}





void *netdev_alloc_frag(unsigned int fragsz);

struct sk_buff *__netdev_alloc_skb(struct net_device *dev, unsigned int length,
       gfp_t gfp_mask);
static inline struct sk_buff *netdev_alloc_skb(struct net_device *dev,
            unsigned int length)
{
 return __netdev_alloc_skb(dev, length, ((( gfp_t)0x20u)));
}


static inline struct sk_buff *__dev_alloc_skb(unsigned int length,
           gfp_t gfp_mask)
{
 return __netdev_alloc_skb(0, length, gfp_mask);
}


static inline struct sk_buff *dev_alloc_skb(unsigned int length)
{
 return netdev_alloc_skb(0, length);
}


static inline struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev,
  unsigned int length, gfp_t gfp)
{
 struct sk_buff *skb = __netdev_alloc_skb(dev, length + 0, gfp);

 if (0 && skb)
  skb_reserve(skb, 0);
 return skb;
}

static inline struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev,
  unsigned int length)
{
 return __netdev_alloc_skb_ip_align(dev, length, ((( gfp_t)0x20u)));
}
static inline struct page *__skb_alloc_pages(gfp_t gfp_mask,
           struct sk_buff *skb,
           unsigned int order)
{
 struct page *page;

 gfp_mask |= (( gfp_t)0x100u);

 if (!(gfp_mask & (( gfp_t)0x10000u)))
  gfp_mask |= (( gfp_t)0x2000u);

 page = alloc_pages_node((-1), gfp_mask, order);
 if (skb && page && page->pfmemalloc)
  skb->pfmemalloc = _true;

 return page;
}
static inline struct page *__skb_alloc_page(gfp_t gfp_mask,
          struct sk_buff *skb)
{
 return __skb_alloc_pages(gfp_mask, skb, 0);
}






static inline void skb_propagate_pfmemalloc(struct page *page,
          struct sk_buff *skb)
{
 if (page && page->pfmemalloc)
  skb->pfmemalloc = _true;
}







static inline struct page *skb_frag_page( skb_frag_t *frag)
{
 return frag->page.p;
}







static inline void __skb_frag_ref(skb_frag_t *frag)
{
 get_page(skb_frag_page(frag));
}
static inline void skb_frag_ref(struct sk_buff *skb, int f)
{
 __skb_frag_ref(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[f]);
}







static inline void __skb_frag_unref(skb_frag_t *frag)
{
 ;
}
static inline void skb_frag_unref(struct sk_buff *skb, int f)
{
 __skb_frag_unref(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[f]);
}
static inline void *skb_frag_address( skb_frag_t *frag)
{
 return lowmem_page_address(skb_frag_page(frag)) + frag->page_offset;
}
static inline void *skb_frag_address_safe( skb_frag_t *frag)
{
 void *ptr = lowmem_page_address(skb_frag_page(frag));
 if (__builtin_expect(!!(!ptr), 0))
  return 0;

 return ptr + frag->page_offset;
}
static inline void __skb_frag_set_page(skb_frag_t *frag, struct page *page)
{
 frag->page.p = page;
}
static inline void skb_frag_set_page(struct sk_buff *skb, int f,
         struct page *page)
{
 __skb_frag_set_page(&((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[f], page);
}

bool skb_page_frag_refill(unsigned int sz, struct page_frag *pfrag, gfp_t prio);
static inline dma_addr_t skb_frag_dma_map(struct device *dev,
       skb_frag_t *frag,
       size_t offset, size_t size,
       enum dma_data_direction dir)
{
 return dma_map_page(dev, skb_frag_page(frag),
       frag->page_offset + offset, size, dir);
}

static inline struct sk_buff *pskb_copy(struct sk_buff *skb,
     gfp_t gfp_mask)
{
 return __pskb_copy(skb, skb_headroom(skb), gfp_mask);
}
static inline int skb_clone_writable( struct sk_buff *skb, unsigned int len)
{
 return !skb_header_cloned(skb) &&
        skb_headroom(skb) + len <= skb->hdr_len;
}

static inline int __skb_cow(struct sk_buff *skb, unsigned int headroom,
       int cloned)
{
 int delta = 0;

 if (headroom > skb_headroom(skb))
  delta = headroom - skb_headroom(skb);

 if (delta || cloned)
  return pskb_expand_head(skb, ((((delta)) + ((typeof((delta)))((({ typeof(32) _max1 = (32); typeof((1 << (6))) _max2 = ((1 << (6))); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; }))) - 1)) & ~((typeof((delta)))((({ typeof(32) _max1 = (32); typeof((1 << (6))) _max2 = ((1 << (6))); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; }))) - 1)), 0,
     ((( gfp_t)0x20u)));
 return 0;
}
static inline int skb_cow(struct sk_buff *skb, unsigned int headroom)
{
 return __skb_cow(skb, headroom, skb_cloned(skb));
}
static inline int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
 return __skb_cow(skb, headroom, skb_header_cloned(skb));
}
static inline int skb_padto(struct sk_buff *skb, unsigned int len)
{
 unsigned int size = skb->len;
 if (__builtin_expect(!!(size >= len), 1))
  return 0;
 return skb_pad(skb, len - size);
}

static inline int skb_add_data(struct sk_buff *skb,
          char *from, int copy)
{
 int off = skb->len;

 if (skb->ip_summed == 0) {
  int err = 0;
  __wsum csum = csum_partial_copy_from_user(from, skb_put(skb, copy),
           copy, 0, &err);
  if (!err) {
   skb->csum = csum_block_add(skb->csum, csum, off);
   return 0;
  }
 } else if (!copy_from_user(skb_put(skb, copy), from, copy))
  return 0;

 __skb_trim(skb, off);
 return -14;
}

static inline bool skb_can_coalesce(struct sk_buff *skb, int i,
        struct page *page, int off)
{
 if (i) {
  struct skb_frag_struct *frag = &((struct skb_shared_info *)(skb_end_pointer(skb)))->frags[i - 1];

  return page == skb_frag_page(frag) &&
         off == frag->page_offset + skb_frag_size(frag);
 }
 return _false;
}

static inline int __skb_linearize(struct sk_buff *skb)
{
 return __pskb_pull_tail(skb, skb->data_len) ? 0 : -12;
}
static inline int skb_linearize(struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) ? __skb_linearize(skb) : 0;
}
static inline bool skb_has_shared_frag( struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) &&
        ((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_SHARED_FRAG;
}
static inline int skb_linearize_cow(struct sk_buff *skb)
{
 return skb_is_nonlinear(skb) || skb_cloned(skb) ?
        __skb_linearize(skb) : 0;
}
static inline void skb_postpull_rcsum(struct sk_buff *skb,
          void *start, unsigned int len)
{
 if (skb->ip_summed == 2)
  skb->csum = csum_sub(skb->csum, csum_partial(start, len, 0));
}

unsigned char *skb_pull_rcsum(struct sk_buff *skb, unsigned int len);
static inline int pskb_trim_rcsum(struct sk_buff *skb, unsigned int len)
{
 if (__builtin_expect(!!(len >= skb->len), 1))
  return 0;
 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
 return __pskb_trim(skb, len);
}
static inline bool skb_has_frag_list( struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->frag_list != 0;
}

static inline void skb_frag_list_init(struct sk_buff *skb)
{
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->frag_list = 0;
}

static inline void skb_frag_add_head(struct sk_buff *skb, struct sk_buff *frag)
{
 frag->next = ((struct skb_shared_info *)(skb_end_pointer(skb)))->frag_list;
 ((struct skb_shared_info *)(skb_end_pointer(skb)))->frag_list = frag;
}




struct sk_buff *__skb_recv_datagram(struct sock *sk, unsigned flags,
        int *peeked, int *off, int *err);
struct sk_buff *skb_recv_datagram(struct sock *sk, unsigned flags, int noblock,
      int *err);
unsigned int datagram_poll(struct file *file, struct socket *sock,
      struct poll_table_struct *wait);
int skb_copy_datagram_iovec( struct sk_buff *from, int offset,
       struct iovec *to, int size);
int skb_copy_and_csum_datagram_iovec(struct sk_buff *skb, int hlen,
         struct iovec *iov);
int skb_copy_datagram_from_iovec(struct sk_buff *skb, int offset,
     struct iovec *from, int from_offset,
     int len);
int zerocopy_sg_from_iovec(struct sk_buff *skb, struct iovec *frm,
      int offset, size_t count);
int skb_copy_datagram_const_iovec( struct sk_buff *from, int offset,
      struct iovec *to, int to_offset,
      int size);
void skb_free_datagram(struct sock *sk, struct sk_buff *skb);
void skb_free_datagram_locked(struct sock *sk, struct sk_buff *skb);
int skb_kill_datagram(struct sock *sk, struct sk_buff *skb, unsigned int flags);
int skb_copy_bits( struct sk_buff *skb, int offset, void *to, int len);
int skb_store_bits(struct sk_buff *skb, int offset, void *from, int len);
__wsum skb_copy_and_csum_bits( struct sk_buff *skb, int offset, u8 *to,
         int len, __wsum csum);
int skb_splice_bits(struct sk_buff *skb, unsigned int offset,
      struct pipe_inode_info *pipe, unsigned int len,
      unsigned int flags);
void skb_copy_and_csum_dev( struct sk_buff *skb, u8 *to);
void skb_split(struct sk_buff *skb, struct sk_buff *skb1, u32 len);
int skb_shift(struct sk_buff *tgt, struct sk_buff *skb, int shiftlen);
void skb_scrub_packet(struct sk_buff *skb, bool xnet);
unsigned int skb_gso_transport_seglen( struct sk_buff *skb);
struct sk_buff *skb_segment(struct sk_buff *skb, netdev_features_t features);

struct skb_checksum_ops {
  template <typename, int = 0> struct __BYPASSskb_checksum_ops {};
  template <typename, int> friend struct __BYPASSskb_checksum_ops;
 __wsum (*update)( void *mem, int len, __wsum wsum);
 __wsum (*combine)(__wsum csum, __wsum csum2, int offset, int len);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

__wsum __skb_checksum( struct sk_buff *skb, int offset, int len,
        __wsum csum, struct skb_checksum_ops *ops);
__wsum skb_checksum( struct sk_buff *skb, int offset, int len,
      __wsum csum);

static inline void *skb_header_pointer( struct sk_buff *skb, int offset,
           int len, void *buffer)
{
 int hlen = skb_headlen(skb);

 if (hlen - offset >= len)
  return skb->data + offset;

 if (skb_copy_bits(skb, offset, buffer, len) < 0)
  return 0;

 return buffer;
}

static inline void skb_copy_from_linear_data( struct sk_buff *skb,
          void *to,
          unsigned int len)
{
 memcpy(to, skb->data, len);
}

static inline void skb_copy_from_linear_data_offset( struct sk_buff *skb,
          int offset, void *to,
          unsigned int len)
{
 memcpy(to, skb->data + offset, len);
}

static inline void skb_copy_to_linear_data(struct sk_buff *skb,
        void *from,
        unsigned int len)
{
 memcpy(skb->data, from, len);
}

static inline void skb_copy_to_linear_data_offset(struct sk_buff *skb,
        int offset,
        void *from,
        unsigned int len)
{
 memcpy(skb->data + offset, from, len);
}

void skb_init(void);

static inline ktime_t skb_get_ktime( struct sk_buff *skb)
{
 return skb->tstamp;
}
static inline void skb_get_timestamp( struct sk_buff *skb,
         struct timeval *stamp)
{
 *stamp = ns_to_timeval((skb->tstamp).tv64);
}

static inline void skb_get_timestampns( struct sk_buff *skb,
           struct timespec *stamp)
{
 *stamp = ns_to_timespec((skb->tstamp).tv64);
}

static inline void __net_timestamp(struct sk_buff *skb)
{
 skb->tstamp = ktime_get_real();
}

static inline ktime_t net_timedelta(ktime_t t)
{
 return ({ ({ ktime_t var; var.tv64 = (ktime_get_real()).tv64 - (t).tv64; var; }); });
}

static inline ktime_t net_invalid_timestamp(void)
{
 return ktime_set(0, 0);
}

void skb_timestamping_init(void);
static inline void skb_clone_tx_timestamp(struct sk_buff *skb)
{
}

static inline bool skb_defer_rx_timestamp(struct sk_buff *skb)
{
 return _false;
}
void skb_complete_tx_timestamp(struct sk_buff *skb,
          struct skb_shared_hwtstamps *hwtstamps);
void skb_tstamp_tx(struct sk_buff *orig_skb,
     struct skb_shared_hwtstamps *hwtstamps);

static inline void sw_tx_timestamp(struct sk_buff *skb)
{
 if (((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_SW_TSTAMP &&
     !(((struct skb_shared_info *)(skb_end_pointer(skb)))->tx_flags & SKBTX_IN_PROGRESS))
  skb_tstamp_tx(skb, 0);
}
static inline void skb_tx_timestamp(struct sk_buff *skb)
{
 skb_clone_tx_timestamp(skb);
 sw_tx_timestamp(skb);
}
void skb_complete_wifi_ack(struct sk_buff *skb, bool acked);

__sum16 __skb_checksum_complete_head(struct sk_buff *skb, int len);
__sum16 __skb_checksum_complete(struct sk_buff *skb);

static inline int skb_csum_unnecessary( struct sk_buff *skb)
{
 return skb->ip_summed & 1;
}
static inline __sum16 skb_checksum_complete(struct sk_buff *skb)
{
 return skb_csum_unnecessary(skb) ?
        0 : __skb_checksum_complete(skb);
}


void nf_conntrack_destroy(struct nf_conntrack *nfct);
static inline void nf_conntrack_put(struct nf_conntrack *nfct)
{
 if (nfct && 1)
  nf_conntrack_destroy(nfct);
}
static inline void nf_conntrack_get(struct nf_conntrack *nfct)
{
 if (nfct)
  ;
}


static inline void nf_bridge_put(struct nf_bridge_info *nf_bridge)
{
 if (nf_bridge && 1)
  kfree(nf_bridge);
}
static inline void nf_bridge_get(struct nf_bridge_info *nf_bridge)
{
 if (nf_bridge)
  ;
}

static inline void nf_reset(struct sk_buff *skb)
{

 nf_conntrack_put(skb->nfct);
 skb->nfct = 0;


 nf_bridge_put(skb->nf_bridge);
 skb->nf_bridge = 0;

}

static inline void nf_reset_trace(struct sk_buff *skb)
{

 skb->nf_trace = 0;

}


static inline void __nf_copy(struct sk_buff *dst, struct sk_buff *src)
{

 dst->nfct = src->nfct;
 nf_conntrack_get(src->nfct);
 dst->nfctinfo = src->nfctinfo;


 dst->nf_bridge = src->nf_bridge;
 nf_bridge_get(src->nf_bridge);

}

static inline void nf_copy(struct sk_buff *dst, struct sk_buff *src)
{

 nf_conntrack_put(dst->nfct);


 nf_bridge_put(dst->nf_bridge);

 __nf_copy(dst, src);
}


static inline void skb_copy_secmark(struct sk_buff *to, struct sk_buff *from)
{
 to->secmark = from->secmark;
}

static inline void skb_init_secmark(struct sk_buff *skb)
{
 skb->secmark = 0;
}
static inline void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
{
 skb->queue_mapping = queue_mapping;
}

static inline u16 skb_get_queue_mapping( struct sk_buff *skb)
{
 return skb->queue_mapping;
}

static inline void skb_copy_queue_mapping(struct sk_buff *to, struct sk_buff *from)
{
 to->queue_mapping = from->queue_mapping;
}

static inline void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
 skb->queue_mapping = rx_queue + 1;
}

static inline u16 skb_get_rx_queue( struct sk_buff *skb)
{
 return skb->queue_mapping - 1;
}

static inline bool skb_rx_queue_recorded( struct sk_buff *skb)
{
 return skb->queue_mapping != 0;
}

u16 __skb_tx_hash( struct net_device *dev, struct sk_buff *skb,
    unsigned int num_tx_queues);

static inline struct sec_path *skb_sec_path(struct sk_buff *skb)
{

 return skb->sp;



}







struct skb_gso_cb {
  template <typename, int = 0> struct __BYPASSskb_gso_cb {};
  template <typename, int> friend struct __BYPASSskb_gso_cb;
 int mac_offset;
 int encap_level;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


static inline int skb_tnl_header_len( struct sk_buff *inner_skb)
{
 return (skb_mac_header(inner_skb) - inner_skb->head) -
  ((struct skb_gso_cb *)(inner_skb)->cb)->mac_offset;
}

static inline int gso_pskb_expand_head(struct sk_buff *skb, int extra)
{
 int new_headroom, headroom;
 int ret;

 headroom = skb_headroom(skb);
 ret = pskb_expand_head(skb, extra, 0, ((( gfp_t)0x20u)));
 if (ret)
  return ret;

 new_headroom = skb_headroom(skb);
 ((struct skb_gso_cb *)(skb)->cb)->mac_offset += (new_headroom - headroom);
 return 0;
}

static inline bool skb_is_gso( struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_size;
}


static inline bool skb_is_gso_v6( struct sk_buff *skb)
{
 return ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type & SKB_GSO_TCPV6;
}

void __skb_warn_lro_forwarding( struct sk_buff *skb);

static inline bool skb_warn_if_lro( struct sk_buff *skb)
{


 struct skb_shared_info *shinfo = ((struct skb_shared_info *)(skb_end_pointer(skb)));

 if (skb_is_nonlinear(skb) && shinfo->gso_size != 0 &&
     __builtin_expect(!!(shinfo->gso_type == 0), 0)) {
  __skb_warn_lro_forwarding(skb);
  return _true;
 }
 return _false;
}

static inline void skb_forward_csum(struct sk_buff *skb)
{

 if (skb->ip_summed == 2)
  skb->ip_summed = 0;
}
static inline void skb_checksum_none_assert( struct sk_buff *skb)
{



}

bool skb_partial_csum_set(struct sk_buff *skb, u16 start, u16 off);

u32 __skb_get_poff( struct sk_buff *skb);
static inline bool skb_head_is_locked( struct sk_buff *skb)
{
 return !skb->head_frag || skb_cloned(skb);
}
static inline unsigned int skb_gso_network_seglen( struct sk_buff *skb)
{
 unsigned int hdr_len = skb_transport_header(skb) -
          skb_network_header(skb);
 return hdr_len + skb_gso_transport_seglen(skb);
}
struct ethhdr {
  template <typename, int = 0> struct __BYPASSethhdr {};
  template <typename, int> friend struct __BYPASSethhdr;
 unsigned char h_dest[6];
 unsigned char h_source[6];
 __be16 h_proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

static inline struct ethhdr *eth_hdr( struct sk_buff *skb)
{
 return (struct ethhdr *)skb_mac_header(skb);
}

int eth_header_parse( struct sk_buff *skb, unsigned char *haddr);

extern ssize_t sysfs_format_mac(char *buf, unsigned char *addr, int len);


struct ethtool_cmd {
  template <typename, int = 0> struct __BYPASSethtool_cmd {};
  template <typename, int> friend struct __BYPASSethtool_cmd;
 __u32 cmd;
 __u32 supported;
 __u32 advertising;
 __u16 speed;



 __u8 duplex;
 __u8 port;
 __u8 phy_address;



 __u8 transceiver;
 __u8 autoneg;
 __u8 mdio_support;


 __u32 maxtxpkt;
 __u32 maxrxpkt;
 __u16 speed_hi;



 __u8 eth_tp_mdix;
 __u8 eth_tp_mdix_ctrl;


 __u32 lp_advertising;
 __u32 reserved[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void ethtool_cmd_speed_set(struct ethtool_cmd *ep,
      __u32 speed)
{

 ep->speed = (__u16)speed;
 ep->speed_hi = (__u16)(speed >> 16);
}

static inline __u32 ethtool_cmd_speed( struct ethtool_cmd *ep)
{
 return (ep->speed_hi << 16) | ep->speed;
}
struct ethtool_drvinfo {
  template <typename, int = 0> struct __BYPASSethtool_drvinfo {};
  template <typename, int> friend struct __BYPASSethtool_drvinfo;
 __u32 cmd;
 char driver[32];
 char version[32];
 char fw_version[32];
 char bus_info[32];

 char reserved1[32];
 char reserved2[12];







 __u32 n_priv_flags;
 __u32 n_stats;
 __u32 testinfo_len;
 __u32 eedump_len;
 __u32 regdump_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct ethtool_wolinfo {
  template <typename, int = 0> struct __BYPASSethtool_wolinfo {};
  template <typename, int> friend struct __BYPASSethtool_wolinfo;
 __u32 cmd;
 __u32 supported;
 __u32 wolopts;
 __u8 sopass[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ethtool_value {
  template <typename, int = 0> struct __BYPASSethtool_value {};
  template <typename, int> friend struct __BYPASSethtool_value;
 __u32 cmd;
 __u32 data;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ethtool_regs {
  template <typename, int = 0> struct __BYPASSethtool_regs {};
  template <typename, int> friend struct __BYPASSethtool_regs;
 __u32 cmd;
 __u32 version;
 __u32 len;
 __u8 data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ethtool_eeprom {
  template <typename, int = 0> struct __BYPASSethtool_eeprom {};
  template <typename, int> friend struct __BYPASSethtool_eeprom;
 __u32 cmd;
 __u32 magic;
 __u32 offset;
 __u32 len;
 __u8 data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_eee {
  template <typename, int = 0> struct __BYPASSethtool_eee {};
  template <typename, int> friend struct __BYPASSethtool_eee;
 __u32 cmd;
 __u32 supported;
 __u32 advertised;
 __u32 lp_advertised;
 __u32 eee_active;
 __u32 eee_enabled;
 __u32 tx_lpi_enabled;
 __u32 tx_lpi_timer;
 __u32 reserved[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_modinfo {
  template <typename, int = 0> struct __BYPASSethtool_modinfo {};
  template <typename, int> friend struct __BYPASSethtool_modinfo;
 __u32 cmd;
 __u32 type;
 __u32 eeprom_len;
 __u32 reserved[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_coalesce {
  template <typename, int = 0> struct __BYPASSethtool_coalesce {};
  template <typename, int> friend struct __BYPASSethtool_coalesce;
 __u32 cmd;
 __u32 rx_coalesce_usecs;
 __u32 rx_max_coalesced_frames;
 __u32 rx_coalesce_usecs_irq;
 __u32 rx_max_coalesced_frames_irq;
 __u32 tx_coalesce_usecs;
 __u32 tx_max_coalesced_frames;
 __u32 tx_coalesce_usecs_irq;
 __u32 tx_max_coalesced_frames_irq;
 __u32 stats_block_coalesce_usecs;
 __u32 use_adaptive_rx_coalesce;
 __u32 use_adaptive_tx_coalesce;
 __u32 pkt_rate_low;
 __u32 rx_coalesce_usecs_low;
 __u32 rx_max_coalesced_frames_low;
 __u32 tx_coalesce_usecs_low;
 __u32 tx_max_coalesced_frames_low;
 __u32 pkt_rate_high;
 __u32 rx_coalesce_usecs_high;
 __u32 rx_max_coalesced_frames_high;
 __u32 tx_coalesce_usecs_high;
 __u32 tx_max_coalesced_frames_high;
 __u32 rate_sample_interval;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ethtool_ringparam {
  template <typename, int = 0> struct __BYPASSethtool_ringparam {};
  template <typename, int> friend struct __BYPASSethtool_ringparam;
 __u32 cmd;





 __u32 rx_max_pending;
 __u32 rx_mini_max_pending;
 __u32 rx_jumbo_max_pending;
 __u32 tx_max_pending;




 __u32 rx_pending;
 __u32 rx_mini_pending;
 __u32 rx_jumbo_pending;
 __u32 tx_pending;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_channels {
  template <typename, int = 0> struct __BYPASSethtool_channels {};
  template <typename, int> friend struct __BYPASSethtool_channels;
 __u32 cmd;
 __u32 max_rx;
 __u32 max_tx;
 __u32 max_other;
 __u32 max_combined;
 __u32 rx_count;
 __u32 tx_count;
 __u32 other_count;
 __u32 combined_count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ethtool_pauseparam {
  template <typename, int = 0> struct __BYPASSethtool_pauseparam {};
  template <typename, int> friend struct __BYPASSethtool_pauseparam;
 __u32 cmd;
 __u32 autoneg;
 __u32 rx_pause;
 __u32 tx_pause;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum ethtool_stringset {
 ETH_SS_TEST = 0,
 ETH_SS_STATS,
 ETH_SS_PRIV_FLAGS,
 ETH_SS_NTUPLE_FILTERS,
 ETH_SS_FEATURES,
};


struct ethtool_gstrings {
  template <typename, int = 0> struct __BYPASSethtool_gstrings {};
  template <typename, int> friend struct __BYPASSethtool_gstrings;
 __u32 cmd;
 __u32 string_set;
 __u32 len;
 __u8 data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ethtool_sset_info {
  template <typename, int = 0> struct __BYPASSethtool_sset_info {};
  template <typename, int> friend struct __BYPASSethtool_sset_info;
 __u32 cmd;
 __u32 reserved;
 __u64 sset_mask;

 __u32 data[0];




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum ethtool_test_flags {
 ETH_TEST_FL_OFFLINE = (1 << 0),
 ETH_TEST_FL_FAILED = (1 << 1),
 ETH_TEST_FL_EXTERNAL_LB = (1 << 2),
 ETH_TEST_FL_EXTERNAL_LB_DONE = (1 << 3),
};


struct ethtool_test {
  template <typename, int = 0> struct __BYPASSethtool_test {};
  template <typename, int> friend struct __BYPASSethtool_test;
 __u32 cmd;
 __u32 flags;
 __u32 reserved;
 __u32 len;
 __u64 data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ethtool_stats {
  template <typename, int = 0> struct __BYPASSethtool_stats {};
  template <typename, int> friend struct __BYPASSethtool_stats;
 __u32 cmd;
 __u32 n_stats;
 __u64 data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ethtool_perm_addr {
  template <typename, int = 0> struct __BYPASSethtool_perm_addr {};
  template <typename, int> friend struct __BYPASSethtool_perm_addr;
 __u32 cmd;
 __u32 size;
 __u8 data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum ethtool_flags {
 ETH_FLAG_TXVLAN = (1 << 7),
 ETH_FLAG_RXVLAN = (1 << 8),
 ETH_FLAG_LRO = (1 << 15),
 ETH_FLAG_NTUPLE = (1 << 27),
 ETH_FLAG_RXHASH = (1 << 28),
};
struct ethtool_tcpip4_spec {
  template <typename, int = 0> struct __BYPASSethtool_tcpip4_spec {};
  template <typename, int> friend struct __BYPASSethtool_tcpip4_spec;
 __be32 ip4src;
 __be32 ip4dst;
 __be16 psrc;
 __be16 pdst;
 __u8 tos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_ah_espip4_spec {
  template <typename, int = 0> struct __BYPASSethtool_ah_espip4_spec {};
  template <typename, int> friend struct __BYPASSethtool_ah_espip4_spec;
 __be32 ip4src;
 __be32 ip4dst;
 __be32 spi;
 __u8 tos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_usrip4_spec {
  template <typename, int = 0> struct __BYPASSethtool_usrip4_spec {};
  template <typename, int> friend struct __BYPASSethtool_usrip4_spec;
 __be32 ip4src;
 __be32 ip4dst;
 __be32 l4_4_bytes;
 __u8 tos;
 __u8 ip_ver;
 __u8 proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

union ethtool_flow_union {
 struct ethtool_tcpip4_spec tcp_ip4_spec;
 struct ethtool_tcpip4_spec udp_ip4_spec;
 struct ethtool_tcpip4_spec sctp_ip4_spec;
 struct ethtool_ah_espip4_spec ah_ip4_spec;
 struct ethtool_ah_espip4_spec esp_ip4_spec;
 struct ethtool_usrip4_spec usr_ip4_spec;
 struct ethhdr ether_spec;
 __u8 hdata[52];
};
struct ethtool_flow_ext {
  template <typename, int = 0> struct __BYPASSethtool_flow_ext {};
  template <typename, int> friend struct __BYPASSethtool_flow_ext;
 __u8 padding[2];
 unsigned char h_dest[6];
 __be16 vlan_etype;
 __be16 vlan_tci;
 __be32 data[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_rx_flow_spec {
  template <typename, int = 0> struct __BYPASSethtool_rx_flow_spec {};
  template <typename, int> friend struct __BYPASSethtool_rx_flow_spec;
 __u32 flow_type;
 union ethtool_flow_union h_u;
 struct ethtool_flow_ext h_ext;
 union ethtool_flow_union m_u;
 struct ethtool_flow_ext m_ext;
 __u64 ring_cookie;
 __u32 location;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_rxnfc {
  template <typename, int = 0> struct __BYPASSethtool_rxnfc {};
  template <typename, int> friend struct __BYPASSethtool_rxnfc;
 __u32 cmd;
 __u32 flow_type;
 __u64 data;
 struct ethtool_rx_flow_spec fs;
 __u32 rule_cnt;
 __u32 rule_locs[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_rxfh_indir {
  template <typename, int = 0> struct __BYPASSethtool_rxfh_indir {};
  template <typename, int> friend struct __BYPASSethtool_rxfh_indir;
 __u32 cmd;
 __u32 size;
 __u32 ring_index[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_rx_ntuple_flow_spec {
  template <typename, int = 0> struct __BYPASSethtool_rx_ntuple_flow_spec {};
  template <typename, int> friend struct __BYPASSethtool_rx_ntuple_flow_spec;
 __u32 flow_type;
 union {
  struct ethtool_tcpip4_spec tcp_ip4_spec;
  struct ethtool_tcpip4_spec udp_ip4_spec;
  struct ethtool_tcpip4_spec sctp_ip4_spec;
  struct ethtool_ah_espip4_spec ah_ip4_spec;
  struct ethtool_ah_espip4_spec esp_ip4_spec;
  struct ethtool_usrip4_spec usr_ip4_spec;
  struct ethhdr ether_spec;
  __u8 hdata[72];
 } h_u, m_u;

 __u16 vlan_tag;
 __u16 vlan_tag_mask;
 __u64 data;
 __u64 data_mask;

 __s32 action;



  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct ethtool_rx_ntuple {
  template <typename, int = 0> struct __BYPASSethtool_rx_ntuple {};
  template <typename, int> friend struct __BYPASSethtool_rx_ntuple;
 __u32 cmd;
 struct ethtool_rx_ntuple_flow_spec fs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum ethtool_flash_op_type {
 ETHTOOL_FLASH_ALL_REGIONS = 0,
};


struct ethtool_flash {
  template <typename, int = 0> struct __BYPASSethtool_flash {};
  template <typename, int> friend struct __BYPASSethtool_flash;
 __u32 cmd;
 __u32 region;
 char data[128];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_dump {
  template <typename, int = 0> struct __BYPASSethtool_dump {};
  template <typename, int> friend struct __BYPASSethtool_dump;
 __u32 cmd;
 __u32 version;
 __u32 flag;
 __u32 len;
 __u8 data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_get_features_block {
  template <typename, int = 0> struct __BYPASSethtool_get_features_block {};
  template <typename, int> friend struct __BYPASSethtool_get_features_block;
 __u32 available;
 __u32 requested;
 __u32 active;
 __u32 never_changed;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_gfeatures {
  template <typename, int = 0> struct __BYPASSethtool_gfeatures {};
  template <typename, int> friend struct __BYPASSethtool_gfeatures;
 __u32 cmd;
 __u32 size;
 struct ethtool_get_features_block features[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct ethtool_set_features_block {
  template <typename, int = 0> struct __BYPASSethtool_set_features_block {};
  template <typename, int> friend struct __BYPASSethtool_set_features_block;
 __u32 valid;
 __u32 requested;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct ethtool_sfeatures {
  template <typename, int = 0> struct __BYPASSethtool_sfeatures {};
  template <typename, int> friend struct __BYPASSethtool_sfeatures;
 __u32 cmd;
 __u32 size;
 struct ethtool_set_features_block features[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ethtool_ts_info {
  template <typename, int = 0> struct __BYPASSethtool_ts_info {};
  template <typename, int> friend struct __BYPASSethtool_ts_info;
 __u32 cmd;
 __u32 so_timestamping;
 __s32 phc_index;
 __u32 tx_types;
 __u32 tx_reserved[3];
 __u32 rx_filters;
 __u32 rx_reserved[3];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum ethtool_sfeatures_retval_bits {
 ETHTOOL_F_UNSUPPORTED__BIT,
 ETHTOOL_F_WISH__BIT,
 ETHTOOL_F_COMPAT__BIT,
};
enum ethtool_reset_flags {





 ETH_RESET_MGMT = 1 << 0,
 ETH_RESET_IRQ = 1 << 1,
 ETH_RESET_DMA = 1 << 2,
 ETH_RESET_FILTER = 1 << 3,
 ETH_RESET_OFFLOAD = 1 << 4,
 ETH_RESET_MAC = 1 << 5,
 ETH_RESET_PHY = 1 << 6,
 ETH_RESET_RAM = 1 << 7,


 ETH_RESET_DEDICATED = 0x0000ffff,

 ETH_RESET_ALL = 0xffffffff,

};



struct compat_ethtool_rx_flow_spec {
  template <typename, int = 0> struct __BYPASScompat_ethtool_rx_flow_spec {};
  template <typename, int> friend struct __BYPASScompat_ethtool_rx_flow_spec;
 u32 flow_type;
 union ethtool_flow_union h_u;
 struct ethtool_flow_ext h_ext;
 union ethtool_flow_union m_u;
 struct ethtool_flow_ext m_ext;
 compat_u64 ring_cookie;
 u32 location;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_ethtool_rxnfc {
  template <typename, int = 0> struct __BYPASScompat_ethtool_rxnfc {};
  template <typename, int> friend struct __BYPASScompat_ethtool_rxnfc;
 u32 cmd;
 u32 flow_type;
 compat_u64 data;
 struct compat_ethtool_rx_flow_spec fs;
 u32 rule_cnt;
 u32 rule_locs[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern int __ethtool_get_settings(struct net_device *dev,
      struct ethtool_cmd *cmd);
enum ethtool_phys_id_state {
 ETHTOOL_ID_INACTIVE,
 ETHTOOL_ID_ACTIVE,
 ETHTOOL_ID_ON,
 ETHTOOL_ID_OFF
};

struct net_device;


u32 ethtool_op_get_link(struct net_device *dev);
int ethtool_op_get_ts_info(struct net_device *dev, struct ethtool_ts_info *eti);
static inline u32 ethtool_rxfh_indir_default(u32 index, u32 n_rx_rings)
{
 return index % n_rx_rings;
}
struct ethtool_ops {
  template <typename, int = 0> struct __BYPASSethtool_ops {};
  template <typename, int> friend struct __BYPASSethtool_ops;
 int (*get_settings)(struct net_device *, struct ethtool_cmd *);
 int (*set_settings)(struct net_device *, struct ethtool_cmd *);
 void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *);
 int (*get_regs_len)(struct net_device *);
 void (*get_regs)(struct net_device *, struct ethtool_regs *, void *);
 void (*get_wol)(struct net_device *, struct ethtool_wolinfo *);
 int (*set_wol)(struct net_device *, struct ethtool_wolinfo *);
 u32 (*get_msglevel)(struct net_device *);
 void (*set_msglevel)(struct net_device *, u32);
 int (*nway_reset)(struct net_device *);
 u32 (*get_link)(struct net_device *);
 int (*get_eeprom_len)(struct net_device *);
 int (*get_eeprom)(struct net_device *,
         struct ethtool_eeprom *, u8 *);
 int (*set_eeprom)(struct net_device *,
         struct ethtool_eeprom *, u8 *);
 int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *);
 int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *);
 void (*get_ringparam)(struct net_device *,
     struct ethtool_ringparam *);
 int (*set_ringparam)(struct net_device *,
     struct ethtool_ringparam *);
 void (*get_pauseparam)(struct net_device *,
      struct ethtool_pauseparam*);
 int (*set_pauseparam)(struct net_device *,
      struct ethtool_pauseparam*);
 void (*self_test)(struct net_device *, struct ethtool_test *, u64 *);
 void (*get_strings)(struct net_device *, u32 stringset, u8 *);
 int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state);
 void (*get_ethtool_stats)(struct net_device *,
         struct ethtool_stats *, u64 *);
 int (*begin)(struct net_device *);
 void (*complete)(struct net_device *);
 u32 (*get_priv_flags)(struct net_device *);
 int (*set_priv_flags)(struct net_device *, u32);
 int (*get_sset_count)(struct net_device *, int);
 int (*get_rxnfc)(struct net_device *,
        struct ethtool_rxnfc *, u32 *rule_locs);
 int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *);
 int (*flash_device)(struct net_device *, struct ethtool_flash *);
 int (*reset)(struct net_device *, u32 *);
 u32 (*get_rxfh_indir_size)(struct net_device *);
 int (*get_rxfh_indir)(struct net_device *, u32 *);
 int (*set_rxfh_indir)(struct net_device *, u32 *);
 void (*get_channels)(struct net_device *, struct ethtool_channels *);
 int (*set_channels)(struct net_device *, struct ethtool_channels *);
 int (*get_dump_flag)(struct net_device *, struct ethtool_dump *);
 int (*get_dump_data)(struct net_device *,
     struct ethtool_dump *, void *);
 int (*set_dump)(struct net_device *, struct ethtool_dump *);
 int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *);
 int (*get_module_info)(struct net_device *,
       struct ethtool_modinfo *);
 int (*get_module_eeprom)(struct net_device *,
         struct ethtool_eeprom *, u8 *);
 int (*get_eee)(struct net_device *, struct ethtool_eee *);
 int (*set_eee)(struct net_device *, struct ethtool_eee *);



  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct ctl_table_header;
struct prot_inuse;

struct netns_core {
  template <typename, int = 0> struct __BYPASSnetns_core {};
  template <typename, int> friend struct __BYPASSnetns_core;

 struct ctl_table_header *sysctl_hdr;

 int sysctl_somaxconn;

 struct prot_inuse *inuse;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum
{
 IPSTATS_MIB_NUM = 0,

 IPSTATS_MIB_INPKTS,
 IPSTATS_MIB_INOCTETS,
 IPSTATS_MIB_INDELIVERS,
 IPSTATS_MIB_OUTFORWDATAGRAMS,
 IPSTATS_MIB_OUTPKTS,
 IPSTATS_MIB_OUTOCTETS,

 IPSTATS_MIB_INHDRERRORS,
 IPSTATS_MIB_INTOOBIGERRORS,
 IPSTATS_MIB_INNOROUTES,
 IPSTATS_MIB_INADDRERRORS,
 IPSTATS_MIB_INUNKNOWNPROTOS,
 IPSTATS_MIB_INTRUNCATEDPKTS,
 IPSTATS_MIB_INDISCARDS,
 IPSTATS_MIB_OUTDISCARDS,
 IPSTATS_MIB_OUTNOROUTES,
 IPSTATS_MIB_REASMTIMEOUT,
 IPSTATS_MIB_REASMREQDS,
 IPSTATS_MIB_REASMOKS,
 IPSTATS_MIB_REASMFAILS,
 IPSTATS_MIB_FRAGOKS,
 IPSTATS_MIB_FRAGFAILS,
 IPSTATS_MIB_FRAGCREATES,
 IPSTATS_MIB_INMCASTPKTS,
 IPSTATS_MIB_OUTMCASTPKTS,
 IPSTATS_MIB_INBCASTPKTS,
 IPSTATS_MIB_OUTBCASTPKTS,
 IPSTATS_MIB_INMCASTOCTETS,
 IPSTATS_MIB_OUTMCASTOCTETS,
 IPSTATS_MIB_INBCASTOCTETS,
 IPSTATS_MIB_OUTBCASTOCTETS,
 IPSTATS_MIB_CSUMERRORS,
 IPSTATS_MIB_NOECTPKTS,
 IPSTATS_MIB_ECT1PKTS,
 IPSTATS_MIB_ECT0PKTS,
 IPSTATS_MIB_CEPKTS,
 __IPSTATS_MIB_MAX
};






enum
{
 ICMP_MIB_NUM = 0,
 ICMP_MIB_INMSGS,
 ICMP_MIB_INERRORS,
 ICMP_MIB_INDESTUNREACHS,
 ICMP_MIB_INTIMEEXCDS,
 ICMP_MIB_INPARMPROBS,
 ICMP_MIB_INSRCQUENCHS,
 ICMP_MIB_INREDIRECTS,
 ICMP_MIB_INECHOS,
 ICMP_MIB_INECHOREPS,
 ICMP_MIB_INTIMESTAMPS,
 ICMP_MIB_INTIMESTAMPREPS,
 ICMP_MIB_INADDRMASKS,
 ICMP_MIB_INADDRMASKREPS,
 ICMP_MIB_OUTMSGS,
 ICMP_MIB_OUTERRORS,
 ICMP_MIB_OUTDESTUNREACHS,
 ICMP_MIB_OUTTIMEEXCDS,
 ICMP_MIB_OUTPARMPROBS,
 ICMP_MIB_OUTSRCQUENCHS,
 ICMP_MIB_OUTREDIRECTS,
 ICMP_MIB_OUTECHOS,
 ICMP_MIB_OUTECHOREPS,
 ICMP_MIB_OUTTIMESTAMPS,
 ICMP_MIB_OUTTIMESTAMPREPS,
 ICMP_MIB_OUTADDRMASKS,
 ICMP_MIB_OUTADDRMASKREPS,
 ICMP_MIB_CSUMERRORS,
 __ICMP_MIB_MAX
};







enum
{
 ICMP6_MIB_NUM = 0,
 ICMP6_MIB_INMSGS,
 ICMP6_MIB_INERRORS,
 ICMP6_MIB_OUTMSGS,
 ICMP6_MIB_OUTERRORS,
 ICMP6_MIB_CSUMERRORS,
 __ICMP6_MIB_MAX
};
enum
{
 TCP_MIB_NUM = 0,
 TCP_MIB_RTOALGORITHM,
 TCP_MIB_RTOMIN,
 TCP_MIB_RTOMAX,
 TCP_MIB_MAXCONN,
 TCP_MIB_ACTIVEOPENS,
 TCP_MIB_PASSIVEOPENS,
 TCP_MIB_ATTEMPTFAILS,
 TCP_MIB_ESTABRESETS,
 TCP_MIB_CURRESTAB,
 TCP_MIB_INSEGS,
 TCP_MIB_OUTSEGS,
 TCP_MIB_RETRANSSEGS,
 TCP_MIB_INERRS,
 TCP_MIB_OUTRSTS,
 TCP_MIB_CSUMERRORS,
 __TCP_MIB_MAX
};






enum
{
 UDP_MIB_NUM = 0,
 UDP_MIB_INDATAGRAMS,
 UDP_MIB_NOPORTS,
 UDP_MIB_INERRORS,
 UDP_MIB_OUTDATAGRAMS,
 UDP_MIB_RCVBUFERRORS,
 UDP_MIB_SNDBUFERRORS,
 UDP_MIB_CSUMERRORS,
 __UDP_MIB_MAX
};


enum
{
 LINUX_MIB_NUM = 0,
 LINUX_MIB_SYNCOOKIESSENT,
 LINUX_MIB_SYNCOOKIESRECV,
 LINUX_MIB_SYNCOOKIESFAILED,
 LINUX_MIB_EMBRYONICRSTS,
 LINUX_MIB_PRUNECALLED,
 LINUX_MIB_RCVPRUNED,
 LINUX_MIB_OFOPRUNED,
 LINUX_MIB_OUTOFWINDOWICMPS,
 LINUX_MIB_LOCKDROPPEDICMPS,
 LINUX_MIB_ARPFILTER,
 LINUX_MIB_TIMEWAITED,
 LINUX_MIB_TIMEWAITRECYCLED,
 LINUX_MIB_TIMEWAITKILLED,
 LINUX_MIB_PAWSPASSIVEREJECTED,
 LINUX_MIB_PAWSACTIVEREJECTED,
 LINUX_MIB_PAWSESTABREJECTED,
 LINUX_MIB_DELAYEDACKS,
 LINUX_MIB_DELAYEDACKLOCKED,
 LINUX_MIB_DELAYEDACKLOST,
 LINUX_MIB_LISTENOVERFLOWS,
 LINUX_MIB_LISTENDROPS,
 LINUX_MIB_TCPPREQUEUED,
 LINUX_MIB_TCPDIRECTCOPYFROMBACKLOG,
 LINUX_MIB_TCPDIRECTCOPYFROMPREQUEUE,
 LINUX_MIB_TCPPREQUEUEDROPPED,
 LINUX_MIB_TCPHPHITS,
 LINUX_MIB_TCPHPHITSTOUSER,
 LINUX_MIB_TCPPUREACKS,
 LINUX_MIB_TCPHPACKS,
 LINUX_MIB_TCPRENORECOVERY,
 LINUX_MIB_TCPSACKRECOVERY,
 LINUX_MIB_TCPSACKRENEGING,
 LINUX_MIB_TCPFACKREORDER,
 LINUX_MIB_TCPSACKREORDER,
 LINUX_MIB_TCPRENOREORDER,
 LINUX_MIB_TCPTSREORDER,
 LINUX_MIB_TCPFULLUNDO,
 LINUX_MIB_TCPPARTIALUNDO,
 LINUX_MIB_TCPDSACKUNDO,
 LINUX_MIB_TCPLOSSUNDO,
 LINUX_MIB_TCPLOSTRETRANSMIT,
 LINUX_MIB_TCPRENOFAILURES,
 LINUX_MIB_TCPSACKFAILURES,
 LINUX_MIB_TCPLOSSFAILURES,
 LINUX_MIB_TCPFASTRETRANS,
 LINUX_MIB_TCPFORWARDRETRANS,
 LINUX_MIB_TCPSLOWSTARTRETRANS,
 LINUX_MIB_TCPTIMEOUTS,
 LINUX_MIB_TCPLOSSPROBES,
 LINUX_MIB_TCPLOSSPROBERECOVERY,
 LINUX_MIB_TCPRENORECOVERYFAIL,
 LINUX_MIB_TCPSACKRECOVERYFAIL,
 LINUX_MIB_TCPSCHEDULERFAILED,
 LINUX_MIB_TCPRCVCOLLAPSED,
 LINUX_MIB_TCPDSACKOLDSENT,
 LINUX_MIB_TCPDSACKOFOSENT,
 LINUX_MIB_TCPDSACKRECV,
 LINUX_MIB_TCPDSACKOFORECV,
 LINUX_MIB_TCPABORTONDATA,
 LINUX_MIB_TCPABORTONCLOSE,
 LINUX_MIB_TCPABORTONMEMORY,
 LINUX_MIB_TCPABORTONTIMEOUT,
 LINUX_MIB_TCPABORTONLINGER,
 LINUX_MIB_TCPABORTFAILED,
 LINUX_MIB_TCPMEMORYPRESSURES,
 LINUX_MIB_TCPSACKDISCARD,
 LINUX_MIB_TCPDSACKIGNOREDOLD,
 LINUX_MIB_TCPDSACKIGNOREDNOUNDO,
 LINUX_MIB_TCPSPURIOUSRTOS,
 LINUX_MIB_TCPMD5NOTFOUND,
 LINUX_MIB_TCPMD5UNEXPECTED,
 LINUX_MIB_SACKSHIFTED,
 LINUX_MIB_SACKMERGED,
 LINUX_MIB_SACKSHIFTFALLBACK,
 LINUX_MIB_TCPBACKLOGDROP,
 LINUX_MIB_TCPMINTTLDROP,
 LINUX_MIB_TCPDEFERACCEPTDROP,
 LINUX_MIB_IPRPFILTER,
 LINUX_MIB_TCPTIMEWAITOVERFLOW,
 LINUX_MIB_TCPREQQFULLDOCOOKIES,
 LINUX_MIB_TCPREQQFULLDROP,
 LINUX_MIB_TCPRETRANSFAIL,
 LINUX_MIB_TCPRCVCOALESCE,
 LINUX_MIB_TCPOFOQUEUE,
 LINUX_MIB_TCPOFODROP,
 LINUX_MIB_TCPOFOMERGE,
 LINUX_MIB_TCPCHALLENGEACK,
 LINUX_MIB_TCPSYNCHALLENGE,
 LINUX_MIB_TCPFASTOPENACTIVE,
 LINUX_MIB_TCPFASTOPENPASSIVE,
 LINUX_MIB_TCPFASTOPENPASSIVEFAIL,
 LINUX_MIB_TCPFASTOPENLISTENOVERFLOW,
 LINUX_MIB_TCPFASTOPENCOOKIEREQD,
 LINUX_MIB_TCPSPURIOUS_RTX_HOSTQUEUES,
 LINUX_MIB_BUSYPOLLRXPACKETS,
 __LINUX_MIB_MAX
};


enum
{
 LINUX_MIB_XFRMNUM = 0,
 LINUX_MIB_XFRMINERROR,
 LINUX_MIB_XFRMINBUFFERERROR,
 LINUX_MIB_XFRMINHDRERROR,
 LINUX_MIB_XFRMINNOSTATES,
 LINUX_MIB_XFRMINSTATEPROTOERROR,
 LINUX_MIB_XFRMINSTATEMODEERROR,
 LINUX_MIB_XFRMINSTATESEQERROR,
 LINUX_MIB_XFRMINSTATEEXPIRED,
 LINUX_MIB_XFRMINSTATEMISMATCH,
 LINUX_MIB_XFRMINSTATEINVALID,
 LINUX_MIB_XFRMINTMPLMISMATCH,
 LINUX_MIB_XFRMINNOPOLS,
 LINUX_MIB_XFRMINPOLBLOCK,
 LINUX_MIB_XFRMINPOLERROR,
 LINUX_MIB_XFRMOUTERROR,
 LINUX_MIB_XFRMOUTBUNDLEGENERROR,
 LINUX_MIB_XFRMOUTBUNDLECHECKERROR,
 LINUX_MIB_XFRMOUTNOSTATES,
 LINUX_MIB_XFRMOUTSTATEPROTOERROR,
 LINUX_MIB_XFRMOUTSTATEMODEERROR,
 LINUX_MIB_XFRMOUTSTATESEQERROR,
 LINUX_MIB_XFRMOUTSTATEEXPIRED,
 LINUX_MIB_XFRMOUTPOLBLOCK,
 LINUX_MIB_XFRMOUTPOLDEAD,
 LINUX_MIB_XFRMOUTPOLERROR,
 LINUX_MIB_XFRMFWDHDRERROR,
 LINUX_MIB_XFRMOUTSTATEINVALID,
 LINUX_MIB_XFRMACQUIREERROR,
 __LINUX_MIB_XFRMMAX
};
struct snmp_mib {
  template <typename, int = 0> struct __BYPASSsnmp_mib {};
  template <typename, int> friend struct __BYPASSsnmp_mib;
 char *name;
 int entry;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct u64_stats_sync {
  template <typename, int = 0> struct __BYPASSu64_stats_sync {};
  template <typename, int> friend struct __BYPASSu64_stats_sync;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void u64_stats_update_begin(struct u64_stats_sync *syncp)
{



}

static inline void u64_stats_update_end(struct u64_stats_sync *syncp)
{



}

static inline unsigned int u64_stats_fetch_begin( struct u64_stats_sync *syncp)
{






 return 0;

}

static inline bool u64_stats_fetch_retry( struct u64_stats_sync *syncp,
      unsigned int start)
{






 return _false;

}







static inline unsigned int u64_stats_fetch_begin_bh( struct u64_stats_sync *syncp)
{






 return 0;

}

static inline bool u64_stats_fetch_retry_bh( struct u64_stats_sync *syncp,
      unsigned int start)
{






 return _false;

}



struct ipstats_mib {
  template <typename, int = 0> struct __BYPASSipstats_mib {};
  template <typename, int> friend struct __BYPASSipstats_mib;

 u64 mibs[__IPSTATS_MIB_MAX];
 struct u64_stats_sync syncp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct icmp_mib {
  template <typename, int = 0> struct __BYPASSicmp_mib {};
  template <typename, int> friend struct __BYPASSicmp_mib;
 unsigned long mibs[__ICMP_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct icmpmsg_mib {
  template <typename, int = 0> struct __BYPASSicmpmsg_mib {};
  template <typename, int> friend struct __BYPASSicmpmsg_mib;
 atomic_long_t mibs[512];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct icmpv6_mib {
  template <typename, int = 0> struct __BYPASSicmpv6_mib {};
  template <typename, int> friend struct __BYPASSicmpv6_mib;
 unsigned long mibs[__ICMP6_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct icmpv6_mib_device {
  template <typename, int = 0> struct __BYPASSicmpv6_mib_device {};
  template <typename, int> friend struct __BYPASSicmpv6_mib_device;
 atomic_long_t mibs[__ICMP6_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct icmpv6msg_mib {
  template <typename, int = 0> struct __BYPASSicmpv6msg_mib {};
  template <typename, int> friend struct __BYPASSicmpv6msg_mib;
 atomic_long_t mibs[512];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct icmpv6msg_mib_device {
  template <typename, int = 0> struct __BYPASSicmpv6msg_mib_device {};
  template <typename, int> friend struct __BYPASSicmpv6msg_mib_device;
 atomic_long_t mibs[512];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct tcp_mib {
  template <typename, int = 0> struct __BYPASStcp_mib {};
  template <typename, int> friend struct __BYPASStcp_mib;
 unsigned long mibs[__TCP_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct udp_mib {
  template <typename, int = 0> struct __BYPASSudp_mib {};
  template <typename, int> friend struct __BYPASSudp_mib;
 unsigned long mibs[__UDP_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct linux_mib {
  template <typename, int = 0> struct __BYPASSlinux_mib {};
  template <typename, int> friend struct __BYPASSlinux_mib;
 unsigned long mibs[__LINUX_MIB_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct linux_xfrm_mib {
  template <typename, int = 0> struct __BYPASSlinux_xfrm_mib {};
  template <typename, int> friend struct __BYPASSlinux_xfrm_mib;
 unsigned long mibs[__LINUX_MIB_XFRMMAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netns_mib {
  template <typename, int = 0> struct __BYPASSnetns_mib {};
  template <typename, int> friend struct __BYPASSnetns_mib;
 __typeof__(struct tcp_mib) *tcp_statistics[1];
 __typeof__(struct ipstats_mib) *ip_statistics[1];
 __typeof__(struct linux_mib) *net_statistics[1];
 __typeof__(struct udp_mib) *udp_statistics[1];
 __typeof__(struct udp_mib) *udplite_statistics[1];
 __typeof__(struct icmp_mib) *icmp_statistics[1];
 __typeof__(struct icmpmsg_mib) *icmpmsg_statistics;


 struct proc_dir_entry *proc_net_devsnmp6;
 __typeof__(struct udp_mib) *udp_stats_in6[1];
 __typeof__(struct udp_mib) *udplite_stats_in6[1];
 __typeof__(struct ipstats_mib) *ipv6_statistics[1];
 __typeof__(struct icmpv6_mib) *icmpv6_statistics[1];
 __typeof__(struct icmpv6msg_mib) *icmpv6msg_statistics;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct ctl_table_header;
struct netns_unix {
  template <typename, int = 0> struct __BYPASSnetns_unix {};
  template <typename, int> friend struct __BYPASSnetns_unix;
 int sysctl_max_dgram_qlen;
 struct ctl_table_header *ctl;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct netns_packet {
  template <typename, int = 0> struct __BYPASSnetns_packet {};
  template <typename, int> friend struct __BYPASSnetns_packet;
 struct mutex sklist_lock;
 struct hlist_head sklist;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct netns_frags {
  template <typename, int = 0> struct __BYPASSnetns_frags {};
  template <typename, int> friend struct __BYPASSnetns_frags;
 int nqueues;
 struct list_head lru_list;
 spinlock_t lru_lock;




 struct percpu_counter mem __attribute__((__aligned__((1 << (6)))));


 int timeout;
 int high_thresh;
 int low_thresh;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inet_frag_queue {
  template <typename, int = 0> struct __BYPASSinet_frag_queue {};
  template <typename, int> friend struct __BYPASSinet_frag_queue;
 spinlock_t lock;
 struct timer_list timer;
 struct list_head lru_list;
 struct hlist_node list;
 atomic_t refcnt;
 struct sk_buff *fragments;
 struct sk_buff *fragments_tail;
 ktime_t stamp;
 int len;
 int meat;
 __u8 last_in;





 u16 max_size;

 struct netns_frags *net;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct inet_frag_bucket {
  template <typename, int = 0> struct __BYPASSinet_frag_bucket {};
  template <typename, int> friend struct __BYPASSinet_frag_bucket;
 struct hlist_head chain;
 spinlock_t chain_lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inet_frags {
  template <typename, int = 0> struct __BYPASSinet_frags {};
  template <typename, int> friend struct __BYPASSinet_frags;
 struct inet_frag_bucket hash[1024];




 rwlock_t lock __attribute__((__aligned__((1 << (6)))));
 int secret_interval;
 struct timer_list secret_timer;




 u32 rnd;
 int qsize;

 unsigned int (*hashfn)(struct inet_frag_queue *);
 bool (*match)(struct inet_frag_queue *q, void *arg);
 void (*constructor)(struct inet_frag_queue *q,
      void *arg);
 void (*destructor)(struct inet_frag_queue *);
 void (*skb_free)(struct sk_buff *);
 void (*frag_expire)(unsigned long data);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void inet_frags_init(struct inet_frags *);
void inet_frags_fini(struct inet_frags *);

void inet_frags_init_net(struct netns_frags *nf);
void inet_frags_exit_net(struct netns_frags *nf, struct inet_frags *f);

void inet_frag_kill(struct inet_frag_queue *q, struct inet_frags *f);
void inet_frag_destroy(struct inet_frag_queue *q,
    struct inet_frags *f, int *work);
int inet_frag_evictor(struct netns_frags *nf, struct inet_frags *f, bool force);
struct inet_frag_queue *inet_frag_find(struct netns_frags *nf,
  struct inet_frags *f, void *key, unsigned int hash)
 ;
void inet_frag_maybe_warn_overflow(struct inet_frag_queue *q,
       char *prefix);

static inline void inet_frag_put(struct inet_frag_queue *q, struct inet_frags *f)
{
 if (1)
  inet_frag_destroy(q, f, 0);
}
static unsigned int frag_percpu_counter_batch = 130000;

static inline int frag_mem_limit(struct netns_frags *nf)
{
 return percpu_counter_read(&nf->mem);
}

static inline void sub_frag_mem_limit(struct inet_frag_queue *q, int i)
{
 __percpu_counter_add(&q->net->mem, -i, frag_percpu_counter_batch);
}

static inline void add_frag_mem_limit(struct inet_frag_queue *q, int i)
{
 __percpu_counter_add(&q->net->mem, i, frag_percpu_counter_batch);
}

static inline void init_frag_mem_limit(struct netns_frags *nf)
{
 ({ static struct lock_class_key __key; __percpu_counter_init(&nf->mem, 0, &__key); });
}

static inline int sum_frag_mem_limit(struct netns_frags *nf)
{
 int res;

 local_bh_disable();
 res = percpu_counter_sum_positive(&nf->mem);
 local_bh_enable();

 return res;
}

static inline void inet_frag_lru_move(struct inet_frag_queue *q)
{
 ;
 if (!list_empty(&q->lru_list))
  list_move_tail(&q->lru_list, &q->net->lru_list);
 ;
}

static inline void inet_frag_lru_del(struct inet_frag_queue *q)
{
 ;
 list_del_init(&q->lru_list);
 q->net->nqueues--;
 ;
}

static inline void inet_frag_lru_add(struct netns_frags *nf,
         struct inet_frag_queue *q)
{
 ;
 list_add_tail(&q->lru_list, &nf->lru_list);
 q->net->nqueues++;
 ;
}
extern u8 ip_frag_ecn_table[16];

struct tcpm_hash_bucket;
struct ctl_table_header;
struct ipv4_devconf;
struct fib_rules_ops;
struct hlist_head;
struct fib_table;
struct sock;
struct local_ports {
  template <typename, int = 0> struct __BYPASSlocal_ports {};
  template <typename, int> friend struct __BYPASSlocal_ports;
 seqlock_t lock;
 int range[2];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netns_ipv4 {
  template <typename, int = 0> struct __BYPASSnetns_ipv4 {};
  template <typename, int> friend struct __BYPASSnetns_ipv4;

 struct ctl_table_header *forw_hdr;
 struct ctl_table_header *frags_hdr;
 struct ctl_table_header *ipv4_hdr;
 struct ctl_table_header *route_hdr;
 struct ctl_table_header *xfrm4_hdr;

 struct ipv4_devconf *devconf_all;
 struct ipv4_devconf *devconf_dflt;

 struct fib_rules_ops *rules_ops;
 bool fib_has_custom_rules;
 struct fib_table *fib_local;
 struct fib_table *fib_main;
 struct fib_table *fib_default;


 int fib_num_tclassid_users;

 struct hlist_head *fib_table_hash;
 struct sock *fibnl;

 struct sock **icmp_sk;
 struct inet_peer_base *peers;
 struct tcpm_hash_bucket *tcp_metrics_hash;
 unsigned int tcp_metrics_hash_log;
 struct netns_frags frags;

 struct xt_table *iptable_filter;
 struct xt_table *iptable_mangle;
 struct xt_table *iptable_raw;
 struct xt_table *arptable_filter;

 struct xt_table *iptable_security;

 struct xt_table *nat_table;


 int sysctl_icmp_echo_ignore_all;
 int sysctl_icmp_echo_ignore_broadcasts;
 int sysctl_icmp_ignore_bogus_error_responses;
 int sysctl_icmp_ratelimit;
 int sysctl_icmp_ratemask;
 int sysctl_icmp_errors_use_inbound_ifaddr;

 struct local_ports sysctl_local_ports;

 int sysctl_tcp_ecn;

 kgid_t sysctl_ping_group_range[2];

 atomic_t dev_addr_genid;



 struct mr_table *mrt;





 atomic_t rt_genid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct dst_entry;
struct kmem_cachep;
struct net_device;
struct sk_buff;
struct sock;

struct dst_ops {
  template <typename, int = 0> struct __BYPASSdst_ops {};
  template <typename, int> friend struct __BYPASSdst_ops;
 unsigned short family;
 __be16 protocol;
 unsigned int gc_thresh;

 int (*gc)(struct dst_ops *ops);
 struct dst_entry * (*check)(struct dst_entry *, __u32 cookie);
 unsigned int (*default_advmss)( struct dst_entry *);
 unsigned int (*mtu)( struct dst_entry *);
 u32 * (*cow_metrics)(struct dst_entry *, unsigned long);
 void (*destroy)(struct dst_entry *);
 void (*ifdown)(struct dst_entry *,
       struct net_device *dev, int how);
 struct dst_entry * (*negative_advice)(struct dst_entry *);
 void (*link_failure)(struct sk_buff *);
 void (*update_pmtu)(struct dst_entry *dst, struct sock *sk,
            struct sk_buff *skb, u32 mtu);
 void (*redirect)(struct dst_entry *dst, struct sock *sk,
         struct sk_buff *skb);
 int (*local_out)(struct sk_buff *skb);
 struct neighbour * (*neigh_lookup)( struct dst_entry *dst,
      struct sk_buff *skb,
      void *daddr);

 struct kmem_cache *kmem_cachep;

 struct percpu_counter pcpuc_entries __attribute__((__aligned__((1 << (6)))));

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline int dst_entries_get_fast(struct dst_ops *dst)
{
 return percpu_counter_read_positive(&dst->pcpuc_entries);
}

static inline int dst_entries_get_slow(struct dst_ops *dst)
{
 int res;

 local_bh_disable();
 res = percpu_counter_sum_positive(&dst->pcpuc_entries);
 local_bh_enable();
 return res;
}

static inline void dst_entries_add(struct dst_ops *dst, int val)
{
 local_bh_disable();
 percpu_counter_add(&dst->pcpuc_entries, val);
 local_bh_enable();
}

static inline int dst_entries_init(struct dst_ops *dst)
{
 return ({ static struct lock_class_key __key; __percpu_counter_init(&dst->pcpuc_entries, 0, &__key); });
}

static inline void dst_entries_destroy(struct dst_ops *dst)
{
 percpu_counter_destroy(&dst->pcpuc_entries);
}

struct ctl_table_header;

struct netns_sysctl_ipv6 {
  template <typename, int = 0> struct __BYPASSnetns_sysctl_ipv6 {};
  template <typename, int> friend struct __BYPASSnetns_sysctl_ipv6;

 struct ctl_table_header *hdr;
 struct ctl_table_header *route_hdr;
 struct ctl_table_header *icmp_hdr;
 struct ctl_table_header *frags_hdr;
 struct ctl_table_header *xfrm6_hdr;

 int bindv6only;
 int flush_delay;
 int ip6_rt_max_size;
 int ip6_rt_gc_min_interval;
 int ip6_rt_gc_timeout;
 int ip6_rt_gc_interval;
 int ip6_rt_gc_elasticity;
 int ip6_rt_mtu_expires;
 int ip6_rt_min_advmss;
 int icmpv6_time;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netns_ipv6 {
  template <typename, int = 0> struct __BYPASSnetns_ipv6 {};
  template <typename, int> friend struct __BYPASSnetns_ipv6;
 struct netns_sysctl_ipv6 sysctl;
 struct ipv6_devconf *devconf_all;
 struct ipv6_devconf *devconf_dflt;
 struct inet_peer_base *peers;
 struct netns_frags frags;

 struct xt_table *ip6table_filter;
 struct xt_table *ip6table_mangle;
 struct xt_table *ip6table_raw;

 struct xt_table *ip6table_security;

 struct xt_table *ip6table_nat;

 struct rt6_info *ip6_null_entry;
 struct rt6_statistics *rt6_stats;
 struct timer_list ip6_fib_timer;
 struct hlist_head *fib_table_hash;
 struct fib6_table *fib6_main_tbl;
 struct dst_ops ip6_dst_ops;
 unsigned int ip6_rt_gc_expire;
 unsigned long ip6_rt_last_gc;

 struct rt6_info *ip6_prohibit_entry;
 struct rt6_info *ip6_blk_hole_entry;
 struct fib6_table *fib6_local_tbl;
 struct fib_rules_ops *fib6_rules_ops;

 struct sock **icmp_sk;
 struct sock *ndisc_sk;
 struct sock *tcp_sk;
 struct sock *igmp_sk;




 struct list_head mr6_tables;
 struct fib_rules_ops *mr6_rules_ops;


 atomic_t dev_addr_genid;
 atomic_t rt_genid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct netns_nf_frag {
  template <typename, int = 0> struct __BYPASSnetns_nf_frag {};
  template <typename, int> friend struct __BYPASSnetns_nf_frag;
 struct netns_sysctl_ipv6 sysctl;
 struct netns_frags frags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct sock;
struct proc_dir_entry;
struct sctp_mib;
struct ctl_table_header;

struct netns_sctp {
  template <typename, int = 0> struct __BYPASSnetns_sctp {};
  template <typename, int> friend struct __BYPASSnetns_sctp;
 __typeof__(struct sctp_mib) *sctp_statistics[1];


 struct proc_dir_entry *proc_net_sctp;


 struct ctl_table_header *sysctl_header;





 struct sock *ctl_sock;







 struct list_head local_addr_list;
 struct list_head addr_waitq;
 struct timer_list addr_wq_timer;
 struct list_head auto_asconf_splist;
 spinlock_t addr_wq_lock;


 spinlock_t local_addr_lock;
 unsigned int rto_initial;
 unsigned int rto_min;
 unsigned int rto_max;




 int rto_alpha;
 int rto_beta;


 int max_burst;


 int cookie_preserve_enable;


 char *sctp_hmac_alg;


 unsigned int valid_cookie_life;


 unsigned int sack_timeout;


 unsigned int hb_interval;





 int max_retrans_association;
 int max_retrans_path;
 int max_retrans_init;




 int pf_retrans;






 int sndbuf_policy;






 int rcvbuf_policy;

 int default_auto_asconf;


 int addip_enable;
 int addip_noauth;


 int prsctp_enable;


 int auth_enable;
 int scope_policy;




 int rwnd_upd_shift;


 unsigned long max_autoclose;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct sock;

struct netns_dccp {
  template <typename, int = 0> struct __BYPASSnetns_dccp {};
  template <typename, int> friend struct __BYPASSnetns_dccp;
 struct sock *v4_ctl_sk;
 struct sock *v6_ctl_sk;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct proc_dir_entry;



extern void proc_root_init(void);
extern void proc_flush_task(struct task_struct *);

extern struct proc_dir_entry *proc_symlink( char *,
  struct proc_dir_entry *, char *);
extern struct proc_dir_entry *proc_mkdir( char *, struct proc_dir_entry *);
extern struct proc_dir_entry *proc_mkdir_data( char *, umode_t,
           struct proc_dir_entry *, void *);
extern struct proc_dir_entry *proc_mkdir_mode( char *, umode_t,
           struct proc_dir_entry *);

extern struct proc_dir_entry *proc_create_data( char *, umode_t,
            struct proc_dir_entry *,
            struct file_operations *,
            void *);

static inline struct proc_dir_entry *proc_create(
 char *name, umode_t mode, struct proc_dir_entry *parent,
 struct file_operations *proc_fops)
{
 return proc_create_data(name, mode, parent, proc_fops, 0);
}

extern void proc_set_size(struct proc_dir_entry *, loff_t);
extern void proc_set_user(struct proc_dir_entry *, kuid_t, kgid_t);
extern void *PDE_DATA( struct inode *);
extern void *proc_get_parent_data( struct inode *);
extern void proc_remove(struct proc_dir_entry *);
extern void remove_proc_entry( char *, struct proc_dir_entry *);
extern int remove_proc_subtree( char *, struct proc_dir_entry *);
static inline struct proc_dir_entry *proc_net_mkdir(
 struct net *net, char *name, struct proc_dir_entry *parent)
{
 return proc_mkdir_data(name, 0, parent, net);
}







enum {
  IPPROTO_IP = 0,

  IPPROTO_ICMP = 1,

  IPPROTO_IGMP = 2,

  IPPROTO_IPIP = 4,

  IPPROTO_TCP = 6,

  IPPROTO_EGP = 8,

  IPPROTO_PUP = 12,

  IPPROTO_UDP = 17,

  IPPROTO_IDP = 22,

  IPPROTO_TP = 29,

  IPPROTO_DCCP = 33,

  IPPROTO_IPV6 = 41,

  IPPROTO_RSVP = 46,

  IPPROTO_GRE = 47,

  IPPROTO_ESP = 50,

  IPPROTO_AH = 51,

  IPPROTO_MTP = 92,

  IPPROTO_BEETPH = 94,

  IPPROTO_ENCAP = 98,

  IPPROTO_PIM = 103,

  IPPROTO_COMP = 108,

  IPPROTO_SCTP = 132,

  IPPROTO_UDPLITE = 136,

  IPPROTO_RAW = 255,

  IPPROTO_MAX
};



struct in_addr {
  template <typename, int = 0> struct __BYPASSin_addr {};
  template <typename, int> friend struct __BYPASSin_addr;
 __be32 s_addr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ip_mreq {
  template <typename, int = 0> struct __BYPASSip_mreq {};
  template <typename, int> friend struct __BYPASSip_mreq;
 struct in_addr imr_multiaddr;
 struct in_addr imr_interface;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_mreqn {
  template <typename, int = 0> struct __BYPASSip_mreqn {};
  template <typename, int> friend struct __BYPASSip_mreqn;
 struct in_addr imr_multiaddr;
 struct in_addr imr_address;
 int imr_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_mreq_source {
  template <typename, int = 0> struct __BYPASSip_mreq_source {};
  template <typename, int> friend struct __BYPASSip_mreq_source;
 __be32 imr_multiaddr;
 __be32 imr_interface;
 __be32 imr_sourceaddr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_msfilter {
  template <typename, int = 0> struct __BYPASSip_msfilter {};
  template <typename, int> friend struct __BYPASSip_msfilter;
 __be32 imsf_multiaddr;
 __be32 imsf_interface;
 __u32 imsf_fmode;
 __u32 imsf_numsrc;
 __be32 imsf_slist[1];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct group_req {
  template <typename, int = 0> struct __BYPASSgroup_req {};
  template <typename, int> friend struct __BYPASSgroup_req;
 __u32 gr_interface;
 struct __kernel_sockaddr_storage gr_group;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct group_source_req {
  template <typename, int = 0> struct __BYPASSgroup_source_req {};
  template <typename, int> friend struct __BYPASSgroup_source_req;
 __u32 gsr_interface;
 struct __kernel_sockaddr_storage gsr_group;
 struct __kernel_sockaddr_storage gsr_source;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct group_filter {
  template <typename, int = 0> struct __BYPASSgroup_filter {};
  template <typename, int> friend struct __BYPASSgroup_filter;
 __u32 gf_interface;
 struct __kernel_sockaddr_storage gf_group;
 __u32 gf_fmode;
 __u32 gf_numsrc;
 struct __kernel_sockaddr_storage gf_slist[1];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct in_pktinfo {
  template <typename, int = 0> struct __BYPASSin_pktinfo {};
  template <typename, int> friend struct __BYPASSin_pktinfo;
 int ipi_ifindex;
 struct in_addr ipi_spec_dst;
 struct in_addr ipi_addr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct sockaddr_in {
  template <typename, int = 0> struct __BYPASSsockaddr_in {};
  template <typename, int> friend struct __BYPASSsockaddr_in;
  __kernel_sa_family_t sin_family;
  __be16 sin_port;
  struct in_addr sin_addr;


  unsigned char __pad[16 - sizeof(short int) -
   sizeof(unsigned short int) - sizeof(struct in_addr)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline int proto_ports_offset(int proto)
{
 switch (proto) {
 case IPPROTO_TCP:
 case IPPROTO_UDP:
 case IPPROTO_DCCP:
 case IPPROTO_ESP:
 case IPPROTO_SCTP:
 case IPPROTO_UDPLITE:
  return 0;
 case IPPROTO_AH:
  return 4;
 default:
  return -22;
 }
}

static inline bool ipv4_is_loopback(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xff000000))) ? ((__u32)( (((__u32)((0xff000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xff000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xff000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xff000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xff000000))))) == (( __be32)(__builtin_constant_p((__u32)((0x7f000000))) ? ((__u32)( (((__u32)((0x7f000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x7f000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x7f000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x7f000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x7f000000))));
}

static inline bool ipv4_is_multicast(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xf0000000))) ? ((__u32)( (((__u32)((0xf0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xf0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xf0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xf0000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xf0000000))))) == (( __be32)(__builtin_constant_p((__u32)((0xe0000000))) ? ((__u32)( (((__u32)((0xe0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xe0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xe0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xe0000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xe0000000))));
}

static inline bool ipv4_is_local_multicast(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffffff00))) ? ((__u32)( (((__u32)((0xffffff00)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffffff00)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffffff00)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffffff00)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffffff00))))) == (( __be32)(__builtin_constant_p((__u32)((0xe0000000))) ? ((__u32)( (((__u32)((0xe0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xe0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xe0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xe0000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xe0000000))));
}

static inline bool ipv4_is_lbcast(__be32 addr)
{

 return addr == (( __be32)(__builtin_constant_p((__u32)((((unsigned long int) 0xffffffff)))) ? ((__u32)( (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0x000000ffUL) << 24) | (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0x0000ff00UL) << 8) | (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((((unsigned long int) 0xffffffff))) & (__u32)0xff000000UL) >> 24))) : __fswab32((((unsigned long int) 0xffffffff)))));
}

static inline bool ipv4_is_zeronet(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xff000000))) ? ((__u32)( (((__u32)((0xff000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xff000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xff000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xff000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xff000000))))) == (( __be32)(__builtin_constant_p((__u32)((0x00000000))) ? ((__u32)( (((__u32)((0x00000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x00000000))));
}



static inline bool ipv4_is_private_10(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xff000000))) ? ((__u32)( (((__u32)((0xff000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xff000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xff000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xff000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xff000000))))) == (( __be32)(__builtin_constant_p((__u32)((0x0a000000))) ? ((__u32)( (((__u32)((0x0a000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0a000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0a000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0a000000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0a000000))));
}

static inline bool ipv4_is_private_172(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xfff00000))) ? ((__u32)( (((__u32)((0xfff00000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xfff00000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xfff00000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xfff00000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xfff00000))))) == (( __be32)(__builtin_constant_p((__u32)((0xac100000))) ? ((__u32)( (((__u32)((0xac100000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xac100000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xac100000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xac100000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xac100000))));
}

static inline bool ipv4_is_private_192(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffff0000))) ? ((__u32)( (((__u32)((0xffff0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffff0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffff0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffff0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffff0000))))) == (( __be32)(__builtin_constant_p((__u32)((0xc0a80000))) ? ((__u32)( (((__u32)((0xc0a80000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc0a80000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc0a80000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc0a80000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc0a80000))));
}

static inline bool ipv4_is_linklocal_169(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffff0000))) ? ((__u32)( (((__u32)((0xffff0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffff0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffff0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffff0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffff0000))))) == (( __be32)(__builtin_constant_p((__u32)((0xa9fe0000))) ? ((__u32)( (((__u32)((0xa9fe0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xa9fe0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xa9fe0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xa9fe0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xa9fe0000))));
}

static inline bool ipv4_is_anycast_6to4(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffffff00))) ? ((__u32)( (((__u32)((0xffffff00)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffffff00)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffffff00)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffffff00)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffffff00))))) == (( __be32)(__builtin_constant_p((__u32)((0xc0586300))) ? ((__u32)( (((__u32)((0xc0586300)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc0586300)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc0586300)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc0586300)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc0586300))));
}

static inline bool ipv4_is_test_192(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xffffff00))) ? ((__u32)( (((__u32)((0xffffff00)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xffffff00)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xffffff00)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xffffff00)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xffffff00))))) == (( __be32)(__builtin_constant_p((__u32)((0xc0000200))) ? ((__u32)( (((__u32)((0xc0000200)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc0000200)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc0000200)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc0000200)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc0000200))));
}

static inline bool ipv4_is_test_198(__be32 addr)
{
 return (addr & (( __be32)(__builtin_constant_p((__u32)((0xfffe0000))) ? ((__u32)( (((__u32)((0xfffe0000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xfffe0000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xfffe0000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xfffe0000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xfffe0000))))) == (( __be32)(__builtin_constant_p((__u32)((0xc6120000))) ? ((__u32)( (((__u32)((0xc6120000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xc6120000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xc6120000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xc6120000)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xc6120000))));
}






struct in6_addr {
  template <typename, int = 0> struct __BYPASSin6_addr {};
  template <typename, int> friend struct __BYPASSin6_addr;



 union _in6_u {

  __u8 u6_addr8[16];

  __be16 u6_addr16[8];
  __be32 u6_addr32[4];

 } in6_u;






  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct sockaddr_in6 {
  template <typename, int = 0> struct __BYPASSsockaddr_in6 {};
  template <typename, int> friend struct __BYPASSsockaddr_in6;
 unsigned short int sin6_family;
 __be16 sin6_port;
 __be32 sin6_flowinfo;
 struct in6_addr sin6_addr;
 __u32 sin6_scope_id;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct ipv6_mreq {
  template <typename, int = 0> struct __BYPASSipv6_mreq {};
  template <typename, int> friend struct __BYPASSipv6_mreq;

 struct in6_addr ipv6mr_multiaddr;


 int ipv6mr_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct in6_flowlabel_req {
  template <typename, int = 0> struct __BYPASSin6_flowlabel_req {};
  template <typename, int> friend struct __BYPASSin6_flowlabel_req;
 struct in6_addr flr_dst;
 __be32 flr_label;
 __u8 flr_action;
 __u8 flr_share;
 __u16 flr_flags;
 __u16 flr_expires;
 __u16 flr_linger;
 __u32 __flr_pad;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
  IPPROTO_HOPOPTS = 0,

  IPPROTO_ROUTING = 43,

  IPPROTO_FRAGMENT = 44,

  IPPROTO_ICMPV6 = 58,

  IPPROTO_NONE = 59,

  IPPROTO_DSTOPTS = 60,

  IPPROTO_MH = 135,

};





extern struct in6_addr in6addr_any;

extern struct in6_addr in6addr_loopback;

extern struct in6_addr in6addr_linklocal_allnodes;


extern struct in6_addr in6addr_linklocal_allrouters;


extern struct in6_addr in6addr_interfacelocal_allnodes;


extern struct in6_addr in6addr_interfacelocal_allrouters;


extern struct in6_addr in6addr_sitelocal_allrouters;


enum nf_inet_hooks {
 NF_INET_PRE_ROUTING,
 NF_INET_LOCAL_IN,
 NF_INET_FORWARD,
 NF_INET_LOCAL_OUT,
 NF_INET_POST_ROUTING,
 NF_INET_NUMHOOKS
};

enum {
 NFPROTO_UNSPEC = 0,
 NFPROTO_IPV4 = 2,
 NFPROTO_ARP = 3,
 NFPROTO_BRIDGE = 7,
 NFPROTO_IPV6 = 10,
 NFPROTO_DECNET = 12,
 NFPROTO_NUMPROTO,
};

union nf_inet_addr {
 __u32 all[4];
 __be32 ip;
 __be32 ip6[4];
 struct in_addr in;
 struct in6_addr in6;
};

static inline int NF_DROP_GETERR(int verdict)
{
 return -(verdict >> 16);
}

static inline int nf_inet_addr_cmp( union nf_inet_addr *a1,
       union nf_inet_addr *a2)
{
 return a1->all[0] == a2->all[0] &&
        a1->all[1] == a2->all[1] &&
        a1->all[2] == a2->all[2] &&
        a1->all[3] == a2->all[3];
}

static inline void nf_inet_addr_mask( union nf_inet_addr *a1,
         union nf_inet_addr *result,
         union nf_inet_addr *mask)
{
 result->all[0] = a1->all[0] & mask->all[0];
 result->all[1] = a1->all[1] & mask->all[1];
 result->all[2] = a1->all[2] & mask->all[2];
 result->all[3] = a1->all[3] & mask->all[3];
}

int netfilter_init(void);




struct sk_buff;

struct nf_hook_ops;
typedef unsigned int nf_hookfn( struct nf_hook_ops *ops,
          struct sk_buff *skb,
          struct net_device *in,
          struct net_device *out,
          int (*okfn)(struct sk_buff *));

struct nf_hook_ops {
  template <typename, int = 0> struct __BYPASSnf_hook_ops {};
  template <typename, int> friend struct __BYPASSnf_hook_ops;
 struct list_head list;


 nf_hookfn *hook;
 struct module *owner;
 void *priv;
 u_int8_t pf;
 unsigned int hooknum;

 int priority;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nf_sockopt_ops {
  template <typename, int = 0> struct __BYPASSnf_sockopt_ops {};
  template <typename, int> friend struct __BYPASSnf_sockopt_ops;
 struct list_head list;

 u_int8_t pf;


 int set_optmin;
 int set_optmax;
 int (*set)(struct sock *sk, int optval, void *user, unsigned int len);

 int (*compat_set)(struct sock *sk, int optval,
   void *user, unsigned int len);

 int get_optmin;
 int get_optmax;
 int (*get)(struct sock *sk, int optval, void *user, int *len);

 int (*compat_get)(struct sock *sk, int optval,
   void *user, int *len);


 struct module *owner;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


int nf_register_hook(struct nf_hook_ops *reg);
void nf_unregister_hook(struct nf_hook_ops *reg);
int nf_register_hooks(struct nf_hook_ops *reg, unsigned int n);
void nf_unregister_hooks(struct nf_hook_ops *reg, unsigned int n);



int nf_register_sockopt(struct nf_sockopt_ops *reg);
void nf_unregister_sockopt(struct nf_sockopt_ops *reg);

extern struct list_head nf_hooks[NFPROTO_NUMPROTO][8];


extern struct static_key nf_hooks_needed[NFPROTO_NUMPROTO][8];
static inline bool nf_hooks_active(u_int8_t pf, unsigned int hook)
{
 if (__builtin_constant_p(pf) &&
     __builtin_constant_p(hook))
  return static_key_false(&nf_hooks_needed[pf][hook]);

 return !list_empty(&nf_hooks[pf][hook]);
}







int nf_hook_slow(u_int8_t pf, unsigned int hook, struct sk_buff *skb,
   struct net_device *indev, struct net_device *outdev,
   int (*okfn)(struct sk_buff *), int thresh);
static inline int nf_hook_thresh(u_int8_t pf, unsigned int hook,
     struct sk_buff *skb,
     struct net_device *indev,
     struct net_device *outdev,
     int (*okfn)(struct sk_buff *), int thresh)
{
 if (nf_hooks_active(pf, hook))
  return nf_hook_slow(pf, hook, skb, indev, outdev, okfn, thresh);
 return 1;
}

static inline int nf_hook(u_int8_t pf, unsigned int hook, struct sk_buff *skb,
     struct net_device *indev, struct net_device *outdev,
     int (*okfn)(struct sk_buff *))
{
 return nf_hook_thresh(pf, hook, skb, indev, outdev, okfn, (-((int)(~0U>>1)) - 1));
}
static inline int
NF_HOOK_THRESH(uint8_t pf, unsigned int hook, struct sk_buff *skb,
        struct net_device *in, struct net_device *out,
        int (*okfn)(struct sk_buff *), int thresh)
{
 int ret = nf_hook_thresh(pf, hook, skb, in, out, okfn, thresh);
 if (ret == 1)
  ret = okfn(skb);
 return ret;
}

static inline int
NF_HOOK_COND(uint8_t pf, unsigned int hook, struct sk_buff *skb,
      struct net_device *in, struct net_device *out,
      int (*okfn)(struct sk_buff *), bool cond)
{
 int ret;

 if (!cond ||
     ((ret = nf_hook_thresh(pf, hook, skb, in, out, okfn, (-((int)(~0U>>1)) - 1))) == 1))
  ret = okfn(skb);
 return ret;
}

static inline int
NF_HOOK(uint8_t pf, unsigned int hook, struct sk_buff *skb,
 struct net_device *in, struct net_device *out,
 int (*okfn)(struct sk_buff *))
{
 return NF_HOOK_THRESH(pf, hook, skb, in, out, okfn, (-((int)(~0U>>1)) - 1));
}


int nf_setsockopt(struct sock *sk, u_int8_t pf, int optval, char *opt,
    unsigned int len);
int nf_getsockopt(struct sock *sk, u_int8_t pf, int optval, char *opt,
    int *len);

int compat_nf_setsockopt(struct sock *sk, u_int8_t pf, int optval,
  char *opt, unsigned int len);
int compat_nf_getsockopt(struct sock *sk, u_int8_t pf, int optval,
  char *opt, int *len);





int skb_make_writable(struct sk_buff *skb, unsigned int writable_len);

struct flowi;
struct nf_queue_entry;

struct nf_afinfo {
  template <typename, int = 0> struct __BYPASSnf_afinfo {};
  template <typename, int> friend struct __BYPASSnf_afinfo;
 unsigned short family;
 __sum16 (*checksum)(struct sk_buff *skb, unsigned int hook,
        unsigned int dataoff, u_int8_t protocol);
 __sum16 (*checksum_partial)(struct sk_buff *skb,
         unsigned int hook,
         unsigned int dataoff,
         unsigned int len,
         u_int8_t protocol);
 int (*route)(struct net *net, struct dst_entry **dst,
     struct flowi *fl, bool strict);
 void (*saveroute)( struct sk_buff *skb,
         struct nf_queue_entry *entry);
 int (*reroute)(struct sk_buff *skb,
       struct nf_queue_entry *entry);
 int route_key_size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct nf_afinfo *nf_afinfo[NFPROTO_NUMPROTO];
static inline struct nf_afinfo *nf_get_afinfo(unsigned short family)
{
 return (nf_afinfo[family]);
}

static inline __sum16
nf_checksum(struct sk_buff *skb, unsigned int hook, unsigned int dataoff,
     u_int8_t protocol, unsigned short family)
{
 struct nf_afinfo *afinfo;
 __sum16 csum = 0;

 ;
 afinfo = nf_get_afinfo(family);
 if (afinfo)
  csum = afinfo->checksum(skb, hook, dataoff, protocol);
 ;
 return csum;
}

static inline __sum16
nf_checksum_partial(struct sk_buff *skb, unsigned int hook,
      unsigned int dataoff, unsigned int len,
      u_int8_t protocol, unsigned short family)
{
 struct nf_afinfo *afinfo;
 __sum16 csum = 0;

 ;
 afinfo = nf_get_afinfo(family);
 if (afinfo)
  csum = afinfo->checksum_partial(skb, hook, dataoff, len,
      protocol);
 ;
 return csum;
}

int nf_register_afinfo( struct nf_afinfo *afinfo);
void nf_unregister_afinfo( struct nf_afinfo *afinfo);

struct flowi_common {
  template <typename, int = 0> struct __BYPASSflowi_common {};
  template <typename, int> friend struct __BYPASSflowi_common;
 int flowic_oif;
 int flowic_iif;
 __u32 flowic_mark;
 __u8 flowic_tos;
 __u8 flowic_scope;
 __u8 flowic_proto;
 __u8 flowic_flags;



 __u32 flowic_secid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

union flowi_uli {
 struct {
  __be16 dport;
  __be16 sport;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ports;

 struct {
  __u8 type;
  __u8 code;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icmpt;

 struct {
  __le16 dport;
  __le16 sport;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} dnports;

 __be32 spi;
 __be32 gre_key;

 struct {
  __u8 type;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} mht;
};

struct flowi4 {
  template <typename, int = 0> struct __BYPASSflowi4 {};
  template <typename, int> friend struct __BYPASSflowi4;
 struct flowi_common __fl_common;
 __be32 saddr;
 __be32 daddr;

 union flowi_uli uli;








  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(64/8)));

static inline void flowi4_init_output(struct flowi4 *fl4, int oif,
          __u32 mark, __u8 tos, __u8 scope,
          __u8 proto, __u8 flags,
          __be32 daddr, __be32 saddr,
          __be16 dport, __be16 sport)
{
 fl4->__fl_common.flowic_oif = oif;
 fl4->__fl_common.flowic_iif = 0;
 fl4->__fl_common.flowic_mark = mark;
 fl4->__fl_common.flowic_tos = tos;
 fl4->__fl_common.flowic_scope = scope;
 fl4->__fl_common.flowic_proto = proto;
 fl4->__fl_common.flowic_flags = flags;
 fl4->__fl_common.flowic_secid = 0;
 fl4->daddr = daddr;
 fl4->saddr = saddr;
 fl4->uli.ports.dport = dport;
 fl4->uli.ports.sport = sport;
}


static inline void flowi4_update_output(struct flowi4 *fl4, int oif, __u8 tos,
     __be32 daddr, __be32 saddr)
{
 fl4->__fl_common.flowic_oif = oif;
 fl4->__fl_common.flowic_tos = tos;
 fl4->daddr = daddr;
 fl4->saddr = saddr;
}


struct flowi6 {
  template <typename, int = 0> struct __BYPASSflowi6 {};
  template <typename, int> friend struct __BYPASSflowi6;
 struct flowi_common __fl_common;
 struct in6_addr daddr;
 struct in6_addr saddr;
 __be32 flowlabel;
 union flowi_uli uli;








  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(64/8)));

struct flowidn {
  template <typename, int = 0> struct __BYPASSflowidn {};
  template <typename, int> friend struct __BYPASSflowidn;
 struct flowi_common __fl_common;






 __le16 daddr;
 __le16 saddr;
 union flowi_uli uli;



  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(64/8)));

struct flowi {
  template <typename, int = 0> struct __BYPASSflowi {};
  template <typename, int> friend struct __BYPASSflowi;
 union {
  struct flowi_common __fl_common;
  struct flowi4 ip4;
  struct flowi6 ip6;
  struct flowidn dn;
 } u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__(64/8)));

static inline struct flowi *flowi4_to_flowi(struct flowi4 *fl4)
{
 return ({ typeof( ((struct flowi *)0)->u.ip4 ) *__mptr = (fl4); (struct flowi *)( (char *)__mptr - ((size_t) &((struct flowi *)0)->u.ip4) );});
}

static inline struct flowi *flowi6_to_flowi(struct flowi6 *fl6)
{
 return ({ typeof( ((struct flowi *)0)->u.ip6 ) *__mptr = (fl6); (struct flowi *)( (char *)__mptr - ((size_t) &((struct flowi *)0)->u.ip6) );});
}

static inline struct flowi *flowidn_to_flowi(struct flowidn *fldn)
{
 return ({ typeof( ((struct flowi *)0)->u.dn ) *__mptr = (fldn); (struct flowi *)( (char *)__mptr - ((size_t) &((struct flowi *)0)->u.dn) );});
}

typedef unsigned long flow_compare_t;

static inline size_t flow_key_size(u16 family)
{
 switch (family) {
 case 2:
  (0);
  return sizeof(struct flowi4) / sizeof(flow_compare_t);
 case 10:
  (0);
  return sizeof(struct flowi6) / sizeof(flow_compare_t);
 case 12:
  (0);
  return sizeof(struct flowidn) / sizeof(flow_compare_t);
 }
 return 0;
}





struct net;
struct sock;
struct flow_cache_ops;

struct flow_cache_object {
  template <typename, int = 0> struct __BYPASSflow_cache_object {};
  template <typename, int> friend struct __BYPASSflow_cache_object;
 struct flow_cache_ops *ops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct flow_cache_ops {
  template <typename, int = 0> struct __BYPASSflow_cache_ops {};
  template <typename, int> friend struct __BYPASSflow_cache_ops;
 struct flow_cache_object *(*get)(struct flow_cache_object *);
 int (*check)(struct flow_cache_object *);
 void (*_delete)(struct flow_cache_object *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef struct flow_cache_object *(*flow_resolve_t)(
  struct net *net, struct flowi *key, u16 family,
  u8 dir, struct flow_cache_object *oldobj, void *ctx);

struct flow_cache_object *flow_cache_lookup(struct net *net,
         struct flowi *key, u16 family,
         u8 dir, flow_resolve_t resolver,
         void *ctx);

void flow_cache_flush(void);
void flow_cache_flush_deferred(void);
extern atomic_t flow_cache_genid;
extern void (*nf_nat_decode_session_hook)(struct sk_buff *, struct flowi *);

static inline void
nf_nat_decode_session(struct sk_buff *skb, struct flowi *fl, u_int8_t family)
{

 void (*decodefn)(struct sk_buff *, struct flowi *);

 ;
 decodefn = (nf_nat_decode_session_hook);
 if (decodefn)
  decodefn(skb, fl);
 ;

}
extern void (*ip_ct_attach)(struct sk_buff *, struct sk_buff *) ;
void nf_ct_attach(struct sk_buff *, struct sk_buff *);
extern void (*nf_ct_destroy)(struct nf_conntrack *) ;

struct nf_conn;











enum ip_conntrack_info {

 IP_CT_ESTABLISHED,



 IP_CT_RELATED,



 IP_CT_NEW,


 IP_CT_IS_REPLY,

 IP_CT_ESTABLISHED_REPLY = IP_CT_ESTABLISHED + IP_CT_IS_REPLY,
 IP_CT_RELATED_REPLY = IP_CT_RELATED + IP_CT_IS_REPLY,
 IP_CT_NEW_REPLY = IP_CT_NEW + IP_CT_IS_REPLY,

 IP_CT_NUMBER = IP_CT_IS_REPLY * 2 - 1
};






enum ip_conntrack_status {

 IPS_EXPECTED_BIT = 0,
 IPS_EXPECTED = (1 << IPS_EXPECTED_BIT),


 IPS_SEEN_REPLY_BIT = 1,
 IPS_SEEN_REPLY = (1 << IPS_SEEN_REPLY_BIT),


 IPS_ASSURED_BIT = 2,
 IPS_ASSURED = (1 << IPS_ASSURED_BIT),


 IPS_CONFIRMED_BIT = 3,
 IPS_CONFIRMED = (1 << IPS_CONFIRMED_BIT),


 IPS_SRC_NAT_BIT = 4,
 IPS_SRC_NAT = (1 << IPS_SRC_NAT_BIT),


 IPS_DST_NAT_BIT = 5,
 IPS_DST_NAT = (1 << IPS_DST_NAT_BIT),


 IPS_NAT_MASK = (IPS_DST_NAT | IPS_SRC_NAT),


 IPS_SEQ_ADJUST_BIT = 6,
 IPS_SEQ_ADJUST = (1 << IPS_SEQ_ADJUST_BIT),


 IPS_SRC_NAT_DONE_BIT = 7,
 IPS_SRC_NAT_DONE = (1 << IPS_SRC_NAT_DONE_BIT),

 IPS_DST_NAT_DONE_BIT = 8,
 IPS_DST_NAT_DONE = (1 << IPS_DST_NAT_DONE_BIT),


 IPS_NAT_DONE_MASK = (IPS_DST_NAT_DONE | IPS_SRC_NAT_DONE),


 IPS_DYING_BIT = 9,
 IPS_DYING = (1 << IPS_DYING_BIT),


 IPS_FIXED_TIMEOUT_BIT = 10,
 IPS_FIXED_TIMEOUT = (1 << IPS_FIXED_TIMEOUT_BIT),


 IPS_TEMPLATE_BIT = 11,
 IPS_TEMPLATE = (1 << IPS_TEMPLATE_BIT),


 IPS_UNTRACKED_BIT = 12,
 IPS_UNTRACKED = (1 << IPS_UNTRACKED_BIT),


 IPS_HELPER_BIT = 13,
 IPS_HELPER = (1 << IPS_HELPER_BIT),
};


enum ip_conntrack_events {
 IPCT_NEW,
 IPCT_RELATED,
 IPCT_DESTROY,
 IPCT_REPLY,
 IPCT_ASSURED,
 IPCT_PROTOINFO,
 IPCT_HELPER,
 IPCT_MARK,
 IPCT_SEQADJ,
 IPCT_NATSEQADJ = IPCT_SEQADJ,
 IPCT_SECMARK,
 IPCT_LABEL,
};

enum ip_conntrack_expect_events {
 IPEXP_NEW,
 IPEXP_DESTROY,
};

struct ip_conntrack_stat {
  template <typename, int = 0> struct __BYPASSip_conntrack_stat {};
  template <typename, int> friend struct __BYPASSip_conntrack_stat;
 unsigned int searched;
 unsigned int found;
 unsigned int _new;
 unsigned int invalid;
 unsigned int ignore;
 unsigned int _delete;
 unsigned int delete_list;
 unsigned int insert;
 unsigned int insert_failed;
 unsigned int drop;
 unsigned int early_drop;
 unsigned int error;
 unsigned int expect_new;
 unsigned int expect_create;
 unsigned int expect_delete;
 unsigned int search_restart;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


void need_conntrack(void);

struct nlattr;

struct nfq_ct_hook {
  template <typename, int = 0> struct __BYPASSnfq_ct_hook {};
  template <typename, int> friend struct __BYPASSnfq_ct_hook;
 size_t (*build_size)( struct nf_conn *ct);
 int (*build)(struct sk_buff *skb, struct nf_conn *ct);
 int (*parse)( struct nlattr *attr, struct nf_conn *ct);
 int (*attach_expect)( struct nlattr *attr, struct nf_conn *ct,
        u32 portid, u32 report);
 void (*seq_adjust)(struct sk_buff *skb, struct nf_conn *ct,
      enum ip_conntrack_info ctinfo, s32 off);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct nfq_ct_hook *nfq_ct_hook;

struct nf_logger;

struct netns_nf {
  template <typename, int = 0> struct __BYPASSnetns_nf {};
  template <typename, int> friend struct __BYPASSnetns_nf;

 struct proc_dir_entry *proc_netfilter;

 struct nf_logger *nf_loggers[NFPROTO_NUMPROTO];

 struct ctl_table_header *nf_log_dir_header;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct ebt_table;

struct netns_xt {
  template <typename, int = 0> struct __BYPASSnetns_xt {};
  template <typename, int> friend struct __BYPASSnetns_xt;
 struct list_head tables[NFPROTO_NUMPROTO];
 bool notrack_deprecated_warning;


 struct ebt_table *broute_table;
 struct ebt_table *frame_filter;
 struct ebt_table *frame_nat;


 bool ulog_warn_deprecated;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct hlist_nulls_head {
  template <typename, int = 0> struct __BYPASShlist_nulls_head {};
  template <typename, int> friend struct __BYPASShlist_nulls_head;
 struct hlist_nulls_node *first;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct hlist_nulls_node {
  template <typename, int = 0> struct __BYPASShlist_nulls_node {};
  template <typename, int> friend struct __BYPASShlist_nulls_node;
 struct hlist_nulls_node *next, **pprev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline int is_a_nulls( struct hlist_nulls_node *ptr)
{
 return ((unsigned long)ptr & 1);
}







static inline unsigned long get_nulls_value( struct hlist_nulls_node *ptr)
{
 return ((unsigned long)ptr) >> 1;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16hlist_nulls_node5pprevE_1913_0 {
  typedef TJP__ZN16hlist_nulls_node5pprevE_1913_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_nulls_node ** __get__ZN16hlist_nulls_node5pprevE_1913(hlist_nulls_node ** *source) {
  ::hlist_nulls_node **__result_buffer;
  typedef TJP__ZN16hlist_nulls_node5pprevE_1913_0< ::hlist_nulls_node **, ::hlist_nulls_node , ::hlist_nulls_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_nulls_node **&)__result_buffer;
}
static inline int hlist_nulls_unhashed( struct hlist_nulls_node *h)
{
 return !__get__ZN16hlist_nulls_node5pprevE_1913(&h->pprev);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16hlist_nulls_head5firstE_1914_0 {
  typedef TJP__ZN16hlist_nulls_head5firstE_1914_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_nulls_node * __get__ZN16hlist_nulls_head5firstE_1914(hlist_nulls_node * *source) {
  ::hlist_nulls_node *__result_buffer;
  typedef TJP__ZN16hlist_nulls_head5firstE_1914_0< ::hlist_nulls_node *, ::hlist_nulls_head , ::hlist_nulls_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_nulls_node *&)__result_buffer;
}
static inline int hlist_nulls_empty( struct hlist_nulls_head *h)
{
 return is_a_nulls(__get__ZN16hlist_nulls_head5firstE_1914(&h->first));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16hlist_nulls_head5firstE_1915_0 {
  typedef TJP__ZN16hlist_nulls_head5firstE_1915_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_nulls_node * __get__ZN16hlist_nulls_head5firstE_1915(hlist_nulls_node * *source) {
  ::hlist_nulls_node *__result_buffer;
  typedef TJP__ZN16hlist_nulls_head5firstE_1915_0< ::hlist_nulls_node *, ::hlist_nulls_head , ::hlist_nulls_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_nulls_node *&)__result_buffer;
}
static inline void hlist_nulls_add_head(struct hlist_nulls_node *n,
     struct hlist_nulls_head *h)
{
 struct hlist_nulls_node *first = __get__ZN16hlist_nulls_head5firstE_1915(&h->first);

 n->next = first;
 n->pprev = &h->first;
 h->first = n;
 if (!is_a_nulls(first))
  first->pprev = &n->next;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16hlist_nulls_node4nextE_1916_0 {
  typedef TJP__ZN16hlist_nulls_node4nextE_1916_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_nulls_node * __get__ZN16hlist_nulls_node4nextE_1916(hlist_nulls_node * *source) {
  ::hlist_nulls_node *__result_buffer;
  typedef TJP__ZN16hlist_nulls_node4nextE_1916_0< ::hlist_nulls_node *, ::hlist_nulls_node , ::hlist_nulls_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_nulls_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16hlist_nulls_node5pprevE_1917_0 {
  typedef TJP__ZN16hlist_nulls_node5pprevE_1917_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_nulls_node ** __get__ZN16hlist_nulls_node5pprevE_1917(hlist_nulls_node ** *source) {
  ::hlist_nulls_node **__result_buffer;
  typedef TJP__ZN16hlist_nulls_node5pprevE_1917_0< ::hlist_nulls_node **, ::hlist_nulls_node , ::hlist_nulls_node ** > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_nulls_node **&)__result_buffer;
}
static inline void __hlist_nulls_del(struct hlist_nulls_node *n)
{
 struct hlist_nulls_node *next = __get__ZN16hlist_nulls_node4nextE_1916(&n->next);
 struct hlist_nulls_node **pprev = __get__ZN16hlist_nulls_node5pprevE_1917(&n->pprev);
 *pprev = next;
 if (!is_a_nulls(next))
  next->pprev = pprev;
}

static inline void hlist_nulls_del(struct hlist_nulls_node *n)
{
 __hlist_nulls_del(n);
 n->pprev = ((void *) 0x00200200 + (0xdead000000000000UL));
}











enum tcp_conntrack {
 TCP_CONNTRACK_NONE,
 TCP_CONNTRACK_SYN_SENT,
 TCP_CONNTRACK_SYN_RECV,
 TCP_CONNTRACK_ESTABLISHED,
 TCP_CONNTRACK_FIN_WAIT,
 TCP_CONNTRACK_CLOSE_WAIT,
 TCP_CONNTRACK_LAST_ACK,
 TCP_CONNTRACK_TIME_WAIT,
 TCP_CONNTRACK_CLOSE,
 TCP_CONNTRACK_LISTEN,

 TCP_CONNTRACK_MAX,
 TCP_CONNTRACK_IGNORE,
 TCP_CONNTRACK_RETRANS,
 TCP_CONNTRACK_UNACK,
 TCP_CONNTRACK_TIMEOUT_MAX
};
struct nf_ct_tcp_flags {
  template <typename, int = 0> struct __BYPASSnf_ct_tcp_flags {};
  template <typename, int> friend struct __BYPASSnf_ct_tcp_flags;
 __u8 flags;
 __u8 mask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ip_ct_tcp_state {
  template <typename, int = 0> struct __BYPASSip_ct_tcp_state {};
  template <typename, int> friend struct __BYPASSip_ct_tcp_state;
 u_int32_t td_end;
 u_int32_t td_maxend;
 u_int32_t td_maxwin;
 u_int32_t td_maxack;
 u_int8_t td_scale;
 u_int8_t flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_ct_tcp {
  template <typename, int = 0> struct __BYPASSip_ct_tcp {};
  template <typename, int> friend struct __BYPASSip_ct_tcp;
 struct ip_ct_tcp_state seen[2];
 u_int8_t state;

 u_int8_t last_dir;
 u_int8_t retrans;
 u_int8_t last_index;
 u_int32_t last_seq;
 u_int32_t last_ack;
 u_int32_t last_end;
 u_int16_t last_win;

 u_int8_t last_wscale;
 u_int8_t last_flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ctl_table_header;
struct nf_conntrack_ecache;

struct nf_proto_net {
  template <typename, int = 0> struct __BYPASSnf_proto_net {};
  template <typename, int> friend struct __BYPASSnf_proto_net;

 struct ctl_table_header *ctl_table_header;
 struct ctl_table *ctl_table;





 unsigned int users;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nf_generic_net {
  template <typename, int = 0> struct __BYPASSnf_generic_net {};
  template <typename, int> friend struct __BYPASSnf_generic_net;
 struct nf_proto_net pn;
 unsigned int timeout;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nf_tcp_net {
  template <typename, int = 0> struct __BYPASSnf_tcp_net {};
  template <typename, int> friend struct __BYPASSnf_tcp_net;
 struct nf_proto_net pn;
 unsigned int timeouts[TCP_CONNTRACK_TIMEOUT_MAX];
 unsigned int tcp_loose;
 unsigned int tcp_be_liberal;
 unsigned int tcp_max_retrans;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum udp_conntrack {
 UDP_CT_UNREPLIED,
 UDP_CT_REPLIED,
 UDP_CT_MAX
};

struct nf_udp_net {
  template <typename, int = 0> struct __BYPASSnf_udp_net {};
  template <typename, int> friend struct __BYPASSnf_udp_net;
 struct nf_proto_net pn;
 unsigned int timeouts[UDP_CT_MAX];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nf_icmp_net {
  template <typename, int = 0> struct __BYPASSnf_icmp_net {};
  template <typename, int> friend struct __BYPASSnf_icmp_net;
 struct nf_proto_net pn;
 unsigned int timeout;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nf_ip_net {
  template <typename, int = 0> struct __BYPASSnf_ip_net {};
  template <typename, int> friend struct __BYPASSnf_ip_net;
 struct nf_generic_net generic;
 struct nf_tcp_net tcp;
 struct nf_udp_net udp;
 struct nf_icmp_net icmp;
 struct nf_icmp_net icmpv6;





  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netns_ct {
  template <typename, int = 0> struct __BYPASSnetns_ct {};
  template <typename, int> friend struct __BYPASSnetns_ct;
 atomic_t count;
 unsigned int expect_count;
 unsigned int htable_size;
 struct kmem_cache *nf_conntrack_cachep;
 struct hlist_nulls_head *hash;
 struct hlist_head *expect_hash;
 struct hlist_nulls_head unconfirmed;
 struct hlist_nulls_head dying;
 struct hlist_nulls_head tmpl;
 struct ip_conntrack_stat *stat;
 struct nf_ct_event_notifier *nf_conntrack_event_cb;
 struct nf_exp_event_notifier *nf_expect_event_cb;
 int sysctl_events;
 unsigned int sysctl_events_retry_timeout;
 int sysctl_acct;
 int sysctl_tstamp;
 int sysctl_checksum;
 unsigned int sysctl_log_invalid;
 int sysctl_auto_assign_helper;
 bool auto_assign_helper_warned;
 struct nf_ip_net nf_ct_proto;

 unsigned int labels_used;
 u8 label_words;


 struct hlist_head *nat_bysource;
 unsigned int nat_htable_size;


 struct ctl_table_header *sysctl_header;
 struct ctl_table_header *acct_sysctl_header;
 struct ctl_table_header *tstamp_sysctl_header;
 struct ctl_table_header *event_sysctl_header;
 struct ctl_table_header *helper_sysctl_header;

 char *slabname;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct nft_af_info;

struct netns_nftables {
  template <typename, int = 0> struct __BYPASSnetns_nftables {};
  template <typename, int> friend struct __BYPASSnetns_nftables;
 struct list_head af_info;
 struct list_head commit_list;
 struct nft_af_info *ipv4;
 struct nft_af_info *ipv6;
 struct nft_af_info *arp;
 struct nft_af_info *bridge;
 u8 gencursor;
 u8 genctr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






typedef union {
 __be32 a4;
 __be32 a6[4];
} xfrm_address_t;





struct xfrm_id {
  template <typename, int = 0> struct __BYPASSxfrm_id {};
  template <typename, int> friend struct __BYPASSxfrm_id;
 xfrm_address_t daddr;
 __be32 spi;
 __u8 proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_sec_ctx {
  template <typename, int = 0> struct __BYPASSxfrm_sec_ctx {};
  template <typename, int> friend struct __BYPASSxfrm_sec_ctx;
 __u8 ctx_doi;
 __u8 ctx_alg;
 __u16 ctx_len;
 __u32 ctx_sid;
 char ctx_str[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct xfrm_selector {
  template <typename, int = 0> struct __BYPASSxfrm_selector {};
  template <typename, int> friend struct __BYPASSxfrm_selector;
 xfrm_address_t daddr;
 xfrm_address_t saddr;
 __be16 dport;
 __be16 dport_mask;
 __be16 sport;
 __be16 sport_mask;
 __u16 family;
 __u8 prefixlen_d;
 __u8 prefixlen_s;
 __u8 proto;
 int ifindex;
 __kernel_uid32_t user;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct xfrm_lifetime_cfg {
  template <typename, int = 0> struct __BYPASSxfrm_lifetime_cfg {};
  template <typename, int> friend struct __BYPASSxfrm_lifetime_cfg;
 __u64 soft_byte_limit;
 __u64 hard_byte_limit;
 __u64 soft_packet_limit;
 __u64 hard_packet_limit;
 __u64 soft_add_expires_seconds;
 __u64 hard_add_expires_seconds;
 __u64 soft_use_expires_seconds;
 __u64 hard_use_expires_seconds;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_lifetime_cur {
  template <typename, int = 0> struct __BYPASSxfrm_lifetime_cur {};
  template <typename, int> friend struct __BYPASSxfrm_lifetime_cur;
 __u64 bytes;
 __u64 packets;
 __u64 add_time;
 __u64 use_time;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_replay_state {
  template <typename, int = 0> struct __BYPASSxfrm_replay_state {};
  template <typename, int> friend struct __BYPASSxfrm_replay_state;
 __u32 oseq;
 __u32 seq;
 __u32 bitmap;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct xfrm_replay_state_esn {
  template <typename, int = 0> struct __BYPASSxfrm_replay_state_esn {};
  template <typename, int> friend struct __BYPASSxfrm_replay_state_esn;
 unsigned int bmp_len;
 __u32 oseq;
 __u32 seq;
 __u32 oseq_hi;
 __u32 seq_hi;
 __u32 replay_window;
 __u32 bmp[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_algo {
  template <typename, int = 0> struct __BYPASSxfrm_algo {};
  template <typename, int> friend struct __BYPASSxfrm_algo;
 char alg_name[64];
 unsigned int alg_key_len;
 char alg_key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_algo_auth {
  template <typename, int = 0> struct __BYPASSxfrm_algo_auth {};
  template <typename, int> friend struct __BYPASSxfrm_algo_auth;
 char alg_name[64];
 unsigned int alg_key_len;
 unsigned int alg_trunc_len;
 char alg_key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_algo_aead {
  template <typename, int = 0> struct __BYPASSxfrm_algo_aead {};
  template <typename, int> friend struct __BYPASSxfrm_algo_aead;
 char alg_name[64];
 unsigned int alg_key_len;
 unsigned int alg_icv_len;
 char alg_key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_stats {
  template <typename, int = 0> struct __BYPASSxfrm_stats {};
  template <typename, int> friend struct __BYPASSxfrm_stats;
 __u32 replay_window;
 __u32 replay;
 __u32 integrity_failed;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 XFRM_POLICY_TYPE_MAIN = 0,
 XFRM_POLICY_TYPE_SUB = 1,
 XFRM_POLICY_TYPE_MAX = 2,
 XFRM_POLICY_TYPE_ANY = 255
};

enum {
 XFRM_POLICY_IN = 0,
 XFRM_POLICY_OUT = 1,
 XFRM_POLICY_FWD = 2,
 XFRM_POLICY_MASK = 3,
 XFRM_POLICY_MAX = 3
};

enum {
 XFRM_SHARE_ANY,
 XFRM_SHARE_SESSION,
 XFRM_SHARE_USER,
 XFRM_SHARE_UNIQUE
};
enum {
 XFRM_MSG_BASE = 0x10,

 XFRM_MSG_NEWSA = 0x10,

 XFRM_MSG_DELSA,

 XFRM_MSG_GETSA,


 XFRM_MSG_NEWPOLICY,

 XFRM_MSG_DELPOLICY,

 XFRM_MSG_GETPOLICY,


 XFRM_MSG_ALLOCSPI,

 XFRM_MSG_ACQUIRE,

 XFRM_MSG_EXPIRE,


 XFRM_MSG_UPDPOLICY,

 XFRM_MSG_UPDSA,


 XFRM_MSG_POLEXPIRE,


 XFRM_MSG_FLUSHSA,

 XFRM_MSG_FLUSHPOLICY,


 XFRM_MSG_NEWAE,

 XFRM_MSG_GETAE,


 XFRM_MSG_REPORT,


 XFRM_MSG_MIGRATE,


 XFRM_MSG_NEWSADINFO,

 XFRM_MSG_GETSADINFO,


 XFRM_MSG_NEWSPDINFO,

 XFRM_MSG_GETSPDINFO,


 XFRM_MSG_MAPPING,

 __XFRM_MSG_MAX
};
struct xfrm_user_sec_ctx {
  template <typename, int = 0> struct __BYPASSxfrm_user_sec_ctx {};
  template <typename, int> friend struct __BYPASSxfrm_user_sec_ctx;
 __u16 len;
 __u16 exttype;
 __u8 ctx_alg;
 __u8 ctx_doi;
 __u16 ctx_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_tmpl {
  template <typename, int = 0> struct __BYPASSxfrm_user_tmpl {};
  template <typename, int> friend struct __BYPASSxfrm_user_tmpl;
 struct xfrm_id id;
 __u16 family;
 xfrm_address_t saddr;
 __u32 reqid;
 __u8 mode;
 __u8 share;
 __u8 optional;
 __u32 aalgos;
 __u32 ealgos;
 __u32 calgos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_encap_tmpl {
  template <typename, int = 0> struct __BYPASSxfrm_encap_tmpl {};
  template <typename, int> friend struct __BYPASSxfrm_encap_tmpl;
 __u16 encap_type;
 __be16 encap_sport;
 __be16 encap_dport;
 xfrm_address_t encap_oa;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum xfrm_ae_ftype_t {
 XFRM_AE_UNSPEC,
 XFRM_AE_RTHR=1,
 XFRM_AE_RVAL=2,
 XFRM_AE_LVAL=4,
 XFRM_AE_ETHR=8,
 XFRM_AE_CR=16,
 XFRM_AE_CE=32,
 XFRM_AE_CU=64,
 __XFRM_AE_MAX


};

struct xfrm_userpolicy_type {
  template <typename, int = 0> struct __BYPASSxfrm_userpolicy_type {};
  template <typename, int> friend struct __BYPASSxfrm_userpolicy_type;
 __u8 type;
 __u16 reserved1;
 __u8 reserved2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum xfrm_attr_type_t {
 XFRMA_UNSPEC,
 XFRMA_ALG_AUTH,
 XFRMA_ALG_CRYPT,
 XFRMA_ALG_COMP,
 XFRMA_ENCAP,
 XFRMA_TMPL,
 XFRMA_SA,
 XFRMA_POLICY,
 XFRMA_SEC_CTX,
 XFRMA_LTIME_VAL,
 XFRMA_REPLAY_VAL,
 XFRMA_REPLAY_THRESH,
 XFRMA_ETIMER_THRESH,
 XFRMA_SRCADDR,
 XFRMA_COADDR,
 XFRMA_LASTUSED,
 XFRMA_POLICY_TYPE,
 XFRMA_MIGRATE,
 XFRMA_ALG_AEAD,
 XFRMA_KMADDRESS,
 XFRMA_ALG_AUTH_TRUNC,
 XFRMA_MARK,
 XFRMA_TFCPAD,
 XFRMA_REPLAY_ESN_VAL,
 XFRMA_SA_EXTRA_FLAGS,
 __XFRMA_MAX


};

struct xfrm_mark {
  template <typename, int = 0> struct __BYPASSxfrm_mark {};
  template <typename, int> friend struct __BYPASSxfrm_mark;
 __u32 v;
 __u32 m;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum xfrm_sadattr_type_t {
 XFRMA_SAD_UNSPEC,
 XFRMA_SAD_CNT,
 XFRMA_SAD_HINFO,
 __XFRMA_SAD_MAX


};

struct xfrmu_sadhinfo {
  template <typename, int = 0> struct __BYPASSxfrmu_sadhinfo {};
  template <typename, int> friend struct __BYPASSxfrmu_sadhinfo;
 __u32 sadhcnt;
 __u32 sadhmcnt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum xfrm_spdattr_type_t {
 XFRMA_SPD_UNSPEC,
 XFRMA_SPD_INFO,
 XFRMA_SPD_HINFO,
 __XFRMA_SPD_MAX


};

struct xfrmu_spdinfo {
  template <typename, int = 0> struct __BYPASSxfrmu_spdinfo {};
  template <typename, int> friend struct __BYPASSxfrmu_spdinfo;
 __u32 incnt;
 __u32 outcnt;
 __u32 fwdcnt;
 __u32 inscnt;
 __u32 outscnt;
 __u32 fwdscnt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrmu_spdhinfo {
  template <typename, int = 0> struct __BYPASSxfrmu_spdhinfo {};
  template <typename, int> friend struct __BYPASSxfrmu_spdhinfo;
 __u32 spdhcnt;
 __u32 spdhmcnt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_usersa_info {
  template <typename, int = 0> struct __BYPASSxfrm_usersa_info {};
  template <typename, int> friend struct __BYPASSxfrm_usersa_info;
 struct xfrm_selector sel;
 struct xfrm_id id;
 xfrm_address_t saddr;
 struct xfrm_lifetime_cfg lft;
 struct xfrm_lifetime_cur curlft;
 struct xfrm_stats stats;
 __u32 seq;
 __u32 reqid;
 __u16 family;
 __u8 mode;
 __u8 replay_window;
 __u8 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct xfrm_usersa_id {
  template <typename, int = 0> struct __BYPASSxfrm_usersa_id {};
  template <typename, int> friend struct __BYPASSxfrm_usersa_id;
 xfrm_address_t daddr;
 __be32 spi;
 __u16 family;
 __u8 proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_aevent_id {
  template <typename, int = 0> struct __BYPASSxfrm_aevent_id {};
  template <typename, int> friend struct __BYPASSxfrm_aevent_id;
 struct xfrm_usersa_id sa_id;
 xfrm_address_t saddr;
 __u32 flags;
 __u32 reqid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_userspi_info {
  template <typename, int = 0> struct __BYPASSxfrm_userspi_info {};
  template <typename, int> friend struct __BYPASSxfrm_userspi_info;
 struct xfrm_usersa_info info;
 __u32 min;
 __u32 max;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_userpolicy_info {
  template <typename, int = 0> struct __BYPASSxfrm_userpolicy_info {};
  template <typename, int> friend struct __BYPASSxfrm_userpolicy_info;
 struct xfrm_selector sel;
 struct xfrm_lifetime_cfg lft;
 struct xfrm_lifetime_cur curlft;
 __u32 priority;
 __u32 index;
 __u8 dir;
 __u8 action;


 __u8 flags;



 __u8 share;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_userpolicy_id {
  template <typename, int = 0> struct __BYPASSxfrm_userpolicy_id {};
  template <typename, int> friend struct __BYPASSxfrm_userpolicy_id;
 struct xfrm_selector sel;
 __u32 index;
 __u8 dir;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_acquire {
  template <typename, int = 0> struct __BYPASSxfrm_user_acquire {};
  template <typename, int> friend struct __BYPASSxfrm_user_acquire;
 struct xfrm_id id;
 xfrm_address_t saddr;
 struct xfrm_selector sel;
 struct xfrm_userpolicy_info policy;
 __u32 aalgos;
 __u32 ealgos;
 __u32 calgos;
 __u32 seq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_expire {
  template <typename, int = 0> struct __BYPASSxfrm_user_expire {};
  template <typename, int> friend struct __BYPASSxfrm_user_expire;
 struct xfrm_usersa_info state;
 __u8 hard;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_polexpire {
  template <typename, int = 0> struct __BYPASSxfrm_user_polexpire {};
  template <typename, int> friend struct __BYPASSxfrm_user_polexpire;
 struct xfrm_userpolicy_info pol;
 __u8 hard;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_usersa_flush {
  template <typename, int = 0> struct __BYPASSxfrm_usersa_flush {};
  template <typename, int> friend struct __BYPASSxfrm_usersa_flush;
 __u8 proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_report {
  template <typename, int = 0> struct __BYPASSxfrm_user_report {};
  template <typename, int> friend struct __BYPASSxfrm_user_report;
 __u8 proto;
 struct xfrm_selector sel;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct xfrm_user_kmaddress {
  template <typename, int = 0> struct __BYPASSxfrm_user_kmaddress {};
  template <typename, int> friend struct __BYPASSxfrm_user_kmaddress;
 xfrm_address_t local;
 xfrm_address_t remote;
 __u32 reserved;
 __u16 family;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_migrate {
  template <typename, int = 0> struct __BYPASSxfrm_user_migrate {};
  template <typename, int> friend struct __BYPASSxfrm_user_migrate;
 xfrm_address_t old_daddr;
 xfrm_address_t old_saddr;
 xfrm_address_t new_daddr;
 xfrm_address_t new_saddr;
 __u8 proto;
 __u8 mode;
 __u16 reserved;
 __u32 reqid;
 __u16 old_family;
 __u16 new_family;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xfrm_user_mapping {
  template <typename, int = 0> struct __BYPASSxfrm_user_mapping {};
  template <typename, int> friend struct __BYPASSxfrm_user_mapping;
 struct xfrm_usersa_id id;
 __u32 reqid;
 xfrm_address_t old_saddr;
 xfrm_address_t new_saddr;
 __be16 old_sport;
 __be16 new_sport;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum xfrm_nlgroups {
 XFRMNLGRP_NONE,

 XFRMNLGRP_ACQUIRE,

 XFRMNLGRP_EXPIRE,

 XFRMNLGRP_SA,

 XFRMNLGRP_POLICY,

 XFRMNLGRP_AEVENTS,

 XFRMNLGRP_REPORT,

 XFRMNLGRP_MIGRATE,

 XFRMNLGRP_MAPPING,

 __XFRMNLGRP_MAX
};


struct ctl_table_header;

struct xfrm_policy_hash {
  template <typename, int = 0> struct __BYPASSxfrm_policy_hash {};
  template <typename, int> friend struct __BYPASSxfrm_policy_hash;
 struct hlist_head *table;
 unsigned int hmask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netns_xfrm {
  template <typename, int = 0> struct __BYPASSnetns_xfrm {};
  template <typename, int> friend struct __BYPASSnetns_xfrm;
 struct list_head state_all;
 struct hlist_head *state_bydst;
 struct hlist_head *state_bysrc;
 struct hlist_head *state_byspi;
 unsigned int state_hmask;
 unsigned int state_num;
 struct work_struct state_hash_work;
 struct hlist_head state_gc_list;
 struct work_struct state_gc_work;

 wait_queue_head_t km_waitq;

 struct list_head policy_all;
 struct hlist_head *policy_byidx;
 unsigned int policy_idx_hmask;
 struct hlist_head policy_inexact[XFRM_POLICY_MAX * 2];
 struct xfrm_policy_hash policy_bydst[XFRM_POLICY_MAX * 2];
 unsigned int policy_count[XFRM_POLICY_MAX * 2];
 struct work_struct policy_hash_work;


 struct sock *nlsk;
 struct sock *nlsk_stash;

 u32 sysctl_aevent_etime;
 u32 sysctl_aevent_rseqth;
 int sysctl_larval_drop;
 u32 sysctl_acq_expires;

 struct ctl_table_header *sysctl_hdr;


 struct dst_ops xfrm4_dst_ops;

 struct dst_ops xfrm6_dst_ops;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct user_namespace;
struct proc_dir_entry;
struct net_device;
struct sock;
struct ctl_table_header;
struct net_generic;
struct sock;
struct netns_ipvs;





struct net {
  template <typename, int = 0> struct __BYPASSnet {};
  template <typename, int> friend struct __BYPASSnet;
 atomic_t passive;


 atomic_t count;







 spinlock_t rules_mod_lock;

 struct list_head list;
 struct list_head cleanup_list;
 struct list_head exit_list;

 struct user_namespace *user_ns;

 unsigned int proc_inum;

 struct proc_dir_entry *proc_net;
 struct proc_dir_entry *proc_net_stat;


 struct ctl_table_set sysctls;


 struct sock *rtnl;
 struct sock *genl_sock;

 struct list_head dev_base_head;
 struct hlist_head *dev_name_head;
 struct hlist_head *dev_index_head;
 unsigned int dev_base_seq;
 int ifindex;
 unsigned int dev_unreg_count;


 struct list_head rules_ops;


 struct net_device *loopback_dev;
 struct netns_core core;
 struct netns_mib mib;
 struct netns_packet packet;
 struct netns_unix unx;
 struct netns_ipv4 ipv4;

 struct netns_ipv6 ipv6;


 struct netns_sctp sctp;


 struct netns_dccp dccp;


 struct netns_nf nf;
 struct netns_xt xt;

 struct netns_ct ct;


 struct netns_nftables nft;


 struct netns_nf_frag nf_frag;

 struct sock *nfnl;
 struct sock *nfnl_stash;


 struct sk_buff_head wext_nlevents;

 struct net_generic *gen;



 struct netns_xfrm xfrm;


 struct netns_ipvs *ipvs;

 struct sock *diag_nlsk;
 atomic_t fnhe_genid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct net;
extern struct net init_net;

struct seq_net_private {
  template <typename, int = 0> struct __BYPASSseq_net_private {};
  template <typename, int> friend struct __BYPASSseq_net_private;

 struct net *net;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int seq_open_net(struct inode *, struct file *,
   struct seq_operations *, int);
int single_open_net(struct inode *, struct file *file,
  int (*show)(struct seq_file *, void *));
int seq_release_net(struct inode *, struct file *);
int single_release_net(struct inode *, struct file *);
static inline struct net *seq_file_net(struct seq_file *seq)
{







 return &init_net;

}


extern struct net init_net;


struct net *copy_net_ns(unsigned long flags, struct user_namespace *user_ns,
   struct net *old_net);
extern struct list_head net_namespace_list;

struct net *get_net_ns_by_pid(pid_t pid);
struct net *get_net_ns_by_fd(int pid);


void __put_net(struct net *net);

static inline struct net *get_net(struct net *net)
{
 ;
 return net;
}

static inline struct net *maybe_get_net(struct net *net)
{





 if (!atomic_add_unless((&net->count), 1, 0))
  net = 0;
 return net;
}

static inline void put_net(struct net *net)
{
 if (1)
  __put_net(net);
}

static inline
int net_eq( struct net *net1, struct net *net2)
{
 return net1 == net2;
}

void net_drop_ns(void *);
static inline struct net *hold_net(struct net *net)
{
 return net;
}

static inline void release_net(struct net *net)
{
}




static inline void write_pnet(struct net **pnet, struct net *net)
{
 *pnet = net;
}

static inline struct net *read_pnet(struct net * *pnet)
{



 return *(typeof(pnet))g_map(pnet, sizeof(*(pnet)));

}
struct pernet_operations {
  template <typename, int = 0> struct __BYPASSpernet_operations {};
  template <typename, int> friend struct __BYPASSpernet_operations;
 struct list_head list;
 int (*init)(struct net *net);
 void (*exit)(struct net *net);
 void (*exit_batch)(struct list_head *net_exit_list);
 int *id;
 size_t size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
int register_pernet_subsys(struct pernet_operations *);
void unregister_pernet_subsys(struct pernet_operations *);
int register_pernet_device(struct pernet_operations *);
void unregister_pernet_device(struct pernet_operations *);

struct ctl_table;
struct ctl_table_header;


int net_sysctl_init(void);
struct ctl_table_header *register_net_sysctl(struct net *net, char *path,
          struct ctl_table *table);
void unregister_net_sysctl_table(struct ctl_table_header *header);
static inline int rt_genid_ipv4(struct net *net)
{
 return atomic_read(&net->ipv4.rt_genid);
}

static inline void rt_genid_bump_ipv4(struct net *net)
{
 ;
}


static inline int rt_genid_ipv6(struct net *net)
{
 return atomic_read(&net->ipv6.rt_genid);
}

static inline void rt_genid_bump_ipv6(struct net *net)
{
 ;
}
static inline void rt_genid_bump_all(struct net *net)
{
 rt_genid_bump_ipv4(net);
 rt_genid_bump_ipv6(net);
}

static inline int fnhe_genid(struct net *net)
{
 return atomic_read(&net->fnhe_genid);
}

static inline void fnhe_genid_bump(struct net *net)
{
 ;
}
struct dsa_chip_data {
  template <typename, int = 0> struct __BYPASSdsa_chip_data {};
  template <typename, int> friend struct __BYPASSdsa_chip_data;



 struct device *mii_bus;
 int sw_addr;
 char *port_names[12];







 s8 *rtable;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dsa_platform_data {
  template <typename, int = 0> struct __BYPASSdsa_platform_data {};
  template <typename, int> friend struct __BYPASSdsa_platform_data;




 struct device *netdev;





 int nr_chips;
 struct dsa_chip_data *chip;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dsa_switch_tree {
  template <typename, int = 0> struct __BYPASSdsa_switch_tree {};
  template <typename, int> friend struct __BYPASSdsa_switch_tree;




 struct dsa_platform_data *pd;





 struct net_device *master_netdev;
 __be16 tag_protocol;




 s8 cpu_switch;
 s8 cpu_port;




 int link_poll_needed;
 struct work_struct link_poll_work;
 struct timer_list link_poll_timer;




 struct dsa_switch *ds[4];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dsa_switch {
  template <typename, int = 0> struct __BYPASSdsa_switch {};
  template <typename, int> friend struct __BYPASSdsa_switch;



 struct dsa_switch_tree *dst;
 int index;




 struct dsa_chip_data *pd;




 struct dsa_switch_driver *drv;




 struct mii_bus *master_mii_bus;




 u32 dsa_port_mask;
 u32 phys_port_mask;
 struct mii_bus *slave_mii_bus;
 struct net_device *ports[12];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline bool dsa_is_cpu_port(struct dsa_switch *ds, int p)
{
 return !!(ds->index == ds->dst->cpu_switch && p == ds->dst->cpu_port);
}

static inline u8 dsa_upstream_port(struct dsa_switch *ds)
{
 struct dsa_switch_tree *dst = ds->dst;







 if (dst->cpu_switch == ds->index)
  return dst->cpu_port;
 else
  return ds->pd->rtable[dst->cpu_switch];
}

struct dsa_switch_driver {
  template <typename, int = 0> struct __BYPASSdsa_switch_driver {};
  template <typename, int> friend struct __BYPASSdsa_switch_driver;
 struct list_head list;

 __be16 tag_protocol;
 int priv_size;




 char *(*probe)(struct mii_bus *bus, int sw_addr);
 int (*setup)(struct dsa_switch *ds);
 int (*set_addr)(struct dsa_switch *ds, u8 *addr);




 int (*phy_read)(struct dsa_switch *ds, int port, int regnum);
 int (*phy_write)(struct dsa_switch *ds, int port,
        int regnum, u16 val);




 void (*poll_link)(struct dsa_switch *ds);




 void (*get_strings)(struct dsa_switch *ds, int port, uint8_t *data);
 void (*get_ethtool_stats)(struct dsa_switch *ds,
         int port, uint64_t *data);
 int (*get_sset_count)(struct dsa_switch *ds);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void register_switch_driver(struct dsa_switch_driver *type);
void unregister_switch_driver(struct dsa_switch_driver *type);
static inline bool dsa_uses_dsa_tags(struct dsa_switch_tree *dst)
{
 return !!(dst->tag_protocol == (( __be16)(__builtin_constant_p((__u16)((0x001B))) ? ((__u16)( (((__u16)((0x001B)) & (__u16)0x00ffU) << 8) | (((__u16)((0x001B)) & (__u16)0xff00U) >> 8))) : __fswab16((0x001B)))));
}

static inline bool dsa_uses_trailer_tags(struct dsa_switch_tree *dst)
{
 return !!(dst->tag_protocol == (( __be16)(__builtin_constant_p((__u16)((0x001C))) ? ((__u16)( (((__u16)((0x001C)) & (__u16)0x00ffU) << 8) | (((__u16)((0x001C)) & (__u16)0xff00U) >> 8))) : __fswab16((0x001C)))));
}

struct ieee_ets {
  template <typename, int = 0> struct __BYPASSieee_ets {};
  template <typename, int> friend struct __BYPASSieee_ets;
 __u8 willing;
 __u8 ets_cap;
 __u8 cbs;
 __u8 tc_tx_bw[8];
 __u8 tc_rx_bw[8];
 __u8 tc_tsa[8];
 __u8 prio_tc[8];
 __u8 tc_reco_bw[8];
 __u8 tc_reco_tsa[8];
 __u8 reco_prio_tc[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ieee_maxrate {
  template <typename, int = 0> struct __BYPASSieee_maxrate {};
  template <typename, int> friend struct __BYPASSieee_maxrate;
 __u64 tc_maxrate[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ieee_pfc {
  template <typename, int = 0> struct __BYPASSieee_pfc {};
  template <typename, int> friend struct __BYPASSieee_pfc;
 __u8 pfc_cap;
 __u8 pfc_en;
 __u8 mbc;
 __u16 delay;
 __u64 requests[8];
 __u64 indications[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct cee_pg {
  template <typename, int = 0> struct __BYPASScee_pg {};
  template <typename, int> friend struct __BYPASScee_pg;
 __u8 willing;
 __u8 error;
 __u8 pg_en;
 __u8 tcs_supported;
 __u8 pg_bw[8];
 __u8 prio_pg[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct cee_pfc {
  template <typename, int = 0> struct __BYPASScee_pfc {};
  template <typename, int> friend struct __BYPASScee_pfc;
 __u8 willing;
 __u8 error;
 __u8 pfc_en;
 __u8 tcs_supported;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dcb_app {
  template <typename, int = 0> struct __BYPASSdcb_app {};
  template <typename, int> friend struct __BYPASSdcb_app;
 __u8 selector;
 __u8 priority;
 __u16 protocol;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dcb_peer_app_info {
  template <typename, int = 0> struct __BYPASSdcb_peer_app_info {};
  template <typename, int> friend struct __BYPASSdcb_peer_app_info;
 __u8 willing;
 __u8 error;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct dcbmsg {
  template <typename, int = 0> struct __BYPASSdcbmsg {};
  template <typename, int> friend struct __BYPASSdcbmsg;
 __u8 dcb_family;
 __u8 cmd;
 __u16 dcb_pad;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum dcbnl_commands {
 DCB_CMD_UNDEFINED,

 DCB_CMD_GSTATE,
 DCB_CMD_SSTATE,

 DCB_CMD_PGTX_GCFG,
 DCB_CMD_PGTX_SCFG,
 DCB_CMD_PGRX_GCFG,
 DCB_CMD_PGRX_SCFG,

 DCB_CMD_PFC_GCFG,
 DCB_CMD_PFC_SCFG,

 DCB_CMD_SET_ALL,

 DCB_CMD_GPERM_HWADDR,

 DCB_CMD_GCAP,

 DCB_CMD_GNUMTCS,
 DCB_CMD_SNUMTCS,

 DCB_CMD_PFC_GSTATE,
 DCB_CMD_PFC_SSTATE,

 DCB_CMD_BCN_GCFG,
 DCB_CMD_BCN_SCFG,

 DCB_CMD_GAPP,
 DCB_CMD_SAPP,

 DCB_CMD_IEEE_SET,
 DCB_CMD_IEEE_GET,

 DCB_CMD_GDCBX,
 DCB_CMD_SDCBX,

 DCB_CMD_GFEATCFG,
 DCB_CMD_SFEATCFG,

 DCB_CMD_CEE_GET,
 DCB_CMD_IEEE_DEL,

 __DCB_CMD_ENUM_MAX,
 DCB_CMD_MAX = __DCB_CMD_ENUM_MAX - 1,
};
enum dcbnl_attrs {
 DCB_ATTR_UNDEFINED,

 DCB_ATTR_IFNAME,
 DCB_ATTR_STATE,
 DCB_ATTR_PFC_STATE,
 DCB_ATTR_PFC_CFG,
 DCB_ATTR_NUM_TC,
 DCB_ATTR_PG_CFG,
 DCB_ATTR_SET_ALL,
 DCB_ATTR_PERM_HWADDR,
 DCB_ATTR_CAP,
 DCB_ATTR_NUMTCS,
 DCB_ATTR_BCN,
 DCB_ATTR_APP,


 DCB_ATTR_IEEE,

 DCB_ATTR_DCBX,
 DCB_ATTR_FEATCFG,


 DCB_ATTR_CEE,

 __DCB_ATTR_ENUM_MAX,
 DCB_ATTR_MAX = __DCB_ATTR_ENUM_MAX - 1,
};
enum ieee_attrs {
 DCB_ATTR_IEEE_UNSPEC,
 DCB_ATTR_IEEE_ETS,
 DCB_ATTR_IEEE_PFC,
 DCB_ATTR_IEEE_APP_TABLE,
 DCB_ATTR_IEEE_PEER_ETS,
 DCB_ATTR_IEEE_PEER_PFC,
 DCB_ATTR_IEEE_PEER_APP,
 DCB_ATTR_IEEE_MAXRATE,
 __DCB_ATTR_IEEE_MAX
};


enum ieee_attrs_app {
 DCB_ATTR_IEEE_APP_UNSPEC,
 DCB_ATTR_IEEE_APP,
 __DCB_ATTR_IEEE_APP_MAX
};
enum cee_attrs {
 DCB_ATTR_CEE_UNSPEC,
 DCB_ATTR_CEE_PEER_PG,
 DCB_ATTR_CEE_PEER_PFC,
 DCB_ATTR_CEE_PEER_APP_TABLE,
 DCB_ATTR_CEE_TX_PG,
 DCB_ATTR_CEE_RX_PG,
 DCB_ATTR_CEE_PFC,
 DCB_ATTR_CEE_APP_TABLE,
 DCB_ATTR_CEE_FEAT,
 __DCB_ATTR_CEE_MAX
};


enum peer_app_attr {
 DCB_ATTR_CEE_PEER_APP_UNSPEC,
 DCB_ATTR_CEE_PEER_APP_INFO,
 DCB_ATTR_CEE_PEER_APP,
 __DCB_ATTR_CEE_PEER_APP_MAX
};


enum cee_attrs_app {
 DCB_ATTR_CEE_APP_UNSPEC,
 DCB_ATTR_CEE_APP,
 __DCB_ATTR_CEE_APP_MAX
};
enum dcbnl_pfc_up_attrs {
 DCB_PFC_UP_ATTR_UNDEFINED,

 DCB_PFC_UP_ATTR_0,
 DCB_PFC_UP_ATTR_1,
 DCB_PFC_UP_ATTR_2,
 DCB_PFC_UP_ATTR_3,
 DCB_PFC_UP_ATTR_4,
 DCB_PFC_UP_ATTR_5,
 DCB_PFC_UP_ATTR_6,
 DCB_PFC_UP_ATTR_7,
 DCB_PFC_UP_ATTR_ALL,

 __DCB_PFC_UP_ATTR_ENUM_MAX,
 DCB_PFC_UP_ATTR_MAX = __DCB_PFC_UP_ATTR_ENUM_MAX - 1,
};
enum dcbnl_pg_attrs {
 DCB_PG_ATTR_UNDEFINED,

 DCB_PG_ATTR_TC_0,
 DCB_PG_ATTR_TC_1,
 DCB_PG_ATTR_TC_2,
 DCB_PG_ATTR_TC_3,
 DCB_PG_ATTR_TC_4,
 DCB_PG_ATTR_TC_5,
 DCB_PG_ATTR_TC_6,
 DCB_PG_ATTR_TC_7,
 DCB_PG_ATTR_TC_MAX,
 DCB_PG_ATTR_TC_ALL,

 DCB_PG_ATTR_BW_ID_0,
 DCB_PG_ATTR_BW_ID_1,
 DCB_PG_ATTR_BW_ID_2,
 DCB_PG_ATTR_BW_ID_3,
 DCB_PG_ATTR_BW_ID_4,
 DCB_PG_ATTR_BW_ID_5,
 DCB_PG_ATTR_BW_ID_6,
 DCB_PG_ATTR_BW_ID_7,
 DCB_PG_ATTR_BW_ID_MAX,
 DCB_PG_ATTR_BW_ID_ALL,

 __DCB_PG_ATTR_ENUM_MAX,
 DCB_PG_ATTR_MAX = __DCB_PG_ATTR_ENUM_MAX - 1,
};
enum dcbnl_tc_attrs {
 DCB_TC_ATTR_PARAM_UNDEFINED,

 DCB_TC_ATTR_PARAM_PGID,
 DCB_TC_ATTR_PARAM_UP_MAPPING,
 DCB_TC_ATTR_PARAM_STRICT_PRIO,
 DCB_TC_ATTR_PARAM_BW_PCT,
 DCB_TC_ATTR_PARAM_ALL,

 __DCB_TC_ATTR_PARAM_ENUM_MAX,
 DCB_TC_ATTR_PARAM_MAX = __DCB_TC_ATTR_PARAM_ENUM_MAX - 1,
};
enum dcbnl_cap_attrs {
 DCB_CAP_ATTR_UNDEFINED,
 DCB_CAP_ATTR_ALL,
 DCB_CAP_ATTR_PG,
 DCB_CAP_ATTR_PFC,
 DCB_CAP_ATTR_UP2TC,
 DCB_CAP_ATTR_PG_TCS,
 DCB_CAP_ATTR_PFC_TCS,
 DCB_CAP_ATTR_GSP,
 DCB_CAP_ATTR_BCN,
 DCB_CAP_ATTR_DCBX,

 __DCB_CAP_ATTR_ENUM_MAX,
 DCB_CAP_ATTR_MAX = __DCB_CAP_ATTR_ENUM_MAX - 1,
};
enum dcbnl_numtcs_attrs {
 DCB_NUMTCS_ATTR_UNDEFINED,
 DCB_NUMTCS_ATTR_ALL,
 DCB_NUMTCS_ATTR_PG,
 DCB_NUMTCS_ATTR_PFC,

 __DCB_NUMTCS_ATTR_ENUM_MAX,
 DCB_NUMTCS_ATTR_MAX = __DCB_NUMTCS_ATTR_ENUM_MAX - 1,
};

enum dcbnl_bcn_attrs{
 DCB_BCN_ATTR_UNDEFINED = 0,

 DCB_BCN_ATTR_RP_0,
 DCB_BCN_ATTR_RP_1,
 DCB_BCN_ATTR_RP_2,
 DCB_BCN_ATTR_RP_3,
 DCB_BCN_ATTR_RP_4,
 DCB_BCN_ATTR_RP_5,
 DCB_BCN_ATTR_RP_6,
 DCB_BCN_ATTR_RP_7,
 DCB_BCN_ATTR_RP_ALL,

 DCB_BCN_ATTR_BCNA_0,
 DCB_BCN_ATTR_BCNA_1,
 DCB_BCN_ATTR_ALPHA,
 DCB_BCN_ATTR_BETA,
 DCB_BCN_ATTR_GD,
 DCB_BCN_ATTR_GI,
 DCB_BCN_ATTR_TMAX,
 DCB_BCN_ATTR_TD,
 DCB_BCN_ATTR_RMIN,
 DCB_BCN_ATTR_W,
 DCB_BCN_ATTR_RD,
 DCB_BCN_ATTR_RU,
 DCB_BCN_ATTR_WRTT,
 DCB_BCN_ATTR_RI,
 DCB_BCN_ATTR_C,
 DCB_BCN_ATTR_ALL,

 __DCB_BCN_ATTR_ENUM_MAX,
 DCB_BCN_ATTR_MAX = __DCB_BCN_ATTR_ENUM_MAX - 1,
};







enum dcb_general_attr_values {
 DCB_ATTR_VALUE_UNDEFINED = 0xff
};



enum dcbnl_app_attrs {
 DCB_APP_ATTR_UNDEFINED,

 DCB_APP_ATTR_IDTYPE,
 DCB_APP_ATTR_ID,
 DCB_APP_ATTR_PRIORITY,

 __DCB_APP_ATTR_ENUM_MAX,
 DCB_APP_ATTR_MAX = __DCB_APP_ATTR_ENUM_MAX - 1,
};
enum dcbnl_featcfg_attrs {
 DCB_FEATCFG_ATTR_UNDEFINED,
 DCB_FEATCFG_ATTR_ALL,
 DCB_FEATCFG_ATTR_PG,
 DCB_FEATCFG_ATTR_PFC,
 DCB_FEATCFG_ATTR_APP,

 __DCB_FEATCFG_ATTR_ENUM_MAX,
 DCB_FEATCFG_ATTR_MAX = __DCB_FEATCFG_ATTR_ENUM_MAX - 1,
};

struct dcb_app_type {
  template <typename, int = 0> struct __BYPASSdcb_app_type {};
  template <typename, int> friend struct __BYPASSdcb_app_type;
 int ifindex;
 struct dcb_app app;
 struct list_head list;
 u8 dcbx;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int dcb_setapp(struct net_device *, struct dcb_app *);
u8 dcb_getapp(struct net_device *, struct dcb_app *);
int dcb_ieee_setapp(struct net_device *, struct dcb_app *);
int dcb_ieee_delapp(struct net_device *, struct dcb_app *);
u8 dcb_ieee_getapp_mask(struct net_device *, struct dcb_app *);

int dcbnl_ieee_notify(struct net_device *dev, int event, int cmd,
        u32 seq, u32 pid);
int dcbnl_cee_notify(struct net_device *dev, int event, int cmd,
       u32 seq, u32 pid);





struct dcbnl_rtnl_ops {
  template <typename, int = 0> struct __BYPASSdcbnl_rtnl_ops {};
  template <typename, int> friend struct __BYPASSdcbnl_rtnl_ops;

 int (*ieee_getets) (struct net_device *, struct ieee_ets *);
 int (*ieee_setets) (struct net_device *, struct ieee_ets *);
 int (*ieee_getmaxrate) (struct net_device *, struct ieee_maxrate *);
 int (*ieee_setmaxrate) (struct net_device *, struct ieee_maxrate *);
 int (*ieee_getpfc) (struct net_device *, struct ieee_pfc *);
 int (*ieee_setpfc) (struct net_device *, struct ieee_pfc *);
 int (*ieee_getapp) (struct net_device *, struct dcb_app *);
 int (*ieee_setapp) (struct net_device *, struct dcb_app *);
 int (*ieee_delapp) (struct net_device *, struct dcb_app *);
 int (*ieee_peer_getets) (struct net_device *, struct ieee_ets *);
 int (*ieee_peer_getpfc) (struct net_device *, struct ieee_pfc *);


 u8 (*getstate)(struct net_device *);
 u8 (*setstate)(struct net_device *, u8);
 void (*getpermhwaddr)(struct net_device *, u8 *);
 void (*setpgtccfgtx)(struct net_device *, int, u8, u8, u8, u8);
 void (*setpgbwgcfgtx)(struct net_device *, int, u8);
 void (*setpgtccfgrx)(struct net_device *, int, u8, u8, u8, u8);
 void (*setpgbwgcfgrx)(struct net_device *, int, u8);
 void (*getpgtccfgtx)(struct net_device *, int, u8 *, u8 *, u8 *, u8 *);
 void (*getpgbwgcfgtx)(struct net_device *, int, u8 *);
 void (*getpgtccfgrx)(struct net_device *, int, u8 *, u8 *, u8 *, u8 *);
 void (*getpgbwgcfgrx)(struct net_device *, int, u8 *);
 void (*setpfccfg)(struct net_device *, int, u8);
 void (*getpfccfg)(struct net_device *, int, u8 *);
 u8 (*setall)(struct net_device *);
 u8 (*getcap)(struct net_device *, int, u8 *);
 int (*getnumtcs)(struct net_device *, int, u8 *);
 int (*setnumtcs)(struct net_device *, int, u8);
 u8 (*getpfcstate)(struct net_device *);
 void (*setpfcstate)(struct net_device *, u8);
 void (*getbcncfg)(struct net_device *, int, u32 *);
 void (*setbcncfg)(struct net_device *, int, u32);
 void (*getbcnrp)(struct net_device *, int, u8 *);
 void (*setbcnrp)(struct net_device *, int, u8);
 u8 (*setapp)(struct net_device *, u8, u16, u8);
 u8 (*getapp)(struct net_device *, u8, u16);
 u8 (*getfeatcfg)(struct net_device *, int, u8 *);
 u8 (*setfeatcfg)(struct net_device *, int, u8);


 u8 (*getdcbx)(struct net_device *);
 u8 (*setdcbx)(struct net_device *, u8);


 int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *,
          u16 *);
 int (*peer_getapptable)(struct net_device *, struct dcb_app *);


 int (*cee_peer_getpg) (struct net_device *, struct cee_pg *);
 int (*cee_peer_getpfc) (struct net_device *, struct cee_pfc *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct taskstats {
  template <typename, int = 0> struct __BYPASStaskstats {};
  template <typename, int> friend struct __BYPASStaskstats;





 __u16 version;
 __u32 ac_exitcode;




 __u8 ac_flag;
 __u8 ac_nice;
 __u64 cpu_count __attribute__((aligned(8)));
 __u64 cpu_delay_total;






 __u64 blkio_count;
 __u64 blkio_delay_total;


 __u64 swapin_count;
 __u64 swapin_delay_total;







 __u64 cpu_run_real_total;







 __u64 cpu_run_virtual_total;




 char ac_comm[32];
 __u8 ac_sched __attribute__((aligned(8)));

 __u8 ac_pad[3];
 __u32 ac_uid __attribute__((aligned(8)));

 __u32 ac_gid;
 __u32 ac_pid;
 __u32 ac_ppid;
 __u32 ac_btime;
 __u64 ac_etime __attribute__((aligned(8)));

 __u64 ac_utime;
 __u64 ac_stime;
 __u64 ac_minflt;
 __u64 ac_majflt;
 __u64 coremem;



 __u64 virtmem;




 __u64 hiwater_rss;
 __u64 hiwater_vm;


 __u64 read_char;
 __u64 write_char;
 __u64 read_syscalls;
 __u64 write_syscalls;




 __u64 read_bytes;
 __u64 write_bytes;
 __u64 cancelled_write_bytes;

 __u64 nvcsw;
 __u64 nivcsw;


 __u64 ac_utimescaled;
 __u64 ac_stimescaled;
 __u64 cpu_scaled_run_real_total;


 __u64 freepages_count;
 __u64 freepages_delay_total;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 TASKSTATS_CMD_UNSPEC = 0,
 TASKSTATS_CMD_GET,
 TASKSTATS_CMD_NEW,
 __TASKSTATS_CMD_MAX,
};



enum {
 TASKSTATS_TYPE_UNSPEC = 0,
 TASKSTATS_TYPE_PID,
 TASKSTATS_TYPE_TGID,
 TASKSTATS_TYPE_STATS,
 TASKSTATS_TYPE_AGGR_PID,
 TASKSTATS_TYPE_AGGR_TGID,
 TASKSTATS_TYPE_NULL,
 __TASKSTATS_TYPE_MAX,
};



enum {
 TASKSTATS_CMD_ATTR_UNSPEC = 0,
 TASKSTATS_CMD_ATTR_PID,
 TASKSTATS_CMD_ATTR_TGID,
 TASKSTATS_CMD_ATTR_REGISTER_CPUMASK,
 TASKSTATS_CMD_ATTR_DEREGISTER_CPUMASK,
 __TASKSTATS_CMD_ATTR_MAX,
};
struct cgroupstats {
  template <typename, int = 0> struct __BYPASScgroupstats {};
  template <typename, int> friend struct __BYPASScgroupstats;
 __u64 nr_sleeping;
 __u64 nr_running;
 __u64 nr_stopped;
 __u64 nr_uninterruptible;

 __u64 nr_io_wait;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







enum {
 CGROUPSTATS_CMD_UNSPEC = __TASKSTATS_CMD_MAX,
 CGROUPSTATS_CMD_GET,
 CGROUPSTATS_CMD_NEW,
 __CGROUPSTATS_CMD_MAX,
};



enum {
 CGROUPSTATS_TYPE_UNSPEC = 0,
 CGROUPSTATS_TYPE_CGROUP_STATS,
 __CGROUPSTATS_TYPE_MAX,
};



enum {
 CGROUPSTATS_CMD_ATTR_UNSPEC = 0,
 CGROUPSTATS_CMD_ATTR_FD,
 __CGROUPSTATS_CMD_ATTR_MAX,
};
struct ptr_heap {
  template <typename, int = 0> struct __BYPASSptr_heap {};
  template <typename, int> friend struct __BYPASSptr_heap;
 void **ptrs;
 int max;
 int size;
 int (*gt)(void *, void *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern int heap_init(struct ptr_heap *heap, size_t size, gfp_t gfp_mask,
       int (*gt)(void *, void *));





void heap_free(struct ptr_heap *heap);
extern void *heap_insert(struct ptr_heap *heap, void *p);

struct idr_layer {
  template <typename, int = 0> struct __BYPASSidr_layer {};
  template <typename, int> friend struct __BYPASSidr_layer;
 int prefix;
 unsigned long bitmap[((((1 << 8)) + (8 * sizeof(long)) - 1) / (8 * sizeof(long)))];
 struct idr_layer *ary[1<<8];
 int count;
 int layer;
 struct callback_head callback_head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct idr {
  template <typename, int = 0> struct __BYPASSidr {};
  template <typename, int> friend struct __BYPASSidr;
 struct idr_layer *hint;
 struct idr_layer *top;
 struct idr_layer *id_free;
 int layers;
 int id_free_cnt;
 int cur;
 spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
void *idr_find_slowpath(struct idr *idp, int id);
void idr_preload(gfp_t gfp_mask);
int idr_alloc(struct idr *idp, void *ptr, int start, int end, gfp_t gfp_mask);
int idr_alloc_cyclic(struct idr *idr, void *ptr, int start, int end, gfp_t gfp_mask);
int idr_for_each(struct idr *idp,
   int (*fn)(int id, void *p, void *data), void *data);
void *idr_get_next(struct idr *idp, int *nextid);
void *idr_replace(struct idr *idp, void *ptr, int id);
void idr_remove(struct idr *idp, int id);
void idr_free(struct idr *idp, int id);
void idr_destroy(struct idr *idp);
void idr_init(struct idr *idp);







static inline void idr_preload_end(void)
{
 __asm__ __volatile__("": : :"memory");
}
static inline void *idr_find(struct idr *idr, int id)
{
 struct idr_layer *hint = (idr->hint);

 if (hint && (id & ~((1 << 8)-1)) == hint->prefix)
  return (hint->ary[id & ((1 << 8)-1)]);

 return idr_find_slowpath(idr, id);
}
int __idr_pre_get(struct idr *idp, gfp_t gfp_mask);
int __idr_get_new_above(struct idr *idp, void *ptr, int starting_id, int *id);
void __idr_remove_all(struct idr *idp);
static inline int idr_pre_get(struct idr *idp, gfp_t gfp_mask)
{
 return __idr_pre_get(idp, gfp_mask);
}
static inline int idr_get_new_above(struct idr *idp, void *ptr,
       int starting_id, int *id)
{
 return __idr_get_new_above(idp, ptr, starting_id, id);
}
static inline int idr_get_new(struct idr *idp, void *ptr, int *id)
{
 return __idr_get_new_above(idp, ptr, 0, id);
}
static inline void idr_remove_all(struct idr *idp)
{
 __idr_remove_all(idp);
}
struct ida_bitmap {
  template <typename, int = 0> struct __BYPASSida_bitmap {};
  template <typename, int> friend struct __BYPASSida_bitmap;
 long nr_busy;
 unsigned long bitmap[(128 / sizeof(long) - 1)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ida {
  template <typename, int = 0> struct __BYPASSida {};
  template <typename, int> friend struct __BYPASSida;
 struct idr idr;
 struct ida_bitmap *free_bitmap;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




int ida_pre_get(struct ida *ida, gfp_t gfp_mask);
int ida_get_new_above(struct ida *ida, int starting_id, int *p_id);
void ida_remove(struct ida *ida, int id);
void ida_destroy(struct ida *ida);
void ida_init(struct ida *ida);

int ida_simple_get(struct ida *ida, unsigned int start, unsigned int end,
     gfp_t gfp_mask);
void ida_simple_remove(struct ida *ida, unsigned int id);
static inline int ida_get_new(struct ida *ida, int *p_id)
{
 return ida_get_new_above(ida, 0, p_id);
}

void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) idr_init_cache(void);


struct inode;
struct dentry;

struct xattr_handler {
  template <typename, int = 0> struct __BYPASSxattr_handler {};
  template <typename, int> friend struct __BYPASSxattr_handler;
 char *prefix;
 int flags;
 size_t (*list)(struct dentry *dentry, char *list, size_t list_size,
         char *name, size_t name_len, int handler_flags);
 int (*get)(struct dentry *dentry, char *name, void *buffer,
     size_t size, int handler_flags);
 int (*set)(struct dentry *dentry, char *name, void *buffer,
     size_t size, int flags, int handler_flags);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct xattr {
  template <typename, int = 0> struct __BYPASSxattr {};
  template <typename, int> friend struct __BYPASSxattr;
 char *name;
 void *value;
 size_t value_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

ssize_t xattr_getsecurity(struct inode *, char *, void *, size_t);
ssize_t vfs_getxattr(struct dentry *, char *, void *, size_t);
ssize_t vfs_listxattr(struct dentry *d, char *list, size_t size);
int __vfs_setxattr_noperm(struct dentry *, char *, void *, size_t, int);
int vfs_setxattr(struct dentry *, char *, void *, size_t, int);
int vfs_removexattr(struct dentry *, char *);

ssize_t generic_getxattr(struct dentry *dentry, char *name, void *buffer, size_t size);
ssize_t generic_listxattr(struct dentry *dentry, char *buffer, size_t buffer_size);
int generic_setxattr(struct dentry *dentry, char *name, void *value, size_t size, int flags);
int generic_removexattr(struct dentry *dentry, char *name);
ssize_t vfs_getxattr_alloc(struct dentry *dentry, char *name,
      char **xattr_value, size_t size, gfp_t flags);
int vfs_xattr_cmp(struct dentry *dentry, char *xattr_name,
    char *value, size_t size, gfp_t flags);

struct simple_xattrs {
  template <typename, int = 0> struct __BYPASSsimple_xattrs {};
  template <typename, int> friend struct __BYPASSsimple_xattrs;
 struct list_head head;
 spinlock_t lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct simple_xattr {
  template <typename, int = 0> struct __BYPASSsimple_xattr {};
  template <typename, int> friend struct __BYPASSsimple_xattr;
 struct list_head list;
 char *name;
 size_t size;
 char value[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline void simple_xattrs_init(struct simple_xattrs *xattrs)
{
 INIT_LIST_HEAD(&xattrs->head);
 ;
}





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1936_0 {
  typedef TJP__ZN9list_head4nextE_1936_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1936(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1936_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1937_0 {
  typedef TJP__ZN9list_head4nextE_1937_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1937(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1937_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_1939_0 {
  typedef TJP__ZN9list_head4nextE_1939_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_1939(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_1939_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline void simple_xattrs_free(struct simple_xattrs *xattrs)
{
 struct simple_xattr *xattr, *node;

 for (xattr = ({ typeof( ((typeof(*xattr) *)0)->list ) *__mptr = (__get__ZN9list_head4nextE_1936(&(&xattrs->head)->next)); (typeof(*xattr) *)( (char *)__mptr - ((size_t) &((typeof(*xattr) *)0)->list) );}), node = ({ typeof( ((typeof(*(xattr)) *)0)->list ) *__mptr = (__get__ZN9list_head4nextE_1937(&(xattr)->list.next)); (typeof(*(xattr)) *)( (char *)__mptr - ((size_t) &((typeof(*(xattr)) *)0)->list) );}); &xattr->list != (&xattrs->head); xattr = node, node = ({ typeof( ((typeof(*(node)) *)0)->list ) *__mptr = (__get__ZN9list_head4nextE_1939(&(node)->list.next)); (typeof(*(node)) *)( (char *)__mptr - ((size_t) &((typeof(*(node)) *)0)->list) );})) {
  kfree(xattr->name);
  kfree(xattr);
 }
}

struct simple_xattr *simple_xattr_alloc( void *value, size_t size);
int simple_xattr_get(struct simple_xattrs *xattrs, char *name,
       void *buffer, size_t size);
int simple_xattr_set(struct simple_xattrs *xattrs, char *name,
       void *value, size_t size, int flags);
int simple_xattr_remove(struct simple_xattrs *xattrs, char *name);
ssize_t simple_xattr_list(struct simple_xattrs *xattrs, char *buffer,
     size_t size);
void simple_xattr_list_add(struct simple_xattrs *xattrs,
      struct simple_xattr *new_xattr);

struct percpu_ref;
typedef void (percpu_ref_func_t)(struct percpu_ref *);

struct percpu_ref {
  template <typename, int = 0> struct __BYPASSpercpu_ref {};
  template <typename, int> friend struct __BYPASSpercpu_ref;
 atomic_t count;






 unsigned *pcpu_count;
 percpu_ref_func_t *release;
 percpu_ref_func_t *confirm_kill;
 struct callback_head rcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int percpu_ref_init(struct percpu_ref *ref,
     percpu_ref_func_t *release);
void percpu_ref_cancel_init(struct percpu_ref *ref);
void percpu_ref_kill_and_confirm(struct percpu_ref *ref,
     percpu_ref_func_t *confirm_kill);
static inline void percpu_ref_kill(struct percpu_ref *ref)
{
 return percpu_ref_kill_and_confirm(ref, 0);
}
static inline void percpu_ref_get(struct percpu_ref *ref)
{
 unsigned *pcpu_count;

 ;

 pcpu_count = (ref->pcpu_count);

 if (__builtin_expect(!!((((unsigned long) pcpu_count) & ((1 << 2) - 1)) == 0), 1))
  do { do { void *__vpp_verify = (typeof((&(((*pcpu_count)))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof(((*pcpu_count)))) { case 1: do { typedef typeof((((*pcpu_count)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*pcpu_count))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((((*pcpu_count)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*pcpu_count))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((((*pcpu_count)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*pcpu_count))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((((*pcpu_count)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*pcpu_count))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else
  ;

 ;
}
static inline bool percpu_ref_tryget(struct percpu_ref *ref)
{
 unsigned *pcpu_count;
 int ret = _false;

 ;

 pcpu_count = (ref->pcpu_count);

 if (__builtin_expect(!!((((unsigned long) pcpu_count) & ((1 << 2) - 1)) == 0), 1)) {
  do { do { void *__vpp_verify = (typeof((&(((*pcpu_count)))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof(((*pcpu_count)))) { case 1: do { typedef typeof((((*pcpu_count)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*pcpu_count))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((((*pcpu_count)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*pcpu_count))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((((*pcpu_count)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*pcpu_count))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((((*pcpu_count)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*pcpu_count))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*pcpu_count)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
  ret = _true;
 }

 ;

 return ret;
}
static inline void percpu_ref_put(struct percpu_ref *ref)
{
 unsigned *pcpu_count;

 ;

 pcpu_count = (ref->pcpu_count);

 if (__builtin_expect(!!((((unsigned long) pcpu_count) & ((1 << 2) - 1)) == 0), 1))
  do { do { void *__vpp_verify = (typeof((&((((*pcpu_count))))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((((*pcpu_count))))) { case 1: do { typedef typeof(((((*pcpu_count))))) pao_T__; int pao_ID__ = (__builtin_constant_p((-(typeof((*pcpu_count)))(1))) && (((-(typeof((*pcpu_count)))(1))) == 1 || ((-(typeof((*pcpu_count)))(1))) == -1)) ? (int)((-(typeof((*pcpu_count)))(1))) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((-(typeof((*pcpu_count)))(1))); (void)pao_tmp__; } switch (sizeof(((((*pcpu_count)))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "qi" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "ri" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "ri" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "re" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof(((((*pcpu_count))))) pao_T__; int pao_ID__ = (__builtin_constant_p((-(typeof((*pcpu_count)))(1))) && (((-(typeof((*pcpu_count)))(1))) == 1 || ((-(typeof((*pcpu_count)))(1))) == -1)) ? (int)((-(typeof((*pcpu_count)))(1))) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((-(typeof((*pcpu_count)))(1))); (void)pao_tmp__; } switch (sizeof(((((*pcpu_count)))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "qi" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "ri" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "ri" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "re" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof(((((*pcpu_count))))) pao_T__; int pao_ID__ = (__builtin_constant_p((-(typeof((*pcpu_count)))(1))) && (((-(typeof((*pcpu_count)))(1))) == 1 || ((-(typeof((*pcpu_count)))(1))) == -1)) ? (int)((-(typeof((*pcpu_count)))(1))) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((-(typeof((*pcpu_count)))(1))); (void)pao_tmp__; } switch (sizeof(((((*pcpu_count)))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "qi" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "ri" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "ri" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "re" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof(((((*pcpu_count))))) pao_T__; int pao_ID__ = (__builtin_constant_p((-(typeof((*pcpu_count)))(1))) && (((-(typeof((*pcpu_count)))(1))) == 1 || ((-(typeof((*pcpu_count)))(1))) == -1)) ? (int)((-(typeof((*pcpu_count)))(1))) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((-(typeof((*pcpu_count)))(1))); (void)pao_tmp__; } switch (sizeof(((((*pcpu_count)))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "qi" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "ri" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "ri" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count)))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((((*pcpu_count))))) : "re" ((pao_T__)((-(typeof((*pcpu_count)))(1))))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
 else if (__builtin_expect(!!(1), 0))
  ref->release(ref);

 ;
}



struct cgroupfs_root;
struct cgroup_subsys;
struct inode;
struct cgroup;
struct css_id;
struct eventfd_ctx;

extern int cgroup_init_early(void);
extern int cgroup_init(void);
extern void cgroup_fork(struct task_struct *p);
extern void cgroup_post_fork(struct task_struct *p);
extern void cgroup_exit(struct task_struct *p, int run_callbacks);
extern int cgroupstats_build(struct cgroupstats *stats,
    struct dentry *dentry);
extern int cgroup_load_subsys(struct cgroup_subsys *ss);
extern void cgroup_unload_subsys(struct cgroup_subsys *ss);

extern int proc_cgroup_show(struct seq_file *, void *);







enum cgroup_subsys_id {







cpuset_subsys_id,







cpu_cgroup_subsys_id,



cpuacct_subsys_id,



mem_cgroup_subsys_id,



devices_subsys_id,



freezer_subsys_id,







blkio_subsys_id,



perf_subsys_id,







hugetlb_subsys_id,

 CGROUP_BUILTIN_SUBSYS_COUNT,

 __CGROUP_SUBSYS_TEMP_PLACEHOLDER = CGROUP_BUILTIN_SUBSYS_COUNT - 1,


net_cls_subsys_id,
net_prio_subsys_id,

 CGROUP_SUBSYS_COUNT,
};



struct cgroup_subsys_state {
  template <typename, int = 0> struct __BYPASScgroup_subsys_state {};
  template <typename, int> friend struct __BYPASScgroup_subsys_state;

 struct cgroup *cgroup;


 struct cgroup_subsys *ss;


 struct percpu_ref refcnt;


 struct cgroup_subsys_state *parent;

 unsigned long flags;

 struct css_id *id;


 struct callback_head callback_head;
 struct work_struct destroy_work;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum {
 CSS_ROOT = (1 << 0),
 CSS_ONLINE = (1 << 1),
};







static inline void css_get(struct cgroup_subsys_state *css)
{

 if (!(css->flags & CSS_ROOT))
  percpu_ref_get(&css->refcnt);
}
static inline bool css_tryget(struct cgroup_subsys_state *css)
{
 if (css->flags & CSS_ROOT)
  return _true;
 return percpu_ref_tryget(&css->refcnt);
}







static inline void css_put(struct cgroup_subsys_state *css)
{
 if (!(css->flags & CSS_ROOT))
  percpu_ref_put(&css->refcnt);
}


enum {

 CGRP_DEAD,




 CGRP_RELEASABLE,

 CGRP_NOTIFY_ON_RELEASE,





 CGRP_CPUSET_CLONE_CHILDREN,

 CGRP_SANE_BEHAVIOR,
};

struct cgroup_name {
  template <typename, int = 0> struct __BYPASScgroup_name {};
  template <typename, int> friend struct __BYPASScgroup_name;
 struct callback_head callback_head;
 char name[];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct cgroup {
  template <typename, int = 0> struct __BYPASScgroup {};
  template <typename, int> friend struct __BYPASScgroup;
 unsigned long flags;
 int id;


 int nr_css;





 struct list_head sibling;
 struct list_head children;
 struct list_head files;

 struct cgroup *parent;
 struct dentry *dentry;







 u64 serial_nr;
 struct cgroup_name *name;


 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];

 struct cgroupfs_root *root;





 struct list_head cset_links;






 struct list_head release_list;





 struct list_head pidlists;
 struct mutex pidlist_mutex;


 struct cgroup_subsys_state dummy_css;


 struct callback_head callback_head;
 struct work_struct destroy_work;


 struct list_head event_list;
 spinlock_t event_list_lock;


 struct simple_xattrs xattrs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




enum {
 CGRP_ROOT_SANE_BEHAVIOR = (1 << 0),

 CGRP_ROOT_NOPREFIX = (1 << 1),
 CGRP_ROOT_XATTR = (1 << 2),


 CGRP_ROOT_OPTION_MASK = (1 << 16) - 1,

 CGRP_ROOT_SUBSYS_BOUND = (1 << 16),
};






struct cgroupfs_root {
  template <typename, int = 0> struct __BYPASScgroupfs_root {};
  template <typename, int> friend struct __BYPASScgroupfs_root;
 struct super_block *sb;


 unsigned long subsys_mask;


 int hierarchy_id;


 struct list_head subsys_list;


 struct cgroup top_cgroup;


 int number_of_cgroups;


 struct list_head root_list;


 unsigned long flags;


 struct idr cgroup_idr;


 char release_agent_path[4096];


 char name[64];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct css_set {
  template <typename, int = 0> struct __BYPASScss_set {};
  template <typename, int> friend struct __BYPASScss_set;


 atomic_t refcount;





 struct hlist_node hlist;





 struct list_head tasks;





 struct list_head cgrp_links;







 struct cgroup_subsys_state *subsys[CGROUP_SUBSYS_COUNT];


 struct callback_head callback_head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct cgroup_map_cb {
  template <typename, int = 0> struct __BYPASScgroup_map_cb {};
  template <typename, int> friend struct __BYPASScgroup_map_cb;
 int (*fill)(struct cgroup_map_cb *cb, char *key, u64 value);
 void *state;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 CFTYPE_ONLY_ON_ROOT = (1 << 0),
 CFTYPE_NOT_ON_ROOT = (1 << 1),
 CFTYPE_INSANE = (1 << 2),
 CFTYPE_NO_PREFIX = (1 << 3),
};



struct cftype {
  template <typename, int = 0> struct __BYPASScftype {};
  template <typename, int> friend struct __BYPASScftype;





 char name[64];
 int _private;




 umode_t mode;





 size_t max_write_len;


 unsigned int flags;





 struct cgroup_subsys *ss;

 int (*open)(struct inode *inode, struct file *file);
 ssize_t (*read)(struct cgroup_subsys_state *css, struct cftype *cft,
   struct file *file,
   char *buf, size_t nbytes, loff_t *ppos);




 u64 (*read_u64)(struct cgroup_subsys_state *css, struct cftype *cft);



 s64 (*read_s64)(struct cgroup_subsys_state *css, struct cftype *cft);






 int (*read_map)(struct cgroup_subsys_state *css, struct cftype *cft,
   struct cgroup_map_cb *cb);




 int (*read_seq_string)(struct cgroup_subsys_state *css,
          struct cftype *cft, struct seq_file *m);

 ssize_t (*write)(struct cgroup_subsys_state *css, struct cftype *cft,
    struct file *file,
    char *buf, size_t nbytes, loff_t *ppos);






 int (*write_u64)(struct cgroup_subsys_state *css, struct cftype *cft,
    u64 val);



 int (*write_s64)(struct cgroup_subsys_state *css, struct cftype *cft,
    s64 val);






 int (*write_string)(struct cgroup_subsys_state *css, struct cftype *cft,
       char *buffer);






 int (*trigger)(struct cgroup_subsys_state *css, unsigned int event);

 int (*release)(struct inode *inode, struct file *file);







 int (*register_event)(struct cgroup_subsys_state *css,
         struct cftype *cft, struct eventfd_ctx *eventfd,
         char *args);






 void (*unregister_event)(struct cgroup_subsys_state *css,
     struct cftype *cft,
     struct eventfd_ctx *eventfd);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct cftype_set {
  template <typename, int = 0> struct __BYPASScftype_set {};
  template <typename, int> friend struct __BYPASScftype_set;
 struct list_head node;
 struct cftype *cfts;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





static inline bool cgroup_sane_behavior( struct cgroup *cgrp)
{
 return cgrp->root->flags & CGRP_ROOT_SANE_BEHAVIOR;
}


static inline char *cgroup_name( struct cgroup *cgrp)
{
 return (cgrp->name)->name;
}

int cgroup_add_cftypes(struct cgroup_subsys *ss, struct cftype *cfts);
int cgroup_rm_cftypes(struct cftype *cfts);

bool cgroup_is_descendant(struct cgroup *cgrp, struct cgroup *ancestor);

int cgroup_path( struct cgroup *cgrp, char *buf, int buflen);
int task_cgroup_path(struct task_struct *task, char *buf, size_t buflen);

int cgroup_task_count( struct cgroup *cgrp);





struct cgroup_taskset;
struct task_struct *cgroup_taskset_first(struct cgroup_taskset *tset);
struct task_struct *cgroup_taskset_next(struct cgroup_taskset *tset);
struct cgroup_subsys_state *cgroup_taskset_cur_css(struct cgroup_taskset *tset,
         int subsys_id);
int cgroup_taskset_size(struct cgroup_taskset *tset);
struct cgroup_subsys {
  template <typename, int = 0> struct __BYPASScgroup_subsys {};
  template <typename, int> friend struct __BYPASScgroup_subsys;
 struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *parent_css);
 int (*css_online)(struct cgroup_subsys_state *css);
 void (*css_offline)(struct cgroup_subsys_state *css);
 void (*css_free)(struct cgroup_subsys_state *css);

 int (*can_attach)(struct cgroup_subsys_state *css,
     struct cgroup_taskset *tset);
 void (*cancel_attach)(struct cgroup_subsys_state *css,
         struct cgroup_taskset *tset);
 void (*attach)(struct cgroup_subsys_state *css,
         struct cgroup_taskset *tset);
 void (*fork)(struct task_struct *task);
 void (*exit)(struct cgroup_subsys_state *css,
       struct cgroup_subsys_state *old_css,
       struct task_struct *task);
 void (*bind)(struct cgroup_subsys_state *root_css);

 int subsys_id;
 int disabled;
 int early_init;
 bool broken_hierarchy;
 bool warned_broken_hierarchy;


 char *name;





 struct cgroupfs_root *root;
 struct list_head sibling;


 struct list_head cftsets;


 struct cftype *base_cftypes;
 struct cftype_set base_cftset;


 struct module *module;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};









extern struct cgroup_subsys cpuset_subsys;







extern struct cgroup_subsys cpu_cgroup_subsys;



extern struct cgroup_subsys cpuacct_subsys;



extern struct cgroup_subsys mem_cgroup_subsys;



extern struct cgroup_subsys devices_subsys;



extern struct cgroup_subsys freezer_subsys;







extern struct cgroup_subsys blkio_subsys;



extern struct cgroup_subsys perf_subsys;







extern struct cgroup_subsys hugetlb_subsys;
static inline
struct cgroup_subsys_state *css_parent(struct cgroup_subsys_state *css)
{
 return css->parent;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct7cgroupsE_1961_0 {
  typedef TJP__ZN11task_struct7cgroupsE_1961_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline css_set * __get__ZN11task_struct7cgroupsE_1961(css_set * *source) {
  ::css_set *__result_buffer;
  typedef TJP__ZN11task_struct7cgroupsE_1961_0< ::css_set *, ::task_struct , ::css_set * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::css_set *&)__result_buffer;
}
static inline struct css_set *task_css_set(struct task_struct *task)
{
 return (__get__ZN11task_struct7cgroupsE_1961(&(task)->cgroups));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct7cgroupsE_1963_0 {
  typedef TJP__ZN11task_struct7cgroupsE_1963_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline css_set * __get__ZN11task_struct7cgroupsE_1963(css_set * *source) {
  ::css_set *__result_buffer;
  typedef TJP__ZN11task_struct7cgroupsE_1963_0< ::css_set *, ::task_struct , ::css_set * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::css_set *&)__result_buffer;
}
static inline struct cgroup_subsys_state *task_css(struct task_struct *task,
         int subsys_id)
{
 return (__get__ZN11task_struct7cgroupsE_1963(&((task))->cgroups))->subsys[(subsys_id)];
}

static inline struct cgroup *task_cgroup(struct task_struct *task,
      int subsys_id)
{
 return task_css(task, subsys_id)->cgroup;
}

struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *pos,
        struct cgroup_subsys_state *parent);

struct cgroup_subsys_state *css_from_id(int id, struct cgroup_subsys *ss);
struct cgroup_subsys_state *
css_next_descendant_pre(struct cgroup_subsys_state *pos,
   struct cgroup_subsys_state *css);

struct cgroup_subsys_state *
css_rightmost_descendant(struct cgroup_subsys_state *pos);
struct cgroup_subsys_state *
css_next_descendant_post(struct cgroup_subsys_state *pos,
    struct cgroup_subsys_state *css);
struct css_task_iter {
  template <typename, int = 0> struct __BYPASScss_task_iter {};
  template <typename, int> friend struct __BYPASScss_task_iter;
 struct cgroup_subsys_state *origin_css;
 struct list_head *cset_link;
 struct list_head *task;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void css_task_iter_start(struct cgroup_subsys_state *css,
    struct css_task_iter *it);
struct task_struct *css_task_iter_next(struct css_task_iter *it);
void css_task_iter_end(struct css_task_iter *it);

int css_scan_tasks(struct cgroup_subsys_state *css,
     bool (*test)(struct task_struct *, void *),
     void (*process)(struct task_struct *, void *),
     void *data, struct ptr_heap *heap);

int cgroup_attach_task_all(struct task_struct *from, struct task_struct *);
int cgroup_transfer_tasks(struct cgroup *to, struct cgroup *from);

struct cgroup_subsys_state *css_from_dir(struct dentry *dentry,
      struct cgroup_subsys *ss);





struct netprio_map {
  template <typename, int = 0> struct __BYPASSnetprio_map {};
  template <typename, int> friend struct __BYPASSnetprio_map;
 struct callback_head rcu;
 u32 priomap_len;
 u32 priomap[];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void sock_update_netprioidx(struct sock *sk);
static inline u32 task_netprioidx(struct task_struct *p)
{
 struct cgroup_subsys_state *css;
 u32 idx = 0;

 ;
 css = task_css(p, net_prio_subsys_id);
 if (css)
  idx = css->cgroup->id;
 ;
 return idx;
}


















struct linux_binprm;
struct cred;
struct rlimit;
struct siginfo;
struct sem_array;
struct sembuf;
struct kern_ipc_perm;
struct audit_context;
struct super_block;
struct inode;
struct dentry;
struct file;
struct vfsmount;
struct path;
struct qstr;
struct nameidata;
struct iattr;
struct fown_struct;
struct file_operations;
struct shmid_kernel;
struct msg_msg;
struct msg_queue;
struct xattr;
struct xfrm_sec_ctx;
struct mm_struct;
struct ctl_table;
struct audit_krule;
struct user_namespace;
struct timezone;





extern int cap_capable( struct cred *cred, struct user_namespace *ns,
         int cap, int audit);
extern int cap_settime( struct timespec *ts, struct timezone *tz);
extern int cap_ptrace_access_check(struct task_struct *child, unsigned int mode);
extern int cap_ptrace_traceme(struct task_struct *parent);
extern int cap_capget(struct task_struct *target, kernel_cap_t *effective, kernel_cap_t *inheritable, kernel_cap_t *permitted);
extern int cap_capset(struct cred *_new, struct cred *old,
        kernel_cap_t *effective,
        kernel_cap_t *inheritable,
        kernel_cap_t *permitted);
extern int cap_bprm_set_creds(struct linux_binprm *bprm);
extern int cap_bprm_secureexec(struct linux_binprm *bprm);
extern int cap_inode_setxattr(struct dentry *dentry, char *name,
         void *value, size_t size, int flags);
extern int cap_inode_removexattr(struct dentry *dentry, char *name);
extern int cap_inode_need_killpriv(struct dentry *dentry);
extern int cap_inode_killpriv(struct dentry *dentry);
extern int cap_mmap_addr(unsigned long addr);
extern int cap_mmap_file(struct file *file, unsigned long reqprot,
    unsigned long prot, unsigned long flags);
extern int cap_task_fix_setuid(struct cred *_new, struct cred *old, int flags);
extern int cap_task_prctl(int option, unsigned long arg2, unsigned long arg3,
     unsigned long arg4, unsigned long arg5);
extern int cap_task_setscheduler(struct task_struct *p);
extern int cap_task_setioprio(struct task_struct *p, int ioprio);
extern int cap_task_setnice(struct task_struct *p, int nice);
extern int cap_vm_enough_memory(struct mm_struct *mm, long pages);

struct msghdr;
struct sk_buff;
struct sock;
struct sockaddr;
struct socket;
struct flowi;
struct dst_entry;
struct xfrm_selector;
struct xfrm_policy;
struct xfrm_state;
struct xfrm_user_sec_ctx;
struct seq_file;

extern int cap_netlink_send(struct sock *sk, struct sk_buff *skb);

void reset_security_ops(void);


extern unsigned long mmap_min_addr;
extern unsigned long dac_mmap_min_addr;
struct sched_param;
struct request_sock;
extern int mmap_min_addr_handler(struct ctl_table *table, int write,
     void *buffer, size_t *lenp, loff_t *ppos);



typedef int (*initxattrs) (struct inode *inode,
      struct xattr *xattr_array, void *fs_data);



struct security_mnt_opts {
  template <typename, int = 0> struct __BYPASSsecurity_mnt_opts {};
  template <typename, int> friend struct __BYPASSsecurity_mnt_opts;
 char **mnt_opts;
 int *mnt_opts_flags;
 int num_mnt_opts;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void security_init_mnt_opts(struct security_mnt_opts *opts)
{
 opts->mnt_opts = 0;
 opts->mnt_opts_flags = 0;
 opts->num_mnt_opts = 0;
}

static inline void security_free_mnt_opts(struct security_mnt_opts *opts)
{
 int i;
 if (opts->mnt_opts)
  for (i = 0; i < opts->num_mnt_opts; i++)
   kfree(opts->mnt_opts[i]);
 kfree(opts->mnt_opts);
 opts->mnt_opts = 0;
 kfree(opts->mnt_opts_flags);
 opts->mnt_opts_flags = 0;
 opts->num_mnt_opts = 0;
}
struct security_operations {
  template <typename, int = 0> struct __BYPASSsecurity_operations {};
  template <typename, int> friend struct __BYPASSsecurity_operations;
 char name[10 + 1];

 int (*ptrace_access_check) (struct task_struct *child, unsigned int mode);
 int (*ptrace_traceme) (struct task_struct *parent);
 int (*capget) (struct task_struct *target,
         kernel_cap_t *effective,
         kernel_cap_t *inheritable, kernel_cap_t *permitted);
 int (*capset) (struct cred *_new,
         struct cred *old,
         kernel_cap_t *effective,
         kernel_cap_t *inheritable,
         kernel_cap_t *permitted);
 int (*capable) ( struct cred *cred, struct user_namespace *ns,
   int cap, int audit);
 int (*quotactl) (int cmds, int type, int id, struct super_block *sb);
 int (*quota_on) (struct dentry *dentry);
 int (*syslog) (int type);
 int (*settime) ( struct timespec *ts, struct timezone *tz);
 int (*vm_enough_memory) (struct mm_struct *mm, long pages);

 int (*bprm_set_creds) (struct linux_binprm *bprm);
 int (*bprm_check_security) (struct linux_binprm *bprm);
 int (*bprm_secureexec) (struct linux_binprm *bprm);
 void (*bprm_committing_creds) (struct linux_binprm *bprm);
 void (*bprm_committed_creds) (struct linux_binprm *bprm);

 int (*sb_alloc_security) (struct super_block *sb);
 void (*sb_free_security) (struct super_block *sb);
 int (*sb_copy_data) (char *orig, char *copy);
 int (*sb_remount) (struct super_block *sb, void *data);
 int (*sb_kern_mount) (struct super_block *sb, int flags, void *data);
 int (*sb_show_options) (struct seq_file *m, struct super_block *sb);
 int (*sb_statfs) (struct dentry *dentry);
 int (*sb_mount) ( char *dev_name, struct path *path,
    char *type, unsigned long flags, void *data);
 int (*sb_umount) (struct vfsmount *mnt, int flags);
 int (*sb_pivotroot) (struct path *old_path,
        struct path *new_path);
 int (*sb_set_mnt_opts) (struct super_block *sb,
    struct security_mnt_opts *opts,
    unsigned long kern_flags,
    unsigned long *set_kern_flags);
 int (*sb_clone_mnt_opts) ( struct super_block *oldsb,
       struct super_block *newsb);
 int (*sb_parse_opts_str) (char *options, struct security_mnt_opts *opts);
 int (*dentry_init_security) (struct dentry *dentry, int mode,
     struct qstr *name, void **ctx,
     u32 *ctxlen);



 int (*path_unlink) (struct path *dir, struct dentry *dentry);
 int (*path_mkdir) (struct path *dir, struct dentry *dentry, umode_t mode);
 int (*path_rmdir) (struct path *dir, struct dentry *dentry);
 int (*path_mknod) (struct path *dir, struct dentry *dentry, umode_t mode,
      unsigned int dev);
 int (*path_truncate) (struct path *path);
 int (*path_symlink) (struct path *dir, struct dentry *dentry,
        char *old_name);
 int (*path_link) (struct dentry *old_dentry, struct path *new_dir,
     struct dentry *new_dentry);
 int (*path_rename) (struct path *old_dir, struct dentry *old_dentry,
       struct path *new_dir, struct dentry *new_dentry);
 int (*path_chmod) (struct path *path, umode_t mode);
 int (*path_chown) (struct path *path, kuid_t uid, kgid_t gid);
 int (*path_chroot) (struct path *path);


 int (*inode_alloc_security) (struct inode *inode);
 void (*inode_free_security) (struct inode *inode);
 int (*inode_init_security) (struct inode *inode, struct inode *dir,
        struct qstr *qstr, char **name,
        void **value, size_t *len);
 int (*inode_create) (struct inode *dir,
        struct dentry *dentry, umode_t mode);
 int (*inode_link) (struct dentry *old_dentry,
      struct inode *dir, struct dentry *new_dentry);
 int (*inode_unlink) (struct inode *dir, struct dentry *dentry);
 int (*inode_symlink) (struct inode *dir,
         struct dentry *dentry, char *old_name);
 int (*inode_mkdir) (struct inode *dir, struct dentry *dentry, umode_t mode);
 int (*inode_rmdir) (struct inode *dir, struct dentry *dentry);
 int (*inode_mknod) (struct inode *dir, struct dentry *dentry,
       umode_t mode, dev_t dev);
 int (*inode_rename) (struct inode *old_dir, struct dentry *old_dentry,
        struct inode *new_dir, struct dentry *new_dentry);
 int (*inode_readlink) (struct dentry *dentry);
 int (*inode_follow_link) (struct dentry *dentry, struct nameidata *nd);
 int (*inode_permission) (struct inode *inode, int mask);
 int (*inode_setattr) (struct dentry *dentry, struct iattr *attr);
 int (*inode_getattr) (struct vfsmount *mnt, struct dentry *dentry);
 int (*inode_setxattr) (struct dentry *dentry, char *name,
          void *value, size_t size, int flags);
 void (*inode_post_setxattr) (struct dentry *dentry, char *name,
         void *value, size_t size, int flags);
 int (*inode_getxattr) (struct dentry *dentry, char *name);
 int (*inode_listxattr) (struct dentry *dentry);
 int (*inode_removexattr) (struct dentry *dentry, char *name);
 int (*inode_need_killpriv) (struct dentry *dentry);
 int (*inode_killpriv) (struct dentry *dentry);
 int (*inode_getsecurity) ( struct inode *inode, char *name, void **buffer, bool alloc);
 int (*inode_setsecurity) (struct inode *inode, char *name, void *value, size_t size, int flags);
 int (*inode_listsecurity) (struct inode *inode, char *buffer, size_t buffer_size);
 void (*inode_getsecid) ( struct inode *inode, u32 *secid);

 int (*file_permission) (struct file *file, int mask);
 int (*file_alloc_security) (struct file *file);
 void (*file_free_security) (struct file *file);
 int (*file_ioctl) (struct file *file, unsigned int cmd,
      unsigned long arg);
 int (*mmap_addr) (unsigned long addr);
 int (*mmap_file) (struct file *file,
     unsigned long reqprot, unsigned long prot,
     unsigned long flags);
 int (*file_mprotect) (struct vm_area_struct *vma,
         unsigned long reqprot,
         unsigned long prot);
 int (*file_lock) (struct file *file, unsigned int cmd);
 int (*file_fcntl) (struct file *file, unsigned int cmd,
      unsigned long arg);
 int (*file_set_fowner) (struct file *file);
 int (*file_send_sigiotask) (struct task_struct *tsk,
        struct fown_struct *fown, int sig);
 int (*file_receive) (struct file *file);
 int (*file_open) (struct file *file, struct cred *cred);

 int (*task_create) (unsigned long clone_flags);
 void (*task_free) (struct task_struct *task);
 int (*cred_alloc_blank) (struct cred *cred, gfp_t gfp);
 void (*cred_free) (struct cred *cred);
 int (*cred_prepare)(struct cred *_new, struct cred *old,
       gfp_t gfp);
 void (*cred_transfer)(struct cred *_new, struct cred *old);
 int (*kernel_act_as)(struct cred *_new, u32 secid);
 int (*kernel_create_files_as)(struct cred *_new, struct inode *inode);
 int (*kernel_module_request)(char *kmod_name);
 int (*kernel_module_from_file)(struct file *file);
 int (*task_fix_setuid) (struct cred *_new, struct cred *old,
    int flags);
 int (*task_setpgid) (struct task_struct *p, pid_t pgid);
 int (*task_getpgid) (struct task_struct *p);
 int (*task_getsid) (struct task_struct *p);
 void (*task_getsecid) (struct task_struct *p, u32 *secid);
 int (*task_setnice) (struct task_struct *p, int nice);
 int (*task_setioprio) (struct task_struct *p, int ioprio);
 int (*task_getioprio) (struct task_struct *p);
 int (*task_setrlimit) (struct task_struct *p, unsigned int resource,
   struct rlimit *new_rlim);
 int (*task_setscheduler) (struct task_struct *p);
 int (*task_getscheduler) (struct task_struct *p);
 int (*task_movememory) (struct task_struct *p);
 int (*task_kill) (struct task_struct *p,
     struct siginfo *info, int sig, u32 secid);
 int (*task_wait) (struct task_struct *p);
 int (*task_prctl) (int option, unsigned long arg2,
      unsigned long arg3, unsigned long arg4,
      unsigned long arg5);
 void (*task_to_inode) (struct task_struct *p, struct inode *inode);

 int (*ipc_permission) (struct kern_ipc_perm *ipcp, short flag);
 void (*ipc_getsecid) (struct kern_ipc_perm *ipcp, u32 *secid);

 int (*msg_msg_alloc_security) (struct msg_msg *msg);
 void (*msg_msg_free_security) (struct msg_msg *msg);

 int (*msg_queue_alloc_security) (struct msg_queue *msq);
 void (*msg_queue_free_security) (struct msg_queue *msq);
 int (*msg_queue_associate) (struct msg_queue *msq, int msqflg);
 int (*msg_queue_msgctl) (struct msg_queue *msq, int cmd);
 int (*msg_queue_msgsnd) (struct msg_queue *msq,
     struct msg_msg *msg, int msqflg);
 int (*msg_queue_msgrcv) (struct msg_queue *msq,
     struct msg_msg *msg,
     struct task_struct *target,
     long type, int mode);

 int (*shm_alloc_security) (struct shmid_kernel *shp);
 void (*shm_free_security) (struct shmid_kernel *shp);
 int (*shm_associate) (struct shmid_kernel *shp, int shmflg);
 int (*shm_shmctl) (struct shmid_kernel *shp, int cmd);
 int (*shm_shmat) (struct shmid_kernel *shp,
     char *shmaddr, int shmflg);

 int (*sem_alloc_security) (struct sem_array *sma);
 void (*sem_free_security) (struct sem_array *sma);
 int (*sem_associate) (struct sem_array *sma, int semflg);
 int (*sem_semctl) (struct sem_array *sma, int cmd);
 int (*sem_semop) (struct sem_array *sma,
     struct sembuf *sops, unsigned nsops, int alter);

 int (*netlink_send) (struct sock *sk, struct sk_buff *skb);

 void (*d_instantiate) (struct dentry *dentry, struct inode *inode);

 int (*getprocattr) (struct task_struct *p, char *name, char **value);
 int (*setprocattr) (struct task_struct *p, char *name, void *value, size_t size);
 int (*ismaclabel) ( char *name);
 int (*secid_to_secctx) (u32 secid, char **secdata, u32 *seclen);
 int (*secctx_to_secid) ( char *secdata, u32 seclen, u32 *secid);
 void (*release_secctx) (char *secdata, u32 seclen);

 int (*inode_notifysecctx)(struct inode *inode, void *ctx, u32 ctxlen);
 int (*inode_setsecctx)(struct dentry *dentry, void *ctx, u32 ctxlen);
 int (*inode_getsecctx)(struct inode *inode, void **ctx, u32 *ctxlen);


 int (*unix_stream_connect) (struct sock *sock, struct sock *other, struct sock *newsk);
 int (*unix_may_send) (struct socket *sock, struct socket *other);

 int (*socket_create) (int family, int type, int protocol, int kern);
 int (*socket_post_create) (struct socket *sock, int family,
       int type, int protocol, int kern);
 int (*socket_bind) (struct socket *sock,
       struct sockaddr *address, int addrlen);
 int (*socket_connect) (struct socket *sock,
          struct sockaddr *address, int addrlen);
 int (*socket_listen) (struct socket *sock, int backlog);
 int (*socket_accept) (struct socket *sock, struct socket *newsock);
 int (*socket_sendmsg) (struct socket *sock,
          struct msghdr *msg, int size);
 int (*socket_recvmsg) (struct socket *sock,
          struct msghdr *msg, int size, int flags);
 int (*socket_getsockname) (struct socket *sock);
 int (*socket_getpeername) (struct socket *sock);
 int (*socket_getsockopt) (struct socket *sock, int level, int optname);
 int (*socket_setsockopt) (struct socket *sock, int level, int optname);
 int (*socket_shutdown) (struct socket *sock, int how);
 int (*socket_sock_rcv_skb) (struct sock *sk, struct sk_buff *skb);
 int (*socket_getpeersec_stream) (struct socket *sock, char *optval, int *optlen, unsigned len);
 int (*socket_getpeersec_dgram) (struct socket *sock, struct sk_buff *skb, u32 *secid);
 int (*sk_alloc_security) (struct sock *sk, int family, gfp_t priority);
 void (*sk_free_security) (struct sock *sk);
 void (*sk_clone_security) ( struct sock *sk, struct sock *newsk);
 void (*sk_getsecid) (struct sock *sk, u32 *secid);
 void (*sock_graft) (struct sock *sk, struct socket *parent);
 int (*inet_conn_request) (struct sock *sk, struct sk_buff *skb,
      struct request_sock *req);
 void (*inet_csk_clone) (struct sock *newsk, struct request_sock *req);
 void (*inet_conn_established) (struct sock *sk, struct sk_buff *skb);
 int (*secmark_relabel_packet) (u32 secid);
 void (*secmark_refcount_inc) (void);
 void (*secmark_refcount_dec) (void);
 void (*req_classify_flow) ( struct request_sock *req, struct flowi *fl);
 int (*tun_dev_alloc_security) (void **security);
 void (*tun_dev_free_security) (void *security);
 int (*tun_dev_create) (void);
 int (*tun_dev_attach_queue) (void *security);
 int (*tun_dev_attach) (struct sock *sk, void *security);
 int (*tun_dev_open) (void *security);
 void (*skb_owned_by) (struct sk_buff *skb, struct sock *sk);
 int (*key_alloc) (struct key *key, struct cred *cred, unsigned long flags);
 void (*key_free) (struct key *key);
 int (*key_permission) (key_ref_t key_ref,
          struct cred *cred,
          key_perm_t perm);
 int (*key_getsecurity)(struct key *key, char **_buffer);



 int (*audit_rule_init) (u32 field, u32 op, char *rulestr, void **lsmrule);
 int (*audit_rule_known) (struct audit_krule *krule);
 int (*audit_rule_match) (u32 secid, u32 field, u32 op, void *lsmrule,
     struct audit_context *actx);
 void (*audit_rule_free) (void *lsmrule);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};


extern int security_init(void);
extern int security_module_enable(struct security_operations *ops);
extern int register_security(struct security_operations *ops);
extern void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) security_fixup_ops(struct security_operations *ops);



int security_ptrace_access_check(struct task_struct *child, unsigned int mode);
int security_ptrace_traceme(struct task_struct *parent);
int security_capget(struct task_struct *target,
      kernel_cap_t *effective,
      kernel_cap_t *inheritable,
      kernel_cap_t *permitted);
int security_capset(struct cred *_new, struct cred *old,
      kernel_cap_t *effective,
      kernel_cap_t *inheritable,
      kernel_cap_t *permitted);
int security_quotactl(int cmds, int type, int id, struct super_block *sb);
int security_quota_on(struct dentry *dentry);
int security_syslog(int type);
int security_settime( struct timespec *ts, struct timezone *tz);
int security_vm_enough_memory_mm(struct mm_struct *mm, long pages);
int security_bprm_set_creds(struct linux_binprm *bprm);
int security_bprm_check(struct linux_binprm *bprm);
void security_bprm_committing_creds(struct linux_binprm *bprm);
void security_bprm_committed_creds(struct linux_binprm *bprm);
int security_bprm_secureexec(struct linux_binprm *bprm);
int security_sb_alloc(struct super_block *sb);
void security_sb_free(struct super_block *sb);
int security_sb_copy_data(char *orig, char *copy);
int security_sb_remount(struct super_block *sb, void *data);
int security_sb_kern_mount(struct super_block *sb, int flags, void *data);
int security_sb_show_options(struct seq_file *m, struct super_block *sb);
int security_sb_statfs(struct dentry *dentry);
int security_sb_mount( char *dev_name, struct path *path,
        char *type, unsigned long flags, void *data);
int security_sb_umount(struct vfsmount *mnt, int flags);
int security_sb_pivotroot(struct path *old_path, struct path *new_path);
int security_sb_set_mnt_opts(struct super_block *sb,
    struct security_mnt_opts *opts,
    unsigned long kern_flags,
    unsigned long *set_kern_flags);
int security_sb_clone_mnt_opts( struct super_block *oldsb,
    struct super_block *newsb);
int security_sb_parse_opts_str(char *options, struct security_mnt_opts *opts);
int security_dentry_init_security(struct dentry *dentry, int mode,
     struct qstr *name, void **ctx,
     u32 *ctxlen);

int security_inode_alloc(struct inode *inode);
void security_inode_free(struct inode *inode);
int security_inode_init_security(struct inode *inode, struct inode *dir,
     struct qstr *qstr,
     initxattrs initxattrs, void *fs_data);
int security_old_inode_init_security(struct inode *inode, struct inode *dir,
         struct qstr *qstr, char **name,
         void **value, size_t *len);
int security_inode_create(struct inode *dir, struct dentry *dentry, umode_t mode);
int security_inode_link(struct dentry *old_dentry, struct inode *dir,
    struct dentry *new_dentry);
int security_inode_unlink(struct inode *dir, struct dentry *dentry);
int security_inode_symlink(struct inode *dir, struct dentry *dentry,
      char *old_name);
int security_inode_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode);
int security_inode_rmdir(struct inode *dir, struct dentry *dentry);
int security_inode_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev);
int security_inode_rename(struct inode *old_dir, struct dentry *old_dentry,
     struct inode *new_dir, struct dentry *new_dentry);
int security_inode_readlink(struct dentry *dentry);
int security_inode_follow_link(struct dentry *dentry, struct nameidata *nd);
int security_inode_permission(struct inode *inode, int mask);
int security_inode_setattr(struct dentry *dentry, struct iattr *attr);
int security_inode_getattr(struct vfsmount *mnt, struct dentry *dentry);
int security_inode_setxattr(struct dentry *dentry, char *name,
       void *value, size_t size, int flags);
void security_inode_post_setxattr(struct dentry *dentry, char *name,
      void *value, size_t size, int flags);
int security_inode_getxattr(struct dentry *dentry, char *name);
int security_inode_listxattr(struct dentry *dentry);
int security_inode_removexattr(struct dentry *dentry, char *name);
int security_inode_need_killpriv(struct dentry *dentry);
int security_inode_killpriv(struct dentry *dentry);
int security_inode_getsecurity( struct inode *inode, char *name, void **buffer, bool alloc);
int security_inode_setsecurity(struct inode *inode, char *name, void *value, size_t size, int flags);
int security_inode_listsecurity(struct inode *inode, char *buffer, size_t buffer_size);
void security_inode_getsecid( struct inode *inode, u32 *secid);
int security_file_permission(struct file *file, int mask);
int security_file_alloc(struct file *file);
void security_file_free(struct file *file);
int security_file_ioctl(struct file *file, unsigned int cmd, unsigned long arg);
int security_mmap_file(struct file *file, unsigned long prot,
   unsigned long flags);
int security_mmap_addr(unsigned long addr);
int security_file_mprotect(struct vm_area_struct *vma, unsigned long reqprot,
      unsigned long prot);
int security_file_lock(struct file *file, unsigned int cmd);
int security_file_fcntl(struct file *file, unsigned int cmd, unsigned long arg);
int security_file_set_fowner(struct file *file);
int security_file_send_sigiotask(struct task_struct *tsk,
     struct fown_struct *fown, int sig);
int security_file_receive(struct file *file);
int security_file_open(struct file *file, struct cred *cred);
int security_task_create(unsigned long clone_flags);
void security_task_free(struct task_struct *task);
int security_cred_alloc_blank(struct cred *cred, gfp_t gfp);
void security_cred_free(struct cred *cred);
int security_prepare_creds(struct cred *_new, struct cred *old, gfp_t gfp);
void security_transfer_creds(struct cred *_new, struct cred *old);
int security_kernel_act_as(struct cred *_new, u32 secid);
int security_kernel_create_files_as(struct cred *_new, struct inode *inode);
int security_kernel_module_request(char *kmod_name);
int security_kernel_module_from_file(struct file *file);
int security_task_fix_setuid(struct cred *_new, struct cred *old,
        int flags);
int security_task_setpgid(struct task_struct *p, pid_t pgid);
int security_task_getpgid(struct task_struct *p);
int security_task_getsid(struct task_struct *p);
void security_task_getsecid(struct task_struct *p, u32 *secid);
int security_task_setnice(struct task_struct *p, int nice);
int security_task_setioprio(struct task_struct *p, int ioprio);
int security_task_getioprio(struct task_struct *p);
int security_task_setrlimit(struct task_struct *p, unsigned int resource,
  struct rlimit *new_rlim);
int security_task_setscheduler(struct task_struct *p);
int security_task_getscheduler(struct task_struct *p);
int security_task_movememory(struct task_struct *p);
int security_task_kill(struct task_struct *p, struct siginfo *info,
   int sig, u32 secid);
int security_task_wait(struct task_struct *p);
int security_task_prctl(int option, unsigned long arg2, unsigned long arg3,
   unsigned long arg4, unsigned long arg5);
void security_task_to_inode(struct task_struct *p, struct inode *inode);
int security_ipc_permission(struct kern_ipc_perm *ipcp, short flag);
void security_ipc_getsecid(struct kern_ipc_perm *ipcp, u32 *secid);
int security_msg_msg_alloc(struct msg_msg *msg);
void security_msg_msg_free(struct msg_msg *msg);
int security_msg_queue_alloc(struct msg_queue *msq);
void security_msg_queue_free(struct msg_queue *msq);
int security_msg_queue_associate(struct msg_queue *msq, int msqflg);
int security_msg_queue_msgctl(struct msg_queue *msq, int cmd);
int security_msg_queue_msgsnd(struct msg_queue *msq,
         struct msg_msg *msg, int msqflg);
int security_msg_queue_msgrcv(struct msg_queue *msq, struct msg_msg *msg,
         struct task_struct *target, long type, int mode);
int security_shm_alloc(struct shmid_kernel *shp);
void security_shm_free(struct shmid_kernel *shp);
int security_shm_associate(struct shmid_kernel *shp, int shmflg);
int security_shm_shmctl(struct shmid_kernel *shp, int cmd);
int security_shm_shmat(struct shmid_kernel *shp, char *shmaddr, int shmflg);
int security_sem_alloc(struct sem_array *sma);
void security_sem_free(struct sem_array *sma);
int security_sem_associate(struct sem_array *sma, int semflg);
int security_sem_semctl(struct sem_array *sma, int cmd);
int security_sem_semop(struct sem_array *sma, struct sembuf *sops,
   unsigned nsops, int alter);
void security_d_instantiate(struct dentry *dentry, struct inode *inode);
int security_getprocattr(struct task_struct *p, char *name, char **value);
int security_setprocattr(struct task_struct *p, char *name, void *value, size_t size);
int security_netlink_send(struct sock *sk, struct sk_buff *skb);
int security_ismaclabel( char *name);
int security_secid_to_secctx(u32 secid, char **secdata, u32 *seclen);
int security_secctx_to_secid( char *secdata, u32 seclen, u32 *secid);
void security_release_secctx(char *secdata, u32 seclen);

int security_inode_notifysecctx(struct inode *inode, void *ctx, u32 ctxlen);
int security_inode_setsecctx(struct dentry *dentry, void *ctx, u32 ctxlen);
int security_inode_getsecctx(struct inode *inode, void **ctx, u32 *ctxlen);
int security_unix_stream_connect(struct sock *sock, struct sock *other, struct sock *newsk);
int security_unix_may_send(struct socket *sock, struct socket *other);
int security_socket_create(int family, int type, int protocol, int kern);
int security_socket_post_create(struct socket *sock, int family,
    int type, int protocol, int kern);
int security_socket_bind(struct socket *sock, struct sockaddr *address, int addrlen);
int security_socket_connect(struct socket *sock, struct sockaddr *address, int addrlen);
int security_socket_listen(struct socket *sock, int backlog);
int security_socket_accept(struct socket *sock, struct socket *newsock);
int security_socket_sendmsg(struct socket *sock, struct msghdr *msg, int size);
int security_socket_recvmsg(struct socket *sock, struct msghdr *msg,
       int size, int flags);
int security_socket_getsockname(struct socket *sock);
int security_socket_getpeername(struct socket *sock);
int security_socket_getsockopt(struct socket *sock, int level, int optname);
int security_socket_setsockopt(struct socket *sock, int level, int optname);
int security_socket_shutdown(struct socket *sock, int how);
int security_sock_rcv_skb(struct sock *sk, struct sk_buff *skb);
int security_socket_getpeersec_stream(struct socket *sock, char *optval,
          int *optlen, unsigned len);
int security_socket_getpeersec_dgram(struct socket *sock, struct sk_buff *skb, u32 *secid);
int security_sk_alloc(struct sock *sk, int family, gfp_t priority);
void security_sk_free(struct sock *sk);
void security_sk_clone( struct sock *sk, struct sock *newsk);
void security_sk_classify_flow(struct sock *sk, struct flowi *fl);
void security_req_classify_flow( struct request_sock *req, struct flowi *fl);
void security_sock_graft(struct sock*sk, struct socket *parent);
int security_inet_conn_request(struct sock *sk,
   struct sk_buff *skb, struct request_sock *req);
void security_inet_csk_clone(struct sock *newsk,
   struct request_sock *req);
void security_inet_conn_established(struct sock *sk,
   struct sk_buff *skb);
int security_secmark_relabel_packet(u32 secid);
void security_secmark_refcount_inc(void);
void security_secmark_refcount_dec(void);
int security_tun_dev_alloc_security(void **security);
void security_tun_dev_free_security(void *security);
int security_tun_dev_create(void);
int security_tun_dev_attach_queue(void *security);
int security_tun_dev_attach(struct sock *sk, void *security);
int security_tun_dev_open(void *security);

void security_skb_owned_by(struct sk_buff *skb, struct sock *sk);
static inline int security_xfrm_policy_alloc(struct xfrm_sec_ctx **ctxp, struct xfrm_user_sec_ctx *sec_ctx)
{
 return 0;
}

static inline int security_xfrm_policy_clone(struct xfrm_sec_ctx *old, struct xfrm_sec_ctx **new_ctxp)
{
 return 0;
}

static inline void security_xfrm_policy_free(struct xfrm_sec_ctx *ctx)
{
}

static inline int security_xfrm_policy_delete(struct xfrm_sec_ctx *ctx)
{
 return 0;
}

static inline int security_xfrm_state_alloc(struct xfrm_state *x,
     struct xfrm_user_sec_ctx *sec_ctx)
{
 return 0;
}

static inline int security_xfrm_state_alloc_acquire(struct xfrm_state *x,
     struct xfrm_sec_ctx *polsec, u32 secid)
{
 return 0;
}

static inline void security_xfrm_state_free(struct xfrm_state *x)
{
}

static inline int security_xfrm_state_delete(struct xfrm_state *x)
{
 return 0;
}

static inline int security_xfrm_policy_lookup(struct xfrm_sec_ctx *ctx, u32 fl_secid, u8 dir)
{
 return 0;
}

static inline int security_xfrm_state_pol_flow_match(struct xfrm_state *x,
   struct xfrm_policy *xp, struct flowi *fl)
{
 return 1;
}

static inline int security_xfrm_decode_session(struct sk_buff *skb, u32 *secid)
{
 return 0;
}

static inline void security_skb_classify_flow(struct sk_buff *skb, struct flowi *fl)
{
}




int security_path_unlink(struct path *dir, struct dentry *dentry);
int security_path_mkdir(struct path *dir, struct dentry *dentry, umode_t mode);
int security_path_rmdir(struct path *dir, struct dentry *dentry);
int security_path_mknod(struct path *dir, struct dentry *dentry, umode_t mode,
   unsigned int dev);
int security_path_truncate(struct path *path);
int security_path_symlink(struct path *dir, struct dentry *dentry,
     char *old_name);
int security_path_link(struct dentry *old_dentry, struct path *new_dir,
         struct dentry *new_dentry);
int security_path_rename(struct path *old_dir, struct dentry *old_dentry,
    struct path *new_dir, struct dentry *new_dentry);
int security_path_chmod(struct path *path, umode_t mode);
int security_path_chown(struct path *path, kuid_t uid, kgid_t gid);
int security_path_chroot(struct path *path);
int security_key_alloc(struct key *key, struct cred *cred, unsigned long flags);
void security_key_free(struct key *key);
int security_key_permission(key_ref_t key_ref,
       struct cred *cred, key_perm_t perm);
int security_key_getsecurity(struct key *key, char **_buffer);
int security_audit_rule_init(u32 field, u32 op, char *rulestr, void **lsmrule);
int security_audit_rule_known(struct audit_krule *krule);
int security_audit_rule_match(u32 secid, u32 field, u32 op, void *lsmrule,
         struct audit_context *actx);
void security_audit_rule_free(void *lsmrule);
extern struct dentry *securityfs_create_file( char *name, umode_t mode,
          struct dentry *parent, void *data,
          struct file_operations *fops);
extern struct dentry *securityfs_create_dir( char *name, struct dentry *parent);
extern void securityfs_remove(struct dentry *dentry);
static inline char *alloc_secdata(void)
{
 return (char *)get_zeroed_page(((( gfp_t)0x10u) | (( gfp_t)0x40u) | (( gfp_t)0x80u)));
}

static inline void free_secdata(void *secdata)
{
 free_pages(((unsigned long)secdata), 0);
}
extern int yama_ptrace_access_check(struct task_struct *child,
        unsigned int mode);
extern int yama_ptrace_traceme(struct task_struct *parent);
extern void yama_task_free(struct task_struct *task);
extern int yama_task_prctl(int option, unsigned long arg2, unsigned long arg3,
      unsigned long arg4, unsigned long arg5);







struct mnt_namespace;
struct uts_namespace;
struct ipc_namespace;
struct pid_namespace;
struct fs_struct;
struct nsproxy {
  template <typename, int = 0> struct __BYPASSnsproxy {};
  template <typename, int> friend struct __BYPASSnsproxy;
 atomic_t count;
 struct uts_namespace *uts_ns;
 struct ipc_namespace *ipc_ns;
 struct mnt_namespace *mnt_ns;
 struct pid_namespace *pid_ns_for_children;
 struct net *net_ns;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct nsproxy init_nsproxy;

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct7nsproxyE_1974_0 {
  typedef TJP__ZN11task_struct7nsproxyE_1974_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline nsproxy * __get__ZN11task_struct7nsproxyE_1974(nsproxy * *source) {
  ::nsproxy *__result_buffer;
  typedef TJP__ZN11task_struct7nsproxyE_1974_0< ::nsproxy *, ::task_struct , ::nsproxy * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::nsproxy *&)__result_buffer;
}
static inline struct nsproxy *task_nsproxy(struct task_struct *tsk)
{
 return (__get__ZN11task_struct7nsproxyE_1974(&tsk->nsproxy));
}

int copy_namespaces(unsigned long flags, struct task_struct *tsk);
void exit_task_namespaces(struct task_struct *tsk);
void switch_task_namespaces(struct task_struct *tsk, struct nsproxy *_new);
void free_nsproxy(struct nsproxy *ns);
int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **,
 struct cred *, struct fs_struct *);
int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) nsproxy_cache_init(void);

static inline void put_nsproxy(struct nsproxy *ns)
{
 if (1) {
  free_nsproxy(ns);
 }
}

static inline void get_nsproxy(struct nsproxy *ns)
{
 ;
}






struct scm_creds {
  template <typename, int = 0> struct __BYPASSscm_creds {};
  template <typename, int> friend struct __BYPASSscm_creds;
 u32 pid;
 kuid_t uid;
 kgid_t gid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct scm_fp_list {
  template <typename, int = 0> struct __BYPASSscm_fp_list {};
  template <typename, int> friend struct __BYPASSscm_fp_list;
 short count;
 short max;
 struct file *fp[253];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct scm_cookie {
  template <typename, int = 0> struct __BYPASSscm_cookie {};
  template <typename, int> friend struct __BYPASSscm_cookie;
 struct pid *pid;
 struct scm_fp_list *fp;
 struct scm_creds creds;

 u32 secid;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void scm_detach_fds(struct msghdr *msg, struct scm_cookie *scm);
void scm_detach_fds_compat(struct msghdr *msg, struct scm_cookie *scm);
int __scm_send(struct socket *sock, struct msghdr *msg, struct scm_cookie *scm);
void __scm_destroy(struct scm_cookie *scm);
struct scm_fp_list *scm_fp_dup(struct scm_fp_list *fpl);


static __inline__ void unix_get_peersec_dgram(struct socket *sock, struct scm_cookie *scm)
{
 security_socket_getpeersec_dgram(sock, 0, &scm->secid);
}





static __inline__ void scm_set_cred(struct scm_cookie *scm,
        struct pid *pid, kuid_t uid, kgid_t gid)
{
 scm->pid = pid;
 scm->creds.pid = pid_vnr(pid);
 scm->creds.uid = uid;
 scm->creds.gid = gid;
}

static __inline__ void scm_destroy_cred(struct scm_cookie *scm)
{
 ;
 scm->pid = 0;
}

static __inline__ void scm_destroy(struct scm_cookie *scm)
{
 scm_destroy_cred(scm);
 if (scm->fp)
  __scm_destroy(scm);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4cred3uidE_1976_0 {
  typedef TJP__ZN4cred3uidE_1976_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline kuid_t __get__ZN4cred3uidE_1976(kuid_t *source) {
  AC::ResultBuffer< ::kuid_t  > __result_buffer;
  typedef TJP__ZN4cred3uidE_1976_0< ::kuid_t , ::cred , ::kuid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::kuid_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4credE_1977_0 {
  typedef TJP__ZN11task_struct4credE_1977_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cred * __get__ZN11task_struct4credE_1977(cred * *source) {
  ::cred *__result_buffer;
  typedef TJP__ZN11task_struct4credE_1977_0< ::cred *, ::task_struct , ::cred * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cred *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4cred3gidE_1978_0 {
  typedef TJP__ZN4cred3gidE_1978_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline kgid_t __get__ZN4cred3gidE_1978(kgid_t *source) {
  AC::ResultBuffer< ::kgid_t  > __result_buffer;
  typedef TJP__ZN4cred3gidE_1978_0< ::kgid_t , ::cred , ::kgid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::kgid_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4credE_1979_0 {
  typedef TJP__ZN11task_struct4credE_1979_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cred * __get__ZN11task_struct4credE_1979(cred * *source) {
  ::cred *__result_buffer;
  typedef TJP__ZN11task_struct4credE_1979_0< ::cred *, ::task_struct , ::cred * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cred *&)__result_buffer;
}
static __inline__ int scm_send(struct socket *sock, struct msghdr *msg,
          struct scm_cookie *scm, bool forcecreds)
{
 memset(scm, 0, sizeof(*scm));
 scm->creds.uid = (kuid_t){ -1 };
 scm->creds.gid = (kgid_t){ -1 };
 if (forcecreds)
  scm_set_cred(scm, task_tgid(get_current()), (({ __get__ZN4cred3uidE_1976(&(__get__ZN11task_struct4credE_1977(&get_current()->cred))->uid); })), (({ __get__ZN4cred3gidE_1978(&(__get__ZN11task_struct4credE_1979(&get_current()->cred))->gid); })));
 unix_get_peersec_dgram(sock, scm);
 if (msg->msg_controllen <= 0)
  return 0;
 return __scm_send(sock, msg, scm);
}


static inline void scm_passec(struct socket *sock, struct msghdr *msg, struct scm_cookie *scm)
{
 char *secdata;
 u32 seclen;
 int err;

 if ((__builtin_constant_p((4)) ? constant_test_bit((4), (&sock->flags)) : variable_test_bit((4), (&sock->flags)))) {
  err = security_secid_to_secctx(scm->secid, &secdata, &seclen);

  if (!err) {
   put_cmsg(msg, 1, 0x03, seclen, secdata);
   security_release_secctx(secdata, seclen);
  }
 }
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4cred7user_nsE_1984_0 {
  typedef TJP__ZN4cred7user_nsE_1984_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline user_namespace * __get__ZN4cred7user_nsE_1984(user_namespace * *source) {
  ::user_namespace *__result_buffer;
  typedef TJP__ZN4cred7user_nsE_1984_0< ::user_namespace *, ::cred , ::user_namespace * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::user_namespace *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct4credE_1985_0 {
  typedef TJP__ZN11task_struct4credE_1985_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cred * __get__ZN11task_struct4credE_1985(cred * *source) {
  ::cred *__result_buffer;
  typedef TJP__ZN11task_struct4credE_1985_0< ::cred *, ::task_struct , ::cred * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cred *&)__result_buffer;
}
static __inline__ void scm_recv(struct socket *sock, struct msghdr *msg,
    struct scm_cookie *scm, int flags)
{
 if (!msg->msg_control) {
  if ((__builtin_constant_p((3)) ? constant_test_bit((3), (&sock->flags)) : variable_test_bit((3), (&sock->flags))) || scm->fp)
   msg->msg_flags |= 8;
  scm_destroy(scm);
  return;
 }

 if ((__builtin_constant_p((3)) ? constant_test_bit((3), (&sock->flags)) : variable_test_bit((3), (&sock->flags)))) {
  struct user_namespace *current_ns = (({ __get__ZN4cred7user_nsE_1984(&(__get__ZN11task_struct4credE_1985(&get_current()->cred))->user_ns); }));







                struct ucred ucreds;
                ucreds.pid = scm->creds.pid;
                ucreds.uid = from_kuid_munged(current_ns, scm->creds.uid);
                ucreds.gid = from_kgid_munged(current_ns, scm->creds.gid);

  put_cmsg(msg, 1, 0x02, sizeof(ucreds), &ucreds);
 }

 scm_destroy_cred(scm);

 scm_passec(sock, msg, scm);

 if (!scm->fp)
  return;

 scm_detach_fds(msg, scm);
}
struct sockaddr_nl {
  template <typename, int = 0> struct __BYPASSsockaddr_nl {};
  template <typename, int> friend struct __BYPASSsockaddr_nl;
 __kernel_sa_family_t nl_family;
 unsigned short nl_pad;
 __u32 nl_pid;
        __u32 nl_groups;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nlmsghdr {
  template <typename, int = 0> struct __BYPASSnlmsghdr {};
  template <typename, int> friend struct __BYPASSnlmsghdr;
 __u32 nlmsg_len;
 __u16 nlmsg_type;
 __u16 nlmsg_flags;
 __u32 nlmsg_seq;
 __u32 nlmsg_pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct nlmsgerr {
  template <typename, int = 0> struct __BYPASSnlmsgerr {};
  template <typename, int> friend struct __BYPASSnlmsgerr;
 int error;
 struct nlmsghdr msg;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct nl_pktinfo {
  template <typename, int = 0> struct __BYPASSnl_pktinfo {};
  template <typename, int> friend struct __BYPASSnl_pktinfo;
 __u32 group;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nl_mmap_req {
  template <typename, int = 0> struct __BYPASSnl_mmap_req {};
  template <typename, int> friend struct __BYPASSnl_mmap_req;
 unsigned int nm_block_size;
 unsigned int nm_block_nr;
 unsigned int nm_frame_size;
 unsigned int nm_frame_nr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nl_mmap_hdr {
  template <typename, int = 0> struct __BYPASSnl_mmap_hdr {};
  template <typename, int> friend struct __BYPASSnl_mmap_hdr;
 unsigned int nm_status;
 unsigned int nm_len;
 __u32 nm_group;

 __u32 nm_pid;
 __u32 nm_uid;
 __u32 nm_gid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum nl_mmap_status {
 NL_MMAP_STATUS_UNUSED,
 NL_MMAP_STATUS_RESERVED,
 NL_MMAP_STATUS_VALID,
 NL_MMAP_STATUS_COPY,
 NL_MMAP_STATUS_SKIP,
};







enum {
 NETLINK_UNCONNECTED = 0,
 NETLINK_CONNECTED,
};
struct nlattr {
  template <typename, int = 0> struct __BYPASSnlattr {};
  template <typename, int> friend struct __BYPASSnlattr;
 __u16 nla_len;
 __u16 nla_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct net;

static inline struct nlmsghdr *nlmsg_hdr( struct sk_buff *skb)
{
 return (struct nlmsghdr *)skb->data;
}

enum netlink_skb_flags {
 NETLINK_SKB_MMAPED = 0x1,
 NETLINK_SKB_TX = 0x2,
 NETLINK_SKB_DELIVERED = 0x4,
};

struct netlink_skb_parms {
  template <typename, int = 0> struct __BYPASSnetlink_skb_parms {};
  template <typename, int> friend struct __BYPASSnetlink_skb_parms;
 struct scm_creds creds;
 __u32 portid;
 __u32 dst_group;
 __u32 flags;
 struct sock *sk;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern void netlink_table_grab(void);
extern void netlink_table_ungrab(void);





struct netlink_kernel_cfg {
  template <typename, int = 0> struct __BYPASSnetlink_kernel_cfg {};
  template <typename, int> friend struct __BYPASSnetlink_kernel_cfg;
 unsigned int groups;
 unsigned int flags;
 void (*input)(struct sk_buff *skb);
 struct mutex *cb_mutex;
 void (*bind)(int group);
 bool (*compare)(struct net *net, struct sock *sk);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct sock *__netlink_kernel_create(struct net *net, int unit,
         struct module *module,
         struct netlink_kernel_cfg *cfg);
static inline struct sock *
netlink_kernel_create(struct net *net, int unit, struct netlink_kernel_cfg *cfg)
{
 return __netlink_kernel_create(net, unit, ((struct module *)0), cfg);
}

extern void netlink_kernel_release(struct sock *sk);
extern int __netlink_change_ngroups(struct sock *sk, unsigned int groups);
extern int netlink_change_ngroups(struct sock *sk, unsigned int groups);
extern void __netlink_clear_multicast_users(struct sock *sk, unsigned int group);
extern void netlink_clear_multicast_users(struct sock *sk, unsigned int group);
extern void netlink_ack(struct sk_buff *in_skb, struct nlmsghdr *nlh, int err);
extern int netlink_has_listeners(struct sock *sk, unsigned int group);
extern struct sk_buff *netlink_alloc_skb(struct sock *ssk, unsigned int size,
      u32 dst_portid, gfp_t gfp_mask);
extern int netlink_unicast(struct sock *ssk, struct sk_buff *skb, __u32 portid, int nonblock);
extern int netlink_broadcast(struct sock *ssk, struct sk_buff *skb, __u32 portid,
        __u32 group, gfp_t allocation);
extern int netlink_broadcast_filtered(struct sock *ssk, struct sk_buff *skb,
 __u32 portid, __u32 group, gfp_t allocation,
 int (*filter)(struct sock *dsk, struct sk_buff *skb, void *data),
 void *filter_data);
extern int netlink_set_err(struct sock *ssk, __u32 portid, __u32 group, int code);
extern int netlink_register_notifier(struct notifier_block *nb);
extern int netlink_unregister_notifier(struct notifier_block *nb);


struct sock *netlink_getsockbyfilp(struct file *filp);
int netlink_attachskb(struct sock *sk, struct sk_buff *skb,
        long *timeo, struct sock *ssk);
void netlink_detachskb(struct sock *sk, struct sk_buff *skb);
int netlink_sendskb(struct sock *sk, struct sk_buff *skb);

static inline struct sk_buff *
netlink_skb_clone(struct sk_buff *skb, gfp_t gfp_mask)
{
 struct sk_buff *nskb;

 nskb = skb_clone(skb, gfp_mask);
 if (!nskb)
  return 0;


 if (is_vmalloc_addr(skb->head))
  nskb->destructor = skb->destructor;

 return nskb;
}
struct netlink_callback {
  template <typename, int = 0> struct __BYPASSnetlink_callback {};
  template <typename, int> friend struct __BYPASSnetlink_callback;
 struct sk_buff *skb;
 struct nlmsghdr *nlh;
 int (*dump)(struct sk_buff * skb,
     struct netlink_callback *cb);
 int (*done)(struct netlink_callback *cb);
 void *data;

 struct module *module;
 u16 family;
 u16 min_dump_alloc;
 unsigned int prev_seq, seq;
 long args[6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netlink_notify {
  template <typename, int = 0> struct __BYPASSnetlink_notify {};
  template <typename, int> friend struct __BYPASSnetlink_notify;
 struct net *net;
 int portid;
 int protocol;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nlmsghdr *
__nlmsg_put(struct sk_buff *skb, u32 portid, u32 seq, int type, int len, int flags);

struct netlink_dump_control {
  template <typename, int = 0> struct __BYPASSnetlink_dump_control {};
  template <typename, int> friend struct __BYPASSnetlink_dump_control;
 int (*dump)(struct sk_buff *skb, struct netlink_callback *);
 int (*done)(struct netlink_callback *);
 void *data;
 struct module *module;
 u16 min_dump_alloc;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int __netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
    struct nlmsghdr *nlh,
    struct netlink_dump_control *control);
static inline int netlink_dump_start(struct sock *ssk, struct sk_buff *skb,
         struct nlmsghdr *nlh,
         struct netlink_dump_control *control)
{
 if (!control->module)
  control->module = ((struct module *)0);

 return __netlink_dump_start(ssk, skb, nlh, control);
}

struct netlink_tap {
  template <typename, int = 0> struct __BYPASSnetlink_tap {};
  template <typename, int> friend struct __BYPASSnetlink_tap;
 struct net_device *dev;
 struct module *module;
 struct list_head list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int netlink_add_tap(struct netlink_tap *nt);
extern int __netlink_remove_tap(struct netlink_tap *nt);
extern int netlink_remove_tap(struct netlink_tap *nt);

struct ndmsg {
  template <typename, int = 0> struct __BYPASSndmsg {};
  template <typename, int> friend struct __BYPASSndmsg;
 __u8 ndm_family;
 __u8 ndm_pad1;
 __u16 ndm_pad2;
 __s32 ndm_ifindex;
 __u16 ndm_state;
 __u8 ndm_flags;
 __u8 ndm_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 NDA_UNSPEC,
 NDA_DST,
 NDA_LLADDR,
 NDA_CACHEINFO,
 NDA_PROBES,
 NDA_VLAN,
 NDA_PORT,
 NDA_VNI,
 NDA_IFINDEX,
 __NDA_MAX
};
struct nda_cacheinfo {
  template <typename, int = 0> struct __BYPASSnda_cacheinfo {};
  template <typename, int> friend struct __BYPASSnda_cacheinfo;
 __u32 ndm_confirmed;
 __u32 ndm_used;
 __u32 ndm_updated;
 __u32 ndm_refcnt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ndt_stats {
  template <typename, int = 0> struct __BYPASSndt_stats {};
  template <typename, int> friend struct __BYPASSndt_stats;
 __u64 ndts_allocs;
 __u64 ndts_destroys;
 __u64 ndts_hash_grows;
 __u64 ndts_res_failed;
 __u64 ndts_lookups;
 __u64 ndts_hits;
 __u64 ndts_rcv_probes_mcast;
 __u64 ndts_rcv_probes_ucast;
 __u64 ndts_periodic_gc_runs;
 __u64 ndts_forced_gc_runs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 NDTPA_UNSPEC,
 NDTPA_IFINDEX,
 NDTPA_REFCNT,
 NDTPA_REACHABLE_TIME,
 NDTPA_BASE_REACHABLE_TIME,
 NDTPA_RETRANS_TIME,
 NDTPA_GC_STALETIME,
 NDTPA_DELAY_PROBE_TIME,
 NDTPA_QUEUE_LEN,
 NDTPA_APP_PROBES,
 NDTPA_UCAST_PROBES,
 NDTPA_MCAST_PROBES,
 NDTPA_ANYCAST_DELAY,
 NDTPA_PROXY_DELAY,
 NDTPA_PROXY_QLEN,
 NDTPA_LOCKTIME,
 NDTPA_QUEUE_LENBYTES,
 __NDTPA_MAX
};


struct ndtmsg {
  template <typename, int = 0> struct __BYPASSndtmsg {};
  template <typename, int> friend struct __BYPASSndtmsg;
 __u8 ndtm_family;
 __u8 ndtm_pad1;
 __u16 ndtm_pad2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ndt_config {
  template <typename, int = 0> struct __BYPASSndt_config {};
  template <typename, int> friend struct __BYPASSndt_config;
 __u16 ndtc_key_len;
 __u16 ndtc_entry_size;
 __u32 ndtc_entries;
 __u32 ndtc_last_flush;
 __u32 ndtc_last_rand;
 __u32 ndtc_hash_rnd;
 __u32 ndtc_hash_mask;
 __u32 ndtc_hash_chain_gc;
 __u32 ndtc_proxy_qlen;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 NDTA_UNSPEC,
 NDTA_NAME,
 NDTA_THRESH1,
 NDTA_THRESH2,
 NDTA_THRESH3,
 NDTA_CONFIG,
 NDTA_PARMS,
 NDTA_STATS,
 NDTA_GC_INTERVAL,
 __NDTA_MAX
};





struct sockaddr_pkt {
  template <typename, int = 0> struct __BYPASSsockaddr_pkt {};
  template <typename, int> friend struct __BYPASSsockaddr_pkt;
 unsigned short spkt_family;
 unsigned char spkt_device[14];
 __be16 spkt_protocol;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sockaddr_ll {
  template <typename, int = 0> struct __BYPASSsockaddr_ll {};
  template <typename, int> friend struct __BYPASSsockaddr_ll;
 unsigned short sll_family;
 __be16 sll_protocol;
 int sll_ifindex;
 unsigned short sll_hatype;
 unsigned char sll_pkttype;
 unsigned char sll_halen;
 unsigned char sll_addr[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct tpacket_stats {
  template <typename, int = 0> struct __BYPASStpacket_stats {};
  template <typename, int> friend struct __BYPASStpacket_stats;
 unsigned int tp_packets;
 unsigned int tp_drops;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tpacket_stats_v3 {
  template <typename, int = 0> struct __BYPASStpacket_stats_v3 {};
  template <typename, int> friend struct __BYPASStpacket_stats_v3;
 unsigned int tp_packets;
 unsigned int tp_drops;
 unsigned int tp_freeze_q_cnt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

union tpacket_stats_u {
 struct tpacket_stats stats1;
 struct tpacket_stats_v3 stats3;
};

struct tpacket_auxdata {
  template <typename, int = 0> struct __BYPASStpacket_auxdata {};
  template <typename, int> friend struct __BYPASStpacket_auxdata;
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u16 tp_vlan_tci;
 __u16 tp_padding;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct tpacket_hdr {
  template <typename, int = 0> struct __BYPASStpacket_hdr {};
  template <typename, int> friend struct __BYPASStpacket_hdr;
 unsigned long tp_status;
 unsigned int tp_len;
 unsigned int tp_snaplen;
 unsigned short tp_mac;
 unsigned short tp_net;
 unsigned int tp_sec;
 unsigned int tp_usec;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct tpacket2_hdr {
  template <typename, int = 0> struct __BYPASStpacket2_hdr {};
  template <typename, int> friend struct __BYPASStpacket2_hdr;
 __u32 tp_status;
 __u32 tp_len;
 __u32 tp_snaplen;
 __u16 tp_mac;
 __u16 tp_net;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u16 tp_vlan_tci;
 __u16 tp_padding;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tpacket_hdr_variant1 {
  template <typename, int = 0> struct __BYPASStpacket_hdr_variant1 {};
  template <typename, int> friend struct __BYPASStpacket_hdr_variant1;
 __u32 tp_rxhash;
 __u32 tp_vlan_tci;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tpacket3_hdr {
  template <typename, int = 0> struct __BYPASStpacket3_hdr {};
  template <typename, int> friend struct __BYPASStpacket3_hdr;
 __u32 tp_next_offset;
 __u32 tp_sec;
 __u32 tp_nsec;
 __u32 tp_snaplen;
 __u32 tp_len;
 __u32 tp_status;
 __u16 tp_mac;
 __u16 tp_net;

 union {
  struct tpacket_hdr_variant1 hv1;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tpacket_bd_ts {
  template <typename, int = 0> struct __BYPASStpacket_bd_ts {};
  template <typename, int> friend struct __BYPASStpacket_bd_ts;
 unsigned int ts_sec;
 union {
  unsigned int ts_usec;
  unsigned int ts_nsec;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tpacket_hdr_v1 {
  template <typename, int = 0> struct __BYPASStpacket_hdr_v1 {};
  template <typename, int> friend struct __BYPASStpacket_hdr_v1;
 __u32 block_status;
 __u32 num_pkts;
 __u32 offset_to_first_pkt;




 __u32 blk_len;
 __u64 __attribute__((aligned(8))) seq_num;
 struct tpacket_bd_ts ts_first_pkt, ts_last_pkt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

union tpacket_bd_header_u {
 struct tpacket_hdr_v1 bh1;
};

struct tpacket_block_desc {
  template <typename, int = 0> struct __BYPASStpacket_block_desc {};
  template <typename, int> friend struct __BYPASStpacket_block_desc;
 __u32 version;
 __u32 offset_to_priv;
 union tpacket_bd_header_u hdr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




enum tpacket_versions {
 TPACKET_V1,
 TPACKET_V2,
 TPACKET_V3
};
struct tpacket_req {
  template <typename, int = 0> struct __BYPASStpacket_req {};
  template <typename, int> friend struct __BYPASStpacket_req;
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tpacket_req3 {
  template <typename, int = 0> struct __BYPASStpacket_req3 {};
  template <typename, int> friend struct __BYPASStpacket_req3;
 unsigned int tp_block_size;
 unsigned int tp_block_nr;
 unsigned int tp_frame_size;
 unsigned int tp_frame_nr;
 unsigned int tp_retire_blk_tov;
 unsigned int tp_sizeof_priv;
 unsigned int tp_feature_req_word;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

union tpacket_req_u {
 struct tpacket_req req;
 struct tpacket_req3 req3;
};

struct packet_mreq {
  template <typename, int = 0> struct __BYPASSpacket_mreq {};
  template <typename, int> friend struct __BYPASSpacket_mreq;
 int mr_ifindex;
 unsigned short mr_type;
 unsigned short mr_alen;
 unsigned char mr_address[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};










struct rtnl_link_stats {
  template <typename, int = 0> struct __BYPASSrtnl_link_stats {};
  template <typename, int> friend struct __BYPASSrtnl_link_stats;
 __u32 rx_packets;
 __u32 tx_packets;
 __u32 rx_bytes;
 __u32 tx_bytes;
 __u32 rx_errors;
 __u32 tx_errors;
 __u32 rx_dropped;
 __u32 tx_dropped;
 __u32 multicast;
 __u32 collisions;


 __u32 rx_length_errors;
 __u32 rx_over_errors;
 __u32 rx_crc_errors;
 __u32 rx_frame_errors;
 __u32 rx_fifo_errors;
 __u32 rx_missed_errors;


 __u32 tx_aborted_errors;
 __u32 tx_carrier_errors;
 __u32 tx_fifo_errors;
 __u32 tx_heartbeat_errors;
 __u32 tx_window_errors;


 __u32 rx_compressed;
 __u32 tx_compressed;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct rtnl_link_stats64 {
  template <typename, int = 0> struct __BYPASSrtnl_link_stats64 {};
  template <typename, int> friend struct __BYPASSrtnl_link_stats64;
 __u64 rx_packets;
 __u64 tx_packets;
 __u64 rx_bytes;
 __u64 tx_bytes;
 __u64 rx_errors;
 __u64 tx_errors;
 __u64 rx_dropped;
 __u64 tx_dropped;
 __u64 multicast;
 __u64 collisions;


 __u64 rx_length_errors;
 __u64 rx_over_errors;
 __u64 rx_crc_errors;
 __u64 rx_frame_errors;
 __u64 rx_fifo_errors;
 __u64 rx_missed_errors;


 __u64 tx_aborted_errors;
 __u64 tx_carrier_errors;
 __u64 tx_fifo_errors;
 __u64 tx_heartbeat_errors;
 __u64 tx_window_errors;


 __u64 rx_compressed;
 __u64 tx_compressed;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct rtnl_link_ifmap {
  template <typename, int = 0> struct __BYPASSrtnl_link_ifmap {};
  template <typename, int> friend struct __BYPASSrtnl_link_ifmap;
 __u64 mem_start;
 __u64 mem_end;
 __u64 base_addr;
 __u16 irq;
 __u8 dma;
 __u8 port;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 IFLA_UNSPEC,
 IFLA_ADDRESS,
 IFLA_BROADCAST,
 IFLA_IFNAME,
 IFLA_MTU,
 IFLA_LINK,
 IFLA_QDISC,
 IFLA_STATS,
 IFLA_COST,

 IFLA_PRIORITY,

 IFLA_MASTER,

 IFLA_WIRELESS,

 IFLA_PROTINFO,

 IFLA_TXQLEN,

 IFLA_MAP,

 IFLA_WEIGHT,

 IFLA_OPERSTATE,
 IFLA_LINKMODE,
 IFLA_LINKINFO,

 IFLA_NET_NS_PID,
 IFLA_IFALIAS,
 IFLA_NUM_VF,
 IFLA_VFINFO_LIST,
 IFLA_STATS64,
 IFLA_VF_PORTS,
 IFLA_PORT_SELF,
 IFLA_AF_SPEC,
 IFLA_GROUP,
 IFLA_NET_NS_FD,
 IFLA_EXT_MASK,
 IFLA_PROMISCUITY,

 IFLA_NUM_TX_QUEUES,
 IFLA_NUM_RX_QUEUES,
 IFLA_CARRIER,
 IFLA_PHYS_PORT_ID,
 __IFLA_MAX
};
enum {
 IFLA_INET_UNSPEC,
 IFLA_INET_CONF,
 __IFLA_INET_MAX,
};
enum {
 IFLA_INET6_UNSPEC,
 IFLA_INET6_FLAGS,
 IFLA_INET6_CONF,
 IFLA_INET6_STATS,
 IFLA_INET6_MCAST,
 IFLA_INET6_CACHEINFO,
 IFLA_INET6_ICMP6STATS,
 IFLA_INET6_TOKEN,
 __IFLA_INET6_MAX
};



enum {
 BRIDGE_MODE_UNSPEC,
 BRIDGE_MODE_HAIRPIN,
};

enum {
 IFLA_BRPORT_UNSPEC,
 IFLA_BRPORT_STATE,
 IFLA_BRPORT_PRIORITY,
 IFLA_BRPORT_COST,
 IFLA_BRPORT_MODE,
 IFLA_BRPORT_GUARD,
 IFLA_BRPORT_PROTECT,
 IFLA_BRPORT_FAST_LEAVE,
 IFLA_BRPORT_LEARNING,
 IFLA_BRPORT_UNICAST_FLOOD,
 __IFLA_BRPORT_MAX
};


struct ifla_cacheinfo {
  template <typename, int = 0> struct __BYPASSifla_cacheinfo {};
  template <typename, int> friend struct __BYPASSifla_cacheinfo;
 __u32 max_reasm_len;
 __u32 tstamp;
 __u32 reachable_time;
 __u32 retrans_time;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 IFLA_INFO_UNSPEC,
 IFLA_INFO_KIND,
 IFLA_INFO_DATA,
 IFLA_INFO_XSTATS,
 __IFLA_INFO_MAX,
};





enum {
 IFLA_VLAN_UNSPEC,
 IFLA_VLAN_ID,
 IFLA_VLAN_FLAGS,
 IFLA_VLAN_EGRESS_QOS,
 IFLA_VLAN_INGRESS_QOS,
 IFLA_VLAN_PROTOCOL,
 __IFLA_VLAN_MAX,
};



struct ifla_vlan_flags {
  template <typename, int = 0> struct __BYPASSifla_vlan_flags {};
  template <typename, int> friend struct __BYPASSifla_vlan_flags;
 __u32 flags;
 __u32 mask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 IFLA_VLAN_QOS_UNSPEC,
 IFLA_VLAN_QOS_MAPPING,
 __IFLA_VLAN_QOS_MAX
};



struct ifla_vlan_qos_mapping {
  template <typename, int = 0> struct __BYPASSifla_vlan_qos_mapping {};
  template <typename, int> friend struct __BYPASSifla_vlan_qos_mapping;
 __u32 from;
 __u32 to;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum {
 IFLA_MACVLAN_UNSPEC,
 IFLA_MACVLAN_MODE,
 IFLA_MACVLAN_FLAGS,
 __IFLA_MACVLAN_MAX,
};



enum macvlan_mode {
 MACVLAN_MODE_PRIVATE = 1,
 MACVLAN_MODE_VEPA = 2,
 MACVLAN_MODE_BRIDGE = 4,
 MACVLAN_MODE_PASSTHRU = 8,
};




enum {
 IFLA_VXLAN_UNSPEC,
 IFLA_VXLAN_ID,
 IFLA_VXLAN_GROUP,
 IFLA_VXLAN_LINK,
 IFLA_VXLAN_LOCAL,
 IFLA_VXLAN_TTL,
 IFLA_VXLAN_TOS,
 IFLA_VXLAN_LEARNING,
 IFLA_VXLAN_AGEING,
 IFLA_VXLAN_LIMIT,
 IFLA_VXLAN_PORT_RANGE,
 IFLA_VXLAN_PROXY,
 IFLA_VXLAN_RSC,
 IFLA_VXLAN_L2MISS,
 IFLA_VXLAN_L3MISS,
 IFLA_VXLAN_PORT,
 IFLA_VXLAN_GROUP6,
 IFLA_VXLAN_LOCAL6,
 __IFLA_VXLAN_MAX
};


struct ifla_vxlan_port_range {
  template <typename, int = 0> struct __BYPASSifla_vxlan_port_range {};
  template <typename, int> friend struct __BYPASSifla_vxlan_port_range;
 __be16 low;
 __be16 high;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum {
 IFLA_BOND_UNSPEC,
 IFLA_BOND_MODE,
 IFLA_BOND_ACTIVE_SLAVE,
 __IFLA_BOND_MAX,
};





enum {
 IFLA_VF_INFO_UNSPEC,
 IFLA_VF_INFO,
 __IFLA_VF_INFO_MAX,
};



enum {
 IFLA_VF_UNSPEC,
 IFLA_VF_MAC,
 IFLA_VF_VLAN,
 IFLA_VF_TX_RATE,
 IFLA_VF_SPOOFCHK,
 IFLA_VF_LINK_STATE,
 __IFLA_VF_MAX,
};



struct ifla_vf_mac {
  template <typename, int = 0> struct __BYPASSifla_vf_mac {};
  template <typename, int> friend struct __BYPASSifla_vf_mac;
 __u32 vf;
 __u8 mac[32];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ifla_vf_vlan {
  template <typename, int = 0> struct __BYPASSifla_vf_vlan {};
  template <typename, int> friend struct __BYPASSifla_vf_vlan;
 __u32 vf;
 __u32 vlan;
 __u32 qos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ifla_vf_tx_rate {
  template <typename, int = 0> struct __BYPASSifla_vf_tx_rate {};
  template <typename, int> friend struct __BYPASSifla_vf_tx_rate;
 __u32 vf;
 __u32 rate;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ifla_vf_spoofchk {
  template <typename, int = 0> struct __BYPASSifla_vf_spoofchk {};
  template <typename, int> friend struct __BYPASSifla_vf_spoofchk;
 __u32 vf;
 __u32 setting;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 IFLA_VF_LINK_STATE_AUTO,
 IFLA_VF_LINK_STATE_ENABLE,
 IFLA_VF_LINK_STATE_DISABLE,
 __IFLA_VF_LINK_STATE_MAX,
};

struct ifla_vf_link_state {
  template <typename, int = 0> struct __BYPASSifla_vf_link_state {};
  template <typename, int> friend struct __BYPASSifla_vf_link_state;
 __u32 vf;
 __u32 link_state;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 IFLA_VF_PORT_UNSPEC,
 IFLA_VF_PORT,
 __IFLA_VF_PORT_MAX,
};



enum {
 IFLA_PORT_UNSPEC,
 IFLA_PORT_VF,
 IFLA_PORT_PROFILE,
 IFLA_PORT_VSI_TYPE,
 IFLA_PORT_INSTANCE_UUID,
 IFLA_PORT_HOST_UUID,
 IFLA_PORT_REQUEST,
 IFLA_PORT_RESPONSE,
 __IFLA_PORT_MAX,
};







enum {
 PORT_REQUEST_PREASSOCIATE = 0,
 PORT_REQUEST_PREASSOCIATE_RR,
 PORT_REQUEST_ASSOCIATE,
 PORT_REQUEST_DISASSOCIATE,
};

enum {
 PORT_VDP_RESPONSE_SUCCESS = 0,
 PORT_VDP_RESPONSE_INVALID_FORMAT,
 PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES,
 PORT_VDP_RESPONSE_UNUSED_VTID,
 PORT_VDP_RESPONSE_VTID_VIOLATION,
 PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION,
 PORT_VDP_RESPONSE_OUT_OF_SYNC,

 PORT_PROFILE_RESPONSE_SUCCESS = 0x100,
 PORT_PROFILE_RESPONSE_INPROGRESS,
 PORT_PROFILE_RESPONSE_INVALID,
 PORT_PROFILE_RESPONSE_BADSTATE,
 PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES,
 PORT_PROFILE_RESPONSE_ERROR,
};

struct ifla_port_vsi {
  template <typename, int = 0> struct __BYPASSifla_port_vsi {};
  template <typename, int> friend struct __BYPASSifla_port_vsi;
 __u8 vsi_mgr_id;
 __u8 vsi_type_id[3];
 __u8 vsi_type_version;
 __u8 pad[3];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




enum {
 IFLA_IPOIB_UNSPEC,
 IFLA_IPOIB_PKEY,
 IFLA_IPOIB_MODE,
 IFLA_IPOIB_UMCAST,
 __IFLA_IPOIB_MAX
};

enum {
 IPOIB_MODE_DATAGRAM = 0,
 IPOIB_MODE_CONNECTED = 1,
};






enum {
 IFLA_HSR_UNSPEC,
 IFLA_HSR_SLAVE1,
 IFLA_HSR_SLAVE2,
 IFLA_HSR_MULTICAST_SPEC,
 IFLA_HSR_SUPERVISION_ADDR,
 IFLA_HSR_SEQ_NR,
 __IFLA_HSR_MAX,
};



struct ifla_vf_info {
  template <typename, int = 0> struct __BYPASSifla_vf_info {};
  template <typename, int> friend struct __BYPASSifla_vf_info;
 __u32 vf;
 __u8 mac[32];
 __u32 vlan;
 __u32 qos;
 __u32 tx_rate;
 __u32 spoofchk;
 __u32 linkstate;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
        IF_PORT_UNKNOWN = 0,
        IF_PORT_10BASE2,
        IF_PORT_10BASET,
        IF_PORT_AUI,
        IF_PORT_100BASET,
        IF_PORT_100BASETX,
        IF_PORT_100BASEFX
};

struct netpoll_info;
struct device;
struct phy_device;

struct wireless_dev;




void netdev_set_default_ethtool_ops(struct net_device *dev,
        struct ethtool_ops *ops);
enum netdev_tx {
 __NETDEV_TX_MIN = (-((int)(~0U>>1)) - 1),
 NETDEV_TX_OK = 0x00,
 NETDEV_TX_BUSY = 0x10,
 NETDEV_TX_LOCKED = 0x20,
};
typedef enum netdev_tx netdev_tx_t;





static inline bool dev_xmit_complete(int rc)
{






 if (__builtin_expect(!!(rc < 0x0f), 1))
  return _true;

 return _false;
}
struct net_device_stats {
  template <typename, int = 0> struct __BYPASSnet_device_stats {};
  template <typename, int> friend struct __BYPASSnet_device_stats;
 unsigned long rx_packets;
 unsigned long tx_packets;
 unsigned long rx_bytes;
 unsigned long tx_bytes;
 unsigned long rx_errors;
 unsigned long tx_errors;
 unsigned long rx_dropped;
 unsigned long tx_dropped;
 unsigned long multicast;
 unsigned long collisions;
 unsigned long rx_length_errors;
 unsigned long rx_over_errors;
 unsigned long rx_crc_errors;
 unsigned long rx_frame_errors;
 unsigned long rx_fifo_errors;
 unsigned long rx_missed_errors;
 unsigned long tx_aborted_errors;
 unsigned long tx_carrier_errors;
 unsigned long tx_fifo_errors;
 unsigned long tx_heartbeat_errors;
 unsigned long tx_window_errors;
 unsigned long rx_compressed;
 unsigned long tx_compressed;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






extern struct static_key rps_needed;


struct neighbour;
struct neigh_parms;
struct sk_buff;

struct netdev_hw_addr {
  template <typename, int = 0> struct __BYPASSnetdev_hw_addr {};
  template <typename, int> friend struct __BYPASSnetdev_hw_addr;
 struct list_head list;
 unsigned char addr[32];
 unsigned char type;





 bool global_use;
 int sync_cnt;
 int refcount;
 int synced;
 struct callback_head callback_head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netdev_hw_addr_list {
  template <typename, int = 0> struct __BYPASSnetdev_hw_addr_list {};
  template <typename, int> friend struct __BYPASSnetdev_hw_addr_list;
 struct list_head list;
 int count;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct hh_cache {
  template <typename, int = 0> struct __BYPASShh_cache {};
  template <typename, int> friend struct __BYPASShh_cache;
 u16 hh_len;
 u16 __pad;
 seqlock_t hh_lock;







 unsigned long hh_data[(((128)+(16 -1))&~(16 - 1)) / sizeof(long)];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct header_ops {
  template <typename, int = 0> struct __BYPASSheader_ops {};
  template <typename, int> friend struct __BYPASSheader_ops;
 int (*create) (struct sk_buff *skb, struct net_device *dev,
      unsigned short type, void *daddr,
      void *saddr, unsigned int len);
 int (*parse)( struct sk_buff *skb, unsigned char *haddr);
 int (*rebuild)(struct sk_buff *skb);
 int (*cache)( struct neighbour *neigh, struct hh_cache *hh, __be16 type);
 void (*cache_update)(struct hh_cache *hh,
    struct net_device *dev,
    unsigned char *haddr);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






enum netdev_state_t {
 __LINK_STATE_START,
 __LINK_STATE_PRESENT,
 __LINK_STATE_NOCARRIER,
 __LINK_STATE_LINKWATCH_PENDING,
 __LINK_STATE_DORMANT,
};






struct netdev_boot_setup {
  template <typename, int = 0> struct __BYPASSnetdev_boot_setup {};
  template <typename, int> friend struct __BYPASSnetdev_boot_setup;
 char name[16];
 struct ifmap map;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) netdev_boot_setup(char *str);




struct napi_struct {
  template <typename, int = 0> struct __BYPASSnapi_struct {};
  template <typename, int> friend struct __BYPASSnapi_struct;






 struct list_head poll_list;

 unsigned long state;
 int weight;
 unsigned int gro_count;
 int (*poll)(struct napi_struct *, int);

 spinlock_t poll_lock;
 int poll_owner;

 struct net_device *dev;
 struct sk_buff *gro_list;
 struct sk_buff *skb;
 struct list_head dev_list;
 struct hlist_node napi_hash_node;
 unsigned int napi_id;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 NAPI_STATE_SCHED,
 NAPI_STATE_DISABLE,
 NAPI_STATE_NPSVC,
 NAPI_STATE_HASHED,
};

enum gro_result {
 GRO_MERGED,
 GRO_MERGED_FREE,
 GRO_HELD,
 GRO_NORMAL,
 GRO_DROP,
};
typedef enum gro_result gro_result_t;
enum rx_handler_result {
 RX_HANDLER_CONSUMED,
 RX_HANDLER_ANOTHER,
 RX_HANDLER_EXACT,
 RX_HANDLER_PASS,
};
typedef enum rx_handler_result rx_handler_result_t;
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **pskb);

void __napi_schedule(struct napi_struct *n);

static inline bool napi_disable_pending(struct napi_struct *n)
{
 return (__builtin_constant_p((NAPI_STATE_DISABLE)) ? constant_test_bit((NAPI_STATE_DISABLE), (&n->state)) : variable_test_bit((NAPI_STATE_DISABLE), (&n->state)));
}
static inline bool napi_schedule_prep(struct napi_struct *n)
{
 return !napi_disable_pending(n) &&
  !test_and_set_bit(NAPI_STATE_SCHED, &n->state);
}
static inline void napi_schedule(struct napi_struct *n)
{
 if (napi_schedule_prep(n))
  __napi_schedule(n);
}


static inline bool napi_reschedule(struct napi_struct *napi)
{
 if (napi_schedule_prep(napi)) {
  __napi_schedule(napi);
  return _true;
 }
 return _false;
}







void __napi_complete(struct napi_struct *n);
void napi_complete(struct napi_struct *n);
struct napi_struct *napi_by_id(unsigned int napi_id);







void napi_hash_add(struct napi_struct *napi);
void napi_hash_del(struct napi_struct *napi);
static inline void napi_disable(struct napi_struct *n)
{
 do { _cond_resched(); } while (0);
 set_bit(NAPI_STATE_DISABLE, &n->state);
 while (test_and_set_bit(NAPI_STATE_SCHED, &n->state))
  msleep(1);
 clear_bit(NAPI_STATE_DISABLE, &n->state);
}
static inline void napi_enable(struct napi_struct *n)
{
 (!(__builtin_constant_p((NAPI_STATE_SCHED)) ? constant_test_bit((NAPI_STATE_SCHED), (&n->state)) : variable_test_bit((NAPI_STATE_SCHED), (&n->state))));
 __asm__ __volatile__("": : :"memory");
 clear_bit(NAPI_STATE_SCHED, &n->state);
}
static inline void napi_synchronize( struct napi_struct *n)
{
 while ((__builtin_constant_p((NAPI_STATE_SCHED)) ? constant_test_bit((NAPI_STATE_SCHED), (&n->state)) : variable_test_bit((NAPI_STATE_SCHED), (&n->state))))
  msleep(1);
}




enum netdev_queue_state_t {
 __QUEUE_STATE_DRV_XOFF,
 __QUEUE_STATE_STACK_XOFF,
 __QUEUE_STATE_FROZEN,




};
struct netdev_queue {
  template <typename, int = 0> struct __BYPASSnetdev_queue {};
  template <typename, int> friend struct __BYPASSnetdev_queue;



 struct net_device *dev;
 struct Qdisc *qdisc;
 struct Qdisc *qdisc_sleeping;

 struct kobject kobj;


 int numa_node;




 spinlock_t _xmit_lock __attribute__((__aligned__((1 << (6)))));
 int xmit_lock_owner;



 unsigned long trans_start;





 unsigned long trans_timeout;

 unsigned long state;


 struct dql dql;


  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));

static inline int netdev_queue_numa_node_read( struct netdev_queue *q)
{

 return q->numa_node;



}

static inline void netdev_queue_numa_node_write(struct netdev_queue *q, int node)
{

 q->numa_node = node;

}






struct rps_map {
  template <typename, int = 0> struct __BYPASSrps_map {};
  template <typename, int> friend struct __BYPASSrps_map;
 unsigned int len;
 struct callback_head rcu;
 u16 cpus[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct rps_dev_flow {
  template <typename, int = 0> struct __BYPASSrps_dev_flow {};
  template <typename, int> friend struct __BYPASSrps_dev_flow;
 u16 cpu;
 u16 filter;
 unsigned int last_qtail;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct rps_dev_flow_table {
  template <typename, int = 0> struct __BYPASSrps_dev_flow_table {};
  template <typename, int> friend struct __BYPASSrps_dev_flow_table;
 unsigned int mask;
 struct callback_head rcu;
 struct rps_dev_flow flows[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct rps_sock_flow_table {
  template <typename, int = 0> struct __BYPASSrps_sock_flow_table {};
  template <typename, int> friend struct __BYPASSrps_sock_flow_table;
 unsigned int mask;
 u16 ents[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





static inline void rps_record_sock_flow(struct rps_sock_flow_table *table,
     u32 hash)
{
 if (table && hash) {
  unsigned int cpu, index = hash & table->mask;


  cpu = (({ typeof((cpu_number)) pscr_ret__; do { void *__vpp_verify = (typeof((&((cpu_number))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((cpu_number))) { case 1: pscr_ret__ = ({ typeof(((cpu_number))) pfo_ret__; switch (sizeof(((cpu_number)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((cpu_number))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 2: pscr_ret__ = ({ typeof(((cpu_number))) pfo_ret__; switch (sizeof(((cpu_number)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((cpu_number))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 4: pscr_ret__ = ({ typeof(((cpu_number))) pfo_ret__; switch (sizeof(((cpu_number)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((cpu_number))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; default: __bad_percpu_size(); } pfo_ret__; });break; case 8: pscr_ret__ = ({ typeof(((cpu_number))) pfo_ret__; switch (sizeof(((cpu_number)))) { case 1: asm("mov" "b ""%%""gs"":" "%P" "1"",%0" : "=q" (pfo_ret__) : "m"((cpu_number))); break; case 2: asm("mov" "w ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; case 4: asm("mov" "l ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; case 8: asm("mov" "q ""%%""gs"":" "%P" "1"",%0" : "=r" (pfo_ret__) : "m"((cpu_number))); break; default: __bad_percpu_size(); } pfo_ret__; });break; default: __bad_size_call_parameter();break; } pscr_ret__; }));

  if (table->ents[index] != cpu)
   table->ents[index] = cpu;
 }
}

static inline void rps_reset_sock_flow(struct rps_sock_flow_table *table,
           u32 hash)
{
 if (table && hash)
  table->ents[hash & table->mask] = 0xffff;
}

extern struct rps_sock_flow_table *rps_sock_flow_table;


bool rps_may_expire_flow(struct net_device *dev, u16 rxq_index, u32 flow_id,
    u16 filter_id);



struct netdev_rx_queue {
  template <typename, int = 0> struct __BYPASSnetdev_rx_queue {};
  template <typename, int> friend struct __BYPASSnetdev_rx_queue;
 struct rps_map *rps_map;
 struct rps_dev_flow_table *rps_flow_table;
 struct kobject kobj;
 struct net_device *dev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));







struct xps_map {
  template <typename, int = 0> struct __BYPASSxps_map {};
  template <typename, int> friend struct __BYPASSxps_map;
 unsigned int len;
 unsigned int alloc_len;
 struct callback_head rcu;
 u16 queues[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct xps_dev_maps {
  template <typename, int = 0> struct __BYPASSxps_dev_maps {};
  template <typename, int> friend struct __BYPASSxps_dev_maps;
 struct callback_head rcu;
 struct xps_map *cpu_map[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct netdev_tc_txq {
  template <typename, int = 0> struct __BYPASSnetdev_tc_txq {};
  template <typename, int> friend struct __BYPASSnetdev_tc_txq;
 u16 count;
 u16 offset;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct netdev_fcoe_hbainfo {
  template <typename, int = 0> struct __BYPASSnetdev_fcoe_hbainfo {};
  template <typename, int> friend struct __BYPASSnetdev_fcoe_hbainfo;
 char manufacturer[64];
 char serial_number[64];
 char hardware_version[64];
 char driver_version[64];
 char optionrom_version[64];
 char firmware_version[64];
 char model[256];
 char model_description[256];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct netdev_phys_port_id {
  template <typename, int = 0> struct __BYPASSnetdev_phys_port_id {};
  template <typename, int> friend struct __BYPASSnetdev_phys_port_id;
 unsigned char id[32];
 unsigned char id_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

typedef u16 (*select_queue_fallback_t)(struct net_device *dev,
           struct sk_buff *skb);
struct net_device_ops {
  template <typename, int = 0> struct __BYPASSnet_device_ops {};
  template <typename, int> friend struct __BYPASSnet_device_ops;
 int (*ndo_init)(struct net_device *dev);
 void (*ndo_uninit)(struct net_device *dev);
 int (*ndo_open)(struct net_device *dev);
 int (*ndo_stop)(struct net_device *dev);
 netdev_tx_t (*ndo_start_xmit) (struct sk_buff *skb,
         struct net_device *dev);
 u16 (*ndo_select_queue)(struct net_device *dev,
          struct sk_buff *skb,
          void *accel_priv,
          select_queue_fallback_t fallback);
 void (*ndo_change_rx_flags)(struct net_device *dev,
             int flags);
 void (*ndo_set_rx_mode)(struct net_device *dev);
 int (*ndo_set_mac_address)(struct net_device *dev,
             void *addr);
 int (*ndo_validate_addr)(struct net_device *dev);
 int (*ndo_do_ioctl)(struct net_device *dev,
             struct ifreq *ifr, int cmd);
 int (*ndo_set_config)(struct net_device *dev,
               struct ifmap *map);
 int (*ndo_change_mtu)(struct net_device *dev,
        int new_mtu);
 int (*ndo_neigh_setup)(struct net_device *dev,
         struct neigh_parms *);
 void (*ndo_tx_timeout) (struct net_device *dev);

 struct rtnl_link_stats64* (*ndo_get_stats64)(struct net_device *dev,
           struct rtnl_link_stats64 *storage);
 struct net_device_stats* (*ndo_get_stats)(struct net_device *dev);

 int (*ndo_vlan_rx_add_vid)(struct net_device *dev,
             __be16 proto, u16 vid);
 int (*ndo_vlan_rx_kill_vid)(struct net_device *dev,
              __be16 proto, u16 vid);

 void (*ndo_poll_controller)(struct net_device *dev);
 int (*ndo_netpoll_setup)(struct net_device *dev,
           struct netpoll_info *info,
           gfp_t gfp);
 void (*ndo_netpoll_cleanup)(struct net_device *dev);


 int (*ndo_busy_poll)(struct napi_struct *dev);

 int (*ndo_set_vf_mac)(struct net_device *dev,
        int queue, u8 *mac);
 int (*ndo_set_vf_vlan)(struct net_device *dev,
         int queue, u16 vlan, u8 qos);
 int (*ndo_set_vf_tx_rate)(struct net_device *dev,
            int vf, int rate);
 int (*ndo_set_vf_spoofchk)(struct net_device *dev,
             int vf, bool setting);
 int (*ndo_get_vf_config)(struct net_device *dev,
           int vf,
           struct ifla_vf_info *ivf);
 int (*ndo_set_vf_link_state)(struct net_device *dev,
        int vf, int link_state);
 int (*ndo_set_vf_port)(struct net_device *dev,
         int vf,
         struct nlattr *port[]);
 int (*ndo_get_vf_port)(struct net_device *dev,
         int vf, struct sk_buff *skb);
 int (*ndo_setup_tc)(struct net_device *dev, u8 tc);

 int (*ndo_fcoe_enable)(struct net_device *dev);
 int (*ndo_fcoe_disable)(struct net_device *dev);
 int (*ndo_fcoe_ddp_setup)(struct net_device *dev,
            u16 xid,
            struct scatterlist *sgl,
            unsigned int sgc);
 int (*ndo_fcoe_ddp_done)(struct net_device *dev,
           u16 xid);
 int (*ndo_fcoe_ddp_target)(struct net_device *dev,
             u16 xid,
             struct scatterlist *sgl,
             unsigned int sgc);
 int (*ndo_fcoe_get_hbainfo)(struct net_device *dev,
       struct netdev_fcoe_hbainfo *hbainfo);





 int (*ndo_fcoe_get_wwn)(struct net_device *dev,
          u64 *wwn, int type);



 int (*ndo_rx_flow_steer)(struct net_device *dev,
           struct sk_buff *skb,
           u16 rxq_index,
           u32 flow_id);

 int (*ndo_add_slave)(struct net_device *dev,
       struct net_device *slave_dev);
 int (*ndo_del_slave)(struct net_device *dev,
       struct net_device *slave_dev);
 netdev_features_t (*ndo_fix_features)(struct net_device *dev,
          netdev_features_t features);
 int (*ndo_set_features)(struct net_device *dev,
          netdev_features_t features);
 int (*ndo_neigh_construct)(struct neighbour *n);
 void (*ndo_neigh_destroy)(struct neighbour *n);

 int (*ndo_fdb_add)(struct ndmsg *ndm,
            struct nlattr *tb[],
            struct net_device *dev,
            unsigned char *addr,
            u16 flags);
 int (*ndo_fdb_del)(struct ndmsg *ndm,
            struct nlattr *tb[],
            struct net_device *dev,
            unsigned char *addr);
 int (*ndo_fdb_dump)(struct sk_buff *skb,
      struct netlink_callback *cb,
      struct net_device *dev,
      int idx);

 int (*ndo_bridge_setlink)(struct net_device *dev,
            struct nlmsghdr *nlh);
 int (*ndo_bridge_getlink)(struct sk_buff *skb,
            u32 pid, u32 seq,
            struct net_device *dev,
            u32 filter_mask);
 int (*ndo_bridge_dellink)(struct net_device *dev,
            struct nlmsghdr *nlh);
 int (*ndo_change_carrier)(struct net_device *dev,
            bool new_carrier);
 int (*ndo_get_phys_port_id)(struct net_device *dev,
       struct netdev_phys_port_id *ppid);
 void (*ndo_add_vxlan_port)(struct net_device *dev,
            sa_family_t sa_family,
            __be16 port);
 void (*ndo_del_vxlan_port)(struct net_device *dev,
            sa_family_t sa_family,
            __be16 port);

 void* (*ndo_dfwd_add_station)(struct net_device *pdev,
       struct net_device *dev);
 void (*ndo_dfwd_del_station)(struct net_device *pdev,
       void *priv);

 netdev_tx_t (*ndo_dfwd_start_xmit) (struct sk_buff *skb,
       struct net_device *dev,
       void *priv);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum _netreg {
       NETREG_UNINITIALIZED=0,
       NETREG_REGISTERED,
       NETREG_UNREGISTERING,
       NETREG_UNREGISTERED,
       NETREG_RELEASED,
       NETREG_DUMMY,
};


struct net_device {
  template <typename, int = 0> struct __BYPASSnet_device {};
  template <typename, int> friend struct __BYPASSnet_device;






 char name[16];


 struct hlist_node name_hlist;


 char *ifalias;





 unsigned long mem_end;
 unsigned long mem_start;
 unsigned long base_addr;
 int irq;






 unsigned long state;

 struct list_head dev_list;
 struct list_head napi_list;
 struct list_head unreg_list;
 struct list_head close_list;


 struct {
  struct list_head upper;
  struct list_head lower;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} adj_list;


 struct {
  struct list_head upper;
  struct list_head lower;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} all_adj_list;



 netdev_features_t features;

 netdev_features_t hw_features;

 netdev_features_t wanted_features;

 netdev_features_t vlan_features;





 netdev_features_t hw_enc_features;

 netdev_features_t mpls_features;


 int ifindex;
 int iflink;

 struct net_device_stats stats;
 atomic_long_t rx_dropped;






 struct iw_handler_def * wireless_handlers;

 struct iw_public_data * wireless_data;


 struct net_device_ops *netdev_ops;
 struct ethtool_ops *ethtool_ops;
 struct forwarding_accel_ops *fwd_ops;


 struct header_ops *header_ops;

 unsigned int flags;
 unsigned int priv_flags;

 unsigned short gflags;
 unsigned short padded;

 unsigned char operstate;
 unsigned char link_mode;

 unsigned char if_port;
 unsigned char dma;

 unsigned int mtu;
 unsigned short type;
 unsigned short hard_header_len;





 unsigned short needed_headroom;
 unsigned short needed_tailroom;


 unsigned char perm_addr[32];
 unsigned char addr_assign_type;
 unsigned char addr_len;
 unsigned short neigh_priv_len;
 unsigned short dev_id;



 spinlock_t addr_list_lock;
 struct netdev_hw_addr_list uc;
 struct netdev_hw_addr_list mc;
 struct netdev_hw_addr_list dev_addrs;



 struct kset *queues_kset;


 bool uc_promisc;
 unsigned int promiscuity;
 unsigned int allmulti;





 struct vlan_info *vlan_info;


 struct dsa_switch_tree *dsa_ptr;

 void *atalk_ptr;
 struct in_device *ip_ptr;
 struct dn_dev *dn_ptr;
 struct inet6_dev *ip6_ptr;
 void *ax25_ptr;
 struct wireless_dev *ieee80211_ptr;





 unsigned long last_rx;
 unsigned char *dev_addr;





 struct netdev_rx_queue *_rx;


 unsigned int num_rx_queues;


 unsigned int real_num_rx_queues;



 rx_handler_func_t *rx_handler;
 void *rx_handler_data;

 struct netdev_queue *ingress_queue;
 unsigned char broadcast[32];





 struct netdev_queue *_tx __attribute__((__aligned__((1 << (6)))));


 unsigned int num_tx_queues;


 unsigned int real_num_tx_queues;


 struct Qdisc *qdisc;

 unsigned long tx_queue_len;
 spinlock_t tx_global_lock;


 struct xps_dev_maps *xps_maps;





 struct cpu_rmap *rx_cpu_rmap;
 unsigned long trans_start;

 int watchdog_timeo;
 struct timer_list watchdog_timer;


 int *pcpu_refcnt;


 struct list_head todo_list;

 struct hlist_node index_hlist;

 struct list_head link_watch_list;
        struct _nd_state {
  template <typename, int = 0> struct __BYPASS_ZN10net_device9_nd_stateE {};
  template <typename, int> friend struct __BYPASS_ZN10net_device9_nd_stateE;
            enum _netreg reg_state:8;

        
  friend class ::Introspect;
  friend class ::MyIntrospect;
} nd_state;


 bool dismantle;

 enum {
  RTNL_LINK_INITIALIZED,
  RTNL_LINK_INITIALIZING,
 } rtnl_link_state:16;


 void (*destructor)(struct net_device *dev);


 struct netpoll_info *npinfo;




 struct net *nd_net;



 union {
  void *ml_priv;
  struct pcpu_lstats *lstats;
  struct pcpu_tstats *tstats;
  struct pcpu_dstats *dstats;
  struct pcpu_vstats *vstats;
 };

 struct garp_port *garp_port;

 struct mrp_port *mrp_port;


 struct device dev;

 struct attribute_group *sysfs_groups[4];


 struct rtnl_link_ops *rtnl_link_ops;



 unsigned int gso_max_size;

 u16 gso_max_segs;



 struct dcbnl_rtnl_ops *dcbnl_ops;

 u8 num_tc;
 struct netdev_tc_txq tc_to_txq[16];
 u8 prio_tc_map[15 + 1];



 unsigned int fcoe_ddp_xid;


 struct netprio_map *priomap;


 struct phy_device *phydev;

 struct lock_class_key *qdisc_tx_busylock;


 int group;

 struct pm_qos_request pm_qos_req;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device11prio_tc_mapE_2018_0 {
  typedef TJP__ZN10net_device11prio_tc_mapE_2018_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device11prio_tc_mapE_2018(unsigned char *source) {
  ::u8 __result_buffer;
  typedef TJP__ZN10net_device11prio_tc_mapE_2018_0< ::u8 , ::net_device , ::u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::u8 &)__result_buffer;
}
static inline
int netdev_get_prio_tc_map( struct net_device *dev, u32 prio)
{
 return __get__ZN10net_device11prio_tc_mapE_2018(&dev->prio_tc_map[prio & 15]);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device6num_tcE_2019_0 {
  typedef TJP__ZN10net_device6num_tcE_2019_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device6num_tcE_2019(unsigned char *source) {
  ::u8 __result_buffer;
  typedef TJP__ZN10net_device6num_tcE_2019_0< ::u8 , ::net_device , ::u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::u8 &)__result_buffer;
}
static inline
int netdev_set_prio_tc_map(struct net_device *dev, u8 prio, u8 tc)
{
 if (tc >= __get__ZN10net_device6num_tcE_2019(&dev->num_tc))
  return -22;

 dev->prio_tc_map[prio & 15] = tc & 15;
 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device9tc_to_txqE_2020_0 {
  typedef TJP__ZN10net_device9tc_to_txqE_2020_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 16;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return sizeof(netdev_tc_txq);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netdev_tc_txq * __get__ZN10net_device9tc_to_txqE_2020(netdev_tc_txq *source) {
  ::netdev_tc_txq *__result_buffer;
  typedef TJP__ZN10net_device9tc_to_txqE_2020_0< ::netdev_tc_txq *, ::net_device , ::netdev_tc_txq [16] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_tc_txq *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device11prio_tc_mapE_2021_0 {
  typedef TJP__ZN10net_device11prio_tc_mapE_2021_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 16;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned char);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char * __get__ZN10net_device11prio_tc_mapE_2021(unsigned char *source) {
  ::u8 *__result_buffer;
  typedef TJP__ZN10net_device11prio_tc_mapE_2021_0< ::u8 *, ::net_device , ::u8 [16] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::u8 *&)__result_buffer;
}
static inline
void netdev_reset_tc(struct net_device *dev)
{
 dev->num_tc = 0;
 memset(__get__ZN10net_device9tc_to_txqE_2020(dev->tc_to_txq), 0, sizeof(dev->tc_to_txq));
 memset(__get__ZN10net_device11prio_tc_mapE_2021(dev->prio_tc_map), 0, sizeof(dev->prio_tc_map));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device6num_tcE_2022_0 {
  typedef TJP__ZN10net_device6num_tcE_2022_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device6num_tcE_2022(unsigned char *source) {
  ::u8 __result_buffer;
  typedef TJP__ZN10net_device6num_tcE_2022_0< ::u8 , ::net_device , ::u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::u8 &)__result_buffer;
}
static inline
int netdev_set_tc_queue(struct net_device *dev, u8 tc, u16 count, u16 offset)
{
 if (tc >= __get__ZN10net_device6num_tcE_2022(&dev->num_tc))
  return -22;

 dev->tc_to_txq[tc].count = count;
 dev->tc_to_txq[tc].offset = offset;
 return 0;
}

static inline
int netdev_set_num_tc(struct net_device *dev, u8 num_tc)
{
 if (num_tc > 16)
  return -22;

 dev->num_tc = num_tc;
 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device6num_tcE_2023_0 {
  typedef TJP__ZN10net_device6num_tcE_2023_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device6num_tcE_2023(unsigned char *source) {
  ::u8 __result_buffer;
  typedef TJP__ZN10net_device6num_tcE_2023_0< ::u8 , ::net_device , ::u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::u8 &)__result_buffer;
}
static inline
int netdev_get_num_tc(struct net_device *dev)
{
 return __get__ZN10net_device6num_tcE_2023(&dev->num_tc);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device3_txE_2024_0 {
  typedef TJP__ZN10net_device3_txE_2024_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netdev_queue __get__ZN10net_device3_txE_2024(netdev_queue *source) {
  AC::ResultBuffer< ::netdev_queue  > __result_buffer;
  typedef TJP__ZN10net_device3_txE_2024_0< ::netdev_queue , ::net_device , ::netdev_queue  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_queue &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device3_txE_2025_0 {
  typedef TJP__ZN10net_device3_txE_2025_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return true;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netdev_queue * __get__ZN10net_device3_txE_2025(netdev_queue * *source) {
  ::netdev_queue *__result_buffer;
  typedef TJP__ZN10net_device3_txE_2025_0< ::netdev_queue *, ::net_device , ::netdev_queue * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_queue *&)__result_buffer;
}
static inline
struct netdev_queue *netdev_get_tx_queue( struct net_device *dev,
      unsigned int index)
{
 return &__get__ZN10net_device3_txE_2024(&__get__ZN10net_device3_txE_2025(&dev->_tx)[index]);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_2026_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_2026_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_2026(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_2026_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device3_txE_2027_0 {
  typedef TJP__ZN10net_device3_txE_2027_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netdev_queue __get__ZN10net_device3_txE_2027(netdev_queue *source) {
  AC::ResultBuffer< ::netdev_queue  > __result_buffer;
  typedef TJP__ZN10net_device3_txE_2027_0< ::netdev_queue , ::net_device , ::netdev_queue  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_queue &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device3_txE_2028_0 {
  typedef TJP__ZN10net_device3_txE_2028_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return true;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netdev_queue * __get__ZN10net_device3_txE_2028(netdev_queue * *source) {
  ::netdev_queue *__result_buffer;
  typedef TJP__ZN10net_device3_txE_2028_0< ::netdev_queue *, ::net_device , ::netdev_queue * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_queue *&)__result_buffer;
}
static inline void netdev_for_each_tx_queue(struct net_device *dev,
         void (*f)(struct net_device *,
            struct netdev_queue *,
            void *),
         void *arg)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_2026(&dev->num_tx_queues); i++)
  f(dev, &__get__ZN10net_device3_txE_2027(&__get__ZN10net_device3_txE_2028(&dev->_tx)[i]), arg);
}

struct netdev_queue *netdev_pick_tx(struct net_device *dev,
        struct sk_buff *skb,
        void *accel_priv);




static inline
struct net *dev_net( struct net_device *dev)
{
 return read_pnet(&dev->nd_net);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device6nd_netE_2029_0 {
  typedef TJP__ZN10net_device6nd_netE_2029_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline net * __get__ZN10net_device6nd_netE_2029(net * *source) {
  ::net *__result_buffer;
  typedef TJP__ZN10net_device6nd_netE_2029_0< ::net *, ::net_device , ::net * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::net *&)__result_buffer;
}
static inline
void dev_net_set(struct net_device *dev, struct net *net)
{

 release_net(__get__ZN10net_device6nd_netE_2029(&dev->nd_net));
 dev->nd_net = hold_net(net);

}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device7dsa_ptrE_2030_0 {
  typedef TJP__ZN10net_device7dsa_ptrE_2030_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dsa_switch_tree * __get__ZN10net_device7dsa_ptrE_2030(dsa_switch_tree * *source) {
  ::dsa_switch_tree *__result_buffer;
  typedef TJP__ZN10net_device7dsa_ptrE_2030_0< ::dsa_switch_tree *, ::net_device , ::dsa_switch_tree * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dsa_switch_tree *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device7dsa_ptrE_2031_0 {
  typedef TJP__ZN10net_device7dsa_ptrE_2031_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dsa_switch_tree * __get__ZN10net_device7dsa_ptrE_2031(dsa_switch_tree * *source) {
  ::dsa_switch_tree *__result_buffer;
  typedef TJP__ZN10net_device7dsa_ptrE_2031_0< ::dsa_switch_tree *, ::net_device , ::dsa_switch_tree * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dsa_switch_tree *&)__result_buffer;
}
static inline bool netdev_uses_dsa_tags(struct net_device *dev)
{

 if (__get__ZN10net_device7dsa_ptrE_2030(&dev->dsa_ptr) != 0)
  return dsa_uses_dsa_tags(__get__ZN10net_device7dsa_ptrE_2031(&dev->dsa_ptr));


 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device7dsa_ptrE_2032_0 {
  typedef TJP__ZN10net_device7dsa_ptrE_2032_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dsa_switch_tree * __get__ZN10net_device7dsa_ptrE_2032(dsa_switch_tree * *source) {
  ::dsa_switch_tree *__result_buffer;
  typedef TJP__ZN10net_device7dsa_ptrE_2032_0< ::dsa_switch_tree *, ::net_device , ::dsa_switch_tree * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dsa_switch_tree *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device7dsa_ptrE_2033_0 {
  typedef TJP__ZN10net_device7dsa_ptrE_2033_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dsa_switch_tree * __get__ZN10net_device7dsa_ptrE_2033(dsa_switch_tree * *source) {
  ::dsa_switch_tree *__result_buffer;
  typedef TJP__ZN10net_device7dsa_ptrE_2033_0< ::dsa_switch_tree *, ::net_device , ::dsa_switch_tree * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dsa_switch_tree *&)__result_buffer;
}
static inline bool netdev_uses_trailer_tags(struct net_device *dev)
{

 if (__get__ZN10net_device7dsa_ptrE_2032(&dev->dsa_ptr) != 0)
  return dsa_uses_trailer_tags(__get__ZN10net_device7dsa_ptrE_2033(&dev->dsa_ptr));


 return 0;
}







static inline void *netdev_priv( struct net_device *dev)
{
 return (char *)dev + ((((sizeof(struct net_device))) + ((typeof((sizeof(struct net_device))))((32)) - 1)) & ~((typeof((sizeof(struct net_device))))((32)) - 1));
}
void netif_napi_add(struct net_device *dev, struct napi_struct *napi,
      int (*poll)(struct napi_struct *, int), int weight);







void netif_napi_del(struct napi_struct *napi);

struct napi_gro_cb {
  template <typename, int = 0> struct __BYPASSnapi_gro_cb {};
  template <typename, int> friend struct __BYPASSnapi_gro_cb;

 void *frag0;


 unsigned int frag0_len;


 int data_offset;


 u16 flush;


 u16 flush_id;


 u16 count;


 u8 same_flow;


 u8 free;




 unsigned long age;


 u16 proto;


 u16 udp_mark;


 __wsum csum;


 struct sk_buff *last;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct packet_type {
  template <typename, int = 0> struct __BYPASSpacket_type {};
  template <typename, int> friend struct __BYPASSpacket_type;
 __be16 type;
 struct net_device *dev;
 int (*func) (struct sk_buff *,
      struct net_device *,
      struct packet_type *,
      struct net_device *);
 bool (*id_match)(struct packet_type *ptype,
         struct sock *sk);
 void *af_packet_priv;
 struct list_head list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct offload_callbacks {
  template <typename, int = 0> struct __BYPASSoffload_callbacks {};
  template <typename, int> friend struct __BYPASSoffload_callbacks;
 struct sk_buff *(*gso_segment)(struct sk_buff *skb,
      netdev_features_t features);
 int (*gso_send_check)(struct sk_buff *skb);
 struct sk_buff **(*gro_receive)(struct sk_buff **head,
            struct sk_buff *skb);
 int (*gro_complete)(struct sk_buff *skb, int nhoff);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct packet_offload {
  template <typename, int = 0> struct __BYPASSpacket_offload {};
  template <typename, int> friend struct __BYPASSpacket_offload;
 __be16 type;
 struct offload_callbacks callbacks;
 struct list_head list;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct udp_offload {
  template <typename, int = 0> struct __BYPASSudp_offload {};
  template <typename, int> friend struct __BYPASSudp_offload;
 __be16 port;
 struct offload_callbacks callbacks;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct pcpu_sw_netstats {
  template <typename, int = 0> struct __BYPASSpcpu_sw_netstats {};
  template <typename, int> friend struct __BYPASSpcpu_sw_netstats;
 u64 rx_packets;
 u64 rx_bytes;
 u64 tx_packets;
 u64 tx_bytes;
 struct u64_stats_sync syncp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
int register_netdevice_notifier(struct notifier_block *nb);
int unregister_netdevice_notifier(struct notifier_block *nb);

struct netdev_notifier_info {
  template <typename, int = 0> struct __BYPASSnetdev_notifier_info {};
  template <typename, int> friend struct __BYPASSnetdev_notifier_info;
 struct net_device *dev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct netdev_notifier_change_info {
  template <typename, int = 0> struct __BYPASSnetdev_notifier_change_info {};
  template <typename, int> friend struct __BYPASSnetdev_notifier_change_info;
 struct netdev_notifier_info info;
 unsigned int flags_changed;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void netdev_notifier_info_init(struct netdev_notifier_info *info,
          struct net_device *dev)
{
 info->dev = dev;
}

static inline struct net_device *
netdev_notifier_info_to_dev( struct netdev_notifier_info *info)
{
 return info->dev;
}

int call_netdevice_notifiers_info(unsigned long val, struct net_device *dev,
      struct netdev_notifier_info *info);
int call_netdevice_notifiers(unsigned long val, struct net_device *dev);


extern rwlock_t dev_base_lock;

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_2035_0 {
  typedef TJP__ZN9list_head4nextE_2035_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_2035(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_2035_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8dev_listE_2036_0 {
  typedef TJP__ZN10net_device8dev_listE_2036_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head __get__ZN10net_device8dev_listE_2036(list_head *source) {
  AC::ResultBuffer< ::list_head  > __result_buffer;
  typedef TJP__ZN10net_device8dev_listE_2036_0< ::list_head , ::net_device , ::list_head  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head &)__result_buffer;
}
static inline struct net_device *next_net_device(struct net_device *dev)
{
 struct list_head *lh;
 struct net *net;

 net = dev_net(dev);
 lh = __get__ZN9list_head4nextE_2035(&__get__ZN10net_device8dev_listE_2036(&dev->dev_list).next);
 return lh == &net->dev_base_head ? 0 : ({ typeof( ((struct net_device *)0)->dev_list ) *__mptr = (lh); (struct net_device *)( (char *)__mptr - ((size_t) &((struct net_device *)0)->dev_list) );});
}

static inline struct net_device *next_net_device_rcu(struct net_device *dev)
{
 struct list_head *lh;
 struct net *net;

 net = dev_net(dev);
 lh = ((*((struct list_head **)(&(&dev->dev_list)->next))));
 return lh == &net->dev_base_head ? 0 : ({ typeof( ((struct net_device *)0)->dev_list ) *__mptr = (lh); (struct net_device *)( (char *)__mptr - ((size_t) &((struct net_device *)0)->dev_list) );});
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_2037_0 {
  typedef TJP__ZN9list_head4nextE_2037_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_2037(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_2037_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net13dev_base_headE_2038_0 {
  typedef TJP__ZN3net13dev_base_headE_2038_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head __get__ZN3net13dev_base_headE_2038(list_head *source) {
  AC::ResultBuffer< ::list_head  > __result_buffer;
  typedef TJP__ZN3net13dev_base_headE_2038_0< ::list_head , ::net , ::list_head  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head &)__result_buffer;
}
static inline struct net_device *first_net_device(struct net *net)
{
 return list_empty(&net->dev_base_head) ? 0 :
  ({ typeof( ((struct net_device *)0)->dev_list ) *__mptr = (__get__ZN9list_head4nextE_2037(&__get__ZN3net13dev_base_headE_2038(&net->dev_base_head).next)); (struct net_device *)( (char *)__mptr - ((size_t) &((struct net_device *)0)->dev_list) );});
}

static inline struct net_device *first_net_device_rcu(struct net *net)
{
 struct list_head *lh = ((*((struct list_head **)(&(&net->dev_base_head)->next))));

 return lh == &net->dev_base_head ? 0 : ({ typeof( ((struct net_device *)0)->dev_list ) *__mptr = (lh); (struct net_device *)( (char *)__mptr - ((size_t) &((struct net_device *)0)->dev_list) );});
}

int netdev_boot_setup_check(struct net_device *dev);
unsigned long netdev_boot_base( char *prefix, int unit);
struct net_device *dev_getbyhwaddr_rcu(struct net *net, unsigned short type,
           char *hwaddr);
struct net_device *dev_getfirstbyhwtype(struct net *net, unsigned short type);
struct net_device *__dev_getfirstbyhwtype(struct net *net, unsigned short type);
void dev_add_pack(struct packet_type *pt);
void dev_remove_pack(struct packet_type *pt);
void __dev_remove_pack(struct packet_type *pt);
void dev_add_offload(struct packet_offload *po);
void dev_remove_offload(struct packet_offload *po);
void __dev_remove_offload(struct packet_offload *po);

struct net_device *dev_get_by_flags_rcu(struct net *net, unsigned short flags,
     unsigned short mask);
struct net_device *dev_get_by_name(struct net *net, char *name);
struct net_device *dev_get_by_name_rcu(struct net *net, char *name);
struct net_device *__dev_get_by_name(struct net *net, char *name);
int dev_alloc_name(struct net_device *dev, char *name);
int dev_open(struct net_device *dev);
int dev_close(struct net_device *dev);
void dev_disable_lro(struct net_device *dev);
int dev_loopback_xmit(struct sk_buff *newskb);
int dev_queue_xmit(struct sk_buff *skb);
int dev_queue_xmit_accel(struct sk_buff *skb, void *accel_priv);
int register_netdevice(struct net_device *dev);
void unregister_netdevice_queue(struct net_device *dev, struct list_head *head);
void unregister_netdevice_many(struct list_head *head);
static inline void unregister_netdevice(struct net_device *dev)
{
 unregister_netdevice_queue(dev, 0);
}

int netdev_refcnt_read( struct net_device *dev);
void free_netdev(struct net_device *dev);
void netdev_freemem(struct net_device *dev);
void synchronize_net(void);
int init_dummy_netdev(struct net_device *dev);

struct net_device *dev_get_by_index(struct net *net, int ifindex);
struct net_device *__dev_get_by_index(struct net *net, int ifindex);
struct net_device *dev_get_by_index_rcu(struct net *net, int ifindex);
int netdev_get_name(struct net *net, char *name, int ifindex);
int dev_restart(struct net_device *dev);



int skb_gro_receive(struct sk_buff **head, struct sk_buff *skb);

static inline unsigned int skb_gro_offset( struct sk_buff *skb)
{
 return ((struct napi_gro_cb *)(skb)->cb)->data_offset;
}

static inline unsigned int skb_gro_len( struct sk_buff *skb)
{
 return skb->len - ((struct napi_gro_cb *)(skb)->cb)->data_offset;
}

static inline void skb_gro_pull(struct sk_buff *skb, unsigned int len)
{
 ((struct napi_gro_cb *)(skb)->cb)->data_offset += len;
}

static inline void *skb_gro_header_fast(struct sk_buff *skb,
     unsigned int offset)
{
 return ((struct napi_gro_cb *)(skb)->cb)->frag0 + offset;
}

static inline int skb_gro_header_hard(struct sk_buff *skb, unsigned int hlen)
{
 return ((struct napi_gro_cb *)(skb)->cb)->frag0_len < hlen;
}

static inline void *skb_gro_header_slow(struct sk_buff *skb, unsigned int hlen,
     unsigned int offset)
{
 if (!pskb_may_pull(skb, hlen))
  return 0;

 ((struct napi_gro_cb *)(skb)->cb)->frag0 = 0;
 ((struct napi_gro_cb *)(skb)->cb)->frag0_len = 0;
 return skb->data + offset;
}

static inline void *skb_gro_mac_header(struct sk_buff *skb)
{



 return ((struct napi_gro_cb *)(skb)->cb)->frag0 ? ((struct napi_gro_cb *)(skb)->cb)->frag0 : skb_mac_header(skb);

}

static inline void *skb_gro_network_header(struct sk_buff *skb)
{




 return (((struct napi_gro_cb *)(skb)->cb)->frag0 ? ((struct napi_gro_cb *)(skb)->cb)->frag0 : skb->data) +
        skb_network_offset(skb);

}

static inline void skb_gro_postpull_rcsum(struct sk_buff *skb,
     void *start, unsigned int len)
{
 if (skb->ip_summed == 2)
  ((struct napi_gro_cb *)(skb)->cb)->csum = csum_sub(((struct napi_gro_cb *)(skb)->cb)->csum,
        csum_partial(start, len, 0));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_2061_0 {
  typedef TJP__ZN10net_device10header_opsE_2061_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_2061(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_2061_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_2063_0 {
  typedef TJP__ZN10net_device10header_opsE_2063_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_2063(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_2063_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_2065_0 {
  typedef TJP__ZN10net_device10header_opsE_2065_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_2065(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_2065_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}
static inline int dev_hard_header(struct sk_buff *skb, struct net_device *dev,
      unsigned short type,
      void *daddr, void *saddr,
      unsigned int len)
{
 if (!__get__ZN10net_device10header_opsE_2061(&dev->header_ops) || !__get__ZN10net_device10header_opsE_2063(&dev->header_ops)->create)
  return 0;

 return __get__ZN10net_device10header_opsE_2065(&dev->header_ops)->create(skb, dev, type, daddr, saddr, len);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_2067_0 {
  typedef TJP__ZN10net_device10header_opsE_2067_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_2067(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_2067_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_2069_0 {
  typedef TJP__ZN10net_device10header_opsE_2069_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_2069(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_2069_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_2071_0 {
  typedef TJP__ZN10net_device10header_opsE_2071_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_2071(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_2071_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}
static inline int dev_parse_header( struct sk_buff *skb,
       unsigned char *haddr)
{
 struct net_device *dev = skb->dev;

 if (!__get__ZN10net_device10header_opsE_2067(&dev->header_ops) || !__get__ZN10net_device10header_opsE_2069(&dev->header_ops)->parse)
  return 0;
 return __get__ZN10net_device10header_opsE_2071(&dev->header_ops)->parse(skb, haddr);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_2073_0 {
  typedef TJP__ZN10net_device10header_opsE_2073_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_2073(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_2073_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_2075_0 {
  typedef TJP__ZN10net_device10header_opsE_2075_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_2075(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_2075_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10header_opsE_2077_0 {
  typedef TJP__ZN10net_device10header_opsE_2077_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline header_ops * __get__ZN10net_device10header_opsE_2077(header_ops * *source) {
  ::header_ops *__result_buffer;
  typedef TJP__ZN10net_device10header_opsE_2077_0< ::header_ops *, ::net_device , ::header_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::header_ops *&)__result_buffer;
}
static inline int dev_rebuild_header(struct sk_buff *skb)
{
 struct net_device *dev = skb->dev;

 if (!__get__ZN10net_device10header_opsE_2073(&dev->header_ops) || !__get__ZN10net_device10header_opsE_2075(&dev->header_ops)->rebuild)
  return 0;
 return __get__ZN10net_device10header_opsE_2077(&dev->header_ops)->rebuild(skb);
}

typedef int gifconf_func_t(struct net_device * dev, char * bufptr, int len);
int register_gifconf(unsigned int family, gifconf_func_t *gifconf);
static inline int unregister_gifconf(unsigned int family)
{
 return register_gifconf(family, 0);
}



struct sd_flow_limit {
  template <typename, int = 0> struct __BYPASSsd_flow_limit {};
  template <typename, int> friend struct __BYPASSsd_flow_limit;
 u64 count;
 unsigned int num_buckets;
 unsigned int history_head;
 u16 history[(1 << 7)];
 u8 buckets[];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int netdev_flow_limit_table_len;





struct softnet_data {
  template <typename, int = 0> struct __BYPASSsoftnet_data {};
  template <typename, int> friend struct __BYPASSsoftnet_data;
 struct Qdisc *output_queue;
 struct Qdisc **output_queue_tailp;
 struct list_head poll_list;
 struct sk_buff *completion_queue;
 struct sk_buff_head process_queue;


 unsigned int processed;
 unsigned int time_squeeze;
 unsigned int cpu_collision;
 unsigned int received_rps;


 struct softnet_data *rps_ipi_list;


 struct call_single_data csd __attribute__((__aligned__((1 << (6)))));
 struct softnet_data *rps_ipi_next;
 unsigned int cpu;
 unsigned int input_queue_head;
 unsigned int input_queue_tail;

 unsigned int dropped;
 struct sk_buff_head input_pkt_queue;
 struct napi_struct backlog;


 struct sd_flow_limit *flow_limit;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void input_queue_head_incr(struct softnet_data *sd)
{

 sd->input_queue_head++;

}

static inline void input_queue_tail_incr_save(struct softnet_data *sd,
           unsigned int *qtail)
{

 *qtail = ++sd->input_queue_tail;

}

extern __attribute__((section(".data..percpu" "..shared_aligned"))) __typeof__(struct softnet_data) softnet_data __attribute__((__aligned__((1 << (6)))));

void __netif_schedule(struct Qdisc *q);

static inline void netif_schedule_queue(struct netdev_queue *txq)
{
 if (!(txq->state & ((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_STACK_XOFF))))
  __netif_schedule(txq->qdisc);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_2082_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_2082_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_2082(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_2082_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_schedule_all(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_2082(&dev->num_tx_queues); i++)
  netif_schedule_queue(netdev_get_tx_queue(dev, i));
}

static inline void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
 clear_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
}







static inline void netif_start_queue(struct net_device *dev)
{
 netif_tx_start_queue(netdev_get_tx_queue(dev, 0));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_2084_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_2084_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_2084(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_2084_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_start_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_2084(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_start_queue(txq);
 }
}

static inline void netif_tx_wake_queue(struct netdev_queue *dev_queue)
{






 if (test_and_clear_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state))
  __netif_schedule(dev_queue->qdisc);
}
static inline void netif_wake_queue(struct net_device *dev)
{
 netif_tx_wake_queue(netdev_get_tx_queue(dev, 0));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_2087_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_2087_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_2087(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_2087_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_wake_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_2087(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_wake_queue(txq);
 }
}

static inline void netif_tx_stop_queue(struct netdev_queue *dev_queue)
{
 if ((!dev_queue)) {
  printf("\001" "6" "netif_stop_queue() cannot be called before register_netdev()\n");
  return;
 }
 set_bit(__QUEUE_STATE_DRV_XOFF, &dev_queue->state);
}
static inline void netif_stop_queue(struct net_device *dev)
{
 netif_tx_stop_queue(netdev_get_tx_queue(dev, 0));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_2089_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_2089_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_2089(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_2089_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_stop_all_queues(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_2089(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
  netif_tx_stop_queue(txq);
 }
}

static inline bool netif_tx_queue_stopped( struct netdev_queue *dev_queue)
{
 return (__builtin_constant_p((__QUEUE_STATE_DRV_XOFF)) ? constant_test_bit((__QUEUE_STATE_DRV_XOFF), (&dev_queue->state)) : variable_test_bit((__QUEUE_STATE_DRV_XOFF), (&dev_queue->state)));
}







static inline bool netif_queue_stopped( struct net_device *dev)
{
 return netif_tx_queue_stopped(netdev_get_tx_queue(dev, 0));
}

static inline bool netif_xmit_stopped( struct netdev_queue *dev_queue)
{
 return dev_queue->state & ((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_STACK_XOFF));
}

static inline bool netif_xmit_frozen_or_stopped( struct netdev_queue *dev_queue)
{
 return dev_queue->state & (((1 << __QUEUE_STATE_DRV_XOFF) | (1 << __QUEUE_STATE_STACK_XOFF)) | (1 << __QUEUE_STATE_FROZEN));
}

static inline void netdev_tx_sent_queue(struct netdev_queue *dev_queue,
     unsigned int bytes)
{

 dql_queued(&dev_queue->dql, bytes);

 if (__builtin_expect(!!(dql_avail(&dev_queue->dql) >= 0), 1))
  return;

 set_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state);






 asm ("mfence":::"memory");


 if (__builtin_expect(!!(dql_avail(&dev_queue->dql) >= 0), 0))
  clear_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state);

}
static inline void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
 netdev_tx_sent_queue(netdev_get_tx_queue(dev, 0), bytes);
}

static inline void netdev_tx_completed_queue(struct netdev_queue *dev_queue,
          unsigned int pkts, unsigned int bytes)
{

 if (__builtin_expect(!!(!bytes), 0))
  return;

 dql_completed(&dev_queue->dql, bytes);






 asm ("mfence":::"memory");

 if (dql_avail(&dev_queue->dql) < 0)
  return;

 if (test_and_clear_bit(__QUEUE_STATE_STACK_XOFF, &dev_queue->state))
  netif_schedule_queue(dev_queue);

}
static inline void netdev_completed_queue(struct net_device *dev,
       unsigned int pkts, unsigned int bytes)
{
 netdev_tx_completed_queue(netdev_get_tx_queue(dev, 0), pkts, bytes);
}

static inline void netdev_tx_reset_queue(struct netdev_queue *q)
{

 clear_bit(__QUEUE_STATE_STACK_XOFF, &q->state);
 dql_reset(&q->dql);

}
static inline void netdev_reset_queue(struct net_device *dev_queue)
{
 netdev_tx_reset_queue(netdev_get_tx_queue(dev_queue, 0));
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_2104_0 {
  typedef TJP__ZN10net_device5stateE_2104_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_2104(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_2104_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline bool netif_running( struct net_device *dev)
{



        unsigned long state = __get__ZN10net_device5stateE_2104(&dev->state);
 return (__builtin_constant_p((__LINK_STATE_START)) ? constant_test_bit((__LINK_STATE_START), (&state)) : variable_test_bit((__LINK_STATE_START), (&state)));

}
static inline void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 netif_tx_start_queue(txq);
}
static inline void netif_stop_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);




 netif_tx_stop_queue(txq);
}
static inline bool __netif_subqueue_stopped( struct net_device *dev,
         u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);

 return netif_tx_queue_stopped(txq);
}

static inline bool netif_subqueue_stopped( struct net_device *dev,
       struct sk_buff *skb)
{
 return __netif_subqueue_stopped(dev, skb_get_queue_mapping(skb));
}
static inline void netif_wake_subqueue(struct net_device *dev, u16 queue_index)
{
 struct netdev_queue *txq = netdev_get_tx_queue(dev, queue_index);




 if (test_and_clear_bit(__QUEUE_STATE_DRV_XOFF, &txq->state))
  __netif_schedule(txq->qdisc);
}


int netif_set_xps_queue(struct net_device *dev, struct cpumask *mask,
   u16 index);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device18real_num_tx_queuesE_2110_0 {
  typedef TJP__ZN10net_device18real_num_tx_queuesE_2110_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device18real_num_tx_queuesE_2110(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device18real_num_tx_queuesE_2110_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline u16 skb_tx_hash( struct net_device *dev,
         struct sk_buff *skb)
{
 return __skb_tx_hash(dev, skb, __get__ZN10net_device18real_num_tx_queuesE_2110(&dev->real_num_tx_queues));
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_2111_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_2111_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_2111(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_2111_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool netif_is_multiqueue( struct net_device *dev)
{
 return __get__ZN10net_device13num_tx_queuesE_2111(&dev->num_tx_queues) > 1;
}

int netif_set_real_num_tx_queues(struct net_device *dev, unsigned int txq);


int netif_set_real_num_rx_queues(struct net_device *dev, unsigned int rxq);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device18real_num_tx_queuesE_2112_0 {
  typedef TJP__ZN10net_device18real_num_tx_queuesE_2112_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device18real_num_tx_queuesE_2112(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device18real_num_tx_queuesE_2112_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device18real_num_rx_queuesE_2113_0 {
  typedef TJP__ZN10net_device18real_num_rx_queuesE_2113_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device18real_num_rx_queuesE_2113(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device18real_num_rx_queuesE_2113_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int netif_copy_real_num_queues(struct net_device *to_dev,
          struct net_device *from_dev)
{
 int err;

 err = netif_set_real_num_tx_queues(to_dev,
        __get__ZN10net_device18real_num_tx_queuesE_2112(&from_dev->real_num_tx_queues));
 if (err)
  return err;

 return netif_set_real_num_rx_queues(to_dev,
         __get__ZN10net_device18real_num_rx_queuesE_2113(&from_dev->real_num_rx_queues));



}


int netif_get_num_default_rss_queues(void);





void dev_kfree_skb_irq(struct sk_buff *skb);





void dev_kfree_skb_any(struct sk_buff *skb);

int netif_rx(struct sk_buff *skb);
int netif_rx_ni(struct sk_buff *skb);
int netif_receive_skb(struct sk_buff *skb);
gro_result_t napi_gro_receive(struct napi_struct *napi, struct sk_buff *skb);
void napi_gro_flush(struct napi_struct *napi, bool flush_old);
struct sk_buff *napi_get_frags(struct napi_struct *napi);
gro_result_t napi_gro_frags(struct napi_struct *napi);
struct packet_offload *gro_find_receive_by_type(__be16 type);
struct packet_offload *gro_find_complete_by_type(__be16 type);

static inline void napi_free_frags(struct napi_struct *napi)
{
 kfree_skb(napi->skb);
 napi->skb = 0;
}

int netdev_rx_handler_register(struct net_device *dev,
          rx_handler_func_t *rx_handler,
          void *rx_handler_data);
void netdev_rx_handler_unregister(struct net_device *dev);

bool dev_valid_name( char *name);
int dev_ioctl(struct net *net, unsigned int cmd, void *);
int dev_ethtool(struct net *net, struct ifreq *);
unsigned int dev_get_flags( struct net_device *);
int __dev_change_flags(struct net_device *, unsigned int flags);
int dev_change_flags(struct net_device *, unsigned int);
void __dev_notify_flags(struct net_device *, unsigned int old_flags,
   unsigned int gchanges);
int dev_change_name(struct net_device *, char *);
int dev_set_alias(struct net_device *, char *, size_t);
int dev_change_net_namespace(struct net_device *, struct net *, char *);
int dev_set_mtu(struct net_device *, int);
void dev_set_group(struct net_device *, int);
int dev_set_mac_address(struct net_device *, struct sockaddr *);
int dev_change_carrier(struct net_device *, bool new_carrier);
int dev_get_phys_port_id(struct net_device *dev,
    struct netdev_phys_port_id *ppid);
int dev_hard_start_xmit(struct sk_buff *skb, struct net_device *dev,
   struct netdev_queue *txq);
int dev_forward_skb(struct net_device *dev, struct sk_buff *skb);

extern int netdev_budget;


void netdev_run_todo(void);







static inline void dev_put(struct net_device *dev)
{
 do { do { void *__vpp_verify = (typeof((&((((*dev->pcpu_refcnt))))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof((((*dev->pcpu_refcnt))))) { case 1: do { typedef typeof(((((*dev->pcpu_refcnt))))) pao_T__; int pao_ID__ = (__builtin_constant_p((-(typeof((*dev->pcpu_refcnt)))(1))) && (((-(typeof((*dev->pcpu_refcnt)))(1))) == 1 || ((-(typeof((*dev->pcpu_refcnt)))(1))) == -1)) ? (int)((-(typeof((*dev->pcpu_refcnt)))(1))) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((-(typeof((*dev->pcpu_refcnt)))(1))); (void)pao_tmp__; } switch (sizeof(((((*dev->pcpu_refcnt)))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "qi" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "ri" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "ri" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "re" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof(((((*dev->pcpu_refcnt))))) pao_T__; int pao_ID__ = (__builtin_constant_p((-(typeof((*dev->pcpu_refcnt)))(1))) && (((-(typeof((*dev->pcpu_refcnt)))(1))) == 1 || ((-(typeof((*dev->pcpu_refcnt)))(1))) == -1)) ? (int)((-(typeof((*dev->pcpu_refcnt)))(1))) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((-(typeof((*dev->pcpu_refcnt)))(1))); (void)pao_tmp__; } switch (sizeof(((((*dev->pcpu_refcnt)))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "qi" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "ri" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "ri" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "re" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof(((((*dev->pcpu_refcnt))))) pao_T__; int pao_ID__ = (__builtin_constant_p((-(typeof((*dev->pcpu_refcnt)))(1))) && (((-(typeof((*dev->pcpu_refcnt)))(1))) == 1 || ((-(typeof((*dev->pcpu_refcnt)))(1))) == -1)) ? (int)((-(typeof((*dev->pcpu_refcnt)))(1))) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((-(typeof((*dev->pcpu_refcnt)))(1))); (void)pao_tmp__; } switch (sizeof(((((*dev->pcpu_refcnt)))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "qi" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "ri" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "ri" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "re" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof(((((*dev->pcpu_refcnt))))) pao_T__; int pao_ID__ = (__builtin_constant_p((-(typeof((*dev->pcpu_refcnt)))(1))) && (((-(typeof((*dev->pcpu_refcnt)))(1))) == 1 || ((-(typeof((*dev->pcpu_refcnt)))(1))) == -1)) ? (int)((-(typeof((*dev->pcpu_refcnt)))(1))) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((-(typeof((*dev->pcpu_refcnt)))(1))); (void)pao_tmp__; } switch (sizeof(((((*dev->pcpu_refcnt)))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "qi" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "ri" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "ri" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt)))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((((*dev->pcpu_refcnt))))) : "re" ((pao_T__)((-(typeof((*dev->pcpu_refcnt)))(1))))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}







static inline void dev_hold(struct net_device *dev)
{
 do { do { void *__vpp_verify = (typeof((&(((*dev->pcpu_refcnt)))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof(((*dev->pcpu_refcnt)))) { case 1: do { typedef typeof((((*dev->pcpu_refcnt)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*dev->pcpu_refcnt))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((((*dev->pcpu_refcnt)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*dev->pcpu_refcnt))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((((*dev->pcpu_refcnt)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*dev->pcpu_refcnt))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((((*dev->pcpu_refcnt)))) pao_T__; int pao_ID__ = (__builtin_constant_p((1)) && (((1)) == 1 || ((1)) == -1)) ? (int)((1)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((1)); (void)pao_tmp__; } switch (sizeof((((*dev->pcpu_refcnt))))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "qi" ((pao_T__)((1)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "ri" ((pao_T__)((1)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "ri" ((pao_T__)((1)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt))))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" ((((*dev->pcpu_refcnt)))) : "re" ((pao_T__)((1)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0);
}
void linkwatch_init_dev(struct net_device *dev);
void linkwatch_fire_event(struct net_device *dev);
void linkwatch_forget_dev(struct net_device *dev);








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_2115_0 {
  typedef TJP__ZN10net_device5stateE_2115_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_2115(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_2115_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline bool netif_carrier_ok( struct net_device *dev)
{



        unsigned long state = __get__ZN10net_device5stateE_2115(&dev->state);
 return (__builtin_constant_p((__LINK_STATE_NOCARRIER)) ? constant_test_bit((__LINK_STATE_NOCARRIER), (&state)) : variable_test_bit((__LINK_STATE_NOCARRIER), (&state)));

}

unsigned long dev_trans_start(struct net_device *dev);

void __netdev_watchdog_up(struct net_device *dev);

void netif_carrier_on(struct net_device *dev);

void netif_carrier_off(struct net_device *dev);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_2119_0 {
  typedef TJP__ZN10net_device5stateE_2119_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_2119(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_2119_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void netif_dormant_on(struct net_device *dev)
{



        unsigned long state = __get__ZN10net_device5stateE_2119(&dev->state);
 if (!test_and_set_bit(__LINK_STATE_DORMANT, &state))

  linkwatch_fire_event(dev);
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_2121_0 {
  typedef TJP__ZN10net_device5stateE_2121_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_2121(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_2121_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void netif_dormant_off(struct net_device *dev)
{



        unsigned long state = __get__ZN10net_device5stateE_2121(&dev->state);
 if (test_and_set_bit(__LINK_STATE_DORMANT, &state))

  linkwatch_fire_event(dev);
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_2123_0 {
  typedef TJP__ZN10net_device5stateE_2123_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_2123(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_2123_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline bool netif_dormant( struct net_device *dev)
{



        unsigned long state = __get__ZN10net_device5stateE_2123(&dev->state);
 return (__builtin_constant_p((__LINK_STATE_DORMANT)) ? constant_test_bit((__LINK_STATE_DORMANT), (&state)) : variable_test_bit((__LINK_STATE_DORMANT), (&state)));

}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device9operstateE_2127_0 {
  typedef TJP__ZN10net_device9operstateE_2127_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device9operstateE_2127(unsigned char *source) {
  unsigned char __result_buffer;
  typedef TJP__ZN10net_device9operstateE_2127_0< unsigned char , ::net_device , unsigned char  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device9operstateE_2129_0 {
  typedef TJP__ZN10net_device9operstateE_2129_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device9operstateE_2129(unsigned char *source) {
  unsigned char __result_buffer;
  typedef TJP__ZN10net_device9operstateE_2129_0< unsigned char , ::net_device , unsigned char  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char &)__result_buffer;
}
static inline bool netif_oper_up( struct net_device *dev)
{
 return (__get__ZN10net_device9operstateE_2127(&dev->operstate) == IF_OPER_UP ||
  __get__ZN10net_device9operstateE_2129(&dev->operstate) == IF_OPER_UNKNOWN );
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5stateE_2131_0 {
  typedef TJP__ZN10net_device5stateE_2131_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN10net_device5stateE_2131(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN10net_device5stateE_2131_0< unsigned long int , ::net_device , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline bool netif_device_present(struct net_device *dev)
{



        unsigned long state = __get__ZN10net_device5stateE_2131(&dev->state);
 return (__builtin_constant_p((__LINK_STATE_PRESENT)) ? constant_test_bit((__LINK_STATE_PRESENT), (&state)) : variable_test_bit((__LINK_STATE_PRESENT), (&state)));

}

void netif_device_detach(struct net_device *dev);

void netif_device_attach(struct net_device *dev);





enum {
 NETIF_MSG_DRV = 0x0001,
 NETIF_MSG_PROBE = 0x0002,
 NETIF_MSG_LINK = 0x0004,
 NETIF_MSG_TIMER = 0x0008,
 NETIF_MSG_IFDOWN = 0x0010,
 NETIF_MSG_IFUP = 0x0020,
 NETIF_MSG_RX_ERR = 0x0040,
 NETIF_MSG_TX_ERR = 0x0080,
 NETIF_MSG_TX_QUEUED = 0x0100,
 NETIF_MSG_INTR = 0x0200,
 NETIF_MSG_TX_DONE = 0x0400,
 NETIF_MSG_RX_STATUS = 0x0800,
 NETIF_MSG_PKTDATA = 0x1000,
 NETIF_MSG_HW = 0x2000,
 NETIF_MSG_WOL = 0x4000,
};
static inline u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{

 if (debug_value < 0 || debug_value >= (sizeof(u32) * 8))
  return default_msg_enable_bits;
 if (debug_value == 0)
  return 0;

 return (1 << debug_value) - 1;
}

static inline void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
 ;
 txq->xmit_lock_owner = cpu;
}

static inline void __netif_tx_lock_bh(struct netdev_queue *txq)
{
 ;
 txq->xmit_lock_owner = 0;
}

static inline bool __netif_tx_trylock(struct netdev_queue *txq)
{
 bool ok = 1;
 if (__builtin_expect(!!(ok), 1))
  txq->xmit_lock_owner = 0;
 return ok;
}

static inline void __netif_tx_unlock(struct netdev_queue *txq)
{
 txq->xmit_lock_owner = -1;
 ;
}

static inline void __netif_tx_unlock_bh(struct netdev_queue *txq)
{
 txq->xmit_lock_owner = -1;
 ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_2136_0 {
  typedef TJP_jiffies_2136_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_2136(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_2136_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void txq_trans_update(struct netdev_queue *txq)
{
 if (txq->xmit_lock_owner != -1)
  txq->trans_start = __get_jiffies_2136(&jiffies);
}








template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_2137_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_2137_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_2137(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_2137_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_lock(struct net_device *dev)
{
 unsigned int i;
 int cpu;

 ;
 cpu = 0;
 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_2137(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);







  __netif_tx_lock(txq, cpu);
  set_bit(__QUEUE_STATE_FROZEN, &txq->state);
  __netif_tx_unlock(txq);
 }
}

static inline void netif_tx_lock_bh(struct net_device *dev)
{
 local_bh_disable();
 netif_tx_lock(dev);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_2139_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_2139_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_2139(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_2139_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_unlock(struct net_device *dev)
{
 unsigned int i;

 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_2139(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);





  clear_bit(__QUEUE_STATE_FROZEN, &txq->state);
  netif_schedule_queue(txq);
 }
 ;
}

static inline void netif_tx_unlock_bh(struct net_device *dev)
{
 netif_tx_unlock(dev);
 local_bh_enable();
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13num_tx_queuesE_2141_0 {
  typedef TJP__ZN10net_device13num_tx_queuesE_2141_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device13num_tx_queuesE_2141(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device13num_tx_queuesE_2141_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void netif_tx_disable(struct net_device *dev)
{
 unsigned int i;
 int cpu;

 local_bh_disable();
 cpu = 0;
 for (i = 0; i < __get__ZN10net_device13num_tx_queuesE_2141(&dev->num_tx_queues); i++) {
  struct netdev_queue *txq = netdev_get_tx_queue(dev, i);

  __netif_tx_lock(txq, cpu);
  netif_tx_stop_queue(txq);
  __netif_tx_unlock(txq);
 }
 local_bh_enable();
}

static inline void netif_addr_lock(struct net_device *dev)
{
 ;
}

static inline void netif_addr_lock_nested(struct net_device *dev)
{
 ;
}

static inline void netif_addr_lock_bh(struct net_device *dev)
{
 ;
}

static inline void netif_addr_unlock(struct net_device *dev)
{
 ;
}

static inline void netif_addr_unlock_bh(struct net_device *dev)
{
 ;
}
void ether_setup(struct net_device *dev);


struct net_device *alloc_netdev_mqs(int sizeof_priv, char *name,
        void (*setup)(struct net_device *),
        unsigned int txqs, unsigned int rxqs);






int register_netdev(struct net_device *dev);
void unregister_netdev(struct net_device *dev);


int __hw_addr_add_multiple(struct netdev_hw_addr_list *to_list,
      struct netdev_hw_addr_list *from_list,
      int addr_len, unsigned char addr_type);
void __hw_addr_del_multiple(struct netdev_hw_addr_list *to_list,
       struct netdev_hw_addr_list *from_list,
       int addr_len, unsigned char addr_type);
int __hw_addr_sync(struct netdev_hw_addr_list *to_list,
     struct netdev_hw_addr_list *from_list, int addr_len);
void __hw_addr_unsync(struct netdev_hw_addr_list *to_list,
        struct netdev_hw_addr_list *from_list, int addr_len);
void __hw_addr_flush(struct netdev_hw_addr_list *list);
void __hw_addr_init(struct netdev_hw_addr_list *list);


int dev_addr_add(struct net_device *dev, unsigned char *addr,
   unsigned char addr_type);
int dev_addr_del(struct net_device *dev, unsigned char *addr,
   unsigned char addr_type);
int dev_addr_add_multiple(struct net_device *to_dev,
     struct net_device *from_dev, unsigned char addr_type);
int dev_addr_del_multiple(struct net_device *to_dev,
     struct net_device *from_dev, unsigned char addr_type);
void dev_addr_flush(struct net_device *dev);
int dev_addr_init(struct net_device *dev);


int dev_uc_add(struct net_device *dev, unsigned char *addr);
int dev_uc_add_excl(struct net_device *dev, unsigned char *addr);
int dev_uc_del(struct net_device *dev, unsigned char *addr);
int dev_uc_sync(struct net_device *to, struct net_device *from);
int dev_uc_sync_multiple(struct net_device *to, struct net_device *from);
void dev_uc_unsync(struct net_device *to, struct net_device *from);
void dev_uc_flush(struct net_device *dev);
void dev_uc_init(struct net_device *dev);


int dev_mc_add(struct net_device *dev, unsigned char *addr);
int dev_mc_add_global(struct net_device *dev, unsigned char *addr);
int dev_mc_add_excl(struct net_device *dev, unsigned char *addr);
int dev_mc_del(struct net_device *dev, unsigned char *addr);
int dev_mc_del_global(struct net_device *dev, unsigned char *addr);
int dev_mc_sync(struct net_device *to, struct net_device *from);
int dev_mc_sync_multiple(struct net_device *to, struct net_device *from);
void dev_mc_unsync(struct net_device *to, struct net_device *from);
void dev_mc_flush(struct net_device *dev);
void dev_mc_init(struct net_device *dev);


void dev_set_rx_mode(struct net_device *dev);
void __dev_set_rx_mode(struct net_device *dev);
int dev_set_promiscuity(struct net_device *dev, int inc);
int dev_set_allmulti(struct net_device *dev, int inc);
void netdev_state_change(struct net_device *dev);
void netdev_notify_peers(struct net_device *dev);
void netdev_features_change(struct net_device *dev);

void dev_load(struct net *net, char *name);
struct rtnl_link_stats64 *dev_get_stats(struct net_device *dev,
     struct rtnl_link_stats64 *storage);
void netdev_stats_to_stats64(struct rtnl_link_stats64 *stats64,
        struct net_device_stats *netdev_stats);

extern int netdev_max_backlog;
extern int netdev_tstamp_prequeue;
extern int weight_p;
extern int bpf_jit_enable;

bool netdev_has_upper_dev(struct net_device *dev, struct net_device *upper_dev);
bool netdev_has_any_upper_dev(struct net_device *dev);
struct net_device *netdev_all_upper_get_next_dev_rcu(struct net_device *dev,
           struct list_head **iter);
void *netdev_lower_get_next_private(struct net_device *dev,
        struct list_head **iter);
void *netdev_lower_get_next_private_rcu(struct net_device *dev,
     struct list_head **iter);
void *netdev_adjacent_get_private(struct list_head *adj_list);
struct net_device *netdev_master_upper_dev_get(struct net_device *dev);
struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *dev);
int netdev_upper_dev_link(struct net_device *dev, struct net_device *upper_dev);
int netdev_master_upper_dev_link(struct net_device *dev,
     struct net_device *upper_dev);
int netdev_master_upper_dev_link_private(struct net_device *dev,
      struct net_device *upper_dev,
      void *_private);
void netdev_upper_dev_unlink(struct net_device *dev,
        struct net_device *upper_dev);
void *netdev_lower_dev_get_private_rcu(struct net_device *dev,
           struct net_device *lower_dev);
void *netdev_lower_dev_get_private(struct net_device *dev,
       struct net_device *lower_dev);
int skb_checksum_help(struct sk_buff *skb);
struct sk_buff *__skb_gso_segment(struct sk_buff *skb,
      netdev_features_t features, bool tx_path);
struct sk_buff *skb_mac_gso_segment(struct sk_buff *skb,
        netdev_features_t features);

static inline
struct sk_buff *skb_gso_segment(struct sk_buff *skb, netdev_features_t features)
{
 return __skb_gso_segment(skb, features, _true);
}
__be16 skb_network_protocol(struct sk_buff *skb);

static inline bool can_checksum_protocol(netdev_features_t features,
      __be16 protocol)
{
 return ((features & ((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT))) ||
  ((features & (((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT)) | ((netdev_features_t)1 << (NETIF_F_IP_CSUM_BIT)))) &&
   protocol == (( __be16)(__builtin_constant_p((__u16)((0x0800))) ? ((__u16)( (((__u16)((0x0800)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0800)) & (__u16)0xff00U) >> 8))) : __fswab16((0x0800))))) ||
  ((features & (((netdev_features_t)1 << (NETIF_F_HW_CSUM_BIT)) | ((netdev_features_t)1 << (NETIF_F_IPV6_CSUM_BIT)))) &&
   protocol == (( __be16)(__builtin_constant_p((__u16)((0x86DD))) ? ((__u16)( (((__u16)((0x86DD)) & (__u16)0x00ffU) << 8) | (((__u16)((0x86DD)) & (__u16)0xff00U) >> 8))) : __fswab16((0x86DD))))) ||
  ((features & ((netdev_features_t)1 << (NETIF_F_FCOE_CRC_BIT))) &&
   protocol == (( __be16)(__builtin_constant_p((__u16)((0x8906))) ? ((__u16)( (((__u16)((0x8906)) & (__u16)0x00ffU) << 8) | (((__u16)((0x8906)) & (__u16)0xff00U) >> 8))) : __fswab16((0x8906))))));
}


void netdev_rx_csum_fault(struct net_device *dev);






void net_enable_timestamp(void);
void net_disable_timestamp(void);


int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) dev_proc_init(void);




int netdev_class_create_file_ns(struct class_attribute *class_attr,
    void *ns);
void netdev_class_remove_file_ns(struct class_attribute *class_attr,
     void *ns);

static inline int netdev_class_create_file(struct class_attribute *class_attr)
{
 return netdev_class_create_file_ns(class_attr, 0);
}

static inline void netdev_class_remove_file(struct class_attribute *class_attr)
{
 netdev_class_remove_file_ns(class_attr, 0);
}

extern struct kobj_ns_type_operations net_ns_type_operations;

 char *netdev_drivername( struct net_device *dev);

void linkwatch_run_queue(void);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8featuresE_2149_0 {
  typedef TJP__ZN10net_device8featuresE_2149_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long long int __get__ZN10net_device8featuresE_2149(unsigned long long int *source) {
  ::netdev_features_t __result_buffer;
  typedef TJP__ZN10net_device8featuresE_2149_0< ::netdev_features_t , ::net_device , ::netdev_features_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_features_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device11hw_featuresE_2150_0 {
  typedef TJP__ZN10net_device11hw_featuresE_2150_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long long int __get__ZN10net_device11hw_featuresE_2150(unsigned long long int *source) {
  ::netdev_features_t __result_buffer;
  typedef TJP__ZN10net_device11hw_featuresE_2150_0< ::netdev_features_t , ::net_device , ::netdev_features_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_features_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device15wanted_featuresE_2151_0 {
  typedef TJP__ZN10net_device15wanted_featuresE_2151_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long long int __get__ZN10net_device15wanted_featuresE_2151(unsigned long long int *source) {
  ::netdev_features_t __result_buffer;
  typedef TJP__ZN10net_device15wanted_featuresE_2151_0< ::netdev_features_t , ::net_device , ::netdev_features_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_features_t &)__result_buffer;
}
static inline netdev_features_t netdev_get_wanted_features(
 struct net_device *dev)
{
 return (__get__ZN10net_device8featuresE_2149(&dev->features) & ~__get__ZN10net_device11hw_featuresE_2150(&dev->hw_features)) | __get__ZN10net_device15wanted_featuresE_2151(&dev->wanted_features);
}
netdev_features_t netdev_increment_features(netdev_features_t all,
 netdev_features_t one, netdev_features_t mask);





static inline netdev_features_t netdev_add_tso_features(netdev_features_t features,
       netdev_features_t mask)
{
 return netdev_increment_features(features, (((netdev_features_t)1 << (NETIF_F_TSO_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO6_BIT)) | ((netdev_features_t)1 << (NETIF_F_TSO_ECN_BIT))), mask);
}

int __netdev_update_features(struct net_device *dev);
void netdev_update_features(struct net_device *dev);
void netdev_change_features(struct net_device *dev);

void netif_stacked_transfer_operstate( struct net_device *rootdev,
     struct net_device *dev);

netdev_features_t netif_skb_dev_features(struct sk_buff *skb,
      struct net_device *dev);
static inline netdev_features_t netif_skb_features(struct sk_buff *skb)
{
 return netif_skb_dev_features(skb, skb->dev);
}

static inline bool net_gso_ok(netdev_features_t features, int gso_type)
{
 netdev_features_t feature = gso_type << NETIF_F_GSO_SHIFT;


 (0);
 (0);
 (0);
 (0);
 (0);
 (0);

 return (features & feature) == feature;
}

static inline bool skb_gso_ok(struct sk_buff *skb, netdev_features_t features)
{
 return net_gso_ok(features, ((struct skb_shared_info *)(skb_end_pointer(skb)))->gso_type) &&
        (!skb_has_frag_list(skb) || (features & ((netdev_features_t)1 << (NETIF_F_FRAGLIST_BIT))));
}

static inline bool netif_needs_gso(struct sk_buff *skb,
       netdev_features_t features)
{
 return skb_is_gso(skb) && (!skb_gso_ok(skb, features) ||
  __builtin_expect(!!((skb->ip_summed != 3) && (skb->ip_summed != 1)), 0)
                                             );
}

static inline void netif_set_gso_max_size(struct net_device *dev,
       unsigned int size)
{
 dev->gso_max_size = size;
}

static inline void skb_gso_error_unwind(struct sk_buff *skb, __be16 protocol,
     int pulled_hlen, u16 mac_offset,
     int mac_len)
{
 skb->protocol = protocol;
 skb->encapsulation = 1;
 skb_push(skb, pulled_hlen);
 skb_reset_transport_header(skb);
 skb->mac_header = mac_offset;
 skb->network_header = skb->mac_header + mac_len;
 skb->mac_len = mac_len;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10priv_flagsE_2162_0 {
  typedef TJP__ZN10net_device10priv_flagsE_2162_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device10priv_flagsE_2162(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device10priv_flagsE_2162_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool netif_is_macvlan(struct net_device *dev)
{
 return __get__ZN10net_device10priv_flagsE_2162(&dev->priv_flags) & 0x200000;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5flagsE_2163_0 {
  typedef TJP__ZN10net_device5flagsE_2163_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device5flagsE_2163(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device5flagsE_2163_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10priv_flagsE_2164_0 {
  typedef TJP__ZN10net_device10priv_flagsE_2164_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device10priv_flagsE_2164(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device10priv_flagsE_2164_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool netif_is_bond_master(struct net_device *dev)
{
 return __get__ZN10net_device5flagsE_2163(&dev->flags) & 0x400 && __get__ZN10net_device10priv_flagsE_2164(&dev->priv_flags) & 0x20;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device5flagsE_2165_0 {
  typedef TJP__ZN10net_device5flagsE_2165_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device5flagsE_2165(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device5flagsE_2165_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10priv_flagsE_2166_0 {
  typedef TJP__ZN10net_device10priv_flagsE_2166_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device10priv_flagsE_2166(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device10priv_flagsE_2166_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool netif_is_bond_slave(struct net_device *dev)
{
 return __get__ZN10net_device5flagsE_2165(&dev->flags) & 0x800 && __get__ZN10net_device10priv_flagsE_2166(&dev->priv_flags) & 0x20;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10priv_flagsE_2167_0 {
  typedef TJP__ZN10net_device10priv_flagsE_2167_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device10priv_flagsE_2167(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device10priv_flagsE_2167_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool netif_supports_nofcs(struct net_device *dev)
{
 return __get__ZN10net_device10priv_flagsE_2167(&dev->priv_flags) & 0x80000;
}

extern struct pernet_operations loopback_net_ops;






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8nd_stateE_2169_0 {
  typedef TJP__ZN10net_device8nd_stateE_2169_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline net_device::_nd_state __get__ZN10net_device8nd_stateE_2169(net_device::_nd_state *source) {
  AC::ResultBuffer< ::net_device::_nd_state  > __result_buffer;
  typedef TJP__ZN10net_device8nd_stateE_2169_0< ::net_device::_nd_state , ::net_device , ::net_device::_nd_state  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::net_device::_nd_state &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device4nameE_2171_0 {
  typedef TJP__ZN10net_device4nameE_2171_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 16;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(char);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline char * __get__ZN10net_device4nameE_2171(char *source) {
  char *__result_buffer;
  typedef TJP__ZN10net_device4nameE_2171_0< char *, ::net_device , char [16] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (char *&)__result_buffer;
}
static inline char *netdev_name( struct net_device *dev)
{
 if (__get__ZN10net_device8nd_stateE_2169(&dev->nd_state).reg_state != NETREG_REGISTERED)
  return "(unregistered net_device)";
 return __get__ZN10net_device4nameE_2171(dev->name);
}

__attribute__((format(printf, 3, 4)))
int netdev_printk( char *level, struct net_device *dev,
    char *format, ...);
__attribute__((format(printf, 2, 3)))
int netdev_emerg( struct net_device *dev, char *format, ...);
__attribute__((format(printf, 2, 3)))
int netdev_alert( struct net_device *dev, char *format, ...);
__attribute__((format(printf, 2, 3)))
int netdev_crit( struct net_device *dev, char *format, ...);
__attribute__((format(printf, 2, 3)))
int netdev_err( struct net_device *dev, char *format, ...);
__attribute__((format(printf, 2, 3)))
int netdev_warn( struct net_device *dev, char *format, ...);
__attribute__((format(printf, 2, 3)))
int netdev_notice( struct net_device *dev, char *format, ...);
__attribute__((format(printf, 2, 3)))
int netdev_info( struct net_device *dev, char *format, ...);



struct __bridge_info {
  template <typename, int = 0> struct __BYPASS__bridge_info {};
  template <typename, int> friend struct __BYPASS__bridge_info;
 __u64 designated_root;
 __u64 bridge_id;
 __u32 root_path_cost;
 __u32 max_age;
 __u32 hello_time;
 __u32 forward_delay;
 __u32 bridge_max_age;
 __u32 bridge_hello_time;
 __u32 bridge_forward_delay;
 __u8 topology_change;
 __u8 topology_change_detected;
 __u8 root_port;
 __u8 stp_enabled;
 __u32 ageing_time;
 __u32 gc_interval;
 __u32 hello_timer_value;
 __u32 tcn_timer_value;
 __u32 topology_change_timer_value;
 __u32 gc_timer_value;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct __port_info {
  template <typename, int = 0> struct __BYPASS__port_info {};
  template <typename, int> friend struct __BYPASS__port_info;
 __u64 designated_root;
 __u64 designated_bridge;
 __u16 port_id;
 __u16 designated_port;
 __u32 path_cost;
 __u32 designated_cost;
 __u8 state;
 __u8 top_change_ack;
 __u8 config_pending;
 __u8 unused0;
 __u32 message_age_timer_value;
 __u32 forward_delay_timer_value;
 __u32 hold_timer_value;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct __fdb_entry {
  template <typename, int = 0> struct __BYPASS__fdb_entry {};
  template <typename, int> friend struct __BYPASS__fdb_entry;
 __u8 mac_addr[6];
 __u8 port_no;
 __u8 is_local;
 __u32 ageing_timer_value;
 __u8 port_hi;
 __u8 pad0;
 __u16 unused;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 IFLA_BRIDGE_FLAGS,
 IFLA_BRIDGE_MODE,
 IFLA_BRIDGE_VLAN_INFO,
 __IFLA_BRIDGE_MAX,
};






struct bridge_vlan_info {
  template <typename, int = 0> struct __BYPASSbridge_vlan_info {};
  template <typename, int> friend struct __BYPASSbridge_vlan_info;
 __u16 flags;
 __u16 vid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 MDBA_UNSPEC,
 MDBA_MDB,
 MDBA_ROUTER,
 __MDBA_MAX,
};


enum {
 MDBA_MDB_UNSPEC,
 MDBA_MDB_ENTRY,
 __MDBA_MDB_MAX,
};


enum {
 MDBA_MDB_ENTRY_UNSPEC,
 MDBA_MDB_ENTRY_INFO,
 __MDBA_MDB_ENTRY_MAX,
};


enum {
 MDBA_ROUTER_UNSPEC,
 MDBA_ROUTER_PORT,
 __MDBA_ROUTER_MAX,
};


struct br_port_msg {
  template <typename, int = 0> struct __BYPASSbr_port_msg {};
  template <typename, int> friend struct __BYPASSbr_port_msg;
 __u8 family;
 __u32 ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct br_mdb_entry {
  template <typename, int = 0> struct __BYPASSbr_mdb_entry {};
  template <typename, int> friend struct __BYPASSbr_mdb_entry;
 __u32 ifindex;


 __u8 state;
 struct {
  union {
   __be32 ip4;
   struct in6_addr ip6;
  } u;
  __be16 proto;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} addr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 MDBA_SET_ENTRY_UNSPEC,
 MDBA_SET_ENTRY,
 __MDBA_SET_ENTRY_MAX,
};

extern void brioctl_set(int (*ioctl_hook)(struct net *, unsigned int, void *));

typedef int br_should_route_hook_t(struct sk_buff *skb);
extern br_should_route_hook_t *br_should_route_hook;
struct dlci_add
{
  template <typename, int = 0> struct __BYPASSdlci_add {};
  template <typename, int> friend struct __BYPASSdlci_add;
   char devname[16];
   short dlci;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct dlci_conf {
  template <typename, int = 0> struct __BYPASSdlci_conf {};
  template <typename, int> friend struct __BYPASSdlci_conf;
   short flags;
   short CIR_fwd;
   short Bc_fwd;
   short Be_fwd;
   short CIR_bwd;
   short Bc_bwd;
   short Be_bwd;


   short Tc_fwd;
   short Tc_bwd;
   short Tf_max;
   short Tb_max;



  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct frad_conf
{
  template <typename, int = 0> struct __BYPASSfrad_conf {};
  template <typename, int> friend struct __BYPASSfrad_conf;
   short station;
   short flags;
   short kbaud;
   short clocking;
   short mtu;
   short T391;
   short T392;
   short N391;
   short N392;
   short N393;
   short CIR_fwd;
   short Bc_fwd;
   short Be_fwd;
   short CIR_bwd;
   short Bc_bwd;
   short Be_bwd;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct frhdr
{
  template <typename, int = 0> struct __BYPASSfrhdr {};
  template <typename, int> friend struct __BYPASSfrhdr;
   unsigned char control;


   unsigned char pad;

   unsigned char NLPID;
   unsigned char OUI[3];
   __be16 PID;



  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));
struct dlci_local
{
  template <typename, int = 0> struct __BYPASSdlci_local {};
  template <typename, int> friend struct __BYPASSdlci_local;
   struct net_device *master;
   struct net_device *slave;
   struct dlci_conf config;
   int configured;
   struct list_head list;


   void (*receive)(struct sk_buff *skb, struct net_device *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct frad_local
{
  template <typename, int = 0> struct __BYPASSfrad_local {};
  template <typename, int> friend struct __BYPASSfrad_local;
   struct net_device_stats stats;


   struct net_device *master[8];
   short dlci[8];

   struct frad_conf config;
   int configured;
   int initialized;


   int (*activate)(struct net_device *, struct net_device *);
   int (*deactivate)(struct net_device *, struct net_device *);
   int (*assoc)(struct net_device *, struct net_device *);
   int (*deassoc)(struct net_device *, struct net_device *);
   int (*dlci_conf)(struct net_device *, struct net_device *, int get);


   struct timer_list timer;
   int type;
   int state;
   int buffer;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



extern void dlci_ioctl_set(int (*hook)(unsigned int, void *));













static inline u16 get_unaligned_le16( void *p)
{
 return __le16_to_cpup((__le16 *)p);
}

static inline u32 get_unaligned_le32( void *p)
{
 return __le32_to_cpup((__le32 *)p);
}

static inline u64 get_unaligned_le64( void *p)
{
 return __le64_to_cpup((__le64 *)p);
}

static inline u16 get_unaligned_be16( void *p)
{
 return __be16_to_cpup((__be16 *)p);
}

static inline u32 get_unaligned_be32( void *p)
{
 return __be32_to_cpup((__be32 *)p);
}

static inline u64 get_unaligned_be64( void *p)
{
 return __be64_to_cpup((__be64 *)p);
}

static inline void put_unaligned_le16(u16 val, void *p)
{
 *((__le16 *)p) = (( __le16)(__u16)(val));
}

static inline void put_unaligned_le32(u32 val, void *p)
{
 *((__le32 *)p) = (( __le32)(__u32)(val));
}

static inline void put_unaligned_le64(u64 val, void *p)
{
 *((__le64 *)p) = (( __le64)(__u64)(val));
}

static inline void put_unaligned_be16(u16 val, void *p)
{
 *((__be16 *)p) = (( __be16)(__builtin_constant_p((__u16)((val))) ? ((__u16)( (((__u16)((val)) & (__u16)0x00ffU) << 8) | (((__u16)((val)) & (__u16)0xff00U) >> 8))) : __fswab16((val))));
}

static inline void put_unaligned_be32(u32 val, void *p)
{
 *((__be32 *)p) = (( __be32)(__builtin_constant_p((__u32)((val))) ? ((__u32)( (((__u32)((val)) & (__u32)0x000000ffUL) << 24) | (((__u32)((val)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((val)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((val)) & (__u32)0xff000000UL) >> 24))) : __fswab32((val))));
}

static inline void put_unaligned_be64(u64 val, void *p)
{
 *((__be64 *)p) = (( __be64)(__builtin_constant_p((__u64)((val))) ? ((__u64)( (((__u64)((val)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((val)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((val)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((val)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((val)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((val)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((val)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((val)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((val))));
}







extern void __bad_unaligned_access_size(void);


__be16 eth_type_trans(struct sk_buff *skb, struct net_device *dev);
extern struct header_ops eth_header_ops;

int eth_header(struct sk_buff *skb, struct net_device *dev, unsigned short type,
        void *daddr, void *saddr, unsigned len);
int eth_rebuild_header(struct sk_buff *skb);
int eth_header_parse( struct sk_buff *skb, unsigned char *haddr);
int eth_header_cache( struct neighbour *neigh, struct hh_cache *hh,
       __be16 type);
void eth_header_cache_update(struct hh_cache *hh, struct net_device *dev,
        unsigned char *haddr);
int eth_prepare_mac_addr_change(struct net_device *dev, void *p);
void eth_commit_mac_addr_change(struct net_device *dev, void *p);
int eth_mac_addr(struct net_device *dev, void *p);
int eth_change_mtu(struct net_device *dev, int new_mtu);
int eth_validate_addr(struct net_device *dev);

struct net_device *alloc_etherdev_mqs(int sizeof_priv, unsigned int txqs,
         unsigned int rxqs);




static u8 eth_reserved_addr_base[6] __attribute__((aligned(2))) =
{ 0x01, 0x80, 0xc2, 0x00, 0x00, 0x00 };
static inline bool is_link_local_ether_addr( u8 *addr)
{
 __be16 *a = (__be16 *)addr;
 static __be16 *b = ( __be16 *)eth_reserved_addr_base;
 static __be16 m = (( __be16)(__builtin_constant_p((__u16)((0xfff0))) ? ((__u16)( (((__u16)((0xfff0)) & (__u16)0x00ffU) << 8) | (((__u16)((0xfff0)) & (__u16)0xff00U) >> 8))) : __fswab16((0xfff0))));

 return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | ((a[2] ^ b[2]) & m)) == 0;
}







static inline bool is_zero_ether_addr( u8 *addr)
{
 return !(addr[0] | addr[1] | addr[2] | addr[3] | addr[4] | addr[5]);
}
static inline bool is_multicast_ether_addr( u8 *addr)
{
 return 0x01 & addr[0];
}







static inline bool is_local_ether_addr( u8 *addr)
{
 return 0x02 & addr[0];
}







static inline bool is_broadcast_ether_addr( u8 *addr)
{
 return (addr[0] & addr[1] & addr[2] & addr[3] & addr[4] & addr[5]) == 0xff;
}







static inline bool is_unicast_ether_addr( u8 *addr)
{
 return !is_multicast_ether_addr(addr);
}
static inline bool is_valid_ether_addr( u8 *addr)
{


 return !is_multicast_ether_addr(addr) && !is_zero_ether_addr(addr);
}
static inline void eth_random_addr(u8 *addr)
{
 get_random_bytes(addr, 6);
 addr[0] &= 0xfe;
 addr[0] |= 0x02;
}
static inline void eth_broadcast_addr(u8 *addr)
{
 memset(addr, 0xff, 6);
}







static inline void eth_zero_addr(u8 *addr)
{
 memset(addr, 0x00, 6);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8dev_addrE_2173_0 {
  typedef TJP__ZN10net_device8dev_addrE_2173_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char * __get__ZN10net_device8dev_addrE_2173(unsigned char * *source) {
  unsigned char *__result_buffer;
  typedef TJP__ZN10net_device8dev_addrE_2173_0< unsigned char *, ::net_device , unsigned char * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char *&)__result_buffer;
}
static inline void eth_hw_addr_random(struct net_device *dev)
{
 dev->addr_assign_type = 1;
 eth_random_addr(__get__ZN10net_device8dev_addrE_2173(&dev->dev_addr));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device16addr_assign_typeE_2174_0 {
  typedef TJP__ZN10net_device16addr_assign_typeE_2174_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device16addr_assign_typeE_2174(unsigned char *source) {
  unsigned char __result_buffer;
  typedef TJP__ZN10net_device16addr_assign_typeE_2174_0< unsigned char , ::net_device , unsigned char  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8dev_addrE_2175_0 {
  typedef TJP__ZN10net_device8dev_addrE_2175_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char * __get__ZN10net_device8dev_addrE_2175(unsigned char * *source) {
  unsigned char *__result_buffer;
  typedef TJP__ZN10net_device8dev_addrE_2175_0< unsigned char *, ::net_device , unsigned char * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8dev_addrE_2176_0 {
  typedef TJP__ZN10net_device8dev_addrE_2176_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char * __get__ZN10net_device8dev_addrE_2176(unsigned char * *source) {
  unsigned char *__result_buffer;
  typedef TJP__ZN10net_device8dev_addrE_2176_0< unsigned char *, ::net_device , unsigned char * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char *&)__result_buffer;
}
static inline void eth_hw_addr_inherit(struct net_device *dst,
           struct net_device *src)
{
 dst->addr_assign_type = __get__ZN10net_device16addr_assign_typeE_2174(&src->addr_assign_type);
 memcpy(__get__ZN10net_device8dev_addrE_2175(&dst->dev_addr), __get__ZN10net_device8dev_addrE_2176(&src->dev_addr), 6);
}
static inline unsigned compare_ether_addr( u8 *addr1, u8 *addr2)
{
 u16 *a = ( u16 *) addr1;
 u16 *b = ( u16 *) addr2;

 (0);
 return ((a[0] ^ b[0]) | (a[1] ^ b[1]) | (a[2] ^ b[2])) != 0;
}
static inline bool ether_addr_equal( u8 *addr1, u8 *addr2)
{
 return !compare_ether_addr(addr1, addr2);
}

static inline unsigned long zap_last_2bytes(unsigned long value)
{



 return value << 16;

}
static inline bool ether_addr_equal_64bits( u8 addr1[6+2],
        u8 addr2[6+2])
{

 unsigned long fold = ((*(unsigned long *)addr1) ^
         (*(unsigned long *)addr2));

 if (sizeof(fold) == 8)
  return zap_last_2bytes(fold) == 0;

 fold |= zap_last_2bytes((*(unsigned long *)(addr1 + 4)) ^
    (*(unsigned long *)(addr2 + 4)));
 return fold == 0;



}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_2178_0 {
  typedef TJP__ZN9list_head4nextE_2178_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_2178(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_2178_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9list_head4nextE_2179_0 {
  typedef TJP__ZN9list_head4nextE_2179_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline list_head * __get__ZN9list_head4nextE_2179(list_head * *source) {
  ::list_head *__result_buffer;
  typedef TJP__ZN9list_head4nextE_2179_0< ::list_head *, ::list_head , ::list_head * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::list_head *&)__result_buffer;
}
static inline bool is_etherdev_addr( struct net_device *dev,
        u8 addr[6 + 2])
{
 struct netdev_hw_addr *ha;
 bool res = _false;

 ;
 for (ha = ({typeof (*(&dev->dev_addrs.list)->next) *__ptr = (typeof (*(&dev->dev_addrs.list)->next) *)__get__ZN9list_head4nextE_2178(&(&dev->dev_addrs.list)->next); ({ typeof( ((typeof(*ha) *)0)->list ) *__mptr = ((typeof((&dev->dev_addrs.list)->next))(__ptr)); (typeof(*ha) *)( (char *)__mptr - ((size_t) &((typeof(*ha) *)0)->list) );}); }); &ha->list != (&dev->dev_addrs.list); ha = ({typeof (*ha->list.next) *__ptr = (typeof (*ha->list.next) *)__get__ZN9list_head4nextE_2179(&ha->list.next); ({ typeof( ((typeof(*ha) *)0)->list ) *__mptr = ((typeof(ha->list.next))(__ptr)); (typeof(*ha) *)( (char *)__mptr - ((size_t) &((typeof(*ha) *)0)->list) );}); })) {
  res = ether_addr_equal_64bits(addr, ha->addr);
  if (res)
   break;
 }
 ;
 return res;
}
static inline unsigned long compare_ether_header( void *a, void *b)
{

 unsigned long fold;
 fold = *(unsigned long *)a ^ *(unsigned long *)b;
 fold |= *(unsigned long *)(a + 6) ^ *(unsigned long *)(b + 6);
 return fold;







}


















struct ifaddrmsg {
  template <typename, int = 0> struct __BYPASSifaddrmsg {};
  template <typename, int> friend struct __BYPASSifaddrmsg;
 __u8 ifa_family;
 __u8 ifa_prefixlen;
 __u8 ifa_flags;
 __u8 ifa_scope;
 __u32 ifa_index;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 IFA_UNSPEC,
 IFA_ADDRESS,
 IFA_LOCAL,
 IFA_LABEL,
 IFA_BROADCAST,
 IFA_ANYCAST,
 IFA_CACHEINFO,
 IFA_MULTICAST,
 __IFA_MAX,
};
struct ifa_cacheinfo {
  template <typename, int = 0> struct __BYPASSifa_cacheinfo {};
  template <typename, int> friend struct __BYPASSifa_cacheinfo;
 __u32 ifa_prefered;
 __u32 ifa_valid;
 __u32 cstamp;
 __u32 tstamp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum {
 RTM_BASE = 16,


 RTM_NEWLINK = 16,

 RTM_DELLINK,

 RTM_GETLINK,

 RTM_SETLINK,


 RTM_NEWADDR = 20,

 RTM_DELADDR,

 RTM_GETADDR,


 RTM_NEWROUTE = 24,

 RTM_DELROUTE,

 RTM_GETROUTE,


 RTM_NEWNEIGH = 28,

 RTM_DELNEIGH,

 RTM_GETNEIGH,


 RTM_NEWRULE = 32,

 RTM_DELRULE,

 RTM_GETRULE,


 RTM_NEWQDISC = 36,

 RTM_DELQDISC,

 RTM_GETQDISC,


 RTM_NEWTCLASS = 40,

 RTM_DELTCLASS,

 RTM_GETTCLASS,


 RTM_NEWTFILTER = 44,

 RTM_DELTFILTER,

 RTM_GETTFILTER,


 RTM_NEWACTION = 48,

 RTM_DELACTION,

 RTM_GETACTION,


 RTM_NEWPREFIX = 52,


 RTM_GETMULTICAST = 58,


 RTM_GETANYCAST = 62,


 RTM_NEWNEIGHTBL = 64,

 RTM_GETNEIGHTBL = 66,

 RTM_SETNEIGHTBL,


 RTM_NEWNDUSEROPT = 68,


 RTM_NEWADDRLABEL = 72,

 RTM_DELADDRLABEL,

 RTM_GETADDRLABEL,


 RTM_GETDCB = 78,

 RTM_SETDCB,


 RTM_NEWNETCONF = 80,

 RTM_GETNETCONF = 82,


 RTM_NEWMDB = 84,

 RTM_DELMDB = 85,

 RTM_GETMDB = 86,


 __RTM_MAX,

};
struct rtattr {
  template <typename, int = 0> struct __BYPASSrtattr {};
  template <typename, int> friend struct __BYPASSrtattr;
 unsigned short rta_len;
 unsigned short rta_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct rtmsg {
  template <typename, int = 0> struct __BYPASSrtmsg {};
  template <typename, int> friend struct __BYPASSrtmsg;
 unsigned char rtm_family;
 unsigned char rtm_dst_len;
 unsigned char rtm_src_len;
 unsigned char rtm_tos;

 unsigned char rtm_table;
 unsigned char rtm_protocol;
 unsigned char rtm_scope;
 unsigned char rtm_type;

 unsigned rtm_flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum {
 RTN_UNSPEC,
 RTN_UNICAST,
 RTN_LOCAL,
 RTN_BROADCAST,

 RTN_ANYCAST,

 RTN_MULTICAST,
 RTN_BLACKHOLE,
 RTN_UNREACHABLE,
 RTN_PROHIBIT,
 RTN_THROW,
 RTN_NAT,
 RTN_XRESOLVE,
 __RTN_MAX
};
enum rt_scope_t {
 RT_SCOPE_UNIVERSE=0,

 RT_SCOPE_SITE=200,
 RT_SCOPE_LINK=253,
 RT_SCOPE_HOST=254,
 RT_SCOPE_NOWHERE=255
};
enum rt_class_t {
 RT_TABLE_UNSPEC=0,

 RT_TABLE_COMPAT=252,
 RT_TABLE_DEFAULT=253,
 RT_TABLE_MAIN=254,
 RT_TABLE_LOCAL=255,
 RT_TABLE_MAX=0xFFFFFFFF
};




enum rtattr_type_t {
 RTA_UNSPEC,
 RTA_DST,
 RTA_SRC,
 RTA_IIF,
 RTA_OIF,
 RTA_GATEWAY,
 RTA_PRIORITY,
 RTA_PREFSRC,
 RTA_METRICS,
 RTA_MULTIPATH,
 RTA_PROTOINFO,
 RTA_FLOW,
 RTA_CACHEINFO,
 RTA_SESSION,
 RTA_MP_ALGO,
 RTA_TABLE,
 RTA_MARK,
 RTA_MFC_STATS,
 __RTA_MAX
};
struct rtnexthop {
  template <typename, int = 0> struct __BYPASSrtnexthop {};
  template <typename, int> friend struct __BYPASSrtnexthop;
 unsigned short rtnh_len;
 unsigned char rtnh_flags;
 unsigned char rtnh_hops;
 int rtnh_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct rta_cacheinfo {
  template <typename, int = 0> struct __BYPASSrta_cacheinfo {};
  template <typename, int> friend struct __BYPASSrta_cacheinfo;
 __u32 rta_clntref;
 __u32 rta_lastuse;
 __s32 rta_expires;
 __u32 rta_error;
 __u32 rta_used;


 __u32 rta_id;
 __u32 rta_ts;
 __u32 rta_tsage;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum {
 RTAX_UNSPEC,

 RTAX_LOCK,

 RTAX_MTU,

 RTAX_WINDOW,

 RTAX_RTT,

 RTAX_RTTVAR,

 RTAX_SSTHRESH,

 RTAX_CWND,

 RTAX_ADVMSS,

 RTAX_REORDERING,

 RTAX_HOPLIMIT,

 RTAX_INITCWND,

 RTAX_FEATURES,

 RTAX_RTO_MIN,

 RTAX_INITRWND,

 RTAX_QUICKACK,

 __RTAX_MAX
};
struct rta_session {
  template <typename, int = 0> struct __BYPASSrta_session {};
  template <typename, int> friend struct __BYPASSrta_session;
 __u8 proto;
 __u8 pad1;
 __u16 pad2;

 union {
  struct {
   __u16 sport;
   __u16 dport;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ports;

  struct {
   __u8 type;
   __u8 code;
   __u16 ident;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icmpt;

  __u32 spi;
 } u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rta_mfc_stats {
  template <typename, int = 0> struct __BYPASSrta_mfc_stats {};
  template <typename, int> friend struct __BYPASSrta_mfc_stats;
 __u64 mfcs_packets;
 __u64 mfcs_bytes;
 __u64 mfcs_wrong_if;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct rtgenmsg {
  template <typename, int = 0> struct __BYPASSrtgenmsg {};
  template <typename, int> friend struct __BYPASSrtgenmsg;
 unsigned char rtgen_family;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ifinfomsg {
  template <typename, int = 0> struct __BYPASSifinfomsg {};
  template <typename, int> friend struct __BYPASSifinfomsg;
 unsigned char ifi_family;
 unsigned char __ifi_pad;
 unsigned short ifi_type;
 int ifi_index;
 unsigned ifi_flags;
 unsigned ifi_change;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct prefixmsg {
  template <typename, int = 0> struct __BYPASSprefixmsg {};
  template <typename, int> friend struct __BYPASSprefixmsg;
 unsigned char prefix_family;
 unsigned char prefix_pad1;
 unsigned short prefix_pad2;
 int prefix_ifindex;
 unsigned char prefix_type;
 unsigned char prefix_len;
 unsigned char prefix_flags;
 unsigned char prefix_pad3;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum
{
 PREFIX_UNSPEC,
 PREFIX_ADDRESS,
 PREFIX_CACHEINFO,
 __PREFIX_MAX
};



struct prefix_cacheinfo {
  template <typename, int = 0> struct __BYPASSprefix_cacheinfo {};
  template <typename, int> friend struct __BYPASSprefix_cacheinfo;
 __u32 preferred_time;
 __u32 valid_time;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct tcmsg {
  template <typename, int = 0> struct __BYPASStcmsg {};
  template <typename, int> friend struct __BYPASStcmsg;
 unsigned char tcm_family;
 unsigned char tcm__pad1;
 unsigned short tcm__pad2;
 int tcm_ifindex;
 __u32 tcm_handle;
 __u32 tcm_parent;
 __u32 tcm_info;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 TCA_UNSPEC,
 TCA_KIND,
 TCA_OPTIONS,
 TCA_STATS,
 TCA_XSTATS,
 TCA_RATE,
 TCA_FCNT,
 TCA_STATS2,
 TCA_STAB,
 __TCA_MAX
};
struct nduseroptmsg {
  template <typename, int = 0> struct __BYPASSnduseroptmsg {};
  template <typename, int> friend struct __BYPASSnduseroptmsg;
 unsigned char nduseropt_family;
 unsigned char nduseropt_pad1;
 unsigned short nduseropt_opts_len;
 int nduseropt_ifindex;
 __u8 nduseropt_icmp_type;
 __u8 nduseropt_icmp_code;
 unsigned short nduseropt_pad2;
 unsigned int nduseropt_pad3;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 NDUSEROPT_UNSPEC,
 NDUSEROPT_SRCADDR,
 __NDUSEROPT_MAX
};
enum rtnetlink_groups {
 RTNLGRP_NONE,

 RTNLGRP_LINK,

 RTNLGRP_NOTIFY,

 RTNLGRP_NEIGH,

 RTNLGRP_TC,

 RTNLGRP_IPV4_IFADDR,

 RTNLGRP_IPV4_MROUTE,

 RTNLGRP_IPV4_ROUTE,

 RTNLGRP_IPV4_RULE,

 RTNLGRP_IPV6_IFADDR,

 RTNLGRP_IPV6_MROUTE,

 RTNLGRP_IPV6_ROUTE,

 RTNLGRP_IPV6_IFINFO,

 RTNLGRP_DECnet_IFADDR,

 RTNLGRP_NOP2,
 RTNLGRP_DECnet_ROUTE,

 RTNLGRP_DECnet_RULE,

 RTNLGRP_NOP4,
 RTNLGRP_IPV6_PREFIX,

 RTNLGRP_IPV6_RULE,

 RTNLGRP_ND_USEROPT,

 RTNLGRP_PHONET_IFADDR,

 RTNLGRP_PHONET_ROUTE,

 RTNLGRP_DCB,

 RTNLGRP_IPV4_NETCONF,

 RTNLGRP_IPV6_NETCONF,

 RTNLGRP_MDB,

 __RTNLGRP_MAX
};



struct tcamsg {
  template <typename, int = 0> struct __BYPASStcamsg {};
  template <typename, int> friend struct __BYPASStcamsg;
 unsigned char tca_family;
 unsigned char tca__pad1;
 unsigned short tca__pad2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int rtnetlink_send(struct sk_buff *skb, struct net *net, u32 pid, u32 group, int echo);
extern int rtnl_unicast(struct sk_buff *skb, struct net *net, u32 pid);
extern void rtnl_notify(struct sk_buff *skb, struct net *net, u32 pid,
   u32 group, struct nlmsghdr *nlh, gfp_t flags);
extern void rtnl_set_sk_err(struct net *net, u32 group, int error);
extern int rtnetlink_put_metrics(struct sk_buff *skb, u32 *metrics);
extern int rtnl_put_cacheinfo(struct sk_buff *skb, struct dst_entry *dst,
         u32 id, long expires, u32 error);

void rtmsg_ifinfo(int type, struct net_device *dev, unsigned change, gfp_t flags);
static inline int lockdep_rtnl_is_held(void)
{
 return 1;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device13ingress_queueE_2182_0 {
  typedef TJP__ZN10net_device13ingress_queueE_2182_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netdev_queue * __get__ZN10net_device13ingress_queueE_2182(netdev_queue * *source) {
  ::netdev_queue *__result_buffer;
  typedef TJP__ZN10net_device13ingress_queueE_2182_0< ::netdev_queue *, ::net_device , ::netdev_queue * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_queue *&)__result_buffer;
}
static inline struct netdev_queue *dev_ingress_queue(struct net_device *dev)
{
 return (__get__ZN10net_device13ingress_queueE_2182(&dev->ingress_queue));
}

extern struct netdev_queue *dev_ingress_queue_create(struct net_device *dev);

extern void rtnetlink_init(void);
extern void __rtnl_unlock(void);
extern int ndo_dflt_fdb_dump(struct sk_buff *skb,
        struct netlink_callback *cb,
        struct net_device *dev,
        int idx);
extern int ndo_dflt_fdb_add(struct ndmsg *ndm,
       struct nlattr *tb[],
       struct net_device *dev,
       unsigned char *addr,
        u16 flags);
extern int ndo_dflt_fdb_del(struct ndmsg *ndm,
       struct nlattr *tb[],
       struct net_device *dev,
       unsigned char *addr);

extern int ndo_dflt_bridge_getlink(struct sk_buff *skb, u32 pid, u32 seq,
       struct net_device *dev, u16 mode);

enum vlan_ioctl_cmds {
 ADD_VLAN_CMD,
 DEL_VLAN_CMD,
 SET_VLAN_INGRESS_PRIORITY_CMD,
 SET_VLAN_EGRESS_PRIORITY_CMD,
 GET_VLAN_INGRESS_PRIORITY_CMD,
 GET_VLAN_EGRESS_PRIORITY_CMD,
 SET_VLAN_NAME_TYPE_CMD,
 SET_VLAN_FLAG_CMD,
 GET_VLAN_REALDEV_NAME_CMD,
 GET_VLAN_VID_CMD
};

enum vlan_flags {
 VLAN_FLAG_REORDER_HDR = 0x1,
 VLAN_FLAG_GVRP = 0x2,
 VLAN_FLAG_LOOSE_BINDING = 0x4,
 VLAN_FLAG_MVRP = 0x8,
};

enum vlan_name_types {
 VLAN_NAME_TYPE_PLUS_VID,
 VLAN_NAME_TYPE_RAW_PLUS_VID,
 VLAN_NAME_TYPE_PLUS_VID_NO_PAD,
 VLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD,
 VLAN_NAME_TYPE_HIGHEST
};

struct vlan_ioctl_args {
  template <typename, int = 0> struct __BYPASSvlan_ioctl_args {};
  template <typename, int> friend struct __BYPASSvlan_ioctl_args;
 int cmd;
 char device1[24];

        union {
  char device2[24];
  int VID;
  unsigned int skb_priority;
  unsigned int name_type;
  unsigned int bind_type;
  unsigned int flag;
        } u;

 short vlan_qos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct vlan_hdr {
  template <typename, int = 0> struct __BYPASSvlan_hdr {};
  template <typename, int> friend struct __BYPASSvlan_hdr;
 __be16 h_vlan_TCI;
 __be16 h_vlan_encapsulated_proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct vlan_ethhdr {
  template <typename, int = 0> struct __BYPASSvlan_ethhdr {};
  template <typename, int> friend struct __BYPASSvlan_ethhdr;
 unsigned char h_dest[6];
 unsigned char h_source[6];
 __be16 h_vlan_proto;
 __be16 h_vlan_TCI;
 __be16 h_vlan_encapsulated_proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



static inline struct vlan_ethhdr *vlan_eth_hdr( struct sk_buff *skb)
{
 return (struct vlan_ethhdr *)skb_mac_header(skb);
}
extern void vlan_ioctl_set(int (*hook)(struct net *, void *));


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10priv_flagsE_2183_0 {
  typedef TJP__ZN10net_device10priv_flagsE_2183_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device10priv_flagsE_2183(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device10priv_flagsE_2183_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int is_vlan_dev(struct net_device *dev)
{
        return __get__ZN10net_device10priv_flagsE_2183(&dev->priv_flags) & 0x1;
}







extern struct net_device *__vlan_find_dev_deep(struct net_device *real_dev,
            __be16 vlan_proto, u16 vlan_id);
extern struct net_device *vlan_dev_real_dev( struct net_device *dev);
extern u16 vlan_dev_vlan_id( struct net_device *dev);







struct vlan_priority_tci_mapping {
  template <typename, int = 0> struct __BYPASSvlan_priority_tci_mapping {};
  template <typename, int> friend struct __BYPASSvlan_priority_tci_mapping;
 u32 priority;
 u16 vlan_qos;
 struct vlan_priority_tci_mapping *next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct vlan_pcpu_stats {
  template <typename, int = 0> struct __BYPASSvlan_pcpu_stats {};
  template <typename, int> friend struct __BYPASSvlan_pcpu_stats;
 u64 rx_packets;
 u64 rx_bytes;
 u64 rx_multicast;
 u64 tx_packets;
 u64 tx_bytes;
 struct u64_stats_sync syncp;
 u32 rx_errors;
 u32 tx_dropped;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct proc_dir_entry;
struct netpoll;
struct vlan_dev_priv {
  template <typename, int = 0> struct __BYPASSvlan_dev_priv {};
  template <typename, int> friend struct __BYPASSvlan_dev_priv;
 unsigned int nr_ingress_mappings;
 u32 ingress_priority_map[8];
 unsigned int nr_egress_mappings;
 struct vlan_priority_tci_mapping *egress_priority_map[16];

 __be16 vlan_proto;
 u16 vlan_id;
 u16 flags;

 struct net_device *real_dev;
 unsigned char real_dev_addr[6];

 struct proc_dir_entry *dent;
 struct vlan_pcpu_stats *vlan_pcpu_stats;

 struct netpoll *netpoll;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct vlan_dev_priv *vlan_dev_priv( struct net_device *dev)
{
 return netdev_priv(dev);
}

static inline u16
vlan_dev_get_egress_qos_mask(struct net_device *dev, u32 skprio)
{
 struct vlan_priority_tci_mapping *mp;

 __asm__ __volatile__("": : :"memory");

 mp = vlan_dev_priv(dev)->egress_priority_map[(skprio & 0xF)];
 while (mp) {
  if (mp->priority == skprio) {
   return mp->vlan_qos;


  }
  mp = mp->next;
 }
 return 0;
}

extern bool vlan_do_receive(struct sk_buff **skb);
extern struct sk_buff *vlan_untag(struct sk_buff *skb);

extern int vlan_vid_add(struct net_device *dev, __be16 proto, u16 vid);
extern void vlan_vid_del(struct net_device *dev, __be16 proto, u16 vid);

extern int vlan_vids_add_by_dev(struct net_device *dev,
    struct net_device *by_dev);
extern void vlan_vids_del_by_dev(struct net_device *dev,
     struct net_device *by_dev);

extern bool vlan_uses_dev( struct net_device *dev);
static inline bool vlan_hw_offload_capable(netdev_features_t features,
        __be16 proto)
{
 if (proto == (( __be16)(__builtin_constant_p((__u16)((0x8100))) ? ((__u16)( (((__u16)((0x8100)) & (__u16)0x00ffU) << 8) | (((__u16)((0x8100)) & (__u16)0xff00U) >> 8))) : __fswab16((0x8100)))) && features & ((netdev_features_t)1 << (NETIF_F_HW_VLAN_CTAG_TX_BIT)))
  return _true;
 if (proto == (( __be16)(__builtin_constant_p((__u16)((0x88A8))) ? ((__u16)( (((__u16)((0x88A8)) & (__u16)0x00ffU) << 8) | (((__u16)((0x88A8)) & (__u16)0xff00U) >> 8))) : __fswab16((0x88A8)))) && features & ((netdev_features_t)1 << (NETIF_F_HW_VLAN_STAG_TX_BIT)))
  return _true;
 return _false;
}
static inline struct sk_buff *vlan_insert_tag(struct sk_buff *skb,
           __be16 vlan_proto, u16 vlan_tci)
{
 struct vlan_ethhdr *veth;

 if (skb_cow_head(skb, 4) < 0) {
  kfree_skb(skb);
  return 0;
 }
 veth = (struct vlan_ethhdr *)skb_push(skb, 4);


 memmove(skb->data, skb->data + 4, 2 * 6);
 skb->mac_header -= 4;


 veth->h_vlan_proto = vlan_proto;


 veth->h_vlan_TCI = (( __be16)(__builtin_constant_p((__u16)((vlan_tci))) ? ((__u16)( (((__u16)((vlan_tci)) & (__u16)0x00ffU) << 8) | (((__u16)((vlan_tci)) & (__u16)0xff00U) >> 8))) : __fswab16((vlan_tci))));

 return skb;
}
static inline struct sk_buff *__vlan_put_tag(struct sk_buff *skb,
          __be16 vlan_proto, u16 vlan_tci)
{
 skb = vlan_insert_tag(skb, vlan_proto, vlan_tci);
 if (skb)
  skb->protocol = vlan_proto;
 return skb;
}
static inline struct sk_buff *__vlan_hwaccel_put_tag(struct sk_buff *skb,
           __be16 vlan_proto,
           u16 vlan_tci)
{
 skb->vlan_proto = vlan_proto;
 skb->vlan_tci = 0x1000 | vlan_tci;
 return skb;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8featuresE_2195_0 {
  typedef TJP__ZN10net_device8featuresE_2195_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long long int __get__ZN10net_device8featuresE_2195(unsigned long long int *source) {
  ::netdev_features_t __result_buffer;
  typedef TJP__ZN10net_device8featuresE_2195_0< ::netdev_features_t , ::net_device , ::netdev_features_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_features_t &)__result_buffer;
}
static inline struct sk_buff *vlan_put_tag(struct sk_buff *skb,
        __be16 vlan_proto, u16 vlan_tci)
{
 if (vlan_hw_offload_capable(__get__ZN10net_device8featuresE_2195(&skb->dev->features), vlan_proto)) {
  return __vlan_hwaccel_put_tag(skb, vlan_proto, vlan_tci);
 } else {
  return __vlan_put_tag(skb, vlan_proto, vlan_tci);
 }
}
static inline int __vlan_get_tag( struct sk_buff *skb, u16 *vlan_tci)
{
 struct vlan_ethhdr *veth = (struct vlan_ethhdr *)skb->data;

 if (veth->h_vlan_proto != (( __be16)(__builtin_constant_p((__u16)((0x8100))) ? ((__u16)( (((__u16)((0x8100)) & (__u16)0x00ffU) << 8) | (((__u16)((0x8100)) & (__u16)0xff00U) >> 8))) : __fswab16((0x8100)))) &&
     veth->h_vlan_proto != (( __be16)(__builtin_constant_p((__u16)((0x88A8))) ? ((__u16)( (((__u16)((0x88A8)) & (__u16)0x00ffU) << 8) | (((__u16)((0x88A8)) & (__u16)0xff00U) >> 8))) : __fswab16((0x88A8)))))
  return -22;

 *vlan_tci = (__builtin_constant_p((__u16)(( __u16)(__be16)(veth->h_vlan_TCI))) ? ((__u16)( (((__u16)(( __u16)(__be16)(veth->h_vlan_TCI)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(veth->h_vlan_TCI)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(veth->h_vlan_TCI)));
 return 0;
}
static inline int __vlan_hwaccel_get_tag( struct sk_buff *skb,
      u16 *vlan_tci)
{
 if (((skb)->vlan_tci & 0x1000)) {
  *vlan_tci = ((skb)->vlan_tci & ~0x1000);
  return 0;
 } else {
  *vlan_tci = 0;
  return -22;
 }
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8featuresE_2206_0 {
  typedef TJP__ZN10net_device8featuresE_2206_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long long int __get__ZN10net_device8featuresE_2206(unsigned long long int *source) {
  ::netdev_features_t __result_buffer;
  typedef TJP__ZN10net_device8featuresE_2206_0< ::netdev_features_t , ::net_device , ::netdev_features_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_features_t &)__result_buffer;
}
static inline int vlan_get_tag( struct sk_buff *skb, u16 *vlan_tci)
{
 if (__get__ZN10net_device8featuresE_2206(&skb->dev->features) & ((netdev_features_t)1 << (NETIF_F_HW_VLAN_CTAG_TX_BIT))) {
  return __vlan_hwaccel_get_tag(skb, vlan_tci);
 } else {
  return __vlan_get_tag(skb, vlan_tci);
 }
}
static inline __be16 vlan_get_protocol( struct sk_buff *skb)
{
 __be16 protocol = 0;

 if (((skb)->vlan_tci & 0x1000) ||
      skb->protocol != (( __be16)(__builtin_constant_p((__u16)((0x8100))) ? ((__u16)( (((__u16)((0x8100)) & (__u16)0x00ffU) << 8) | (((__u16)((0x8100)) & (__u16)0xff00U) >> 8))) : __fswab16((0x8100)))))
  protocol = skb->protocol;
 else {
  __be16 proto, *protop;
  protop = skb_header_pointer(skb, ((size_t) &((struct vlan_ethhdr *)0)->h_vlan_encapsulated_proto)
                                ,
      sizeof(proto), &proto);
  if (__builtin_expect(!!(protop), 1))
   protocol = *protop;
 }

 return protocol;
}

static inline void vlan_set_encap_proto(struct sk_buff *skb,
     struct vlan_hdr *vhdr)
{
 __be16 proto;
 unsigned short *rawp;






 proto = vhdr->h_vlan_encapsulated_proto;
 if ((__builtin_constant_p((__u16)(( __u16)(__be16)(proto))) ? ((__u16)( (((__u16)(( __u16)(__be16)(proto)) & (__u16)0x00ffU) << 8) | (((__u16)(( __u16)(__be16)(proto)) & (__u16)0xff00U) >> 8))) : __fswab16(( __u16)(__be16)(proto))) >= 0x0600) {
  skb->protocol = proto;
  return;
 }

 rawp = (unsigned short *)(vhdr + 1);
 if (*rawp == 0xFFFF)







  skb->protocol = (( __be16)(__builtin_constant_p((__u16)((0x0001))) ? ((__u16)( (((__u16)((0x0001)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0001)) & (__u16)0xff00U) >> 8))) : __fswab16((0x0001))));
 else



  skb->protocol = (( __be16)(__builtin_constant_p((__u16)((0x0004))) ? ((__u16)( (((__u16)((0x0004)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0004)) & (__u16)0xff00U) >> 8))) : __fswab16((0x0004))));
}

struct pollfd {
  template <typename, int = 0> struct __BYPASSpollfd {};
  template <typename, int> friend struct __BYPASSpollfd;
 int fd;
 short events;
 short revents;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct ctl_table epoll_table[];
struct poll_table_struct;




typedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);





typedef struct poll_table_struct {
  template <typename, int = 0> struct __BYPASSpoll_table_struct {};
  template <typename, int> friend struct __BYPASSpoll_table_struct;
 poll_queue_proc _qproc;
 unsigned long _key;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} poll_table;

static inline void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)
{
 if (p && p->_qproc && wait_address)
  p->_qproc(filp, wait_address, p);
}






static inline bool poll_does_not_wait( poll_table *p)
{
 return p == 0 || p->_qproc == 0;
}







static inline unsigned long poll_requested_events( poll_table *p)
{
 return p ? p->_key : ~0UL;
}

static inline void init_poll_funcptr(poll_table *pt, poll_queue_proc qproc)
{
 pt->_qproc = qproc;
 pt->_key = ~0UL;
}

struct poll_table_entry {
  template <typename, int = 0> struct __BYPASSpoll_table_entry {};
  template <typename, int> friend struct __BYPASSpoll_table_entry;
 struct file *filp;
 unsigned long key;
 wait_queue_t wait;
 wait_queue_head_t *wait_address;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct poll_wqueues {
  template <typename, int = 0> struct __BYPASSpoll_wqueues {};
  template <typename, int> friend struct __BYPASSpoll_wqueues;
 poll_table pt;
 struct poll_table_page *table;
 struct task_struct *polling_task;
 int triggered;
 int error;
 int inline_index;
 struct poll_table_entry inline_entries[((832 - 256) / sizeof(struct poll_table_entry))];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void poll_initwait(struct poll_wqueues *pwq);
extern void poll_freewait(struct poll_wqueues *pwq);
extern int poll_schedule_timeout(struct poll_wqueues *pwq, int state,
     ktime_t *expires, unsigned long slack);
extern long select_estimate_accuracy(struct timespec *tv);


static inline int poll_schedule(struct poll_wqueues *pwq, int state)
{
 return poll_schedule_timeout(pwq, state, 0, 0);
}





typedef struct {
 unsigned long *in, *out, *ex;
 unsigned long *res_in, *res_out, *res_ex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} fd_set_bits;
static inline
int get_fd_set(unsigned long nr, void *ufdset, unsigned long *fdset)
{
 nr = ((((nr)+(8*sizeof(long))-1)/(8*sizeof(long)))*sizeof(long));
 if (ufdset)
  return copy_from_user(fdset, ufdset, nr) ? -14 : 0;

 memset(fdset, 0, nr);
 return 0;
}

static inline unsigned long
set_fd_set(unsigned long nr, void *ufdset, unsigned long *fdset)
{
 if (ufdset)
  return __copy_to_user(ufdset, fdset, ((((nr)+(8*sizeof(long))-1)/(8*sizeof(long)))*sizeof(long)));
 return 0;
}

static inline
void zero_fd_set(unsigned long nr, unsigned long *fdset)
{
 memset(fdset, 0, ((((nr)+(8*sizeof(long))-1)/(8*sizeof(long)))*sizeof(long)));
}



extern int do_select(int n, fd_set_bits *fds, struct timespec *end_time);
extern int do_sys_poll(struct pollfd * ufds, unsigned int nfds,
         struct timespec *end_time);
extern int core_sys_select(int n, fd_set *inp, fd_set *outp,
      fd_set *exp, struct timespec *end_time);

extern int poll_select_set_timeout(struct timespec *to, long sec, long nsec);

extern char modprobe_path[];


extern __attribute__((format(printf, 2, 3)))
int __request_module(bool wait, char *name, ...);
struct cred;
struct file;






struct subprocess_info {
  template <typename, int = 0> struct __BYPASSsubprocess_info {};
  template <typename, int> friend struct __BYPASSsubprocess_info;
 struct work_struct work;
 struct completion *complete;
 char *path;
 char **argv;
 char **envp;
 int wait;
 int retval;
 int (*init)(struct subprocess_info *info, struct cred *_new);
 void (*cleanup)(struct subprocess_info *info);
 void *data;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int
call_usermodehelper(char *path, char **argv, char **envp, int wait);

extern struct subprocess_info *
call_usermodehelper_setup(char *path, char **argv, char **envp, gfp_t gfp_mask,
     int (*init)(struct subprocess_info *info, struct cred *_new),
     void (*cleanup)(struct subprocess_info *), void *data);

extern int
call_usermodehelper_exec(struct subprocess_info *info, int wait);

extern struct ctl_table usermodehelper_table[];

enum umh_disable_depth {
 UMH_ENABLED = 0,
 UMH_FREEZING,
 UMH_DISABLED,
};

extern void usermodehelper_init(void);

extern int __usermodehelper_disable(enum umh_disable_depth depth);
extern void __usermodehelper_set_disable_depth(enum umh_disable_depth depth);

static inline int usermodehelper_disable(void)
{
 return __usermodehelper_disable(UMH_DISABLED);
}

static inline void usermodehelper_enable(void)
{
 __usermodehelper_set_disable_depth(UMH_ENABLED);
}

extern int usermodehelper_read_trylock(void);
extern long usermodehelper_read_lock_wait(long timeout);
extern void usermodehelper_read_unlock(void);









struct user_i387_struct {
  template <typename, int = 0> struct __BYPASSuser_i387_struct {};
  template <typename, int> friend struct __BYPASSuser_i387_struct;
 unsigned short cwd;
 unsigned short swd;
 unsigned short twd;

 unsigned short fop;
 __u64 rip;
 __u64 rdp;
 __u32 mxcsr;
 __u32 mxcsr_mask;
 __u32 st_space[32];
 __u32 xmm_space[64];
 __u32 padding[24];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct user_regs_struct {
  template <typename, int = 0> struct __BYPASSuser_regs_struct {};
  template <typename, int> friend struct __BYPASSuser_regs_struct;
 unsigned long r15;
 unsigned long r14;
 unsigned long r13;
 unsigned long r12;
 unsigned long bp;
 unsigned long bx;
 unsigned long r11;
 unsigned long r10;
 unsigned long r9;
 unsigned long r8;
 unsigned long ax;
 unsigned long cx;
 unsigned long dx;
 unsigned long si;
 unsigned long di;
 unsigned long orig_ax;
 unsigned long ip;
 unsigned long cs;
 unsigned long flags;
 unsigned long sp;
 unsigned long ss;
 unsigned long fs_base;
 unsigned long gs_base;
 unsigned long ds;
 unsigned long es;
 unsigned long fs;
 unsigned long gs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct user {
  template <typename, int = 0> struct __BYPASSuser {};
  template <typename, int> friend struct __BYPASSuser;


  struct user_regs_struct regs;

  int u_fpvalid;

  int pad0;
  struct user_i387_struct i387;

  unsigned long int u_tsize;
  unsigned long int u_dsize;
  unsigned long int u_ssize;
  unsigned long start_code;
  unsigned long start_stack;



  long int signal;
  int reserved;
  int pad1;
  unsigned long u_ar0;

  struct user_i387_struct *u_fpstate;
  unsigned long magic;
  char u_comm[32];
  unsigned long u_debugreg[8];
  unsigned long error_code;
  unsigned long fault_address;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct user_ymmh_regs {
  template <typename, int = 0> struct __BYPASSuser_ymmh_regs {};
  template <typename, int> friend struct __BYPASSuser_ymmh_regs;

 __u32 ymmh_space[64];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct user_xsave_hdr {
  template <typename, int = 0> struct __BYPASSuser_xsave_hdr {};
  template <typename, int> friend struct __BYPASSuser_xsave_hdr;
 __u64 xstate_bv;
 __u64 reserved1[2];
 __u64 reserved2[5];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct user_xstateregs {
  template <typename, int = 0> struct __BYPASSuser_xstateregs {};
  template <typename, int> friend struct __BYPASSuser_xstateregs;
 struct {
  __u64 fpx_space[58];
  __u64 xstate_fx_sw[6];
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} i387;
 struct user_xsave_hdr xsave_hdr;
 struct user_ymmh_regs ymmh;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};


typedef unsigned long elf_greg_t;


typedef elf_greg_t elf_gregset_t[(sizeof(struct user_regs_struct) / sizeof(elf_greg_t))];

typedef struct user_i387_struct elf_fpregset_t;




extern char VDSO32_PRELINK[];
extern void* __kernel_sigreturn;
extern void* __kernel_rt_sigreturn;






extern char vdso32_int80_start, vdso32_int80_end;
extern char vdso32_syscall_start, vdso32_syscall_end;
extern char vdso32_sysenter_start, vdso32_sysenter_end;

extern unsigned int vdso_enabled;
static inline void elf_common_init(struct thread_struct *t,
       struct pt_regs *regs, u16 ds)
{
 regs->ax = regs->bx = regs->cx = regs->dx = 0;
 regs->si = regs->di = regs->bp = 0;
 regs->r8 = regs->r9 = regs->r10 = regs->r11 = 0;
 regs->r12 = regs->r13 = regs->r14 = regs->r15 = 0;
 t->fs = t->gs = 0;
 t->fsindex = t->gsindex = 0;
 t->ds = t->es = ds;
}







void start_thread_ia32(struct pt_regs *regs, u32 new_ip, u32 new_sp);


void set_personality_ia32(bool);
extern void set_personality_64bit(void);
extern unsigned int sysctl_vsyscall32;
extern int force_personality32;
struct task_struct;
struct linux_binprm;


extern int arch_setup_additional_pages(struct linux_binprm *bprm,
           int uses_interp);
extern int x32_setup_additional_pages(struct linux_binprm *bprm,
          int uses_interp);

extern int syscall32_setup_pages(struct linux_binprm *, int exstack);


extern unsigned long arch_randomize_brk(struct mm_struct *mm);





static inline int mmap_is_ia32(void)
{




 if (test_ti_thread_flag(current_thread_info(), 29))
  return 1;

 return 0;
}


enum align_flags {
 ALIGN_VA_32 = (1UL << (0)),
 ALIGN_VA_64 = (1UL << (1)),
};

struct va_alignment {
  template <typename, int = 0> struct __BYPASSva_alignment {};
  template <typename, int> friend struct __BYPASSva_alignment;
 int flags;
 unsigned long mask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((__aligned__((1 << (6)))));

extern struct va_alignment va_align;
extern unsigned long align_vdso_addr(unsigned long);






typedef __u32 Elf32_Addr;
typedef __u16 Elf32_Half;
typedef __u32 Elf32_Off;
typedef __s32 Elf32_Sword;
typedef __u32 Elf32_Word;


typedef __u64 Elf64_Addr;
typedef __u16 Elf64_Half;
typedef __s16 Elf64_SHalf;
typedef __u64 Elf64_Off;
typedef __s32 Elf64_Sword;
typedef __u32 Elf64_Word;
typedef __u64 Elf64_Xword;
typedef __s64 Elf64_Sxword;
typedef struct dynamic{
  template <typename, int = 0> struct __BYPASSdynamic {};
  template <typename, int> friend struct __BYPASSdynamic;
  Elf32_Sword d_tag;
  union{
    Elf32_Sword d_val;
    Elf32_Addr d_ptr;
  } d_un;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Dyn;

typedef struct {
  Elf64_Sxword d_tag;
  union {
    Elf64_Xword d_val;
    Elf64_Addr d_ptr;
  } d_un;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Dyn;
typedef struct elf32_rel {
  template <typename, int = 0> struct __BYPASSelf32_rel {};
  template <typename, int> friend struct __BYPASSelf32_rel;
  Elf32_Addr r_offset;
  Elf32_Word r_info;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Rel;

typedef struct elf64_rel {
  template <typename, int = 0> struct __BYPASSelf64_rel {};
  template <typename, int> friend struct __BYPASSelf64_rel;
  Elf64_Addr r_offset;
  Elf64_Xword r_info;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Rel;

typedef struct elf32_rela{
  template <typename, int = 0> struct __BYPASSelf32_rela {};
  template <typename, int> friend struct __BYPASSelf32_rela;
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Rela;

typedef struct elf64_rela {
  template <typename, int = 0> struct __BYPASSelf64_rela {};
  template <typename, int> friend struct __BYPASSelf64_rela;
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Rela;

typedef struct elf32_sym{
  template <typename, int = 0> struct __BYPASSelf32_sym {};
  template <typename, int> friend struct __BYPASSelf32_sym;
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Half st_shndx;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Sym;

typedef struct elf64_sym {
  template <typename, int = 0> struct __BYPASSelf64_sym {};
  template <typename, int> friend struct __BYPASSelf64_sym;
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Half st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Sym;




typedef struct elf32_hdr{
  template <typename, int = 0> struct __BYPASSelf32_hdr {};
  template <typename, int> friend struct __BYPASSelf32_hdr;
  unsigned char e_ident[16];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Ehdr;

typedef struct elf64_hdr {
  template <typename, int = 0> struct __BYPASSelf64_hdr {};
  template <typename, int> friend struct __BYPASSelf64_hdr;
  unsigned char e_ident[16];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Ehdr;







typedef struct elf32_phdr{
  template <typename, int = 0> struct __BYPASSelf32_phdr {};
  template <typename, int> friend struct __BYPASSelf32_phdr;
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Phdr;

typedef struct elf64_phdr {
  template <typename, int = 0> struct __BYPASSelf64_phdr {};
  template <typename, int> friend struct __BYPASSelf64_phdr;
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Phdr;
typedef struct elf32_shdr {
  template <typename, int = 0> struct __BYPASSelf32_shdr {};
  template <typename, int> friend struct __BYPASSelf32_shdr;
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Shdr;

typedef struct elf64_shdr {
  template <typename, int = 0> struct __BYPASSelf64_shdr {};
  template <typename, int> friend struct __BYPASSelf64_shdr;
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Shdr;
typedef struct elf32_note {
  template <typename, int = 0> struct __BYPASSelf32_note {};
  template <typename, int> friend struct __BYPASSelf32_note;
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf32_Nhdr;


typedef struct elf64_note {
  template <typename, int = 0> struct __BYPASSelf64_note {};
  template <typename, int> friend struct __BYPASSelf64_note;
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} Elf64_Nhdr;
extern Elf64_Dyn _DYNAMIC [];
struct file;
struct coredump_params;


static inline int elf_coredump_extra_notes_size(void) { return 0; }
static inline int elf_coredump_extra_notes_write(struct coredump_params *cprm) { return 0; }


struct kernel_param;






enum {
 KERNEL_PARAM_FL_NOARG = (1 << 0)
};

struct kernel_param_ops {
  template <typename, int = 0> struct __BYPASSkernel_param_ops {};
  template <typename, int> friend struct __BYPASSkernel_param_ops;

 unsigned int flags;

 int (*set)( char *val, struct kernel_param *kp);

 int (*get)(char *buffer, struct kernel_param *kp);

 void (*free)(void *arg);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct kernel_param {
  template <typename, int = 0> struct __BYPASSkernel_param {};
  template <typename, int> friend struct __BYPASSkernel_param;
 char *name;
 struct kernel_param_ops *ops;
 u16 perm;
 s16 level;
 union {
  void *arg;
  struct kparam_string *str;
  struct kparam_array *arr;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct kparam_string {
  template <typename, int = 0> struct __BYPASSkparam_string {};
  template <typename, int> friend struct __BYPASSkparam_string;
 unsigned int maxlen;
 char *string;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct kparam_array
{
  template <typename, int = 0> struct __BYPASSkparam_array {};
  template <typename, int> friend struct __BYPASSkparam_array;
 unsigned int max;
 unsigned int elemsize;
 unsigned int *num;
 struct kernel_param_ops *ops;
 void *elem;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline int
__check_old_set_param(int (*oldset)( char *, struct kernel_param *))
{
 return 0;
}
extern void __kernel_param_lock(void);
extern void __kernel_param_unlock(void);
extern bool parameq( char *name1, char *name2);
extern bool parameqn( char *name1, char *name2, size_t n);


extern int parse_args( char *name,
        char *args,
        struct kernel_param *params,
        unsigned num,
        s16 level_min,
        s16 level_max,
        int (*unknown)(char *param, char *val,
         char *doing));



extern void destroy_params( struct kernel_param *params, unsigned num);
extern struct kernel_param_ops param_ops_byte;
extern int param_set_byte( char *val, struct kernel_param *kp);
extern int param_get_byte(char *buffer, struct kernel_param *kp);


extern struct kernel_param_ops param_ops_short;
extern int param_set_short( char *val, struct kernel_param *kp);
extern int param_get_short(char *buffer, struct kernel_param *kp);


extern struct kernel_param_ops param_ops_ushort;
extern int param_set_ushort( char *val, struct kernel_param *kp);
extern int param_get_ushort(char *buffer, struct kernel_param *kp);


extern struct kernel_param_ops param_ops_int;
extern int param_set_int( char *val, struct kernel_param *kp);
extern int param_get_int(char *buffer, struct kernel_param *kp);


extern struct kernel_param_ops param_ops_uint;
extern int param_set_uint( char *val, struct kernel_param *kp);
extern int param_get_uint(char *buffer, struct kernel_param *kp);


extern struct kernel_param_ops param_ops_long;
extern int param_set_long( char *val, struct kernel_param *kp);
extern int param_get_long(char *buffer, struct kernel_param *kp);


extern struct kernel_param_ops param_ops_ulong;
extern int param_set_ulong( char *val, struct kernel_param *kp);
extern int param_get_ulong(char *buffer, struct kernel_param *kp);


extern struct kernel_param_ops param_ops_charp;
extern int param_set_charp( char *val, struct kernel_param *kp);
extern int param_get_charp(char *buffer, struct kernel_param *kp);



extern struct kernel_param_ops param_ops_bool;
extern int param_set_bool( char *val, struct kernel_param *kp);
extern int param_get_bool(char *buffer, struct kernel_param *kp);


extern struct kernel_param_ops param_ops_invbool;
extern int param_set_invbool( char *val, struct kernel_param *kp);
extern int param_get_invbool(char *buffer, struct kernel_param *kp);



extern struct kernel_param_ops param_ops_bint;
extern int param_set_bint( char *val, struct kernel_param *kp);
extern struct kernel_param_ops param_array_ops;

extern struct kernel_param_ops param_ops_string;
extern int param_set_copystring( char *val, struct kernel_param *);
extern int param_get_string(char *buffer, struct kernel_param *kp);



struct module;


extern int module_param_sysfs_setup(struct module *mod,
        struct kernel_param *kparam,
        unsigned int num_params);

extern void module_param_sysfs_remove(struct module *mod);

struct module;
struct tracepoint;

struct tracepoint_func {
  template <typename, int = 0> struct __BYPASStracepoint_func {};
  template <typename, int> friend struct __BYPASStracepoint_func;
 void *func;
 void *data;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tracepoint {
  template <typename, int = 0> struct __BYPASStracepoint {};
  template <typename, int> friend struct __BYPASStracepoint;
 char *name;
 struct static_key key;
 void (*regfunc)(void);
 void (*unregfunc)(void);
 struct tracepoint_func *funcs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





extern int tracepoint_probe_register( char *name, void *probe, void *data);





extern int
tracepoint_probe_unregister( char *name, void *probe, void *data);

extern int tracepoint_probe_register_noupdate( char *name, void *probe,
           void *data);
extern int tracepoint_probe_unregister_noupdate( char *name, void *probe,
      void *data);
extern void tracepoint_probe_update_all(void);


struct tp_module {
  template <typename, int = 0> struct __BYPASStp_module {};
  template <typename, int> friend struct __BYPASStp_module;
 struct list_head list;
 unsigned int num_tracepoints;
 struct tracepoint * *tracepoints_ptrs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
bool trace_module_has_bad_taint(struct module *mod);







struct tracepoint_iter {
  template <typename, int = 0> struct __BYPASStracepoint_iter {};
  template <typename, int> friend struct __BYPASStracepoint_iter;

 struct tp_module *module;

 struct tracepoint * *tracepoint;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern void tracepoint_iter_start(struct tracepoint_iter *iter);
extern void tracepoint_iter_next(struct tracepoint_iter *iter);
extern void tracepoint_iter_stop(struct tracepoint_iter *iter);
extern void tracepoint_iter_reset(struct tracepoint_iter *iter);






struct mod_arch_specific
{
  template <typename, int = 0> struct __BYPASSmod_arch_specific {};
  template <typename, int> friend struct __BYPASSmod_arch_specific;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct modversion_info
{
  template <typename, int = 0> struct __BYPASSmodversion_info {};
  template <typename, int> friend struct __BYPASSmodversion_info;
 unsigned long crc;
 char name[(64 - sizeof(unsigned long))];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct module;

struct module_kobject {
  template <typename, int = 0> struct __BYPASSmodule_kobject {};
  template <typename, int> friend struct __BYPASSmodule_kobject;
 struct kobject kobj;
 struct module *mod;
 struct kobject *drivers_dir;
 struct module_param_attrs *mp;
 struct completion *kobj_completion;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct module_attribute {
  template <typename, int = 0> struct __BYPASSmodule_attribute {};
  template <typename, int> friend struct __BYPASSmodule_attribute;
 struct attribute attr;
 ssize_t (*show)(struct module_attribute *, struct module_kobject *,
   char *);
 ssize_t (*store)(struct module_attribute *, struct module_kobject *,
    char *, size_t count);
 void (*setup)(struct module *, char *);
 int (*test)(struct module *);
 void (*free)(struct module *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct module_version_attribute {
  template <typename, int = 0> struct __BYPASSmodule_version_attribute {};
  template <typename, int> friend struct __BYPASSmodule_version_attribute;
 struct module_attribute mattr;
 char *module_name;
 char *version;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((__aligned__(sizeof(void *))));

extern ssize_t __modver_version_show(struct module_attribute *,
         struct module_kobject *, char *);

extern struct module_attribute module_uevent;


extern int init_module(void);
extern void cleanup_module(void);


struct exception_table_entry;

 struct exception_table_entry *
search_extable( struct exception_table_entry *first,
        struct exception_table_entry *last,
        unsigned long value);
void sort_extable(struct exception_table_entry *start,
    struct exception_table_entry *finish);
void sort_main_extable(void);
void trim_init_extable(struct module *m);
 struct exception_table_entry *search_exception_tables(unsigned long add);

struct notifier_block;



extern int modules_disabled;

void *__symbol_get( char *symbol);
void *__symbol_get_gpl( char *symbol);



struct module_use {
  template <typename, int = 0> struct __BYPASSmodule_use {};
  template <typename, int> friend struct __BYPASSmodule_use;
 struct list_head source_list;
 struct list_head target_list;
 struct module *source, *target;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum module_state {
 MODULE_STATE_LIVE,
 MODULE_STATE_COMING,
 MODULE_STATE_GOING,
 MODULE_STATE_UNFORMED,
};
struct module_ref {
  template <typename, int = 0> struct __BYPASSmodule_ref {};
  template <typename, int> friend struct __BYPASSmodule_ref;
 unsigned long incs;
 unsigned long decs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute((aligned(2 * sizeof(unsigned long))));

struct module
{
  template <typename, int = 0> struct __BYPASSmodule {};
  template <typename, int> friend struct __BYPASSmodule;
 enum module_state state;


 struct list_head list;


 char name[(64 - sizeof(unsigned long))];


 struct module_kobject mkobj;
 struct module_attribute *modinfo_attrs;
 char *version;
 char *srcversion;
 struct kobject *holders_dir;


 struct kernel_symbol *syms;
 unsigned long *crcs;
 unsigned int num_syms;


 struct kernel_param *kp;
 unsigned int num_kp;


 unsigned int num_gpl_syms;
 struct kernel_symbol *gpl_syms;
 unsigned long *gpl_crcs;



 struct kernel_symbol *unused_syms;
 unsigned long *unused_crcs;
 unsigned int num_unused_syms;


 unsigned int num_unused_gpl_syms;
 struct kernel_symbol *unused_gpl_syms;
 unsigned long *unused_gpl_crcs;




 bool sig_ok;



 struct kernel_symbol *gpl_future_syms;
 unsigned long *gpl_future_crcs;
 unsigned int num_gpl_future_syms;


 unsigned int num_exentries;
 struct exception_table_entry *extable;


 int (*init)(void);


 void *module_init;


 void *module_core;


 unsigned int init_size, core_size;


 unsigned int init_text_size, core_text_size;


 unsigned int init_ro_size, core_ro_size;


 struct mod_arch_specific arch;

 unsigned int taints;



 unsigned num_bugs;
 struct list_head bug_list;
 struct bug_entry *bug_table;
 Elf64_Sym *symtab, *core_symtab;
 unsigned int num_symtab, core_num_syms;
 char *strtab, *core_strtab;


 struct module_sect_attrs *sect_attrs;


 struct module_notes_attrs *notes_attrs;




 char *args;



 void *percpu;
 unsigned int percpu_size;
 unsigned int num_trace_bprintk_fmt;
 char **trace_bprintk_fmt_start;


 struct ftrace_event_call **trace_events;
 unsigned int num_trace_events;


 unsigned int num_ftrace_callsites;
 unsigned long *ftrace_callsites;




 struct list_head source_list;

 struct list_head target_list;


 void (*exit)(void);

 struct module_ref *refptr;








  friend class ::Introspect;
  friend class ::MyIntrospect;
};




extern struct mutex module_mutex;





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6module5stateE_2219_0 {
  typedef TJP__ZN6module5stateE_2219_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline module_state __get__ZN6module5stateE_2219(module_state *source) {
  ::module_state __result_buffer;
  typedef TJP__ZN6module5stateE_2219_0< ::module_state , ::module , ::module_state  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::module_state &)__result_buffer;
}
static inline int module_is_live(struct module *mod)
{
 return __get__ZN6module5stateE_2219(&mod->state) != MODULE_STATE_GOING;
}

struct module *__module_text_address(unsigned long addr);
struct module *__module_address(unsigned long addr);
bool is_module_address(unsigned long addr);
bool is_module_percpu_address(unsigned long addr);
bool is_module_text_address(unsigned long addr);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6module11module_coreE_2221_0 {
  typedef TJP__ZN6module11module_coreE_2221_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN6module11module_coreE_2221(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN6module11module_coreE_2221_0< void *, ::module , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6module11module_coreE_2222_0 {
  typedef TJP__ZN6module11module_coreE_2222_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN6module11module_coreE_2222(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN6module11module_coreE_2222_0< void *, ::module , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6module9core_sizeE_2223_0 {
  typedef TJP__ZN6module9core_sizeE_2223_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN6module9core_sizeE_2223(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN6module9core_sizeE_2223_0< unsigned int , ::module , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int within_module_core(unsigned long addr, struct module *mod)
{
 return (unsigned long)__get__ZN6module11module_coreE_2221(&mod->module_core) <= addr &&
        addr < (unsigned long)__get__ZN6module11module_coreE_2222(&mod->module_core) + __get__ZN6module9core_sizeE_2223(&mod->core_size);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6module11module_initE_2224_0 {
  typedef TJP__ZN6module11module_initE_2224_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN6module11module_initE_2224(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN6module11module_initE_2224_0< void *, ::module , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6module11module_initE_2225_0 {
  typedef TJP__ZN6module11module_initE_2225_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN6module11module_initE_2225(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN6module11module_initE_2225_0< void *, ::module , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6module9init_sizeE_2226_0 {
  typedef TJP__ZN6module9init_sizeE_2226_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN6module9init_sizeE_2226(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN6module9init_sizeE_2226_0< unsigned int , ::module , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int within_module_init(unsigned long addr, struct module *mod)
{
 return (unsigned long)__get__ZN6module11module_initE_2224(&mod->module_init) <= addr &&
        addr < (unsigned long)__get__ZN6module11module_initE_2225(&mod->module_init) + __get__ZN6module9init_sizeE_2226(&mod->init_size);
}


struct module *find_module( char *name);

struct symsearch {
  template <typename, int = 0> struct __BYPASSsymsearch {};
  template <typename, int> friend struct __BYPASSsymsearch;
 struct kernel_symbol *start, *stop;
 unsigned long *crcs;
 enum {
  NOT_GPL_ONLY,
  GPL_ONLY,
  WILL_BE_GPL_ONLY,
 } licence;
 bool unused;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


 struct kernel_symbol *find_symbol( char *name,
     struct module **owner,
     unsigned long **crc,
     bool gplok,
     bool warn);


bool each_symbol_section(bool (*fn)( struct symsearch *arr,
        struct module *owner,
        void *data), void *data);



int module_get_kallsym(unsigned int symnum, unsigned long *value, char *type,
   char *name, char *module_name, int *exported);


unsigned long module_kallsyms_lookup_name( char *name);

int module_kallsyms_on_each_symbol(int (*fn)(void *, char *,
          struct module *, unsigned long),
       void *data);

extern void __module_put_and_exit(struct module *mod, long code)
 __attribute__((noreturn));



unsigned long module_refcount(struct module *mod);
void __symbol_put( char *symbol);

void symbol_put_addr(void *addr);



extern void __module_get(struct module *module);



extern bool try_module_get(struct module *module);

extern void module_put(struct module *module);
int ref_module(struct module *a, struct module *b);
 char *module_address_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname,
       char *namebuf);
int lookup_module_symbol_name(unsigned long addr, char *symname);
int lookup_module_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);


 struct exception_table_entry *search_module_extables(unsigned long addr);

int register_module_notifier(struct notifier_block * nb);
int unregister_module_notifier(struct notifier_block * nb);

extern void print_modules(void);
extern struct kset *module_kset;
extern struct kobj_type module_ktype;
extern int module_sysfs_initialized;
extern void set_all_modules_text_rw(void);
extern void set_all_modules_text_ro(void);






void module_bug_finalize( Elf64_Ehdr *, Elf64_Shdr *,
    struct module *);
void module_bug_cleanup(struct module *);







static inline void pagefault_disable(void)
{
 __preempt_count_add(1);




 __asm__ __volatile__("": : :"memory");
}

static inline void pagefault_enable(void)
{




 __asm__ __volatile__("": : :"memory");
 __preempt_count_sub(1);
 do { } while (0);
}
extern long probe_kernel_read(void *dst, void *src, size_t size);
extern long __probe_kernel_read(void *dst, void *src, size_t size);
extern long probe_kernel_write(void *dst, void *src, size_t size);
extern long __probe_kernel_write(void *dst, void *src, size_t size);






static inline unsigned long get_page_memtype(struct page *pg)
{
 unsigned long pg_flags = pg->flags & (1UL << PG_uncached | 1UL << PG_arch_1);

 if (pg_flags == 0)
  return -1;
 else if (pg_flags == (1UL << PG_arch_1))
  return ((((pteval_t)(1)) << 3));
 else if (pg_flags == (1UL << PG_uncached))
  return ((((pteval_t)(1)) << 4));
 else
  return (0);
}

static inline void set_page_memtype(struct page *pg, unsigned long memtype)
{
 unsigned long memtype_flags = 0;
 unsigned long old_flags;
 unsigned long new_flags;

 switch (memtype) {
 case ((((pteval_t)(1)) << 3)):
  memtype_flags = (1UL << PG_arch_1);
  break;
 case ((((pteval_t)(1)) << 4)):
  memtype_flags = (1UL << PG_uncached);
  break;
 case (0):
  memtype_flags = (1UL << PG_uncached | 1UL << PG_arch_1);
  break;
 }

 do {
  old_flags = pg->flags;
  new_flags = (old_flags & (~(1UL << PG_uncached | 1UL << PG_arch_1))) | memtype_flags;
 } while (({ __typeof__(*((&pg->flags))) __ret; __typeof__(*((&pg->flags))) __old = ((old_flags)); __typeof__(*((&pg->flags))) __new = ((new_flags)); switch ((sizeof(*(&pg->flags)))) { case 1: { u8 *__ptr = ( u8 *)((&pg->flags)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { u16 *__ptr = ( u16 *)((&pg->flags)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { u32 *__ptr = ( u32 *)((&pg->flags)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { u64 *__ptr = ( u64 *)((&pg->flags)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; }) != old_flags);
}
int _set_memory_uc(unsigned long addr, int numpages);
int _set_memory_wc(unsigned long addr, int numpages);
int _set_memory_wb(unsigned long addr, int numpages);
int set_memory_uc(unsigned long addr, int numpages);
int set_memory_wc(unsigned long addr, int numpages);
int set_memory_wb(unsigned long addr, int numpages);
int set_memory_x(unsigned long addr, int numpages);
int set_memory_nx(unsigned long addr, int numpages);
int set_memory_ro(unsigned long addr, int numpages);
int set_memory_rw(unsigned long addr, int numpages);
int set_memory_np(unsigned long addr, int numpages);
int set_memory_4k(unsigned long addr, int numpages);

int set_memory_array_uc(unsigned long *addr, int addrinarray);
int set_memory_array_wc(unsigned long *addr, int addrinarray);
int set_memory_array_wb(unsigned long *addr, int addrinarray);

int set_pages_array_uc(struct page **pages, int addrinarray);
int set_pages_array_wc(struct page **pages, int addrinarray);
int set_pages_array_wb(struct page **pages, int addrinarray);
int set_pages_uc(struct page *page, int numpages);
int set_pages_wb(struct page *page, int numpages);
int set_pages_x(struct page *page, int numpages);
int set_pages_nx(struct page *page, int numpages);
int set_pages_ro(struct page *page, int numpages);
int set_pages_rw(struct page *page, int numpages);


void clflush_cache_range(void *addr, unsigned int size);


void mark_rodata_ro(void);
extern int rodata_test_data;
extern int kernel_set_to_readonly;
void set_kernel_text_rw(void);
void set_kernel_text_ro(void);
static inline int rodata_test(void)
{
 return 0;
}


static inline void flush_anon_page(struct vm_area_struct *vma, struct page *page, unsigned long vmaddr)
{
}



static inline void flush_kernel_dcache_page(struct page *page)
{
}
static inline void flush_kernel_vmap_range(void *vaddr, int size)
{
}
static inline void invalidate_kernel_vmap_range(void *vaddr, int size)
{
}
static inline unsigned int nr_free_highpages(void) { return 0; }

static inline struct page *kmap_to_page(void *addr)
{
 return (((struct page *)(0xffffea0000000000UL)) + (__phys_addr_nodebug((unsigned long)(addr)) >> 12));
}




static inline void *kmap(struct page *page)
{
 do { _cond_resched(); } while (0);
 return lowmem_page_address(page);
}

static inline void kunmap(struct page *page)
{
}

static inline void *kmap_atomic(struct page *page)
{




        return g_map(lowmem_page_address(page), ((1UL) << 12));

}


static inline void __kunmap_atomic(void *addr)
{
 pagefault_enable();
}
static inline void clear_user_highpage(struct page *page, unsigned long vaddr)
{
 void *addr = kmap_atomic(page);
 clear_user_page(addr, vaddr, page);
 g_unmap(addr);
}
static inline struct page *
alloc_zeroed_user_highpage_movable(struct vm_area_struct *vma,
     unsigned long vaddr)
{
 return alloc_pages_vma(((( gfp_t)0x10u) | (( gfp_t)0x40u) | (( gfp_t)0x80u) | (( gfp_t)0x20000u) | (( gfp_t)0x02u)) | (( gfp_t)0x8000u) | (( gfp_t)0x08u), 0, vma, vaddr, numa_node_id());
}

static inline void clear_highpage(struct page *page)
{
 void *kaddr = kmap_atomic(page);
 clear_page(kaddr);
 g_unmap(kaddr);
}

static inline void zero_user_segments(struct page *page,
 unsigned start1, unsigned end1,
 unsigned start2, unsigned end2)
{
 void *kaddr = kmap_atomic(page);

 (end1 > ((1UL) << 12) || end2 > ((1UL) << 12));

 if (end1 > start1)
  memset(kaddr + start1, 0, end1 - start1);

 if (end2 > start2)
  memset(kaddr + start2, 0, end2 - start2);

 g_unmap(kaddr);
 do { } while (0);
}

static inline void zero_user_segment(struct page *page,
 unsigned start, unsigned end)
{
 zero_user_segments(page, start, end, 0, 0);
}

static inline void zero_user(struct page *page,
 unsigned start, unsigned size)
{
 zero_user_segments(page, start, start + size, 0, 0);
}



static inline void copy_user_highpage(struct page *to, struct page *from,
 unsigned long vaddr, struct vm_area_struct *vma)
{
 char *vfrom, *vto;

 vfrom = kmap_atomic(from);
 vto = kmap_atomic(to);
 copy_user_page(vto, vfrom, vaddr, to);
 g_unmap(vto);
 g_unmap(vfrom);
}



static inline void copy_highpage(struct page *to, struct page *from)
{
 char *vfrom, *vto;

 vfrom = kmap_atomic(from);
 vto = kmap_atomic(to);
 copy_page(vto, vfrom);
 g_unmap(vto);
 g_unmap(vfrom);
}
struct super_block;
struct vfsmount;
struct dentry;
struct mnt_namespace;
struct vfsmount {
  template <typename, int = 0> struct __BYPASSvfsmount {};
  template <typename, int> friend struct __BYPASSvfsmount;
 struct dentry *mnt_root;
 struct super_block *mnt_sb;
 int mnt_flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct file;

extern int mnt_want_write(struct vfsmount *mnt);
extern int mnt_want_write_file(struct file *file);
extern int mnt_clone_write(struct vfsmount *mnt);
extern void mnt_drop_write(struct vfsmount *mnt);
extern void mnt_drop_write_file(struct file *file);
extern void mntput(struct vfsmount *mnt);
extern struct vfsmount *mntget(struct vfsmount *mnt);
extern void mnt_pin(struct vfsmount *mnt);
extern void mnt_unpin(struct vfsmount *mnt);
extern int __mnt_is_readonly(struct vfsmount *mnt);

struct path;
extern struct vfsmount *clone_private_mount(struct path *path);

struct file_system_type;
extern struct vfsmount *vfs_kern_mount(struct file_system_type *type,
          int flags, char *name,
          void *data);

extern void mnt_set_expiry(struct vfsmount *mnt, struct list_head *expiry_list);
extern void mark_mounts_for_expiry(struct list_head *mounts);

extern dev_t name_to_dev_t(char *name);

struct epoll_event;
struct iattr;
struct inode;
struct iocb;
struct io_event;
struct iovec;
struct itimerspec;
struct itimerval;
struct kexec_segment;
struct linux_dirent;
struct linux_dirent64;
struct list_head;
struct mmap_arg_struct;
struct msgbuf;
struct msghdr;
struct mmsghdr;
struct msqid_ds;
struct new_utsname;
struct nfsctl_arg;
struct __old_kernel_stat;
struct oldold_utsname;
struct old_utsname;
struct pollfd;
struct rlimit;
struct rlimit64;
struct rusage;
struct sched_param;
struct sel_arg_struct;
struct semaphore;
struct sembuf;
struct shmid_ds;
struct sockaddr;
struct stat;
struct stat64;
struct statfs;
struct statfs64;
struct __sysctl_args;
struct sysinfo;
struct timespec;
struct timeval;
struct timex;
struct timezone;
struct tms;
struct utimbuf;
struct mq_attr;
struct compat_stat;
struct compat_timeval;
struct robust_list_head;
struct getcpu_cache;
struct old_linux_dirent;
struct perf_event_attr;
struct file_handle;
struct sigaltstack;







struct ring_buffer;
struct ring_buffer_iter;




struct ring_buffer_event {
  template <typename, int = 0> struct __BYPASSring_buffer_event {};
  template <typename, int> friend struct __BYPASSring_buffer_event;
 ;
 u32 type_len:5, time_delta:27;
 ;

 u32 array[];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum ring_buffer_type {
 RINGBUF_TYPE_DATA_TYPE_LEN_MAX = 28,
 RINGBUF_TYPE_PADDING,
 RINGBUF_TYPE_TIME_EXTEND,

 RINGBUF_TYPE_TIME_STAMP,
};

unsigned ring_buffer_event_length(struct ring_buffer_event *event);
void *ring_buffer_event_data(struct ring_buffer_event *event);
void ring_buffer_discard_commit(struct ring_buffer *buffer,
    struct ring_buffer_event *event);




struct ring_buffer *
__ring_buffer_alloc(unsigned long size, unsigned flags, struct lock_class_key *key);
void ring_buffer_wait(struct ring_buffer *buffer, int cpu);
int ring_buffer_poll_wait(struct ring_buffer *buffer, int cpu,
     struct file *filp, poll_table *poll_table);




void ring_buffer_free(struct ring_buffer *buffer);

int ring_buffer_resize(struct ring_buffer *buffer, unsigned long size, int cpu);

void ring_buffer_change_overwrite(struct ring_buffer *buffer, int val);

struct ring_buffer_event *ring_buffer_lock_reserve(struct ring_buffer *buffer,
         unsigned long length);
int ring_buffer_unlock_commit(struct ring_buffer *buffer,
         struct ring_buffer_event *event);
int ring_buffer_write(struct ring_buffer *buffer,
        unsigned long length, void *data);

struct ring_buffer_event *
ring_buffer_peek(struct ring_buffer *buffer, int cpu, u64 *ts,
   unsigned long *lost_events);
struct ring_buffer_event *
ring_buffer_consume(struct ring_buffer *buffer, int cpu, u64 *ts,
      unsigned long *lost_events);

struct ring_buffer_iter *
ring_buffer_read_prepare(struct ring_buffer *buffer, int cpu);
void ring_buffer_read_prepare_sync(void);
void ring_buffer_read_start(struct ring_buffer_iter *iter);
void ring_buffer_read_finish(struct ring_buffer_iter *iter);

struct ring_buffer_event *
ring_buffer_iter_peek(struct ring_buffer_iter *iter, u64 *ts);
struct ring_buffer_event *
ring_buffer_read(struct ring_buffer_iter *iter, u64 *ts);
void ring_buffer_iter_reset(struct ring_buffer_iter *iter);
int ring_buffer_iter_empty(struct ring_buffer_iter *iter);

unsigned long ring_buffer_size(struct ring_buffer *buffer, int cpu);

void ring_buffer_reset_cpu(struct ring_buffer *buffer, int cpu);
void ring_buffer_reset(struct ring_buffer *buffer);


int ring_buffer_swap_cpu(struct ring_buffer *buffer_a,
    struct ring_buffer *buffer_b, int cpu);
int ring_buffer_empty(struct ring_buffer *buffer);
int ring_buffer_empty_cpu(struct ring_buffer *buffer, int cpu);

void ring_buffer_record_disable(struct ring_buffer *buffer);
void ring_buffer_record_enable(struct ring_buffer *buffer);
void ring_buffer_record_off(struct ring_buffer *buffer);
void ring_buffer_record_on(struct ring_buffer *buffer);
int ring_buffer_record_is_on(struct ring_buffer *buffer);
void ring_buffer_record_disable_cpu(struct ring_buffer *buffer, int cpu);
void ring_buffer_record_enable_cpu(struct ring_buffer *buffer, int cpu);

u64 ring_buffer_oldest_event_ts(struct ring_buffer *buffer, int cpu);
unsigned long ring_buffer_bytes_cpu(struct ring_buffer *buffer, int cpu);
unsigned long ring_buffer_entries(struct ring_buffer *buffer);
unsigned long ring_buffer_overruns(struct ring_buffer *buffer);
unsigned long ring_buffer_entries_cpu(struct ring_buffer *buffer, int cpu);
unsigned long ring_buffer_overrun_cpu(struct ring_buffer *buffer, int cpu);
unsigned long ring_buffer_commit_overrun_cpu(struct ring_buffer *buffer, int cpu);
unsigned long ring_buffer_dropped_events_cpu(struct ring_buffer *buffer, int cpu);
unsigned long ring_buffer_read_events_cpu(struct ring_buffer *buffer, int cpu);

u64 ring_buffer_time_stamp(struct ring_buffer *buffer, int cpu);
void ring_buffer_normalize_time_stamp(struct ring_buffer *buffer,
          int cpu, u64 *ts);
void ring_buffer_set_clock(struct ring_buffer *buffer,
      u64 (*clock)(void));

size_t ring_buffer_page_len(void *page);


void *ring_buffer_alloc_read_page(struct ring_buffer *buffer, int cpu);
void ring_buffer_free_read_page(struct ring_buffer *buffer, void *data);
int ring_buffer_read_page(struct ring_buffer *buffer, void **data_page,
     size_t len, int cpu, int full);

struct trace_seq;

int ring_buffer_print_entry_header(struct trace_seq *s);
int ring_buffer_print_page_header(struct trace_seq *s);

enum ring_buffer_flags {
 RB_FL_OVERWRITE = 1 << 0,
};
struct trace_seq {
  template <typename, int = 0> struct __BYPASStrace_seq {};
  template <typename, int> friend struct __BYPASStrace_seq;
 unsigned char buffer[((1UL) << 12)];
 unsigned int len;
 unsigned int readpos;
 int full;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void
trace_seq_init(struct trace_seq *s)
{
 s->len = 0;
 s->readpos = 0;
 s->full = 0;
}





extern __attribute__((format(printf, 2, 3)))
int trace_seq_printf(struct trace_seq *s, char *fmt, ...);
extern __attribute__((format(printf, 2, 0)))
int trace_seq_vprintf(struct trace_seq *s, char *fmt, va_list args);
extern int
trace_seq_bprintf(struct trace_seq *s, char *fmt, u32 *binary);
extern int trace_print_seq(struct seq_file *m, struct trace_seq *s);
extern ssize_t trace_seq_to_user(struct trace_seq *s, char *ubuf,
     size_t cnt);
extern int trace_seq_puts(struct trace_seq *s, char *str);
extern int trace_seq_putc(struct trace_seq *s, unsigned char c);
extern int trace_seq_putmem(struct trace_seq *s, void *mem, size_t len);
extern int trace_seq_putmem_hex(struct trace_seq *s, void *mem,
    size_t len);
extern void *trace_seq_reserve(struct trace_seq *s, size_t len);
extern int trace_seq_path(struct trace_seq *s, struct path *path);


enum perf_type_id {
 PERF_TYPE_HARDWARE = 0,
 PERF_TYPE_SOFTWARE = 1,
 PERF_TYPE_TRACEPOINT = 2,
 PERF_TYPE_HW_CACHE = 3,
 PERF_TYPE_RAW = 4,
 PERF_TYPE_BREAKPOINT = 5,

 PERF_TYPE_MAX,
};






enum perf_hw_id {



 PERF_COUNT_HW_CPU_CYCLES = 0,
 PERF_COUNT_HW_INSTRUCTIONS = 1,
 PERF_COUNT_HW_CACHE_REFERENCES = 2,
 PERF_COUNT_HW_CACHE_MISSES = 3,
 PERF_COUNT_HW_BRANCH_INSTRUCTIONS = 4,
 PERF_COUNT_HW_BRANCH_MISSES = 5,
 PERF_COUNT_HW_BUS_CYCLES = 6,
 PERF_COUNT_HW_STALLED_CYCLES_FRONTEND = 7,
 PERF_COUNT_HW_STALLED_CYCLES_BACKEND = 8,
 PERF_COUNT_HW_REF_CPU_CYCLES = 9,

 PERF_COUNT_HW_MAX,
};
enum perf_hw_cache_id {
 PERF_COUNT_HW_CACHE_L1D = 0,
 PERF_COUNT_HW_CACHE_L1I = 1,
 PERF_COUNT_HW_CACHE_LL = 2,
 PERF_COUNT_HW_CACHE_DTLB = 3,
 PERF_COUNT_HW_CACHE_ITLB = 4,
 PERF_COUNT_HW_CACHE_BPU = 5,
 PERF_COUNT_HW_CACHE_NODE = 6,

 PERF_COUNT_HW_CACHE_MAX,
};

enum perf_hw_cache_op_id {
 PERF_COUNT_HW_CACHE_OP_READ = 0,
 PERF_COUNT_HW_CACHE_OP_WRITE = 1,
 PERF_COUNT_HW_CACHE_OP_PREFETCH = 2,

 PERF_COUNT_HW_CACHE_OP_MAX,
};

enum perf_hw_cache_op_result_id {
 PERF_COUNT_HW_CACHE_RESULT_ACCESS = 0,
 PERF_COUNT_HW_CACHE_RESULT_MISS = 1,

 PERF_COUNT_HW_CACHE_RESULT_MAX,
};







enum perf_sw_ids {
 PERF_COUNT_SW_CPU_CLOCK = 0,
 PERF_COUNT_SW_TASK_CLOCK = 1,
 PERF_COUNT_SW_PAGE_FAULTS = 2,
 PERF_COUNT_SW_CONTEXT_SWITCHES = 3,
 PERF_COUNT_SW_CPU_MIGRATIONS = 4,
 PERF_COUNT_SW_PAGE_FAULTS_MIN = 5,
 PERF_COUNT_SW_PAGE_FAULTS_MAJ = 6,
 PERF_COUNT_SW_ALIGNMENT_FAULTS = 7,
 PERF_COUNT_SW_EMULATION_FAULTS = 8,
 PERF_COUNT_SW_DUMMY = 9,

 PERF_COUNT_SW_MAX,
};





enum perf_event_sample_format {
 PERF_SAMPLE_IP = 1U << 0,
 PERF_SAMPLE_TID = 1U << 1,
 PERF_SAMPLE_TIME = 1U << 2,
 PERF_SAMPLE_ADDR = 1U << 3,
 PERF_SAMPLE_READ = 1U << 4,
 PERF_SAMPLE_CALLCHAIN = 1U << 5,
 PERF_SAMPLE_ID = 1U << 6,
 PERF_SAMPLE_CPU = 1U << 7,
 PERF_SAMPLE_PERIOD = 1U << 8,
 PERF_SAMPLE_STREAM_ID = 1U << 9,
 PERF_SAMPLE_RAW = 1U << 10,
 PERF_SAMPLE_BRANCH_STACK = 1U << 11,
 PERF_SAMPLE_REGS_USER = 1U << 12,
 PERF_SAMPLE_STACK_USER = 1U << 13,
 PERF_SAMPLE_WEIGHT = 1U << 14,
 PERF_SAMPLE_DATA_SRC = 1U << 15,
 PERF_SAMPLE_IDENTIFIER = 1U << 16,
 PERF_SAMPLE_TRANSACTION = 1U << 17,

 PERF_SAMPLE_MAX = 1U << 18,
};
enum perf_branch_sample_type {
 PERF_SAMPLE_BRANCH_USER = 1U << 0,
 PERF_SAMPLE_BRANCH_KERNEL = 1U << 1,
 PERF_SAMPLE_BRANCH_HV = 1U << 2,

 PERF_SAMPLE_BRANCH_ANY = 1U << 3,
 PERF_SAMPLE_BRANCH_ANY_CALL = 1U << 4,
 PERF_SAMPLE_BRANCH_ANY_RETURN = 1U << 5,
 PERF_SAMPLE_BRANCH_IND_CALL = 1U << 6,
 PERF_SAMPLE_BRANCH_ABORT_TX = 1U << 7,
 PERF_SAMPLE_BRANCH_IN_TX = 1U << 8,
 PERF_SAMPLE_BRANCH_NO_TX = 1U << 9,

 PERF_SAMPLE_BRANCH_MAX = 1U << 10,
};
enum perf_sample_regs_abi {
 PERF_SAMPLE_REGS_ABI_NONE = 0,
 PERF_SAMPLE_REGS_ABI_32 = 1,
 PERF_SAMPLE_REGS_ABI_64 = 2,
};





enum {
 PERF_TXN_ELISION = (1 << 0),
 PERF_TXN_TRANSACTION = (1 << 1),
 PERF_TXN_SYNC = (1 << 2),
 PERF_TXN_ASYNC = (1 << 3),
 PERF_TXN_RETRY = (1 << 4),
 PERF_TXN_CONFLICT = (1 << 5),
 PERF_TXN_CAPACITY_WRITE = (1 << 6),
 PERF_TXN_CAPACITY_READ = (1 << 7),

 PERF_TXN_MAX = (1 << 8),



 PERF_TXN_ABORT_MASK = (0xffffffffULL << 32),
 PERF_TXN_ABORT_SHIFT = 32,
};
enum perf_event_read_format {
 PERF_FORMAT_TOTAL_TIME_ENABLED = 1U << 0,
 PERF_FORMAT_TOTAL_TIME_RUNNING = 1U << 1,
 PERF_FORMAT_ID = 1U << 2,
 PERF_FORMAT_GROUP = 1U << 3,

 PERF_FORMAT_MAX = 1U << 4,
};
struct perf_event_attr {
  template <typename, int = 0> struct __BYPASSperf_event_attr {};
  template <typename, int> friend struct __BYPASSperf_event_attr;




 __u32 type;




 __u32 size;




 __u64 config;

 union {
  __u64 sample_period;
  __u64 sample_freq;
 };

 __u64 sample_type;
 __u64 read_format;

 __u64 disabled : 1,
    inherit : 1,
    pinned : 1,
    exclusive : 1,
    exclude_user : 1,
    exclude_kernel : 1,
    exclude_hv : 1,
    exclude_idle : 1,
    mmap : 1,
    comm : 1,
    freq : 1,
    inherit_stat : 1,
    enable_on_exec : 1,
    task : 1,
    watermark : 1,
    precise_ip : 2,
    mmap_data : 1,
    sample_id_all : 1,

    exclude_host : 1,
    exclude_guest : 1,

    exclude_callchain_kernel : 1,
    exclude_callchain_user : 1,
    mmap2 : 1,

    __reserved_1 : 40;

 union {
  __u32 wakeup_events;
  __u32 wakeup_watermark;
 };

 __u32 bp_type;
 union {
  __u64 bp_addr;
  __u64 config1;
 };
 union {
  __u64 bp_len;
  __u64 config2;
 };
 __u64 branch_sample_type;





 __u64 sample_regs_user;




 __u32 sample_stack_user;


 __u32 __reserved_2;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
enum perf_event_ioc_flags {
 PERF_IOC_FLAG_GROUP = 1U << 0,
};




struct perf_event_mmap_page {
  template <typename, int = 0> struct __BYPASSperf_event_mmap_page {};
  template <typename, int> friend struct __BYPASSperf_event_mmap_page;
 __u32 version;
 __u32 compat_version;
 __u32 lock;
 __u32 index;
 __s64 offset;
 __u64 time_enabled;
 __u64 time_running;
 union {
  __u64 capabilities;
  struct {
   __u64 cap_bit0 : 1,
    cap_bit0_is_deprecated : 1,

    cap_user_rdpmc : 1,
    cap_user_time : 1,
    cap_user_time_zero : 1,
    cap_____res : 59;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };
 __u16 pmc_width;
 __u16 time_shift;
 __u32 time_mult;
 __u64 time_offset;
 __u64 time_zero;
 __u32 size;





 __u8 __reserved[118*8+4];
 __u64 data_head;
 __u64 data_tail;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct perf_event_header {
  template <typename, int = 0> struct __BYPASSperf_event_header {};
  template <typename, int> friend struct __BYPASSperf_event_header;
 __u32 type;
 __u16 misc;
 __u16 size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum perf_event_type {
 PERF_RECORD_MMAP = 1,
 PERF_RECORD_LOST = 2,
 PERF_RECORD_COMM = 3,
 PERF_RECORD_EXIT = 4,
 PERF_RECORD_THROTTLE = 5,
 PERF_RECORD_UNTHROTTLE = 6,
 PERF_RECORD_FORK = 7,
 PERF_RECORD_READ = 8,
 PERF_RECORD_SAMPLE = 9,
 PERF_RECORD_MMAP2 = 10,

 PERF_RECORD_MAX,
};



enum perf_callchain_context {
 PERF_CONTEXT_HV = (__u64)-32,
 PERF_CONTEXT_KERNEL = (__u64)-128,
 PERF_CONTEXT_USER = (__u64)-512,

 PERF_CONTEXT_GUEST = (__u64)-2048,
 PERF_CONTEXT_GUEST_KERNEL = (__u64)-2176,
 PERF_CONTEXT_GUEST_USER = (__u64)-2560,

 PERF_CONTEXT_MAX = (__u64)-4095,
};





union perf_mem_data_src {
 __u64 val;
 struct {
  __u64 mem_op:5,
   mem_lvl:14,
   mem_snoop:5,
   mem_lock:2,
   mem_dtlb:7,
   mem_rsvd:31;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
};
struct perf_branch_entry {
  template <typename, int = 0> struct __BYPASSperf_branch_entry {};
  template <typename, int> friend struct __BYPASSperf_branch_entry;
 __u64 from;
 __u64 to;
 __u64 mispred:1,
  predicted:1,
  in_tx:1,
  abort:1,
  reserved:60;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






union cpuid10_eax {
 struct {
  unsigned int version_id:8;
  unsigned int num_counters:8;
  unsigned int bit_width:8;
  unsigned int mask_length:8;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} split;
 unsigned int full;
};

union cpuid10_ebx {
 struct {
  unsigned int no_unhalted_core_cycles:1;
  unsigned int no_instructions_retired:1;
  unsigned int no_unhalted_reference_cycles:1;
  unsigned int no_llc_reference:1;
  unsigned int no_llc_misses:1;
  unsigned int no_branch_instruction_retired:1;
  unsigned int no_branch_misses_retired:1;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} split;
 unsigned int full;
};

union cpuid10_edx {
 struct {
  unsigned int num_counters_fixed:5;
  unsigned int bit_width_fixed:8;
  unsigned int reserved:19;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} split;
 unsigned int full;
};

struct x86_pmu_capability {
  template <typename, int = 0> struct __BYPASSx86_pmu_capability {};
  template <typename, int> friend struct __BYPASSx86_pmu_capability;
 int version;
 int num_counters_gp;
 int num_counters_fixed;
 int bit_width_gp;
 int bit_width_fixed;
 unsigned int events_mask;
 int events_mask_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern u32 get_ibs_caps(void);





extern void perf_events_lapic_init(void);
struct pt_regs;
extern unsigned long perf_instruction_pointer(struct pt_regs *regs);
extern unsigned long perf_misc_flags(struct pt_regs *regs);









struct ptrace_peeksiginfo_args {
  template <typename, int = 0> struct __BYPASSptrace_peeksiginfo_args {};
  template <typename, int> friend struct __BYPASSptrace_peeksiginfo_args;
 __u64 off;
 __u32 flags;
 __s32 nr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern long arch_ptrace(struct task_struct *child, long request,
   unsigned long addr, unsigned long data);
extern int ptrace_readdata(struct task_struct *tsk, unsigned long src, char *dst, int len);
extern int ptrace_writedata(struct task_struct *tsk, char *src, unsigned long dst, int len);
extern void ptrace_disable(struct task_struct *);
extern int ptrace_request(struct task_struct *child, long request,
     unsigned long addr, unsigned long data);
extern void ptrace_notify(int exit_code);
extern void __ptrace_link(struct task_struct *child,
     struct task_struct *new_parent);
extern void __ptrace_unlink(struct task_struct *child);
extern void exit_ptrace(struct task_struct *tracer);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct11real_parentE_2239_0 {
  typedef TJP__ZN11task_struct11real_parentE_2239_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct11real_parentE_2239(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct11real_parentE_2239_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6parentE_2240_0 {
  typedef TJP__ZN11task_struct6parentE_2240_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct6parentE_2240(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct6parentE_2240_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline int ptrace_reparented(struct task_struct *child)
{
 return !same_thread_group(__get__ZN11task_struct11real_parentE_2239(&child->real_parent), __get__ZN11task_struct6parentE_2240(&child->parent));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6ptraceE_2241_0 {
  typedef TJP__ZN11task_struct6ptraceE_2241_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct6ptraceE_2241(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct6ptraceE_2241_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void ptrace_unlink(struct task_struct *child)
{
 if (__builtin_expect(!!(__get__ZN11task_struct6ptraceE_2241(&child->ptrace)), 0))
  __ptrace_unlink(child);
}

int generic_ptrace_peekdata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);
int generic_ptrace_pokedata(struct task_struct *tsk, unsigned long addr,
       unsigned long data);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6ptraceE_2242_0 {
  typedef TJP__ZN11task_struct6ptraceE_2242_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct6ptraceE_2242(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct6ptraceE_2242_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6parentE_2243_0 {
  typedef TJP__ZN11task_struct6parentE_2243_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct6parentE_2243(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct6parentE_2243_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline struct task_struct *ptrace_parent(struct task_struct *task)
{
 if (__builtin_expect(!!(__get__ZN11task_struct6ptraceE_2242(&task->ptrace)), 0))
  return (__get__ZN11task_struct6parentE_2243(&task->parent));
 return 0;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6ptraceE_2244_0 {
  typedef TJP__ZN11task_struct6ptraceE_2244_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct6ptraceE_2244(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct6ptraceE_2244_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool ptrace_event_enabled(struct task_struct *task, int event)
{
 return __get__ZN11task_struct6ptraceE_2244(&task->ptrace) & (1 << (3 + (event)));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6ptraceE_2245_0 {
  typedef TJP__ZN11task_struct6ptraceE_2245_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct6ptraceE_2245(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct6ptraceE_2245_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void ptrace_event(int event, unsigned long message)
{
 if (__builtin_expect(!!(ptrace_event_enabled(get_current(), event)), 0)) {
  get_current()->ptrace_message = message;
  ptrace_notify((event << 8) | 5);
 } else if (event == 4) {

  if ((__get__ZN11task_struct6ptraceE_2245(&get_current()->ptrace) & (0x00000001|0x00010000)) == 0x00000001)
   send_sig(5, get_current(), 0);
 }
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct11real_parentE_2246_0 {
  typedef TJP__ZN11task_struct11real_parentE_2246_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct11real_parentE_2246(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct11real_parentE_2246_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6ptraceE_2247_0 {
  typedef TJP__ZN11task_struct6ptraceE_2247_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct6ptraceE_2247(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct6ptraceE_2247_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6ptraceE_2248_0 {
  typedef TJP__ZN11task_struct6ptraceE_2248_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct6ptraceE_2248(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct6ptraceE_2248_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6parentE_2249_0 {
  typedef TJP__ZN11task_struct6parentE_2249_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN11task_struct6parentE_2249(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN11task_struct6parentE_2249_0< ::task_struct *, ::task_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6ptraceE_2250_0 {
  typedef TJP__ZN11task_struct6ptraceE_2250_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct6ptraceE_2250(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct6ptraceE_2250_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline void ptrace_init_task(struct task_struct *child, bool ptrace)
{
 INIT_LIST_HEAD(&child->ptrace_entry);
 INIT_LIST_HEAD(&child->ptraced);
 child->jobctl = 0;
 child->ptrace = 0;
 child->parent = __get__ZN11task_struct11real_parentE_2246(&child->real_parent);

 if (__builtin_expect(!!(ptrace), 0) && __get__ZN11task_struct6ptraceE_2247(&get_current()->ptrace)) {
  child->ptrace = __get__ZN11task_struct6ptraceE_2248(&get_current()->ptrace);
  __ptrace_link(child, __get__ZN11task_struct6parentE_2249(&get_current()->parent));

  if (__get__ZN11task_struct6ptraceE_2250(&child->ptrace) & 0x00010000)
   task_set_jobctl_pending(child, (1 << 19));
  else
   sigaddset(&child->pending.signal, 19);

  set_tsk_thread_flag(child, 2);
 }
}







static inline void ptrace_release_task(struct task_struct *task)
{
 (!list_empty(&task->ptraced));
 ptrace_unlink(task);
 (!list_empty(&task->ptrace_entry));
}
extern void user_enable_single_step(struct task_struct *);
extern void user_disable_single_step(struct task_struct *);
extern void user_enable_block_step(struct task_struct *);



extern void user_single_step_siginfo(struct task_struct *tsk,
    struct pt_regs *regs, siginfo_t *info);
extern int task_current_syscall(struct task_struct *target, long *callno,
    unsigned long args[6], unsigned int maxargs,
    unsigned long *sp, unsigned long *pc);

extern int kstack_depth_to_print;

struct thread_info;
struct stacktrace_ops;

typedef unsigned long (*walk_stack_t)(struct thread_info *tinfo,
          unsigned long *stack,
          unsigned long bp,
          struct stacktrace_ops *ops,
          void *data,
          unsigned long *end,
          int *graph);

extern unsigned long
print_context_stack(struct thread_info *tinfo,
      unsigned long *stack, unsigned long bp,
      struct stacktrace_ops *ops, void *data,
      unsigned long *end, int *graph);

extern unsigned long
print_context_stack_bp(struct thread_info *tinfo,
         unsigned long *stack, unsigned long bp,
         struct stacktrace_ops *ops, void *data,
         unsigned long *end, int *graph);



struct stacktrace_ops {
  template <typename, int = 0> struct __BYPASSstacktrace_ops {};
  template <typename, int> friend struct __BYPASSstacktrace_ops;
 void (*address)(void *data, unsigned long address, int reliable);

 int (*stack)(void *data, char *name);
 walk_stack_t walk_stack;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void dump_trace(struct task_struct *tsk, struct pt_regs *regs,
  unsigned long *stack, unsigned long bp,
  struct stacktrace_ops *ops, void *data);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN7pt_regs2bpE_2251_0 {
  typedef TJP__ZN7pt_regs2bpE_2251_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN7pt_regs2bpE_2251(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN7pt_regs2bpE_2251_0< unsigned long int , ::pt_regs , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN13thread_struct2spE_2252_0 {
  typedef TJP__ZN13thread_struct2spE_2252_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN13thread_struct2spE_2252(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN13thread_struct2spE_2252_0< unsigned long int , ::thread_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct6threadE_2253_0 {
  typedef TJP__ZN11task_struct6threadE_2253_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline thread_struct __get__ZN11task_struct6threadE_2253(thread_struct *source) {
  AC::ResultBuffer< ::thread_struct  > __result_buffer;
  typedef TJP__ZN11task_struct6threadE_2253_0< ::thread_struct , ::task_struct , ::thread_struct  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::thread_struct &)__result_buffer;
}
static inline unsigned long
stack_frame(struct task_struct *task, struct pt_regs *regs)
{
 unsigned long bp;

 if (regs)
  return __get__ZN7pt_regs2bpE_2251(&regs->bp);

 if (task == get_current()) {

  asm("movq %%rbp, %0" : "=r" (bp) :);
  return bp;
 }


 return *(unsigned long *)__get__ZN13thread_struct2spE_2252(&__get__ZN11task_struct6threadE_2253(&task->thread).sp);
}
extern void
show_trace_log_lvl(struct task_struct *task, struct pt_regs *regs,
     unsigned long *stack, unsigned long bp, char *log_lvl);

extern void
show_stack_log_lvl(struct task_struct *task, struct pt_regs *regs,
     unsigned long *sp, unsigned long bp, char *log_lvl);

extern unsigned int code_bytes;


struct stack_frame {
  template <typename, int = 0> struct __BYPASSstack_frame {};
  template <typename, int> friend struct __BYPASSstack_frame;
 struct stack_frame *next_frame;
 unsigned long return_address;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct stack_frame_ia32 {
  template <typename, int = 0> struct __BYPASSstack_frame_ia32 {};
  template <typename, int> friend struct __BYPASSstack_frame_ia32;
    u32 next_frame;
    u32 return_address;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline unsigned long caller_frame_pointer(void)
{
 struct stack_frame *frame;

 asm("movq %%rbp, %0" : "=r" (frame) :);


 frame = frame->next_frame;


 return (unsigned long)frame;
}
struct perf_guest_switch_msr {
  template <typename, int = 0> struct __BYPASSperf_guest_switch_msr {};
  template <typename, int> friend struct __BYPASSperf_guest_switch_msr;
 unsigned msr;
 u64 host, guest;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct perf_guest_switch_msr *perf_guest_get_msrs(int *nr);
extern void perf_get_x86_pmu_capability(struct x86_pmu_capability *cap);
extern void perf_check_microcode(void);
 extern void amd_pmu_enable_virt(void);
 extern void amd_pmu_disable_virt(void);
typedef struct {
 atomic_long_t a;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} local_t;






static inline void local_inc(local_t *l)
{
 asm (" " "incq" " " "%0"
       : "+m" (l->a.counter));
}

static inline void local_dec(local_t *l)
{
 asm (" " "decq" " " "%0"
       : "+m" (l->a.counter));
}

static inline void local_add(long i, local_t *l)
{
 asm (" " "addq" " " "%1,%0"
       : "+m" (l->a.counter)
       : "ir" (i));
}

static inline void local_sub(long i, local_t *l)
{
 asm (" " "subq" " " "%1,%0"
       : "+m" (l->a.counter)
       : "ir" (i));
}
static inline int local_sub_and_test(long i, local_t *l)
{
 do { char c; asm (" " "subq" " " " %2, " "%0" "; set" "e" " %1" : "+m" (l->a.counter), "=qm" (c) : "er" (i) : "memory"); return c != 0; } while (0);
}
static inline int local_dec_and_test(local_t *l)
{
 do { char c; asm (" " "decq" " " " " "%0" "; set" "e" " %1" : "+m" (l->a.counter), "=qm" (c) : : "memory"); return c != 0; } while (0);
}
static inline int local_inc_and_test(local_t *l)
{
 do { char c; asm (" " "incq" " " " " "%0" "; set" "e" " %1" : "+m" (l->a.counter), "=qm" (c) : : "memory"); return c != 0; } while (0);
}
static inline int local_add_negative(long i, local_t *l)
{
 do { char c; asm (" " "addq" " " " %2, " "%0" "; set" "s" " %1" : "+m" (l->a.counter), "=qm" (c) : "er" (i) : "memory"); return c != 0; } while (0);
}
static inline long local_add_return(long i, local_t *l)
{
 long __i = i;
 asm (" " "xaddq" " " "%0, %1;"
       : "+r" (i), "+m" (l->a.counter)
       : : "memory");
 return i + __i;
}

static inline long local_sub_return(long i, local_t *l)
{
 return local_add_return(-i, l);
}

typedef struct {
 local_t a;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} local64_t;


struct perf_guest_info_callbacks {
  template <typename, int = 0> struct __BYPASSperf_guest_info_callbacks {};
  template <typename, int> friend struct __BYPASSperf_guest_info_callbacks;
 int (*is_in_guest)(void);
 int (*is_user_mode)(void);
 unsigned long (*get_guest_ip)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct arch_hw_breakpoint {
  template <typename, int = 0> struct __BYPASSarch_hw_breakpoint {};
  template <typename, int> friend struct __BYPASSarch_hw_breakpoint;
 unsigned long address;
 u8 len;
 u8 type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};









struct pt_regs;


enum die_val {
 DIE_OOPS = 1,
 DIE_INT3,
 DIE_DEBUG,
 DIE_PANIC,
 DIE_NMI,
 DIE_DIE,
 DIE_KERNELDEBUG,
 DIE_TRAP,
 DIE_GPF,
 DIE_CALL,
 DIE_PAGE_FAULT,
 DIE_NMIUNKNOWN,
};

extern void printk_address(unsigned long address);
extern void die( char *, struct pt_regs *,long);
extern int __die( char *, struct pt_regs *, long);
extern void show_trace(struct task_struct *t, struct pt_regs *regs,
         unsigned long *sp, unsigned long bp);
extern void __show_regs(struct pt_regs *regs, int all);
extern unsigned long oops_begin(void);
extern void oops_end(unsigned long, struct pt_regs *, int signr);

extern int in_crash_kexec;

struct notifier_block;

struct die_args {
  template <typename, int = 0> struct __BYPASSdie_args {};
  template <typename, int> friend struct __BYPASSdie_args;
 struct pt_regs *regs;
 char *str;
 long err;
 int trapnr;
 int signr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int register_die_notifier(struct notifier_block *nb);
int unregister_die_notifier(struct notifier_block *nb);

int notify_die(enum die_val val, char *str,
        struct pt_regs *regs, long err, int trap, int sig);
static inline int hw_breakpoint_slots(int type)
{
 return 4;
}

struct perf_event;
struct pmu;

extern int arch_check_bp_in_kernelspace(struct perf_event *bp);
extern int arch_validate_hwbkpt_settings(struct perf_event *bp);
extern int hw_breakpoint_exceptions_notify(struct notifier_block *unused,
        unsigned long val, void *data);


int arch_install_hw_breakpoint(struct perf_event *bp);
void arch_uninstall_hw_breakpoint(struct perf_event *bp);
void hw_breakpoint_pmu_read(struct perf_event *bp);
void hw_breakpoint_pmu_unthrottle(struct perf_event *bp);

extern void
arch_fill_perf_breakpoint(struct perf_event *bp);

unsigned long encode_dr7(int drnum, unsigned int len, unsigned int type);
int decode_dr7(unsigned long dr7, int bpnum, unsigned *len, unsigned *type);

extern int arch_bp_generic_fields(int x86_len, int x86_type,
      int *gen_len, int *gen_type);

extern struct pmu perf_ops_bp;
struct pidmap {
  template <typename, int = 0> struct __BYPASSpidmap {};
  template <typename, int> friend struct __BYPASSpidmap;
       atomic_t nr_free;
       void *page;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct bsd_acct_struct;

struct pid_namespace {
  template <typename, int = 0> struct __BYPASSpid_namespace {};
  template <typename, int> friend struct __BYPASSpid_namespace;
 struct kref kref;
 struct pidmap pidmap[(((0 ? ((1UL) << 12) * 8 : (sizeof(long) > 4 ? 4 * 1024 * 1024 : (0 ? 0x1000 : 0x8000)))+(((1UL) << 12) * 8)-1)/(((1UL) << 12) * 8))];
 struct callback_head rcu;
 int last_pid;
 unsigned int nr_hashed;
 struct task_struct *child_reaper;
 struct kmem_cache *pid_cachep;
 unsigned int level;
 struct pid_namespace *parent;

 struct vfsmount *proc_mnt;
 struct dentry *proc_self;


 struct bsd_acct_struct *bacct;

 struct user_namespace *user_ns;
 struct work_struct proc_work;
 kgid_t pid_gid;
 int hide_pid;
 int reboot;
 unsigned int proc_inum;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct pid_namespace init_pid_ns;




static inline struct pid_namespace *get_pid_ns(struct pid_namespace *ns)
{
 if (ns != &init_pid_ns)
  kref_get(&ns->kref);
 return ns;
}

extern struct pid_namespace *copy_pid_ns(unsigned long flags,
 struct user_namespace *user_ns, struct pid_namespace *ns);
extern void zap_pid_ns_processes(struct pid_namespace *pid_ns);
extern int reboot_pid_ns(struct pid_namespace *pid_ns, int cmd);
extern void put_pid_ns(struct pid_namespace *ns);
extern struct pid_namespace *task_active_pid_ns(struct task_struct *tsk);
void pidhash_init(void);
void pidmap_init(void);

extern u64 trace_clock_x86_tsc(void);

extern u64 trace_clock_local(void);
extern u64 trace_clock(void);
extern u64 trace_clock_jiffies(void);
extern u64 trace_clock_global(void);
extern u64 trace_clock_counter(void);
struct module;



unsigned long kallsyms_lookup_name( char *name);


int kallsyms_on_each_symbol(int (*fn)(void *, char *, struct module *,
          unsigned long),
       void *data);

extern int kallsyms_lookup_size_offset(unsigned long addr,
      unsigned long *symbolsize,
      unsigned long *offset);


 char *kallsyms_lookup(unsigned long addr,
       unsigned long *symbolsize,
       unsigned long *offset,
       char **modname, char *namebuf);


extern int sprint_symbol(char *buffer, unsigned long address);
extern int sprint_symbol_no_offset(char *buffer, unsigned long address);
extern int sprint_backtrace(char *buffer, unsigned long address);


extern void __print_symbol( char *fmt, unsigned long address);

int lookup_symbol_name(unsigned long addr, char *symname);
int lookup_symbol_attrs(unsigned long addr, unsigned long *size, unsigned long *offset, char *modname, char *name);
static __attribute__((format(printf, 1, 2)))
void __check_printsym_format( char *fmt, ...)
{
}

static inline void print_symbol( char *fmt, unsigned long addr)
{
 __check_printsym_format(fmt, "");
 __print_symbol(fmt, (unsigned long)
         __builtin_extract_return_addr((void *)addr));
}

static inline void print_ip_sym(unsigned long ip)
{
 printf("[<%p>] %pS\n", (void *) ip, (void *) ip);
}
extern void mcount(void);
extern atomic_t modifying_ftrace_code;
extern void __fentry__(void);

static inline unsigned long ftrace_call_adjust(unsigned long addr)
{




 return addr;
}



struct dyn_arch_ftrace {
  template <typename, int = 0> struct __BYPASSdyn_arch_ftrace {};
  template <typename, int> friend struct __BYPASSdyn_arch_ftrace;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int ftrace_int3_handler(struct pt_regs *regs);
static inline bool arch_trace_is_compat_syscall(struct pt_regs *regs)
{
 if (is_compat_task())
  return _true;
 return _false;
}
struct module;
struct ftrace_hash;



extern int ftrace_enabled;
extern int
ftrace_enable_sysctl(struct ctl_table *table, int write,
       void *buffer, size_t *lenp,
       loff_t *ppos);

struct ftrace_ops;

typedef void (*ftrace_func_t)(unsigned long ip, unsigned long parent_ip,
         struct ftrace_ops *op, struct pt_regs *regs);
enum {
 FTRACE_OPS_FL_ENABLED = 1 << 0,
 FTRACE_OPS_FL_GLOBAL = 1 << 1,
 FTRACE_OPS_FL_DYNAMIC = 1 << 2,
 FTRACE_OPS_FL_CONTROL = 1 << 3,
 FTRACE_OPS_FL_SAVE_REGS = 1 << 4,
 FTRACE_OPS_FL_SAVE_REGS_IF_SUPPORTED = 1 << 5,
 FTRACE_OPS_FL_RECURSION_SAFE = 1 << 6,
 FTRACE_OPS_FL_STUB = 1 << 7,
 FTRACE_OPS_FL_INITIALIZED = 1 << 8,
};

struct ftrace_ops {
  template <typename, int = 0> struct __BYPASSftrace_ops {};
  template <typename, int> friend struct __BYPASSftrace_ops;
 ftrace_func_t func;
 struct ftrace_ops *next;
 unsigned long flags;
 int *disabled;

 struct ftrace_hash *notrace_hash;
 struct ftrace_hash *filter_hash;
 struct mutex regex_lock;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int function_trace_stop;




enum ftrace_tracing_type_t {
 FTRACE_TYPE_ENTER = 0,
 FTRACE_TYPE_RETURN,
};


extern enum ftrace_tracing_type_t ftrace_tracing_type;
static inline void ftrace_stop(void)
{
 function_trace_stop = 1;
}
static inline void ftrace_start(void)
{
 function_trace_stop = 0;
}
int register_ftrace_function(struct ftrace_ops *ops);
int unregister_ftrace_function(struct ftrace_ops *ops);
void clear_ftrace_function(void);
static inline void ftrace_function_local_enable(struct ftrace_ops *ops)
{
 if ((!(ops->flags & FTRACE_OPS_FL_CONTROL)))
  return;

 (*({ unsigned long tcp_ptr__; do { void *__vpp_verify = (typeof((ops->disabled) + 0))0; (void)__vpp_verify; } while (0); asm ("add " "%%""gs"":" "%P" "1" ", %0" : "=r" (tcp_ptr__) : "m" (this_cpu_off), "0" (ops->disabled)); (typeof(*(ops->disabled)) *)tcp_ptr__; }))--;
}
static inline void ftrace_function_local_disable(struct ftrace_ops *ops)
{
 if ((!(ops->flags & FTRACE_OPS_FL_CONTROL)))
  return;

 (*({ unsigned long tcp_ptr__; do { void *__vpp_verify = (typeof((ops->disabled) + 0))0; (void)__vpp_verify; } while (0); asm ("add " "%%""gs"":" "%P" "1" ", %0" : "=r" (tcp_ptr__) : "m" (this_cpu_off), "0" (ops->disabled)); (typeof(*(ops->disabled)) *)tcp_ptr__; }))++;
}
static inline int ftrace_function_local_disabled(struct ftrace_ops *ops)
{
 (!(ops->flags & FTRACE_OPS_FL_CONTROL));
 return *({ unsigned long tcp_ptr__; do { void *__vpp_verify = (typeof((ops->disabled) + 0))0; (void)__vpp_verify; } while (0); asm ("add " "%%""gs"":" "%P" "1" ", %0" : "=r" (tcp_ptr__) : "m" (this_cpu_off), "0" (ops->disabled)); (typeof(*(ops->disabled)) *)tcp_ptr__; });
}

extern void ftrace_stub(unsigned long a0, unsigned long a1,
   struct ftrace_ops *op, struct pt_regs *regs);
extern int stack_tracer_enabled;
int
stack_trace_sysctl(struct ctl_table *table, int write,
     void *buffer, size_t *lenp,
     loff_t *ppos);


struct ftrace_func_command {
  template <typename, int = 0> struct __BYPASSftrace_func_command {};
  template <typename, int> friend struct __BYPASSftrace_func_command;
 struct list_head list;
 char *name;
 int (*func)(struct ftrace_hash *hash,
     char *func, char *cmd,
     char *params, int enable);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



int ftrace_arch_code_modify_prepare(void);
int ftrace_arch_code_modify_post_process(void);

void ftrace_bug(int err, unsigned long ip);

struct seq_file;

struct ftrace_probe_ops {
  template <typename, int = 0> struct __BYPASSftrace_probe_ops {};
  template <typename, int> friend struct __BYPASSftrace_probe_ops;
 void (*func)(unsigned long ip,
     unsigned long parent_ip,
     void **data);
 int (*init)(struct ftrace_probe_ops *ops,
     unsigned long ip, void **data);
 void (*free)(struct ftrace_probe_ops *ops,
     unsigned long ip, void **data);
 int (*print)(struct seq_file *m,
      unsigned long ip,
      struct ftrace_probe_ops *ops,
      void *data);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int
register_ftrace_function_probe(char *glob, struct ftrace_probe_ops *ops,
         void *data);
extern void
unregister_ftrace_function_probe(char *glob, struct ftrace_probe_ops *ops,
    void *data);
extern void
unregister_ftrace_function_probe_func(char *glob, struct ftrace_probe_ops *ops);
extern void unregister_ftrace_function_probe_all(char *glob);

extern int ftrace_text_reserved(void *start, void *end);

extern int ftrace_nr_registered_ops(void);
enum {
 FTRACE_FL_ENABLED = (1UL << 29),
 FTRACE_FL_REGS = (1UL << 30),
 FTRACE_FL_REGS_EN = (1UL << 31)
};




struct dyn_ftrace {
  template <typename, int = 0> struct __BYPASSdyn_ftrace {};
  template <typename, int> friend struct __BYPASSdyn_ftrace;
 union {
  unsigned long ip;
  struct dyn_ftrace *freelist;
 };
 unsigned long flags;
 struct dyn_arch_ftrace arch;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int ftrace_force_update(void);
int ftrace_set_filter_ip(struct ftrace_ops *ops, unsigned long ip,
    int remove, int reset);
int ftrace_set_filter(struct ftrace_ops *ops, unsigned char *buf,
         int len, int reset);
int ftrace_set_notrace(struct ftrace_ops *ops, unsigned char *buf,
   int len, int reset);
void ftrace_set_global_filter(unsigned char *buf, int len, int reset);
void ftrace_set_global_notrace(unsigned char *buf, int len, int reset);
void ftrace_free_filter(struct ftrace_ops *ops);

int register_ftrace_command(struct ftrace_func_command *cmd);
int unregister_ftrace_command(struct ftrace_func_command *cmd);

enum {
 FTRACE_UPDATE_CALLS = (1 << 0),
 FTRACE_DISABLE_CALLS = (1 << 1),
 FTRACE_UPDATE_TRACE_FUNC = (1 << 2),
 FTRACE_START_FUNC_RET = (1 << 3),
 FTRACE_STOP_FUNC_RET = (1 << 4),
};
enum {
 FTRACE_UPDATE_IGNORE,
 FTRACE_UPDATE_MAKE_CALL,
 FTRACE_UPDATE_MODIFY_CALL,
 FTRACE_UPDATE_MODIFY_CALL_REGS,
 FTRACE_UPDATE_MAKE_NOP,
};

enum {
 FTRACE_ITER_FILTER = (1 << 0),
 FTRACE_ITER_NOTRACE = (1 << 1),
 FTRACE_ITER_PRINTALL = (1 << 2),
 FTRACE_ITER_DO_HASH = (1 << 3),
 FTRACE_ITER_HASH = (1 << 4),
 FTRACE_ITER_ENABLED = (1 << 5),
};

void arch_ftrace_update_code(int command);

struct ftrace_rec_iter;

struct ftrace_rec_iter *ftrace_rec_iter_start(void);
struct ftrace_rec_iter *ftrace_rec_iter_next(struct ftrace_rec_iter *iter);
struct dyn_ftrace *ftrace_rec_iter_record(struct ftrace_rec_iter *iter);







int ftrace_update_record(struct dyn_ftrace *rec, int enable);
int ftrace_test_record(struct dyn_ftrace *rec, int enable);
void ftrace_run_stop_machine(int command);
unsigned long ftrace_location(unsigned long ip);

extern ftrace_func_t ftrace_trace_function;

int ftrace_regex_open(struct ftrace_ops *ops, int flag,
    struct inode *inode, struct file *file);
ssize_t ftrace_filter_write(struct file *file, char *ubuf,
       size_t cnt, loff_t *ppos);
ssize_t ftrace_notrace_write(struct file *file, char *ubuf,
        size_t cnt, loff_t *ppos);
int ftrace_regex_release(struct inode *inode, struct file *file);

void __attribute__ ((__section__(".init.text"))) __attribute__((__cold__))
ftrace_set_early_filter(struct ftrace_ops *ops, char *buf, int enable);


extern int ftrace_ip_converted(unsigned long ip);
extern int ftrace_dyn_arch_init(void *data);
extern void ftrace_replace_code(int enable);
extern int ftrace_update_ftrace_func(ftrace_func_t func);
extern void ftrace_caller(void);
extern void ftrace_regs_caller(void);
extern void ftrace_call(void);
extern void ftrace_regs_call(void);
extern void mcount_call(void);

void ftrace_modify_all_code(int command);
extern void ftrace_graph_caller(void);
extern int ftrace_enable_ftrace_graph_caller(void);
extern int ftrace_disable_ftrace_graph_caller(void);
extern int ftrace_make_nop(struct module *mod,
      struct dyn_ftrace *rec, unsigned long addr);
extern int ftrace_make_call(struct dyn_ftrace *rec, unsigned long addr);
extern int ftrace_modify_call(struct dyn_ftrace *rec, unsigned long old_addr,
         unsigned long addr);
extern int ftrace_arch_read_dyn_info(char *buf, int size);

extern int skip_trace(unsigned long ip);

extern void ftrace_disable_daemon(void);
extern void ftrace_enable_daemon(void);
loff_t ftrace_filter_lseek(struct file *file, loff_t offset, int whence);


void ftrace_kill(void);

static inline void tracer_disable(void)
{

 ftrace_enabled = 0;

}






static inline int __ftrace_enabled_save(void)
{

 int saved_ftrace_enabled = ftrace_enabled;
 ftrace_enabled = 0;
 return saved_ftrace_enabled;



}

static inline void __ftrace_enabled_restore(int enabled)
{

 ftrace_enabled = enabled;

}
  static inline void time_hardirqs_on(unsigned long a0, unsigned long a1) { }
  static inline void time_hardirqs_off(unsigned long a0, unsigned long a1) { }
extern void ftrace_init(void);







struct ftrace_graph_ent {
  template <typename, int = 0> struct __BYPASSftrace_graph_ent {};
  template <typename, int> friend struct __BYPASSftrace_graph_ent;
 unsigned long func;
 int depth;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct ftrace_graph_ret {
  template <typename, int = 0> struct __BYPASSftrace_graph_ret {};
  template <typename, int> friend struct __BYPASSftrace_graph_ret;
 unsigned long func;
 unsigned long long calltime;
 unsigned long long rettime;

 unsigned long overrun;
 int depth;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


typedef void (*trace_func_graph_ret_t)(struct ftrace_graph_ret *);
typedef int (*trace_func_graph_ent_t)(struct ftrace_graph_ent *);
struct ftrace_ret_stack {
  template <typename, int = 0> struct __BYPASSftrace_ret_stack {};
  template <typename, int> friend struct __BYPASSftrace_ret_stack;
 unsigned long ret;
 unsigned long func;
 unsigned long long calltime;
 unsigned long long subtime;
 unsigned long fp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






extern void return_to_handler(void);

extern int
ftrace_push_return_trace(unsigned long ret, unsigned long func, int *depth,
    unsigned long frame_pointer);
extern char __irqentry_text_start[];
extern char __irqentry_text_end[];




extern int register_ftrace_graph(trace_func_graph_ret_t retfunc,
    trace_func_graph_ent_t entryfunc);

extern void ftrace_graph_stop(void);


extern trace_func_graph_ret_t ftrace_graph_return;
extern trace_func_graph_ent_t ftrace_graph_entry;

extern void unregister_ftrace_graph(void);

extern void ftrace_graph_init_task(struct task_struct *t);
extern void ftrace_graph_exit_task(struct task_struct *t);
extern void ftrace_graph_init_idle_task(struct task_struct *t, int cpu);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct14curr_ret_stackE_2273_0 {
  typedef TJP__ZN11task_struct14curr_ret_stackE_2273_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11task_struct14curr_ret_stackE_2273(int *source) {
  int __result_buffer;
  typedef TJP__ZN11task_struct14curr_ret_stackE_2273_0< int , ::task_struct , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int task_curr_ret_stack(struct task_struct *t)
{
 return __get__ZN11task_struct14curr_ret_stackE_2273(&t->curr_ret_stack);
}

static inline void pause_graph_tracing(void)
{
 ;
}

static inline void unpause_graph_tracing(void)
{
 ;
}
enum {
 TSK_TRACE_FL_TRACE_BIT = 0,
 TSK_TRACE_FL_GRAPH_BIT = 1,
};
enum {
 TSK_TRACE_FL_TRACE = 1 << TSK_TRACE_FL_TRACE_BIT,
 TSK_TRACE_FL_GRAPH = 1 << TSK_TRACE_FL_GRAPH_BIT,
};

static inline void set_tsk_trace_trace(struct task_struct *tsk)
{
 set_bit(TSK_TRACE_FL_TRACE_BIT, &tsk->trace);
}

static inline void clear_tsk_trace_trace(struct task_struct *tsk)
{
 clear_bit(TSK_TRACE_FL_TRACE_BIT, &tsk->trace);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5traceE_2276_0 {
  typedef TJP__ZN11task_struct5traceE_2276_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct5traceE_2276(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN11task_struct5traceE_2276_0< unsigned long int , ::task_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int test_tsk_trace_trace(struct task_struct *tsk)
{
 return __get__ZN11task_struct5traceE_2276(&tsk->trace) & TSK_TRACE_FL_TRACE;
}

static inline void set_tsk_trace_graph(struct task_struct *tsk)
{
 set_bit(TSK_TRACE_FL_GRAPH_BIT, &tsk->trace);
}

static inline void clear_tsk_trace_graph(struct task_struct *tsk)
{
 clear_bit(TSK_TRACE_FL_GRAPH_BIT, &tsk->trace);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct5traceE_2280_0 {
  typedef TJP__ZN11task_struct5traceE_2280_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN11task_struct5traceE_2280(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN11task_struct5traceE_2280_0< unsigned long int , ::task_struct , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int test_tsk_trace_graph(struct task_struct *tsk)
{
 return __get__ZN11task_struct5traceE_2280(&tsk->trace) & TSK_TRACE_FL_GRAPH;
}

enum ftrace_dump_mode;

extern enum ftrace_dump_mode ftrace_dump_on_oops;

extern void disable_trace_on_warning(void);
extern int __disable_trace_on_warning;
unsigned long arch_syscall_addr(int nr);
struct node {
  template <typename, int = 0> struct __BYPASSnode {};
  template <typename, int> friend struct __BYPASSnode;
 struct device dev;


 struct work_struct node_work;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct memory_block;
extern struct node *node_devices[];
typedef void (*node_registration_func_t)(struct node *);

extern void unregister_node(struct node *node);

extern int register_one_node(int nid);
extern void unregister_one_node(int nid);
extern int register_cpu_under_node(unsigned int cpu, unsigned int nid);
extern int unregister_cpu_under_node(unsigned int cpu, unsigned int nid);
extern int register_mem_sect_under_node(struct memory_block *mem_blk,
      int nid);
extern int unregister_mem_sect_under_nodes(struct memory_block *mem_blk,
        unsigned long phys_index);


extern void register_hugetlbfs_with_node(node_registration_func_t doregister,
      node_registration_func_t unregister);



struct device;
struct device_node;

struct cpu {
  template <typename, int = 0> struct __BYPASScpu {};
  template <typename, int> friend struct __BYPASScpu;
 int node_id;
 int hotpluggable;
 struct device dev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int register_cpu(struct cpu *cpu, int num);
extern struct device *get_cpu_device(unsigned cpu);
extern bool cpu_is_hotpluggable(unsigned cpu);
extern bool arch_match_cpu_phys_id(int cpu, u64 phys_id);
extern bool arch_find_n_match_cpu_physical_id(struct device_node *cpun,
           int cpu, unsigned int *thread);

extern int cpu_add_dev_attr(struct device_attribute *attr);
extern void cpu_remove_dev_attr(struct device_attribute *attr);

extern int cpu_add_dev_attr_group(struct attribute_group *attrs);
extern void cpu_remove_dev_attr_group(struct attribute_group *attrs);


extern void unregister_cpu(struct cpu *cpu);
extern ssize_t arch_cpu_probe( char *, size_t);
extern ssize_t arch_cpu_release( char *, size_t);

struct notifier_block;


extern int arch_cpu_uevent(struct device *dev, struct kobj_uevent_env *env);
extern ssize_t arch_print_cpu_modalias(struct device *dev,
           struct device_attribute *attr,
           char *bufptr);





enum {
 CPU_PRI_SCHED_ACTIVE = ((int)(~0U>>1)),
 CPU_PRI_CPUSET_ACTIVE = ((int)(~0U>>1)) - 1,
 CPU_PRI_SCHED_INACTIVE = (-((int)(~0U>>1)) - 1) + 1,
 CPU_PRI_CPUSET_INACTIVE = (-((int)(~0U>>1)) - 1),


 CPU_PRI_PERF = 20,
 CPU_PRI_MIGRATION = 10,

 CPU_PRI_WORKQUEUE_UP = 5,
 CPU_PRI_WORKQUEUE_DOWN = -5,
};
extern int register_cpu_notifier(struct notifier_block *nb);
extern void unregister_cpu_notifier(struct notifier_block *nb);
int cpu_up(unsigned int cpu);
void notify_cpu_starting(unsigned int cpu);
extern void cpu_maps_update_begin(void);
extern void cpu_maps_update_done(void);
extern struct bus_type cpu_subsys;




extern void cpu_hotplug_begin(void);
extern void cpu_hotplug_done(void);
extern void get_online_cpus(void);
extern void put_online_cpus(void);
extern void cpu_hotplug_disable(void);
extern void cpu_hotplug_enable(void);



void clear_tasks_mm_cpumask(int cpu);
int cpu_down(unsigned int cpu);
extern int disable_nonboot_cpus(void);
extern void enable_nonboot_cpus(void);





enum cpuhp_state {
 CPUHP_OFFLINE,
 CPUHP_ONLINE,
};

void cpu_startup_entry(enum cpuhp_state state);
void cpu_idle(void);

void cpu_idle_poll_ctrl(bool enable);

void arch_cpu_idle(void);
void arch_cpu_idle_prepare(void);
void arch_cpu_idle_enter(void);
void arch_cpu_idle_exit(void);
void arch_cpu_idle_dead(void);
struct irq_work {
  template <typename, int = 0> struct __BYPASSirq_work {};
  template <typename, int> friend struct __BYPASSirq_work;
 unsigned long flags;
 struct llist_node llnode;
 void (*func)(struct irq_work *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline
void init_irq_work(struct irq_work *work, void (*func)(struct irq_work *))
{
 work->flags = 0;
 work->func = func;
}

void irq_work_queue(struct irq_work *work);
void irq_work_run(void);
void irq_work_sync(struct irq_work *work);


bool irq_work_needs_cpu(void);
struct static_key_deferred {
  template <typename, int = 0> struct __BYPASSstatic_key_deferred {};
  template <typename, int> friend struct __BYPASSstatic_key_deferred;
 struct static_key key;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
static inline void static_key_slow_dec_deferred(struct static_key_deferred *key)
{
 (!static_key_initialized);
 static_key_slow_dec(&key->key);
}
static inline void
jump_label_rate_limit(struct static_key_deferred *key,
  unsigned long rl)
{
 (!static_key_initialized);
}









enum perf_event_x86_regs {
 PERF_REG_X86_AX,
 PERF_REG_X86_BX,
 PERF_REG_X86_CX,
 PERF_REG_X86_DX,
 PERF_REG_X86_SI,
 PERF_REG_X86_DI,
 PERF_REG_X86_BP,
 PERF_REG_X86_SP,
 PERF_REG_X86_IP,
 PERF_REG_X86_FLAGS,
 PERF_REG_X86_CS,
 PERF_REG_X86_SS,
 PERF_REG_X86_DS,
 PERF_REG_X86_ES,
 PERF_REG_X86_FS,
 PERF_REG_X86_GS,
 PERF_REG_X86_R8,
 PERF_REG_X86_R9,
 PERF_REG_X86_R10,
 PERF_REG_X86_R11,
 PERF_REG_X86_R12,
 PERF_REG_X86_R13,
 PERF_REG_X86_R14,
 PERF_REG_X86_R15,

 PERF_REG_X86_32_MAX = PERF_REG_X86_GS + 1,
 PERF_REG_X86_64_MAX = PERF_REG_X86_R15 + 1,
};
u64 perf_reg_value(struct pt_regs *regs, int idx);
int perf_reg_validate(u64 mask);
u64 perf_reg_abi(struct task_struct *task);


struct perf_callchain_entry {
  template <typename, int = 0> struct __BYPASSperf_callchain_entry {};
  template <typename, int> friend struct __BYPASSperf_callchain_entry;
 __u64 nr;
 __u64 ip[127];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct perf_raw_record {
  template <typename, int = 0> struct __BYPASSperf_raw_record {};
  template <typename, int> friend struct __BYPASSperf_raw_record;
 u32 size;
 void *data;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct perf_branch_stack {
  template <typename, int = 0> struct __BYPASSperf_branch_stack {};
  template <typename, int> friend struct __BYPASSperf_branch_stack;
 __u64 nr;
 struct perf_branch_entry entries[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct perf_regs_user {
  template <typename, int = 0> struct __BYPASSperf_regs_user {};
  template <typename, int> friend struct __BYPASSperf_regs_user;
 __u64 abi;
 struct pt_regs *regs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct task_struct;




struct hw_perf_event_extra {
  template <typename, int = 0> struct __BYPASShw_perf_event_extra {};
  template <typename, int> friend struct __BYPASShw_perf_event_extra;
 u64 config;
 unsigned int reg;
 int alloc;
 int idx;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct event_constraint;




struct hw_perf_event {
  template <typename, int = 0> struct __BYPASShw_perf_event {};
  template <typename, int> friend struct __BYPASShw_perf_event;

 union {
  struct {
   u64 config;
   u64 last_tag;
   unsigned long config_base;
   unsigned long event_base;
   int event_base_rdpmc;
   int idx;
   int last_cpu;
   int flags;

   struct hw_perf_event_extra extra_reg;
   struct hw_perf_event_extra branch_reg;

   struct event_constraint *constraint;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  struct {
   struct hrtimer hrtimer;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  struct {
   struct task_struct *tp_target;

   struct list_head tp_list;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};

  struct {





   struct task_struct *bp_target;
   struct arch_hw_breakpoint info;
   struct list_head bp_list;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};

 };
 int state;
 local64_t prev_count;
 u64 sample_period;
 u64 last_period;
 local64_t period_left;
 u64 interrupts_seq;
 u64 interrupts;

 u64 freq_time_stamp;
 u64 freq_count_stamp;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct perf_event;
struct pmu {
  template <typename, int = 0> struct __BYPASSpmu {};
  template <typename, int> friend struct __BYPASSpmu;
 struct list_head entry;

 struct device *dev;
 struct attribute_group **attr_groups;
 char *name;
 int type;

 int * pmu_disable_count;
 struct perf_cpu_context * pmu_cpu_context;
 int task_ctx_nr;
 int hrtimer_interval_ms;





 void (*pmu_enable) (struct pmu *pmu);
 void (*pmu_disable) (struct pmu *pmu);





 int (*event_init) (struct perf_event *event);
 int (*add) (struct perf_event *event, int flags);
 void (*del) (struct perf_event *event, int flags);






 void (*start) (struct perf_event *event, int flags);
 void (*stop) (struct perf_event *event, int flags);




 void (*read) (struct perf_event *event);
 void (*start_txn) (struct pmu *pmu);






 int (*commit_txn) (struct pmu *pmu);




 void (*cancel_txn) (struct pmu *pmu);





 int (*event_idx) (struct perf_event *event);




 void (*flush_branch_stack) (void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




enum perf_event_active_state {
 PERF_EVENT_STATE_ERROR = -2,
 PERF_EVENT_STATE_OFF = -1,
 PERF_EVENT_STATE_INACTIVE = 0,
 PERF_EVENT_STATE_ACTIVE = 1,
};

struct file;
struct perf_sample_data;

typedef void (*perf_overflow_handler_t)(struct perf_event *,
     struct perf_sample_data *,
     struct pt_regs *regs);

enum perf_group_flag {
 PERF_GROUP_SOFTWARE = 0x1,
};




struct swevent_hlist {
  template <typename, int = 0> struct __BYPASSswevent_hlist {};
  template <typename, int> friend struct __BYPASSswevent_hlist;
 struct hlist_head heads[(1 << 8)];
 struct callback_head callback_head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct perf_cgroup;
struct ring_buffer;




struct perf_event {
  template <typename, int = 0> struct __BYPASSperf_event {};
  template <typename, int> friend struct __BYPASSperf_event;






 struct list_head event_entry;
 struct list_head group_entry;
 struct list_head sibling_list;






 struct list_head migrate_entry;

 struct hlist_node hlist_entry;
 int nr_siblings;
 int group_flags;
 struct perf_event *group_leader;
 struct pmu *pmu;

 enum perf_event_active_state state;
 unsigned int attach_state;
 local64_t count;
 atomic64_t child_count;
 u64 total_time_enabled;
 u64 total_time_running;
 u64 tstamp_enabled;
 u64 tstamp_running;
 u64 tstamp_stopped;
 u64 shadow_ctx_time;

 struct perf_event_attr attr;
 u16 header_size;
 u16 id_header_size;
 u16 read_size;
 struct hw_perf_event hw;

 struct perf_event_context *ctx;
 atomic_long_t refcount;





 atomic64_t child_total_time_enabled;
 atomic64_t child_total_time_running;




 struct mutex child_mutex;
 struct list_head child_list;
 struct perf_event *parent;

 int oncpu;
 int cpu;

 struct list_head owner_entry;
 struct task_struct *owner;


 struct mutex mmap_mutex;
 atomic_t mmap_count;

 struct ring_buffer *rb;
 struct list_head rb_entry;


 wait_queue_head_t waitq;
 struct fasync_struct *fasync;


 int pending_wakeup;
 int pending_kill;
 int pending_disable;
 struct irq_work pending;

 atomic_t event_limit;

 void (*destroy)(struct perf_event *);
 struct callback_head callback_head;

 struct pid_namespace *ns;
 u64 id;

 perf_overflow_handler_t overflow_handler;
 void *overflow_handler_context;


 struct ftrace_event_call *tp_event;
 struct event_filter *filter;

 struct ftrace_ops ftrace_ops;




 struct perf_cgroup *cgrp;
 int cgrp_defer_enabled;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum perf_event_context_type {
 task_context,
 cpu_context,
};






struct perf_event_context {
  template <typename, int = 0> struct __BYPASSperf_event_context {};
  template <typename, int> friend struct __BYPASSperf_event_context;
 struct pmu *pmu;
 enum perf_event_context_type type;




 raw_spinlock_t lock;





 struct mutex mutex;

 struct list_head pinned_groups;
 struct list_head flexible_groups;
 struct list_head event_list;
 int nr_events;
 int nr_active;
 int is_active;
 int nr_stat;
 int nr_freq;
 int rotate_disable;
 atomic_t refcount;
 struct task_struct *task;




 u64 time;
 u64 timestamp;





 struct perf_event_context *parent_ctx;
 u64 parent_gen;
 u64 generation;
 int pin_count;
 int nr_cgroups;
 int nr_branch_stack;
 struct callback_head callback_head;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct perf_cpu_context {
  template <typename, int = 0> struct __BYPASSperf_cpu_context {};
  template <typename, int> friend struct __BYPASSperf_cpu_context;
 struct perf_event_context ctx;
 struct perf_event_context *task_ctx;
 int active_oncpu;
 int exclusive;
 struct hrtimer hrtimer;
 ktime_t hrtimer_interval;
 struct list_head rotation_list;
 struct pmu *unique_pmu;
 struct perf_cgroup *cgrp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct perf_output_handle {
  template <typename, int = 0> struct __BYPASSperf_output_handle {};
  template <typename, int> friend struct __BYPASSperf_output_handle;
 struct perf_event *event;
 struct ring_buffer *rb;
 unsigned long wakeup;
 unsigned long size;
 void *addr;
 int page;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



extern int perf_pmu_register(struct pmu *pmu, char *name, int type);
extern void perf_pmu_unregister(struct pmu *pmu);

extern int perf_num_counters(void);
extern char *perf_pmu_name(void);
extern void __perf_event_task_sched_in(struct task_struct *prev,
           struct task_struct *task);
extern void __perf_event_task_sched_out(struct task_struct *prev,
     struct task_struct *next);
extern int perf_event_init_task(struct task_struct *child);
extern void perf_event_exit_task(struct task_struct *child);
extern void perf_event_free_task(struct task_struct *task);
extern void perf_event_delayed_put(struct task_struct *task);
extern void perf_event_print_debug(void);
extern void perf_pmu_disable(struct pmu *pmu);
extern void perf_pmu_enable(struct pmu *pmu);
extern int perf_event_task_disable(void);
extern int perf_event_task_enable(void);
extern int perf_event_refresh(struct perf_event *event, int refresh);
extern void perf_event_update_userpage(struct perf_event *event);
extern int perf_event_release_kernel(struct perf_event *event);
extern struct perf_event *
perf_event_create_kernel_counter(struct perf_event_attr *attr,
    int cpu,
    struct task_struct *task,
    perf_overflow_handler_t callback,
    void *context);
extern void perf_pmu_migrate_context(struct pmu *pmu,
    int src_cpu, int dst_cpu);
extern u64 perf_event_read_value(struct perf_event *event,
     u64 *enabled, u64 *running);


struct perf_sample_data {
  template <typename, int = 0> struct __BYPASSperf_sample_data {};
  template <typename, int> friend struct __BYPASSperf_sample_data;
 u64 type;

 u64 ip;
 struct {
  u32 pid;
  u32 tid;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} tid_entry;
 u64 time;
 u64 addr;
 u64 id;
 u64 stream_id;
 struct {
  u32 cpu;
  u32 reserved;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} cpu_entry;
 u64 period;
 union perf_mem_data_src data_src;
 struct perf_callchain_entry *callchain;
 struct perf_raw_record *raw;
 struct perf_branch_stack *br_stack;
 struct perf_regs_user regs_user;
 u64 stack_user_size;
 u64 weight;



 u64 txn;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void perf_sample_data_init(struct perf_sample_data *data,
      u64 addr, u64 period)
{

 data->addr = addr;
 data->raw = 0;
 data->br_stack = 0;
 data->period = period;
 data->regs_user.abi = PERF_SAMPLE_REGS_ABI_NONE;
 data->regs_user.regs = 0;
 data->stack_user_size = 0;
 data->weight = 0;
 data->data_src.val = 0;
 data->txn = 0;
}

extern void perf_output_sample(struct perf_output_handle *handle,
          struct perf_event_header *header,
          struct perf_sample_data *data,
          struct perf_event *event);
extern void perf_prepare_sample(struct perf_event_header *header,
    struct perf_sample_data *data,
    struct perf_event *event,
    struct pt_regs *regs);

extern int perf_event_overflow(struct perf_event *event,
     struct perf_sample_data *data,
     struct pt_regs *regs);

static inline bool is_sampling_event(struct perf_event *event)
{
 return event->attr.sample_period != 0;
}




static inline int is_software_event(struct perf_event *event)
{
 return event->pmu->task_ctx_nr == perf_sw_context;
}

extern struct static_key perf_swevent_enabled[PERF_COUNT_SW_MAX];

extern void __perf_sw_event(u32, u64, struct pt_regs *, u64);
static inline void perf_fetch_caller_regs(struct pt_regs *regs)
{
 memset(regs, 0, sizeof(*regs));

 { (regs)->ip = (((unsigned long)__builtin_return_address(0))); (regs)->bp = caller_frame_pointer(); (regs)->cs = (2*8); regs->flags = 0; asm ( " " "movq" " " "%%""rsp" ", %0\n" : "=m" ((regs)->sp) :: "memory" ); };
}

static inline __attribute__((always_inline)) void
perf_sw_event(u32 event_id, u64 nr, struct pt_regs *regs, u64 addr)
{
 struct pt_regs hot_regs;

 if (static_key_false(&perf_swevent_enabled[event_id])) {
  if (!regs) {
   perf_fetch_caller_regs(&hot_regs);
   regs = &hot_regs;
  }
  __perf_sw_event(event_id, nr, regs, addr);
 }
}

extern struct static_key_deferred perf_sched_events;

static inline void perf_event_task_sched_in(struct task_struct *prev,
         struct task_struct *task)
{
 if (static_key_false(&perf_sched_events.key))
  __perf_event_task_sched_in(prev, task);
}

static inline void perf_event_task_sched_out(struct task_struct *prev,
          struct task_struct *next)
{
 perf_sw_event(PERF_COUNT_SW_CONTEXT_SWITCHES, 1, 0, 0);

 if (static_key_false(&perf_sched_events.key))
  __perf_event_task_sched_out(prev, next);
}

extern void perf_event_mmap(struct vm_area_struct *vma);
extern struct perf_guest_info_callbacks *perf_guest_cbs;
extern int perf_register_guest_info_callbacks(struct perf_guest_info_callbacks *callbacks);
extern int perf_unregister_guest_info_callbacks(struct perf_guest_info_callbacks *callbacks);

extern void perf_event_comm(struct task_struct *tsk);
extern void perf_event_fork(struct task_struct *tsk);


extern __attribute__((section(".data..percpu" ""))) __typeof__(struct perf_callchain_entry) perf_callchain_entry;

extern void perf_callchain_user(struct perf_callchain_entry *entry, struct pt_regs *regs);
extern void perf_callchain_kernel(struct perf_callchain_entry *entry, struct pt_regs *regs);

static inline void perf_callchain_store(struct perf_callchain_entry *entry, u64 ip)
{
 if (entry->nr < 127)
  entry->ip[entry->nr++] = ip;
}

extern int sysctl_perf_event_paranoid;
extern int sysctl_perf_event_mlock;
extern int sysctl_perf_event_sample_rate;
extern int sysctl_perf_cpu_time_max_percent;

extern void perf_sample_event_took(u64 sample_len_ns);

extern int perf_proc_update_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp,
  loff_t *ppos);
extern int perf_cpu_time_max_percent_handler(struct ctl_table *table, int write,
  void *buffer, size_t *lenp,
  loff_t *ppos);


static inline bool perf_paranoid_tracepoint_raw(void)
{
 return sysctl_perf_event_paranoid > -1;
}

static inline bool perf_paranoid_cpu(void)
{
 return sysctl_perf_event_paranoid > 0;
}

static inline bool perf_paranoid_kernel(void)
{
 return sysctl_perf_event_paranoid > 1;
}

extern void perf_event_init(void);
extern void perf_tp_event(u64 addr, u64 count, void *record,
     int entry_size, struct pt_regs *regs,
     struct hlist_head *head, int rctx,
     struct task_struct *task);
extern void perf_bp_event(struct perf_event *event, void *data);







static inline bool has_branch_stack(struct perf_event *event)
{
 return event->attr.sample_type & PERF_SAMPLE_BRANCH_STACK;
}

extern int perf_output_begin(struct perf_output_handle *handle,
        struct perf_event *event, unsigned int size);
extern void perf_output_end(struct perf_output_handle *handle);
extern unsigned int perf_output_copy(struct perf_output_handle *handle,
        void *buf, unsigned int len);
extern unsigned int perf_output_skip(struct perf_output_handle *handle,
         unsigned int len);
extern int perf_swevent_get_recursion_context(void);
extern void perf_swevent_put_recursion_context(int rctx);
extern u64 perf_swevent_set_period(struct perf_event *event);
extern void perf_event_enable(struct perf_event *event);
extern void perf_event_disable(struct perf_event *event);
extern int __perf_event_disable(void *info);
extern void perf_event_task_tick(void);
extern bool perf_event_can_stop_tick(void);





extern void perf_restore_debug_store(void);
struct perf_pmu_events_attr {
  template <typename, int = 0> struct __BYPASSperf_pmu_events_attr {};
  template <typename, int> friend struct __BYPASSperf_pmu_events_attr;
 struct device_attribute attr;
 u64 id;
 char *event_str;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct trace_array;
struct trace_buffer;
struct tracer;
struct dentry;

struct trace_print_flags {
  template <typename, int = 0> struct __BYPASStrace_print_flags {};
  template <typename, int> friend struct __BYPASStrace_print_flags;
 unsigned long mask;
 char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct trace_print_flags_u64 {
  template <typename, int = 0> struct __BYPASStrace_print_flags_u64 {};
  template <typename, int> friend struct __BYPASStrace_print_flags_u64;
 unsigned long long mask;
 char *name;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

 char *ftrace_print_flags_seq(struct trace_seq *p, char *delim,
       unsigned long flags,
       struct trace_print_flags *flag_array);

 char *ftrace_print_symbols_seq(struct trace_seq *p, unsigned long val,
         struct trace_print_flags *symbol_array);
 char *ftrace_print_hex_seq(struct trace_seq *p,
     unsigned char *buf, int len);

struct trace_iterator;
struct trace_event;

int ftrace_raw_output_prep(struct trace_iterator *iter,
      struct trace_event *event);







struct trace_entry {
  template <typename, int = 0> struct __BYPASStrace_entry {};
  template <typename, int> friend struct __BYPASStrace_entry;
 unsigned short type;
 unsigned char flags;
 unsigned char preempt_count;
 int pid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct trace_iterator {
  template <typename, int = 0> struct __BYPASStrace_iterator {};
  template <typename, int> friend struct __BYPASStrace_iterator;
 struct trace_array *tr;
 struct tracer *trace;
 struct trace_buffer *trace_buffer;
 void *_private;
 int cpu_file;
 struct mutex mutex;
 struct ring_buffer_iter **buffer_iter;
 unsigned long iter_flags;


 struct trace_seq tmp_seq;

 cpumask_var_t started;


 bool snapshot;


 struct trace_seq seq;
 struct trace_entry *ent;
 unsigned long lost_events;
 int leftover;
 int ent_size;
 int cpu;
 u64 ts;

 loff_t pos;
 long idx;



  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum trace_iter_flags {
 TRACE_FILE_LAT_FMT = 1,
 TRACE_FILE_ANNOTATE = 2,
 TRACE_FILE_TIME_IN_NS = 4,
};


enum print_line_t {
 TRACE_TYPE_PARTIAL_LINE = 0,
 TRACE_TYPE_HANDLED = 1,
 TRACE_TYPE_UNHANDLED = 2,
 TRACE_TYPE_NO_CONSUME = 3
};

typedef enum print_line_t (*trace_print_func)(struct trace_iterator *iter,
          int flags, struct trace_event *event);

struct trace_event_functions {
  template <typename, int = 0> struct __BYPASStrace_event_functions {};
  template <typename, int> friend struct __BYPASStrace_event_functions;
 trace_print_func trace;
 trace_print_func raw;
 trace_print_func hex;
 trace_print_func binary;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct trace_event {
  template <typename, int = 0> struct __BYPASStrace_event {};
  template <typename, int> friend struct __BYPASStrace_event;
 struct hlist_node node;
 struct list_head list;
 int type;
 struct trace_event_functions *funcs;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int register_ftrace_event(struct trace_event *event);
extern int unregister_ftrace_event(struct trace_event *event);

void tracing_generic_entry_update(struct trace_entry *entry,
      unsigned long flags,
      int pc);
struct ftrace_event_file;

struct ring_buffer_event *
trace_event_buffer_lock_reserve(struct ring_buffer **current_buffer,
    struct ftrace_event_file *ftrace_file,
    int type, unsigned long len,
    unsigned long flags, int pc);
struct ring_buffer_event *
trace_current_buffer_lock_reserve(struct ring_buffer **current_buffer,
      int type, unsigned long len,
      unsigned long flags, int pc);
void trace_current_buffer_unlock_commit(struct ring_buffer *buffer,
     struct ring_buffer_event *event,
     unsigned long flags, int pc);
void trace_buffer_unlock_commit(struct ring_buffer *buffer,
    struct ring_buffer_event *event,
    unsigned long flags, int pc);
void trace_buffer_unlock_commit_regs(struct ring_buffer *buffer,
         struct ring_buffer_event *event,
         unsigned long flags, int pc,
         struct pt_regs *regs);
void trace_current_buffer_discard_commit(struct ring_buffer *buffer,
      struct ring_buffer_event *event);

void tracing_record_cmdline(struct task_struct *tsk);

struct event_filter;

enum trace_reg {
 TRACE_REG_REGISTER,
 TRACE_REG_UNREGISTER,

 TRACE_REG_PERF_REGISTER,
 TRACE_REG_PERF_UNREGISTER,
 TRACE_REG_PERF_OPEN,
 TRACE_REG_PERF_CLOSE,
 TRACE_REG_PERF_ADD,
 TRACE_REG_PERF_DEL,

};

struct ftrace_event_call;

struct ftrace_event_class {
  template <typename, int = 0> struct __BYPASSftrace_event_class {};
  template <typename, int> friend struct __BYPASSftrace_event_class;
 char *system;
 void *probe;

 void *perf_probe;

 int (*reg)(struct ftrace_event_call *event,
           enum trace_reg type, void *data);
 int (*define_fields)(struct ftrace_event_call *);
 struct list_head *(*get_fields)(struct ftrace_event_call *);
 struct list_head fields;
 int (*raw_init)(struct ftrace_event_call *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int ftrace_event_reg(struct ftrace_event_call *event,
       enum trace_reg type, void *data);

enum {
 TRACE_EVENT_FL_FILTERED_BIT,
 TRACE_EVENT_FL_CAP_ANY_BIT,
 TRACE_EVENT_FL_NO_SET_FILTER_BIT,
 TRACE_EVENT_FL_IGNORE_ENABLE_BIT,
 TRACE_EVENT_FL_WAS_ENABLED_BIT,
 TRACE_EVENT_FL_USE_CALL_FILTER_BIT,
};
enum {
 TRACE_EVENT_FL_FILTERED = (1 << TRACE_EVENT_FL_FILTERED_BIT),
 TRACE_EVENT_FL_CAP_ANY = (1 << TRACE_EVENT_FL_CAP_ANY_BIT),
 TRACE_EVENT_FL_NO_SET_FILTER = (1 << TRACE_EVENT_FL_NO_SET_FILTER_BIT),
 TRACE_EVENT_FL_IGNORE_ENABLE = (1 << TRACE_EVENT_FL_IGNORE_ENABLE_BIT),
 TRACE_EVENT_FL_WAS_ENABLED = (1 << TRACE_EVENT_FL_WAS_ENABLED_BIT),
 TRACE_EVENT_FL_USE_CALL_FILTER = (1 << TRACE_EVENT_FL_USE_CALL_FILTER_BIT),
};

struct ftrace_event_call {
  template <typename, int = 0> struct __BYPASSftrace_event_call {};
  template <typename, int> friend struct __BYPASSftrace_event_call;
 struct list_head list;
 struct ftrace_event_class *_class;
 char *name;
 struct trace_event event;
 char *print_fmt;
 struct event_filter *filter;
 struct list_head *files;
 void *mod;
 void *data;
 int flags;


 int perf_refcount;
 struct hlist_head *perf_events;

 int (*perf_perm)(struct ftrace_event_call *,
        struct perf_event *);


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct trace_array;
struct ftrace_subsystem_dir;

enum {
 FTRACE_EVENT_FL_ENABLED_BIT,
 FTRACE_EVENT_FL_RECORDED_CMD_BIT,
 FTRACE_EVENT_FL_FILTERED_BIT,
 FTRACE_EVENT_FL_NO_SET_FILTER_BIT,
 FTRACE_EVENT_FL_SOFT_MODE_BIT,
 FTRACE_EVENT_FL_SOFT_DISABLED_BIT,
};
enum {
 FTRACE_EVENT_FL_ENABLED = (1 << FTRACE_EVENT_FL_ENABLED_BIT),
 FTRACE_EVENT_FL_RECORDED_CMD = (1 << FTRACE_EVENT_FL_RECORDED_CMD_BIT),
 FTRACE_EVENT_FL_FILTERED = (1 << FTRACE_EVENT_FL_FILTERED_BIT),
 FTRACE_EVENT_FL_NO_SET_FILTER = (1 << FTRACE_EVENT_FL_NO_SET_FILTER_BIT),
 FTRACE_EVENT_FL_SOFT_MODE = (1 << FTRACE_EVENT_FL_SOFT_MODE_BIT),
 FTRACE_EVENT_FL_SOFT_DISABLED = (1 << FTRACE_EVENT_FL_SOFT_DISABLED_BIT),
};

struct ftrace_event_file {
  template <typename, int = 0> struct __BYPASSftrace_event_file {};
  template <typename, int> friend struct __BYPASSftrace_event_file;
 struct list_head list;
 struct ftrace_event_call *event_call;
 struct event_filter *filter;
 struct dentry *dir;
 struct trace_array *tr;
 struct ftrace_subsystem_dir *system;
 unsigned long flags;
 atomic_t sm_ref;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern void destroy_preds(struct ftrace_event_file *file);
extern void destroy_call_preds(struct ftrace_event_call *call);
extern int filter_match_preds(struct event_filter *filter, void *rec);

extern int filter_check_discard(struct ftrace_event_file *file, void *rec,
    struct ring_buffer *buffer,
    struct ring_buffer_event *event);
extern int call_filter_check_discard(struct ftrace_event_call *call, void *rec,
         struct ring_buffer *buffer,
         struct ring_buffer_event *event);

enum {
 FILTER_OTHER = 0,
 FILTER_STATIC_STRING,
 FILTER_DYN_STRING,
 FILTER_PTR_STRING,
 FILTER_TRACE_FN,
};

extern int trace_event_raw_init(struct ftrace_event_call *call);
extern int trace_define_field(struct ftrace_event_call *call, char *type,
         char *name, int offset, int size,
         int is_signed, int filter_type);
extern int trace_add_event_call(struct ftrace_event_call *call);
extern int trace_remove_event_call(struct ftrace_event_call *call);



int trace_set_clr_event( char *system, char *event, int set);
struct perf_event;

extern __attribute__((section(".data..percpu" ""))) __typeof__(struct pt_regs) perf_trace_regs;

extern int perf_trace_init(struct perf_event *event);
extern void perf_trace_destroy(struct perf_event *event);
extern int perf_trace_add(struct perf_event *event, int flags);
extern void perf_trace_del(struct perf_event *event, int flags);
extern int ftrace_profile_set_filter(struct perf_event *event, int event_id,
         char *filter_str);
extern void ftrace_profile_free_filter(struct perf_event *event);
extern void *perf_trace_buf_prepare(int size, unsigned short type,
        struct pt_regs *regs, int *rctxp);

static inline void
perf_trace_buf_submit(void *raw_data, int size, int rctx, u64 addr,
         u64 count, struct pt_regs *regs, void *head,
         struct task_struct *task)
{



 perf_tp_event(addr, count, raw_data, size, regs, (struct hlist_head *)head, rctx, task);

}
struct syscall_metadata {
  template <typename, int = 0> struct __BYPASSsyscall_metadata {};
  template <typename, int> friend struct __BYPASSsyscall_metadata;
 char *name;
 int syscall_nr;
 int nb_args;
 char **types;
 char **args;
 struct list_head enter_fields;

 struct ftrace_event_call *enter_event;
 struct ftrace_event_call *exit_event;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct ftrace_event_class event_class_syscall_enter;
extern struct ftrace_event_class event_class_syscall_exit;
extern struct trace_event_functions enter_syscall_print_funcs;
extern struct trace_event_functions exit_syscall_print_funcs;
 long sys_time(time_t *tloc);
 long sys_stime(time_t *tptr);
 long sys_gettimeofday(struct timeval *tv,
    struct timezone *tz);
 long sys_settimeofday(struct timeval *tv,
    struct timezone *tz);
 long sys_adjtimex(struct timex *txc_p);

 long sys_times(struct tms *tbuf);

 long sys_gettid(void);
 long sys_nanosleep(struct timespec *rqtp, struct timespec *rmtp);
 long sys_alarm(unsigned int seconds);
 long sys_getpid(void);
 long sys_getppid(void);
 long sys_getuid(void);
 long sys_geteuid(void);
 long sys_getgid(void);
 long sys_getegid(void);
 long sys_getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
 long sys_getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
 long sys_getpgid(pid_t pid);
 long sys_getpgrp(void);
 long sys_getsid(pid_t pid);
 long sys_getgroups(int gidsetsize, gid_t *grouplist);

 long sys_setregid(gid_t rgid, gid_t egid);
 long sys_setgid(gid_t gid);
 long sys_setreuid(uid_t ruid, uid_t euid);
 long sys_setuid(uid_t uid);
 long sys_setresuid(uid_t ruid, uid_t euid, uid_t suid);
 long sys_setresgid(gid_t rgid, gid_t egid, gid_t sgid);
 long sys_setfsuid(uid_t uid);
 long sys_setfsgid(gid_t gid);
 long sys_setpgid(pid_t pid, pid_t pgid);
 long sys_setsid(void);
 long sys_setgroups(int gidsetsize, gid_t *grouplist);

 long sys_acct( char *name);
 long sys_capget(cap_user_header_t header,
    cap_user_data_t dataptr);
 long sys_capset(cap_user_header_t header,
    cap_user_data_t data);
 long sys_personality(unsigned int personality);

 long sys_sigpending(old_sigset_t *set);
 long sys_sigprocmask(int how, old_sigset_t *set,
    old_sigset_t *oset);
 long sys_sigaltstack( struct sigaltstack *uss,
    struct sigaltstack *uoss);

 long sys_getitimer(int which, struct itimerval *value);
 long sys_setitimer(int which,
    struct itimerval *value,
    struct itimerval *ovalue);
 long sys_timer_create(clockid_t which_clock,
     struct sigevent *timer_event_spec,
     timer_t * created_timer_id);
 long sys_timer_gettime(timer_t timer_id,
    struct itimerspec *setting);
 long sys_timer_getoverrun(timer_t timer_id);
 long sys_timer_settime(timer_t timer_id, int flags,
    struct itimerspec *new_setting,
    struct itimerspec *old_setting);
 long sys_timer_delete(timer_t timer_id);
 long sys_clock_settime(clockid_t which_clock,
    struct timespec *tp);
 long sys_clock_gettime(clockid_t which_clock,
    struct timespec *tp);
 long sys_clock_adjtime(clockid_t which_clock,
    struct timex *tx);
 long sys_clock_getres(clockid_t which_clock,
    struct timespec *tp);
 long sys_clock_nanosleep(clockid_t which_clock, int flags,
    struct timespec *rqtp,
    struct timespec *rmtp);

 long sys_nice(int increment);
 long sys_sched_setscheduler(pid_t pid, int policy,
     struct sched_param *param);
 long sys_sched_setparam(pid_t pid,
     struct sched_param *param);
 long sys_sched_getscheduler(pid_t pid);
 long sys_sched_getparam(pid_t pid,
     struct sched_param *param);
 long sys_sched_setaffinity(pid_t pid, unsigned int len,
     unsigned long *user_mask_ptr);
 long sys_sched_getaffinity(pid_t pid, unsigned int len,
     unsigned long *user_mask_ptr);
 long sys_sched_yield(void);
 long sys_sched_get_priority_max(int policy);
 long sys_sched_get_priority_min(int policy);
 long sys_sched_rr_get_interval(pid_t pid,
     struct timespec *interval);
 long sys_setpriority(int which, int who, int niceval);
 long sys_getpriority(int which, int who);

 long sys_shutdown(int, int);
 long sys_reboot(int magic1, int magic2, unsigned int cmd,
    void *arg);
 long sys_restart_syscall(void);
 long sys_kexec_load(unsigned long entry, unsigned long nr_segments,
    struct kexec_segment *segments,
    unsigned long flags);

 long sys_exit(int error_code);
 long sys_exit_group(int error_code);
 long sys_wait4(pid_t pid, int *stat_addr,
    int options, struct rusage *ru);
 long sys_waitid(int which, pid_t pid,
      struct siginfo *infop,
      int options, struct rusage *ru);
 long sys_waitpid(pid_t pid, int *stat_addr, int options);
 long sys_set_tid_address(int *tidptr);
 long sys_futex(u32 *uaddr, int op, u32 val,
   struct timespec *utime, u32 *uaddr2,
   u32 val3);

 long sys_init_module(void *umod, unsigned long len,
    char *uargs);
 long sys_delete_module( char *name_user,
    unsigned int flags);






 long sys_sigsuspend(int unused1, int unused2, old_sigset_t mask);


 long sys_rt_sigsuspend(sigset_t *unewset, size_t sigsetsize);







 long sys_rt_sigaction(int,
     struct sigaction *,
     struct sigaction *,
     size_t);

 long sys_rt_sigprocmask(int how, sigset_t *set,
    sigset_t *oset, size_t sigsetsize);
 long sys_rt_sigpending(sigset_t *set, size_t sigsetsize);
 long sys_rt_sigtimedwait( sigset_t *uthese,
    siginfo_t *uinfo,
    struct timespec *uts,
    size_t sigsetsize);
 long sys_rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig,
  siginfo_t *uinfo);
 long sys_kill(int pid, int sig);
 long sys_tgkill(int tgid, int pid, int sig);
 long sys_tkill(int pid, int sig);
 long sys_rt_sigqueueinfo(int pid, int sig, siginfo_t *uinfo);
 long sys_sgetmask(void);
 long sys_ssetmask(int newmask);
 long sys_signal(int sig, __sighandler_t handler);
 long sys_pause(void);

 long sys_sync(void);
 long sys_fsync(unsigned int fd);
 long sys_fdatasync(unsigned int fd);
 long sys_bdflush(int func, long data);
 long sys_mount(char *dev_name, char *dir_name,
    char *type, unsigned long flags,
    void *data);
 long sys_umount(char *name, int flags);
 long sys_oldumount(char *name);
 long sys_truncate( char *path, long length);
 long sys_ftruncate(unsigned int fd, unsigned long length);
 long sys_stat( char *filename,
   struct __old_kernel_stat *statbuf);
 long sys_statfs( char * path,
    struct statfs *buf);
 long sys_statfs64( char *path, size_t sz,
    struct statfs64 *buf);
 long sys_fstatfs(unsigned int fd, struct statfs *buf);
 long sys_fstatfs64(unsigned int fd, size_t sz,
    struct statfs64 *buf);
 long sys_lstat( char *filename,
   struct __old_kernel_stat *statbuf);
 long sys_fstat(unsigned int fd,
   struct __old_kernel_stat *statbuf);
 long sys_newstat( char *filename,
    struct stat *statbuf);
 long sys_newlstat( char *filename,
    struct stat *statbuf);
 long sys_newfstat(unsigned int fd, struct stat *statbuf);
 long sys_ustat(unsigned dev, struct ustat *ubuf);
 long sys_setxattr( char *path, char *name,
        void *value, size_t size, int flags);
 long sys_lsetxattr( char *path, char *name,
         void *value, size_t size, int flags);
 long sys_fsetxattr(int fd, char *name,
         void *value, size_t size, int flags);
 long sys_getxattr( char *path, char *name,
        void *value, size_t size);
 long sys_lgetxattr( char *path, char *name,
         void *value, size_t size);
 long sys_fgetxattr(int fd, char *name,
         void *value, size_t size);
 long sys_listxattr( char *path, char *list,
         size_t size);
 long sys_llistxattr( char *path, char *list,
          size_t size);
 long sys_flistxattr(int fd, char *list, size_t size);
 long sys_removexattr( char *path,
    char *name);
 long sys_lremovexattr( char *path,
     char *name);
 long sys_fremovexattr(int fd, char *name);

 long sys_brk(unsigned long brk);
 long sys_mprotect(unsigned long start, size_t len,
    unsigned long prot);
 long sys_mremap(unsigned long addr,
      unsigned long old_len, unsigned long new_len,
      unsigned long flags, unsigned long new_addr);
 long sys_remap_file_pages(unsigned long start, unsigned long size,
   unsigned long prot, unsigned long pgoff,
   unsigned long flags);
 long sys_msync(unsigned long start, size_t len, int flags);
 long sys_fadvise64(int fd, loff_t offset, size_t len, int advice);
 long sys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice);
 long sys_munmap(unsigned long addr, size_t len);
 long sys_mlock(unsigned long start, size_t len);
 long sys_munlock(unsigned long start, size_t len);
 long sys_mlockall(int flags);
 long sys_munlockall(void);
 long sys_madvise(unsigned long start, size_t len, int behavior);
 long sys_mincore(unsigned long start, size_t len,
    unsigned char * vec);

 long sys_pivot_root( char *new_root,
    char *put_old);
 long sys_chroot( char *filename);
 long sys_mknod( char *filename, umode_t mode,
    unsigned dev);
 long sys_link( char *oldname,
    char *newname);
 long sys_symlink( char *old, char *_new);
 long sys_unlink( char *pathname);
 long sys_rename( char *oldname,
    char *newname);
 long sys_chmod( char *filename, umode_t mode);
 long sys_fchmod(unsigned int fd, umode_t mode);

 long sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);




 long sys_pipe(int *fildes);
 long sys_pipe2(int *fildes, int flags);
 long sys_dup(unsigned int fildes);
 long sys_dup2(unsigned int oldfd, unsigned int newfd);
 long sys_dup3(unsigned int oldfd, unsigned int newfd, int flags);
 long sys_ioperm(unsigned long from, unsigned long num, int on);
 long sys_ioctl(unsigned int fd, unsigned int cmd,
    unsigned long arg);
 long sys_flock(unsigned int fd, unsigned int cmd);
 long sys_io_setup(unsigned nr_reqs, aio_context_t *ctx);
 long sys_io_destroy(aio_context_t ctx);
 long sys_io_getevents(aio_context_t ctx_id,
    long min_nr,
    long nr,
    struct io_event *events,
    struct timespec *timeout);
 long sys_io_submit(aio_context_t, long,
    struct iocb * *);
 long sys_io_cancel(aio_context_t ctx_id, struct iocb *iocb,
         struct io_event *result);
 long sys_sendfile(int out_fd, int in_fd,
        off_t *offset, size_t count);
 long sys_sendfile64(int out_fd, int in_fd,
          loff_t *offset, size_t count);
 long sys_readlink( char *path,
    char *buf, int bufsiz);
 long sys_creat( char *pathname, umode_t mode);
 long sys_open( char *filename,
    int flags, umode_t mode);
 long sys_close(unsigned int fd);
 long sys_access( char *filename, int mode);
 long sys_vhangup(void);
 long sys_chown( char *filename,
    uid_t user, gid_t group);
 long sys_lchown( char *filename,
    uid_t user, gid_t group);
 long sys_fchown(unsigned int fd, uid_t user, gid_t group);

 long sys_chown16( char *filename,
    old_uid_t user, old_gid_t group);
 long sys_lchown16( char *filename,
    old_uid_t user, old_gid_t group);
 long sys_fchown16(unsigned int fd, old_uid_t user, old_gid_t group);
 long sys_setregid16(old_gid_t rgid, old_gid_t egid);
 long sys_setgid16(old_gid_t gid);
 long sys_setreuid16(old_uid_t ruid, old_uid_t euid);
 long sys_setuid16(old_uid_t uid);
 long sys_setresuid16(old_uid_t ruid, old_uid_t euid, old_uid_t suid);
 long sys_getresuid16(old_uid_t *ruid,
    old_uid_t *euid, old_uid_t *suid);
 long sys_setresgid16(old_gid_t rgid, old_gid_t egid, old_gid_t sgid);
 long sys_getresgid16(old_gid_t *rgid,
    old_gid_t *egid, old_gid_t *sgid);
 long sys_setfsuid16(old_uid_t uid);
 long sys_setfsgid16(old_gid_t gid);
 long sys_getgroups16(int gidsetsize, old_gid_t *grouplist);
 long sys_setgroups16(int gidsetsize, old_gid_t *grouplist);
 long sys_getuid16(void);
 long sys_geteuid16(void);
 long sys_getgid16(void);
 long sys_getegid16(void);


 long sys_utime(char *filename,
    struct utimbuf *times);
 long sys_utimes(char *filename,
    struct timeval *utimes);
 long sys_lseek(unsigned int fd, off_t offset,
     unsigned int whence);
 long sys_llseek(unsigned int fd, unsigned long offset_high,
   unsigned long offset_low, loff_t *result,
   unsigned int whence);
 long sys_read(unsigned int fd, char *buf, size_t count);
 long sys_readahead(int fd, loff_t offset, size_t count);
 long sys_readv(unsigned long fd,
     struct iovec *vec,
     unsigned long vlen);
 long sys_write(unsigned int fd, char *buf,
     size_t count);
 long sys_writev(unsigned long fd,
      struct iovec *vec,
      unsigned long vlen);
 long sys_pread64(unsigned int fd, char *buf,
       size_t count, loff_t pos);
 long sys_pwrite64(unsigned int fd, char *buf,
        size_t count, loff_t pos);
 long sys_preadv(unsigned long fd, struct iovec *vec,
      unsigned long vlen, unsigned long pos_l, unsigned long pos_h);
 long sys_pwritev(unsigned long fd, struct iovec *vec,
       unsigned long vlen, unsigned long pos_l, unsigned long pos_h);
 long sys_getcwd(char *buf, unsigned long size);
 long sys_mkdir( char *pathname, umode_t mode);
 long sys_chdir( char *filename);
 long sys_fchdir(unsigned int fd);
 long sys_rmdir( char *pathname);
 long sys_lookup_dcookie(u64 cookie64, char *buf, size_t len);
 long sys_quotactl(unsigned int cmd, char *special,
    qid_t id, void *addr);
 long sys_getdents(unsigned int fd,
    struct linux_dirent *dirent,
    unsigned int count);
 long sys_getdents64(unsigned int fd,
    struct linux_dirent64 *dirent,
    unsigned int count);

 long sys_setsockopt(int fd, int level, int optname,
    char *optval, int optlen);
 long sys_getsockopt(int fd, int level, int optname,
    char *optval, int *optlen);
 long sys_bind(int, struct sockaddr *, int);
 long sys_connect(int, struct sockaddr *, int);
 long sys_accept(int, struct sockaddr *, int *);
 long sys_accept4(int, struct sockaddr *, int *, int);
 long sys_getsockname(int, struct sockaddr *, int *);
 long sys_getpeername(int, struct sockaddr *, int *);
 long sys_send(int, void *, size_t, unsigned);
 long sys_sendto(int, void *, size_t, unsigned,
    struct sockaddr *, int);
 long sys_sendmsg(int fd, struct msghdr *msg, unsigned flags);
 long sys_sendmmsg(int fd, struct mmsghdr *msg,
        unsigned int vlen, unsigned flags);
 long sys_recv(int, void *, size_t, unsigned);
 long sys_recvfrom(int, void *, size_t, unsigned,
    struct sockaddr *, int *);
 long sys_recvmsg(int fd, struct msghdr *msg, unsigned flags);
 long sys_recvmmsg(int fd, struct mmsghdr *msg,
        unsigned int vlen, unsigned flags,
        struct timespec *timeout);
 long sys_socket(int, int, int);
 long sys_socketpair(int, int, int, int *);
 long sys_socketcall(int call, unsigned long *args);
 long sys_listen(int, int);
 long sys_poll(struct pollfd *ufds, unsigned int nfds,
    int timeout);
 long sys_select(int n, fd_set *inp, fd_set *outp,
   fd_set *exp, struct timeval *tvp);
 long sys_old_select(struct sel_arg_struct *arg);
 long sys_epoll_create(int size);
 long sys_epoll_create1(int flags);
 long sys_epoll_ctl(int epfd, int op, int fd,
    struct epoll_event *event);
 long sys_epoll_wait(int epfd, struct epoll_event *events,
    int maxevents, int timeout);
 long sys_epoll_pwait(int epfd, struct epoll_event *events,
    int maxevents, int timeout,
    sigset_t *sigmask,
    size_t sigsetsize);
 long sys_gethostname(char *name, int len);
 long sys_sethostname(char *name, int len);
 long sys_setdomainname(char *name, int len);
 long sys_newuname(struct new_utsname *name);
 long sys_uname(struct old_utsname *);
 long sys_olduname(struct oldold_utsname *);

 long sys_getrlimit(unsigned int resource,
    struct rlimit *rlim);

 long sys_old_getrlimit(unsigned int resource, struct rlimit *rlim);

 long sys_setrlimit(unsigned int resource,
    struct rlimit *rlim);
 long sys_prlimit64(pid_t pid, unsigned int resource,
    struct rlimit64 *new_rlim,
    struct rlimit64 *old_rlim);
 long sys_getrusage(int who, struct rusage *ru);
 long sys_umask(int mask);

 long sys_msgget(key_t key, int msgflg);
 long sys_msgsnd(int msqid, struct msgbuf *msgp,
    size_t msgsz, int msgflg);
 long sys_msgrcv(int msqid, struct msgbuf *msgp,
    size_t msgsz, long msgtyp, int msgflg);
 long sys_msgctl(int msqid, int cmd, struct msqid_ds *buf);

 long sys_semget(key_t key, int nsems, int semflg);
 long sys_semop(int semid, struct sembuf *sops,
    unsigned nsops);
 long sys_semctl(int semid, int semnum, int cmd, unsigned long arg);
 long sys_semtimedop(int semid, struct sembuf *sops,
    unsigned nsops,
    struct timespec *timeout);
 long sys_shmat(int shmid, char *shmaddr, int shmflg);
 long sys_shmget(key_t key, size_t size, int flag);
 long sys_shmdt(char *shmaddr);
 long sys_shmctl(int shmid, int cmd, struct shmid_ds *buf);
 long sys_ipc(unsigned int call, int first, unsigned long second,
  unsigned long third, void *ptr, long fifth);

 long sys_mq_open( char *name, int oflag, umode_t mode, struct mq_attr *attr);
 long sys_mq_unlink( char *name);
 long sys_mq_timedsend(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned int msg_prio, struct timespec *abs_timeout);
 long sys_mq_timedreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned int *msg_prio, struct timespec *abs_timeout);
 long sys_mq_notify(mqd_t mqdes, struct sigevent *notification);
 long sys_mq_getsetattr(mqd_t mqdes, struct mq_attr *mqstat, struct mq_attr *omqstat);

 long sys_pciconfig_iobase(long which, unsigned long bus, unsigned long devfn);
 long sys_pciconfig_read(unsigned long bus, unsigned long dfn,
    unsigned long off, unsigned long len,
    void *buf);
 long sys_pciconfig_write(unsigned long bus, unsigned long dfn,
    unsigned long off, unsigned long len,
    void *buf);

 long sys_prctl(int option, unsigned long arg2, unsigned long arg3,
   unsigned long arg4, unsigned long arg5);
 long sys_swapon( char *specialfile, int swap_flags);
 long sys_swapoff( char *specialfile);
 long sys_sysctl(struct __sysctl_args *args);
 long sys_sysinfo(struct sysinfo *info);
 long sys_sysfs(int option,
    unsigned long arg1, unsigned long arg2);
 long sys_syslog(int type, char *buf, int len);
 long sys_uselib( char *library);
 long sys_ni_syscall(void);
 long sys_ptrace(long request, long pid, unsigned long addr,
      unsigned long data);

 long sys_add_key( char *_type,
       char *_description,
       void *_payload,
       size_t plen,
       key_serial_t destringid);

 long sys_request_key( char *_type,
    char *_description,
    char *_callout_info,
    key_serial_t destringid);

 long sys_keyctl(int cmd, unsigned long arg2, unsigned long arg3,
      unsigned long arg4, unsigned long arg5);

 long sys_ioprio_set(int which, int who, int ioprio);
 long sys_ioprio_get(int which, int who);
 long sys_set_mempolicy(int mode, unsigned long *nmask,
    unsigned long maxnode);
 long sys_migrate_pages(pid_t pid, unsigned long maxnode,
    unsigned long *from,
    unsigned long *to);
 long sys_move_pages(pid_t pid, unsigned long nr_pages,
    void * *pages,
    int *nodes,
    int *status,
    int flags);
 long sys_mbind(unsigned long start, unsigned long len,
    unsigned long mode,
    unsigned long *nmask,
    unsigned long maxnode,
    unsigned flags);
 long sys_get_mempolicy(int *policy,
    unsigned long *nmask,
    unsigned long maxnode,
    unsigned long addr, unsigned long flags);

 long sys_inotify_init(void);
 long sys_inotify_init1(int flags);
 long sys_inotify_add_watch(int fd, char *path,
     u32 mask);
 long sys_inotify_rm_watch(int fd, __s32 wd);

 long sys_spu_run(int fd, __u32 *unpc,
     __u32 *ustatus);
 long sys_spu_create( char *name,
  unsigned int flags, umode_t mode, int fd);

 long sys_mknodat(int dfd, char * filename, umode_t mode,
       unsigned dev);
 long sys_mkdirat(int dfd, char * pathname, umode_t mode);
 long sys_unlinkat(int dfd, char * pathname, int flag);
 long sys_symlinkat( char * oldname,
         int newdfd, char * newname);
 long sys_linkat(int olddfd, char *oldname,
      int newdfd, char *newname, int flags);
 long sys_renameat(int olddfd, char * oldname,
        int newdfd, char * newname);
 long sys_futimesat(int dfd, char *filename,
         struct timeval *utimes);
 long sys_faccessat(int dfd, char *filename, int mode);
 long sys_fchmodat(int dfd, char * filename,
        umode_t mode);
 long sys_fchownat(int dfd, char *filename, uid_t user,
        gid_t group, int flag);
 long sys_openat(int dfd, char *filename, int flags,
      umode_t mode);
 long sys_newfstatat(int dfd, char *filename,
          struct stat *statbuf, int flag);
 long sys_fstatat64(int dfd, char *filename,
          struct stat64 *statbuf, int flag);
 long sys_readlinkat(int dfd, char *path, char *buf,
          int bufsiz);
 long sys_utimensat(int dfd, char *filename,
    struct timespec *utimes, int flags);
 long sys_unshare(unsigned long unshare_flags);

 long sys_splice(int fd_in, loff_t *off_in,
      int fd_out, loff_t *off_out,
      size_t len, unsigned int flags);

 long sys_vmsplice(int fd, struct iovec *iov,
        unsigned long nr_segs, unsigned int flags);

 long sys_tee(int fdin, int fdout, size_t len, unsigned int flags);

 long sys_sync_file_range(int fd, loff_t offset, loff_t nbytes,
     unsigned int flags);
 long sys_sync_file_range2(int fd, unsigned int flags,
         loff_t offset, loff_t nbytes);
 long sys_get_robust_list(int pid,
        struct robust_list_head * *head_ptr,
        size_t *len_ptr);
 long sys_set_robust_list(struct robust_list_head *head,
        size_t len);
 long sys_getcpu(unsigned *cpu, unsigned *node, struct getcpu_cache *cache);
 long sys_signalfd(int ufd, sigset_t *user_mask, size_t sizemask);
 long sys_signalfd4(int ufd, sigset_t *user_mask, size_t sizemask, int flags);
 long sys_timerfd_create(int clockid, int flags);
 long sys_timerfd_settime(int ufd, int flags,
        struct itimerspec *utmr,
        struct itimerspec *otmr);
 long sys_timerfd_gettime(int ufd, struct itimerspec *otmr);
 long sys_eventfd(unsigned int count);
 long sys_eventfd2(unsigned int count, int flags);
 long sys_fallocate(int fd, int mode, loff_t offset, loff_t len);
 long sys_old_readdir(unsigned int, struct old_linux_dirent *, unsigned int);
 long sys_pselect6(int, fd_set *, fd_set *,
        fd_set *, struct timespec *,
        void *);
 long sys_ppoll(struct pollfd *, unsigned int,
     struct timespec *, sigset_t *,
     size_t);
 long sys_fanotify_init(unsigned int flags, unsigned int event_f_flags);
 long sys_fanotify_mark(int fanotify_fd, unsigned int flags,
      u64 mask, int fd,
      char *pathname);
 long sys_syncfs(int fd);

 long sys_fork(void);
 long sys_vfork(void);
 long sys_clone(unsigned long, unsigned long, int *,
        int *, int);



 long sys_execve( char *filename,
  char * *argv,
  char * *envp);

 long sys_perf_event_open(
  struct perf_event_attr *attr_uptr,
  pid_t pid, int cpu, int group_fd, unsigned long flags);

 long sys_mmap_pgoff(unsigned long addr, unsigned long len,
   unsigned long prot, unsigned long flags,
   unsigned long fd, unsigned long pgoff);
 long sys_old_mmap(struct mmap_arg_struct *arg);
 long sys_name_to_handle_at(int dfd, char *name,
          struct file_handle *handle,
          int *mnt_id, int flag);
 long sys_open_by_handle_at(int mountdirfd,
          struct file_handle *handle,
          int flags);
 long sys_setns(int fd, int nstype);
 long sys_process_vm_readv(pid_t pid,
         struct iovec *lvec,
         unsigned long liovcnt,
         struct iovec *rvec,
         unsigned long riovcnt,
         unsigned long flags);
 long sys_process_vm_writev(pid_t pid,
          struct iovec *lvec,
          unsigned long liovcnt,
          struct iovec *rvec,
          unsigned long riovcnt,
          unsigned long flags);

 long sys_kcmp(pid_t pid1, pid_t pid2, int type,
    unsigned long idx1, unsigned long idx2);
 long sys_finit_module(int fd, char *uargs, int flags);


enum {
 Audit_equal,
 Audit_not_equal,
 Audit_bitmask,
 Audit_bittest,
 Audit_lt,
 Audit_gt,
 Audit_le,
 Audit_ge,
 Audit_bad
};
struct audit_status {
  template <typename, int = 0> struct __BYPASSaudit_status {};
  template <typename, int> friend struct __BYPASSaudit_status;
 __u32 mask;
 __u32 enabled;
 __u32 failure;
 __u32 pid;
 __u32 rate_limit;
 __u32 backlog_limit;
 __u32 lost;
 __u32 backlog;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct audit_features {
  template <typename, int = 0> struct __BYPASSaudit_features {};
  template <typename, int> friend struct __BYPASSaudit_features;

 __u32 vers;
 __u32 mask;
 __u32 features;
 __u32 lock;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct audit_tty_status {
  template <typename, int = 0> struct __BYPASSaudit_tty_status {};
  template <typename, int> friend struct __BYPASSaudit_tty_status;
 __u32 enabled;
 __u32 log_passwd;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct audit_rule_data {
  template <typename, int = 0> struct __BYPASSaudit_rule_data {};
  template <typename, int> friend struct __BYPASSaudit_rule_data;
 __u32 flags;
 __u32 action;
 __u32 field_count;
 __u32 mask[64];
 __u32 fields[64];
 __u32 values[64];
 __u32 fieldflags[64];
 __u32 buflen;
 char buf[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct audit_rule {
  template <typename, int = 0> struct __BYPASSaudit_rule {};
  template <typename, int> friend struct __BYPASSaudit_rule;
 __u32 flags;
 __u32 action;
 __u32 field_count;
 __u32 mask[64];
 __u32 fields[64];
 __u32 values[64];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct audit_sig_info {
  template <typename, int = 0> struct __BYPASSaudit_sig_info {};
  template <typename, int> friend struct __BYPASSaudit_sig_info;
 uid_t uid;
 pid_t pid;
 char ctx[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct audit_buffer;
struct audit_context;
struct inode;
struct netlink_skb_parms;
struct path;
struct linux_binprm;
struct mq_attr;
struct mqstat;
struct audit_watch;
struct audit_tree;

struct audit_krule {
  template <typename, int = 0> struct __BYPASSaudit_krule {};
  template <typename, int> friend struct __BYPASSaudit_krule;
 int vers_ops;
 u32 flags;
 u32 listnr;
 u32 action;
 u32 mask[64];
 u32 buflen;
 u32 field_count;
 char *filterkey;
 struct audit_field *fields;
 struct audit_field *arch_f;
 struct audit_field *inode_f;
 struct audit_watch *watch;
 struct audit_tree *tree;
 struct list_head rlist;
 struct list_head list;
 u64 prio;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct audit_field {
  template <typename, int = 0> struct __BYPASSaudit_field {};
  template <typename, int> friend struct __BYPASSaudit_field;
 u32 type;
 u32 val;
 kuid_t uid;
 kgid_t gid;
 u32 op;
 char *lsm_str;
 void *lsm_rule;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int is_audit_feature_set(int which);

extern int __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) audit_register_class(int _class, unsigned *list);
extern int audit_classify_syscall(int abi, unsigned syscall);
extern int audit_classify_arch(int arch);
struct filename;

extern void audit_log_session_info(struct audit_buffer *ab);




extern int audit_alloc(struct task_struct *task);
extern void __audit_free(struct task_struct *task);
extern void __audit_syscall_entry(int arch,
      int major, unsigned long a0, unsigned long a1,
      unsigned long a2, unsigned long a3);
extern void __audit_syscall_exit(int ret_success, long ret_value);
extern struct filename *__audit_reusename( char *uptr);
extern void __audit_getname(struct filename *name);
extern void audit_putname(struct filename *name);



extern void __audit_inode(struct filename *name, struct dentry *dentry,
    unsigned int flags);
extern void __audit_inode_child( struct inode *parent,
    struct dentry *dentry,
    unsigned char type);
extern void __audit_seccomp(unsigned long syscall, long signr, int code);
extern void __audit_ptrace(struct task_struct *t);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct13audit_contextE_2299_0 {
  typedef TJP__ZN11task_struct13audit_contextE_2299_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline audit_context * __get__ZN11task_struct13audit_contextE_2299(audit_context * *source) {
  ::audit_context *__result_buffer;
  typedef TJP__ZN11task_struct13audit_contextE_2299_0< ::audit_context *, ::task_struct , ::audit_context * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::audit_context *&)__result_buffer;
}
static inline int audit_dummy_context(void)
{
 void *p = __get__ZN11task_struct13audit_contextE_2299(&get_current()->audit_context);
 return !p || *(int *)p;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct13audit_contextE_2300_0 {
  typedef TJP__ZN11task_struct13audit_contextE_2300_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline audit_context * __get__ZN11task_struct13audit_contextE_2300(audit_context * *source) {
  ::audit_context *__result_buffer;
  typedef TJP__ZN11task_struct13audit_contextE_2300_0< ::audit_context *, ::task_struct , ::audit_context * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::audit_context *&)__result_buffer;
}
static inline void audit_free(struct task_struct *task)
{
 if (__builtin_expect(!!(__get__ZN11task_struct13audit_contextE_2300(&task->audit_context)), 0))
  __audit_free(task);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct13audit_contextE_2301_0 {
  typedef TJP__ZN11task_struct13audit_contextE_2301_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline audit_context * __get__ZN11task_struct13audit_contextE_2301(audit_context * *source) {
  ::audit_context *__result_buffer;
  typedef TJP__ZN11task_struct13audit_contextE_2301_0< ::audit_context *, ::task_struct , ::audit_context * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::audit_context *&)__result_buffer;
}
static inline void audit_syscall_entry(int arch, int major, unsigned long a0,
           unsigned long a1, unsigned long a2,
           unsigned long a3)
{
 if (__builtin_expect(!!(__get__ZN11task_struct13audit_contextE_2301(&get_current()->audit_context)), 0))
  __audit_syscall_entry(arch, major, a0, a1, a2, a3);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct13audit_contextE_2302_0 {
  typedef TJP__ZN11task_struct13audit_contextE_2302_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline audit_context * __get__ZN11task_struct13audit_contextE_2302(audit_context * *source) {
  ::audit_context *__result_buffer;
  typedef TJP__ZN11task_struct13audit_contextE_2302_0< ::audit_context *, ::task_struct , ::audit_context * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::audit_context *&)__result_buffer;
}
static inline void audit_syscall_exit(void *pt_regs)
{
 if (__builtin_expect(!!(__get__ZN11task_struct13audit_contextE_2302(&get_current()->audit_context)), 0)) {




  int success = (!__builtin_expect(!!(((unsigned long)(regs_return_value((struct pt_regs *)pt_regs))) >= (unsigned long)-4095), 0));
  long return_code = regs_return_value((struct pt_regs *)pt_regs);


  __audit_syscall_exit(success, return_code);
 }
}
static inline struct filename *audit_reusename( char *name)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  return __audit_reusename(name);
 return 0;
}
static inline void audit_getname(struct filename *name)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_getname(name);
}
static inline void audit_inode(struct filename *name,
    struct dentry *dentry,
    unsigned int parent) {
 if (__builtin_expect(!!(!audit_dummy_context()), 0)) {
  unsigned int flags = 0;
  if (parent)
   flags |= 1;
  __audit_inode(name, dentry, flags);
 }
}
static inline void audit_inode_parent_hidden(struct filename *name,
      struct dentry *dentry)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_inode(name, dentry,
    1 | 2);
}
static inline void audit_inode_child( struct inode *parent,
         struct dentry *dentry,
         unsigned char type) {
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_inode_child(parent, dentry, type);
}
void audit_core_dumps(long signr);

static inline void audit_seccomp(unsigned long syscall, long signr, int code)
{

 if (signr || __builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_seccomp(syscall, signr, code);
}

static inline void audit_ptrace(struct task_struct *t)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_ptrace(t);
}


extern unsigned int audit_serial(void);
extern int auditsc_get_stamp(struct audit_context *ctx,
         struct timespec *t, unsigned int *serial);
extern int audit_set_loginuid(kuid_t loginuid);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct8loginuidE_2303_0 {
  typedef TJP__ZN11task_struct8loginuidE_2303_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline kuid_t __get__ZN11task_struct8loginuidE_2303(kuid_t *source) {
  AC::ResultBuffer< ::kuid_t  > __result_buffer;
  typedef TJP__ZN11task_struct8loginuidE_2303_0< ::kuid_t , ::task_struct , ::kuid_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::kuid_t &)__result_buffer;
}
static inline kuid_t audit_get_loginuid(struct task_struct *tsk)
{
 return __get__ZN11task_struct8loginuidE_2303(&tsk->loginuid);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct9sessionidE_2304_0 {
  typedef TJP__ZN11task_struct9sessionidE_2304_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN11task_struct9sessionidE_2304(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN11task_struct9sessionidE_2304_0< unsigned int , ::task_struct , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int audit_get_sessionid(struct task_struct *tsk)
{
 return __get__ZN11task_struct9sessionidE_2304(&tsk->sessionid);
}

extern void __audit_ipc_obj(struct kern_ipc_perm *ipcp);
extern void __audit_ipc_set_perm(unsigned long qbytes, uid_t uid, gid_t gid, umode_t mode);
extern void __audit_bprm(struct linux_binprm *bprm);
extern int __audit_socketcall(int nargs, unsigned long *args);
extern int __audit_sockaddr(int len, void *addr);
extern void __audit_fd_pair(int fd1, int fd2);
extern void __audit_mq_open(int oflag, umode_t mode, struct mq_attr *attr);
extern void __audit_mq_sendrecv(mqd_t mqdes, size_t msg_len, unsigned int msg_prio, struct timespec *abs_timeout);
extern void __audit_mq_notify(mqd_t mqdes, struct sigevent *notification);
extern void __audit_mq_getsetattr(mqd_t mqdes, struct mq_attr *mqstat);
extern int __audit_log_bprm_fcaps(struct linux_binprm *bprm,
      struct cred *_new,
      struct cred *old);
extern void __audit_log_capset(pid_t pid, struct cred *_new, struct cred *old);
extern void __audit_mmap_fd(int fd, int flags);

static inline void audit_ipc_obj(struct kern_ipc_perm *ipcp)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_ipc_obj(ipcp);
}
static inline void audit_fd_pair(int fd1, int fd2)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_fd_pair(fd1, fd2);
}
static inline void audit_ipc_set_perm(unsigned long qbytes, uid_t uid, gid_t gid, umode_t mode)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_ipc_set_perm(qbytes, uid, gid, mode);
}
static inline void audit_bprm(struct linux_binprm *bprm)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_bprm(bprm);
}
static inline int audit_socketcall(int nargs, unsigned long *args)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  return __audit_socketcall(nargs, args);
 return 0;
}
static inline int audit_sockaddr(int len, void *addr)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  return __audit_sockaddr(len, addr);
 return 0;
}
static inline void audit_mq_open(int oflag, umode_t mode, struct mq_attr *attr)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_mq_open(oflag, mode, attr);
}
static inline void audit_mq_sendrecv(mqd_t mqdes, size_t msg_len, unsigned int msg_prio, struct timespec *abs_timeout)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_mq_sendrecv(mqdes, msg_len, msg_prio, abs_timeout);
}
static inline void audit_mq_notify(mqd_t mqdes, struct sigevent *notification)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_mq_notify(mqdes, notification);
}
static inline void audit_mq_getsetattr(mqd_t mqdes, struct mq_attr *mqstat)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_mq_getsetattr(mqdes, mqstat);
}

static inline int audit_log_bprm_fcaps(struct linux_binprm *bprm,
           struct cred *_new,
           struct cred *old)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  return __audit_log_bprm_fcaps(bprm, _new, old);
 return 0;
}

static inline void audit_log_capset(pid_t pid, struct cred *_new,
       struct cred *old)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_log_capset(pid, _new, old);
}

static inline void audit_mmap_fd(int fd, int flags)
{
 if (__builtin_expect(!!(!audit_dummy_context()), 0))
  __audit_mmap_fd(fd, flags);
}

extern int audit_n_rules;
extern int audit_signals;
static inline bool audit_loginuid_set(struct task_struct *tsk)
{
 return uid_valid(audit_get_loginuid(tsk));
}




extern __attribute__((format(printf, 4, 5)))
void audit_log(struct audit_context *ctx, gfp_t gfp_mask, int type,
        char *fmt, ...);

extern struct audit_buffer *audit_log_start(struct audit_context *ctx, gfp_t gfp_mask, int type);
extern __attribute__((format(printf, 2, 3)))
void audit_log_format(struct audit_buffer *ab, char *fmt, ...);
extern void audit_log_end(struct audit_buffer *ab);
extern int audit_string_contains_control( char *string,
         size_t len);
extern void audit_log_n_hex(struct audit_buffer *ab,
       unsigned char *buf,
       size_t len);
extern void audit_log_n_string(struct audit_buffer *ab,
            char *buf,
            size_t n);
extern void audit_log_n_untrustedstring(struct audit_buffer *ab,
       char *string,
       size_t n);
extern void audit_log_untrustedstring(struct audit_buffer *ab,
            char *string);
extern void audit_log_d_path(struct audit_buffer *ab,
          char *prefix,
          struct path *path);
extern void audit_log_key(struct audit_buffer *ab,
       char *key);
extern void audit_log_link_denied( char *operation,
        struct path *link);
extern void audit_log_lost( char *message);

extern void audit_log_secctx(struct audit_buffer *ab, u32 secid);





extern int audit_log_task_context(struct audit_buffer *ab);
extern void audit_log_task_info(struct audit_buffer *ab,
    struct task_struct *tsk);

extern int audit_update_lsm_rules(void);


extern int audit_filter_user(int type);
extern int audit_filter_type(int type);
extern int audit_receive_filter(int type, int pid, int seq,
    void *data, size_t datasz);
extern int audit_enabled;
static inline void audit_log_string(struct audit_buffer *ab, char *buf)
{
 audit_log_n_string(ab, buf, strlen(buf));
}
struct iw_param
{
  template <typename, int = 0> struct __BYPASSiw_param {};
  template <typename, int> friend struct __BYPASSiw_param;
  __s32 value;
  __u8 fixed;
  __u8 disabled;
  __u16 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct iw_point
{
  template <typename, int = 0> struct __BYPASSiw_point {};
  template <typename, int> friend struct __BYPASSiw_point;
  void *pointer;
  __u16 length;
  __u16 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_freq
{
  template <typename, int = 0> struct __BYPASSiw_freq {};
  template <typename, int> friend struct __BYPASSiw_freq;
 __s32 m;
 __s16 e;
 __u8 i;
 __u8 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct iw_quality
{
  template <typename, int = 0> struct __BYPASSiw_quality {};
  template <typename, int> friend struct __BYPASSiw_quality;
 __u8 qual;

 __u8 level;
 __u8 noise;
 __u8 updated;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_discarded
{
  template <typename, int = 0> struct __BYPASSiw_discarded {};
  template <typename, int> friend struct __BYPASSiw_discarded;
 __u32 nwid;
 __u32 code;
 __u32 fragment;
 __u32 retries;
 __u32 misc;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct iw_missed
{
  template <typename, int = 0> struct __BYPASSiw_missed {};
  template <typename, int> friend struct __BYPASSiw_missed;
 __u32 beacon;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct iw_thrspy
{
  template <typename, int = 0> struct __BYPASSiw_thrspy {};
  template <typename, int> friend struct __BYPASSiw_thrspy;
 struct sockaddr addr;
 struct iw_quality qual;
 struct iw_quality low;
 struct iw_quality high;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_scan_req
{
  template <typename, int = 0> struct __BYPASSiw_scan_req {};
  template <typename, int> friend struct __BYPASSiw_scan_req;
 __u8 scan_type;
 __u8 essid_len;
 __u8 num_channels;

 __u8 flags;


 struct sockaddr bssid;
 __u8 essid[32];
 __u32 min_channel_time;
 __u32 max_channel_time;

 struct iw_freq channel_list[32];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_encode_ext
{
  template <typename, int = 0> struct __BYPASSiw_encode_ext {};
  template <typename, int> friend struct __BYPASSiw_encode_ext;
 __u32 ext_flags;
 __u8 tx_seq[8];
 __u8 rx_seq[8];
 struct sockaddr addr;


 __u16 alg;
 __u16 key_len;
 __u8 key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct iw_mlme
{
  template <typename, int = 0> struct __BYPASSiw_mlme {};
  template <typename, int> friend struct __BYPASSiw_mlme;
 __u16 cmd;
 __u16 reason_code;
 struct sockaddr addr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_pmksa
{
  template <typename, int = 0> struct __BYPASSiw_pmksa {};
  template <typename, int> friend struct __BYPASSiw_pmksa;
 __u32 cmd;
 struct sockaddr bssid;
 __u8 pmkid[16];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct iw_michaelmicfailure
{
  template <typename, int = 0> struct __BYPASSiw_michaelmicfailure {};
  template <typename, int> friend struct __BYPASSiw_michaelmicfailure;
 __u32 flags;
 struct sockaddr src_addr;
 __u8 tsc[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct iw_pmkid_cand
{
  template <typename, int = 0> struct __BYPASSiw_pmkid_cand {};
  template <typename, int> friend struct __BYPASSiw_pmkid_cand;
 __u32 flags;
 __u32 index;

 struct sockaddr bssid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct iw_statistics
{
  template <typename, int = 0> struct __BYPASSiw_statistics {};
  template <typename, int> friend struct __BYPASSiw_statistics;
 __u16 status;


 struct iw_quality qual;

 struct iw_discarded discard;
 struct iw_missed miss;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
union iwreq_data
{

 char name[16];



 struct iw_point essid;
 struct iw_param nwid;
 struct iw_freq freq;



 struct iw_param sens;
 struct iw_param bitrate;
 struct iw_param txpower;
 struct iw_param rts;
 struct iw_param frag;
 __u32 mode;
 struct iw_param retry;

 struct iw_point encoding;
 struct iw_param power;
 struct iw_quality qual;

 struct sockaddr ap_addr;
 struct sockaddr addr;

 struct iw_param param;
 struct iw_point data;
};







struct iwreq
{
  template <typename, int = 0> struct __BYPASSiwreq {};
  template <typename, int> friend struct __BYPASSiwreq;
 union
 {
  char ifrn_name[16];
 } ifr_ifrn;


 union iwreq_data u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_range
{
  template <typename, int = 0> struct __BYPASSiw_range {};
  template <typename, int> friend struct __BYPASSiw_range;

 __u32 throughput;
 __u32 min_nwid;
 __u32 max_nwid;


 __u16 old_num_channels;
 __u8 old_num_frequency;


 __u8 scan_capa;


 __u32 event_capa[6];


 __s32 sensitivity;






 struct iw_quality max_qual;
 struct iw_quality avg_qual;


 __u8 num_bitrates;
 __s32 bitrate[32];


 __s32 min_rts;
 __s32 max_rts;


 __s32 min_frag;
 __s32 max_frag;


 __s32 min_pmp;
 __s32 max_pmp;
 __s32 min_pmt;
 __s32 max_pmt;
 __u16 pmp_flags;
 __u16 pmt_flags;
 __u16 pm_capa;


 __u16 encoding_size[8];
 __u8 num_encoding_sizes;
 __u8 max_encoding_tokens;

 __u8 encoding_login_index;


 __u16 txpower_capa;
 __u8 num_txpower;
 __s32 txpower[8];


 __u8 we_version_compiled;
 __u8 we_version_source;


 __u16 retry_capa;
 __u16 retry_flags;
 __u16 r_time_flags;
 __s32 min_retry;
 __s32 max_retry;
 __s32 min_r_time;
 __s32 max_r_time;


 __u16 num_channels;
 __u8 num_frequency;
 struct iw_freq freq[32];



 __u32 enc_capa;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct iw_priv_args
{
  template <typename, int = 0> struct __BYPASSiw_priv_args {};
  template <typename, int> friend struct __BYPASSiw_priv_args;
 __u32 cmd;
 __u16 set_args;
 __u16 get_args;
 char name[16];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_event
{
  template <typename, int = 0> struct __BYPASSiw_event {};
  template <typename, int> friend struct __BYPASSiw_event;
 __u16 len;
 __u16 cmd;
 union iwreq_data u;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct compat_iw_point {
  template <typename, int = 0> struct __BYPASScompat_iw_point {};
  template <typename, int> friend struct __BYPASScompat_iw_point;
 compat_caddr_t pointer;
 __u16 length;
 __u16 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct __compat_iw_event {
  template <typename, int = 0> struct __BYPASS__compat_iw_event {};
  template <typename, int> friend struct __BYPASS__compat_iw_event;
 __u16 len;
 __u16 cmd;
 compat_caddr_t pointer;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};











struct sock;





struct compat_msghdr {
  template <typename, int = 0> struct __BYPASScompat_msghdr {};
  template <typename, int> friend struct __BYPASScompat_msghdr;
 compat_uptr_t msg_name;
 compat_int_t msg_namelen;
 compat_uptr_t msg_iov;
 compat_size_t msg_iovlen;
 compat_uptr_t msg_control;
 compat_size_t msg_controllen;
 compat_uint_t msg_flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_mmsghdr {
  template <typename, int = 0> struct __BYPASScompat_mmsghdr {};
  template <typename, int> friend struct __BYPASScompat_mmsghdr;
 struct compat_msghdr msg_hdr;
 compat_uint_t msg_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct compat_cmsghdr {
  template <typename, int = 0> struct __BYPASScompat_cmsghdr {};
  template <typename, int> friend struct __BYPASScompat_cmsghdr;
 compat_size_t cmsg_len;
 compat_int_t cmsg_level;
 compat_int_t cmsg_type;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int compat_sock_get_timestamp(struct sock *, struct timeval *);
int compat_sock_get_timestampns(struct sock *, struct timespec *);
int get_compat_msghdr(struct msghdr *, struct compat_msghdr *);
int verify_compat_iovec(struct msghdr *, struct iovec *,
   struct __kernel_sockaddr_storage *, int);
 long compat_sys_sendmsg(int, struct compat_msghdr *,
       unsigned int);
 long compat_sys_sendmmsg(int, struct compat_mmsghdr *,
        unsigned int, unsigned int);
 long compat_sys_recvmsg(int, struct compat_msghdr *,
       unsigned int);
 long compat_sys_recvmmsg(int, struct compat_mmsghdr *,
        unsigned int, unsigned int,
        struct compat_timespec *);
 long compat_sys_getsockopt(int, int, int, char *,
          int *);
int put_cmsg_compat(struct msghdr*, int, int, int, void *);

int cmsghdr_from_user_compat_to_kern(struct msghdr *, struct sock *,
         unsigned char *, int);

int compat_mc_setsockopt(struct sock *, int, int, char *, unsigned int,
    int (*)(struct sock *, int, int, char *,
     unsigned int));
int compat_mc_getsockopt(struct sock *, int, int, char *, int *,
    int (*)(struct sock *, int, int, char *,
     int *));



struct iw_request_info {
  template <typename, int = 0> struct __BYPASSiw_request_info {};
  template <typename, int> friend struct __BYPASSiw_request_info;
 __u16 cmd;
 __u16 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct net_device;





typedef int (*iw_handler)(struct net_device *dev, struct iw_request_info *info,
     union iwreq_data *wrqu, char *extra);







struct iw_handler_def {
  template <typename, int = 0> struct __BYPASSiw_handler_def {};
  template <typename, int> friend struct __BYPASSiw_handler_def;




 iw_handler * standard;


 __u16 num_standard;


 __u16 num_private;

 __u16 num_private_args;



 iw_handler * _private;




 struct iw_priv_args * private_args;





 struct iw_statistics* (*get_wireless_stats)(struct net_device *dev);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_ioctl_description {
  template <typename, int = 0> struct __BYPASSiw_ioctl_description {};
  template <typename, int> friend struct __BYPASSiw_ioctl_description;
 __u8 header_type;
 __u8 token_type;
 __u16 token_size;
 __u16 min_tokens;
 __u16 max_tokens;
 __u32 flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct iw_spy_data {
  template <typename, int = 0> struct __BYPASSiw_spy_data {};
  template <typename, int> friend struct __BYPASSiw_spy_data;

 int spy_number;
 u_char spy_address[8][6];
 struct iw_quality spy_stat[8];

 struct iw_quality spy_thr_low;
 struct iw_quality spy_thr_high;
 u_char spy_thr_under[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct libipw_device;

struct iw_public_data {
  template <typename, int = 0> struct __BYPASSiw_public_data {};
  template <typename, int> friend struct __BYPASSiw_public_data;

 struct iw_spy_data * spy_data;

 struct libipw_device * libipw;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
int dev_get_wireless_info(char *buffer, char **start, off_t offset, int length);




void wireless_send_event(struct net_device *dev, unsigned int cmd,
    union iwreq_data *wrqu, char *extra);





int iw_handler_set_spy(struct net_device *dev, struct iw_request_info *info,
         union iwreq_data *wrqu, char *extra);

int iw_handler_get_spy(struct net_device *dev, struct iw_request_info *info,
         union iwreq_data *wrqu, char *extra);

int iw_handler_set_thrspy(struct net_device *dev, struct iw_request_info *info,
     union iwreq_data *wrqu, char *extra);

int iw_handler_get_thrspy(struct net_device *dev, struct iw_request_info *info,
     union iwreq_data *wrqu, char *extra);

void wireless_spy_update(struct net_device *dev, unsigned char *address,
    struct iw_quality *wstats);






static inline int iwe_stream_lcp_len(struct iw_request_info *info)
{

 if (info->flags & 0x0001)
  return ((size_t) &((struct __compat_iw_event *)0)->pointer);

 return (sizeof(struct iw_event) - sizeof(union iwreq_data));
}

static inline int iwe_stream_point_len(struct iw_request_info *info)
{

 if (info->flags & 0x0001)
  return (((size_t) &((struct __compat_iw_event *)0)->pointer) + sizeof(struct compat_iw_point) - ((size_t) &((struct compat_iw_point *)0)->length));

 return ((sizeof(struct iw_event) - sizeof(union iwreq_data)) + sizeof(struct iw_point) - (((char *) &(((struct iw_point *) 0)->length)) - (char *) 0));
}

static inline int iwe_stream_event_len_adjust(struct iw_request_info *info,
           int event_len)
{

 if (info->flags & 0x0001) {
  event_len -= (sizeof(struct iw_event) - sizeof(union iwreq_data));
  event_len += ((size_t) &((struct __compat_iw_event *)0)->pointer);
 }


 return event_len;
}





static inline char *
iwe_stream_add_event(struct iw_request_info *info, char *stream, char *ends,
       struct iw_event *iwe, int event_len)
{
 int lcp_len = iwe_stream_lcp_len(info);

 event_len = iwe_stream_event_len_adjust(info, event_len);


 if(__builtin_expect(!!((stream + event_len) < ends), 1)) {
  iwe->len = event_len;

  memcpy(stream, (char *) iwe, (4));
  memcpy(stream + lcp_len, &iwe->u,
         event_len - lcp_len);
  stream += event_len;
 }
 return stream;
}






static inline char *
iwe_stream_add_point(struct iw_request_info *info, char *stream, char *ends,
       struct iw_event *iwe, char *extra)
{
 int event_len = iwe_stream_point_len(info) + iwe->u.data.length;
 int point_len = iwe_stream_point_len(info);
 int lcp_len = iwe_stream_lcp_len(info);


 if(__builtin_expect(!!((stream + event_len) < ends), 1)) {
  iwe->len = event_len;
  memcpy(stream, (char *) iwe, (4));
  memcpy(stream + lcp_len,
         ((char *) &iwe->u) + (((char *) &(((struct iw_point *) 0)->length)) - (char *) 0),
         ((4) + 4) - (4));
  memcpy(stream + point_len, extra, iwe->u.data.length);
  stream += event_len;
 }
 return stream;
}







static inline char *
iwe_stream_add_value(struct iw_request_info *info, char *event, char *value,
       char *ends, struct iw_event *iwe, int event_len)
{
 int lcp_len = iwe_stream_lcp_len(info);


 event_len -= (sizeof(struct iw_event) - sizeof(union iwreq_data));


 if(__builtin_expect(!!((value + event_len) < ends), 1)) {

  memcpy(value, &iwe->u, event_len);
  value += event_len;

  iwe->len = value - event;
  memcpy(event, (char *) iwe, lcp_len);
 }
 return value;
}

struct net;


int wext_handle_ioctl(struct net *net, struct ifreq *ifr, unsigned int cmd,
        void *arg);
int compat_wext_handle_ioctl(struct net *net, unsigned int cmd,
        unsigned long arg);

struct iw_statistics *get_wireless_stats(struct net_device *dev);
int call_commit_handler(struct net_device *dev);
int wext_proc_init(struct net *net);
void wext_proc_exit(struct net *net);
int ioctl_private_call(struct net_device *dev, struct iwreq *iwr,
         unsigned int cmd, struct iw_request_info *info,
         iw_handler handler);
int compat_private_call(struct net_device *dev, struct iwreq *iwr,
   unsigned int cmd, struct iw_request_info *info,
   iw_handler handler);
int iw_handler_get_private(struct net_device * dev,
      struct iw_request_info * info,
      union iwreq_data * wrqu,
      char * extra);
struct cgroup_cls_state
{
  template <typename, int = 0> struct __BYPASScgroup_cls_state {};
  template <typename, int> friend struct __BYPASScgroup_cls_state;
 struct cgroup_subsys_state css;
 u32 classid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void sock_update_classid(struct sock *sk);
static inline u32 task_cls_classid(struct task_struct *p)
{
 struct cgroup_subsys_state *css;
 u32 classid = 0;

 if (((preempt_count() & ((((1UL << (4))-1) << ((0 + 8) + 8)) | (((1UL << (8))-1) << (0 + 8)) | (((1UL << (1))-1) << (((0 + 8) + 8) + 4))))))
  return 0;

 ;
 css = task_css(p, net_cls_subsys_id);
 if (css)
  classid = ({ typeof( ((struct cgroup_cls_state *)0)->css ) *__mptr = (css); (struct cgroup_cls_state *)( (char *)__mptr - ((size_t) &((struct cgroup_cls_state *)0)->css) );})
                                        ->classid;
 ;

 return classid;
}

struct mem_cgroup;
struct page_cgroup;
struct page;
struct mm_struct;
struct kmem_cache;





enum mem_cgroup_stat_index {



 MEM_CGROUP_STAT_CACHE,
 MEM_CGROUP_STAT_RSS,
 MEM_CGROUP_STAT_RSS_HUGE,
 MEM_CGROUP_STAT_FILE_MAPPED,
 MEM_CGROUP_STAT_WRITEBACK,
 MEM_CGROUP_STAT_SWAP,
 MEM_CGROUP_STAT_NSTATS,
};

struct mem_cgroup_reclaim_cookie {
  template <typename, int = 0> struct __BYPASSmem_cgroup_reclaim_cookie {};
  template <typename, int> friend struct __BYPASSmem_cgroup_reclaim_cookie;
 struct zone *zone;
 int priority;
 unsigned int generation;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern int mem_cgroup_newpage_charge(struct page *page, struct mm_struct *mm,
    gfp_t gfp_mask);

extern int mem_cgroup_try_charge_swapin(struct mm_struct *mm,
  struct page *page, gfp_t mask, struct mem_cgroup **memcgp);
extern void mem_cgroup_commit_charge_swapin(struct page *page,
     struct mem_cgroup *memcg);
extern void mem_cgroup_cancel_charge_swapin(struct mem_cgroup *memcg);

extern int mem_cgroup_cache_charge(struct page *page, struct mm_struct *mm,
     gfp_t gfp_mask);

struct lruvec *mem_cgroup_zone_lruvec(struct zone *, struct mem_cgroup *);
struct lruvec *mem_cgroup_page_lruvec(struct page *, struct zone *);


extern void mem_cgroup_uncharge_start(void);
extern void mem_cgroup_uncharge_end(void);

extern void mem_cgroup_uncharge_page(struct page *page);
extern void mem_cgroup_uncharge_cache_page(struct page *page);

bool __mem_cgroup_same_or_subtree( struct mem_cgroup *root_memcg,
      struct mem_cgroup *memcg);
bool task_in_mem_cgroup(struct task_struct *task,
   struct mem_cgroup *memcg);

extern struct mem_cgroup *try_get_mem_cgroup_from_page(struct page *page);
extern struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p);
extern struct mem_cgroup *try_get_mem_cgroup_from_mm(struct mm_struct *mm);

extern struct mem_cgroup *parent_mem_cgroup(struct mem_cgroup *memcg);
extern struct mem_cgroup *mem_cgroup_from_css(struct cgroup_subsys_state *css);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9mm_struct5ownerE_2318_0 {
  typedef TJP__ZN9mm_struct5ownerE_2318_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct * __get__ZN9mm_struct5ownerE_2318(task_struct * *source) {
  ::task_struct *__result_buffer;
  typedef TJP__ZN9mm_struct5ownerE_2318_0< ::task_struct *, ::mm_struct , ::task_struct * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct *&)__result_buffer;
}
static inline
bool mm_match_cgroup( struct mm_struct *mm, struct mem_cgroup *memcg)
{
 struct mem_cgroup *task_memcg;
 bool match;

 ;
 task_memcg = mem_cgroup_from_task((__get__ZN9mm_struct5ownerE_2318(&mm->owner)));
 match = __mem_cgroup_same_or_subtree(memcg, task_memcg);
 ;
 return match;
}

extern struct cgroup_subsys_state *mem_cgroup_css(struct mem_cgroup *memcg);

extern void
mem_cgroup_prepare_migration(struct page *page, struct page *newpage,
        struct mem_cgroup **memcgp);
extern void mem_cgroup_end_migration(struct mem_cgroup *memcg,
 struct page *oldpage, struct page *newpage, bool migration_ok);

struct mem_cgroup *mem_cgroup_iter(struct mem_cgroup *,
       struct mem_cgroup *,
       struct mem_cgroup_reclaim_cookie *);
void mem_cgroup_iter_break(struct mem_cgroup *, struct mem_cgroup *);




int mem_cgroup_inactive_anon_is_low(struct lruvec *lruvec);
int mem_cgroup_select_victim_node(struct mem_cgroup *memcg);
unsigned long mem_cgroup_get_lru_size(struct lruvec *lruvec, enum lru_list);
void mem_cgroup_update_lru_size(struct lruvec *, enum lru_list, int);
extern void mem_cgroup_print_oom_info(struct mem_cgroup *memcg,
     struct task_struct *p);
extern void mem_cgroup_replace_page_cache(struct page *oldpage,
     struct page *newpage);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct9memcg_oomE_2320_0 {
  typedef TJP__ZN11task_struct9memcg_oomE_2320_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct::memcg_oom_info __get__ZN11task_struct9memcg_oomE_2320(task_struct::memcg_oom_info *source) {
  AC::ResultBuffer< ::task_struct::memcg_oom_info  > __result_buffer;
  typedef TJP__ZN11task_struct9memcg_oomE_2320_0< ::task_struct::memcg_oom_info , ::task_struct , ::task_struct::memcg_oom_info  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct::memcg_oom_info &)__result_buffer;
}
static inline void mem_cgroup_oom_enable(void)
{
 (__get__ZN11task_struct9memcg_oomE_2320(&get_current()->memcg_oom).may_oom);
 get_current()->memcg_oom.may_oom = 1;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct9memcg_oomE_2322_0 {
  typedef TJP__ZN11task_struct9memcg_oomE_2322_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct::memcg_oom_info __get__ZN11task_struct9memcg_oomE_2322(task_struct::memcg_oom_info *source) {
  AC::ResultBuffer< ::task_struct::memcg_oom_info  > __result_buffer;
  typedef TJP__ZN11task_struct9memcg_oomE_2322_0< ::task_struct::memcg_oom_info , ::task_struct , ::task_struct::memcg_oom_info  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct::memcg_oom_info &)__result_buffer;
}
static inline void mem_cgroup_oom_disable(void)
{
 (!__get__ZN11task_struct9memcg_oomE_2322(&get_current()->memcg_oom).may_oom);
 get_current()->memcg_oom.may_oom = 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11task_struct9memcg_oomE_2324_0 {
  typedef TJP__ZN11task_struct9memcg_oomE_2324_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline task_struct::memcg_oom_info __get__ZN11task_struct9memcg_oomE_2324(task_struct::memcg_oom_info *source) {
  AC::ResultBuffer< ::task_struct::memcg_oom_info  > __result_buffer;
  typedef TJP__ZN11task_struct9memcg_oomE_2324_0< ::task_struct::memcg_oom_info , ::task_struct , ::task_struct::memcg_oom_info  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::task_struct::memcg_oom_info &)__result_buffer;
}
static inline bool task_in_memcg_oom(struct task_struct *p)
{
 return __get__ZN11task_struct9memcg_oomE_2324(&p->memcg_oom).memcg;
}

bool mem_cgroup_oom_synchronize(bool wait);


extern int do_swap_account;


static inline bool mem_cgroup_disabled(void)
{
 if (mem_cgroup_subsys.disabled)
  return _true;
 return _false;
}

void __mem_cgroup_begin_update_page_stat(struct page *page, bool *locked,
      unsigned long *flags);

extern atomic_t memcg_moving;

static inline void mem_cgroup_begin_update_page_stat(struct page *page,
     bool *locked, unsigned long *flags)
{
 if (mem_cgroup_disabled())
  return;
 ;
 *locked = _false;
 if (atomic_read(&memcg_moving))
  __mem_cgroup_begin_update_page_stat(page, locked, flags);
}

void __mem_cgroup_end_update_page_stat(struct page *page,
    unsigned long *flags);
static inline void mem_cgroup_end_update_page_stat(struct page *page,
     bool *locked, unsigned long *flags)
{
 if (mem_cgroup_disabled())
  return;
 if (*locked)
  __mem_cgroup_end_update_page_stat(page, flags);
 ;
}

void mem_cgroup_update_page_stat(struct page *page,
     enum mem_cgroup_stat_index idx,
     int val);

static inline void mem_cgroup_inc_page_stat(struct page *page,
         enum mem_cgroup_stat_index idx)
{
 mem_cgroup_update_page_stat(page, idx, 1);
}

static inline void mem_cgroup_dec_page_stat(struct page *page,
         enum mem_cgroup_stat_index idx)
{
 mem_cgroup_update_page_stat(page, idx, -1);
}

unsigned long mem_cgroup_soft_limit_reclaim(struct zone *zone, int order,
      gfp_t gfp_mask,
      unsigned long *total_scanned);

void __mem_cgroup_count_vm_event(struct mm_struct *mm, enum vm_event_item idx);
static inline void mem_cgroup_count_vm_event(struct mm_struct *mm,
          enum vm_event_item idx)
{
 if (mem_cgroup_disabled())
  return;
 __mem_cgroup_count_vm_event(mm, idx);
}

void mem_cgroup_split_huge_fixup(struct page *head);
static inline bool
mem_cgroup_bad_page_check(struct page *page)
{
 return _false;
}

static inline void
mem_cgroup_print_bad_page(struct page *page)
{
}


enum {
 UNDER_LIMIT,
 SOFT_LIMIT,
 OVER_LIMIT,
};

struct sock;




static inline void sock_update_memcg(struct sock *sk)
{
}
static inline void sock_release_memcg(struct sock *sk)
{
}
static inline bool memcg_kmem_enabled(void)
{
 return _false;
}

static inline bool
memcg_kmem_newpage_charge(gfp_t gfp, struct mem_cgroup **memcg, int order)
{
 return _true;
}

static inline void memcg_kmem_uncharge_pages(struct page *page, int order)
{
}

static inline void
memcg_kmem_commit_charge(struct page *page, struct mem_cgroup *memcg, int order)
{
}

static inline int memcg_cache_id(struct mem_cgroup *memcg)
{
 return -1;
}

static inline int
memcg_register_cache(struct mem_cgroup *memcg, struct kmem_cache *s,
       struct kmem_cache *root_cache)
{
 return 0;
}

static inline void memcg_release_cache(struct kmem_cache *cachep)
{
}

static inline void memcg_cache_list_add(struct mem_cgroup *memcg,
     struct kmem_cache *s)
{
}

static inline struct kmem_cache *
memcg_kmem_get_cache(struct kmem_cache *cachep, gfp_t gfp)
{
 return cachep;
}

static inline void kmem_cache_destroy_memcg_children(struct kmem_cache *s)
{
}
struct res_counter {
  template <typename, int = 0> struct __BYPASSres_counter {};
  template <typename, int> friend struct __BYPASSres_counter;



 unsigned long long usage;



 unsigned long long max_usage;



 unsigned long long limit;



 unsigned long long soft_limit;



 unsigned long long failcnt;




 spinlock_t lock;



 struct res_counter *parent;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
u64 res_counter_read_u64(struct res_counter *counter, int member);

ssize_t res_counter_read(struct res_counter *counter, int member,
  char *buf, size_t nbytes, loff_t *pos,
  int (*read_strategy)(unsigned long long val, char *s));

int res_counter_memparse_write_strategy( char *buf,
     unsigned long long *res);





enum {
 RES_USAGE,
 RES_MAX_USAGE,
 RES_LIMIT,
 RES_FAILCNT,
 RES_SOFT_LIMIT,
};





void res_counter_init(struct res_counter *counter, struct res_counter *parent);
int res_counter_charge_locked(struct res_counter *counter,
        unsigned long val, bool force);
int res_counter_charge(struct res_counter *counter,
  unsigned long val, struct res_counter **limit_fail_at);
int res_counter_charge_nofail(struct res_counter *counter,
  unsigned long val, struct res_counter **limit_fail_at);
u64 res_counter_uncharge_locked(struct res_counter *counter, unsigned long val);
u64 res_counter_uncharge(struct res_counter *counter, unsigned long val);

u64 res_counter_uncharge_until(struct res_counter *counter,
          struct res_counter *top,
          unsigned long val);







static inline unsigned long long res_counter_margin(struct res_counter *cnt)
{
 unsigned long long margin;
 unsigned long flags;

 ;
 if (cnt->limit > cnt->usage)
  margin = cnt->limit - cnt->usage;
 else
  margin = 0;
 ;
 return margin;
}
static inline unsigned long long
res_counter_soft_limit_excess(struct res_counter *cnt)
{
 unsigned long long excess;
 unsigned long flags;

 ;
 if (cnt->usage <= cnt->soft_limit)
  excess = 0;
 else
  excess = cnt->usage - cnt->soft_limit;
 ;
 return excess;
}

static inline void res_counter_reset_max(struct res_counter *cnt)
{
 unsigned long flags;

 ;
 cnt->max_usage = cnt->usage;
 ;
}

static inline void res_counter_reset_failcnt(struct res_counter *cnt)
{
 unsigned long flags;

 ;
 cnt->failcnt = 0;
 ;
}

static inline int res_counter_set_limit(struct res_counter *cnt,
  unsigned long long limit)
{
 unsigned long flags;
 int ret = -16;

 ;
 if (cnt->usage <= limit) {
  cnt->limit = limit;
  ret = 0;
 }
 ;
 return ret;
}

static inline int
res_counter_set_soft_limit(struct res_counter *cnt,
    unsigned long long soft_limit)
{
 unsigned long flags;

 ;
 cnt->soft_limit = soft_limit;
 ;
 return 0;
}
struct kioctx;
struct kiocb;
typedef int (kiocb_cancel_fn)(struct kiocb *);

struct kiocb {
  template <typename, int = 0> struct __BYPASSkiocb {};
  template <typename, int> friend struct __BYPASSkiocb;
 struct file *ki_filp;
 struct kioctx *ki_ctx;
 kiocb_cancel_fn *ki_cancel;
 void *_private;

 union {
  void *user;
  struct task_struct *tsk;
 } ki_obj;

 __u64 ki_user_data;
 loff_t ki_pos;
 size_t ki_nbytes;

 struct list_head ki_list;






 struct eventfd_ctx *ki_eventfd;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline bool is_sync_kiocb(struct kiocb *kiocb)
{
 return kiocb->ki_ctx == 0;
}
extern ssize_t wait_on_sync_kiocb(struct kiocb *iocb);
extern void aio_complete(struct kiocb *iocb, long res, long res2);
struct mm_struct;
extern void exit_aio(struct mm_struct *mm);
extern long do_io_submit(aio_context_t ctx_id, long nr,
    struct iocb * *iocbpp, bool compat);
void kiocb_set_cancel_fn(struct kiocb *req, kiocb_cancel_fn *cancel);
static inline struct kiocb *list_kiocb(struct list_head *h)
{
 return ({ typeof( ((struct kiocb *)0)->ki_list ) *__mptr = (h); (struct kiocb *)( (char *)__mptr - ((size_t) &((struct kiocb *)0)->ki_list) );});
}


extern unsigned long aio_nr;
extern unsigned long aio_max_nr;


struct sock_filter {
  template <typename, int = 0> struct __BYPASSsock_filter {};
  template <typename, int> friend struct __BYPASSsock_filter;
 __u16 code;
 __u8 jt;
 __u8 jf;
 __u32 k;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sock_fprog {
  template <typename, int = 0> struct __BYPASSsock_fprog {};
  template <typename, int> friend struct __BYPASSsock_fprog;
 unsigned short len;
 struct sock_filter *filter;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct compat_sock_fprog {
  template <typename, int = 0> struct __BYPASScompat_sock_fprog {};
  template <typename, int> friend struct __BYPASScompat_sock_fprog;
 u16 len;
 compat_uptr_t filter;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct sk_buff;
struct sock;

struct sk_filter
{
  template <typename, int = 0> struct __BYPASSsk_filter {};
  template <typename, int> friend struct __BYPASSsk_filter;
 atomic_t refcnt;
 unsigned int len;
 struct callback_head rcu;
 unsigned int (*bpf_func)( struct sk_buff *skb,
         struct sock_filter *filter);
 union {
  struct sock_filter insns[0];
  struct work_struct work;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline unsigned int sk_filter_size(unsigned int proglen)
{
 return ({ typeof(sizeof(struct sk_filter)) _max1 = (sizeof(struct sk_filter)); typeof(((size_t) &((struct sk_filter *)0)->insns[proglen])) _max2 = (((size_t) &((struct sk_filter *)0)->insns[proglen])); (void) (&_max1 == &_max2); _max1 > _max2 ? _max1 : _max2; })
                                                ;
}

extern int sk_filter(struct sock *sk, struct sk_buff *skb);
extern unsigned int sk_run_filter( struct sk_buff *skb,
      struct sock_filter *filter);
extern int sk_unattached_filter_create(struct sk_filter **pfp,
           struct sock_fprog *fprog);
extern void sk_unattached_filter_destroy(struct sk_filter *fp);
extern int sk_attach_filter(struct sock_fprog *fprog, struct sock *sk);
extern int sk_detach_filter(struct sock *sk);
extern int sk_chk_filter(struct sock_filter *filter, unsigned int flen);
extern int sk_get_filter(struct sock *sk, struct sock_filter *filter, unsigned len);
extern void sk_decode_filter(struct sock_filter *filt, struct sock_filter *to);






extern void bpf_jit_compile(struct sk_filter *fp);
extern void bpf_jit_free(struct sk_filter *fp);

static inline void bpf_jit_dump(unsigned int flen, unsigned int proglen,
    u32 pass, void *image)
{
 printf("\001" "3" "flen=%u proglen=%u pass=%u image=%pK\n", flen, proglen, pass, image)
                                   ;
 if (image)
  print_hex_dump("\001" "3", "JIT code: ", DUMP_PREFIX_OFFSET,
          16, 1, image, proglen, _false);
}
enum {
 BPF_S_RET_K = 1,
 BPF_S_RET_A,
 BPF_S_ALU_ADD_K,
 BPF_S_ALU_ADD_X,
 BPF_S_ALU_SUB_K,
 BPF_S_ALU_SUB_X,
 BPF_S_ALU_MUL_K,
 BPF_S_ALU_MUL_X,
 BPF_S_ALU_DIV_X,
 BPF_S_ALU_MOD_K,
 BPF_S_ALU_MOD_X,
 BPF_S_ALU_AND_K,
 BPF_S_ALU_AND_X,
 BPF_S_ALU_OR_K,
 BPF_S_ALU_OR_X,
 BPF_S_ALU_XOR_K,
 BPF_S_ALU_XOR_X,
 BPF_S_ALU_LSH_K,
 BPF_S_ALU_LSH_X,
 BPF_S_ALU_RSH_K,
 BPF_S_ALU_RSH_X,
 BPF_S_ALU_NEG,
 BPF_S_LD_W_ABS,
 BPF_S_LD_H_ABS,
 BPF_S_LD_B_ABS,
 BPF_S_LD_W_LEN,
 BPF_S_LD_W_IND,
 BPF_S_LD_H_IND,
 BPF_S_LD_B_IND,
 BPF_S_LD_IMM,
 BPF_S_LDX_W_LEN,
 BPF_S_LDX_B_MSH,
 BPF_S_LDX_IMM,
 BPF_S_MISC_TAX,
 BPF_S_MISC_TXA,
 BPF_S_ALU_DIV_K,
 BPF_S_LD_MEM,
 BPF_S_LDX_MEM,
 BPF_S_ST,
 BPF_S_STX,
 BPF_S_JMP_JA,
 BPF_S_JMP_JEQ_K,
 BPF_S_JMP_JEQ_X,
 BPF_S_JMP_JGE_K,
 BPF_S_JMP_JGE_X,
 BPF_S_JMP_JGT_K,
 BPF_S_JMP_JGT_X,
 BPF_S_JMP_JSET_K,
 BPF_S_JMP_JSET_X,

 BPF_S_ANC_PROTOCOL,
 BPF_S_ANC_PKTTYPE,
 BPF_S_ANC_IFINDEX,
 BPF_S_ANC_NLATTR,
 BPF_S_ANC_NLATTR_NEST,
 BPF_S_ANC_MARK,
 BPF_S_ANC_QUEUE,
 BPF_S_ANC_HATYPE,
 BPF_S_ANC_RXHASH,
 BPF_S_ANC_CPU,
 BPF_S_ANC_ALU_XOR_X,
 BPF_S_ANC_SECCOMP_LD_W,
 BPF_S_ANC_VLAN_TAG,
 BPF_S_ANC_VLAN_TAG_PRESENT,
 BPF_S_ANC_PAY_OFFSET,
};
static inline void hlist_nulls_del_init_rcu(struct hlist_nulls_node *n)
{
 if (!hlist_nulls_unhashed(n)) {
  __hlist_nulls_del(n);
  n->pprev = 0;
 }
}
static inline void hlist_nulls_del_rcu(struct hlist_nulls_node *n)
{
 __hlist_nulls_del(n);
 n->pprev = ((void *) 0x00200200 + (0xdead000000000000UL));
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16hlist_nulls_head5firstE_2347_0 {
  typedef TJP__ZN16hlist_nulls_head5firstE_2347_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_nulls_node * __get__ZN16hlist_nulls_head5firstE_2347(hlist_nulls_node * *source) {
  ::hlist_nulls_node *__result_buffer;
  typedef TJP__ZN16hlist_nulls_head5firstE_2347_0< ::hlist_nulls_node *, ::hlist_nulls_head , ::hlist_nulls_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_nulls_node *&)__result_buffer;
}
static inline void hlist_nulls_add_head_rcu(struct hlist_nulls_node *n,
     struct hlist_nulls_head *h)
{
 struct hlist_nulls_node *first = __get__ZN16hlist_nulls_head5firstE_2347(&h->first);

 n->next = first;
 n->pprev = &h->first;
 ({ ((*((struct hlist_nulls_node **)&(h)->first))) = (n); });
 if (!is_a_nulls(first))
  first->pprev = &n->next;
}







enum {
 NLA_UNSPEC,
 NLA_U8,
 NLA_U16,
 NLA_U32,
 NLA_U64,
 NLA_STRING,
 NLA_FLAG,
 NLA_MSECS,
 NLA_NESTED,
 NLA_NESTED_COMPAT,
 NLA_NUL_STRING,
 NLA_BINARY,
 NLA_S8,
 NLA_S16,
 NLA_S32,
 NLA_S64,
 __NLA_TYPE_MAX,
};
struct nla_policy {
  template <typename, int = 0> struct __BYPASSnla_policy {};
  template <typename, int> friend struct __BYPASSnla_policy;
 u16 type;
 u16 len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct nl_info {
  template <typename, int = 0> struct __BYPASSnl_info {};
  template <typename, int> friend struct __BYPASSnl_info;
 struct nlmsghdr *nlh;
 struct net *nl_net;
 u32 portid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int netlink_rcv_skb(struct sk_buff *skb,
      int (*cb)(struct sk_buff *, struct nlmsghdr *));
int nlmsg_notify(struct sock *sk, struct sk_buff *skb, u32 portid,
   unsigned int group, int report, gfp_t flags);

int nla_validate( struct nlattr *head, int len, int maxtype,
   struct nla_policy *policy);
int nla_parse(struct nlattr **tb, int maxtype, struct nlattr *head,
       int len, struct nla_policy *policy);
int nla_policy_len( struct nla_policy *, int);
struct nlattr *nla_find( struct nlattr *head, int len, int attrtype);
size_t nla_strlcpy(char *dst, struct nlattr *nla, size_t dstsize);
int nla_memcpy(void *dest, struct nlattr *src, int count);
int nla_memcmp( struct nlattr *nla, void *data, size_t size);
int nla_strcmp( struct nlattr *nla, char *str);
struct nlattr *__nla_reserve(struct sk_buff *skb, int attrtype, int attrlen);
void *__nla_reserve_nohdr(struct sk_buff *skb, int attrlen);
struct nlattr *nla_reserve(struct sk_buff *skb, int attrtype, int attrlen);
void *nla_reserve_nohdr(struct sk_buff *skb, int attrlen);
void __nla_put(struct sk_buff *skb, int attrtype, int attrlen,
        void *data);
void __nla_put_nohdr(struct sk_buff *skb, int attrlen, void *data);
int nla_put(struct sk_buff *skb, int attrtype, int attrlen, void *data);
int nla_put_nohdr(struct sk_buff *skb, int attrlen, void *data);
int nla_append(struct sk_buff *skb, int attrlen, void *data);
static inline int nlmsg_msg_size(int payload)
{
 return ((int) ( ((sizeof(struct nlmsghdr))+4U -1) & ~(4U -1) )) + payload;
}





static inline int nlmsg_total_size(int payload)
{
 return ( ((nlmsg_msg_size(payload))+4U -1) & ~(4U -1) );
}





static inline int nlmsg_padlen(int payload)
{
 return nlmsg_total_size(payload) - nlmsg_msg_size(payload);
}





static inline void *nlmsg_data( struct nlmsghdr *nlh)
{
 return (unsigned char *) nlh + ((int) ( ((sizeof(struct nlmsghdr))+4U -1) & ~(4U -1) ));
}





static inline int nlmsg_len( struct nlmsghdr *nlh)
{
 return nlh->nlmsg_len - ((int) ( ((sizeof(struct nlmsghdr))+4U -1) & ~(4U -1) ));
}






static inline struct nlattr *nlmsg_attrdata( struct nlmsghdr *nlh,
         int hdrlen)
{
 unsigned char *data = nlmsg_data(nlh);
 return (struct nlattr *) (data + ( ((hdrlen)+4U -1) & ~(4U -1) ));
}






static inline int nlmsg_attrlen( struct nlmsghdr *nlh, int hdrlen)
{
 return nlmsg_len(nlh) - ( ((hdrlen)+4U -1) & ~(4U -1) );
}






static inline int nlmsg_ok( struct nlmsghdr *nlh, int remaining)
{
 return (remaining >= (int) sizeof(struct nlmsghdr) &&
  nlh->nlmsg_len >= sizeof(struct nlmsghdr) &&
  nlh->nlmsg_len <= remaining);
}
static inline struct nlmsghdr *
nlmsg_next( struct nlmsghdr *nlh, int *remaining)
{
 int totlen = ( ((nlh->nlmsg_len)+4U -1) & ~(4U -1) );

 *remaining -= totlen;

 return (struct nlmsghdr *) ((unsigned char *) nlh + totlen);
}
static inline int nlmsg_parse( struct nlmsghdr *nlh, int hdrlen,
         struct nlattr *tb[], int maxtype,
         struct nla_policy *policy)
{
 if (nlh->nlmsg_len < nlmsg_msg_size(hdrlen))
  return -22;

 return nla_parse(tb, maxtype, nlmsg_attrdata(nlh, hdrlen),
    nlmsg_attrlen(nlh, hdrlen), policy);
}
static inline struct nlattr *nlmsg_find_attr( struct nlmsghdr *nlh,
          int hdrlen, int attrtype)
{
 return nla_find(nlmsg_attrdata(nlh, hdrlen),
   nlmsg_attrlen(nlh, hdrlen), attrtype);
}
static inline int nlmsg_validate( struct nlmsghdr *nlh,
     int hdrlen, int maxtype,
     struct nla_policy *policy)
{
 if (nlh->nlmsg_len < nlmsg_msg_size(hdrlen))
  return -22;

 return nla_validate(nlmsg_attrdata(nlh, hdrlen),
       nlmsg_attrlen(nlh, hdrlen), maxtype, policy);
}







static inline int nlmsg_report( struct nlmsghdr *nlh)
{
 return !!(nlh->nlmsg_flags & 8);
}
static inline struct nlmsghdr *nlmsg_put(struct sk_buff *skb, u32 portid, u32 seq,
      int type, int payload, int flags)
{
 if (__builtin_expect(!!(skb_tailroom(skb) < nlmsg_total_size(payload)), 0))
  return 0;

 return __nlmsg_put(skb, portid, seq, type, payload, flags);
}
static inline struct nlmsghdr *nlmsg_put_answer(struct sk_buff *skb,
      struct netlink_callback *cb,
      int type, int payload,
      int flags)
{
 return nlmsg_put(skb, (*(struct netlink_skb_parms*)&((cb->skb)->cb)).portid, cb->nlh->nlmsg_seq,
    type, payload, flags);
}
static inline struct sk_buff *nlmsg_new(size_t payload, gfp_t flags)
{
 return alloc_skb(nlmsg_total_size(payload), flags);
}
static inline int nlmsg_end(struct sk_buff *skb, struct nlmsghdr *nlh)
{
 nlh->nlmsg_len = skb_tail_pointer(skb) - (unsigned char *)nlh;

 return skb->len;
}







static inline void *nlmsg_get_pos(struct sk_buff *skb)
{
 return skb_tail_pointer(skb);
}
static inline void nlmsg_trim(struct sk_buff *skb, void *mark)
{
 if (mark)
  skb_trim(skb, (unsigned char *) mark - skb->data);
}
static inline void nlmsg_cancel(struct sk_buff *skb, struct nlmsghdr *nlh)
{
 nlmsg_trim(skb, nlh);
}





static inline void nlmsg_free(struct sk_buff *skb)
{
 kfree_skb(skb);
}
static inline int nlmsg_multicast(struct sock *sk, struct sk_buff *skb,
      u32 portid, unsigned int group, gfp_t flags)
{
 int err;

 (*(struct netlink_skb_parms*)&((skb)->cb)).dst_group = group;

 err = netlink_broadcast(sk, skb, portid, group, flags);
 if (err > 0)
  err = 0;

 return err;
}







static inline int nlmsg_unicast(struct sock *sk, struct sk_buff *skb, u32 portid)
{
 int err;

 err = netlink_unicast(sk, skb, portid, 0x40);
 if (err > 0)
  err = 0;

 return err;
}
static inline void
nl_dump_check_consistent(struct netlink_callback *cb,
    struct nlmsghdr *nlh)
{
 if (cb->prev_seq && cb->seq != cb->prev_seq)
  nlh->nlmsg_flags |= 16;
 cb->prev_seq = cb->seq;
}
static inline int nla_attr_size(int payload)
{
 return ((int) (((sizeof(struct nlattr)) + 4 - 1) & ~(4 - 1))) + payload;
}





static inline int nla_total_size(int payload)
{
 return (((nla_attr_size(payload)) + 4 - 1) & ~(4 - 1));
}





static inline int nla_padlen(int payload)
{
 return nla_total_size(payload) - nla_attr_size(payload);
}





static inline int nla_type( struct nlattr *nla)
{
 return nla->nla_type & ~((1 << 15) | (1 << 14));
}
static inline struct nlattr *nla_data( struct nlattr *nla)
{
        return (struct nlattr *)((char *) nla + ((int) (((sizeof(struct nlattr)) + 4 - 1) & ~(4 - 1))));
}






static inline int nla_len( struct nlattr *nla)
{
 return nla->nla_len - ((int) (((sizeof(struct nlattr)) + 4 - 1) & ~(4 - 1)));
}






static inline int nla_ok( struct nlattr *nla, int remaining)
{
 return remaining >= (int) sizeof(*nla) &&
        nla->nla_len >= sizeof(*nla) &&
        nla->nla_len <= remaining;
}
static inline struct nlattr *nla_next( struct nlattr *nla, int *remaining)
{
 int totlen = (((nla->nla_len) + 4 - 1) & ~(4 - 1));

 *remaining -= totlen;
 return (struct nlattr *) ((char *) nla + totlen);
}
static inline struct nlattr *
nla_find_nested( struct nlattr *nla, int attrtype)
{
 return nla_find(nla_data(nla), nla_len(nla), attrtype);
}
static inline int nla_parse_nested(struct nlattr *tb[], int maxtype,
       struct nlattr *nla,
       struct nla_policy *policy)
{
 return nla_parse(tb, maxtype, nla_data(nla), nla_len(nla), policy);
}







static inline int nla_put_u8(struct sk_buff *skb, int attrtype, u8 value)
{
 return nla_put(skb, attrtype, sizeof(u8), &value);
}







static inline int nla_put_u16(struct sk_buff *skb, int attrtype, u16 value)
{
 return nla_put(skb, attrtype, sizeof(u16), &value);
}







static inline int nla_put_be16(struct sk_buff *skb, int attrtype, __be16 value)
{
 return nla_put(skb, attrtype, sizeof(__be16), &value);
}







static inline int nla_put_net16(struct sk_buff *skb, int attrtype, __be16 value)
{
 return nla_put_be16(skb, attrtype | (1 << 14), value);
}







static inline int nla_put_le16(struct sk_buff *skb, int attrtype, __le16 value)
{
 return nla_put(skb, attrtype, sizeof(__le16), &value);
}







static inline int nla_put_u32(struct sk_buff *skb, int attrtype, u32 value)
{
 return nla_put(skb, attrtype, sizeof(u32), &value);
}







static inline int nla_put_be32(struct sk_buff *skb, int attrtype, __be32 value)
{
 return nla_put(skb, attrtype, sizeof(__be32), &value);
}







static inline int nla_put_net32(struct sk_buff *skb, int attrtype, __be32 value)
{
 return nla_put_be32(skb, attrtype | (1 << 14), value);
}







static inline int nla_put_le32(struct sk_buff *skb, int attrtype, __le32 value)
{
 return nla_put(skb, attrtype, sizeof(__le32), &value);
}







static inline int nla_put_u64(struct sk_buff *skb, int attrtype, u64 value)
{
 return nla_put(skb, attrtype, sizeof(u64), &value);
}







static inline int nla_put_be64(struct sk_buff *skb, int attrtype, __be64 value)
{
 return nla_put(skb, attrtype, sizeof(__be64), &value);
}







static inline int nla_put_net64(struct sk_buff *skb, int attrtype, __be64 value)
{
 return nla_put_be64(skb, attrtype | (1 << 14), value);
}







static inline int nla_put_le64(struct sk_buff *skb, int attrtype, __le64 value)
{
 return nla_put(skb, attrtype, sizeof(__le64), &value);
}







static inline int nla_put_s8(struct sk_buff *skb, int attrtype, s8 value)
{
 return nla_put(skb, attrtype, sizeof(s8), &value);
}







static inline int nla_put_s16(struct sk_buff *skb, int attrtype, s16 value)
{
 return nla_put(skb, attrtype, sizeof(s16), &value);
}







static inline int nla_put_s32(struct sk_buff *skb, int attrtype, s32 value)
{
 return nla_put(skb, attrtype, sizeof(s32), &value);
}







static inline int nla_put_s64(struct sk_buff *skb, int attrtype, s64 value)
{
 return nla_put(skb, attrtype, sizeof(s64), &value);
}







static inline int nla_put_string(struct sk_buff *skb, int attrtype,
     char *str)
{
 return nla_put(skb, attrtype, strlen(str) + 1, str);
}






static inline int nla_put_flag(struct sk_buff *skb, int attrtype)
{
 return nla_put(skb, attrtype, 0, 0);
}







static inline int nla_put_msecs(struct sk_buff *skb, int attrtype,
    unsigned long jiffies)
{
 u64 tmp = jiffies_to_msecs(jiffies);
 return nla_put(skb, attrtype, sizeof(u64), &tmp);
}





static inline u32 nla_get_u32( struct nlattr *nla)
{
 return *(u32 *) nla_data(nla);
}





static inline __be32 nla_get_be32( struct nlattr *nla)
{
 return *(__be32 *) nla_data(nla);
}





static inline u16 nla_get_u16( struct nlattr *nla)
{
 return *(u16 *) nla_data(nla);
}





static inline __be16 nla_get_be16( struct nlattr *nla)
{
 return *(__be16 *) nla_data(nla);
}





static inline __le16 nla_get_le16( struct nlattr *nla)
{
 return *(__le16 *) nla_data(nla);
}





static inline u8 nla_get_u8( struct nlattr *nla)
{
 return *(u8 *) nla_data(nla);
}





static inline u64 nla_get_u64( struct nlattr *nla)
{
 u64 tmp;

 nla_memcpy(&tmp, nla, sizeof(tmp));

 return tmp;
}





static inline __be64 nla_get_be64( struct nlattr *nla)
{
 __be64 tmp;

 nla_memcpy(&tmp, nla, sizeof(tmp));

 return tmp;
}





static inline s32 nla_get_s32( struct nlattr *nla)
{
 return *(s32 *) nla_data(nla);
}





static inline s16 nla_get_s16( struct nlattr *nla)
{
 return *(s16 *) nla_data(nla);
}





static inline s8 nla_get_s8( struct nlattr *nla)
{
 return *(s8 *) nla_data(nla);
}





static inline s64 nla_get_s64( struct nlattr *nla)
{
 s64 tmp;

 nla_memcpy(&tmp, nla, sizeof(tmp));

 return tmp;
}





static inline int nla_get_flag( struct nlattr *nla)
{
 return !!nla;
}







static inline unsigned long nla_get_msecs( struct nlattr *nla)
{
 u64 msecs = nla_get_u64(nla);

 return msecs_to_jiffies((unsigned long) msecs);
}
static inline struct nlattr *nla_nest_start(struct sk_buff *skb, int attrtype)
{
 struct nlattr *start = (struct nlattr *)skb_tail_pointer(skb);

 if (nla_put(skb, attrtype, 0, 0) < 0)
  return 0;

 return start;
}
static inline int nla_nest_end(struct sk_buff *skb, struct nlattr *start)
{
 start->nla_len = skb_tail_pointer(skb) - (unsigned char *)start;
 return skb->len;
}
static inline void nla_nest_cancel(struct sk_buff *skb, struct nlattr *start)
{
 nlmsg_trim(skb, start);
}
static inline int nla_validate_nested( struct nlattr *start, int maxtype,
          struct nla_policy *policy)
{
 return nla_validate(nla_data(start), nla_len(start), maxtype, policy);
}

typedef int (*rtnl_doit_func)(struct sk_buff *, struct nlmsghdr *);
typedef int (*rtnl_dumpit_func)(struct sk_buff *, struct netlink_callback *);
typedef u16 (*rtnl_calcit_func)(struct sk_buff *, struct nlmsghdr *);

int __rtnl_register(int protocol, int msgtype,
      rtnl_doit_func, rtnl_dumpit_func, rtnl_calcit_func);
void rtnl_register(int protocol, int msgtype,
     rtnl_doit_func, rtnl_dumpit_func, rtnl_calcit_func);
int rtnl_unregister(int protocol, int msgtype);
void rtnl_unregister_all(int protocol);

static inline int rtnl_msg_family( struct nlmsghdr *nlh)
{
 if (nlmsg_len(nlh) >= sizeof(struct rtgenmsg))
  return ((struct rtgenmsg *) nlmsg_data(nlh))->rtgen_family;
 else
  return 0;
}
struct rtnl_link_ops {
  template <typename, int = 0> struct __BYPASSrtnl_link_ops {};
  template <typename, int> friend struct __BYPASSrtnl_link_ops;
 struct list_head list;

 char *kind;

 size_t priv_size;
 void (*setup)(struct net_device *dev);

 int maxtype;
 struct nla_policy *policy;
 int (*validate)(struct nlattr *tb[],
         struct nlattr *data[]);

 int (*newlink)(struct net *src_net,
        struct net_device *dev,
        struct nlattr *tb[],
        struct nlattr *data[]);
 int (*changelink)(struct net_device *dev,
           struct nlattr *tb[],
           struct nlattr *data[]);
 void (*dellink)(struct net_device *dev,
        struct list_head *head);

 size_t (*get_size)( struct net_device *dev);
 int (*fill_info)(struct sk_buff *skb,
          struct net_device *dev);

 size_t (*get_xstats_size)( struct net_device *dev);
 int (*fill_xstats)(struct sk_buff *skb,
            struct net_device *dev);
 unsigned int (*get_num_tx_queues)(void);
 unsigned int (*get_num_rx_queues)(void);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int __rtnl_link_register(struct rtnl_link_ops *ops);
void __rtnl_link_unregister(struct rtnl_link_ops *ops);

int rtnl_link_register(struct rtnl_link_ops *ops);
void rtnl_link_unregister(struct rtnl_link_ops *ops);
struct rtnl_af_ops {
  template <typename, int = 0> struct __BYPASSrtnl_af_ops {};
  template <typename, int> friend struct __BYPASSrtnl_af_ops;
 struct list_head list;
 int family;

 int (*fill_link_af)(struct sk_buff *skb,
      struct net_device *dev);
 size_t (*get_link_af_size)( struct net_device *dev);

 int (*validate_link_af)( struct net_device *dev,
          struct nlattr *attr);
 int (*set_link_af)(struct net_device *dev,
            struct nlattr *attr);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int __rtnl_af_register(struct rtnl_af_ops *ops);
void __rtnl_af_unregister(struct rtnl_af_ops *ops);

int rtnl_af_register(struct rtnl_af_ops *ops);
void rtnl_af_unregister(struct rtnl_af_ops *ops);

struct net *rtnl_link_get_net(struct net *src_net, struct nlattr *tb[]);
struct net_device *rtnl_create_link(struct net *net, char *ifname,
        struct rtnl_link_ops *ops,
        struct nlattr *tb[]);
int rtnl_configure_link(struct net_device *dev, struct ifinfomsg *ifm);

extern struct nla_policy ifla_policy[(__IFLA_MAX - 1)+1];
struct neighbour;

struct neigh_parms {
  template <typename, int = 0> struct __BYPASSneigh_parms {};
  template <typename, int> friend struct __BYPASSneigh_parms;

 struct net *net;

 struct net_device *dev;
 struct neigh_parms *next;
 int (*neigh_setup)(struct neighbour *);
 void (*neigh_cleanup)(struct neighbour *);
 struct neigh_table *tbl;

 void *sysctl_table;

 int dead;
 atomic_t refcnt;
 struct callback_head callback_head;

 int base_reachable_time;
 int retrans_time;
 int gc_staletime;
 int reachable_time;
 int delay_probe_time;

 int queue_len_bytes;
 int ucast_probes;
 int app_probes;
 int mcast_probes;
 int anycast_delay;
 int proxy_delay;
 int proxy_qlen;
 int locktime;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct neigh_statistics {
  template <typename, int = 0> struct __BYPASSneigh_statistics {};
  template <typename, int> friend struct __BYPASSneigh_statistics;
 unsigned long allocs;
 unsigned long destroys;
 unsigned long hash_grows;

 unsigned long res_failed;

 unsigned long lookups;
 unsigned long hits;

 unsigned long rcv_probes_mcast;
 unsigned long rcv_probes_ucast;

 unsigned long periodic_gc_runs;
 unsigned long forced_gc_runs;

 unsigned long unres_discards;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct neighbour {
  template <typename, int = 0> struct __BYPASSneighbour {};
  template <typename, int> friend struct __BYPASSneighbour;
 struct neighbour *next;
 struct neigh_table *tbl;
 struct neigh_parms *parms;
 unsigned long confirmed;
 unsigned long updated;
 rwlock_t lock;
 atomic_t refcnt;
 struct sk_buff_head arp_queue;
 unsigned int arp_queue_len_bytes;
 struct timer_list timer;
 unsigned long used;
 atomic_t probes;
 __u8 flags;
 __u8 nud_state;
 __u8 type;
 __u8 dead;
 seqlock_t ha_lock;
 unsigned char ha[((((32)) + ((typeof((32)))((sizeof(unsigned long))) - 1)) & ~((typeof((32)))((sizeof(unsigned long))) - 1))];
 struct hh_cache hh;
 int (*output)(struct neighbour *, struct sk_buff *);
 struct neigh_ops *ops;
 struct callback_head rcu;
 struct net_device *dev;
 u8 primary_key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct neigh_ops {
  template <typename, int = 0> struct __BYPASSneigh_ops {};
  template <typename, int> friend struct __BYPASSneigh_ops;
 int family;
 void (*solicit)(struct neighbour *, struct sk_buff *);
 void (*error_report)(struct neighbour *, struct sk_buff *);
 int (*output)(struct neighbour *, struct sk_buff *);
 int (*connected_output)(struct neighbour *, struct sk_buff *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct pneigh_entry {
  template <typename, int = 0> struct __BYPASSpneigh_entry {};
  template <typename, int> friend struct __BYPASSpneigh_entry;
 struct pneigh_entry *next;

 struct net *net;

 struct net_device *dev;
 u8 flags;
 u8 key[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct neigh_hash_table {
  template <typename, int = 0> struct __BYPASSneigh_hash_table {};
  template <typename, int> friend struct __BYPASSneigh_hash_table;
 struct neighbour **hash_buckets;
 unsigned int hash_shift;
 __u32 hash_rnd[4];
 struct callback_head rcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct neigh_table {
  template <typename, int = 0> struct __BYPASSneigh_table {};
  template <typename, int> friend struct __BYPASSneigh_table;
 struct neigh_table *next;
 int family;
 int entry_size;
 int key_len;
 __u32 (*hash)( void *pkey,
     struct net_device *dev,
     __u32 *hash_rnd);
 int (*constructor)(struct neighbour *);
 int (*pconstructor)(struct pneigh_entry *);
 void (*pdestructor)(struct pneigh_entry *);
 void (*proxy_redo)(struct sk_buff *skb);
 char *id;
 struct neigh_parms parms;

 int gc_interval;
 int gc_thresh1;
 int gc_thresh2;
 int gc_thresh3;
 unsigned long last_flush;
 struct delayed_work gc_work;
 struct timer_list proxy_timer;
 struct sk_buff_head proxy_queue;
 atomic_t entries;
 rwlock_t lock;
 unsigned long last_rand;
 struct neigh_statistics *stats;
 struct neigh_hash_table *nht;
 struct pneigh_entry **phash_buckets;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline void *neighbour_priv( struct neighbour *n)
{
 return (char *)n + n->tbl->entry_size;
}
void neigh_table_init(struct neigh_table *tbl);
int neigh_table_clear(struct neigh_table *tbl);
struct neighbour *neigh_lookup(struct neigh_table *tbl, void *pkey,
          struct net_device *dev);
struct neighbour *neigh_lookup_nodev(struct neigh_table *tbl, struct net *net,
         void *pkey);
struct neighbour *__neigh_create(struct neigh_table *tbl, void *pkey,
     struct net_device *dev, bool want_ref);
static inline struct neighbour *neigh_create(struct neigh_table *tbl,
          void *pkey,
          struct net_device *dev)
{
 return __neigh_create(tbl, pkey, dev, _true);
}
void neigh_destroy(struct neighbour *neigh);
int __neigh_event_send(struct neighbour *neigh, struct sk_buff *skb);
int neigh_update(struct neighbour *neigh, u8 *lladdr, u8 _new, u32 flags);
void neigh_changeaddr(struct neigh_table *tbl, struct net_device *dev);
int neigh_ifdown(struct neigh_table *tbl, struct net_device *dev);
int neigh_resolve_output(struct neighbour *neigh, struct sk_buff *skb);
int neigh_connected_output(struct neighbour *neigh, struct sk_buff *skb);
int neigh_compat_output(struct neighbour *neigh, struct sk_buff *skb);
int neigh_direct_output(struct neighbour *neigh, struct sk_buff *skb);
struct neighbour *neigh_event_ns(struct neigh_table *tbl,
      u8 *lladdr, void *saddr,
      struct net_device *dev);

struct neigh_parms *neigh_parms_alloc(struct net_device *dev,
          struct neigh_table *tbl);
void neigh_parms_release(struct neigh_table *tbl, struct neigh_parms *parms);

static inline
struct net *neigh_parms_net( struct neigh_parms *parms)
{
 return read_pnet(&parms->net);
}

unsigned long neigh_rand_reach_time(unsigned long base);

void pneigh_enqueue(struct neigh_table *tbl, struct neigh_parms *p,
      struct sk_buff *skb);
struct pneigh_entry *pneigh_lookup(struct neigh_table *tbl, struct net *net,
       void *key, struct net_device *dev,
       int creat);
struct pneigh_entry *__pneigh_lookup(struct neigh_table *tbl, struct net *net,
         void *key, struct net_device *dev);
int pneigh_delete(struct neigh_table *tbl, struct net *net, void *key,
    struct net_device *dev);

static inline struct net *pneigh_net( struct pneigh_entry *pneigh)
{
 return read_pnet(&pneigh->net);
}

void neigh_app_ns(struct neighbour *n);
void neigh_for_each(struct neigh_table *tbl,
      void (*cb)(struct neighbour *, void *), void *cookie);
void __neigh_for_each_release(struct neigh_table *tbl,
         int (*cb)(struct neighbour *));
void pneigh_for_each(struct neigh_table *tbl,
       void (*cb)(struct pneigh_entry *));

struct neigh_seq_state {
  template <typename, int = 0> struct __BYPASSneigh_seq_state {};
  template <typename, int> friend struct __BYPASSneigh_seq_state;
 struct seq_net_private p;
 struct neigh_table *tbl;
 struct neigh_hash_table *nht;
 void *(*neigh_sub_iter)(struct neigh_seq_state *state,
    struct neighbour *n, loff_t *pos);
 unsigned int bucket;
 unsigned int flags;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};
void *neigh_seq_start(struct seq_file *, loff_t *, struct neigh_table *,
        unsigned int);
void *neigh_seq_next(struct seq_file *, void *, loff_t *);
void neigh_seq_stop(struct seq_file *, void *);

int neigh_sysctl_register(struct net_device *dev, struct neigh_parms *p,
     char *p_name, proc_handler *proc_handler);
void neigh_sysctl_unregister(struct neigh_parms *p);

static inline void __neigh_parms_put(struct neigh_parms *parms)
{
 ;
}

static inline struct neigh_parms *neigh_parms_clone(struct neigh_parms *parms)
{
 ;
 return parms;
}





static inline void neigh_release(struct neighbour *neigh)
{
 if (1)
  neigh_destroy(neigh);
}

static inline struct neighbour * neigh_clone(struct neighbour *neigh)
{
 if (neigh)
  ;
 return neigh;
}




template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_2376_0 {
  typedef TJP_jiffies_2376_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_2376(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_2376_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int neigh_event_send(struct neighbour *neigh, struct sk_buff *skb)
{
 unsigned long now = __get_jiffies_2376(&jiffies);

 if (neigh->used != now)
  neigh->used = now;
 if (!(neigh->nud_state&((0x80|0x40|0x02)|0x08|0x10)))
  return __neigh_event_send(neigh, skb);
 return 0;
}


static inline int neigh_hh_bridge(struct hh_cache *hh, struct sk_buff *skb)
{
 unsigned int seq, hh_alen;

 do {
  seq = 0;
  hh_alen = (((14)+(16 -1))&~(16 - 1));
  memcpy(skb->data - hh_alen, hh->hh_data, 6 + hh_alen - 14);
 } while (0);
 return 0;
}


static inline int neigh_hh_output( struct hh_cache *hh, struct sk_buff *skb)
{
 unsigned int seq;
 int hh_len;

 do {
  seq = 0;
  hh_len = hh->hh_len;
  if (__builtin_expect(!!(hh_len <= 16), 1)) {

   memcpy(skb->data - 16, hh->hh_data, 16);
  } else {
   int hh_alen = (((hh_len)+(16 -1))&~(16 - 1));

   memcpy(skb->data - hh_alen, hh->hh_data, hh_alen);
  }
 } while (0);

 skb_push(skb, hh_len);
 return dev_queue_xmit(skb);
}

static inline struct neighbour *
__neigh_lookup(struct neigh_table *tbl, void *pkey, struct net_device *dev, int creat)
{
 struct neighbour *n = neigh_lookup(tbl, pkey, dev);

 if (n || !creat)
  return n;

 n = neigh_create(tbl, pkey, dev);
 return IS_ERR(n) ? 0 : n;
}

static inline struct neighbour *
__neigh_lookup_errno(struct neigh_table *tbl, void *pkey,
  struct net_device *dev)
{
 struct neighbour *n = neigh_lookup(tbl, pkey, dev);

 if (n)
  return n;

 return neigh_create(tbl, pkey, dev);
}

struct neighbour_cb {
  template <typename, int = 0> struct __BYPASSneighbour_cb {};
  template <typename, int> friend struct __BYPASSneighbour_cb;
 unsigned long sched_next;
 unsigned int flags;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8addr_lenE_2387_0 {
  typedef TJP__ZN10net_device8addr_lenE_2387_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device8addr_lenE_2387(unsigned char *source) {
  unsigned char __result_buffer;
  typedef TJP__ZN10net_device8addr_lenE_2387_0< unsigned char , ::net_device , unsigned char  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char &)__result_buffer;
}
static inline void neigh_ha_snapshot(char *dst, struct neighbour *n,
         struct net_device *dev)
{
 unsigned int seq;

 do {
  seq = 0;
  memcpy(dst, n->ha, __get__ZN10net_device8addr_lenE_2387(&dev->addr_len));
 } while (0);
}
struct sk_buff;

struct dst_entry {
  template <typename, int = 0> struct __BYPASSdst_entry {};
  template <typename, int> friend struct __BYPASSdst_entry;
 struct callback_head callback_head;
 struct dst_entry *child;
 struct net_device *dev;
 struct dst_ops *ops;
 unsigned long _metrics;
 unsigned long expires;
 struct dst_entry *path;
 struct dst_entry *from;

 struct xfrm_state *xfrm;



 int (*input)(struct sk_buff *);
 int (*output)(struct sk_buff *);

 unsigned short flags;
 unsigned short pending_confirm;

 short error;
 short obsolete;




 unsigned short header_len;
 unsigned short trailer_len;

 __u32 tclassid;
 long __pad_to_align_refcnt[2];





 atomic_t __refcnt;
 int __use;
 unsigned long lastuse;
 union {
  struct dst_entry *next;
  struct rtable *rt_next;
  struct rt6_info *rt6_next;
  struct dn_route *dn_next;
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

u32 *dst_cow_metrics_generic(struct dst_entry *dst, unsigned long old);
extern u32 dst_default_metrics[];






static inline bool dst_metrics_read_only( struct dst_entry *dst)
{
 return dst->_metrics & 0x1UL;
}

void __dst_destroy_metrics_generic(struct dst_entry *dst, unsigned long old);

static inline void dst_destroy_metrics_generic(struct dst_entry *dst)
{
 unsigned long val = dst->_metrics;
 if (!(val & 0x1UL))
  __dst_destroy_metrics_generic(dst, val);
}

static inline u32 *dst_metrics_write_ptr(struct dst_entry *dst)
{
 unsigned long p = dst->_metrics;

 (!p);

 if (p & 0x1UL)
  return dst->ops->cow_metrics(dst, p);
 return ((u32 *)((p) & ~0x1UL));
}




static inline void dst_init_metrics(struct dst_entry *dst,
        u32 *src_metrics,
        bool read_only)
{
 dst->_metrics = ((unsigned long) src_metrics) |
  (read_only ? 0x1UL : 0);
}

static inline void dst_copy_metrics(struct dst_entry *dest, struct dst_entry *src)
{
 u32 *dst_metrics = dst_metrics_write_ptr(dest);

 if (dst_metrics) {
  u32 *src_metrics = ((u32 *)(((src)->_metrics) & ~0x1UL));

  memcpy(dst_metrics, src_metrics, (__RTAX_MAX - 1) * sizeof(u32));
 }
}

static inline u32 *dst_metrics_ptr(struct dst_entry *dst)
{
 return ((u32 *)(((dst)->_metrics) & ~0x1UL));
}

static inline u32
dst_metric_raw( struct dst_entry *dst, int metric)
{
 u32 *p = ((u32 *)(((dst)->_metrics) & ~0x1UL));

 return p[metric-1];
}

static inline u32
dst_metric( struct dst_entry *dst, int metric)
{
 (metric == RTAX_HOPLIMIT || metric == RTAX_ADVMSS || metric == RTAX_MTU)

                          ;
 return dst_metric_raw(dst, metric);
}

static inline u32
dst_metric_advmss( struct dst_entry *dst)
{
 u32 advmss = dst_metric_raw(dst, RTAX_ADVMSS);

 if (!advmss)
  advmss = dst->ops->default_advmss(dst);

 return advmss;
}

static inline void dst_metric_set(struct dst_entry *dst, int metric, u32 val)
{
 u32 *p = dst_metrics_write_ptr(dst);

 if (p)
  p[metric-1] = val;
}

static inline u32
dst_feature( struct dst_entry *dst, u32 feature)
{
 return dst_metric(dst, RTAX_FEATURES) & feature;
}

static inline u32 dst_mtu( struct dst_entry *dst)
{
 return dst->ops->mtu(dst);
}


static inline unsigned long dst_metric_rtt( struct dst_entry *dst, int metric)
{
 return msecs_to_jiffies(dst_metric(dst, metric));
}

static inline u32
dst_allfrag( struct dst_entry *dst)
{
 int ret = dst_feature(dst, 0x00000008);
 return ret;
}

static inline int
dst_metric_locked( struct dst_entry *dst, int metric)
{
 return dst_metric(dst, RTAX_LOCK) & (1<<metric);
}

static inline void dst_hold(struct dst_entry *dst)
{




 (0);
 ;
}

static inline void dst_use(struct dst_entry *dst, unsigned long time)
{
 dst_hold(dst);
 dst->__use++;
 dst->lastuse = time;
}

static inline void dst_use_noref(struct dst_entry *dst, unsigned long time)
{
 dst->__use++;
 dst->lastuse = time;
}

static inline struct dst_entry *dst_clone(struct dst_entry *dst)
{
 if (dst)
  ;
 return dst;
}

void dst_release(struct dst_entry *dst);

static inline void refdst_drop(unsigned long refdst)
{
 if (!(refdst & 1UL))
  dst_release((struct dst_entry *)(refdst & ~(1UL)));
}







static inline void skb_dst_drop(struct sk_buff *skb)
{
 if (skb->_skb_refdst) {
  refdst_drop(skb->_skb_refdst);
  skb->_skb_refdst = 0UL;
 }
}

static inline void skb_dst_copy(struct sk_buff *nskb, struct sk_buff *oskb)
{
 nskb->_skb_refdst = oskb->_skb_refdst;
 if (!(nskb->_skb_refdst & 1UL))
  dst_clone(skb_dst(nskb));
}







static inline void skb_dst_force(struct sk_buff *skb)
{
 if (skb_dst_is_noref(skb)) {
  (!1);
  skb->_skb_refdst &= ~1UL;
  dst_clone(skb_dst(skb));
 }
}
static inline void __skb_tunnel_rx(struct sk_buff *skb, struct net_device *dev,
       struct net *net)
{
 skb->dev = dev;






 if (!skb->l4_rxhash)
  skb->rxhash = 0;
 skb_set_queue_mapping(skb, 0);
 skb_scrub_packet(skb, !net_eq(net, dev_net(dev)));
}
static inline void skb_tunnel_rx(struct sk_buff *skb, struct net_device *dev,
     struct net *net)
{

 dev->stats.rx_packets++;
 dev->stats.rx_bytes += skb->len;
 __skb_tunnel_rx(skb, dev, net);
}





static inline struct dst_entry *skb_dst_pop(struct sk_buff *skb)
{
 struct dst_entry *child = dst_clone(skb_dst(skb)->child);

 skb_dst_drop(skb);
 return child;
}

int dst_discard(struct sk_buff *skb);
void *dst_alloc(struct dst_ops *ops, struct net_device *dev, int initial_ref,
  int initial_obsolete, unsigned short flags);
void __dst_free(struct dst_entry *dst);
struct dst_entry *dst_destroy(struct dst_entry *dst);

static inline void dst_free(struct dst_entry *dst)
{
 if (dst->obsolete > 0)
  return;
 if (!atomic_read(&dst->__refcnt)) {
  dst = dst_destroy(dst);
  if (!dst)
   return;
 }
 __dst_free(dst);
}

static inline void dst_rcu_free(struct callback_head *head)
{
 struct dst_entry *dst = ({ typeof( ((struct dst_entry *)0)->callback_head ) *__mptr = (head); (struct dst_entry *)( (char *)__mptr - ((size_t) &((struct dst_entry *)0)->callback_head) );});
 dst_free(dst);
}

static inline void dst_confirm(struct dst_entry *dst)
{
 dst->pending_confirm = 1;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_2416_0 {
  typedef TJP_jiffies_2416_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_2416(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_2416_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline int dst_neigh_output(struct dst_entry *dst, struct neighbour *n,
       struct sk_buff *skb)
{
 struct hh_cache *hh;

 if (dst->pending_confirm) {
  unsigned long now = __get_jiffies_2416(&jiffies);

  dst->pending_confirm = 0;

  if (n->confirmed != now)
   n->confirmed = now;
 }

 hh = &n->hh;
 if ((n->nud_state & (0x80|0x40|0x02)) && hh->hh_len)
  return neigh_hh_output(hh, skb);
 else
  return n->output(n, skb);
}

static inline struct neighbour *dst_neigh_lookup( struct dst_entry *dst, void *daddr)
{
 struct neighbour *n = dst->ops->neigh_lookup(dst, 0, daddr);
 return IS_ERR(n) ? 0 : n;
}

static inline struct neighbour *dst_neigh_lookup_skb( struct dst_entry *dst,
           struct sk_buff *skb)
{
 struct neighbour *n = dst->ops->neigh_lookup(dst, skb, 0);
 return IS_ERR(n) ? 0 : n;
}

static inline void dst_link_failure(struct sk_buff *skb)
{
 struct dst_entry *dst = skb_dst(skb);
 if (dst && dst->ops && dst->ops->link_failure)
  dst->ops->link_failure(skb);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_2430_0 {
  typedef TJP_jiffies_2430_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_2430(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_2430_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void dst_set_expires(struct dst_entry *dst, int timeout)
{
 unsigned long expires = __get_jiffies_2430(&jiffies) + timeout;

 if (expires == 0)
  expires = 1;

 if (dst->expires == 0 || (({ unsigned long __dummy; typeof(dst->expires) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(expires) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((expires) - (dst->expires)) < 0)))
  dst->expires = expires;
}


static inline int dst_output(struct sk_buff *skb)
{
 return skb_dst(skb)->output(skb);
}


static inline int dst_input(struct sk_buff *skb)
{
 return skb_dst(skb)->input(skb);
}

static inline struct dst_entry *dst_check(struct dst_entry *dst, u32 cookie)
{
 if (dst->obsolete)
  dst = dst->ops->check(dst, cookie);
 return dst;
}

void dst_init(void);


enum {
 XFRM_LOOKUP_ICMP = 1 << 0,
};

struct flowi;
struct dst_entry *xfrm_lookup(struct net *net, struct dst_entry *dst_orig,
         struct flowi *fl, struct sock *sk,
         int flags);


static inline struct xfrm_state *dst_xfrm( struct dst_entry *dst)
{
 return dst->xfrm;
}


struct cgroup;
struct cgroup_subsys;

int mem_cgroup_sockets_init(struct mem_cgroup *memcg, struct cgroup_subsys *ss);
void mem_cgroup_sockets_destroy(struct mem_cgroup *memcg);
typedef struct {
 spinlock_t slock;
 int owned;
 wait_queue_head_t wq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} socket_lock_t;

struct sock;
struct proto;
struct net;

typedef __u32 __portpair;
typedef __u64 __addrpair;
struct sock_common {
  template <typename, int = 0> struct __BYPASSsock_common {};
  template <typename, int> friend struct __BYPASSsock_common;



 union {
  __addrpair skc_addrpair;
  struct {
   __be32 skc_daddr;
   __be32 skc_rcv_saddr;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };
 union {
  unsigned int skc_hash;
  __u16 skc_u16hashes[2];
 };

 union {
  __portpair skc_portpair;
  struct {
   __be16 skc_dport;
   __u16 skc_num;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
 };

 unsigned short skc_family;
 unsigned char skc_state;
 unsigned char skc_reuse:4;
 unsigned char skc_reuseport:4;
 int skc_bound_dev_if;
 union {
  struct hlist_node skc_bind_node;
  struct hlist_nulls_node skc_portaddr_node;
 };
 struct proto *skc_prot;

 struct net *skc_net;



 struct in6_addr skc_v6_daddr;
 struct in6_addr skc_v6_rcv_saddr;







 int skc_dontcopy_begin[0];

 union {
  struct hlist_node skc_node;
  struct hlist_nulls_node skc_nulls_node;
 };
 int skc_tx_queue_mapping;
 atomic_t skc_refcnt;

 int skc_dontcopy_end[0];


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct cg_proto;
struct sock {
  template <typename, int = 0> struct __BYPASSsock {};
  template <typename, int> friend struct __BYPASSsock;




 struct sock_common __sk_common;
 socket_lock_t sk_lock;
 struct sk_buff_head sk_receive_queue;
 struct _sk_backlog {
  template <typename, int = 0> struct __BYPASS_ZN4sock11_sk_backlogE {};
  template <typename, int> friend struct __BYPASS_ZN4sock11_sk_backlogE;

  atomic_t rmem_alloc;
  int len;
  struct sk_buff *head;
  struct sk_buff *tail;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} sk_backlog;

 int sk_forward_alloc;

 __u32 sk_rxhash;


 unsigned int sk_napi_id;
 unsigned int sk_ll_usec;

 atomic_t sk_drops;
 int sk_rcvbuf;

 struct sk_filter *sk_filter;
 struct socket_wq *sk_wq;






 struct xfrm_policy *sk_policy[2];

 unsigned long sk_flags;
 struct dst_entry *sk_rx_dst;
 struct dst_entry *sk_dst_cache;
 spinlock_t sk_dst_lock;
 atomic_t sk_wmem_alloc;
 atomic_t sk_omem_alloc;
 int sk_sndbuf;
 struct sk_buff_head sk_write_queue;

    struct _sk_state2 {
  template <typename, int = 0> struct __BYPASS_ZN4sock10_sk_state2E {};
  template <typename, int> friend struct __BYPASS_ZN4sock10_sk_state2E;

 ;
 unsigned int sk_shutdown : 2,
    sk_no_check : 2,
    sk_userlocks : 4,
    sk_protocol : 8,
    sk_type : 16;
 ;






    
  friend class ::Introspect;
  friend class ::MyIntrospect;
} sk_state2;

 int sk_wmem_queued;
 gfp_t sk_allocation;
 u32 sk_pacing_rate;
 u32 sk_max_pacing_rate;
 netdev_features_t sk_route_caps;
 netdev_features_t sk_route_nocaps;
 int sk_gso_type;
 unsigned int sk_gso_max_size;
 u16 sk_gso_max_segs;
 int sk_rcvlowat;
 unsigned long sk_lingertime;
 struct sk_buff_head sk_error_queue;
 struct proto *sk_prot_creator;
 rwlock_t sk_callback_lock;
 int sk_err,
    sk_err_soft;
 unsigned short sk_ack_backlog;
 unsigned short sk_max_ack_backlog;
 __u32 sk_priority;

 __u32 sk_cgrp_prioidx;

 struct pid *sk_peer_pid;
 struct cred *sk_peer_cred;
 long sk_rcvtimeo;
 long sk_sndtimeo;
 void *sk_protinfo;
 struct timer_list sk_timer;
 ktime_t sk_stamp;
 struct socket *sk_socket;
 void *sk_user_data;
 struct page_frag sk_frag;
 struct sk_buff *sk_send_head;
 __s32 sk_peek_off;
 int sk_write_pending;

 void *sk_security;

 __u32 sk_mark;
 u32 sk_classid;
 struct cg_proto *sk_cgrp;
 void (*sk_state_change)(struct sock *sk);
 void (*sk_data_ready)(struct sock *sk, int bytes);
 void (*sk_write_space)(struct sock *sk);
 void (*sk_error_report)(struct sock *sk);
 int (*sk_backlog_rcv)(struct sock *sk,
        struct sk_buff *skb);
 void (*sk_destruct)(struct sock *sk);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_peek_offE_2439_0 {
  typedef TJP__ZN4sock11sk_peek_offE_2439_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock11sk_peek_offE_2439(int *source) {
  ::__s32 __result_buffer;
  typedef TJP__ZN4sock11sk_peek_offE_2439_0< ::__s32 , ::sock , ::__s32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__s32 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_peek_offE_2440_0 {
  typedef TJP__ZN4sock11sk_peek_offE_2440_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock11sk_peek_offE_2440(int *source) {
  ::__s32 __result_buffer;
  typedef TJP__ZN4sock11sk_peek_offE_2440_0< ::__s32 , ::sock , ::__s32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__s32 &)__result_buffer;
}
static inline int sk_peek_offset(struct sock *sk, int flags)
{
 if ((flags & 2) && (__get__ZN4sock11sk_peek_offE_2439(&sk->sk_peek_off) >= 0))
  return __get__ZN4sock11sk_peek_offE_2440(&sk->sk_peek_off);
 else
  return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_peek_offE_2441_0 {
  typedef TJP__ZN4sock11sk_peek_offE_2441_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock11sk_peek_offE_2441(int *source) {
  ::__s32 __result_buffer;
  typedef TJP__ZN4sock11sk_peek_offE_2441_0< ::__s32 , ::sock , ::__s32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__s32 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_peek_offE_2442_0 {
  typedef TJP__ZN4sock11sk_peek_offE_2442_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock11sk_peek_offE_2442(int *source) {
  ::__s32 __result_buffer;
  typedef TJP__ZN4sock11sk_peek_offE_2442_0< ::__s32 , ::sock , ::__s32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__s32 &)__result_buffer;
}
static inline void sk_peek_offset_bwd(struct sock *sk, int val)
{
 if (__get__ZN4sock11sk_peek_offE_2441(&sk->sk_peek_off) >= 0) {
  if (__get__ZN4sock11sk_peek_offE_2442(&sk->sk_peek_off) >= val)
   sk->sk_peek_off -= val;
  else
   sk->sk_peek_off = 0;
 }
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_peek_offE_2443_0 {
  typedef TJP__ZN4sock11sk_peek_offE_2443_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock11sk_peek_offE_2443(int *source) {
  ::__s32 __result_buffer;
  typedef TJP__ZN4sock11sk_peek_offE_2443_0< ::__s32 , ::sock , ::__s32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__s32 &)__result_buffer;
}
static inline void sk_peek_offset_fwd(struct sock *sk, int val)
{
 if (__get__ZN4sock11sk_peek_offE_2443(&sk->sk_peek_off) >= 0)
  sk->sk_peek_off += val;
}




static inline struct sock *sk_entry( struct hlist_node *node)
{
 return ({ typeof( ((struct sock *)0)->__sk_common.skc_node ) *__mptr = (node); (struct sock *)( (char *)__mptr - ((size_t) &((struct sock *)0)->__sk_common.skc_node) );});
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_head5firstE_2444_0 {
  typedef TJP__ZN10hlist_head5firstE_2444_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_head5firstE_2444(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_head5firstE_2444_0< ::hlist_node *, ::hlist_head , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}
static inline struct sock *__sk_head( struct hlist_head *head)
{
 return ({ typeof( ((struct sock *)0)->__sk_common.skc_node ) *__mptr = (__get__ZN10hlist_head5firstE_2444(&head->first)); (struct sock *)( (char *)__mptr - ((size_t) &((struct sock *)0)->__sk_common.skc_node) );});
}

static inline struct sock *sk_head( struct hlist_head *head)
{
 return hlist_empty(head) ? 0 : __sk_head(head);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16hlist_nulls_head5firstE_2445_0 {
  typedef TJP__ZN16hlist_nulls_head5firstE_2445_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_nulls_node * __get__ZN16hlist_nulls_head5firstE_2445(hlist_nulls_node * *source) {
  ::hlist_nulls_node *__result_buffer;
  typedef TJP__ZN16hlist_nulls_head5firstE_2445_0< ::hlist_nulls_node *, ::hlist_nulls_head , ::hlist_nulls_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_nulls_node *&)__result_buffer;
}
static inline struct sock *__sk_nulls_head( struct hlist_nulls_head *head)
{
 return ({ typeof( ((struct sock *)0)->__sk_common.skc_nulls_node ) *__mptr = (__get__ZN16hlist_nulls_head5firstE_2445(&head->first)); (struct sock *)( (char *)__mptr - ((size_t) &((struct sock *)0)->__sk_common.skc_nulls_node) );});
}

static inline struct sock *sk_nulls_head( struct hlist_nulls_head *head)
{
 return hlist_nulls_empty(head) ? 0 : __sk_nulls_head(head);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_2446_0 {
  typedef TJP__ZN10hlist_node4nextE_2446_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_2446(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_2446_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2448_0 {
  typedef TJP__ZN4sock11__sk_commonE_2448_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2448(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2448_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10hlist_node4nextE_2449_0 {
  typedef TJP__ZN10hlist_node4nextE_2449_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_node * __get__ZN10hlist_node4nextE_2449(hlist_node * *source) {
  ::hlist_node *__result_buffer;
  typedef TJP__ZN10hlist_node4nextE_2449_0< ::hlist_node *, ::hlist_node , ::hlist_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2451_0 {
  typedef TJP__ZN4sock11__sk_commonE_2451_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2451(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2451_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline struct sock *sk_next( struct sock *sk)
{
 return __get__ZN10hlist_node4nextE_2446(&__get__ZN4sock11__sk_commonE_2448(&sk->__sk_common).skc_node.next) ?
  ({ typeof( ((struct sock *)0)->__sk_common.skc_node ) *__mptr = (__get__ZN10hlist_node4nextE_2449(&__get__ZN4sock11__sk_commonE_2451(&sk->__sk_common).skc_node.next)); (struct sock *)( (char *)__mptr - ((size_t) &((struct sock *)0)->__sk_common.skc_node) );}) : 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16hlist_nulls_node4nextE_2452_0 {
  typedef TJP__ZN16hlist_nulls_node4nextE_2452_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_nulls_node * __get__ZN16hlist_nulls_node4nextE_2452(hlist_nulls_node * *source) {
  ::hlist_nulls_node *__result_buffer;
  typedef TJP__ZN16hlist_nulls_node4nextE_2452_0< ::hlist_nulls_node *, ::hlist_nulls_node , ::hlist_nulls_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_nulls_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2454_0 {
  typedef TJP__ZN4sock11__sk_commonE_2454_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2454(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2454_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16hlist_nulls_node4nextE_2455_0 {
  typedef TJP__ZN16hlist_nulls_node4nextE_2455_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline hlist_nulls_node * __get__ZN16hlist_nulls_node4nextE_2455(hlist_nulls_node * *source) {
  ::hlist_nulls_node *__result_buffer;
  typedef TJP__ZN16hlist_nulls_node4nextE_2455_0< ::hlist_nulls_node *, ::hlist_nulls_node , ::hlist_nulls_node * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::hlist_nulls_node *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2457_0 {
  typedef TJP__ZN4sock11__sk_commonE_2457_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2457(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2457_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline struct sock *sk_nulls_next( struct sock *sk)
{
 return (!is_a_nulls(__get__ZN16hlist_nulls_node4nextE_2452(&__get__ZN4sock11__sk_commonE_2454(&sk->__sk_common).skc_nulls_node.next))) ?
  ({ typeof( ((struct sock *)0)->__sk_common.skc_nulls_node ) *__mptr = (__get__ZN16hlist_nulls_node4nextE_2455(&__get__ZN4sock11__sk_commonE_2457(&sk->__sk_common).skc_nulls_node.next)); (struct sock *)( (char *)__mptr - ((size_t) &((struct sock *)0)->__sk_common.skc_nulls_node) );})
                                  :
  0;
}

static inline bool sk_unhashed( struct sock *sk)
{
 return hlist_unhashed(&sk->__sk_common.skc_node);
}

static inline bool sk_hashed( struct sock *sk)
{
 return !sk_unhashed(sk);
}

static inline void sk_node_init(struct hlist_node *node)
{
 node->pprev = 0;
}

static inline void sk_nulls_node_init(struct hlist_nulls_node *node)
{
 node->pprev = 0;
}

static inline void __sk_del_node(struct sock *sk)
{
 __hlist_del(&sk->__sk_common.skc_node);
}


static inline bool __sk_del_node_init(struct sock *sk)
{
 if (sk_hashed(sk)) {
  __sk_del_node(sk);
  sk_node_init(&sk->__sk_common.skc_node);
  return _true;
 }
 return _false;
}







static inline void sock_hold(struct sock *sk)
{
 ;
}




static inline void __sock_put(struct sock *sk)
{
 ;
}

static inline bool sk_del_node_init(struct sock *sk)
{
 bool rc = __sk_del_node_init(sk);

 if (rc) {

  (atomic_read(&sk->__sk_common.skc_refcnt) == 1);
  __sock_put(sk);
 }
 return rc;
}


static inline bool __sk_nulls_del_node_init_rcu(struct sock *sk)
{
 if (sk_hashed(sk)) {
  hlist_nulls_del_init_rcu(&sk->__sk_common.skc_nulls_node);
  return _true;
 }
 return _false;
}

static inline bool sk_nulls_del_node_init_rcu(struct sock *sk)
{
 bool rc = __sk_nulls_del_node_init_rcu(sk);

 if (rc) {

  (atomic_read(&sk->__sk_common.skc_refcnt) == 1);
  __sock_put(sk);
 }
 return rc;
}

static inline void __sk_add_node(struct sock *sk, struct hlist_head *list)
{
 hlist_add_head(&sk->__sk_common.skc_node, list);
}

static inline void sk_add_node(struct sock *sk, struct hlist_head *list)
{
 sock_hold(sk);
 __sk_add_node(sk, list);
}

static inline void sk_add_node_rcu(struct sock *sk, struct hlist_head *list)
{
 sock_hold(sk);
 hlist_add_head_rcu(&sk->__sk_common.skc_node, list);
}

static inline void __sk_nulls_add_node_rcu(struct sock *sk, struct hlist_nulls_head *list)
{
 hlist_nulls_add_head_rcu(&sk->__sk_common.skc_nulls_node, list);
}

static inline void sk_nulls_add_node_rcu(struct sock *sk, struct hlist_nulls_head *list)
{
 sock_hold(sk);
 __sk_nulls_add_node_rcu(sk, list);
}

static inline void __sk_del_bind_node(struct sock *sk)
{
 __hlist_del(&sk->__sk_common.skc_bind_node);
}

static inline void sk_add_bind_node(struct sock *sk,
     struct hlist_head *list)
{
 hlist_add_head(&sk->__sk_common.skc_bind_node, list);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4cred7user_nsE_2462_0 {
  typedef TJP__ZN4cred7user_nsE_2462_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline user_namespace * __get__ZN4cred7user_nsE_2462(user_namespace * *source) {
  ::user_namespace *__result_buffer;
  typedef TJP__ZN4cred7user_nsE_2462_0< ::user_namespace *, ::cred , ::user_namespace * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::user_namespace *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4file6f_credE_2463_0 {
  typedef TJP__ZN4file6f_credE_2463_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cred * __get__ZN4file6f_credE_2463(cred * *source) {
  ::cred *__result_buffer;
  typedef TJP__ZN4file6f_credE_2463_0< ::cred *, ::file , ::cred * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cred *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_socketE_2465_0 {
  typedef TJP__ZN4sock9sk_socketE_2465_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline socket * __get__ZN4sock9sk_socketE_2465(socket * *source) {
  ::socket *__result_buffer;
  typedef TJP__ZN4sock9sk_socketE_2465_0< ::socket *, ::sock , ::socket * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::socket *&)__result_buffer;
}
static inline struct user_namespace *sk_user_ns(struct sock *sk)
{




 return __get__ZN4cred7user_nsE_2462(&__get__ZN4file6f_credE_2463(&__get__ZN4sock9sk_socketE_2465(&sk->sk_socket)->file->f_cred)->user_ns);
}


enum sock_flags {
 SOCK_DEAD,
 SOCK_DONE,
 SOCK_URGINLINE,
 SOCK_KEEPOPEN,
 SOCK_LINGER,
 SOCK_DESTROY,
 SOCK_BROADCAST,
 SOCK_TIMESTAMP,
 SOCK_ZAPPED,
 SOCK_USE_WRITE_QUEUE,
 SOCK_DBG,
 SOCK_RCVTSTAMP,
 SOCK_RCVTSTAMPNS,
 SOCK_LOCALROUTE,
 SOCK_QUEUE_SHRUNK,
 SOCK_MEMALLOC,
 SOCK_TIMESTAMPING_TX_HARDWARE,
 SOCK_TIMESTAMPING_TX_SOFTWARE,
 SOCK_TIMESTAMPING_RX_HARDWARE,
 SOCK_TIMESTAMPING_RX_SOFTWARE,
 SOCK_TIMESTAMPING_SOFTWARE,
 SOCK_TIMESTAMPING_RAW_HARDWARE,
 SOCK_TIMESTAMPING_SYS_HARDWARE,
 SOCK_FASYNC,
 SOCK_RXQ_OVFL,
 SOCK_ZEROCOPY,
 SOCK_WIFI_STATUS,
 SOCK_NOFCS,



 SOCK_FILTER_LOCKED,
 SOCK_SELECT_ERR_QUEUE,
};


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock8sk_flagsE_2466_0 {
  typedef TJP__ZN4sock8sk_flagsE_2466_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN4sock8sk_flagsE_2466(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN4sock8sk_flagsE_2466_0< unsigned long int , ::sock , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void sock_copy_flags(struct sock *nsk, struct sock *osk)
{
 nsk->sk_flags = __get__ZN4sock8sk_flagsE_2466(&osk->sk_flags);
}

static inline void sock_set_flag(struct sock *sk, enum sock_flags flag)
{
 __set_bit(flag, &sk->sk_flags);
}

static inline void sock_reset_flag(struct sock *sk, enum sock_flags flag)
{
 __clear_bit(flag, &sk->sk_flags);
}

static inline bool sock_flag( struct sock *sk, enum sock_flags flag)
{
 return (__builtin_constant_p((flag)) ? constant_test_bit((flag), (&sk->sk_flags)) : variable_test_bit((flag), (&sk->sk_flags)));
}


extern struct static_key memalloc_socks;
static inline int sk_memalloc_socks(void)
{
 return static_key_false(&memalloc_socks);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock13sk_allocationE_2467_0 {
  typedef TJP__ZN4sock13sk_allocationE_2467_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock13sk_allocationE_2467(unsigned int *source) {
  ::gfp_t __result_buffer;
  typedef TJP__ZN4sock13sk_allocationE_2467_0< ::gfp_t , ::sock , ::gfp_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::gfp_t &)__result_buffer;
}
static inline gfp_t sk_gfp_atomic(struct sock *sk, gfp_t gfp_mask)
{
 return ((( gfp_t)0x20u)) | (__get__ZN4sock13sk_allocationE_2467(&sk->sk_allocation) & (( gfp_t)0x2000u));
}

static inline void sk_acceptq_removed(struct sock *sk)
{
 sk->sk_ack_backlog--;
}

static inline void sk_acceptq_added(struct sock *sk)
{
 sk->sk_ack_backlog++;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock14sk_ack_backlogE_2468_0 {
  typedef TJP__ZN4sock14sk_ack_backlogE_2468_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN4sock14sk_ack_backlogE_2468(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN4sock14sk_ack_backlogE_2468_0< unsigned short int , ::sock , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock18sk_max_ack_backlogE_2469_0 {
  typedef TJP__ZN4sock18sk_max_ack_backlogE_2469_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN4sock18sk_max_ack_backlogE_2469(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN4sock18sk_max_ack_backlogE_2469_0< unsigned short int , ::sock , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}
static inline bool sk_acceptq_is_full( struct sock *sk)
{
 return __get__ZN4sock14sk_ack_backlogE_2468(&sk->sk_ack_backlog) > __get__ZN4sock18sk_max_ack_backlogE_2469(&sk->sk_max_ack_backlog);
}





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock14sk_wmem_queuedE_2470_0 {
  typedef TJP__ZN4sock14sk_wmem_queuedE_2470_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock14sk_wmem_queuedE_2470(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock14sk_wmem_queuedE_2470_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sk_stream_min_wspace( struct sock *sk)
{
 return __get__ZN4sock14sk_wmem_queuedE_2470(&sk->sk_wmem_queued) >> 1;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_2471_0 {
  typedef TJP__ZN4sock9sk_sndbufE_2471_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_2471(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_2471_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock14sk_wmem_queuedE_2472_0 {
  typedef TJP__ZN4sock14sk_wmem_queuedE_2472_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock14sk_wmem_queuedE_2472(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock14sk_wmem_queuedE_2472_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sk_stream_wspace( struct sock *sk)
{
 return __get__ZN4sock9sk_sndbufE_2471(&sk->sk_sndbuf) - __get__ZN4sock14sk_wmem_queuedE_2472(&sk->sk_wmem_queued);
}

void sk_stream_write_space(struct sock *sk);



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock10sk_backlogE_2474_0 {
  typedef TJP__ZN4sock10sk_backlogE_2474_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock::_sk_backlog __get__ZN4sock10sk_backlogE_2474(sock::_sk_backlog *source) {
  AC::ResultBuffer< ::sock::_sk_backlog  > __result_buffer;
  typedef TJP__ZN4sock10sk_backlogE_2474_0< ::sock::_sk_backlog , ::sock , ::sock::_sk_backlog  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock::_sk_backlog &)__result_buffer;
}
static inline void __sk_add_backlog(struct sock *sk, struct sk_buff *skb)
{

 skb_dst_force(skb);

 if (!__get__ZN4sock10sk_backlogE_2474(&sk->sk_backlog).tail)
  sk->sk_backlog.head = skb;
 else
  sk->sk_backlog.tail->next = skb;

 sk->sk_backlog.tail = skb;
 skb->next = 0;
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock10sk_backlogE_2476_0 {
  typedef TJP__ZN4sock10sk_backlogE_2476_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock::_sk_backlog __get__ZN4sock10sk_backlogE_2476(sock::_sk_backlog *source) {
  AC::ResultBuffer< ::sock::_sk_backlog  > __result_buffer;
  typedef TJP__ZN4sock10sk_backlogE_2476_0< ::sock::_sk_backlog , ::sock , ::sock::_sk_backlog  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock::_sk_backlog &)__result_buffer;
}
static inline bool sk_rcvqueues_full( struct sock *sk, struct sk_buff *skb,
         unsigned int limit)
{
 unsigned int qsize = __get__ZN4sock10sk_backlogE_2476(&sk->sk_backlog).len + atomic_read(&sk->sk_backlog.rmem_alloc);

 return qsize > limit;
}


static inline int sk_add_backlog(struct sock *sk, struct sk_buff *skb,
           unsigned int limit)
{
 if (sk_rcvqueues_full(sk, skb, limit))
  return -105;

 __sk_add_backlog(sk, skb);
 sk->sk_backlog.len += skb->truesize;
 return 0;
}

int __sk_backlog_rcv(struct sock *sk, struct sk_buff *skb);

static inline int sk_backlog_rcv(struct sock *sk, struct sk_buff *skb)
{
 if (sk_memalloc_socks() && skb_pfmemalloc(skb))
  return __sk_backlog_rcv(sk, skb);

 return sk->sk_backlog_rcv(sk, skb);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_rxhashE_2480_0 {
  typedef TJP__ZN4sock9sk_rxhashE_2480_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock9sk_rxhashE_2480(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN4sock9sk_rxhashE_2480_0< ::__u32 , ::sock , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}
static inline void sock_rps_record_flow( struct sock *sk)
{

 struct rps_sock_flow_table *sock_flow_table;

 ;
 sock_flow_table = (rps_sock_flow_table);
 rps_record_sock_flow(sock_flow_table, __get__ZN4sock9sk_rxhashE_2480(&sk->sk_rxhash));
 ;

}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_rxhashE_2482_0 {
  typedef TJP__ZN4sock9sk_rxhashE_2482_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock9sk_rxhashE_2482(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN4sock9sk_rxhashE_2482_0< ::__u32 , ::sock , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}
static inline void sock_rps_reset_flow( struct sock *sk)
{

 struct rps_sock_flow_table *sock_flow_table;

 ;
 sock_flow_table = (rps_sock_flow_table);
 rps_reset_sock_flow(sock_flow_table, __get__ZN4sock9sk_rxhashE_2482(&sk->sk_rxhash));
 ;

}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_rxhashE_2483_0 {
  typedef TJP__ZN4sock9sk_rxhashE_2483_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock9sk_rxhashE_2483(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN4sock9sk_rxhashE_2483_0< ::__u32 , ::sock , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}
static inline void sock_rps_save_rxhash(struct sock *sk,
     struct sk_buff *skb)
{

 if (__builtin_expect(!!(__get__ZN4sock9sk_rxhashE_2483(&sk->sk_rxhash) != skb->rxhash), 0)) {
  sock_rps_reset_flow(sk);
  sk->sk_rxhash = skb->rxhash;
 }

}

static inline void sock_rps_reset_rxhash(struct sock *sk)
{

 sock_rps_reset_flow(sk);
 sk->sk_rxhash = 0;

}
int sk_stream_wait_connect(struct sock *sk, long *timeo_p);
int sk_stream_wait_memory(struct sock *sk, long *timeo_p);
void sk_stream_wait_close(struct sock *sk, long timeo_p);
int sk_stream_error(struct sock *sk, int flags, int err);
void sk_stream_kill_queues(struct sock *sk);
void sk_set_memalloc(struct sock *sk);
void sk_clear_memalloc(struct sock *sk);

int sk_wait_data(struct sock *sk, long *timeo);

struct request_sock_ops;
struct timewait_sock_ops;
struct inet_hashinfo;
struct raw_hashinfo;
struct module;





static inline void sk_prot_clear_nulls(struct sock *sk, int size)
{
 if (((size_t) &((struct sock *)0)->__sk_common.skc_node.next) != 0)
  memset(sk, 0, ((size_t) &((struct sock *)0)->__sk_common.skc_node.next));
 memset(&sk->__sk_common.skc_node.pprev, 0,
        size - ((size_t) &((struct sock *)0)->__sk_common.skc_node.pprev));
}





struct proto {
  template <typename, int = 0> struct __BYPASSproto {};
  template <typename, int> friend struct __BYPASSproto;
 void (*close)(struct sock *sk,
     long timeout);
 int (*connect)(struct sock *sk,
     struct sockaddr *uaddr,
     int addr_len);
 int (*disconnect)(struct sock *sk, int flags);

 struct sock * (*accept)(struct sock *sk, int flags, int *err);

 int (*ioctl)(struct sock *sk, int cmd,
      unsigned long arg);
 int (*init)(struct sock *sk);
 void (*destroy)(struct sock *sk);
 void (*shutdown)(struct sock *sk, int how);
 int (*setsockopt)(struct sock *sk, int level,
     int optname, char *optval,
     unsigned int optlen);
 int (*getsockopt)(struct sock *sk, int level,
     int optname, char *optval,
     int *option);

 int (*compat_setsockopt)(struct sock *sk,
     int level,
     int optname, char *optval,
     unsigned int optlen);
 int (*compat_getsockopt)(struct sock *sk,
     int level,
     int optname, char *optval,
     int *option);
 int (*compat_ioctl)(struct sock *sk,
     unsigned int cmd, unsigned long arg);

 int (*sendmsg)(struct kiocb *iocb, struct sock *sk,
        struct msghdr *msg, size_t len);
 int (*recvmsg)(struct kiocb *iocb, struct sock *sk,
        struct msghdr *msg,
        size_t len, int noblock, int flags,
        int *addr_len);
 int (*sendpage)(struct sock *sk, struct page *page,
     int offset, size_t size, int flags);
 int (*bind)(struct sock *sk,
     struct sockaddr *uaddr, int addr_len);

 int (*backlog_rcv) (struct sock *sk,
      struct sk_buff *skb);

 void (*release_cb)(struct sock *sk);
 void (*mtu_reduced)(struct sock *sk);


 void (*hash)(struct sock *sk);
 void (*unhash)(struct sock *sk);
 void (*rehash)(struct sock *sk);
 int (*get_port)(struct sock *sk, unsigned short snum);
 void (*clear_sk)(struct sock *sk, int size);



 unsigned int inuse_idx;


 bool (*stream_memory_free)( struct sock *sk);

 void (*enter_memory_pressure)(struct sock *sk);
 atomic_long_t *memory_allocated;
 struct percpu_counter *sockets_allocated;






 int *memory_pressure;
 long *sysctl_mem;
 int *sysctl_wmem;
 int *sysctl_rmem;
 int max_header;
 bool no_autobind;

 struct kmem_cache *slab;
 unsigned int obj_size;
 int slab_flags;

 struct percpu_counter *orphan_count;

 struct request_sock_ops *rsk_prot;
 struct timewait_sock_ops *twsk_prot;

 union {
  struct inet_hashinfo *hashinfo;
  struct udp_table *udp_table;
  struct raw_hashinfo *raw_hash;
 } h;

 struct module *owner;

 char name[32];

 struct list_head node;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




enum cg_proto_flags {

 MEMCG_SOCK_ACTIVE,

 MEMCG_SOCK_ACTIVATED,
};

struct cg_proto {
  template <typename, int = 0> struct __BYPASScg_proto {};
  template <typename, int> friend struct __BYPASScg_proto;
 struct res_counter memory_allocated;
 struct percpu_counter sockets_allocated;
 int memory_pressure;
 long sysctl_mem[3];
 unsigned long flags;
 struct mem_cgroup *memcg;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int proto_register(struct proto *prot, int alloc_slab);
void proto_unregister(struct proto *prot);

static inline bool memcg_proto_active(struct cg_proto *cg_proto)
{
 return (__builtin_constant_p((MEMCG_SOCK_ACTIVE)) ? constant_test_bit((MEMCG_SOCK_ACTIVE), (&cg_proto->flags)) : variable_test_bit((MEMCG_SOCK_ACTIVE), (&cg_proto->flags)));
}

static inline bool memcg_proto_activated(struct cg_proto *cg_proto)
{
 return (__builtin_constant_p((MEMCG_SOCK_ACTIVATED)) ? constant_test_bit((MEMCG_SOCK_ACTIVATED), (&cg_proto->flags)) : variable_test_bit((MEMCG_SOCK_ACTIVATED), (&cg_proto->flags)));
}
static inline struct cg_proto *parent_cg_proto(struct proto *proto,
            struct cg_proto *cg_proto)
{
 return 0;
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock14sk_wmem_queuedE_2492_0 {
  typedef TJP__ZN4sock14sk_wmem_queuedE_2492_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock14sk_wmem_queuedE_2492(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock14sk_wmem_queuedE_2492_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_2493_0 {
  typedef TJP__ZN4sock9sk_sndbufE_2493_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_2493(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_2493_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2497_0 {
  typedef TJP__ZN4sock11__sk_commonE_2497_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2497(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2497_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2500_0 {
  typedef TJP__ZN4sock11__sk_commonE_2500_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2500(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2500_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline bool sk_stream_memory_free( struct sock *sk)
{
 if (__get__ZN4sock14sk_wmem_queuedE_2492(&sk->sk_wmem_queued) >= __get__ZN4sock9sk_sndbufE_2493(&sk->sk_sndbuf))
  return _false;

 return __get__ZN4sock11__sk_commonE_2497(&sk->__sk_common).skc_prot->stream_memory_free ?
  __get__ZN4sock11__sk_commonE_2500(&sk->__sk_common).skc_prot->stream_memory_free(sk) : _true;
}

static inline bool sk_stream_is_writeable( struct sock *sk)
{
 return sk_stream_wspace(sk) >= sk_stream_min_wspace(sk) &&
        sk_stream_memory_free(sk);
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2504_0 {
  typedef TJP__ZN4sock11__sk_commonE_2504_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2504(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2504_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline bool sk_has_memory_pressure( struct sock *sk)
{
 return __get__ZN4sock11__sk_commonE_2504(&sk->__sk_common).skc_prot->memory_pressure != 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2507_0 {
  typedef TJP__ZN4sock11__sk_commonE_2507_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2507(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2507_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2509_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2509_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2509(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2509_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2511_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2511_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2511(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2511_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2514_0 {
  typedef TJP__ZN4sock11__sk_commonE_2514_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2514(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2514_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline bool sk_under_memory_pressure( struct sock *sk)
{
 if (!__get__ZN4sock11__sk_commonE_2507(&sk->__sk_common).skc_prot->memory_pressure)
  return _false;

 if (0 && __get__ZN4sock7sk_cgrpE_2509(&sk->sk_cgrp))
  return !!__get__ZN4sock7sk_cgrpE_2511(&sk->sk_cgrp)->memory_pressure;

 return !!*__get__ZN4sock11__sk_commonE_2514(&sk->__sk_common).skc_prot->memory_pressure;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2517_0 {
  typedef TJP__ZN4sock11__sk_commonE_2517_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2517(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2517_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2518_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2518_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2518(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2518_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2519_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2519_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2519(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2519_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2521_0 {
  typedef TJP__ZN4sock11__sk_commonE_2521_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2521(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2521_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline void sk_leave_memory_pressure(struct sock *sk)
{
 int *memory_pressure = __get__ZN4sock11__sk_commonE_2517(&sk->__sk_common).skc_prot->memory_pressure;

 if (!memory_pressure)
  return;

 if (*memory_pressure)
  *memory_pressure = 0;

 if (0 && __get__ZN4sock7sk_cgrpE_2518(&sk->sk_cgrp)) {
  struct cg_proto *cg_proto = __get__ZN4sock7sk_cgrpE_2519(&sk->sk_cgrp);
  struct proto *prot = __get__ZN4sock11__sk_commonE_2521(&sk->__sk_common).skc_prot;

  for (; cg_proto; cg_proto = parent_cg_proto(prot, cg_proto))
   cg_proto->memory_pressure = 0;
 }

}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2524_0 {
  typedef TJP__ZN4sock11__sk_commonE_2524_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2524(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2524_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2525_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2525_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2525(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2525_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2526_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2526_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2526(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2526_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2528_0 {
  typedef TJP__ZN4sock11__sk_commonE_2528_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2528(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2528_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2531_0 {
  typedef TJP__ZN4sock11__sk_commonE_2531_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2531(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2531_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline void sk_enter_memory_pressure(struct sock *sk)
{
 if (!__get__ZN4sock11__sk_commonE_2524(&sk->__sk_common).skc_prot->enter_memory_pressure)
  return;

 if (0 && __get__ZN4sock7sk_cgrpE_2525(&sk->sk_cgrp)) {
  struct cg_proto *cg_proto = __get__ZN4sock7sk_cgrpE_2526(&sk->sk_cgrp);
  struct proto *prot = __get__ZN4sock11__sk_commonE_2528(&sk->__sk_common).skc_prot;

  for (; cg_proto; cg_proto = parent_cg_proto(prot, cg_proto))
   cg_proto->memory_pressure = 1;
 }

 __get__ZN4sock11__sk_commonE_2531(&sk->__sk_common).skc_prot->enter_memory_pressure(sk);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2534_0 {
  typedef TJP__ZN4sock11__sk_commonE_2534_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2534(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2534_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2535_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2535_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2535(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2535_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2537_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2537_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2537(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2537_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}
static inline long sk_prot_mem_limits( struct sock *sk, int index)
{
 long *prot = __get__ZN4sock11__sk_commonE_2534(&sk->__sk_common).skc_prot->sysctl_mem;
 if (0 && __get__ZN4sock7sk_cgrpE_2535(&sk->sk_cgrp))
  prot = __get__ZN4sock7sk_cgrpE_2537(&sk->sk_cgrp)->sysctl_mem;
 return prot[index];
}

static inline void memcg_memory_allocated_add(struct cg_proto *prot,
           unsigned long amt,
           int *parent_status)
{
 struct res_counter *fail;
 int ret;

 ret = res_counter_charge_nofail(&prot->memory_allocated,
     amt << 12, &fail);
 if (ret < 0)
  *parent_status = OVER_LIMIT;
}

static inline void memcg_memory_allocated_sub(struct cg_proto *prot,
           unsigned long amt)
{
 res_counter_uncharge(&prot->memory_allocated, amt << 12);
}

static inline u64 memcg_memory_allocated_read(struct cg_proto *prot)
{
 u64 ret;
 ret = res_counter_read_u64(&prot->memory_allocated, RES_USAGE);
 return ret >> 12;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2541_0 {
  typedef TJP__ZN4sock11__sk_commonE_2541_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2541(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2541_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2542_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2542_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2542(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2542_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2543_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2543_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2543(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2543_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}
static inline long
sk_memory_allocated( struct sock *sk)
{
 struct proto *prot = __get__ZN4sock11__sk_commonE_2541(&sk->__sk_common).skc_prot;
 if (0 && __get__ZN4sock7sk_cgrpE_2542(&sk->sk_cgrp))
  return memcg_memory_allocated_read(__get__ZN4sock7sk_cgrpE_2543(&sk->sk_cgrp));

 return atomic_long_read(prot->memory_allocated);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2546_0 {
  typedef TJP__ZN4sock11__sk_commonE_2546_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2546(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2546_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2547_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2547_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2547(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2547_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2548_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2548_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2548(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2548_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2550_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2550_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2550(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2550_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}
static inline long
sk_memory_allocated_add(struct sock *sk, int amt, int *parent_status)
{
 struct proto *prot = __get__ZN4sock11__sk_commonE_2546(&sk->__sk_common).skc_prot;

 if (0 && __get__ZN4sock7sk_cgrpE_2547(&sk->sk_cgrp)) {
  memcg_memory_allocated_add(__get__ZN4sock7sk_cgrpE_2548(&sk->sk_cgrp), amt, parent_status);

  atomic_long_add_return(amt, prot->memory_allocated);
  return memcg_memory_allocated_read(__get__ZN4sock7sk_cgrpE_2550(&sk->sk_cgrp));
 }

 return atomic_long_add_return(amt, prot->memory_allocated);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2553_0 {
  typedef TJP__ZN4sock11__sk_commonE_2553_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2553(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2553_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2554_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2554_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2554(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2554_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2555_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2555_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2555(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2555_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}
static inline void
sk_memory_allocated_sub(struct sock *sk, int amt)
{
 struct proto *prot = __get__ZN4sock11__sk_commonE_2553(&sk->__sk_common).skc_prot;

 if (0 && __get__ZN4sock7sk_cgrpE_2554(&sk->sk_cgrp))
  memcg_memory_allocated_sub(__get__ZN4sock7sk_cgrpE_2555(&sk->sk_cgrp), amt);

 atomic_long_sub(amt, prot->memory_allocated);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2558_0 {
  typedef TJP__ZN4sock11__sk_commonE_2558_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2558(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2558_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2559_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2559_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2559(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2559_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2560_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2560_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2560(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2560_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}
static inline void sk_sockets_allocated_dec(struct sock *sk)
{
 struct proto *prot = __get__ZN4sock11__sk_commonE_2558(&sk->__sk_common).skc_prot;

 if (0 && __get__ZN4sock7sk_cgrpE_2559(&sk->sk_cgrp)) {
  struct cg_proto *cg_proto = __get__ZN4sock7sk_cgrpE_2560(&sk->sk_cgrp);

  for (; cg_proto; cg_proto = parent_cg_proto(prot, cg_proto))
   percpu_counter_dec(&cg_proto->sockets_allocated);
 }

 percpu_counter_dec(prot->sockets_allocated);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2563_0 {
  typedef TJP__ZN4sock11__sk_commonE_2563_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2563(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2563_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2564_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2564_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2564(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2564_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2565_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2565_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2565(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2565_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}
static inline void sk_sockets_allocated_inc(struct sock *sk)
{
 struct proto *prot = __get__ZN4sock11__sk_commonE_2563(&sk->__sk_common).skc_prot;

 if (0 && __get__ZN4sock7sk_cgrpE_2564(&sk->sk_cgrp)) {
  struct cg_proto *cg_proto = __get__ZN4sock7sk_cgrpE_2565(&sk->sk_cgrp);

  for (; cg_proto; cg_proto = parent_cg_proto(prot, cg_proto))
   percpu_counter_inc(&cg_proto->sockets_allocated);
 }

 percpu_counter_inc(prot->sockets_allocated);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2568_0 {
  typedef TJP__ZN4sock11__sk_commonE_2568_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2568(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2568_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_cgrpE_2569_0 {
  typedef TJP__ZN4sock7sk_cgrpE_2569_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline cg_proto * __get__ZN4sock7sk_cgrpE_2569(cg_proto * *source) {
  ::cg_proto *__result_buffer;
  typedef TJP__ZN4sock7sk_cgrpE_2569_0< ::cg_proto *, ::sock , ::cg_proto * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::cg_proto *&)__result_buffer;
}
static inline int
sk_sockets_allocated_read_positive(struct sock *sk)
{
 struct proto *prot = __get__ZN4sock11__sk_commonE_2568(&sk->__sk_common).skc_prot;

 if (0 && __get__ZN4sock7sk_cgrpE_2569(&sk->sk_cgrp))
  return percpu_counter_read_positive(&sk->sk_cgrp->sockets_allocated);

 return percpu_counter_read_positive(prot->sockets_allocated);
}

static inline int
proto_sockets_allocated_sum_positive(struct proto *prot)
{
 return percpu_counter_sum_positive(prot->sockets_allocated);
}

static inline long
proto_memory_allocated(struct proto *prot)
{
 return atomic_long_read(prot->memory_allocated);
}

static inline bool
proto_memory_pressure(struct proto *prot)
{
 if (!prot->memory_pressure)
  return _false;
 return !!*prot->memory_pressure;
}




void sock_prot_inuse_add(struct net *net, struct proto *prot, int inc);
int sock_prot_inuse_get(struct net *net, struct proto *proto);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2578_0 {
  typedef TJP__ZN4sock11__sk_commonE_2578_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2578(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2578_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2581_0 {
  typedef TJP__ZN4sock11__sk_commonE_2581_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2581(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2581_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline void __sk_prot_rehash(struct sock *sk)
{
 __get__ZN4sock11__sk_commonE_2578(&sk->__sk_common).skc_prot->unhash(sk);
 __get__ZN4sock11__sk_commonE_2581(&sk->__sk_common).skc_prot->hash(sk);
}

void sk_prot_clear_portaddr_nulls(struct sock *sk, int size);
struct sock_iocb {
  template <typename, int = 0> struct __BYPASSsock_iocb {};
  template <typename, int> friend struct __BYPASSsock_iocb;
 struct list_head list;

 int flags;
 int size;
 struct socket *sock;
 struct sock *sk;
 struct scm_cookie *scm;
 struct msghdr *msg, async_msg;
 struct kiocb *kiocb;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct sock_iocb *kiocb_to_siocb(struct kiocb *iocb)
{
 return (struct sock_iocb *)iocb->_private;
}

static inline struct kiocb *siocb_to_kiocb(struct sock_iocb *si)
{
 return si->kiocb;
}

struct socket_alloc {
  template <typename, int = 0> struct __BYPASSsocket_alloc {};
  template <typename, int> friend struct __BYPASSsocket_alloc;
 struct socket socket;
 struct inode vfs_inode;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct socket *SOCKET_I(struct inode *inode)
{
 return &({ typeof( ((struct socket_alloc *)0)->vfs_inode ) *__mptr = (inode); (struct socket_alloc *)( (char *)__mptr - ((size_t) &((struct socket_alloc *)0)->vfs_inode) );})->socket;
}

static inline struct inode *SOCK_INODE(struct socket *socket)
{
 return &({ typeof( ((struct socket_alloc *)0)->socket ) *__mptr = (socket); (struct socket_alloc *)( (char *)__mptr - ((size_t) &((struct socket_alloc *)0)->socket) );})->vfs_inode;
}




int __sk_mem_schedule(struct sock *sk, int size, int kind);
void __sk_mem_reclaim(struct sock *sk);






static inline int sk_mem_pages(int amt)
{
 return (amt + ((int)((1UL) << 12)) - 1) >> ( __builtin_constant_p(((int)((1UL) << 12))) ? ( (((int)((1UL) << 12))) < 1 ? ____ilog2_NaN() : (((int)((1UL) << 12))) & (1ULL << 63) ? 63 : (((int)((1UL) << 12))) & (1ULL << 62) ? 62 : (((int)((1UL) << 12))) & (1ULL << 61) ? 61 : (((int)((1UL) << 12))) & (1ULL << 60) ? 60 : (((int)((1UL) << 12))) & (1ULL << 59) ? 59 : (((int)((1UL) << 12))) & (1ULL << 58) ? 58 : (((int)((1UL) << 12))) & (1ULL << 57) ? 57 : (((int)((1UL) << 12))) & (1ULL << 56) ? 56 : (((int)((1UL) << 12))) & (1ULL << 55) ? 55 : (((int)((1UL) << 12))) & (1ULL << 54) ? 54 : (((int)((1UL) << 12))) & (1ULL << 53) ? 53 : (((int)((1UL) << 12))) & (1ULL << 52) ? 52 : (((int)((1UL) << 12))) & (1ULL << 51) ? 51 : (((int)((1UL) << 12))) & (1ULL << 50) ? 50 : (((int)((1UL) << 12))) & (1ULL << 49) ? 49 : (((int)((1UL) << 12))) & (1ULL << 48) ? 48 : (((int)((1UL) << 12))) & (1ULL << 47) ? 47 : (((int)((1UL) << 12))) & (1ULL << 46) ? 46 : (((int)((1UL) << 12))) & (1ULL << 45) ? 45 : (((int)((1UL) << 12))) & (1ULL << 44) ? 44 : (((int)((1UL) << 12))) & (1ULL << 43) ? 43 : (((int)((1UL) << 12))) & (1ULL << 42) ? 42 : (((int)((1UL) << 12))) & (1ULL << 41) ? 41 : (((int)((1UL) << 12))) & (1ULL << 40) ? 40 : (((int)((1UL) << 12))) & (1ULL << 39) ? 39 : (((int)((1UL) << 12))) & (1ULL << 38) ? 38 : (((int)((1UL) << 12))) & (1ULL << 37) ? 37 : (((int)((1UL) << 12))) & (1ULL << 36) ? 36 : (((int)((1UL) << 12))) & (1ULL << 35) ? 35 : (((int)((1UL) << 12))) & (1ULL << 34) ? 34 : (((int)((1UL) << 12))) & (1ULL << 33) ? 33 : (((int)((1UL) << 12))) & (1ULL << 32) ? 32 : (((int)((1UL) << 12))) & (1ULL << 31) ? 31 : (((int)((1UL) << 12))) & (1ULL << 30) ? 30 : (((int)((1UL) << 12))) & (1ULL << 29) ? 29 : (((int)((1UL) << 12))) & (1ULL << 28) ? 28 : (((int)((1UL) << 12))) & (1ULL << 27) ? 27 : (((int)((1UL) << 12))) & (1ULL << 26) ? 26 : (((int)((1UL) << 12))) & (1ULL << 25) ? 25 : (((int)((1UL) << 12))) & (1ULL << 24) ? 24 : (((int)((1UL) << 12))) & (1ULL << 23) ? 23 : (((int)((1UL) << 12))) & (1ULL << 22) ? 22 : (((int)((1UL) << 12))) & (1ULL << 21) ? 21 : (((int)((1UL) << 12))) & (1ULL << 20) ? 20 : (((int)((1UL) << 12))) & (1ULL << 19) ? 19 : (((int)((1UL) << 12))) & (1ULL << 18) ? 18 : (((int)((1UL) << 12))) & (1ULL << 17) ? 17 : (((int)((1UL) << 12))) & (1ULL << 16) ? 16 : (((int)((1UL) << 12))) & (1ULL << 15) ? 15 : (((int)((1UL) << 12))) & (1ULL << 14) ? 14 : (((int)((1UL) << 12))) & (1ULL << 13) ? 13 : (((int)((1UL) << 12))) & (1ULL << 12) ? 12 : (((int)((1UL) << 12))) & (1ULL << 11) ? 11 : (((int)((1UL) << 12))) & (1ULL << 10) ? 10 : (((int)((1UL) << 12))) & (1ULL << 9) ? 9 : (((int)((1UL) << 12))) & (1ULL << 8) ? 8 : (((int)((1UL) << 12))) & (1ULL << 7) ? 7 : (((int)((1UL) << 12))) & (1ULL << 6) ? 6 : (((int)((1UL) << 12))) & (1ULL << 5) ? 5 : (((int)((1UL) << 12))) & (1ULL << 4) ? 4 : (((int)((1UL) << 12))) & (1ULL << 3) ? 3 : (((int)((1UL) << 12))) & (1ULL << 2) ? 2 : (((int)((1UL) << 12))) & (1ULL << 1) ? 1 : (((int)((1UL) << 12))) & (1ULL << 0) ? 0 : ____ilog2_NaN() ) : (sizeof(((int)((1UL) << 12))) <= 4) ? __ilog2_u32(((int)((1UL) << 12))) : __ilog2_u64(((int)((1UL) << 12))) );
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2586_0 {
  typedef TJP__ZN4sock11__sk_commonE_2586_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2586(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2586_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline bool sk_has_account(struct sock *sk)
{

 return !!__get__ZN4sock11__sk_commonE_2586(&sk->__sk_common).skc_prot->memory_allocated;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock16sk_forward_allocE_2588_0 {
  typedef TJP__ZN4sock16sk_forward_allocE_2588_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock16sk_forward_allocE_2588(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock16sk_forward_allocE_2588_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline bool sk_wmem_schedule(struct sock *sk, int size)
{
 if (!sk_has_account(sk))
  return _true;
 return size <= __get__ZN4sock16sk_forward_allocE_2588(&sk->sk_forward_alloc) ||
  __sk_mem_schedule(sk, size, 0);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock16sk_forward_allocE_2590_0 {
  typedef TJP__ZN4sock16sk_forward_allocE_2590_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock16sk_forward_allocE_2590(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock16sk_forward_allocE_2590_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline bool
sk_rmem_schedule(struct sock *sk, struct sk_buff *skb, int size)
{
 if (!sk_has_account(sk))
  return _true;
 return size<= __get__ZN4sock16sk_forward_allocE_2590(&sk->sk_forward_alloc) ||
  __sk_mem_schedule(sk, size, 1) ||
  skb_pfmemalloc(skb);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock16sk_forward_allocE_2591_0 {
  typedef TJP__ZN4sock16sk_forward_allocE_2591_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock16sk_forward_allocE_2591(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock16sk_forward_allocE_2591_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline void sk_mem_reclaim(struct sock *sk)
{
 if (!sk_has_account(sk))
  return;
 if (__get__ZN4sock16sk_forward_allocE_2591(&sk->sk_forward_alloc) >= ((int)((1UL) << 12)))
  __sk_mem_reclaim(sk);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock16sk_forward_allocE_2592_0 {
  typedef TJP__ZN4sock16sk_forward_allocE_2592_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock16sk_forward_allocE_2592(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock16sk_forward_allocE_2592_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline void sk_mem_reclaim_partial(struct sock *sk)
{
 if (!sk_has_account(sk))
  return;
 if (__get__ZN4sock16sk_forward_allocE_2592(&sk->sk_forward_alloc) > ((int)((1UL) << 12)))
  __sk_mem_reclaim(sk);
}

static inline void sk_mem_charge(struct sock *sk, int size)
{
 if (!sk_has_account(sk))
  return;
 sk->sk_forward_alloc -= size;
}

static inline void sk_mem_uncharge(struct sock *sk, int size)
{
 if (!sk_has_account(sk))
  return;
 sk->sk_forward_alloc += size;
}

static inline void sk_wmem_free_skb(struct sock *sk, struct sk_buff *skb)
{
 sock_set_flag(sk, SOCK_QUEUE_SHRUNK);
 sk->sk_wmem_queued -= skb->truesize;
 sk_mem_uncharge(sk, skb->truesize);
 __kfree_skb(skb);
}
static inline void sock_release_ownership(struct sock *sk)
{
 sk->sk_lock.owned = 0;
}
void lock_sock_nested(struct sock *sk, int subclass);

static inline void lock_sock(struct sock *sk)
{
 lock_sock_nested(sk, 0);
}

void release_sock(struct sock *sk);
bool lock_sock_fast(struct sock *sk);
static inline void unlock_sock_fast(struct sock *sk, bool slow)
{
 if (slow)
  release_sock(sk);
 else
  ;
}


struct sock *sk_alloc(struct net *net, int family, gfp_t priority,
        struct proto *prot);
void sk_free(struct sock *sk);
void sk_release_kernel(struct sock *sk);
struct sock *sk_clone_lock( struct sock *sk, gfp_t priority);

struct sk_buff *sock_wmalloc(struct sock *sk, unsigned long size, int force,
        gfp_t priority);
struct sk_buff *sock_rmalloc(struct sock *sk, unsigned long size, int force,
        gfp_t priority);
void sock_wfree(struct sk_buff *skb);
void skb_orphan_partial(struct sk_buff *skb);
void sock_rfree(struct sk_buff *skb);
void sock_edemux(struct sk_buff *skb);

int sock_setsockopt(struct socket *sock, int level, int op,
      char *optval, unsigned int optlen);

int sock_getsockopt(struct socket *sock, int level, int op,
      char *optval, int *optlen);
struct sk_buff *sock_alloc_send_skb(struct sock *sk, unsigned long size,
        int noblock, int *errcode);
struct sk_buff *sock_alloc_send_pskb(struct sock *sk, unsigned long header_len,
         unsigned long data_len, int noblock,
         int *errcode, int max_page_order);
void *sock_kmalloc(struct sock *sk, int size, gfp_t priority);
void sock_kfree_s(struct sock *sk, void *mem, int size);
void sk_send_sigurg(struct sock *sk);





int sock_no_bind(struct socket *, struct sockaddr *, int);
int sock_no_connect(struct socket *, struct sockaddr *, int, int);
int sock_no_socketpair(struct socket *, struct socket *);
int sock_no_accept(struct socket *, struct socket *, int);
int sock_no_getname(struct socket *, struct sockaddr *, int *, int);
unsigned int sock_no_poll(struct file *, struct socket *,
     struct poll_table_struct *);
int sock_no_ioctl(struct socket *, unsigned int, unsigned long);
int sock_no_listen(struct socket *, int);
int sock_no_shutdown(struct socket *, int);
int sock_no_getsockopt(struct socket *, int , int, char *, int *);
int sock_no_setsockopt(struct socket *, int, int, char *, unsigned int);
int sock_no_sendmsg(struct kiocb *, struct socket *, struct msghdr *, size_t);
int sock_no_recvmsg(struct kiocb *, struct socket *, struct msghdr *, size_t,
      int);
int sock_no_mmap(struct file *file, struct socket *sock,
   struct vm_area_struct *vma);
ssize_t sock_no_sendpage(struct socket *sock, struct page *page, int offset,
    size_t size, int flags);





int sock_common_getsockopt(struct socket *sock, int level, int optname,
      char *optval, int *optlen);
int sock_common_recvmsg(struct kiocb *iocb, struct socket *sock,
          struct msghdr *msg, size_t size, int flags);
int sock_common_setsockopt(struct socket *sock, int level, int optname,
      char *optval, unsigned int optlen);
int compat_sock_common_getsockopt(struct socket *sock, int level,
  int optname, char *optval, int *optlen);
int compat_sock_common_setsockopt(struct socket *sock, int level,
  int optname, char *optval, unsigned int optlen);

void sk_common_release(struct sock *sk);






void sock_init_data(struct socket *sock, struct sock *sk);

void sk_filter_release_rcu(struct callback_head *rcu);
static inline void sk_filter_release(struct sk_filter *fp)
{
 if (1)
  ;
}

static inline void sk_filter_uncharge(struct sock *sk, struct sk_filter *fp)
{
 ;
 sk_filter_release(fp);
}

static inline void sk_filter_charge(struct sock *sk, struct sk_filter *fp)
{
 ;
 ;
}
static inline void sock_put(struct sock *sk)
{
 if (1)
  sk_free(sk);
}



void sock_gen_put(struct sock *sk);

int sk_receive_skb(struct sock *sk, struct sk_buff *skb, int nested);

static inline void sk_tx_queue_set(struct sock *sk, int tx_queue)
{
 sk->__sk_common.skc_tx_queue_mapping = tx_queue;
}

static inline void sk_tx_queue_clear(struct sock *sk)
{
 sk->__sk_common.skc_tx_queue_mapping = -1;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2597_0 {
  typedef TJP__ZN4sock11__sk_commonE_2597_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2597(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2597_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline int sk_tx_queue_get( struct sock *sk)
{
 return sk ? __get__ZN4sock11__sk_commonE_2597(&sk->__sk_common).skc_tx_queue_mapping : -1;
}

static inline void sk_set_socket(struct sock *sk, struct socket *sock)
{
 sk_tx_queue_clear(sk);
 sk->sk_socket = sock;
}

static inline wait_queue_head_t *sk_sleep(struct sock *sk)
{
 (0);
 return &(sk->sk_wq)->wait;
}







static inline void sock_orphan(struct sock *sk)
{
 ;
 sock_set_flag(sk, SOCK_DEAD);
 sk_set_socket(sk, 0);
 sk->sk_wq = 0;
 ;
}

static inline void sock_graft(struct sock *sk, struct socket *parent)
{
 ;
 sk->sk_wq = parent->wq;
 parent->sk = sk;
 sk_set_socket(sk, parent);
 security_sock_graft(sk, parent);
 ;
}

kuid_t sock_i_uid(struct sock *sk);
unsigned long sock_i_ino(struct sock *sk);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock12sk_dst_cacheE_2600_0 {
  typedef TJP__ZN4sock12sk_dst_cacheE_2600_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dst_entry * __get__ZN4sock12sk_dst_cacheE_2600(dst_entry * *source) {
  ::dst_entry *__result_buffer;
  typedef TJP__ZN4sock12sk_dst_cacheE_2600_0< ::dst_entry *, ::sock , ::dst_entry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dst_entry *&)__result_buffer;
}
static inline struct dst_entry *
__sk_dst_get(struct sock *sk)
{
 return (__get__ZN4sock12sk_dst_cacheE_2600(&sk->sk_dst_cache))
                                                 ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock12sk_dst_cacheE_2601_0 {
  typedef TJP__ZN4sock12sk_dst_cacheE_2601_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dst_entry * __get__ZN4sock12sk_dst_cacheE_2601(dst_entry * *source) {
  ::dst_entry *__result_buffer;
  typedef TJP__ZN4sock12sk_dst_cacheE_2601_0< ::dst_entry *, ::sock , ::dst_entry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dst_entry *&)__result_buffer;
}
static inline struct dst_entry *
sk_dst_get(struct sock *sk)
{
 struct dst_entry *dst;

 ;
 dst = (__get__ZN4sock12sk_dst_cacheE_2601(&sk->sk_dst_cache));
 if (dst)
  dst_hold(dst);
 ;
 return dst;
}

static inline void dst_negative_advice(struct sock *sk)
{
 struct dst_entry *ndst, *dst = __sk_dst_get(sk);

 if (dst && dst->ops->negative_advice) {
  ndst = dst->ops->negative_advice(dst);

  if (ndst != dst) {
   ({ (sk->sk_dst_cache) = (ndst); });
   sk_tx_queue_clear(sk);
  }
 }
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock12sk_dst_cacheE_2606_0 {
  typedef TJP__ZN4sock12sk_dst_cacheE_2606_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline dst_entry * __get__ZN4sock12sk_dst_cacheE_2606(dst_entry * *source) {
  ::dst_entry *__result_buffer;
  typedef TJP__ZN4sock12sk_dst_cacheE_2606_0< ::dst_entry *, ::sock , ::dst_entry * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::dst_entry *&)__result_buffer;
}
static inline void
__sk_dst_set(struct sock *sk, struct dst_entry *dst)
{
 struct dst_entry *old_dst;

 sk_tx_queue_clear(sk);




 old_dst = (__get__ZN4sock12sk_dst_cacheE_2606(&sk->sk_dst_cache));
 ({ (sk->sk_dst_cache) = (dst); });
 dst_release(old_dst);
}

static inline void
sk_dst_set(struct sock *sk, struct dst_entry *dst)
{
 ;
 __sk_dst_set(sk, dst);
 ;
}

static inline void
__sk_dst_reset(struct sock *sk)
{
 __sk_dst_set(sk, 0);
}

static inline void
sk_dst_reset(struct sock *sk)
{
 ;
 __sk_dst_reset(sk);
 ;
}

struct dst_entry *__sk_dst_check(struct sock *sk, u32 cookie);

struct dst_entry *sk_dst_check(struct sock *sk, u32 cookie);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock13sk_route_capsE_2607_0 {
  typedef TJP__ZN4sock13sk_route_capsE_2607_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long long int __get__ZN4sock13sk_route_capsE_2607(unsigned long long int *source) {
  ::netdev_features_t __result_buffer;
  typedef TJP__ZN4sock13sk_route_capsE_2607_0< ::netdev_features_t , ::sock , ::netdev_features_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_features_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_gso_typeE_2608_0 {
  typedef TJP__ZN4sock11sk_gso_typeE_2608_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock11sk_gso_typeE_2608(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock11sk_gso_typeE_2608_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline bool sk_can_gso( struct sock *sk)
{
 return net_gso_ok(__get__ZN4sock13sk_route_capsE_2607(&sk->sk_route_caps), __get__ZN4sock11sk_gso_typeE_2608(&sk->sk_gso_type));
}

void sk_setup_caps(struct sock *sk, struct dst_entry *dst);

static inline void sk_nocaps_add(struct sock *sk, netdev_features_t flags)
{
 sk->sk_route_nocaps |= flags;
 sk->sk_route_caps &= ~flags;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock13sk_route_capsE_2611_0 {
  typedef TJP__ZN4sock13sk_route_capsE_2611_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long long int __get__ZN4sock13sk_route_capsE_2611(unsigned long long int *source) {
  ::netdev_features_t __result_buffer;
  typedef TJP__ZN4sock13sk_route_capsE_2611_0< ::netdev_features_t , ::sock , ::netdev_features_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netdev_features_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11thread_info10addr_limitE_2613_0 {
  typedef TJP__ZN11thread_info10addr_limitE_2613_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline mm_segment_t __get__ZN11thread_info10addr_limitE_2613(mm_segment_t *source) {
  AC::ResultBuffer< ::mm_segment_t  > __result_buffer;
  typedef TJP__ZN11thread_info10addr_limitE_2613_0< ::mm_segment_t , ::thread_info , ::mm_segment_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::mm_segment_t &)__result_buffer;
}
static inline int skb_do_copy_data_nocache(struct sock *sk, struct sk_buff *skb,
        char *from, char *to,
        int copy, int offset)
{
 if (skb->ip_summed == 0) {
  int err = 0;
  __wsum csum = csum_partial_copy_from_user(from, to, copy, 0, &err);
  if (err)
   return err;
  skb->csum = csum_block_add(skb->csum, csum, offset);
 } else if (__get__ZN4sock13sk_route_capsE_2611(&sk->sk_route_caps) & ((netdev_features_t)1 << (NETIF_F_NOCACHE_COPY_BIT))) {
  if (!(__builtin_expect(!!(({ unsigned long flag, roksum; (void)0; asm("add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0" : "=&r" (flag), "=r" (roksum) : "1" (from), "g" ((long)(copy)), "rm" ((__get__ZN11thread_info10addr_limitE_2613(&current_thread_info()->addr_limit).seg))); flag; }) == 0), 1)) ||
      __copy_from_user_nocache(to, from, copy))
   return -14;
 } else if (copy_from_user(to, from, copy))
  return -14;

 return 0;
}

static inline int skb_add_data_nocache(struct sock *sk, struct sk_buff *skb,
           char *from, int copy)
{
 int err, offset = skb->len;





 err = skb_do_copy_data_nocache(sk, skb, from, (char *)skb_put(skb, copy),
           copy, offset);

 if (err)
  __skb_trim(skb, offset);

 return err;
}

static inline int skb_copy_to_page_nocache(struct sock *sk, char *from,
        struct sk_buff *skb,
        struct page *page,
        int off, int copy)
{
 int err;





 err = skb_do_copy_data_nocache(sk, skb, from, (char *)(lowmem_page_address(page) + off),
           copy, skb->len);

 if (err)
  return err;

 skb->len += copy;
 skb->data_len += copy;
 skb->truesize += copy;
 sk->sk_wmem_queued += copy;
 sk_mem_charge(sk, copy);
 return 0;
}

static inline int skb_copy_to_page(struct sock *sk, char *from,
       struct sk_buff *skb, struct page *page,
       int off, int copy)
{
 if (skb->ip_summed == 0) {
  int err = 0;
  __wsum csum = csum_partial_copy_from_user(from,
           lowmem_page_address(page) + off,
           copy, 0, &err);
  if (err)
   return err;
  skb->csum = csum_block_add(skb->csum, csum, skb->len);
 } else if (copy_from_user(lowmem_page_address(page) + off, from, copy))
  return -14;

 skb->len += copy;
 skb->data_len += copy;
 skb->truesize += copy;
 sk->sk_wmem_queued += copy;
 sk_mem_charge(sk, copy);
 return 0;
}







static inline int sk_wmem_alloc_get( struct sock *sk)
{
 return atomic_read(&sk->sk_wmem_alloc) - 1;
}







static inline int sk_rmem_alloc_get( struct sock *sk)
{
 return atomic_read(&sk->sk_backlog.rmem_alloc);
}







static inline bool sk_has_allocations( struct sock *sk)
{
 return sk_wmem_alloc_get(sk) || sk_rmem_alloc_get(sk);
}
static inline bool wq_has_sleeper(struct socket_wq *wq)
{





 asm ("mfence":::"memory");
 return wq && waitqueue_active(&wq->wait);
}
static inline void sock_poll_wait(struct file *filp,
  wait_queue_head_t *wait_address, poll_table *p)
{
 if (!poll_does_not_wait(p) && wait_address) {
  poll_wait(filp, wait_address, p);





  asm ("mfence":::"memory");
 }
}
static inline void skb_set_owner_w(struct sk_buff *skb, struct sock *sk)
{
 skb_orphan(skb);
 skb->sk = sk;
 skb->destructor = sock_wfree;





 ;
}

static inline void skb_set_owner_r(struct sk_buff *skb, struct sock *sk)
{
 skb_orphan(skb);
 skb->sk = sk;
 skb->destructor = sock_rfree;
 ;
 sk_mem_charge(sk, skb->truesize);
}

void sk_reset_timer(struct sock *sk, struct timer_list *timer,
      unsigned long expires);

void sk_stop_timer(struct sock *sk, struct timer_list *timer);

int sock_queue_rcv_skb(struct sock *sk, struct sk_buff *skb);

int sock_queue_err_skb(struct sock *sk, struct sk_buff *skb);






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock6sk_errE_2620_0 {
  typedef TJP__ZN4sock6sk_errE_2620_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock6sk_errE_2620(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock6sk_errE_2620_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sock_error(struct sock *sk)
{
 int err;
 if (__builtin_expect(!!(!__get__ZN4sock6sk_errE_2620(&sk->sk_err)), 1))
  return 0;
 err = ({ __typeof__ (*((&sk->sk_err))) __ret = ((0)); switch (sizeof(*((&sk->sk_err)))) { case 1: asm ("" "xchg" "b %b0, %1\n" : "+q" (__ret), "+m" (*((&sk->sk_err))) : : "memory", "cc"); break; case 2: asm ("" "xchg" "w %w0, %1\n" : "+r" (__ret), "+m" (*((&sk->sk_err))) : : "memory", "cc"); break; case 4: asm ("" "xchg" "l %0, %1\n" : "+r" (__ret), "+m" (*((&sk->sk_err))) : : "memory", "cc"); break; case 8: asm ("" "xchg" "q %q0, %1\n" : "+r" (__ret), "+m" (*((&sk->sk_err))) : : "memory", "cc"); break; default: __xchg_wrong_size(); } __ret; });
 return -err;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_state2E_2622_0 {
  typedef TJP__ZN4sock9sk_state2E_2622_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock::_sk_state2 __get__ZN4sock9sk_state2E_2622(sock::_sk_state2 *source) {
  AC::ResultBuffer< ::sock::_sk_state2  > __result_buffer;
  typedef TJP__ZN4sock9sk_state2E_2622_0< ::sock::_sk_state2 , ::sock , ::sock::_sk_state2  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock::_sk_state2 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_2623_0 {
  typedef TJP__ZN4sock9sk_sndbufE_2623_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_2623(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_2623_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline unsigned long sock_wspace(struct sock *sk)
{
 int amt = 0;

 if (!(__get__ZN4sock9sk_state2E_2622(&sk->sk_state2).sk_shutdown & 2)) {
  amt = __get__ZN4sock9sk_sndbufE_2623(&sk->sk_sndbuf) - atomic_read(&sk->sk_wmem_alloc);
  if (amt < 0)
   amt = 0;
 }
 return amt;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_socketE_2625_0 {
  typedef TJP__ZN4sock9sk_socketE_2625_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline socket * __get__ZN4sock9sk_socketE_2625(socket * *source) {
  ::socket *__result_buffer;
  typedef TJP__ZN4sock9sk_socketE_2625_0< ::socket *, ::sock , ::socket * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::socket *&)__result_buffer;
}
static inline void sk_wake_async(struct sock *sk, int how, int band)
{
 if (sock_flag(sk, SOCK_FASYNC))
  sock_wake_async(__get__ZN4sock9sk_socketE_2625(&sk->sk_socket), how, band);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_state2E_2627_0 {
  typedef TJP__ZN4sock9sk_state2E_2627_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock::_sk_state2 __get__ZN4sock9sk_state2E_2627(sock::_sk_state2 *source) {
  AC::ResultBuffer< ::sock::_sk_state2  > __result_buffer;
  typedef TJP__ZN4sock9sk_state2E_2627_0< ::sock::_sk_state2 , ::sock , ::sock::_sk_state2  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock::_sk_state2 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_2628_0 {
  typedef TJP__ZN4sock9sk_sndbufE_2628_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_2628(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_2628_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock14sk_wmem_queuedE_2629_0 {
  typedef TJP__ZN4sock14sk_wmem_queuedE_2629_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock14sk_wmem_queuedE_2629(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock14sk_wmem_queuedE_2629_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_2630_0 {
  typedef TJP__ZN4sock9sk_sndbufE_2630_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_2630(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_2630_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline void sk_stream_moderate_sndbuf(struct sock *sk)
{
 if (!(__get__ZN4sock9sk_state2E_2627(&sk->sk_state2).sk_userlocks & 1)) {
  sk->sk_sndbuf = ({ typeof(sk->sk_sndbuf) _min1 = (__get__ZN4sock9sk_sndbufE_2628(&sk->sk_sndbuf)); typeof(sk->sk_wmem_queued >> 1) _min2 = (__get__ZN4sock14sk_wmem_queuedE_2629(&sk->sk_wmem_queued) >> 1); (void) (&_min1 == &_min2); _min1 < _min2 ? _min1 : _min2; });
  sk->sk_sndbuf = ({ u32 __max1 = (__get__ZN4sock9sk_sndbufE_2630(&sk->sk_sndbuf)); u32 __max2 = (((2048 + (((sizeof(struct sk_buff)) + ((1 << (6)) - 1)) & ~((1 << (6)) - 1))) * 2)); __max1 > __max2 ? __max1: __max2; });
 }
}

struct sk_buff *sk_stream_alloc_skb(struct sock *sk, int size, gfp_t gfp);

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock13sk_allocationE_2631_0 {
  typedef TJP__ZN4sock13sk_allocationE_2631_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock13sk_allocationE_2631(unsigned int *source) {
  ::gfp_t __result_buffer;
  typedef TJP__ZN4sock13sk_allocationE_2631_0< ::gfp_t , ::sock , ::gfp_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::gfp_t &)__result_buffer;
}
static inline struct page_frag *sk_page_frag(struct sock *sk)
{
 if (__get__ZN4sock13sk_allocationE_2631(&sk->sk_allocation) & (( gfp_t)0x10u))
  return &get_current()->task_frag;

 return &sk->sk_frag;
}

bool sk_page_frag_refill(struct sock *sk, struct page_frag *pfrag);





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock9sk_sndbufE_2632_0 {
  typedef TJP__ZN4sock9sk_sndbufE_2632_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock9sk_sndbufE_2632(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock9sk_sndbufE_2632_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline bool sock_writeable( struct sock *sk)
{
 return atomic_read(&sk->sk_wmem_alloc) < (__get__ZN4sock9sk_sndbufE_2632(&sk->sk_sndbuf) >> 1);
}

static inline gfp_t gfp_any(void)
{
 return ((preempt_count() & (((1UL << (8))-1) << (0 + 8)))) ? ((( gfp_t)0x20u)) : ((( gfp_t)0x10u) | (( gfp_t)0x40u) | (( gfp_t)0x80u));
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_rcvtimeoE_2633_0 {
  typedef TJP__ZN4sock11sk_rcvtimeoE_2633_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long int __get__ZN4sock11sk_rcvtimeoE_2633(long int *source) {
  long int __result_buffer;
  typedef TJP__ZN4sock11sk_rcvtimeoE_2633_0< long int , ::sock , long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (long int &)__result_buffer;
}
static inline long sock_rcvtimeo( struct sock *sk, bool noblock)
{
 return noblock ? 0 : __get__ZN4sock11sk_rcvtimeoE_2633(&sk->sk_rcvtimeo);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_sndtimeoE_2634_0 {
  typedef TJP__ZN4sock11sk_sndtimeoE_2634_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline long int __get__ZN4sock11sk_sndtimeoE_2634(long int *source) {
  long int __result_buffer;
  typedef TJP__ZN4sock11sk_sndtimeoE_2634_0< long int , ::sock , long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (long int &)__result_buffer;
}
static inline long sock_sndtimeo( struct sock *sk, bool noblock)
{
 return noblock ? 0 : __get__ZN4sock11sk_sndtimeoE_2634(&sk->sk_sndtimeo);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11sk_rcvlowatE_2635_0 {
  typedef TJP__ZN4sock11sk_rcvlowatE_2635_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN4sock11sk_rcvlowatE_2635(int *source) {
  int __result_buffer;
  typedef TJP__ZN4sock11sk_rcvlowatE_2635_0< int , ::sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int sock_rcvlowat( struct sock *sk, int waitall, int len)
{



 int x = (waitall ? len : ({ int __min1 = (__get__ZN4sock11sk_rcvlowatE_2635(&sk->sk_rcvlowat)); int __min2 = (len); __min1 < __min2 ? __min1: __min2; }));
        return x ? x : 1;

}




static inline int sock_intr_errno(long timeo)
{
 return timeo == ((long)(~0UL>>1)) ? -512 : -4;
}

void __sock_recv_timestamp(struct msghdr *msg, struct sock *sk,
      struct sk_buff *skb);
void __sock_recv_wifi_status(struct msghdr *msg, struct sock *sk,
        struct sk_buff *skb);

static inline void
sock_recv_timestamp(struct msghdr *msg, struct sock *sk, struct sk_buff *skb)
{
 ktime_t kt = skb->tstamp;
 struct skb_shared_hwtstamps *hwtstamps = skb_hwtstamps(skb);
 if (sock_flag(sk, SOCK_RCVTSTAMP) ||
     sock_flag(sk, SOCK_TIMESTAMPING_RX_SOFTWARE) ||
     (kt.tv64 && sock_flag(sk, SOCK_TIMESTAMPING_SOFTWARE)) ||
     (hwtstamps->hwtstamp.tv64 &&
      sock_flag(sk, SOCK_TIMESTAMPING_RAW_HARDWARE)) ||
     (hwtstamps->syststamp.tv64 &&
      sock_flag(sk, SOCK_TIMESTAMPING_SYS_HARDWARE)))
  __sock_recv_timestamp(msg, sk, skb);
 else
  sk->sk_stamp = kt;

 if (sock_flag(sk, SOCK_WIFI_STATUS) && skb->wifi_acked_valid)
  __sock_recv_wifi_status(msg, sk, skb);
}

void __sock_recv_ts_and_drops(struct msghdr *msg, struct sock *sk,
         struct sk_buff *skb);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock8sk_flagsE_2649_0 {
  typedef TJP__ZN4sock8sk_flagsE_2649_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN4sock8sk_flagsE_2649(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN4sock8sk_flagsE_2649_0< unsigned long int , ::sock , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline void sock_recv_ts_and_drops(struct msghdr *msg, struct sock *sk,
       struct sk_buff *skb)
{







 if (__get__ZN4sock8sk_flagsE_2649(&sk->sk_flags) & ((1UL << SOCK_RXQ_OVFL) | (1UL << SOCK_RCVTSTAMP) | (1UL << SOCK_TIMESTAMPING_RX_SOFTWARE) | (1UL << SOCK_TIMESTAMPING_SOFTWARE) | (1UL << SOCK_TIMESTAMPING_RAW_HARDWARE) | (1UL << SOCK_TIMESTAMPING_SYS_HARDWARE)))
  __sock_recv_ts_and_drops(msg, sk, skb);
 else
  sk->sk_stamp = skb->tstamp;
}
void sock_tx_timestamp(struct sock *sk, __u8 *tx_flags);
static inline void sk_eat_skb(struct sock *sk, struct sk_buff *skb, bool copied_early)
{
 __skb_unlink(skb, &sk->sk_receive_queue);
 __kfree_skb(skb);
}


static inline
struct net *sock_net( struct sock *sk)
{
 return read_pnet(&sk->__sk_common.skc_net);
}

static inline
void sock_net_set(struct sock *sk, struct net *net)
{
 write_pnet(&sk->__sk_common.skc_net, net);
}







static inline void sk_change_net(struct sock *sk, struct net *net)
{
 put_net(sock_net(sk));
 sock_net_set(sk, hold_net(net));
}

static inline struct sock *skb_steal_sock(struct sk_buff *skb)
{
 if (skb->sk) {
  struct sock *sk = skb->sk;

  skb->destructor = 0;
  skb->sk = 0;
  return sk;
 }
 return 0;
}

void sock_enable_timestamp(struct sock *sk, int flag);
int sock_get_timestamp(struct sock *, struct timeval *);
int sock_get_timestampns(struct sock *, struct timespec *);
int sock_recv_errqueue(struct sock *sk, struct msghdr *msg, int len, int level,
         int type);




extern int net_msg_warn;






extern __u32 sysctl_wmem_max;
extern __u32 sysctl_rmem_max;

extern int sysctl_optmem_max;

extern __u32 sysctl_wmem_default;
extern __u32 sysctl_rmem_default;


struct tun_pi {
  template <typename, int = 0> struct __BYPASStun_pi {};
  template <typename, int> friend struct __BYPASStun_pi;
 __u16 flags;
 __be16 proto;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct tun_filter {
  template <typename, int = 0> struct __BYPASStun_filter {};
  template <typename, int> friend struct __BYPASStun_filter;
 __u16 flags;
 __u16 count;
 __u8 addr[0][6];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct socket *tun_get_socket(struct file *);
struct in6_rtmsg {
  template <typename, int = 0> struct __BYPASSin6_rtmsg {};
  template <typename, int> friend struct __BYPASSin6_rtmsg;
 struct in6_addr rtmsg_dst;
 struct in6_addr rtmsg_src;
 struct in6_addr rtmsg_gateway;
 __u32 rtmsg_type;
 __u16 rtmsg_dst_len;
 __u16 rtmsg_src_len;
 __u32 rtmsg_metric;
 unsigned long rtmsg_info;
        __u32 rtmsg_flags;
 int rtmsg_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct rtentry {
  template <typename, int = 0> struct __BYPASSrtentry {};
  template <typename, int> friend struct __BYPASSrtentry;
 unsigned long rt_pad1;
 struct sockaddr rt_dst;
 struct sockaddr rt_gateway;
 struct sockaddr rt_genmask;
 unsigned short rt_flags;
 short rt_pad2;
 unsigned long rt_pad3;
 void *rt_pad4;
 short rt_metric;
 char *rt_dev;
 unsigned long rt_mtu;



 unsigned long rt_window;
 unsigned short rt_irtt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct atalk_addr {
  template <typename, int = 0> struct __BYPASSatalk_addr {};
  template <typename, int> friend struct __BYPASSatalk_addr;
 __be16 s_net;
 __u8 s_node;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct sockaddr_at {
  template <typename, int = 0> struct __BYPASSsockaddr_at {};
  template <typename, int> friend struct __BYPASSsockaddr_at;
 __kernel_sa_family_t sat_family;
 __u8 sat_port;
 struct atalk_addr sat_addr;
 char sat_zero[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct atalk_netrange {
  template <typename, int = 0> struct __BYPASSatalk_netrange {};
  template <typename, int> friend struct __BYPASSatalk_netrange;
 __u8 nr_phase;
 __be16 nr_firstnet;
 __be16 nr_lastnet;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct atalk_route {
  template <typename, int = 0> struct __BYPASSatalk_route {};
  template <typename, int> friend struct __BYPASSatalk_route;
 struct net_device *dev;
 struct atalk_addr target;
 struct atalk_addr gateway;
 int flags;
 struct atalk_route *next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct atalk_iface {
  template <typename, int = 0> struct __BYPASSatalk_iface {};
  template <typename, int> friend struct __BYPASSatalk_iface;
 struct net_device *dev;
 struct atalk_addr address;
 int status;


 struct atalk_netrange nets;
 struct atalk_iface *next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct atalk_sock {
  template <typename, int = 0> struct __BYPASSatalk_sock {};
  template <typename, int> friend struct __BYPASSatalk_sock;

 struct sock sk;
 __be16 dest_net;
 __be16 src_net;
 unsigned char dest_node;
 unsigned char src_node;
 unsigned char dest_port;
 unsigned char src_port;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct atalk_sock *at_sk(struct sock *sk)
{
 return (struct atalk_sock *)sk;
}

struct ddpehdr {
  template <typename, int = 0> struct __BYPASSddpehdr {};
  template <typename, int> friend struct __BYPASSddpehdr;
 __be16 deh_len_hops;
 __be16 deh_sum;
 __be16 deh_dnet;
 __be16 deh_snet;
 __u8 deh_dnode;
 __u8 deh_snode;
 __u8 deh_dport;
 __u8 deh_sport;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static __inline__ struct ddpehdr *ddp_hdr(struct sk_buff *skb)
{
 return (struct ddpehdr *)skb_transport_header(skb);
}


struct elapaarp {
  template <typename, int = 0> struct __BYPASSelapaarp {};
  template <typename, int> friend struct __BYPASSelapaarp;
 __be16 hw_type;


 __be16 pa_type;
 __u8 hw_len;
 __u8 pa_len;

 __be16 function;



 __u8 hw_src[6];
 __u8 pa_src_zero;
 __be16 pa_src_net;
 __u8 pa_src_node;
 __u8 hw_dst[6];
 __u8 pa_dst_zero;
 __be16 pa_dst_net;
 __u8 pa_dst_node;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__ ((packed));

static __inline__ struct elapaarp *aarp_hdr(struct sk_buff *skb)
{
 return (struct elapaarp *)skb_transport_header(skb);
}
extern struct datalink_proto *ddp_dl, *aarp_dl;
extern void aarp_proto_init(void);





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device9atalk_ptrE_2659_0 {
  typedef TJP__ZN10net_device9atalk_ptrE_2659_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline void * __get__ZN10net_device9atalk_ptrE_2659(void * *source) {
  void *__result_buffer;
  typedef TJP__ZN10net_device9atalk_ptrE_2659_0< void *, ::net_device , void * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (void *&)__result_buffer;
}
static inline struct atalk_iface *atalk_find_dev(struct net_device *dev)
{
 return __get__ZN10net_device9atalk_ptrE_2659(&dev->atalk_ptr);
}

extern struct atalk_addr *atalk_find_dev_addr(struct net_device *dev);
extern struct net_device *atrtr_get_dev(struct atalk_addr *sa);
extern int aarp_send_ddp(struct net_device *dev,
           struct sk_buff *skb,
           struct atalk_addr *sa, void *hwaddr);
extern void aarp_device_down(struct net_device *dev);
extern void aarp_probe_network(struct atalk_iface *atif);
extern int aarp_proxy_probe_network(struct atalk_iface *atif,
         struct atalk_addr *sa);
extern void aarp_proxy_remove(struct net_device *dev,
        struct atalk_addr *sa);

extern void aarp_cleanup_module(void);

extern struct hlist_head atalk_sockets;
extern rwlock_t atalk_sockets_lock;

extern struct atalk_route *atalk_routes;
extern rwlock_t atalk_routes_lock;

extern struct atalk_iface *atalk_interfaces;
extern rwlock_t atalk_interfaces_lock;

extern struct atalk_route atrtr_default;

extern struct file_operations atalk_seq_arp_fops;

extern int sysctl_aarp_expiry_time;
extern int sysctl_aarp_tick_time;
extern int sysctl_aarp_retransmit_limit;
extern int sysctl_aarp_resolve_time;


extern void atalk_register_sysctl(void);
extern void atalk_unregister_sysctl(void);






extern int atalk_proc_init(void);
extern void atalk_proc_exit(void);
struct iphdr {
  template <typename, int = 0> struct __BYPASSiphdr {};
  template <typename, int> friend struct __BYPASSiphdr;

 __u8 ihl:4,
  version:4;






 __u8 tos;
 __be16 tot_len;
 __be16 id;
 __be16 frag_off;
 __u8 ttl;
 __u8 protocol;
 __sum16 check;
 __be32 saddr;
 __be32 daddr;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ip_auth_hdr {
  template <typename, int = 0> struct __BYPASSip_auth_hdr {};
  template <typename, int> friend struct __BYPASSip_auth_hdr;
 __u8 nexthdr;
 __u8 hdrlen;
 __be16 reserved;
 __be32 spi;
 __be32 seq_no;
 __u8 auth_data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_esp_hdr {
  template <typename, int = 0> struct __BYPASSip_esp_hdr {};
  template <typename, int> friend struct __BYPASSip_esp_hdr;
 __be32 spi;
 __be32 seq_no;
 __u8 enc_data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_comp_hdr {
  template <typename, int = 0> struct __BYPASSip_comp_hdr {};
  template <typename, int> friend struct __BYPASSip_comp_hdr;
 __u8 nexthdr;
 __u8 flags;
 __be16 cpi;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_beet_phdr {
  template <typename, int = 0> struct __BYPASSip_beet_phdr {};
  template <typename, int> friend struct __BYPASSip_beet_phdr;
 __u8 nexthdr;
 __u8 hdrlen;
 __u8 padlen;
 __u8 reserved;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


enum
{
 IPV4_DEVCONF_FORWARDING=1,
 IPV4_DEVCONF_MC_FORWARDING,
 IPV4_DEVCONF_PROXY_ARP,
 IPV4_DEVCONF_ACCEPT_REDIRECTS,
 IPV4_DEVCONF_SECURE_REDIRECTS,
 IPV4_DEVCONF_SEND_REDIRECTS,
 IPV4_DEVCONF_SHARED_MEDIA,
 IPV4_DEVCONF_RP_FILTER,
 IPV4_DEVCONF_ACCEPT_SOURCE_ROUTE,
 IPV4_DEVCONF_BOOTP_RELAY,
 IPV4_DEVCONF_LOG_MARTIANS,
 IPV4_DEVCONF_TAG,
 IPV4_DEVCONF_ARPFILTER,
 IPV4_DEVCONF_MEDIUM_ID,
 IPV4_DEVCONF_NOXFRM,
 IPV4_DEVCONF_NOPOLICY,
 IPV4_DEVCONF_FORCE_IGMP_VERSION,
 IPV4_DEVCONF_ARP_ANNOUNCE,
 IPV4_DEVCONF_ARP_IGNORE,
 IPV4_DEVCONF_PROMOTE_SECONDARIES,
 IPV4_DEVCONF_ARP_ACCEPT,
 IPV4_DEVCONF_ARP_NOTIFY,
 IPV4_DEVCONF_ACCEPT_LOCAL,
 IPV4_DEVCONF_SRC_VMARK,
 IPV4_DEVCONF_PROXY_ARP_PVLAN,
 IPV4_DEVCONF_ROUTE_LOCALNET,
 IPV4_DEVCONF_IGMPV2_UNSOLICITED_REPORT_INTERVAL,
 IPV4_DEVCONF_IGMPV3_UNSOLICITED_REPORT_INTERVAL,
 __IPV4_DEVCONF_MAX
};

static inline struct iphdr *ip_hdr( struct sk_buff *skb)
{
 return (struct iphdr *)skb_network_header(skb);
}

static inline struct iphdr *inner_ip_hdr( struct sk_buff *skb)
{
 return (struct iphdr *)skb_inner_network_header(skb);
}

static inline struct iphdr *ipip_hdr( struct sk_buff *skb)
{
 return (struct iphdr *)skb_transport_header(skb);
}








struct __una_u16 {
  template <typename, int = 0> struct __BYPASS__una_u16 {};
  template <typename, int> friend struct __BYPASS__una_u16; u16 x; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));
struct __una_u32 {
  template <typename, int = 0> struct __BYPASS__una_u32 {};
  template <typename, int> friend struct __BYPASS__una_u32; u32 x; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));
struct __una_u64 {
  template <typename, int = 0> struct __BYPASS__una_u64 {};
  template <typename, int> friend struct __BYPASS__una_u64; u64 x; 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));

static inline u16 __get_unaligned_cpu16( void *p)
{
 struct __una_u16 *ptr = ( struct __una_u16 *)p;
 return ptr->x;
}

static inline u32 __get_unaligned_cpu32( void *p)
{
 struct __una_u32 *ptr = ( struct __una_u32 *)p;
 return ptr->x;
}

static inline u64 __get_unaligned_cpu64( void *p)
{
 struct __una_u64 *ptr = ( struct __una_u64 *)p;
 return ptr->x;
}

static inline void __put_unaligned_cpu16(u16 val, void *p)
{
 struct __una_u16 *ptr = (struct __una_u16 *)p;
 ptr->x = val;
}

static inline void __put_unaligned_cpu32(u32 val, void *p)
{
 struct __una_u32 *ptr = (struct __una_u32 *)p;
 ptr->x = val;
}

static inline void __put_unaligned_cpu64(u64 val, void *p)
{
 struct __una_u64 *ptr = (struct __una_u64 *)p;
 ptr->x = val;
}
static inline u32 jhash( void *key, u32 length, u32 initval)
{
 u32 a, b, c;
 u8 *k = key;


 a = b = c = 0xdeadbeef + length + initval;


 while (length > 12) {
  a += __get_unaligned_cpu32(k);
  b += __get_unaligned_cpu32(k + 4);
  c += __get_unaligned_cpu32(k + 8);
  { a -= c; a ^= rol32(c, 4); c += b; b -= a; b ^= rol32(a, 6); a += c; c -= b; c ^= rol32(b, 8); b += a; a -= c; a ^= rol32(c, 16); c += b; b -= a; b ^= rol32(a, 19); a += c; c -= b; c ^= rol32(b, 4); b += a; };
  length -= 12;
  k += 12;
 }


 switch (length) {
 case 12: c += (u32)k[11]<<24;
 case 11: c += (u32)k[10]<<16;
 case 10: c += (u32)k[9]<<8;
 case 9: c += k[8];
 case 8: b += (u32)k[7]<<24;
 case 7: b += (u32)k[6]<<16;
 case 6: b += (u32)k[5]<<8;
 case 5: b += k[4];
 case 4: a += (u32)k[3]<<24;
 case 3: a += (u32)k[2]<<16;
 case 2: a += (u32)k[1]<<8;
 case 1: a += k[0];
   { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };
 case 0:
  break;
 }

 return c;
}
static inline u32 jhash2( u32 *k, u32 length, u32 initval)
{
 u32 a, b, c;


 a = b = c = 0xdeadbeef + (length<<2) + initval;


 while (length > 3) {
  a += k[0];
  b += k[1];
  c += k[2];
  { a -= c; a ^= rol32(c, 4); c += b; b -= a; b ^= rol32(a, 6); a += c; c -= b; c ^= rol32(b, 8); b += a; a -= c; a ^= rol32(c, 16); c += b; b -= a; b ^= rol32(a, 19); a += c; c -= b; c ^= rol32(b, 4); b += a; };
  length -= 3;
  k += 3;
 }


 switch (length) {
 case 3: c += k[2];
 case 2: b += k[1];
 case 1: a += k[0];
  { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };
 case 0:
  break;
 }

 return c;
}



static inline u32 jhash_3words(u32 a, u32 b, u32 c, u32 initval)
{
 a += 0xdeadbeef;
 b += 0xdeadbeef;
 c += initval;

 { c ^= b; c -= rol32(b, 14); a ^= c; a -= rol32(c, 11); b ^= a; b -= rol32(a, 25); c ^= b; c -= rol32(b, 16); a ^= c; a -= rol32(c, 4); b ^= a; b -= rol32(a, 14); c ^= b; c -= rol32(b, 24); };

 return c;
}

static inline u32 jhash_2words(u32 a, u32 b, u32 initval)
{
 return jhash_3words(a, b, 0, initval);
}

static inline u32 jhash_1word(u32 a, u32 initval)
{
 return jhash_3words(a, 0, 0, initval);
}




struct request_sock;
struct sk_buff;
struct dst_entry;
struct proto;

struct request_sock_ops {
  template <typename, int = 0> struct __BYPASSrequest_sock_ops {};
  template <typename, int> friend struct __BYPASSrequest_sock_ops;
 int family;
 int obj_size;
 struct kmem_cache *slab;
 char *slab_name;
 int (*rtx_syn_ack)(struct sock *sk,
           struct request_sock *req);
 void (*send_ack)(struct sock *sk, struct sk_buff *skb,
        struct request_sock *req);
 void (*send_reset)(struct sock *sk,
          struct sk_buff *skb);
 void (*destructor)(struct request_sock *req);
 void (*syn_ack_timeout)(struct sock *sk,
        struct request_sock *req);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int inet_rtx_syn_ack(struct sock *parent, struct request_sock *req);



struct request_sock {
  template <typename, int = 0> struct __BYPASSrequest_sock {};
  template <typename, int> friend struct __BYPASSrequest_sock;
 struct sock_common __req_common;
 struct request_sock *dl_next;
 u16 mss;
 u8 num_retrans;

    struct _rs_state {
  template <typename, int = 0> struct __BYPASS_ZN12request_sock9_rs_stateE {};
  template <typename, int> friend struct __BYPASS_ZN12request_sock9_rs_stateE;

 u8 cookie_ts:1;
 u8 num_timeout:7;



    
  friend class ::Introspect;
  friend class ::MyIntrospect;
} rs_state;


 u32 window_clamp;
 u32 rcv_wnd;
 u32 ts_recent;
 unsigned long expires;
 struct request_sock_ops *rsk_ops;
 struct sock *sk;
 u32 secid;
 u32 peer_secid;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16request_sock_ops4slabE_2663_0 {
  typedef TJP__ZN16request_sock_ops4slabE_2663_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline kmem_cache * __get__ZN16request_sock_ops4slabE_2663(kmem_cache * *source) {
  ::kmem_cache *__result_buffer;
  typedef TJP__ZN16request_sock_ops4slabE_2663_0< ::kmem_cache *, ::request_sock_ops , ::kmem_cache * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::kmem_cache *&)__result_buffer;
}
static inline struct request_sock *reqsk_alloc( struct request_sock_ops *ops)
{
 struct request_sock *req = kmem_cache_alloc(__get__ZN16request_sock_ops4slabE_2663(&ops->slab), ((( gfp_t)0x20u)));

 if (req != 0)
  req->rsk_ops = ops;

 return req;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN16request_sock_ops4slabE_2664_0 {
  typedef TJP__ZN16request_sock_ops4slabE_2664_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline kmem_cache * __get__ZN16request_sock_ops4slabE_2664(kmem_cache * *source) {
  ::kmem_cache *__result_buffer;
  typedef TJP__ZN16request_sock_ops4slabE_2664_0< ::kmem_cache *, ::request_sock_ops , ::kmem_cache * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::kmem_cache *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock7rsk_opsE_2665_0 {
  typedef TJP__ZN12request_sock7rsk_opsE_2665_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock_ops * __get__ZN12request_sock7rsk_opsE_2665(request_sock_ops * *source) {
  ::request_sock_ops *__result_buffer;
  typedef TJP__ZN12request_sock7rsk_opsE_2665_0< ::request_sock_ops *, ::request_sock , ::request_sock_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock_ops *&)__result_buffer;
}
static inline void __reqsk_free(struct request_sock *req)
{
 kmem_cache_free(__get__ZN16request_sock_ops4slabE_2664(&__get__ZN12request_sock7rsk_opsE_2665(&req->rsk_ops)->slab), req);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock7rsk_opsE_2667_0 {
  typedef TJP__ZN12request_sock7rsk_opsE_2667_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock_ops * __get__ZN12request_sock7rsk_opsE_2667(request_sock_ops * *source) {
  ::request_sock_ops *__result_buffer;
  typedef TJP__ZN12request_sock7rsk_opsE_2667_0< ::request_sock_ops *, ::request_sock , ::request_sock_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock_ops *&)__result_buffer;
}
static inline void reqsk_free(struct request_sock *req)
{
 __get__ZN12request_sock7rsk_opsE_2667(&req->rsk_ops)->destructor(req);
 __reqsk_free(req);
}

extern int sysctl_max_syn_backlog;





struct listen_sock {
  template <typename, int = 0> struct __BYPASSlisten_sock {};
  template <typename, int> friend struct __BYPASSlisten_sock;
 u8 max_qlen_log;
 u8 synflood_warned;

 int qlen;
 int qlen_young;
 int clock_hand;
 u32 hash_rnd;
 u32 nr_table_entries;
 struct request_sock *syn_table[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct fastopen_queue {
  template <typename, int = 0> struct __BYPASSfastopen_queue {};
  template <typename, int> friend struct __BYPASSfastopen_queue;
 struct request_sock *rskq_rst_head;
 struct request_sock *rskq_rst_tail;



 spinlock_t lock;
 int qlen;
 int max_qlen;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct request_sock_queue {
  template <typename, int = 0> struct __BYPASSrequest_sock_queue {};
  template <typename, int> friend struct __BYPASSrequest_sock_queue;
 struct request_sock *rskq_accept_head;
 struct request_sock *rskq_accept_tail;
 rwlock_t syn_wait_lock;
 u8 rskq_defer_accept;

 struct listen_sock *listen_opt;
 struct fastopen_queue *fastopenq;






  friend class ::Introspect;
  friend class ::MyIntrospect;
};

int reqsk_queue_alloc(struct request_sock_queue *queue,
        unsigned int nr_table_entries);

void __reqsk_queue_destroy(struct request_sock_queue *queue);
void reqsk_queue_destroy(struct request_sock_queue *queue);
void reqsk_fastopen_remove(struct sock *sk, struct request_sock *req,
      bool reset);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue16rskq_accept_headE_2668_0 {
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_2668_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN18request_sock_queue16rskq_accept_headE_2668(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_2668_0< ::request_sock *, ::request_sock_queue , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline struct request_sock *
 reqsk_queue_yank_acceptq(struct request_sock_queue *queue)
{
 struct request_sock *req = __get__ZN18request_sock_queue16rskq_accept_headE_2668(&queue->rskq_accept_head);

 queue->rskq_accept_head = 0;
 return req;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue16rskq_accept_headE_2669_0 {
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_2669_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN18request_sock_queue16rskq_accept_headE_2669(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_2669_0< ::request_sock *, ::request_sock_queue , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline int reqsk_queue_empty(struct request_sock_queue *queue)
{
 return __get__ZN18request_sock_queue16rskq_accept_headE_2669(&queue->rskq_accept_head) == 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock7dl_nextE_2670_0 {
  typedef TJP__ZN12request_sock7dl_nextE_2670_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN12request_sock7dl_nextE_2670(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN12request_sock7dl_nextE_2670_0< ::request_sock *, ::request_sock , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline void reqsk_queue_unlink(struct request_sock_queue *queue,
          struct request_sock *req,
          struct request_sock **prev_req)
{
 ;
 *prev_req = __get__ZN12request_sock7dl_nextE_2670(&req->dl_next);
 ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue16rskq_accept_headE_2671_0 {
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_2671_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN18request_sock_queue16rskq_accept_headE_2671(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_2671_0< ::request_sock *, ::request_sock_queue , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline void reqsk_queue_add(struct request_sock_queue *queue,
       struct request_sock *req,
       struct sock *parent,
       struct sock *child)
{
 req->sk = child;
 sk_acceptq_added(parent);

 if (__get__ZN18request_sock_queue16rskq_accept_headE_2671(&queue->rskq_accept_head) == 0)
  queue->rskq_accept_head = req;
 else
  queue->rskq_accept_tail->dl_next = req;

 queue->rskq_accept_tail = req;
 req->dl_next = 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue16rskq_accept_headE_2672_0 {
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_2672_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN18request_sock_queue16rskq_accept_headE_2672(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_2672_0< ::request_sock *, ::request_sock_queue , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock7dl_nextE_2673_0 {
  typedef TJP__ZN12request_sock7dl_nextE_2673_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN12request_sock7dl_nextE_2673(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN12request_sock7dl_nextE_2673_0< ::request_sock *, ::request_sock , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue16rskq_accept_headE_2674_0 {
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_2674_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN18request_sock_queue16rskq_accept_headE_2674(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue16rskq_accept_headE_2674_0< ::request_sock *, ::request_sock_queue , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline struct request_sock *reqsk_queue_remove(struct request_sock_queue *queue)
{
 struct request_sock *req = __get__ZN18request_sock_queue16rskq_accept_headE_2672(&queue->rskq_accept_head);

 (req == 0);

 queue->rskq_accept_head = __get__ZN12request_sock7dl_nextE_2673(&req->dl_next);
 if (__get__ZN18request_sock_queue16rskq_accept_headE_2674(&queue->rskq_accept_head) == 0)
  queue->rskq_accept_tail = 0;

 return req;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_2675_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_2675_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_2675(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_2675_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN12request_sock8rs_stateE_2677_0 {
  typedef TJP__ZN12request_sock8rs_stateE_2677_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock::_rs_state __get__ZN12request_sock8rs_stateE_2677(request_sock::_rs_state *source) {
  AC::ResultBuffer< ::request_sock::_rs_state  > __result_buffer;
  typedef TJP__ZN12request_sock8rs_stateE_2677_0< ::request_sock::_rs_state , ::request_sock , ::request_sock::_rs_state  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock::_rs_state &)__result_buffer;
}
static inline int reqsk_queue_removed(struct request_sock_queue *queue,
          struct request_sock *req)
{
 struct listen_sock *lopt = __get__ZN18request_sock_queue10listen_optE_2675(&queue->listen_opt);

 if (__get__ZN12request_sock8rs_stateE_2677(&req->rs_state).num_timeout == 0)
  --lopt->qlen_young;

 return --lopt->qlen;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_2678_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_2678_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_2678(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_2678_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock4qlenE_2679_0 {
  typedef TJP__ZN11listen_sock4qlenE_2679_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11listen_sock4qlenE_2679(int *source) {
  int __result_buffer;
  typedef TJP__ZN11listen_sock4qlenE_2679_0< int , ::listen_sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}
static inline int reqsk_queue_added(struct request_sock_queue *queue)
{
 struct listen_sock *lopt = __get__ZN18request_sock_queue10listen_optE_2678(&queue->listen_opt);
 int prev_qlen = __get__ZN11listen_sock4qlenE_2679(&lopt->qlen);

 lopt->qlen_young++;
 lopt->qlen++;
 return prev_qlen;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_2680_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_2680_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_2680(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_2680_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock4qlenE_2681_0 {
  typedef TJP__ZN11listen_sock4qlenE_2681_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11listen_sock4qlenE_2681(int *source) {
  int __result_buffer;
  typedef TJP__ZN11listen_sock4qlenE_2681_0< int , ::listen_sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_2682_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_2682_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_2682(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_2682_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}
static inline int reqsk_queue_len( struct request_sock_queue *queue)
{
 return __get__ZN18request_sock_queue10listen_optE_2680(&queue->listen_opt) != 0 ? __get__ZN11listen_sock4qlenE_2681(&__get__ZN18request_sock_queue10listen_optE_2682(&queue->listen_opt)->qlen) : 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock10qlen_youngE_2683_0 {
  typedef TJP__ZN11listen_sock10qlen_youngE_2683_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11listen_sock10qlen_youngE_2683(int *source) {
  int __result_buffer;
  typedef TJP__ZN11listen_sock10qlen_youngE_2683_0< int , ::listen_sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_2684_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_2684_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_2684(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_2684_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}
static inline int reqsk_queue_len_young( struct request_sock_queue *queue)
{
 return __get__ZN11listen_sock10qlen_youngE_2683(&__get__ZN18request_sock_queue10listen_optE_2684(&queue->listen_opt)->qlen_young);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock4qlenE_2685_0 {
  typedef TJP__ZN11listen_sock4qlenE_2685_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline int __get__ZN11listen_sock4qlenE_2685(int *source) {
  int __result_buffer;
  typedef TJP__ZN11listen_sock4qlenE_2685_0< int , ::listen_sock , int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_2686_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_2686_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_2686(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_2686_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock12max_qlen_logE_2687_0 {
  typedef TJP__ZN11listen_sock12max_qlen_logE_2687_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN11listen_sock12max_qlen_logE_2687(unsigned char *source) {
  ::u8 __result_buffer;
  typedef TJP__ZN11listen_sock12max_qlen_logE_2687_0< ::u8 , ::listen_sock , ::u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::u8 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_2688_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_2688_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_2688(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_2688_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}
static inline int reqsk_queue_is_full( struct request_sock_queue *queue)
{
 return __get__ZN11listen_sock4qlenE_2685(&__get__ZN18request_sock_queue10listen_optE_2686(&queue->listen_opt)->qlen) >> __get__ZN11listen_sock12max_qlen_logE_2687(&__get__ZN18request_sock_queue10listen_optE_2688(&queue->listen_opt)->max_qlen_log);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue10listen_optE_2689_0 {
  typedef TJP__ZN18request_sock_queue10listen_optE_2689_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline listen_sock * __get__ZN18request_sock_queue10listen_optE_2689(listen_sock * *source) {
  ::listen_sock *__result_buffer;
  typedef TJP__ZN18request_sock_queue10listen_optE_2689_0< ::listen_sock *, ::request_sock_queue , ::listen_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::listen_sock *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_2690_0 {
  typedef TJP_jiffies_2690_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_2690(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_2690_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN11listen_sock9syn_tableE_2691_0 {
  typedef TJP__ZN11listen_sock9syn_tableE_2691_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN11listen_sock9syn_tableE_2691(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN11listen_sock9syn_tableE_2691_0< ::request_sock *, ::listen_sock , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline void reqsk_queue_hash_req(struct request_sock_queue *queue,
     u32 hash, struct request_sock *req,
     unsigned long timeout)
{
 struct listen_sock *lopt = __get__ZN18request_sock_queue10listen_optE_2689(&queue->listen_opt);

 req->expires = __get_jiffies_2690(&jiffies) + timeout;
 req->num_retrans = 0;
 req->rs_state.num_timeout = 0;
 req->sk = 0;
 req->dl_next = __get__ZN11listen_sock9syn_tableE_2691(&lopt->syn_table[hash]);

 ;
 lopt->syn_table[hash] = req;
 ;
}





struct net;

static inline unsigned int net_hash_mix(struct net *net)
{






 return (unsigned)(((unsigned long)net) >> (6));



}
struct ip_options {
  template <typename, int = 0> struct __BYPASSip_options {};
  template <typename, int> friend struct __BYPASSip_options;
 __be32 faddr;
 __be32 nexthop;
 unsigned char optlen;
 unsigned char srr;
 unsigned char rr;
 unsigned char ts;
 unsigned char is_strictroute:1,
   srr_is_hit:1,
   is_changed:1,
   rr_needaddr:1,
   ts_needtime:1,
   ts_needaddr:1;
 unsigned char router_alert;
 unsigned char cipso;
 unsigned char __pad2;
 unsigned char __data[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_options_rcu {
  template <typename, int = 0> struct __BYPASSip_options_rcu {};
  template <typename, int> friend struct __BYPASSip_options_rcu;
 struct callback_head rcu;
 struct ip_options opt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_options_data {
  template <typename, int = 0> struct __BYPASSip_options_data {};
  template <typename, int> friend struct __BYPASSip_options_data;
 struct ip_options_rcu opt;
 char data[40];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inet_request_sock {
  template <typename, int = 0> struct __BYPASSinet_request_sock {};
  template <typename, int> friend struct __BYPASSinet_request_sock;
 struct request_sock req;
 ;
 u16 snd_wscale : 4,
    rcv_wscale : 4,
    tstamp_ok : 1,
    sack_ok : 1,
    wscale_ok : 1,
    ecn_ok : 1,
    acked : 1,
    no_srccheck: 1;
 ;
 struct ip_options_rcu *opt;
 struct sk_buff *pktopts;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct inet_request_sock *inet_rsk( struct request_sock *sk)
{
 return (struct inet_request_sock *)sk;
}

struct inet_cork {
  template <typename, int = 0> struct __BYPASSinet_cork {};
  template <typename, int> friend struct __BYPASSinet_cork;
 unsigned int flags;
 __be32 addr;
 struct ip_options *opt;
 unsigned int fragsize;
 int length;
 struct dst_entry *dst;
 u8 tx_flags;
 __u8 ttl;
 __s16 tos;
 char priority;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inet_cork_full {
  template <typename, int = 0> struct __BYPASSinet_cork_full {};
  template <typename, int> friend struct __BYPASSinet_cork_full;
 struct inet_cork base;
 struct flowi fl;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip_mc_socklist;
struct ipv6_pinfo;
struct rtable;
struct inet_sock {
  template <typename, int = 0> struct __BYPASSinet_sock {};
  template <typename, int> friend struct __BYPASSinet_sock;

 struct sock sk;

 struct ipv6_pinfo *pinet6;







 __be32 inet_saddr;
 __s16 uc_ttl;
 __u16 cmsg_flags;
 __be16 inet_sport;
 __u16 inet_id;

 struct ip_options_rcu *inet_opt;
 int rx_dst_ifindex;
 __u8 tos;
 __u8 min_ttl;
 __u8 mc_ttl;
 __u8 pmtudisc;

    struct _is_state {
  template <typename, int = 0> struct __BYPASS_ZN9inet_sock9_is_stateE {};
  template <typename, int> friend struct __BYPASS_ZN9inet_sock9_is_stateE;

 __u8 recverr:1,
    is_icsk:1,
    freebind:1,
    hdrincl:1,
    mc_loop:1,
    transparent:1,
    mc_all:1,
    nodefrag:1;
    
  friend class ::Introspect;
  friend class ::MyIntrospect;
} is_state;

 __u8 rcv_tos;
 int uc_index;
 int mc_index;
 __be32 mc_addr;
 struct ip_mc_socklist *mc_list;
 struct inet_cork_full cork;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline struct inet_sock *inet_sk( struct sock *sk)
{
 return (struct inet_sock *)sk;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2694_0 {
  typedef TJP__ZN4sock11__sk_commonE_2694_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2694(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2694_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline void __inet_sk_copy_descendant(struct sock *sk_to,
          struct sock *sk_from,
          int ancestor_size)
{
 memcpy(inet_sk(sk_to) + 1, inet_sk(sk_from) + 1,
        __get__ZN4sock11__sk_commonE_2694(&sk_from->__sk_common).skc_prot->obj_size - ancestor_size);
}
int inet_sk_rebuild_header(struct sock *sk);

static inline unsigned int __inet_ehashfn( __be32 laddr,
       __u16 lport,
       __be32 faddr,
       __be16 fport,
       u32 initval)
{
 return jhash_3words(( __u32) laddr,
       ( __u32) faddr,
       ((__u32) lport) << 16 | ( __u32)fport,
       initval);
}

static inline struct request_sock *inet_reqsk_alloc(struct request_sock_ops *ops)
{
 struct request_sock *req = reqsk_alloc(ops);
 struct inet_request_sock *ireq = inet_rsk(req);

 if (req != 0) {
  do { } while (0);
  ireq->opt = 0;
 }

 return req;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock8is_stateE_2696_0 {
  typedef TJP__ZN9inet_sock8is_stateE_2696_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inet_sock::_is_state __get__ZN9inet_sock8is_stateE_2696(inet_sock::_is_state *source) {
  AC::ResultBuffer< ::inet_sock::_is_state  > __result_buffer;
  typedef TJP__ZN9inet_sock8is_stateE_2696_0< ::inet_sock::_is_state , ::inet_sock , ::inet_sock::_is_state  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inet_sock::_is_state &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock8is_stateE_2698_0 {
  typedef TJP__ZN9inet_sock8is_stateE_2698_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inet_sock::_is_state __get__ZN9inet_sock8is_stateE_2698(inet_sock::_is_state *source) {
  AC::ResultBuffer< ::inet_sock::_is_state  > __result_buffer;
  typedef TJP__ZN9inet_sock8is_stateE_2698_0< ::inet_sock::_is_state , ::inet_sock , ::inet_sock::_is_state  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inet_sock::_is_state &)__result_buffer;
}
static inline __u8 inet_sk_flowi_flags( struct sock *sk)
{
 __u8 flags = 0;




 if (__get__ZN9inet_sock8is_stateE_2696(&inet_sk(sk)->is_state).transparent || __get__ZN9inet_sock8is_stateE_2698(&inet_sk(sk)->is_state).hdrincl)

  flags |= 0x01;
 return flags;
}



struct in6_pktinfo {
  template <typename, int = 0> struct __BYPASSin6_pktinfo {};
  template <typename, int> friend struct __BYPASSin6_pktinfo;
 struct in6_addr ipi6_addr;
 int ipi6_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip6_mtuinfo {
  template <typename, int = 0> struct __BYPASSip6_mtuinfo {};
  template <typename, int> friend struct __BYPASSip6_mtuinfo;
 struct sockaddr_in6 ip6m_addr;
 __u32 ip6m_mtu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct in6_ifreq {
  template <typename, int = 0> struct __BYPASSin6_ifreq {};
  template <typename, int> friend struct __BYPASSin6_ifreq;
 struct in6_addr ifr6_addr;
 __u32 ifr6_prefixlen;
 int ifr6_ifindex;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ipv6_rt_hdr {
  template <typename, int = 0> struct __BYPASSipv6_rt_hdr {};
  template <typename, int> friend struct __BYPASSipv6_rt_hdr;
 __u8 nexthdr;
 __u8 hdrlen;
 __u8 type;
 __u8 segments_left;






  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct ipv6_opt_hdr {
  template <typename, int = 0> struct __BYPASSipv6_opt_hdr {};
  template <typename, int> friend struct __BYPASSipv6_opt_hdr;
 __u8 nexthdr;
 __u8 hdrlen;




  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));
struct rt0_hdr {
  template <typename, int = 0> struct __BYPASSrt0_hdr {};
  template <typename, int> friend struct __BYPASSrt0_hdr;
 struct ipv6_rt_hdr rt_hdr;
 __u32 reserved;
 struct in6_addr addr[0];



  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct rt2_hdr {
  template <typename, int = 0> struct __BYPASSrt2_hdr {};
  template <typename, int> friend struct __BYPASSrt2_hdr;
 struct ipv6_rt_hdr rt_hdr;
 __u32 reserved;
 struct in6_addr addr;



  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct ipv6_destopt_hao {
  template <typename, int = 0> struct __BYPASSipv6_destopt_hao {};
  template <typename, int> friend struct __BYPASSipv6_destopt_hao;
 __u8 type;
 __u8 length;
 struct in6_addr addr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));
struct ipv6hdr {
  template <typename, int = 0> struct __BYPASSipv6hdr {};
  template <typename, int> friend struct __BYPASSipv6hdr;

 __u8 priority:4,
    version:4;






 __u8 flow_lbl[3];

 __be16 payload_len;
 __u8 nexthdr;
 __u8 hop_limit;

 struct in6_addr saddr;
 struct in6_addr daddr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



enum {
 DEVCONF_FORWARDING = 0,
 DEVCONF_HOPLIMIT,
 DEVCONF_MTU6,
 DEVCONF_ACCEPT_RA,
 DEVCONF_ACCEPT_REDIRECTS,
 DEVCONF_AUTOCONF,
 DEVCONF_DAD_TRANSMITS,
 DEVCONF_RTR_SOLICITS,
 DEVCONF_RTR_SOLICIT_INTERVAL,
 DEVCONF_RTR_SOLICIT_DELAY,
 DEVCONF_USE_TEMPADDR,
 DEVCONF_TEMP_VALID_LFT,
 DEVCONF_TEMP_PREFERED_LFT,
 DEVCONF_REGEN_MAX_RETRY,
 DEVCONF_MAX_DESYNC_FACTOR,
 DEVCONF_MAX_ADDRESSES,
 DEVCONF_FORCE_MLD_VERSION,
 DEVCONF_ACCEPT_RA_DEFRTR,
 DEVCONF_ACCEPT_RA_PINFO,
 DEVCONF_ACCEPT_RA_RTR_PREF,
 DEVCONF_RTR_PROBE_INTERVAL,
 DEVCONF_ACCEPT_RA_RT_INFO_MAX_PLEN,
 DEVCONF_PROXY_NDP,
 DEVCONF_OPTIMISTIC_DAD,
 DEVCONF_ACCEPT_SOURCE_ROUTE,
 DEVCONF_MC_FORWARDING,
 DEVCONF_DISABLE_IPV6,
 DEVCONF_ACCEPT_DAD,
 DEVCONF_FORCE_TLLAO,
 DEVCONF_NDISC_NOTIFY,
 DEVCONF_MLDV1_UNSOLICITED_REPORT_INTERVAL,
 DEVCONF_MLDV2_UNSOLICITED_REPORT_INTERVAL,
 DEVCONF_SUPPRESS_FRAG_NDISC,
 DEVCONF_MAX
};






struct ipv6_devconf {
  template <typename, int = 0> struct __BYPASSipv6_devconf {};
  template <typename, int> friend struct __BYPASSipv6_devconf;
 __s32 forwarding;
 __s32 hop_limit;
 __s32 mtu6;
 __s32 accept_ra;
 __s32 accept_redirects;
 __s32 autoconf;
 __s32 dad_transmits;
 __s32 rtr_solicits;
 __s32 rtr_solicit_interval;
 __s32 rtr_solicit_delay;
 __s32 force_mld_version;
 __s32 mldv1_unsolicited_report_interval;
 __s32 mldv2_unsolicited_report_interval;
 __s32 use_tempaddr;
 __s32 temp_valid_lft;
 __s32 temp_prefered_lft;
 __s32 regen_max_retry;
 __s32 max_desync_factor;
 __s32 max_addresses;
 __s32 accept_ra_defrtr;
 __s32 accept_ra_pinfo;

 __s32 accept_ra_rtr_pref;
 __s32 rtr_probe_interval;

 __s32 accept_ra_rt_info_max_plen;


 __s32 proxy_ndp;
 __s32 accept_source_route;




 __s32 mc_forwarding;

 __s32 disable_ipv6;
 __s32 accept_dad;
 __s32 force_tllao;
 __s32 ndisc_notify;
 __s32 suppress_frag_ndisc;
 void *sysctl;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ipv6_params {
  template <typename, int = 0> struct __BYPASSipv6_params {};
  template <typename, int> friend struct __BYPASSipv6_params;
 __s32 disable_ipv6;
 __s32 autoconf;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
extern struct ipv6_params ipv6_defaults;










struct icmp6hdr {
  template <typename, int = 0> struct __BYPASSicmp6hdr {};
  template <typename, int> friend struct __BYPASSicmp6hdr;

 __u8 icmp6_type;
 __u8 icmp6_code;
 __sum16 icmp6_cksum;


 union {
  __be32 un_data32[1];
  __be16 un_data16[2];
  __u8 un_data8[4];

  struct icmpv6_echo {
   __be16 identifier;
   __be16 sequence;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} u_echo;

                struct icmpv6_nd_advt {

                        __u32 reserved:5,
                          override:1,
                          solicited:1,
                          router:1,
     reserved2:24;
                
  friend class ::Introspect;
  friend class ::MyIntrospect;
} u_nd_advt;

                struct icmpv6_nd_ra {
   __u8 hop_limit;

   __u8 reserved:3,
     router_pref:2,
     home_agent:1,
     other:1,
     managed:1;
   __be16 rt_lifetime;
                
  friend class ::Introspect;
  friend class ::MyIntrospect;
} u_nd_ra;

 } icmp6_dataun;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct icmp6_filter {
  template <typename, int = 0> struct __BYPASSicmp6_filter {};
  template <typename, int> friend struct __BYPASSicmp6_filter;
 __u32 data[8];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct icmp6hdr *icmp6_hdr( struct sk_buff *skb)
{
 return (struct icmp6hdr *)skb_transport_header(skb);
}




extern void icmpv6_send(struct sk_buff *skb, u8 type, u8 code, __u32 info);

typedef void ip6_icmp_send_t(struct sk_buff *skb, u8 type, u8 code, __u32 info);
extern int inet6_register_icmp_sender(ip6_icmp_send_t *fn);
extern int inet6_unregister_icmp_sender(ip6_icmp_send_t *fn);
extern int icmpv6_init(void);
extern int icmpv6_err_convert(u8 type, u8 code,
          int *err);
extern void icmpv6_cleanup(void);
extern void icmpv6_param_prob(struct sk_buff *skb,
         u8 code, int pos);

struct flowi6;
struct in6_addr;
extern void icmpv6_flow_init(struct sock *sk,
        struct flowi6 *fl6,
        u8 type,
        struct in6_addr *saddr,
        struct in6_addr *daddr,
        int oif);
struct inet_bind_bucket;
struct tcp_congestion_ops;





struct inet_connection_sock_af_ops {
  template <typename, int = 0> struct __BYPASSinet_connection_sock_af_ops {};
  template <typename, int> friend struct __BYPASSinet_connection_sock_af_ops;
 int (*queue_xmit)(struct sk_buff *skb, struct flowi *fl);
 void (*send_check)(struct sock *sk, struct sk_buff *skb);
 int (*rebuild_header)(struct sock *sk);
 void (*sk_rx_dst_set)(struct sock *sk, struct sk_buff *skb);
 int (*conn_request)(struct sock *sk, struct sk_buff *skb);
 struct sock *(*syn_recv_sock)(struct sock *sk, struct sk_buff *skb,
          struct request_sock *req,
          struct dst_entry *dst);
 u16 net_header_len;
 u16 net_frag_header_len;
 u16 sockaddr_len;
 int (*setsockopt)(struct sock *sk, int level, int optname,
      char *optval, unsigned int optlen);
 int (*getsockopt)(struct sock *sk, int level, int optname,
      char *optval, int *optlen);

 int (*compat_setsockopt)(struct sock *sk,
    int level, int optname,
    char *optval, unsigned int optlen);
 int (*compat_getsockopt)(struct sock *sk,
    int level, int optname,
    char *optval, int *optlen);

 void (*addr2sockaddr)(struct sock *sk, struct sockaddr *);
 int (*bind_conflict)( struct sock *sk,
         struct inet_bind_bucket *tb, bool relax);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct inet_connection_sock {
  template <typename, int = 0> struct __BYPASSinet_connection_sock {};
  template <typename, int> friend struct __BYPASSinet_connection_sock;

 struct inet_sock icsk_inet;
 struct request_sock_queue icsk_accept_queue;
 struct inet_bind_bucket *icsk_bind_hash;
 unsigned long icsk_timeout;
  struct timer_list icsk_retransmit_timer;
  struct timer_list icsk_delack_timer;
 __u32 icsk_rto;
 __u32 icsk_pmtu_cookie;
 struct tcp_congestion_ops *icsk_ca_ops;
 struct inet_connection_sock_af_ops *icsk_af_ops;
 unsigned int (*icsk_sync_mss)(struct sock *sk, u32 pmtu);
 __u8 icsk_ca_state;
 __u8 icsk_retransmits;
 __u8 icsk_pending;
 __u8 icsk_backoff;
 __u8 icsk_syn_retries;
 __u8 icsk_probes_out;
 __u16 icsk_ext_hdr_len;



 struct _icsk_ack {
  template <typename, int = 0> struct __BYPASS_ZN20inet_connection_sock9_icsk_ackE {};
  template <typename, int> friend struct __BYPASS_ZN20inet_connection_sock9_icsk_ackE;

  __u8 pending;
  __u8 quick;
  __u8 pingpong;
  __u8 blocked;
  __u32 ato;
  unsigned long timeout;
  __u32 lrcvtime;
  __u16 last_seg_size;
  __u16 rcv_mss;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icsk_ack;



 struct _icsk_mtup {
  template <typename, int = 0> struct __BYPASS_ZN20inet_connection_sock10_icsk_mtupE {};
  template <typename, int> friend struct __BYPASS_ZN20inet_connection_sock10_icsk_mtupE;

  int enabled;


  int search_high;
  int search_low;


  int probe_size;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} icsk_mtup;
 u32 icsk_ca_priv[16];
 u32 icsk_user_timeout;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};







static inline struct inet_connection_sock *inet_csk( struct sock *sk)
{
 return (struct inet_connection_sock *)sk;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN20inet_connection_sock12icsk_ca_privE_2699_0 {
  typedef TJP__ZN20inet_connection_sock12icsk_ca_privE_2699_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return true;}
  inline int dimension() {return 16;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return sizeof(unsigned int);}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int * __get__ZN20inet_connection_sock12icsk_ca_privE_2699(unsigned int *source) {
  ::u32 *__result_buffer;
  typedef TJP__ZN20inet_connection_sock12icsk_ca_privE_2699_0< ::u32 *, ::inet_connection_sock , ::u32 [16] > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::u32 *&)__result_buffer;
}
static inline void *inet_csk_ca( struct sock *sk)
{
 return (void *)__get__ZN20inet_connection_sock12icsk_ca_privE_2699(inet_csk(sk)->icsk_ca_priv);
}

struct sock *inet_csk_clone_lock( struct sock *sk,
     struct request_sock *req,
     gfp_t priority);

enum inet_csk_ack_state_t {
 ICSK_ACK_SCHED = 1,
 ICSK_ACK_TIMER = 2,
 ICSK_ACK_PUSHED = 4,
 ICSK_ACK_PUSHED2 = 8
};

void inet_csk_init_xmit_timers(struct sock *sk,
          void (*retransmit_handler)(unsigned long),
          void (*delack_handler)(unsigned long),
          void (*keepalive_handler)(unsigned long));
void inet_csk_clear_xmit_timers(struct sock *sk);

static inline void inet_csk_schedule_ack(struct sock *sk)
{
 inet_csk(sk)->icsk_ack.pending |= ICSK_ACK_SCHED;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN20inet_connection_sock8icsk_ackE_2702_0 {
  typedef TJP__ZN20inet_connection_sock8icsk_ackE_2702_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inet_connection_sock::_icsk_ack __get__ZN20inet_connection_sock8icsk_ackE_2702(inet_connection_sock::_icsk_ack *source) {
  AC::ResultBuffer< ::inet_connection_sock::_icsk_ack  > __result_buffer;
  typedef TJP__ZN20inet_connection_sock8icsk_ackE_2702_0< ::inet_connection_sock::_icsk_ack , ::inet_connection_sock , ::inet_connection_sock::_icsk_ack  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inet_connection_sock::_icsk_ack &)__result_buffer;
}
static inline int inet_csk_ack_scheduled( struct sock *sk)
{
 return __get__ZN20inet_connection_sock8icsk_ackE_2702(&inet_csk(sk)->icsk_ack).pending & ICSK_ACK_SCHED;
}

static inline void inet_csk_delack_init(struct sock *sk)
{
 memset(&inet_csk(sk)->icsk_ack, 0, sizeof(inet_csk(sk)->icsk_ack));
}

void inet_csk_delete_keepalive_timer(struct sock *sk);
void inet_csk_reset_keepalive_timer(struct sock *sk, unsigned long timeout);


extern char inet_csk_timer_bug_msg[];


static inline void inet_csk_clear_xmit_timer(struct sock *sk, int what)
{
 struct inet_connection_sock *icsk = inet_csk(sk);

 if (what == 1 || what == 3) {
  icsk->icsk_pending = 0;



 } else if (what == 2) {
  icsk->icsk_ack.blocked = icsk->icsk_ack.pending = 0;



 }

 else {
  no_printk("\001" "7" "%s", inet_csk_timer_bug_msg);
 }

}





template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_2705_0 {
  typedef TJP_jiffies_2705_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_2705(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_2705_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN20inet_connection_sock12icsk_timeoutE_2706_0 {
  typedef TJP__ZN20inet_connection_sock12icsk_timeoutE_2706_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN20inet_connection_sock12icsk_timeoutE_2706(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN20inet_connection_sock12icsk_timeoutE_2706_0< unsigned long int , ::inet_connection_sock , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_2708_0 {
  typedef TJP_jiffies_2708_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_2708(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_2708_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN20inet_connection_sock8icsk_ackE_2710_0 {
  typedef TJP__ZN20inet_connection_sock8icsk_ackE_2710_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inet_connection_sock::_icsk_ack __get__ZN20inet_connection_sock8icsk_ackE_2710(inet_connection_sock::_icsk_ack *source) {
  AC::ResultBuffer< ::inet_connection_sock::_icsk_ack  > __result_buffer;
  typedef TJP__ZN20inet_connection_sock8icsk_ackE_2710_0< ::inet_connection_sock::_icsk_ack , ::inet_connection_sock , ::inet_connection_sock::_icsk_ack  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inet_connection_sock::_icsk_ack &)__result_buffer;
}
static inline void inet_csk_reset_xmit_timer(struct sock *sk, int what,
          unsigned long when,
          unsigned long max_when)
{
 struct inet_connection_sock *icsk = inet_csk(sk);

 if (when > max_when) {

  no_printk("\001" "7" "reset_xmit_timer: sk=%p %d when=0x%lx, caller=%p\n", sk, what, when, current_text_addr())
                                        ;

  when = max_when;
 }

 if (what == 1 || what == 3 ||
     what == 4 || what == 5) {
  icsk->icsk_pending = what;
  icsk->icsk_timeout = __get_jiffies_2705(&jiffies) + when;
  sk_reset_timer(sk, &icsk->icsk_retransmit_timer, __get__ZN20inet_connection_sock12icsk_timeoutE_2706(&icsk->icsk_timeout));
 } else if (what == 2) {
  icsk->icsk_ack.pending |= ICSK_ACK_TIMER;
  icsk->icsk_ack.timeout = __get_jiffies_2708(&jiffies) + when;
  sk_reset_timer(sk, &icsk->icsk_delack_timer, __get__ZN20inet_connection_sock8icsk_ackE_2710(&icsk->icsk_ack).timeout);
 }

 else {
  no_printk("\001" "7" "%s", inet_csk_timer_bug_msg);
 }

}

struct sock *inet_csk_accept(struct sock *sk, int flags, int *err);

struct request_sock *inet_csk_search_req( struct sock *sk,
      struct request_sock ***prevp,
      __be16 rport,
      __be32 raddr,
      __be32 laddr);
int inet_csk_bind_conflict( struct sock *sk,
      struct inet_bind_bucket *tb, bool relax);
int inet_csk_get_port(struct sock *sk, unsigned short snum);

struct dst_entry *inet_csk_route_req(struct sock *sk, struct flowi4 *fl4,
         struct request_sock *req);
struct dst_entry *inet_csk_route_child_sock(struct sock *sk, struct sock *newsk,
         struct request_sock *req);

static inline void inet_csk_reqsk_queue_add(struct sock *sk,
         struct request_sock *req,
         struct sock *child)
{
 reqsk_queue_add(&inet_csk(sk)->icsk_accept_queue, req, sk, child);
}

void inet_csk_reqsk_queue_hash_add(struct sock *sk, struct request_sock *req,
       unsigned long timeout);

static inline void inet_csk_reqsk_queue_removed(struct sock *sk,
      struct request_sock *req)
{
 if (reqsk_queue_removed(&inet_csk(sk)->icsk_accept_queue, req) == 0)
  inet_csk_delete_keepalive_timer(sk);
}

static inline void inet_csk_reqsk_queue_added(struct sock *sk,
           unsigned long timeout)
{
 if (reqsk_queue_added(&inet_csk(sk)->icsk_accept_queue) == 0)
  inet_csk_reset_keepalive_timer(sk, timeout);
}

static inline int inet_csk_reqsk_queue_len( struct sock *sk)
{
 return reqsk_queue_len(&inet_csk(sk)->icsk_accept_queue);
}

static inline int inet_csk_reqsk_queue_young( struct sock *sk)
{
 return reqsk_queue_len_young(&inet_csk(sk)->icsk_accept_queue);
}

static inline int inet_csk_reqsk_queue_is_full( struct sock *sk)
{
 return reqsk_queue_is_full(&inet_csk(sk)->icsk_accept_queue);
}

static inline void inet_csk_reqsk_queue_unlink(struct sock *sk,
            struct request_sock *req,
            struct request_sock **prev)
{
 reqsk_queue_unlink(&inet_csk(sk)->icsk_accept_queue, req, prev);
}

static inline void inet_csk_reqsk_queue_drop(struct sock *sk,
          struct request_sock *req,
          struct request_sock **prev)
{
 inet_csk_reqsk_queue_unlink(sk, req, prev);
 inet_csk_reqsk_queue_removed(sk, req);
 reqsk_free(req);
}

void inet_csk_reqsk_queue_prune(struct sock *parent,
    unsigned long interval,
    unsigned long timeout,
    unsigned long max_rto);

void inet_csk_destroy_sock(struct sock *sk);
void inet_csk_prepare_forced_close(struct sock *sk);




static inline unsigned int inet_csk_listen_poll( struct sock *sk)
{
 return !reqsk_queue_empty(&inet_csk(sk)->icsk_accept_queue) ?
   (0x0001 | 0x0040) : 0;
}

int inet_csk_listen_start(struct sock *sk, int nr_table_entries);
void inet_csk_listen_stop(struct sock *sk);

void inet_csk_addr2sockaddr(struct sock *sk, struct sockaddr *uaddr);

int inet_csk_compat_getsockopt(struct sock *sk, int level, int optname,
          char *optval, int *optlen);
int inet_csk_compat_setsockopt(struct sock *sk, int level, int optname,
          char *optval, unsigned int optlen);

struct dst_entry *inet_csk_update_pmtu(struct sock *sk, u32 mtu);
enum {
 TCP_ESTABLISHED = 1,
 TCP_SYN_SENT,
 TCP_SYN_RECV,
 TCP_FIN_WAIT1,
 TCP_FIN_WAIT2,
 TCP_TIME_WAIT,
 TCP_CLOSE,
 TCP_CLOSE_WAIT,
 TCP_LAST_ACK,
 TCP_LISTEN,
 TCP_CLOSING,

 TCP_MAX_STATES
};





enum {
 TCPF_ESTABLISHED = (1 << 1),
 TCPF_SYN_SENT = (1 << 2),
 TCPF_SYN_RECV = (1 << 3),
 TCPF_FIN_WAIT1 = (1 << 4),
 TCPF_FIN_WAIT2 = (1 << 5),
 TCPF_TIME_WAIT = (1 << 6),
 TCPF_CLOSE = (1 << 7),
 TCPF_CLOSE_WAIT = (1 << 8),
 TCPF_LAST_ACK = (1 << 9),
 TCPF_LISTEN = (1 << 10),
 TCPF_CLOSING = (1 << 11)
};
struct timewait_sock_ops {
  template <typename, int = 0> struct __BYPASStimewait_sock_ops {};
  template <typename, int> friend struct __BYPASStimewait_sock_ops;
 struct kmem_cache *twsk_slab;
 char *twsk_slab_name;
 unsigned int twsk_obj_size;
 int (*twsk_unique)(struct sock *sk,
           struct sock *sktw, void *twp);
 void (*twsk_destructor)(struct sock *sk);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2715_0 {
  typedef TJP__ZN4sock11__sk_commonE_2715_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2715(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2715_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2719_0 {
  typedef TJP__ZN4sock11__sk_commonE_2719_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2719(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2719_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline int twsk_unique(struct sock *sk, struct sock *sktw, void *twp)
{
 if (__get__ZN4sock11__sk_commonE_2715(&sk->__sk_common).skc_prot->twsk_prot->twsk_unique != 0)
  return __get__ZN4sock11__sk_commonE_2719(&sk->__sk_common).skc_prot->twsk_prot->twsk_unique(sk, sktw, twp);
 return 0;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2721_0 {
  typedef TJP__ZN4sock11__sk_commonE_2721_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2721(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2721_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2724_0 {
  typedef TJP__ZN4sock11__sk_commonE_2724_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2724(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2724_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2728_0 {
  typedef TJP__ZN4sock11__sk_commonE_2728_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2728(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2728_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2732_0 {
  typedef TJP__ZN4sock11__sk_commonE_2732_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2732(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2732_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline void twsk_destructor(struct sock *sk)
{
 (sk == 0);
 (__get__ZN4sock11__sk_commonE_2721(&sk->__sk_common).skc_prot == 0);
 (__get__ZN4sock11__sk_commonE_2724(&sk->__sk_common).skc_prot->twsk_prot == 0);
 if (__get__ZN4sock11__sk_commonE_2728(&sk->__sk_common).skc_prot->twsk_prot->twsk_destructor != 0)
  __get__ZN4sock11__sk_commonE_2732(&sk->__sk_common).skc_prot->twsk_prot->twsk_destructor(sk);
}



struct inet_hashinfo;

template <typename TResult, typename TThat, typename TTarget> struct TJP_jiffies_2733_0 {
  typedef TJP_jiffies_2733_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get_jiffies_2733(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP_jiffies_2733_0< unsigned long int , void *, unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}
static inline u32 inet_tw_time_stamp(void)
{
 return __get_jiffies_2733(&jiffies);
}






struct inet_timewait_death_row {
  template <typename, int = 0> struct __BYPASSinet_timewait_death_row {};
  template <typename, int> friend struct __BYPASSinet_timewait_death_row;

 int twcal_hand;
 unsigned long twcal_jiffie;
 struct timer_list twcal_timer;
 struct hlist_head twcal_row[(1 << 5)];

 spinlock_t death_lock;
 int tw_count;
 int period;
 u32 thread_slots;
 struct work_struct twkill_work;
 struct timer_list tw_timer;
 int slot;
 struct hlist_head cells[8];
 struct inet_hashinfo *hashinfo;
 int sysctl_tw_recycle;
 int sysctl_max_tw_buckets;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void inet_twdr_hangman(unsigned long data);
void inet_twdr_twkill_work(struct work_struct *work);
void inet_twdr_twcal_tick(unsigned long data);

struct inet_bind_bucket;






struct inet_timewait_sock {
  template <typename, int = 0> struct __BYPASSinet_timewait_sock {};
  template <typename, int> friend struct __BYPASSinet_timewait_sock;




 struct sock_common __tw_common;
 int tw_timeout;
 unsigned char tw_substate;
 unsigned char tw_rcv_wscale;



 __be16 tw_sport;
 ;

 unsigned int tw_ipv6only : 1,
    tw_transparent : 1,
    tw_pad : 6,
    tw_tos : 8,
    tw_pad2 : 16;
 ;
 u32 tw_ttd;
 struct inet_bind_bucket *tw_tb;
 struct hlist_node tw_death_node;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


static inline int inet_twsk_dead_hashed( struct inet_timewait_sock *tw)
{
 return !hlist_unhashed(&tw->tw_death_node);
}

static inline void inet_twsk_dead_node_init(struct inet_timewait_sock *tw)
{
 tw->tw_death_node.pprev = 0;
}

static inline void __inet_twsk_del_dead_node(struct inet_timewait_sock *tw)
{
 __hlist_del(&tw->tw_death_node);
 inet_twsk_dead_node_init(tw);
}

static inline int inet_twsk_del_dead_node(struct inet_timewait_sock *tw)
{
 if (inet_twsk_dead_hashed(tw)) {
  __inet_twsk_del_dead_node(tw);
  return 1;
 }
 return 0;
}
static inline struct inet_timewait_sock *inet_twsk( struct sock *sk)
{
 return (struct inet_timewait_sock *)sk;
}

void inet_twsk_free(struct inet_timewait_sock *tw);
void inet_twsk_put(struct inet_timewait_sock *tw);

int inet_twsk_unhash(struct inet_timewait_sock *tw);

int inet_twsk_bind_unhash(struct inet_timewait_sock *tw,
     struct inet_hashinfo *hashinfo);

struct inet_timewait_sock *inet_twsk_alloc( struct sock *sk,
        int state);

void __inet_twsk_hashdance(struct inet_timewait_sock *tw, struct sock *sk,
      struct inet_hashinfo *hashinfo);

void inet_twsk_schedule(struct inet_timewait_sock *tw,
   struct inet_timewait_death_row *twdr,
   int timeo, int timewait_len);
void inet_twsk_deschedule(struct inet_timewait_sock *tw,
     struct inet_timewait_death_row *twdr);

void inet_twsk_purge(struct inet_hashinfo *hashinfo,
       struct inet_timewait_death_row *twdr, int family);

static inline
struct net *twsk_net( struct inet_timewait_sock *twsk)
{
 return read_pnet(&twsk->__tw_common.skc_net);
}

static inline
void twsk_net_set(struct inet_timewait_sock *twsk, struct net *net)
{
 write_pnet(&twsk->__tw_common.skc_net, net);
}
struct tcphdr {
  template <typename, int = 0> struct __BYPASStcphdr {};
  template <typename, int> friend struct __BYPASStcphdr;
 __be16 source;
 __be16 dest;
 __be32 seq;
 __be32 ack_seq;

 __u16 res1:4,
  doff:4,
  fin:1,
  syn:1,
  rst:1,
  psh:1,
  ack:1,
  urg:1,
  ece:1,
  cwr:1;
 __be16 window;
 __sum16 check;
 __be16 urg_ptr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






union tcp_word_hdr {
 struct tcphdr hdr;
 __be32 words[5];
};



enum {
 TCP_FLAG_CWR = (( __be32)((__u32)( (((__u32)((0x00800000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00800000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00800000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00800000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_ECE = (( __be32)((__u32)( (((__u32)((0x00400000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00400000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00400000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00400000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_URG = (( __be32)((__u32)( (((__u32)((0x00200000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00200000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00200000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00200000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_ACK = (( __be32)((__u32)( (((__u32)((0x00100000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00100000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00100000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00100000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_PSH = (( __be32)((__u32)( (((__u32)((0x00080000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00080000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00080000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00080000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_RST = (( __be32)((__u32)( (((__u32)((0x00040000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00040000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00040000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00040000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_SYN = (( __be32)((__u32)( (((__u32)((0x00020000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00020000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00020000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00020000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_FLAG_FIN = (( __be32)((__u32)( (((__u32)((0x00010000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x00010000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x00010000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x00010000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_RESERVED_BITS = (( __be32)((__u32)( (((__u32)((0x0F000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0F000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0F000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0F000000)) & (__u32)0xff000000UL) >> 24)))),
 TCP_DATA_OFFSET = (( __be32)((__u32)( (((__u32)((0xF0000000)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xF0000000)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xF0000000)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xF0000000)) & (__u32)0xff000000UL) >> 24))))
};
struct tcp_repair_opt {
  template <typename, int = 0> struct __BYPASStcp_repair_opt {};
  template <typename, int> friend struct __BYPASStcp_repair_opt;
 __u32 opt_code;
 __u32 opt_val;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum {
 TCP_NO_QUEUE,
 TCP_RECV_QUEUE,
 TCP_SEND_QUEUE,
 TCP_QUEUES_NR,
};
enum tcp_ca_state {
 TCP_CA_Open = 0,

 TCP_CA_Disorder = 1,

 TCP_CA_CWR = 2,

 TCP_CA_Recovery = 3,

 TCP_CA_Loss = 4

};

struct tcp_info {
  template <typename, int = 0> struct __BYPASStcp_info {};
  template <typename, int> friend struct __BYPASStcp_info;
 __u8 tcpi_state;
 __u8 tcpi_ca_state;
 __u8 tcpi_retransmits;
 __u8 tcpi_probes;
 __u8 tcpi_backoff;
 __u8 tcpi_options;
 __u8 tcpi_snd_wscale : 4, tcpi_rcv_wscale : 4;

 __u32 tcpi_rto;
 __u32 tcpi_ato;
 __u32 tcpi_snd_mss;
 __u32 tcpi_rcv_mss;

 __u32 tcpi_unacked;
 __u32 tcpi_sacked;
 __u32 tcpi_lost;
 __u32 tcpi_retrans;
 __u32 tcpi_fackets;


 __u32 tcpi_last_data_sent;
 __u32 tcpi_last_ack_sent;
 __u32 tcpi_last_data_recv;
 __u32 tcpi_last_ack_recv;


 __u32 tcpi_pmtu;
 __u32 tcpi_rcv_ssthresh;
 __u32 tcpi_rtt;
 __u32 tcpi_rttvar;
 __u32 tcpi_snd_ssthresh;
 __u32 tcpi_snd_cwnd;
 __u32 tcpi_advmss;
 __u32 tcpi_reordering;

 __u32 tcpi_rcv_rtt;
 __u32 tcpi_rcv_space;

 __u32 tcpi_total_retrans;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct tcp_md5sig {
  template <typename, int = 0> struct __BYPASStcp_md5sig {};
  template <typename, int> friend struct __BYPASStcp_md5sig;
 struct __kernel_sockaddr_storage tcpm_addr;
 __u16 __tcpm_pad1;
 __u16 tcpm_keylen;
 __u32 __tcpm_pad2;
 __u8 tcpm_key[80];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct tcphdr *tcp_hdr( struct sk_buff *skb)
{
 return (struct tcphdr *)skb_transport_header(skb);
}

static inline unsigned int tcp_hdrlen( struct sk_buff *skb)
{
 return tcp_hdr(skb)->doff * 4;
}

static inline struct tcphdr *inner_tcp_hdr( struct sk_buff *skb)
{
 return (struct tcphdr *)skb_inner_transport_header(skb);
}

static inline unsigned int inner_tcp_hdrlen( struct sk_buff *skb)
{
 return inner_tcp_hdr(skb)->doff * 4;
}

static inline unsigned int tcp_optlen( struct sk_buff *skb)
{
 return (tcp_hdr(skb)->doff - 5) * 4;
}







struct tcp_fastopen_cookie {
  template <typename, int = 0> struct __BYPASStcp_fastopen_cookie {};
  template <typename, int> friend struct __BYPASStcp_fastopen_cookie;
 s8 len;
 u8 val[16];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct tcp_sack_block_wire {
  template <typename, int = 0> struct __BYPASStcp_sack_block_wire {};
  template <typename, int> friend struct __BYPASStcp_sack_block_wire;
 __be32 start_seq;
 __be32 end_seq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tcp_sack_block {
  template <typename, int = 0> struct __BYPASStcp_sack_block {};
  template <typename, int> friend struct __BYPASStcp_sack_block;
 u32 start_seq;
 u32 end_seq;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct tcp_options_received {
  template <typename, int = 0> struct __BYPASStcp_options_received {};
  template <typename, int> friend struct __BYPASStcp_options_received;

 long ts_recent_stamp;
 u32 ts_recent;
 u32 rcv_tsval;
 u32 rcv_tsecr;
 u16 saw_tstamp : 1,
  tstamp_ok : 1,
  dsack : 1,
  wscale_ok : 1,
  sack_ok : 4,
  snd_wscale : 4,
  rcv_wscale : 4;
 u8 num_sacks;
 u16 user_mss;
 u16 mss_clamp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline void tcp_clear_options(struct tcp_options_received *rx_opt)
{
 rx_opt->tstamp_ok = rx_opt->sack_ok = 0;
 rx_opt->wscale_ok = rx_opt->snd_wscale = 0;
}







struct tcp_request_sock_ops;

struct tcp_request_sock {
  template <typename, int = 0> struct __BYPASStcp_request_sock {};
  template <typename, int> friend struct __BYPASStcp_request_sock;
 struct inet_request_sock req;


 struct tcp_request_sock_ops *af_specific;

 struct sock *listener;
 u32 rcv_isn;
 u32 snt_isn;
 u32 snt_synack;
 u32 rcv_nxt;




  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct tcp_request_sock *tcp_rsk( struct request_sock *req)
{
 return (struct tcp_request_sock *)req;
}

struct tcp_sock {
  template <typename, int = 0> struct __BYPASStcp_sock {};
  template <typename, int> friend struct __BYPASStcp_sock;

 struct inet_connection_sock inet_conn;
 u16 tcp_header_len;
 u16 xmit_size_goal_segs;





 __be32 pred_flags;






  u32 rcv_nxt;
 u32 copied_seq;
 u32 rcv_wup;
  u32 snd_nxt;

  u32 snd_una;
  u32 snd_sml;
 u32 rcv_tstamp;
 u32 lsndtime;

 u32 tsoffset;

 struct list_head tsq_node;
 unsigned long tsq_flags;





 struct _ucopy {
  template <typename, int = 0> struct __BYPASS_ZN8tcp_sock6_ucopyE {};
  template <typename, int> friend struct __BYPASS_ZN8tcp_sock6_ucopyE;

  struct sk_buff_head prequeue;
  struct task_struct *task;
  struct iovec *iov;
  int memory;
  int len;







 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ucopy;

 u32 snd_wl1;
 u32 snd_wnd;
 u32 max_window;
 u32 mss_cache;

 u32 window_clamp;
 u32 rcv_ssthresh;

 u16 advmss;
 u8 unused;

    struct _ts_state {
  template <typename, int = 0> struct __BYPASS_ZN8tcp_sock9_ts_stateE {};
  template <typename, int> friend struct __BYPASS_ZN8tcp_sock9_ts_stateE;

 u8 nonagle : 4,
  thin_lto : 1,
  thin_dupack : 1,
  repair : 1,
  frto : 1;


    
  friend class ::Introspect;
  friend class ::MyIntrospect;
} ts_state;

 u8 repair_queue;
 u8 do_early_retrans:1,
  syn_data:1,
  syn_fastopen:1,
  syn_data_acked:1;
 u32 tlp_high_seq;


 u32 srtt;
 u32 mdev;
 u32 mdev_max;
 u32 rttvar;
 u32 rtt_seq;

 u32 packets_out;
 u32 retrans_out;

 u16 urg_data;
 u8 ecn_flags;
 u8 reordering;
 u32 snd_up;

 u8 keepalive_probes;



 struct tcp_options_received rx_opt;




  u32 snd_ssthresh;
  u32 snd_cwnd;
 u32 snd_cwnd_cnt;
 u32 snd_cwnd_clamp;
 u32 snd_cwnd_used;
 u32 snd_cwnd_stamp;
 u32 prior_cwnd;
 u32 prr_delivered;

 u32 prr_out;

  u32 rcv_wnd;
 u32 write_seq;
 u32 notsent_lowat;
 u32 pushed_seq;
 u32 lost_out;
 u32 sacked_out;
 u32 fackets_out;
 u32 tso_deferred;


 struct sk_buff* lost_skb_hint;
 struct sk_buff *retransmit_skb_hint;

 struct sk_buff_head out_of_order_queue;


 struct tcp_sack_block duplicate_sack[1];
 struct tcp_sack_block selective_acks[4];

 struct tcp_sack_block recv_sack_cache[4];

 struct sk_buff *highest_sack;





 int lost_cnt_hint;
 u32 retransmit_high;

 u32 lost_retrans_low;

 u32 prior_ssthresh;
 u32 high_seq;

 u32 retrans_stamp;


 u32 undo_marker;
 int undo_retrans;
 u32 total_retrans;

 u32 urg_seq;
 unsigned int keepalive_time;
 unsigned int keepalive_intvl;

 int linger2;





 struct _rcv_rtt_est {
  template <typename, int = 0> struct __BYPASS_ZN8tcp_sock12_rcv_rtt_estE {};
  template <typename, int> friend struct __BYPASS_ZN8tcp_sock12_rcv_rtt_estE;

  u32 rtt;
  u32 seq;
  u32 time;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} rcv_rtt_est;





 struct _rcvq_space {
  template <typename, int = 0> struct __BYPASS_ZN8tcp_sock11_rcvq_spaceE {};
  template <typename, int> friend struct __BYPASS_ZN8tcp_sock11_rcvq_spaceE;

  int space;
  u32 seq;
  u32 time;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} rcvq_space;





 struct _mtu_probe {
  template <typename, int = 0> struct __BYPASS_ZN8tcp_sock10_mtu_probeE {};
  template <typename, int> friend struct __BYPASS_ZN8tcp_sock10_mtu_probeE;

  u32 probe_seq_start;
  u32 probe_seq_end;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} mtu_probe;
 u32 mtu_info;





 struct tcp_sock_af_ops *af_specific;


 struct tcp_md5sig_info *md5sig_info;



 struct tcp_fastopen_request *fastopen_req;



 struct request_sock *fastopen_rsk;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

enum tsq_flags {
 TSQ_THROTTLED,
 TSQ_QUEUED,
 TCP_TSQ_DEFERRED,
 TCP_WRITE_TIMER_DEFERRED,
 TCP_DELACK_TIMER_DEFERRED,
 TCP_MTU_REDUCED_DEFERRED,


};

static inline struct tcp_sock *tcp_sk( struct sock *sk)
{
 return (struct tcp_sock *)sk;
}

struct tcp_timewait_sock {
  template <typename, int = 0> struct __BYPASStcp_timewait_sock {};
  template <typename, int> friend struct __BYPASStcp_timewait_sock;
 struct inet_timewait_sock tw_sk;
 u32 tw_rcv_nxt;
 u32 tw_snd_nxt;
 u32 tw_rcv_wnd;
 u32 tw_ts_offset;
 u32 tw_ts_recent;
 long tw_ts_recent_stamp;

 struct tcp_md5sig_key *tw_md5_key;


  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct tcp_timewait_sock *tcp_twsk( struct sock *sk)
{
 return (struct tcp_timewait_sock *)sk;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2738_0 {
  typedef TJP__ZN4sock11__sk_commonE_2738_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2738(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2738_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8tcp_sock12fastopen_rskE_2740_0 {
  typedef TJP__ZN8tcp_sock12fastopen_rskE_2740_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline request_sock * __get__ZN8tcp_sock12fastopen_rskE_2740(request_sock * *source) {
  ::request_sock *__result_buffer;
  typedef TJP__ZN8tcp_sock12fastopen_rskE_2740_0< ::request_sock *, ::tcp_sock , ::request_sock * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::request_sock *&)__result_buffer;
}
static inline bool tcp_passive_fastopen( struct sock *sk)
{
 return (__get__ZN4sock11__sk_commonE_2738(&sk->__sk_common).skc_state == TCP_SYN_RECV &&
  __get__ZN8tcp_sock12fastopen_rskE_2740(&tcp_sk(sk)->fastopen_rsk) != 0);
}

static inline bool fastopen_cookie_present(struct tcp_fastopen_cookie *foc)
{
 return foc->len != -1;
}

extern void tcp_sock_destruct(struct sock *sk);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue9fastopenqE_2742_0 {
  typedef TJP__ZN18request_sock_queue9fastopenqE_2742_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline fastopen_queue * __get__ZN18request_sock_queue9fastopenqE_2742(fastopen_queue * *source) {
  ::fastopen_queue *__result_buffer;
  typedef TJP__ZN18request_sock_queue9fastopenqE_2742_0< ::fastopen_queue *, ::request_sock_queue , ::fastopen_queue * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::fastopen_queue *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock13sk_allocationE_2743_0 {
  typedef TJP__ZN4sock13sk_allocationE_2743_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock13sk_allocationE_2743(unsigned int *source) {
  ::gfp_t __result_buffer;
  typedef TJP__ZN4sock13sk_allocationE_2743_0< ::gfp_t , ::sock , ::gfp_t  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::gfp_t &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN18request_sock_queue9fastopenqE_2744_0 {
  typedef TJP__ZN18request_sock_queue9fastopenqE_2744_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline fastopen_queue * __get__ZN18request_sock_queue9fastopenqE_2744(fastopen_queue * *source) {
  ::fastopen_queue *__result_buffer;
  typedef TJP__ZN18request_sock_queue9fastopenqE_2744_0< ::fastopen_queue *, ::request_sock_queue , ::fastopen_queue * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::fastopen_queue *&)__result_buffer;
}
static inline int fastopen_init_queue(struct sock *sk, int backlog)
{
 struct request_sock_queue *queue =
     &inet_csk(sk)->icsk_accept_queue;

 if (__get__ZN18request_sock_queue9fastopenqE_2742(&queue->fastopenq) == 0) {
  queue->fastopenq = kzalloc(
      sizeof(struct fastopen_queue),
      __get__ZN4sock13sk_allocationE_2743(&sk->sk_allocation));
  if (__get__ZN18request_sock_queue9fastopenqE_2744(&queue->fastopenq) == 0)
   return -12;

  sk->sk_destruct = tcp_sock_destruct;
  ;
 }
 queue->fastopenq->max_qlen = backlog;
 return 0;
}
struct udphdr {
  template <typename, int = 0> struct __BYPASSudphdr {};
  template <typename, int> friend struct __BYPASSudphdr;
 __be16 source;
 __be16 dest;
 __be16 len;
 __sum16 check;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct udphdr *udp_hdr( struct sk_buff *skb)
{
 return (struct udphdr *)skb_transport_header(skb);
}

static inline struct udphdr *inner_udp_hdr( struct sk_buff *skb)
{
 return (struct udphdr *)skb_inner_transport_header(skb);
}



static inline int udp_hashfn(struct net *net, unsigned num, unsigned mask)
{
 return (num + net_hash_mix(net)) & mask;
}

struct udp_sock {
  template <typename, int = 0> struct __BYPASSudp_sock {};
  template <typename, int> friend struct __BYPASSudp_sock;

 struct inet_sock inet;



 int pending;
 unsigned int corkflag;
   __u16 encap_type;




 __u16 len;



 __u16 pcslen;
 __u16 pcrlen;




 __u8 pcflag;
 __u8 unused[3];



 int (*encap_rcv)(struct sock *sk, struct sk_buff *skb);
 void (*encap_destroy)(struct sock *sk);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct udp_sock *udp_sk( struct sock *sk)
{
 return (struct udp_sock *)sk;
}



static inline struct ipv6hdr *ipv6_hdr( struct sk_buff *skb)
{
 return (struct ipv6hdr *)skb_network_header(skb);
}

static inline struct ipv6hdr *inner_ipv6_hdr( struct sk_buff *skb)
{
 return (struct ipv6hdr *)skb_inner_network_header(skb);
}

static inline struct ipv6hdr *ipipv6_hdr( struct sk_buff *skb)
{
 return (struct ipv6hdr *)skb_transport_header(skb);
}






struct inet6_skb_parm {
  template <typename, int = 0> struct __BYPASSinet6_skb_parm {};
  template <typename, int> friend struct __BYPASSinet6_skb_parm;
 int iif;
 __be16 ra;
 __u16 hop;
 __u16 dst0;
 __u16 srcrt;
 __u16 dst1;
 __u16 lastopt;
 __u16 nhoff;
 __u16 flags;

 __u16 dsthao;

 __u16 frag_max_size;







  friend class ::Introspect;
  friend class ::MyIntrospect;
};




static inline int inet6_iif( struct sk_buff *skb)
{
 return ((struct inet6_skb_parm*)((skb)->cb))->iif;
}

struct tcp6_request_sock {
  template <typename, int = 0> struct __BYPASStcp6_request_sock {};
  template <typename, int> friend struct __BYPASStcp6_request_sock;
 struct tcp_request_sock tcp6rsk_tcp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ipv6_mc_socklist;
struct ipv6_ac_socklist;
struct ipv6_fl_socklist;
struct ipv6_pinfo {
  template <typename, int = 0> struct __BYPASSipv6_pinfo {};
  template <typename, int> friend struct __BYPASSipv6_pinfo;
 struct in6_addr saddr;
 struct in6_pktinfo sticky_pktinfo;
 struct in6_addr *daddr_cache;

 struct in6_addr *saddr_cache;


 __be32 flow_label;
 __u32 frag_size;






    struct _pi_state1 {
  template <typename, int = 0> struct __BYPASS_ZN10ipv6_pinfo10_pi_state1E {};
  template <typename, int> friend struct __BYPASS_ZN10ipv6_pinfo10_pi_state1E;





 __u16 __unused_1:7;
 __s16 hop_limit:9;



    
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pi_state1;



    struct _pi_state2 {
  template <typename, int = 0> struct __BYPASS_ZN10ipv6_pinfo10_pi_state2E {};
  template <typename, int> friend struct __BYPASS_ZN10ipv6_pinfo10_pi_state2E;







 __u16 mc_loop:1,
    __unused_2:6;
 __s16 mcast_hops:9;




    
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pi_state2;

 int ucast_oif;
 int mcast_oif;


 union {
  struct {
   __u16 srcrt:1,
    osrcrt:1,
           rxinfo:1,
           rxoinfo:1,
    rxhlim:1,
    rxohlim:1,
    hopopts:1,
    ohopopts:1,
    dstopts:1,
    odstopts:1,
                                rxflow:1,
    rxtclass:1,
    rxpmtu:1,
    rxorigdstaddr:1;

  
  friend class ::Introspect;
  friend class ::MyIntrospect;
} bits;
  __u16 all;
 } rxopt;



    struct _pi_state3 {
  template <typename, int = 0> struct __BYPASS_ZN10ipv6_pinfo10_pi_state3E {};
  template <typename, int> friend struct __BYPASS_ZN10ipv6_pinfo10_pi_state3E;

 __u16 recverr:1,
                         sndflow:1,
    pmtudisc:2,
    ipv6only:1,
    srcprefs:3,



    dontfrag:1;


    
  friend class ::Introspect;
  friend class ::MyIntrospect;
} pi_state3;

 __u8 min_hopcount;
 __u8 tclass;
 __u8 rcv_tclass;

 __u32 dst_cookie;
 __u32 rx_dst_cookie;

 struct ipv6_mc_socklist *ipv6_mc_list;
 struct ipv6_ac_socklist *ipv6_ac_list;
 struct ipv6_fl_socklist *ipv6_fl_list;

 struct ipv6_txoptions *opt;
 struct sk_buff *pktoptions;
 struct sk_buff *rxpmtu;
 struct {
  struct ipv6_txoptions *opt;
  u8 hop_limit;
  u8 tclass;
 
  friend class ::Introspect;
  friend class ::MyIntrospect;
} cork;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


struct raw6_sock {
  template <typename, int = 0> struct __BYPASSraw6_sock {};
  template <typename, int> friend struct __BYPASSraw6_sock;

 struct inet_sock inet;
 __u32 checksum;
 __u32 offset;
 struct icmp6_filter filter;
 __u32 ip6mr_table;

 struct ipv6_pinfo inet6;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct udp6_sock {
  template <typename, int = 0> struct __BYPASSudp6_sock {};
  template <typename, int> friend struct __BYPASSudp6_sock;
 struct udp_sock udp;

 struct ipv6_pinfo inet6;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct tcp6_sock {
  template <typename, int = 0> struct __BYPASStcp6_sock {};
  template <typename, int> friend struct __BYPASStcp6_sock;
 struct tcp_sock tcp;

 struct ipv6_pinfo inet6;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern int inet6_sk_rebuild_header(struct sock *sk);

struct tcp6_timewait_sock {
  template <typename, int = 0> struct __BYPASStcp6_timewait_sock {};
  template <typename, int> friend struct __BYPASStcp6_timewait_sock;
 struct tcp_timewait_sock tcp6tw_tcp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock6pinet6E_2747_0 {
  typedef TJP__ZN9inet_sock6pinet6E_2747_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline ipv6_pinfo * __get__ZN9inet_sock6pinet6E_2747(ipv6_pinfo * *source) {
  ::ipv6_pinfo *__result_buffer;
  typedef TJP__ZN9inet_sock6pinet6E_2747_0< ::ipv6_pinfo *, ::inet_sock , ::ipv6_pinfo * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::ipv6_pinfo *&)__result_buffer;
}
static inline struct ipv6_pinfo * inet6_sk( struct sock *__sk)
{
 return __get__ZN9inet_sock6pinet6E_2747(&inet_sk(__sk)->pinet6);
}

static inline struct request_sock *inet6_reqsk_alloc(struct request_sock_ops *ops)
{
 struct request_sock *req = reqsk_alloc(ops);

 if (req)
  inet_rsk(req)->pktopts = 0;

 return req;
}

static inline struct raw6_sock *raw6_sk( struct sock *sk)
{
 return (struct raw6_sock *)sk;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2749_0 {
  typedef TJP__ZN4sock11__sk_commonE_2749_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2749(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2749_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline void inet_sk_copy_descendant(struct sock *sk_to,
        struct sock *sk_from)
{
 int ancestor_size = sizeof(struct inet_sock);

 if (__get__ZN4sock11__sk_commonE_2749(&sk_from->__sk_common).skc_family == 10)
  ancestor_size += sizeof(struct ipv6_pinfo);

 __inet_sk_copy_descendant(sk_to, sk_from, ancestor_size);
}







template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2751_0 {
  typedef TJP__ZN4sock11__sk_commonE_2751_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2751(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2751_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static inline struct in6_addr *inet6_rcv_saddr( struct sock *sk)
{
 if (__get__ZN4sock11__sk_commonE_2751(&sk->__sk_common).skc_family == 10)
  return &sk->__sk_common.skc_v6_rcv_saddr;
 return 0;
}


enum {
 INET6_IFADDR_STATE_DAD,
 INET6_IFADDR_STATE_POSTDAD,
 INET6_IFADDR_STATE_UP,
 INET6_IFADDR_STATE_DEAD,
};

struct inet6_ifaddr {
  template <typename, int = 0> struct __BYPASSinet6_ifaddr {};
  template <typename, int> friend struct __BYPASSinet6_ifaddr;
 struct in6_addr addr;
 __u32 prefix_len;


 __u32 valid_lft;
 __u32 prefered_lft;
 atomic_t refcnt;
 spinlock_t lock;
 spinlock_t state_lock;

 int state;

 __u8 dad_probes;
 __u8 flags;

 __u16 scope;

 unsigned long cstamp;
 unsigned long tstamp;

 struct timer_list dad_timer;

 struct inet6_dev *idev;
 struct rt6_info *rt;

 struct hlist_node addr_lst;
 struct list_head if_list;

 struct list_head tmp_list;
 struct inet6_ifaddr *ifpub;
 int regen_count;

 bool tokenized;

 struct callback_head rcu;
 struct in6_addr peer_addr;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip6_sf_socklist {
  template <typename, int = 0> struct __BYPASSip6_sf_socklist {};
  template <typename, int> friend struct __BYPASSip6_sf_socklist;
 unsigned int sl_max;
 unsigned int sl_count;
 struct in6_addr sl_addr[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};






struct ipv6_mc_socklist {
  template <typename, int = 0> struct __BYPASSipv6_mc_socklist {};
  template <typename, int> friend struct __BYPASSipv6_mc_socklist;
 struct in6_addr addr;
 int ifindex;
 struct ipv6_mc_socklist *next;
 rwlock_t sflock;
 unsigned int sfmode;
 struct ip6_sf_socklist *sflist;
 struct callback_head rcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip6_sf_list {
  template <typename, int = 0> struct __BYPASSip6_sf_list {};
  template <typename, int> friend struct __BYPASSip6_sf_list;
 struct ip6_sf_list *sf_next;
 struct in6_addr sf_addr;
 unsigned long sf_count[2];
 unsigned char sf_gsresp;
 unsigned char sf_oldin;
 unsigned char sf_crcount;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







struct ifmcaddr6 {
  template <typename, int = 0> struct __BYPASSifmcaddr6 {};
  template <typename, int> friend struct __BYPASSifmcaddr6;
 struct in6_addr mca_addr;
 struct inet6_dev *idev;
 struct ifmcaddr6 *next;
 struct ip6_sf_list *mca_sources;
 struct ip6_sf_list *mca_tomb;
 unsigned int mca_sfmode;
 unsigned char mca_crcount;
 unsigned long mca_sfcount[2];
 struct timer_list mca_timer;
 unsigned int mca_flags;
 int mca_users;
 atomic_t mca_refcnt;
 spinlock_t mca_lock;
 unsigned long mca_cstamp;
 unsigned long mca_tstamp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



struct ipv6_ac_socklist {
  template <typename, int = 0> struct __BYPASSipv6_ac_socklist {};
  template <typename, int> friend struct __BYPASSipv6_ac_socklist;
 struct in6_addr acl_addr;
 int acl_ifindex;
 struct ipv6_ac_socklist *acl_next;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ifacaddr6 {
  template <typename, int = 0> struct __BYPASSifacaddr6 {};
  template <typename, int> friend struct __BYPASSifacaddr6;
 struct in6_addr aca_addr;
 struct inet6_dev *aca_idev;
 struct rt6_info *aca_rt;
 struct ifacaddr6 *aca_next;
 int aca_users;
 atomic_t aca_refcnt;
 spinlock_t aca_lock;
 unsigned long aca_cstamp;
 unsigned long aca_tstamp;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};





struct ipv6_devstat {
  template <typename, int = 0> struct __BYPASSipv6_devstat {};
  template <typename, int> friend struct __BYPASSipv6_devstat;
 struct proc_dir_entry *proc_dir_entry;
 __typeof__(struct ipstats_mib) *ipv6[1];
 __typeof__(struct icmpv6_mib_device) *icmpv6dev;
 __typeof__(struct icmpv6msg_mib_device) *icmpv6msgdev;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inet6_dev {
  template <typename, int = 0> struct __BYPASSinet6_dev {};
  template <typename, int> friend struct __BYPASSinet6_dev;
 struct net_device *dev;

 struct list_head addr_list;

 struct ifmcaddr6 *mc_list;
 struct ifmcaddr6 *mc_tomb;
 spinlock_t mc_lock;

 unsigned char mc_qrv;
 unsigned char mc_gq_running;
 unsigned char mc_ifc_count;
 unsigned char mc_dad_count;

 unsigned long mc_v1_seen;
 unsigned long mc_qi;
 unsigned long mc_qri;
 unsigned long mc_maxdelay;

 struct timer_list mc_gq_timer;
 struct timer_list mc_ifc_timer;
 struct timer_list mc_dad_timer;

 struct ifacaddr6 *ac_list;
 rwlock_t lock;
 atomic_t refcnt;
 __u32 if_flags;
 int dead;

 u8 rndid[8];
 struct timer_list regen_timer;
 struct list_head tempaddr_list;

 struct in6_addr token;

 struct neigh_parms *nd_parms;
 struct ipv6_devconf cnf;
 struct ipv6_devstat stats;

 struct timer_list rs_timer;
 __u8 rs_probes;

 unsigned long tstamp;
 struct callback_head rcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2753_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2753_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2753(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2753_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}
static inline void ipv6_eth_mc_map( struct in6_addr *addr, char *buf)
{






 buf[0]= 0x33;
 buf[1]= 0x33;

 memcpy(buf + 2, &__get__ZN8in6_addr5in6_uE_2753(&addr->in6_u).u6_addr32[3], sizeof(__u32));
}

static inline void ipv6_arcnet_mc_map( struct in6_addr *addr, char *buf)
{
 buf[0] = 0x00;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2755_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2755_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2755(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2755_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}
static inline void ipv6_ib_mc_map( struct in6_addr *addr,
      unsigned char *broadcast, char *buf)
{
 unsigned char scope = broadcast[5] & 0xF;

 buf[0] = 0;
 buf[1] = 0xff;
 buf[2] = 0xff;
 buf[3] = 0xff;
 buf[4] = 0xff;
 buf[5] = 0x10 | scope;
 buf[6] = 0x60;
 buf[7] = 0x1b;
 buf[8] = broadcast[8];
 buf[9] = broadcast[9];
 memcpy(buf + 10, __get__ZN8in6_addr5in6_uE_2755(&addr->in6_u).u6_addr8 + 6, 10);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2757_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2757_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2757(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2757_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2759_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2759_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2759(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2759_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2761_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2761_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2761(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2761_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2763_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2763_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2763(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2763_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}
static inline int ipv6_ipgre_mc_map( struct in6_addr *addr,
        unsigned char *broadcast, char *buf)
{
 if ((broadcast[0] | broadcast[1] | broadcast[2] | broadcast[3]) != 0) {
  memcpy(buf, broadcast, 4);
 } else {

  if ((__get__ZN8in6_addr5in6_uE_2757(&addr->in6_u).u6_addr32[0] | __get__ZN8in6_addr5in6_uE_2759(&addr->in6_u).u6_addr32[1] |
       (__get__ZN8in6_addr5in6_uE_2761(&addr->in6_u).u6_addr32[2] ^ (( __be32)(__builtin_constant_p((__u32)((0x0000ffff))) ? ((__u32)( (((__u32)((0x0000ffff)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0000ffff)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0000ffff)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0000ffff)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0000ffff)))))) != 0)
   return -22;
  memcpy(buf, &__get__ZN8in6_addr5in6_uE_2763(&addr->in6_u).u6_addr32[3], 4);
 }
 return 0;
}
enum {
 __ND_OPT_PREFIX_INFO_END = 0,
 ND_OPT_SOURCE_LL_ADDR = 1,
 ND_OPT_TARGET_LL_ADDR = 2,
 ND_OPT_PREFIX_INFO = 3,
 ND_OPT_REDIRECT_HDR = 4,
 ND_OPT_MTU = 5,
 __ND_OPT_ARRAY_MAX,
 ND_OPT_ROUTE_INFO = 24,
 ND_OPT_RDNSS = 25,
 ND_OPT_DNSSL = 31,
 __ND_OPT_MAX
};
struct arpreq {
  template <typename, int = 0> struct __BYPASSarpreq {};
  template <typename, int> friend struct __BYPASSarpreq;
  struct sockaddr arp_pa;
  struct sockaddr arp_ha;
  int arp_flags;
  struct sockaddr arp_netmask;
  char arp_dev[16];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct arpreq_old {
  template <typename, int = 0> struct __BYPASSarpreq_old {};
  template <typename, int> friend struct __BYPASSarpreq_old;
  struct sockaddr arp_pa;
  struct sockaddr arp_ha;
  int arp_flags;
  struct sockaddr arp_netmask;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct arphdr {
  template <typename, int = 0> struct __BYPASSarphdr {};
  template <typename, int> friend struct __BYPASSarphdr;
 __be16 ar_hrd;
 __be16 ar_pro;
 unsigned char ar_hln;
 unsigned char ar_pln;
 __be16 ar_op;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline struct arphdr *arp_hdr( struct sk_buff *skb)
{
 return (struct arphdr *)skb_network_header(skb);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device4typeE_2764_0 {
  typedef TJP__ZN10net_device4typeE_2764_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN10net_device4typeE_2764(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN10net_device4typeE_2764_0< unsigned short int , ::net_device , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8addr_lenE_2765_0 {
  typedef TJP__ZN10net_device8addr_lenE_2765_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device8addr_lenE_2765(unsigned char *source) {
  unsigned char __result_buffer;
  typedef TJP__ZN10net_device8addr_lenE_2765_0< unsigned char , ::net_device , unsigned char  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8addr_lenE_2766_0 {
  typedef TJP__ZN10net_device8addr_lenE_2766_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device8addr_lenE_2766(unsigned char *source) {
  unsigned char __result_buffer;
  typedef TJP__ZN10net_device8addr_lenE_2766_0< unsigned char , ::net_device , unsigned char  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char &)__result_buffer;
}
static inline int arp_hdr_len(struct net_device *dev)
{
 switch (__get__ZN10net_device4typeE_2764(&dev->type)) {

 case 24:

  return sizeof(struct arphdr) + __get__ZN10net_device8addr_lenE_2765(&dev->addr_len) + sizeof(u32) * 2;

 default:

  return sizeof(struct arphdr) + (__get__ZN10net_device8addr_lenE_2766(&dev->addr_len) + sizeof(u32)) * 2;
 }
}

static inline __attribute__((always_inline)) u64 hash_64(u64 val, unsigned int bits)
{
 u64 hash = val;


 u64 n = hash;
 n <<= 18;
 hash -= n;
 n <<= 33;
 hash -= n;
 n <<= 3;
 hash += n;
 n <<= 3;
 hash -= n;
 n <<= 4;
 hash += n;
 n <<= 2;
 hash += n;


 return hash >> (64 - bits);
}

static inline u32 hash_32(u32 val, unsigned int bits)
{

 u32 hash = val * 0x9e370001UL;


 return hash >> (32 - bits);
}

static inline unsigned long hash_ptr( void *ptr, unsigned int bits)
{
 return hash_64((unsigned long)ptr, bits);
}

static inline u32 hash32_ptr( void *ptr)
{
 unsigned long val = (unsigned long)ptr;


 val ^= (val >> 32);

 return (u32)val;
}



struct ctl_table;
struct inet6_dev;
struct net_device;
struct net_proto_family;
struct sk_buff;

extern struct neigh_table nd_tbl;

struct nd_msg {
  template <typename, int = 0> struct __BYPASSnd_msg {};
  template <typename, int> friend struct __BYPASSnd_msg;
        struct icmp6hdr icmph;
        struct in6_addr target;
 __u8 opt[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rs_msg {
  template <typename, int = 0> struct __BYPASSrs_msg {};
  template <typename, int> friend struct __BYPASSrs_msg;
 struct icmp6hdr icmph;
 __u8 opt[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ra_msg {
  template <typename, int = 0> struct __BYPASSra_msg {};
  template <typename, int> friend struct __BYPASSra_msg;
        struct icmp6hdr icmph;
 __be32 reachable_time;
 __be32 retrans_timer;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rd_msg {
  template <typename, int = 0> struct __BYPASSrd_msg {};
  template <typename, int> friend struct __BYPASSrd_msg;
 struct icmp6hdr icmph;
 struct in6_addr target;
 struct in6_addr dest;
 __u8 opt[0];

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct nd_opt_hdr {
  template <typename, int = 0> struct __BYPASSnd_opt_hdr {};
  template <typename, int> friend struct __BYPASSnd_opt_hdr;
 __u8 nd_opt_type;
 __u8 nd_opt_len;

  friend class ::Introspect;
  friend class ::MyIntrospect;
} __attribute__((packed));


struct ndisc_options {
  template <typename, int = 0> struct __BYPASSndisc_options {};
  template <typename, int> friend struct __BYPASSndisc_options;
 struct nd_opt_hdr *nd_opt_array[__ND_OPT_ARRAY_MAX];

 struct nd_opt_hdr *nd_opts_ri;
 struct nd_opt_hdr *nd_opts_ri_end;

 struct nd_opt_hdr *nd_useropts;
 struct nd_opt_hdr *nd_useropts_end;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};
struct ndisc_options *ndisc_parse_options(u8 *opt, int opt_len,
       struct ndisc_options *ndopts);







static inline int ndisc_addr_option_pad(unsigned short type)
{
 switch (type) {
 case 32: return 2;
 default: return 0;
 }
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device8addr_lenE_2767_0 {
  typedef TJP__ZN10net_device8addr_lenE_2767_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN10net_device8addr_lenE_2767(unsigned char *source) {
  unsigned char __result_buffer;
  typedef TJP__ZN10net_device8addr_lenE_2767_0< unsigned char , ::net_device , unsigned char  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned char &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device4typeE_2768_0 {
  typedef TJP__ZN10net_device4typeE_2768_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN10net_device4typeE_2768(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN10net_device4typeE_2768_0< unsigned short int , ::net_device , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}
static inline int ndisc_opt_addr_space(struct net_device *dev)
{
 return (((__get__ZN10net_device8addr_lenE_2767(&dev->addr_len) + ndisc_addr_option_pad(__get__ZN10net_device4typeE_2768(&dev->type)))+2+7)&~7)
                                           ;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device4typeE_2770_0 {
  typedef TJP__ZN10net_device4typeE_2770_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN10net_device4typeE_2770(unsigned short int *source) {
  unsigned short int __result_buffer;
  typedef TJP__ZN10net_device4typeE_2770_0< unsigned short int , ::net_device , unsigned short int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned short int &)__result_buffer;
}
static inline u8 *ndisc_opt_addr_data(struct nd_opt_hdr *p,
          struct net_device *dev)
{
 u8 *lladdr = (u8 *)(p + 1);
 int lladdrlen = p->nd_opt_len << 3;
 int prepad = ndisc_addr_option_pad(__get__ZN10net_device4typeE_2770(&dev->type));
 if (lladdrlen != ndisc_opt_addr_space(dev))
  return 0;
 return lladdr + prepad;
}

static inline u32 ndisc_hashfn( void *pkey, struct net_device *dev, __u32 *hash_rnd)
{
 u32 *p32 = pkey;

 return (((p32[0] ^ hash32_ptr(dev)) * hash_rnd[0]) +
  (p32[1] * hash_rnd[1]) +
  (p32[2] * hash_rnd[2]) +
  (p32[3] * hash_rnd[3]));
}

static inline struct neighbour *__ipv6_neigh_lookup_noref(struct net_device *dev, void *pkey)
{
 struct neigh_hash_table *nht;
 u32 *p32 = pkey;
 struct neighbour *n;
 u32 hash_val;

 nht = (nd_tbl.nht);
 hash_val = ndisc_hashfn(pkey, dev, nht->hash_rnd) >> (32 - nht->hash_shift);
 for (n = (nht->hash_buckets[hash_val]);
      n != 0;
      n = (n->next)) {
  u32 *n32 = (u32 *) n->primary_key;
  if (n->dev == dev &&
      ((n32[0] ^ p32[0]) | (n32[1] ^ p32[1]) |
       (n32[2] ^ p32[2]) | (n32[3] ^ p32[3])) == 0)
   return n;
 }

 return 0;
}

static inline struct neighbour *__ipv6_neigh_lookup(struct net_device *dev, void *pkey)
{
 struct neighbour *n;

 ;
 n = __ipv6_neigh_lookup_noref(dev, pkey);
 if (n && !atomic_add_unless((&n->refcnt), 1, 0))
  n = 0;
 ;

 return n;
}

int ndisc_init(void);
int ndisc_late_init(void);

void ndisc_late_cleanup(void);
void ndisc_cleanup(void);

int ndisc_rcv(struct sk_buff *skb);

void ndisc_send_ns(struct net_device *dev, struct neighbour *neigh,
     struct in6_addr *solicit,
     struct in6_addr *daddr, struct in6_addr *saddr);

void ndisc_send_rs(struct net_device *dev,
     struct in6_addr *saddr, struct in6_addr *daddr);
void ndisc_send_na(struct net_device *dev, struct neighbour *neigh,
     struct in6_addr *daddr,
     struct in6_addr *solicited_addr,
     bool router, bool solicited, bool override, bool inc_opt);

void ndisc_send_redirect(struct sk_buff *skb, struct in6_addr *target);

int ndisc_mc_map( struct in6_addr *addr, char *buf, struct net_device *dev,
   int dir);





int igmp6_init(void);

void igmp6_cleanup(void);

int igmp6_event_query(struct sk_buff *skb);

int igmp6_event_report(struct sk_buff *skb);



int ndisc_ifinfo_sysctl_change(struct ctl_table *ctl, int write,
          void *buffer, size_t *lenp, loff_t *ppos);
int ndisc_ifinfo_sysctl_strategy(struct ctl_table *ctl,
     void *oldval, size_t *oldlenp,
     void *newval, size_t newlen);


void inet6_ifinfo_notify(int event, struct inet6_dev *idev);
struct frag_hdr {
  template <typename, int = 0> struct __BYPASSfrag_hdr {};
  template <typename, int> friend struct __BYPASSfrag_hdr;
 __u8 nexthdr;
 __u8 reserved;
 __be16 frag_off;
 __be32 identification;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};







extern int sysctl_mld_max_msf;
struct ip6_ra_chain {
  template <typename, int = 0> struct __BYPASSip6_ra_chain {};
  template <typename, int> friend struct __BYPASSip6_ra_chain;
 struct ip6_ra_chain *next;
 struct sock *sk;
 int sel;
 void (*destructor)(struct sock *);

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct ip6_ra_chain *ip6_ra_chain;
extern rwlock_t ip6_ra_lock;






struct ipv6_txoptions {
  template <typename, int = 0> struct __BYPASSipv6_txoptions {};
  template <typename, int> friend struct __BYPASSipv6_txoptions;

 int tot_len;



 __u16 opt_flen;
 __u16 opt_nflen;

 struct ipv6_opt_hdr *hopopt;
 struct ipv6_opt_hdr *dst0opt;
 struct ipv6_rt_hdr *srcrt;
 struct ipv6_opt_hdr *dst1opt;



  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip6_flowlabel {
  template <typename, int = 0> struct __BYPASSip6_flowlabel {};
  template <typename, int> friend struct __BYPASSip6_flowlabel;
 struct ip6_flowlabel *next;
 __be32 label;
 atomic_t users;
 struct in6_addr dst;
 struct ipv6_txoptions *opt;
 unsigned long linger;
 struct callback_head rcu;
 u8 share;
 union {
  struct pid *pid;
  kuid_t uid;
 } owner;
 unsigned long lastuse;
 unsigned long expires;
 struct net *fl_net;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct ipv6_fl_socklist {
  template <typename, int = 0> struct __BYPASSipv6_fl_socklist {};
  template <typename, int> friend struct __BYPASSipv6_fl_socklist;
 struct ipv6_fl_socklist *next;
 struct ip6_flowlabel *fl;
 struct callback_head rcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct ip6_flowlabel *fl6_sock_lookup(struct sock *sk, __be32 label);
struct ipv6_txoptions *fl6_merge_options(struct ipv6_txoptions *opt_space,
      struct ip6_flowlabel *fl,
      struct ipv6_txoptions *fopt);
void fl6_free_socklist(struct sock *sk);
int ipv6_flowlabel_opt(struct sock *sk, char *optval, int optlen);
int ipv6_flowlabel_opt_get(struct sock *sk, struct in6_flowlabel_req *freq);
int ip6_flowlabel_init(void);
void ip6_flowlabel_cleanup(void);

static inline void fl6_sock_release(struct ip6_flowlabel *fl)
{
 if (fl)
  ;
}

void icmpv6_notify(struct sk_buff *skb, u8 type, u8 code, __be32 info);

int icmpv6_push_pending_frames(struct sock *sk, struct flowi6 *fl6,
          struct icmp6hdr *thdr, int len);

struct dst_entry *icmpv6_route_lookup(struct net *net, struct sk_buff *skb,
          struct sock *sk, struct flowi6 *fl6);

int ip6_ra_control(struct sock *sk, int sel);

int ipv6_parse_hopopts(struct sk_buff *skb);

struct ipv6_txoptions *ipv6_dup_options(struct sock *sk,
     struct ipv6_txoptions *opt);
struct ipv6_txoptions *ipv6_renew_options(struct sock *sk,
       struct ipv6_txoptions *opt,
       int newtype,
       struct ipv6_opt_hdr *newopt,
       int newoptlen);
struct ipv6_txoptions *ipv6_fixup_options(struct ipv6_txoptions *opt_space,
       struct ipv6_txoptions *opt);

bool ipv6_opt_accepted( struct sock *sk, struct sk_buff *skb);

static inline bool ipv6_accept_ra(struct inet6_dev *idev)
{



 return idev->cnf.forwarding ? idev->cnf.accept_ra == 2 :
     idev->cnf.accept_ra;
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net4ipv6E_2788_0 {
  typedef TJP__ZN3net4ipv6E_2788_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_ipv6 __get__ZN3net4ipv6E_2788(netns_ipv6 *source) {
  AC::ResultBuffer< ::netns_ipv6  > __result_buffer;
  typedef TJP__ZN3net4ipv6E_2788_0< ::netns_ipv6 , ::net , ::netns_ipv6  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_ipv6 &)__result_buffer;
}
static inline int ip6_frag_nqueues(struct net *net)
{
 return __get__ZN3net4ipv6E_2788(&net->ipv6).frags.nqueues;
}

static inline int ip6_frag_mem(struct net *net)
{
 return sum_frag_mem_limit(&net->ipv6.frags);
}






int __ipv6_addr_type( struct in6_addr *addr);
static inline int ipv6_addr_type( struct in6_addr *addr)
{
 return __ipv6_addr_type(addr) & 0xffff;
}

static inline int ipv6_addr_scope( struct in6_addr *addr)
{
 return __ipv6_addr_type(addr) & 0x00f0U;
}

static inline int __ipv6_addr_src_scope(int type)
{
 return (type == 0x0000U) ? -1 : (type >> 16);
}

static inline int ipv6_addr_src_scope( struct in6_addr *addr)
{
 return __ipv6_addr_src_scope(__ipv6_addr_type(addr));
}

static inline bool __ipv6_addr_needs_scope_id(int type)
{
 return type & 0x0020U ||
        (type & 0x0002U &&
  (type & (0x0010U|0x0020U)));
}

static inline __u32 ipv6_iface_scope_id( struct in6_addr *addr, int iface)
{
 return __ipv6_addr_needs_scope_id(__ipv6_addr_type(addr)) ? iface : 0;
}

static inline int ipv6_addr_cmp( struct in6_addr *a1, struct in6_addr *a2)
{
 return memcmp(a1, a2, sizeof(struct in6_addr));
}

static inline bool
ipv6_masked_addr_cmp( struct in6_addr *a1, struct in6_addr *m,
       struct in6_addr *a2)
{

 unsigned long *ul1 = ( unsigned long *)a1;
 unsigned long *ulm = ( unsigned long *)m;
 unsigned long *ul2 = ( unsigned long *)a2;

 return !!(((ul1[0] ^ ul2[0]) & ulm[0]) |
    ((ul1[1] ^ ul2[1]) & ulm[1]));






}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2790_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2790_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2790(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2790_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2792_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2792_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2792(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2792_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2794_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2794_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2794(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2794_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}
static inline void ipv6_addr_prefix(struct in6_addr *pfx,
        struct in6_addr *addr,
        int plen)
{

 int o = plen >> 3,
     b = plen & 0x7;

 memset(__get__ZN8in6_addr5in6_uE_2790(&pfx->in6_u).u6_addr8, 0, sizeof(pfx->in6_u.u6_addr8));
 memcpy(__get__ZN8in6_addr5in6_uE_2792(&pfx->in6_u).u6_addr8, addr, o);
 if (b != 0)
  pfx->in6_u.u6_addr8[o] = __get__ZN8in6_addr5in6_uE_2794(&addr->in6_u).u6_addr8[o] & (0xff00 >> b);
}

static inline void __ipv6_addr_set_half(__be32 *addr,
     __be32 wh, __be32 wl)
{







 if (__builtin_constant_p(wl) && __builtin_constant_p(wh)) {
  *( u64 *)addr = (( u64)(wl) << 32 | ( u64)(wh));
  return;
 }


 addr[0] = wh;
 addr[1] = wl;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2796_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2796_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2796(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2796_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2798_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2798_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2798(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2798_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}
static inline void ipv6_addr_set(struct in6_addr *addr,
         __be32 w1, __be32 w2,
         __be32 w3, __be32 w4)
{
 __ipv6_addr_set_half(&__get__ZN8in6_addr5in6_uE_2796(&addr->in6_u).u6_addr32[0], w1, w2);
 __ipv6_addr_set_half(&__get__ZN8in6_addr5in6_uE_2798(&addr->in6_u).u6_addr32[2], w3, w4);
}

static inline bool ipv6_addr_equal( struct in6_addr *a1,
       struct in6_addr *a2)
{

 unsigned long *ul1 = ( unsigned long *)a1;
 unsigned long *ul2 = ( unsigned long *)a2;

 return ((ul1[0] ^ ul2[0]) | (ul1[1] ^ ul2[1])) == 0UL;






}


static inline bool __ipv6_prefix_equal64_half( __be64 *a1,
           __be64 *a2,
           unsigned int len)
{
 if (len && ((*a1 ^ *a2) & (( __be64)(__builtin_constant_p((__u64)(((~0UL) << (64 - len)))) ? ((__u64)( (((__u64)(((~0UL) << (64 - len))) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(((~0UL) << (64 - len))) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(((~0UL) << (64 - len)))))))
  return _false;
 return _true;
}

static inline bool ipv6_prefix_equal( struct in6_addr *addr1,
         struct in6_addr *addr2,
         unsigned int prefixlen)
{
 __be64 *a1 = ( __be64 *)addr1;
 __be64 *a2 = ( __be64 *)addr2;

 if (prefixlen >= 64) {
  if (a1[0] ^ a2[0])
   return _false;
  return __ipv6_prefix_equal64_half(a1 + 1, a2 + 1, prefixlen - 64);
 }
 return __ipv6_prefix_equal64_half(a1, a2, prefixlen);
}
struct inet_frag_queue;

enum ip6_defrag_users {
 IP6_DEFRAG_LOCAL_DELIVER,
 IP6_DEFRAG_CONNTRACK_IN,
 __IP6_DEFRAG_CONNTRACK_IN = IP6_DEFRAG_CONNTRACK_IN + ((u16)(~0U)),
 IP6_DEFRAG_CONNTRACK_OUT,
 __IP6_DEFRAG_CONNTRACK_OUT = IP6_DEFRAG_CONNTRACK_OUT + ((u16)(~0U)),
 IP6_DEFRAG_CONNTRACK_BRIDGE_IN,
 __IP6_DEFRAG_CONNTRACK_BRIDGE_IN = IP6_DEFRAG_CONNTRACK_BRIDGE_IN + ((u16)(~0U)),
};

struct ip6_create_arg {
  template <typename, int = 0> struct __BYPASSip6_create_arg {};
  template <typename, int> friend struct __BYPASSip6_create_arg;
 __be32 id;
 u32 user;
 struct in6_addr *src;
 struct in6_addr *dst;
 u8 ecn;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void ip6_frag_init(struct inet_frag_queue *q, void *a);
bool ip6_frag_match(struct inet_frag_queue *q, void *a);




struct frag_queue {
  template <typename, int = 0> struct __BYPASSfrag_queue {};
  template <typename, int> friend struct __BYPASSfrag_queue;
 struct inet_frag_queue q;

 __be32 id;
 u32 user;
 struct in6_addr saddr;
 struct in6_addr daddr;

 int iif;
 unsigned int csum;
 __u16 nhoffset;
 u8 ecn;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

void ip6_expire_frag_queue(struct net *net, struct frag_queue *fq,
      struct inet_frags *frags);

static inline bool ipv6_addr_any( struct in6_addr *a)
{

 unsigned long *ul = ( unsigned long *)a;

 return (ul[0] | ul[1]) == 0UL;




}

static inline u32 ipv6_addr_hash( struct in6_addr *a)
{

 unsigned long *ul = ( unsigned long *)a;
 unsigned long x = ul[0] ^ ul[1];

 return (u32)(x ^ (x >> 32));




}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2803_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2803_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2803(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2803_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2805_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2805_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2805(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2805_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2807_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2807_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2807(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2807_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2809_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2809_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2809(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2809_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}
static inline u32 __ipv6_addr_jhash( struct in6_addr *a, u32 initval)
{
 u32 v = ( u32)__get__ZN8in6_addr5in6_uE_2803(&a->in6_u).u6_addr32[0] ^ ( u32)__get__ZN8in6_addr5in6_uE_2805(&a->in6_u).u6_addr32[1];

 return jhash_3words(v,
       ( u32)__get__ZN8in6_addr5in6_uE_2807(&a->in6_u).u6_addr32[2],
       ( u32)__get__ZN8in6_addr5in6_uE_2809(&a->in6_u).u6_addr32[3],
       initval);
}

static inline bool ipv6_addr_loopback( struct in6_addr *a)
{

 unsigned long *ul = ( unsigned long *)a;

 return (ul[0] | (ul[1] ^ (( __be64)(__builtin_constant_p((__u64)((1))) ? ((__u64)( (((__u64)((1)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)((1)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)((1)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)((1)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)((1)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)((1)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)((1)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)((1)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64((1)))))) == 0UL;




}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2811_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2811_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2811(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2811_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}
static inline bool ipv6_addr_v4mapped( struct in6_addr *a)
{
 return (

  *(__be64 *)a |



  (__get__ZN8in6_addr5in6_uE_2811(&a->in6_u).u6_addr32[2] ^ (( __be32)(__builtin_constant_p((__u32)((0x0000ffff))) ? ((__u32)( (((__u32)((0x0000ffff)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0000ffff)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0000ffff)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0000ffff)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0000ffff)))))) == 0UL;
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN8in6_addr5in6_uE_2813_0 {
  typedef TJP__ZN8in6_addr5in6_uE_2813_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline in6_addr::_in6_u __get__ZN8in6_addr5in6_uE_2813(in6_addr::_in6_u *source) {
  AC::ResultBuffer< ::in6_addr::_in6_u  > __result_buffer;
  typedef TJP__ZN8in6_addr5in6_uE_2813_0< ::in6_addr::_in6_u , ::in6_addr , ::in6_addr::_in6_u  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::in6_addr::_in6_u &)__result_buffer;
}
static inline bool ipv6_addr_orchid( struct in6_addr *a)
{
 return (__get__ZN8in6_addr5in6_uE_2813(&a->in6_u).u6_addr32[0] & (( __be32)(__builtin_constant_p((__u32)((0xfffffff0))) ? ((__u32)( (((__u32)((0xfffffff0)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0xfffffff0)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0xfffffff0)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0xfffffff0)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0xfffffff0))))) == (( __be32)(__builtin_constant_p((__u32)((0x20010010))) ? ((__u32)( (((__u32)((0x20010010)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x20010010)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x20010010)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x20010010)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x20010010))));
}

static inline void ipv6_addr_set_v4mapped( __be32 addr,
       struct in6_addr *v4mapped)
{
 ipv6_addr_set(v4mapped,
   0, 0,
   (( __be32)(__builtin_constant_p((__u32)((0x0000FFFF))) ? ((__u32)( (((__u32)((0x0000FFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0000FFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0000FFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0000FFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0000FFFF)))),
   addr);
}





static inline int __ipv6_addr_diff32( void *token1, void *token2, int addrlen)
{
 __be32 *a1 = token1, *a2 = token2;
 int i;

 addrlen >>= 2;

 for (i = 0; i < addrlen; i++) {
  __be32 xb = a1[i] ^ a2[i];
  if (xb)
   return i * 32 + 31 - __fls((__builtin_constant_p((__u32)(( __u32)(__be32)(xb))) ? ((__u32)( (((__u32)(( __u32)(__be32)(xb)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(xb)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(xb)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(xb)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(xb))));
 }
 return addrlen << 5;
}


static inline int __ipv6_addr_diff64( void *token1, void *token2, int addrlen)
{
 __be64 *a1 = token1, *a2 = token2;
 int i;

 addrlen >>= 3;

 for (i = 0; i < addrlen; i++) {
  __be64 xb = a1[i] ^ a2[i];
  if (xb)
   return i * 64 + 63 - __fls((__builtin_constant_p((__u64)(( __u64)(__be64)(xb))) ? ((__u64)( (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x00000000000000ffULL) << 56) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x000000000000ff00ULL) << 40) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x0000000000ff0000ULL) << 24) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x00000000ff000000ULL) << 8) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x000000ff00000000ULL) >> 8) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x0000ff0000000000ULL) >> 24) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0x00ff000000000000ULL) >> 40) | (((__u64)(( __u64)(__be64)(xb)) & (__u64)0xff00000000000000ULL) >> 56))) : __fswab64(( __u64)(__be64)(xb))));
 }

 return addrlen << 6;
}


static inline int __ipv6_addr_diff( void *token1, void *token2, int addrlen)
{

 if (__builtin_constant_p(addrlen) && !(addrlen & 7))
  return __ipv6_addr_diff64(token1, token2, addrlen);

 return __ipv6_addr_diff32(token1, token2, addrlen);
}

static inline int ipv6_addr_diff( struct in6_addr *a1, struct in6_addr *a2)
{
 return __ipv6_addr_diff(a1, a2, sizeof(struct in6_addr));
}

void ipv6_select_ident(struct frag_hdr *fhdr, struct rt6_info *rt);

int ip6_dst_hoplimit(struct dst_entry *dst);




static inline void ip6_flow_hdr(struct ipv6hdr *hdr, unsigned int tclass,
    __be32 flowlabel)
{
 *(__be32 *)hdr = (( __be32)(__builtin_constant_p((__u32)((0x60000000 | (tclass << 20)))) ? ((__u32)( (((__u32)((0x60000000 | (tclass << 20))) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x60000000 | (tclass << 20))) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x60000000 | (tclass << 20))) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x60000000 | (tclass << 20))) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x60000000 | (tclass << 20))))) | flowlabel;
}

static inline __be32 ip6_flowinfo( struct ipv6hdr *hdr)
{
 return *(__be32 *)hdr & (( __be32)(__builtin_constant_p((__u32)((0x0FFFFFFF))) ? ((__u32)( (((__u32)((0x0FFFFFFF)) & (__u32)0x000000ffUL) << 24) | (((__u32)((0x0FFFFFFF)) & (__u32)0x0000ff00UL) << 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)((0x0FFFFFFF)) & (__u32)0xff000000UL) >> 24))) : __fswab32((0x0FFFFFFF))));
}
int ipv6_rcv(struct sk_buff *skb, struct net_device *dev,
      struct packet_type *pt, struct net_device *orig_dev);

int ip6_rcv_finish(struct sk_buff *skb);




int ip6_xmit(struct sock *sk, struct sk_buff *skb, struct flowi6 *fl6,
      struct ipv6_txoptions *opt, int tclass);

int ip6_find_1stfragopt(struct sk_buff *skb, u8 **nexthdr);

int ip6_append_data(struct sock *sk,
      int getfrag(void *from, char *to, int offset, int len,
    int odd, struct sk_buff *skb),
      void *from, int length, int transhdrlen, int hlimit,
      int tclass, struct ipv6_txoptions *opt, struct flowi6 *fl6,
      struct rt6_info *rt, unsigned int flags, int dontfrag);

int ip6_push_pending_frames(struct sock *sk);

void ip6_flush_pending_frames(struct sock *sk);

int ip6_dst_lookup(struct sock *sk, struct dst_entry **dst, struct flowi6 *fl6);
struct dst_entry *ip6_dst_lookup_flow(struct sock *sk, struct flowi6 *fl6,
          struct in6_addr *final_dst,
          bool can_sleep);
struct dst_entry *ip6_sk_dst_lookup_flow(struct sock *sk, struct flowi6 *fl6,
      struct in6_addr *final_dst,
      bool can_sleep);
struct dst_entry *ip6_blackhole_route(struct net *net,
          struct dst_entry *orig_dst);





int ip6_output(struct sk_buff *skb);
int ip6_forward(struct sk_buff *skb);
int ip6_input(struct sk_buff *skb);
int ip6_mc_input(struct sk_buff *skb);

int __ip6_local_out(struct sk_buff *skb);
int ip6_local_out(struct sk_buff *skb);





void ipv6_push_nfrag_opts(struct sk_buff *skb, struct ipv6_txoptions *opt,
     u8 *proto, struct in6_addr **daddr_p);
void ipv6_push_frag_opts(struct sk_buff *skb, struct ipv6_txoptions *opt,
    u8 *proto);

int ipv6_skip_exthdr( struct sk_buff *, int start, u8 *nexthdrp,
       __be16 *frag_offp);

bool ipv6_ext_hdr(u8 nexthdr);

enum {
 IP6_FH_F_FRAG = (1 << 0),
 IP6_FH_F_AUTH = (1 << 1),
 IP6_FH_F_SKIP_RH = (1 << 2),
};


int ipv6_find_hdr( struct sk_buff *skb, unsigned int *offset, int target,
    unsigned short *fragoff, int *fragflg);

int ipv6_find_tlv(struct sk_buff *skb, int offset, int type);

struct in6_addr *fl6_update_dst(struct flowi6 *fl6,
    struct ipv6_txoptions *opt,
    struct in6_addr *orig);





int ipv6_setsockopt(struct sock *sk, int level, int optname,
      char *optval, unsigned int optlen);
int ipv6_getsockopt(struct sock *sk, int level, int optname,
      char *optval, int *optlen);
int compat_ipv6_setsockopt(struct sock *sk, int level, int optname,
      char *optval, unsigned int optlen);
int compat_ipv6_getsockopt(struct sock *sk, int level, int optname,
      char *optval, int *optlen);

int ip6_datagram_connect(struct sock *sk, struct sockaddr *addr, int addr_len);

int ipv6_recv_error(struct sock *sk, struct msghdr *msg, int len,
      int *addr_len);
int ipv6_recv_rxpmtu(struct sock *sk, struct msghdr *msg, int len,
       int *addr_len);
void ipv6_icmp_error(struct sock *sk, struct sk_buff *skb, int err, __be16 port,
       u32 info, u8 *payload);
void ipv6_local_error(struct sock *sk, int err, struct flowi6 *fl6, u32 info);
void ipv6_local_rxpmtu(struct sock *sk, struct flowi6 *fl6, u32 mtu);

int inet6_release(struct socket *sock);
int inet6_bind(struct socket *sock, struct sockaddr *uaddr, int addr_len);
int inet6_getname(struct socket *sock, struct sockaddr *uaddr, int *uaddr_len,
    int peer);
int inet6_ioctl(struct socket *sock, unsigned int cmd, unsigned long arg);

int inet6_hash_connect(struct inet_timewait_death_row *death_row,
         struct sock *sk);




extern struct proto_ops inet6_stream_ops;
extern struct proto_ops inet6_dgram_ops;

struct group_source_req;
struct group_filter;

int ip6_mc_source(int add, int omode, struct sock *sk,
    struct group_source_req *pgsr);
int ip6_mc_msfilter(struct sock *sk, struct group_filter *gsf);
int ip6_mc_msfget(struct sock *sk, struct group_filter *gsf,
    struct group_filter *optval, int *optlen);


int ac6_proc_init(struct net *net);
void ac6_proc_exit(struct net *net);
int raw6_proc_init(void);
void raw6_proc_exit(void);
int tcp6_proc_init(struct net *net);
void tcp6_proc_exit(struct net *net);
int udp6_proc_init(struct net *net);
void udp6_proc_exit(struct net *net);
int udplite6_proc_init(void);
void udplite6_proc_exit(void);
int ipv6_misc_proc_init(void);
void ipv6_misc_proc_exit(void);
int snmp6_register_dev(struct inet6_dev *idev);
int snmp6_unregister_dev(struct inet6_dev *idev);
extern struct ctl_table ipv6_route_table_template[];
extern struct ctl_table ipv6_icmp_table_template[];

struct ctl_table *ipv6_icmp_sysctl_init(struct net *net);
struct ctl_table *ipv6_route_sysctl_init(struct net *net);
int ipv6_sysctl_register(void);
void ipv6_sysctl_unregister(void);


struct inetpeer_addr_base {
  template <typename, int = 0> struct __BYPASSinetpeer_addr_base {};
  template <typename, int> friend struct __BYPASSinetpeer_addr_base;
 union {
  __be32 a4;
  __be32 a6[4];
 };

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inetpeer_addr {
  template <typename, int = 0> struct __BYPASSinetpeer_addr {};
  template <typename, int> friend struct __BYPASSinetpeer_addr;
 struct inetpeer_addr_base addr;
 __u16 family;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inet_peer {
  template <typename, int = 0> struct __BYPASSinet_peer {};
  template <typename, int> friend struct __BYPASSinet_peer;

 struct inet_peer *avl_left, *avl_right;
 struct inetpeer_addr daddr;
 __u32 avl_height;

 u32 metrics[(__RTAX_MAX - 1)];
 u32 rate_tokens;
 unsigned long rate_last;
 union {
  struct list_head gc_list;
  struct callback_head gc_rcu;
 };





 union {
  struct {
   atomic_t rid;
   atomic_t ip_id_count;
  
  friend class ::Introspect;
  friend class ::MyIntrospect;
};
  struct callback_head rcu;
  struct inet_peer *gc_next;
 };


 __u32 dtime;
 atomic_t refcnt;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct inet_peer_base {
  template <typename, int = 0> struct __BYPASSinet_peer_base {};
  template <typename, int> friend struct __BYPASSinet_peer_base;
 struct inet_peer *root;
 seqlock_t lock;
 u32 flush_seq;
 int total;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



static inline struct inet_peer *inetpeer_ptr(unsigned long val)
{
 (val & 0x1UL);
 return (struct inet_peer *) val;
}

static inline struct inet_peer_base *inetpeer_base_ptr(unsigned long val)
{
 if (!(val & 0x1UL))
  return 0;
 val &= ~0x1UL;
 return (struct inet_peer_base *) val;
}

static inline bool inetpeer_ptr_is_peer(unsigned long val)
{
 return !(val & 0x1UL);
}

static inline void __inetpeer_ptr_set_peer(unsigned long *val, struct inet_peer *peer)
{

 *val = (unsigned long) peer;
}

static inline bool inetpeer_ptr_set_peer(unsigned long *ptr, struct inet_peer *peer)
{
 unsigned long val = (unsigned long) peer;
 unsigned long orig = *ptr;

 if (!(orig & 0x1UL) ||
     ({ __typeof__(*((ptr))) __ret; __typeof__(*((ptr))) __old = ((orig)); __typeof__(*((ptr))) __new = ((val)); switch ((sizeof(*(ptr)))) { case 1: { u8 *__ptr = ( u8 *)((ptr)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgb %2,%1" : "=a" (__ret), "+m" (*__ptr) : "q" (__new), "0" (__old) : "memory"); break; } case 2: { u16 *__ptr = ( u16 *)((ptr)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgw %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 4: { u32 *__ptr = ( u32 *)((ptr)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgl %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } case 8: { u64 *__ptr = ( u64 *)((ptr)); asm (".pushsection .smp_locks,\"a\"\n" ".balign 4\n" ".long 671f - .\n" ".popsection\n" "671:" "\n\tlock; " "cmpxchgq %2,%1" : "=a" (__ret), "+m" (*__ptr) : "r" (__new), "0" (__old) : "memory"); break; } default: __cmpxchg_wrong_size(); } __ret; }) != orig)
  return _false;
 return _true;
}

static inline void inetpeer_init_ptr(unsigned long *ptr, struct inet_peer_base *base)
{
 *ptr = (unsigned long) base | 0x1UL;
}

static inline void inetpeer_transfer_peer(unsigned long *to, unsigned long *from)
{
 unsigned long val = *from;

 *to = val;
 if (inetpeer_ptr_is_peer(val)) {
  struct inet_peer *peer = inetpeer_ptr(val);
  ;
 }
}

void inet_peer_base_init(struct inet_peer_base *);

void inet_initpeers(void) __attribute__ ((__section__(".init.text"))) __attribute__((__cold__)) ;



static inline bool inet_metrics_new( struct inet_peer *p)
{
 return p->metrics[RTAX_LOCK-1] == (~(u32) 0);
}


struct inet_peer *inet_getpeer(struct inet_peer_base *base,
          struct inetpeer_addr *daddr,
          int create);

static inline struct inet_peer *inet_getpeer_v4(struct inet_peer_base *base,
      __be32 v4daddr,
      int create)
{
 struct inetpeer_addr daddr;

 daddr.addr.a4 = v4daddr;
 daddr.family = 2;
 return inet_getpeer(base, &daddr, create);
}

static inline struct inet_peer *inet_getpeer_v6(struct inet_peer_base *base,
      struct in6_addr *v6daddr,
      int create)
{
 struct inetpeer_addr daddr;

 *(struct in6_addr *)daddr.addr.a6 = *v6daddr;
 daddr.family = 10;
 return inet_getpeer(base, &daddr, create);
}


void inet_putpeer(struct inet_peer *p);
bool inet_peer_xrlim_allow(struct inet_peer *peer, int timeout);

void inetpeer_invalidate_tree(struct inet_peer_base *);
void inetpeer_invalidate_family(int family);





static inline void inet_peer_refcheck( struct inet_peer *p)
{
 (atomic_read(&p->refcnt) <= 0);
}



static inline int inet_getid(struct inet_peer *p, int more)
{
 int old, _new;
 more++;
 inet_peer_refcheck(p);
 do {
  old = atomic_read(&p->ip_id_count);
  _new = old + more;
  if (!_new)
   _new = 1;
 } while (atomic_cmpxchg(&p->ip_id_count, old, _new) != old);
 return _new;
}


struct fib_nh;
struct fib_info;
struct rtable {
  template <typename, int = 0> struct __BYPASSrtable {};
  template <typename, int> friend struct __BYPASSrtable;
 struct dst_entry dst;

 int rt_genid;
 unsigned int rt_flags;
 __u16 rt_type;
 __u8 rt_is_input;
 __u8 rt_uses_gateway;

 int rt_iif;


 __be32 rt_gateway;


 u32 rt_pmtu;

 struct list_head rt_uncached;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline bool rt_is_input_route( struct rtable *rt)
{
 return rt->rt_is_input != 0;
}

static inline bool rt_is_output_route( struct rtable *rt)
{
 return rt->rt_is_input == 0;
}

static inline __be32 rt_nexthop( struct rtable *rt, __be32 daddr)
{
 if (rt->rt_gateway)
  return rt->rt_gateway;
 return daddr;
}

struct ip_rt_acct {
  template <typename, int = 0> struct __BYPASSip_rt_acct {};
  template <typename, int> friend struct __BYPASSip_rt_acct;
 __u32 o_bytes;
 __u32 o_packets;
 __u32 i_bytes;
 __u32 i_packets;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

struct rt_cache_stat {
  template <typename, int = 0> struct __BYPASSrt_cache_stat {};
  template <typename, int> friend struct __BYPASSrt_cache_stat;
        unsigned int in_slow_tot;
        unsigned int in_slow_mc;
        unsigned int in_no_route;
        unsigned int in_brd;
        unsigned int in_martian_dst;
        unsigned int in_martian_src;
        unsigned int out_slow_tot;
        unsigned int out_slow_mc;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct ip_rt_acct *ip_rt_acct;

struct in_device;

int ip_rt_init(void);
void rt_cache_flush(struct net *net);
void rt_flush_dev(struct net_device *dev);
struct rtable *__ip_route_output_key(struct net *, struct flowi4 *flp);
struct rtable *ip_route_output_flow(struct net *, struct flowi4 *flp,
        struct sock *sk);
struct dst_entry *ipv4_blackhole_route(struct net *net,
           struct dst_entry *dst_orig);

static inline struct rtable *ip_route_output_key(struct net *net, struct flowi4 *flp)
{
 return ip_route_output_flow(net, flp, 0);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_markE_2822_0 {
  typedef TJP__ZN4sock7sk_markE_2822_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock7sk_markE_2822(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN4sock7sk_markE_2822_0< ::__u32 , ::sock , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}
static inline struct rtable *ip_route_output_ports(struct net *net, struct flowi4 *fl4,
         struct sock *sk,
         __be32 daddr, __be32 saddr,
         __be16 dport, __be16 sport,
         __u8 proto, __u8 tos, int oif)
{
 flowi4_init_output(fl4, oif, sk ? __get__ZN4sock7sk_markE_2822(&sk->sk_mark) : 0, tos,
      RT_SCOPE_UNIVERSE, proto,
      sk ? inet_sk_flowi_flags(sk) : 0,
      daddr, saddr, dport, sport);
 if (sk)
  security_sk_classify_flow(sk, flowi4_to_flowi(fl4));
 return ip_route_output_flow(net, fl4, sk);
}

static inline struct rtable *ip_route_output_gre(struct net *net, struct flowi4 *fl4,
       __be32 daddr, __be32 saddr,
       __be32 gre_key, __u8 tos, int oif)
{
 memset(fl4, 0, sizeof(*fl4));
 fl4->__fl_common.flowic_oif = oif;
 fl4->daddr = daddr;
 fl4->saddr = saddr;
 fl4->__fl_common.flowic_tos = tos;
 fl4->__fl_common.flowic_proto = IPPROTO_GRE;
 fl4->uli.gre_key = gre_key;
 return ip_route_output_key(net, fl4);
}

int ip_route_input_noref(struct sk_buff *skb, __be32 dst, __be32 src,
    u8 tos, struct net_device *devin);

static inline int ip_route_input(struct sk_buff *skb, __be32 dst, __be32 src,
     u8 tos, struct net_device *devin)
{
 int err;

 ;
 err = ip_route_input_noref(skb, dst, src, tos, devin);
 if (!err)
  skb_dst_force(skb);
 ;

 return err;
}

void ipv4_update_pmtu(struct sk_buff *skb, struct net *net, u32 mtu, int oif,
        u32 mark, u8 protocol, int flow_flags);
void ipv4_sk_update_pmtu(struct sk_buff *skb, struct sock *sk, u32 mtu);
void ipv4_redirect(struct sk_buff *skb, struct net *net, int oif, u32 mark,
     u8 protocol, int flow_flags);
void ipv4_sk_redirect(struct sk_buff *skb, struct sock *sk);
void ip_rt_send_redirect(struct sk_buff *skb);

unsigned int inet_addr_type(struct net *net, __be32 addr);
unsigned int inet_dev_addr_type(struct net *net, struct net_device *dev,
    __be32 addr);
void ip_rt_multicast_event(struct in_device *);
int ip_rt_ioctl(struct net *, unsigned int cmd, void *arg);
void ip_rt_get_source(u8 *src, struct sk_buff *skb, struct rtable *rt);
int ip_rt_dump(struct sk_buff *skb, struct netlink_callback *cb);

struct in_ifaddr;
void fib_add_ifaddr(struct in_ifaddr *);
void fib_del_ifaddr(struct in_ifaddr *, struct in_ifaddr *);

static inline void ip_rt_put(struct rtable *rt)
{



 (0);
 dst_release(&rt->dst);
}



extern __u8 ip_tos2prio[16];

static inline char rt_tos2priority(u8 tos)
{
 return ip_tos2prio[((tos)&0x1E)>>1];
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock8is_stateE_2827_0 {
  typedef TJP__ZN9inet_sock8is_stateE_2827_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inet_sock::_is_state __get__ZN9inet_sock8is_stateE_2827(inet_sock::_is_state *source) {
  AC::ResultBuffer< ::inet_sock::_is_state  > __result_buffer;
  typedef TJP__ZN9inet_sock8is_stateE_2827_0< ::inet_sock::_is_state , ::inet_sock , ::inet_sock::_is_state  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inet_sock::_is_state &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock7sk_markE_2828_0 {
  typedef TJP__ZN4sock7sk_markE_2828_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock7sk_markE_2828(unsigned int *source) {
  ::__u32 __result_buffer;
  typedef TJP__ZN4sock7sk_markE_2828_0< ::__u32 , ::sock , ::__u32  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u32 &)__result_buffer;
}
static inline void ip_route_connect_init(struct flowi4 *fl4, __be32 dst, __be32 src,
      u32 tos, int oif, u8 protocol,
      __be16 sport, __be16 dport,
      struct sock *sk, bool can_sleep)
{
 __u8 flow_flags = 0;




 if (__get__ZN9inet_sock8is_stateE_2827(&inet_sk(sk)->is_state).transparent)

  flow_flags |= 0x01;
 if (can_sleep)
  flow_flags |= 0x02;

 flowi4_init_output(fl4, oif, __get__ZN4sock7sk_markE_2828(&sk->sk_mark), tos, RT_SCOPE_UNIVERSE,
      protocol, flow_flags, dst, src, dport, sport);
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2831_0 {
  typedef TJP__ZN4sock11__sk_commonE_2831_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2831(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2831_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock3tosE_2832_0 {
  typedef TJP__ZN9inet_sock3tosE_2832_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN9inet_sock3tosE_2832(unsigned char *source) {
  ::__u8 __result_buffer;
  typedef TJP__ZN9inet_sock3tosE_2832_0< ::__u8 , ::inet_sock , ::__u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u8 &)__result_buffer;
}
static inline struct rtable *ip_route_newports(struct flowi4 *fl4, struct rtable *rt,
            __be16 orig_sport, __be16 orig_dport,
            __be16 sport, __be16 dport,
            struct sock *sk)
{
 if (sport != orig_sport || dport != orig_dport) {
  fl4->uli.ports.dport = dport;
  fl4->uli.ports.sport = sport;
  ip_rt_put(rt);
  flowi4_update_output(fl4, __get__ZN4sock11__sk_commonE_2831(&sk->__sk_common).skc_bound_dev_if,
         (((__get__ZN9inet_sock3tosE_2832(&inet_sk(sk)->tos))&0x1E) | sock_flag(sk, SOCK_LOCALROUTE)), fl4->daddr,
         fl4->saddr);
  security_sk_classify_flow(sk, flowi4_to_flowi(fl4));
  return ip_route_output_flow(sock_net(sk), fl4, sk);
 }
 return rt;
}

static inline int inet_iif( struct sk_buff *skb)
{
 int iif = skb_rtable(skb)->rt_iif;

 if (iif)
  return iif;
 return skb->skb_iif;
}

extern int sysctl_ip_default_ttl;

static inline int ip4_dst_hoplimit( struct dst_entry *dst)
{
 int hoplimit = dst_metric_raw(dst, RTAX_HOPLIMIT);

 if (hoplimit == 0)
  hoplimit = sysctl_ip_default_ttl;
 return hoplimit;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock8pmtudiscE_2840_0 {
  typedef TJP__ZN9inet_sock8pmtudiscE_2840_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN9inet_sock8pmtudiscE_2840(unsigned char *source) {
  ::__u8 __result_buffer;
  typedef TJP__ZN9inet_sock8pmtudiscE_2840_0< ::__u8 , ::inet_sock , ::__u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u8 &)__result_buffer;
}
static inline bool ip_sk_accept_pmtu( struct sock *sk)
{
 return __get__ZN9inet_sock8pmtudiscE_2840(&inet_sk(sk)->pmtudisc) != 4;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock8pmtudiscE_2841_0 {
  typedef TJP__ZN9inet_sock8pmtudiscE_2841_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN9inet_sock8pmtudiscE_2841(unsigned char *source) {
  ::__u8 __result_buffer;
  typedef TJP__ZN9inet_sock8pmtudiscE_2841_0< ::__u8 , ::inet_sock , ::__u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u8 &)__result_buffer;
}
static inline bool ip_sk_use_pmtu( struct sock *sk)
{
 return __get__ZN9inet_sock8pmtudiscE_2841(&inet_sk(sk)->pmtudisc) < 3;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device3mtuE_2844_0 {
  typedef TJP__ZN10net_device3mtuE_2844_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN10net_device3mtuE_2844(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN10net_device3mtuE_2844_0< unsigned int , ::net_device , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline int ip_skb_dst_mtu( struct sk_buff *skb)
{
 return (!skb->sk || ip_sk_use_pmtu(skb->sk)) ?
        dst_mtu(skb_dst(skb)) : __get__ZN10net_device3mtuE_2844(&skb_dst(skb)->dev->mtu);
}



struct sock;

struct inet_skb_parm {
  template <typename, int = 0> struct __BYPASSinet_skb_parm {};
  template <typename, int> friend struct __BYPASSinet_skb_parm;
 struct ip_options opt;
 unsigned char flags;







 u16 frag_max_size;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

static inline unsigned int ip_hdrlen( struct sk_buff *skb)
{
 return ip_hdr(skb)->ihl * 4;
}

struct ipcm_cookie {
  template <typename, int = 0> struct __BYPASSipcm_cookie {};
  template <typename, int> friend struct __BYPASSipcm_cookie;
 __be32 addr;
 int oif;
 struct ip_options_rcu *opt;
 __u8 tx_flags;
 __u8 ttl;
 __s16 tos;
 char priority;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};




struct ip_ra_chain {
  template <typename, int = 0> struct __BYPASSip_ra_chain {};
  template <typename, int> friend struct __BYPASSip_ra_chain;
 struct ip_ra_chain *next;
 struct sock *sk;
 union {
  void (*destructor)(struct sock *);
  struct sock *saved_sk;
 };
 struct callback_head rcu;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct ip_ra_chain *ip_ra_chain;
struct msghdr;
struct net_device;
struct packet_type;
struct rtable;
struct sockaddr;

int igmp_mc_proc_init(void);





int ip_build_and_send_pkt(struct sk_buff *skb, struct sock *sk,
     __be32 saddr, __be32 daddr,
     struct ip_options_rcu *opt);
int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt,
    struct net_device *orig_dev);
int ip_local_deliver(struct sk_buff *skb);
int ip_mr_input(struct sk_buff *skb);
int ip_output(struct sk_buff *skb);
int ip_mc_output(struct sk_buff *skb);
int ip_fragment(struct sk_buff *skb, int (*output)(struct sk_buff *));
int ip_do_nat(struct sk_buff *skb);
void ip_send_check(struct iphdr *ip);
int __ip_local_out(struct sk_buff *skb);
int ip_local_out(struct sk_buff *skb);
int ip_queue_xmit(struct sk_buff *skb, struct flowi *fl);
void ip_init(void);
int ip_append_data(struct sock *sk, struct flowi4 *fl4,
     int getfrag(void *from, char *to, int offset, int len,
          int odd, struct sk_buff *skb),
     void *from, int len, int protolen,
     struct ipcm_cookie *ipc,
     struct rtable **rt,
     unsigned int flags);
int ip_generic_getfrag(void *from, char *to, int offset, int len, int odd,
         struct sk_buff *skb);
ssize_t ip_append_page(struct sock *sk, struct flowi4 *fl4, struct page *page,
         int offset, size_t size, int flags);
struct sk_buff *__ip_make_skb(struct sock *sk, struct flowi4 *fl4,
         struct sk_buff_head *queue,
         struct inet_cork *cork);
int ip_send_skb(struct net *net, struct sk_buff *skb);
int ip_push_pending_frames(struct sock *sk, struct flowi4 *fl4);
void ip_flush_pending_frames(struct sock *sk);
struct sk_buff *ip_make_skb(struct sock *sk, struct flowi4 *fl4,
       int getfrag(void *from, char *to, int offset,
     int len, int odd, struct sk_buff *skb),
       void *from, int length, int transhdrlen,
       struct ipcm_cookie *ipc, struct rtable **rtp,
       unsigned int flags);

static inline struct sk_buff *ip_finish_skb(struct sock *sk, struct flowi4 *fl4)
{
 return __ip_make_skb(sk, fl4, &sk->sk_write_queue, &inet_sk(sk)->cork.base);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock3tosE_2849_0 {
  typedef TJP__ZN9inet_sock3tosE_2849_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN9inet_sock3tosE_2849(unsigned char *source) {
  ::__u8 __result_buffer;
  typedef TJP__ZN9inet_sock3tosE_2849_0< ::__u8 , ::inet_sock , ::__u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u8 &)__result_buffer;
}
static inline __u8 get_rttos(struct ipcm_cookie* ipc, struct inet_sock *inet)
{
 return (ipc->tos != -1) ? ((ipc->tos)&0x1E) : ((__get__ZN9inet_sock3tosE_2849(&inet->tos))&0x1E);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock3tosE_2853_0 {
  typedef TJP__ZN9inet_sock3tosE_2853_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN9inet_sock3tosE_2853(unsigned char *source) {
  ::__u8 __result_buffer;
  typedef TJP__ZN9inet_sock3tosE_2853_0< ::__u8 , ::inet_sock , ::__u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u8 &)__result_buffer;
}
static inline __u8 get_rtconn_flags(struct ipcm_cookie* ipc, struct sock* sk)
{
 return (ipc->tos != -1) ? (((ipc->tos)&0x1E) | sock_flag(sk, SOCK_LOCALROUTE)) : (((__get__ZN9inet_sock3tosE_2853(&inet_sk(sk)->tos))&0x1E) | sock_flag(sk, SOCK_LOCALROUTE));
}


int ip4_datagram_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len);

void ip4_datagram_release_cb(struct sock *sk);

struct ip_reply_arg {
  template <typename, int = 0> struct __BYPASSip_reply_arg {};
  template <typename, int> friend struct __BYPASSip_reply_arg;
 struct kvec iov[1];
 int flags;
 __wsum csum;
 int csumoffset;

 int bound_dev_if;
 u8 tos;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};



static inline __u8 ip_reply_arg_flowi_flags( struct ip_reply_arg *arg)
{
 return (arg->flags & 1) ? 0x01 : 0;
}

void ip_send_unicast_reply(struct net *net, struct sk_buff *skb, __be32 daddr,
      __be32 saddr, struct ip_reply_arg *arg,
      unsigned int len);

struct ipv4_config {
  template <typename, int = 0> struct __BYPASSipv4_config {};
  template <typename, int> friend struct __BYPASSipv4_config;
 int log_martians;
 int no_pmtu_disc;

  friend class ::Introspect;
  friend class ::MyIntrospect;
};

extern struct ipv4_config ipv4_config;
unsigned long snmp_fold_field(void *mib[], int offt);



static inline u64 snmp_fold_field64(void *mib[], int offt, size_t syncp_off)
{
 return snmp_fold_field(mib, offt);
}

int snmp_mib_init(void *ptr[2], size_t mibsize, size_t align);

static inline void snmp_mib_free(void *ptr[1])
{
 int i;

 (ptr == 0);
 for (i = 0; i < 1; i++) {
  free_percpu(ptr[i]);
  ptr[i] = 0;
 }
}

void inet_get_local_port_range(struct net *net, int *low, int *high);

extern unsigned long *sysctl_local_reserved_ports;
static inline int inet_is_reserved_local_port(int port)
{
 return (__builtin_constant_p((port)) ? constant_test_bit((port), (sysctl_local_reserved_ports)) : variable_test_bit((port), (sysctl_local_reserved_ports)));
}

extern int sysctl_ip_nonlocal_bind;


extern int inet_peer_threshold;
extern int inet_peer_minttl;
extern int inet_peer_maxttl;


extern int sysctl_ip_early_demux;


extern int sysctl_ip_dynaddr;

void ipfrag_init(void);

void ip_static_sysctl_init(void);

static inline bool ip_is_fragment( struct iphdr *iph)
{
 return (iph->frag_off & (( __be16)(__builtin_constant_p((__u16)((0x2000 | 0x1FFF))) ? ((__u16)( (((__u16)((0x2000 | 0x1FFF)) & (__u16)0x00ffU) << 8) | (((__u16)((0x2000 | 0x1FFF)) & (__u16)0xff00U) >> 8))) : __fswab16((0x2000 | 0x1FFF))))) != 0;
}






static inline
int ip_decrease_ttl(struct iphdr *iph)
{
 u32 check = ( u32)iph->check;
 check += ( u32)(( __be16)(__builtin_constant_p((__u16)((0x0100))) ? ((__u16)( (((__u16)((0x0100)) & (__u16)0x00ffU) << 8) | (((__u16)((0x0100)) & (__u16)0xff00U) >> 8))) : __fswab16((0x0100))));
 iph->check = ( __sum16)(check + (check>=0xFFFF));
 return --iph->ttl;
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock8pmtudiscE_2860_0 {
  typedef TJP__ZN9inet_sock8pmtudiscE_2860_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN9inet_sock8pmtudiscE_2860(unsigned char *source) {
  ::__u8 __result_buffer;
  typedef TJP__ZN9inet_sock8pmtudiscE_2860_0< ::__u8 , ::inet_sock , ::__u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u8 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock8pmtudiscE_2861_0 {
  typedef TJP__ZN9inet_sock8pmtudiscE_2861_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned char __get__ZN9inet_sock8pmtudiscE_2861(unsigned char *source) {
  ::__u8 __result_buffer;
  typedef TJP__ZN9inet_sock8pmtudiscE_2861_0< ::__u8 , ::inet_sock , ::__u8  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u8 &)__result_buffer;
}
static inline
int ip_dont_fragment(struct sock *sk, struct dst_entry *dst)
{
 return __get__ZN9inet_sock8pmtudiscE_2860(&inet_sk(sk)->pmtudisc) == 2 ||
  (__get__ZN9inet_sock8pmtudiscE_2861(&inet_sk(sk)->pmtudisc) == 1 &&
   !(dst_metric_locked(dst, RTAX_MTU)));
}

void __ip_select_ident(struct iphdr *iph, struct dst_entry *dst, int more);


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2866_0 {
  typedef TJP__ZN4sock11__sk_commonE_2866_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2866(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2866_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock2skE_2867_0 {
  typedef TJP__ZN9inet_sock2skE_2867_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock __get__ZN9inet_sock2skE_2867(sock *source) {
  AC::ResultBuffer< ::sock  > __result_buffer;
  typedef TJP__ZN9inet_sock2skE_2867_0< ::sock , ::inet_sock , ::sock  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock &)__result_buffer;
}
static inline void ip_select_ident(struct sk_buff *skb, struct dst_entry *dst, struct sock *sk)
{
 struct iphdr *iph = ip_hdr(skb);

 if ((iph->frag_off & (( __be16)(__builtin_constant_p((__u16)((0x4000))) ? ((__u16)( (((__u16)((0x4000)) & (__u16)0x00ffU) << 8) | (((__u16)((0x4000)) & (__u16)0xff00U) >> 8))) : __fswab16((0x4000))))) && !skb->local_df) {





  iph->id = (sk && __get__ZN4sock11__sk_commonE_2866(&__get__ZN9inet_sock2skE_2867(&inet_sk(sk)->sk).__sk_common).skc_daddr) ?
     (( __be16)(__builtin_constant_p((__u16)((inet_sk(sk)->inet_id++))) ? ((__u16)( (((__u16)((inet_sk(sk)->inet_id++)) & (__u16)0x00ffU) << 8) | (((__u16)((inet_sk(sk)->inet_id++)) & (__u16)0xff00U) >> 8))) : __fswab16((inet_sk(sk)->inet_id++)))) : 0;
 } else
  __ip_select_ident(iph, dst, 0);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2871_0 {
  typedef TJP__ZN4sock11__sk_commonE_2871_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2871(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2871_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock2skE_2872_0 {
  typedef TJP__ZN9inet_sock2skE_2872_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock __get__ZN9inet_sock2skE_2872(sock *source) {
  AC::ResultBuffer< ::sock  > __result_buffer;
  typedef TJP__ZN9inet_sock2skE_2872_0< ::sock , ::inet_sock , ::sock  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock7inet_idE_2873_0 {
  typedef TJP__ZN9inet_sock7inet_idE_2873_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN9inet_sock7inet_idE_2873(unsigned short int *source) {
  ::__u16 __result_buffer;
  typedef TJP__ZN9inet_sock7inet_idE_2873_0< ::__u16 , ::inet_sock , ::__u16  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u16 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock7inet_idE_2874_0 {
  typedef TJP__ZN9inet_sock7inet_idE_2874_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN9inet_sock7inet_idE_2874(unsigned short int *source) {
  ::__u16 __result_buffer;
  typedef TJP__ZN9inet_sock7inet_idE_2874_0< ::__u16 , ::inet_sock , ::__u16  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u16 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock7inet_idE_2875_0 {
  typedef TJP__ZN9inet_sock7inet_idE_2875_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN9inet_sock7inet_idE_2875(unsigned short int *source) {
  ::__u16 __result_buffer;
  typedef TJP__ZN9inet_sock7inet_idE_2875_0< ::__u16 , ::inet_sock , ::__u16  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u16 &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock7inet_idE_2876_0 {
  typedef TJP__ZN9inet_sock7inet_idE_2876_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned short int __get__ZN9inet_sock7inet_idE_2876(unsigned short int *source) {
  ::__u16 __result_buffer;
  typedef TJP__ZN9inet_sock7inet_idE_2876_0< ::__u16 , ::inet_sock , ::__u16  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::__u16 &)__result_buffer;
}
static inline void ip_select_ident_more(struct sk_buff *skb, struct dst_entry *dst, struct sock *sk, int more)
{
 struct iphdr *iph = ip_hdr(skb);

 if ((iph->frag_off & (( __be16)(__builtin_constant_p((__u16)((0x4000))) ? ((__u16)( (((__u16)((0x4000)) & (__u16)0x00ffU) << 8) | (((__u16)((0x4000)) & (__u16)0xff00U) >> 8))) : __fswab16((0x4000))))) && !skb->local_df) {
  if (sk && __get__ZN4sock11__sk_commonE_2871(&__get__ZN9inet_sock2skE_2872(&inet_sk(sk)->sk).__sk_common).skc_daddr) {
   iph->id = (( __be16)(__builtin_constant_p((__u16)((__get__ZN9inet_sock7inet_idE_2873(&inet_sk(sk)->inet_id)))) ? ((__u16)( (((__u16)((__get__ZN9inet_sock7inet_idE_2874(&inet_sk(sk)->inet_id))) & (__u16)0x00ffU) << 8) | (((__u16)((__get__ZN9inet_sock7inet_idE_2875(&inet_sk(sk)->inet_id))) & (__u16)0xff00U) >> 8))) : __fswab16((__get__ZN9inet_sock7inet_idE_2876(&inet_sk(sk)->inet_id)))));
   inet_sk(sk)->inet_id += 1 + more;
  } else
   iph->id = 0;
 } else
  __ip_select_ident(iph, dst, more);
}





static inline void ip_eth_mc_map(__be32 naddr, char *buf)
{
 __u32 addr=(__builtin_constant_p((__u32)(( __u32)(__be32)(naddr))) ? ((__u32)( (((__u32)(( __u32)(__be32)(naddr)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(naddr)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(naddr)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(naddr)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(naddr)));
 buf[0]=0x01;
 buf[1]=0x00;
 buf[2]=0x5e;
 buf[5]=addr&0xFF;
 addr>>=8;
 buf[4]=addr&0xFF;
 addr>>=8;
 buf[3]=addr&0x7F;
}






static inline void ip_ib_mc_map(__be32 naddr, unsigned char *broadcast, char *buf)
{
 __u32 addr;
 unsigned char scope = broadcast[5] & 0xF;

 buf[0] = 0;
 buf[1] = 0xff;
 buf[2] = 0xff;
 buf[3] = 0xff;
 addr = (__builtin_constant_p((__u32)(( __u32)(__be32)(naddr))) ? ((__u32)( (((__u32)(( __u32)(__be32)(naddr)) & (__u32)0x000000ffUL) << 24) | (((__u32)(( __u32)(__be32)(naddr)) & (__u32)0x0000ff00UL) << 8) | (((__u32)(( __u32)(__be32)(naddr)) & (__u32)0x00ff0000UL) >> 8) | (((__u32)(( __u32)(__be32)(naddr)) & (__u32)0xff000000UL) >> 24))) : __fswab32(( __u32)(__be32)(naddr)));
 buf[4] = 0xff;
 buf[5] = 0x10 | scope;
 buf[6] = 0x40;
 buf[7] = 0x1b;
 buf[8] = broadcast[8];
 buf[9] = broadcast[9];
 buf[10] = 0;
 buf[11] = 0;
 buf[12] = 0;
 buf[13] = 0;
 buf[14] = 0;
 buf[15] = 0;
 buf[19] = addr & 0xff;
 addr >>= 8;
 buf[18] = addr & 0xff;
 addr >>= 8;
 buf[17] = addr & 0xff;
 addr >>= 8;
 buf[16] = addr & 0x0f;
}

static inline void ip_ipgre_mc_map(__be32 naddr, unsigned char *broadcast, char *buf)
{
 if ((broadcast[0] | broadcast[1] | broadcast[2] | broadcast[3]) != 0)
  memcpy(buf, broadcast, 4);
 else
  memcpy(buf, &naddr, sizeof(naddr));
}






template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2878_0 {
  typedef TJP__ZN4sock11__sk_commonE_2878_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2878(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2878_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}
static __inline__ void inet_reset_saddr(struct sock *sk)
{
 inet_sk(sk)->sk.__sk_common.skc_rcv_saddr = inet_sk(sk)->inet_saddr = 0;

 if (__get__ZN4sock11__sk_commonE_2878(&sk->__sk_common).skc_family == 10) {
  struct ipv6_pinfo *np = inet6_sk(sk);

  memset(&np->saddr, 0, sizeof(np->saddr));
  memset(&sk->__sk_common.skc_v6_rcv_saddr, 0, sizeof(sk->__sk_common.skc_v6_rcv_saddr));
 }

}




template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock11__sk_commonE_2880_0 {
  typedef TJP__ZN4sock11__sk_commonE_2880_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline sock_common __get__ZN4sock11__sk_commonE_2880(sock_common *source) {
  AC::ResultBuffer< ::sock_common  > __result_buffer;
  typedef TJP__ZN4sock11__sk_commonE_2880_0< ::sock_common , ::sock , ::sock_common  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::sock_common &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN9inet_sock8is_stateE_2882_0 {
  typedef TJP__ZN9inet_sock8is_stateE_2882_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inet_sock::_is_state __get__ZN9inet_sock8is_stateE_2882(inet_sock::_is_state *source) {
  AC::ResultBuffer< ::inet_sock::_is_state  > __result_buffer;
  typedef TJP__ZN9inet_sock8is_stateE_2882_0< ::inet_sock::_is_state , ::inet_sock , ::inet_sock::_is_state  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inet_sock::_is_state &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10ipv6_pinfo9pi_state2E_2884_0 {
  typedef TJP__ZN10ipv6_pinfo9pi_state2E_2884_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline ipv6_pinfo::_pi_state2 __get__ZN10ipv6_pinfo9pi_state2E_2884(ipv6_pinfo::_pi_state2 *source) {
  AC::ResultBuffer< ::ipv6_pinfo::_pi_state2  > __result_buffer;
  typedef TJP__ZN10ipv6_pinfo9pi_state2E_2884_0< ::ipv6_pinfo::_pi_state2 , ::ipv6_pinfo , ::ipv6_pinfo::_pi_state2  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::ipv6_pinfo::_pi_state2 &)__result_buffer;
}
static inline int sk_mc_loop(struct sock *sk)
{
 if (!sk)
  return 1;
 switch (__get__ZN4sock11__sk_commonE_2880(&sk->__sk_common).skc_family) {
 case 2:



  return __get__ZN9inet_sock8is_stateE_2882(&inet_sk(sk)->is_state).mc_loop;


 case 10:



  return __get__ZN10ipv6_pinfo9pi_state2E_2884(&inet6_sk(sk)->pi_state2).mc_loop;


 }
 (1);
 return 1;
}

bool ip_call_ra_chain(struct sk_buff *skb);





enum ip_defrag_users {
 IP_DEFRAG_LOCAL_DELIVER,
 IP_DEFRAG_CALL_RA_CHAIN,
 IP_DEFRAG_CONNTRACK_IN,
 __IP_DEFRAG_CONNTRACK_IN_END = IP_DEFRAG_CONNTRACK_IN + ((u16)(~0U)),
 IP_DEFRAG_CONNTRACK_OUT,
 __IP_DEFRAG_CONNTRACK_OUT_END = IP_DEFRAG_CONNTRACK_OUT + ((u16)(~0U)),
 IP_DEFRAG_CONNTRACK_BRIDGE_IN,
 __IP_DEFRAG_CONNTRACK_BRIDGE_IN = IP_DEFRAG_CONNTRACK_BRIDGE_IN + ((u16)(~0U)),
 IP_DEFRAG_VS_IN,
 IP_DEFRAG_VS_OUT,
 IP_DEFRAG_VS_FWD,
 IP_DEFRAG_AF_PACKET,
 IP_DEFRAG_MACVLAN,
};

int ip_defrag(struct sk_buff *skb, u32 user);

struct sk_buff *ip_check_defrag(struct sk_buff *skb, u32 user);






int ip_frag_mem(struct net *net);
int ip_frag_nqueues(struct net *net);





int ip_forward(struct sk_buff *skb);





void ip_options_build(struct sk_buff *skb, struct ip_options *opt,
        __be32 daddr, struct rtable *rt, int is_frag);
int ip_options_echo(struct ip_options *dopt, struct sk_buff *skb);
void ip_options_fragment(struct sk_buff *skb);
int ip_options_compile(struct net *net, struct ip_options *opt,
         struct sk_buff *skb);
int ip_options_get(struct net *net, struct ip_options_rcu **optp,
     unsigned char *data, int optlen);
int ip_options_get_from_user(struct net *net, struct ip_options_rcu **optp,
        unsigned char *data, int optlen);
void ip_options_undo(struct ip_options *opt);
void ip_forward_options(struct sk_buff *skb);
int ip_options_rcv_srr(struct sk_buff *skb);





void ipv4_pktinfo_prepare( struct sock *sk, struct sk_buff *skb);
void ip_cmsg_recv(struct msghdr *msg, struct sk_buff *skb);
int ip_cmsg_send(struct net *net, struct msghdr *msg,
   struct ipcm_cookie *ipc, bool allow_ipv6);
int ip_setsockopt(struct sock *sk, int level, int optname, char *optval,
    unsigned int optlen);
int ip_getsockopt(struct sock *sk, int level, int optname, char *optval,
    int *optlen);
int compat_ip_setsockopt(struct sock *sk, int level, int optname,
    char *optval, unsigned int optlen);
int compat_ip_getsockopt(struct sock *sk, int level, int optname,
    char *optval, int *optlen);
int ip_ra_control(struct sock *sk, unsigned char on,
    void (*destructor)(struct sock *));

int ip_recv_error(struct sock *sk, struct msghdr *msg, int len, int *addr_len);
void ip_icmp_error(struct sock *sk, struct sk_buff *skb, int err, __be16 port,
     u32 info, u8 *payload);
void ip_local_error(struct sock *sk, int err, __be32 daddr, __be16 dport,
      u32 info);


int ip_misc_proc_init(void);



struct napi_struct;
extern unsigned int sysctl_net_busy_read __attribute__((__section__(".data..read_mostly")));
extern unsigned int sysctl_net_busy_poll __attribute__((__section__(".data..read_mostly")));





static inline bool net_busy_loop_on(void)
{
 return sysctl_net_busy_poll;
}
static inline u64 busy_loop_us_clock(void)
{
 return sched_clock() >> 10;
}



template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock10sk_ll_usecE_2886_0 {
  typedef TJP__ZN4sock10sk_ll_usecE_2886_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock10sk_ll_usecE_2886(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN4sock10sk_ll_usecE_2886_0< unsigned int , ::sock , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline unsigned long sk_busy_loop_end_time(struct sock *sk)
{
 return busy_loop_us_clock() + (__get__ZN4sock10sk_ll_usecE_2886(&sk->sk_ll_usec));
}


static inline unsigned long busy_loop_end_time(void)
{
 return busy_loop_us_clock() + (sysctl_net_busy_poll);
}


template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock10sk_ll_usecE_2888_0 {
  typedef TJP__ZN4sock10sk_ll_usecE_2888_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock10sk_ll_usecE_2888(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN4sock10sk_ll_usecE_2888_0< unsigned int , ::sock , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock10sk_napi_idE_2889_0 {
  typedef TJP__ZN4sock10sk_napi_idE_2889_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock10sk_napi_idE_2889(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN4sock10sk_napi_idE_2889_0< unsigned int , ::sock , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}
static inline bool sk_can_busy_loop(struct sock *sk)
{
 return __get__ZN4sock10sk_ll_usecE_2888(&sk->sk_ll_usec) && __get__ZN4sock10sk_napi_idE_2889(&sk->sk_napi_id) &&
        !need_resched() && !signal_pending(get_current());
}


static inline bool busy_loop_timeout(unsigned long end_time)
{
 unsigned long now = busy_loop_us_clock();

 return (({ unsigned long __dummy; typeof(now) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ({ unsigned long __dummy; typeof(end_time) __dummy2; (void)(&__dummy == &__dummy2); 1; }) && ((long)((end_time) - (now)) < 0));
}





template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN4sock10sk_napi_idE_2891_0 {
  typedef TJP__ZN4sock10sk_napi_idE_2891_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned int __get__ZN4sock10sk_napi_idE_2891(unsigned int *source) {
  unsigned int __result_buffer;
  typedef TJP__ZN4sock10sk_napi_idE_2891_0< unsigned int , ::sock , unsigned int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN10net_device10netdev_opsE_2892_0 {
  typedef TJP__ZN10net_device10netdev_opsE_2892_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline net_device_ops * __get__ZN10net_device10netdev_opsE_2892(net_device_ops * *source) {
  ::net_device_ops *__result_buffer;
  typedef TJP__ZN10net_device10netdev_opsE_2892_0< ::net_device_ops *, ::net_device , ::net_device_ops * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::net_device_ops *&)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2897_0 {
  typedef TJP__ZN3net3mibE_2897_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2897(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2897_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2899_0 {
  typedef TJP__ZN3net3mibE_2899_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2899(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2899_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2901_0 {
  typedef TJP__ZN3net3mibE_2901_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2901(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2901_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2903_0 {
  typedef TJP__ZN3net3mibE_2903_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2903(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2903_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2905_0 {
  typedef TJP__ZN3net3mibE_2905_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2905(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2905_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2907_0 {
  typedef TJP__ZN3net3mibE_2907_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2907(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2907_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2909_0 {
  typedef TJP__ZN3net3mibE_2909_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2909(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2909_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2911_0 {
  typedef TJP__ZN3net3mibE_2911_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2911(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2911_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2913_0 {
  typedef TJP__ZN3net3mibE_2913_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2913(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2913_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2915_0 {
  typedef TJP__ZN3net3mibE_2915_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2915(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2915_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2917_0 {
  typedef TJP__ZN3net3mibE_2917_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2917(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2917_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2919_0 {
  typedef TJP__ZN3net3mibE_2919_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2919(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2919_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2921_0 {
  typedef TJP__ZN3net3mibE_2921_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2921(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2921_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2923_0 {
  typedef TJP__ZN3net3mibE_2923_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2923(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2923_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2925_0 {
  typedef TJP__ZN3net3mibE_2925_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2925(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2925_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2927_0 {
  typedef TJP__ZN3net3mibE_2927_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2927(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2927_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2929_0 {
  typedef TJP__ZN3net3mibE_2929_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2929(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2929_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2931_0 {
  typedef TJP__ZN3net3mibE_2931_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2931(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2931_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2933_0 {
  typedef TJP__ZN3net3mibE_2933_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2933(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2933_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2935_0 {
  typedef TJP__ZN3net3mibE_2935_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2935(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2935_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2937_0 {
  typedef TJP__ZN3net3mibE_2937_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2937(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2937_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2939_0 {
  typedef TJP__ZN3net3mibE_2939_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2939(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2939_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2941_0 {
  typedef TJP__ZN3net3mibE_2941_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2941(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2941_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2943_0 {
  typedef TJP__ZN3net3mibE_2943_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2943(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2943_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2945_0 {
  typedef TJP__ZN3net3mibE_2945_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2945(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2945_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2947_0 {
  typedef TJP__ZN3net3mibE_2947_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2947(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2947_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2949_0 {
  typedef TJP__ZN3net3mibE_2949_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2949(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2949_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2951_0 {
  typedef TJP__ZN3net3mibE_2951_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2951(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2951_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2953_0 {
  typedef TJP__ZN3net3mibE_2953_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2953(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2953_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2955_0 {
  typedef TJP__ZN3net3mibE_2955_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2955(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2955_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2957_0 {
  typedef TJP__ZN3net3mibE_2957_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2957(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2957_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2959_0 {
  typedef TJP__ZN3net3mibE_2959_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2959(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2959_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2961_0 {
  typedef TJP__ZN3net3mibE_2961_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2961(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2961_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2963_0 {
  typedef TJP__ZN3net3mibE_2963_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2963(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2963_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2965_0 {
  typedef TJP__ZN3net3mibE_2965_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2965(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2965_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2967_0 {
  typedef TJP__ZN3net3mibE_2967_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2967(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2967_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2969_0 {
  typedef TJP__ZN3net3mibE_2969_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2969(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2969_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2971_0 {
  typedef TJP__ZN3net3mibE_2971_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2971(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2971_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2973_0 {
  typedef TJP__ZN3net3mibE_2973_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2973(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2973_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2975_0 {
  typedef TJP__ZN3net3mibE_2975_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2975(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2975_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2977_0 {
  typedef TJP__ZN3net3mibE_2977_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2977(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2977_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2979_0 {
  typedef TJP__ZN3net3mibE_2979_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2979(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2979_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2981_0 {
  typedef TJP__ZN3net3mibE_2981_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2981(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2981_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2983_0 {
  typedef TJP__ZN3net3mibE_2983_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2983(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2983_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2985_0 {
  typedef TJP__ZN3net3mibE_2985_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2985(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2985_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2987_0 {
  typedef TJP__ZN3net3mibE_2987_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2987(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2987_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2989_0 {
  typedef TJP__ZN3net3mibE_2989_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2989(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2989_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN3net3mibE_2991_0 {
  typedef TJP__ZN3net3mibE_2991_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline netns_mib __get__ZN3net3mibE_2991(netns_mib *source) {
  AC::ResultBuffer< ::netns_mib  > __result_buffer;
  typedef TJP__ZN3net3mibE_2991_0< ::netns_mib , ::net , ::netns_mib  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::netns_mib &)__result_buffer;
}
static inline bool sk_busy_loop(struct sock *sk, int nonblock)
{
 unsigned long end_time = !nonblock ? sk_busy_loop_end_time(sk) : 0;
 struct net_device_ops *ops;
 struct napi_struct *napi;
 int rc = _false;





 ;

 napi = napi_by_id(__get__ZN4sock10sk_napi_idE_2891(&sk->sk_napi_id));
 if (!napi)
  goto out;

 ops = __get__ZN10net_device10netdev_opsE_2892(&napi->dev->netdev_ops);
 if (!ops->ndo_busy_poll)
  goto out;

 do {
  rc = ops->ndo_busy_poll(napi);

  if (rc == -1)
   break;

  if (rc > 0)

   do { do { void *__vpp_verify = (typeof((&(((sock_net(sk))->mib.net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) + 0))0; (void)__vpp_verify; } while (0); switch(sizeof(((sock_net(sk))->mib.net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) { case 1: do { typedef typeof((((sock_net(sk))->mib.net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) pao_T__; int pao_ID__ = (__builtin_constant_p((rc)) && (((rc)) == 1 || ((rc)) == -1)) ? (int)((rc)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((rc)); (void)pao_tmp__; } switch (sizeof((((sock_net(sk))->mib.net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2897(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2899(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2901(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "qi" ((pao_T__)((rc)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2903(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2905(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2907(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "ri" ((pao_T__)((rc)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2909(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2911(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2913(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "ri" ((pao_T__)((rc)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2915(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2917(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2919(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "re" ((pao_T__)((rc)))); break; default: __bad_percpu_size(); } } while (0);break; case 2: do { typedef typeof((((sock_net(sk))->mib.net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) pao_T__; int pao_ID__ = (__builtin_constant_p((rc)) && (((rc)) == 1 || ((rc)) == -1)) ? (int)((rc)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((rc)); (void)pao_tmp__; } switch (sizeof((((sock_net(sk))->mib.net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2921(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2923(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2925(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "qi" ((pao_T__)((rc)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2927(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2929(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2931(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "ri" ((pao_T__)((rc)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2933(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2935(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2937(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "ri" ((pao_T__)((rc)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2939(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2941(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2943(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "re" ((pao_T__)((rc)))); break; default: __bad_percpu_size(); } } while (0);break; case 4: do { typedef typeof((((sock_net(sk))->mib.net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) pao_T__; int pao_ID__ = (__builtin_constant_p((rc)) && (((rc)) == 1 || ((rc)) == -1)) ? (int)((rc)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((rc)); (void)pao_tmp__; } switch (sizeof((((sock_net(sk))->mib.net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2945(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2947(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2949(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "qi" ((pao_T__)((rc)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2951(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2953(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2955(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "ri" ((pao_T__)((rc)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2957(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2959(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2961(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "ri" ((pao_T__)((rc)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2963(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2965(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2967(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "re" ((pao_T__)((rc)))); break; default: __bad_percpu_size(); } } while (0);break; case 8: do { typedef typeof((((sock_net(sk))->mib.net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) pao_T__; int pao_ID__ = (__builtin_constant_p((rc)) && (((rc)) == 1 || ((rc)) == -1)) ? (int)((rc)) : 0; if (0) { pao_T__ pao_tmp__; pao_tmp__ = ((rc)); (void)pao_tmp__; } switch (sizeof((((sock_net(sk))->mib.net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))) { case 1: if (pao_ID__ == 1) asm("incb ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2969(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decb ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2971(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addb %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2973(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "qi" ((pao_T__)((rc)))); break; case 2: if (pao_ID__ == 1) asm("incw ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2975(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decw ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2977(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addw %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2979(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "ri" ((pao_T__)((rc)))); break; case 4: if (pao_ID__ == 1) asm("incl ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2981(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decl ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2983(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addl %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2985(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "ri" ((pao_T__)((rc)))); break; case 8: if (pao_ID__ == 1) asm("incq ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2987(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else if (pao_ID__ == -1) asm("decq ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2989(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS])))); else asm("addq %1, ""%%""gs"":" "%P" "0" : "+m" (((__get__ZN3net3mibE_2991(&(sock_net(sk))->mib).net_statistics[0]->mibs[LINUX_MIB_BUSYPOLLRXPACKETS]))) : "re" ((pao_T__)((rc)))); break; default: __bad_percpu_size(); } } while (0);break; default: __bad_size_call_parameter();break; } } while (0)
                                      ;
  cpu_relax();

 } while (!nonblock && skb_queue_empty(&sk->sk_receive_queue) &&
   !need_resched() && !busy_loop_timeout(end_time));

 rc = !skb_queue_empty(&sk->sk_receive_queue);
out:
 ;
 return rc;
}


static inline void skb_mark_napi_id(struct sk_buff *skb,
        struct napi_struct *napi)
{
 skb->napi_id = napi->napi_id;
}


static inline void sk_mark_napi_id(struct sock *sk, struct sk_buff *skb)
{
 sk->sk_napi_id = skb->napi_id;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN5inode5i_inoE_2994_0 {
  typedef TJP__ZN5inode5i_inoE_2994_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return false;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return false;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline unsigned long int __get__ZN5inode5i_inoE_2994(unsigned long int *source) {
  unsigned long int __result_buffer;
  typedef TJP__ZN5inode5i_inoE_2994_0< unsigned long int , ::inode , unsigned long int  > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (unsigned long int &)__result_buffer;
}

template <typename TResult, typename TThat, typename TTarget> struct TJP__ZN6dentry7d_inodeE_2995_0 {
  typedef TJP__ZN6dentry7d_inodeE_2995_0 __TJP;
  typedef TResult Result;
  typedef TThat   That;
  typedef TTarget Target;
  static const AC::JPType JPTYPE = (AC::JPType)33554432;
  struct Res {
    typedef TResult Type;
    typedef TResult ReferredType;
  };

  Result *_result;
  Result *_source;

  inline bool is_array() {return false;}
  inline int dimension() {return 0;}
  inline bool is_pointer() {return true;}
  inline bool with_index() {return false;}
  inline bool is_base_record() {return true;}
  inline int base_size() {return 0;}
  inline Result *result() {return (Result*)_result;}
  inline Result *source() {return (Result*)_source;}

};

inline inode * __get__ZN6dentry7d_inodeE_2995(inode * *source) {
  ::inode *__result_buffer;
  typedef TJP__ZN6dentry7d_inodeE_2995_0< ::inode *, ::dentry , ::inode * > __TJP;
  __TJP tjp;
  tjp._result = &(__TJP::Result&)__result_buffer;
  tjp._source =  (__TJP::Result*)source;
  AC::invoke_MyIntrospect_Introspect__a0_around<__TJP> (&tjp);
  return (::inode *&)__result_buffer;
}
char *sockfs_dname(struct dentry *dentry, char *buffer, int buflen)
{
 return dynamic_dname(dentry, buffer, buflen, "socket:[%lu]",
    __get__ZN5inode5i_inoE_2994(&__get__ZN6dentry7d_inodeE_2995(&dentry->d_inode)->i_ino));
}

#ifdef __ac_FIRST_FILE__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11_net_socket_cxx__
#ifdef __ac_need__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11_MyIntrospect_ah__
#ifndef __ac_have__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11_MyIntrospect_ah__
#define __ac_have__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11_MyIntrospect_ah__
#include "addr.h"

class Introspect {public:
  template <typename, int = 0> struct __BYPASSIntrospect {};
  template <typename, int> friend struct __BYPASSIntrospect;
private:
    

    
public: template <typename JoinPoint> void __a0_around (JoinPoint *tjp) {
  typedef typename JoinPoint::That __JP_That;
  typedef typename JoinPoint::Target __JP_Target;
  typedef typename JoinPoint::Result __JP_Result;

        void *addr, *obj;
        bool is_array = tjp->is_array();
        int dim;
        unsigned long size;
        
        if (is_array && !tjp->with_index()) {
            dim = tjp->dimension();

            if (dim > 0) {
                // base[dim]
                size = tjp->base_size() * dim;
            }
            else {
                // base[]
                size = 4096; // XXX
            }
        }
        else {
            // primitive type, struct, and union
            size = sizeof(__JP_Result);
        }

        addr = g_map(tjp->source(), size);
        obj = is_array ? &addr : addr;

        // assume the pointer of a primitive type as an array
        // excect when it is used with an index
        if (tjp->is_pointer() && !tjp->with_index() &&
            !tjp->is_base_record()) {
            void *ptr = *(void **)obj;

            addr = g_map(ptr, 2048); // XXX
            obj = &addr;
        }

        *tjp->result() = *(__JP_Result *)obj;
    }
private:

};
class MyIntrospect : public Introspect {public:
  template <typename, int = 0> struct __BYPASSMyIntrospect {};
  template <typename, int> friend struct __BYPASSMyIntrospect;
private:
    


public:
  static MyIntrospect *aspectof () {
    static MyIntrospect __instance;
    return &__instance;
  }
  static MyIntrospect *aspectOf () {
    return aspectof ();
  }
private:
};
namespace AC {
  template <class JoinPoint>
  __attribute((always_inline)) inline void invoke_MyIntrospect_Introspect__a0_around (JoinPoint *tjp) {
    ((::Introspect*)::MyIntrospect::aspectof())->__a0_around (tjp);
  }
} 

#endif
#endif
#undef __ac_FIRST__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11__
#undef __ac_FIRST_FILE__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11_net_socket_cxx__
#endif // __ac_FIRST_FILE__usr_local_etc_transcallX453_5_1_orig_libos_3_13_11_net_socket_cxx__
